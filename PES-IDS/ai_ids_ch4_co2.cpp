#include "ai_ids_ch4_co2.hpp"
    
static double *LegP1 = NULL;
static double *LegP2 = NULL;

static int lmax_bond = 16;
static int lmax_n2   = 12;

static gsl_sf_legendre_t norm = GSL_SF_LEGENDRE_NONE;
static double csphase = -1; // to include Condon-Shortley phase

static Eigen::Vector3cd tmp;

static double cosT1, cosT2;
static double sinP1_1, sinP1_2, sinP1_3, sinP1_4, sinP1_5, sinP1_6, sinP1_7, sinP1_8, sinP1_9, sinP1_10, sinP1_11, sinP1_12, sinP1_13;
static double sinP2_1, sinP2_2, sinP2_3, sinP2_4, sinP2_5, sinP2_6, sinP2_7, sinP2_8, sinP2_9, sinP2_10, sinP2_11, sinP2_12, sinP2_13;
static double cosP1_1, cosP1_2, cosP1_3, cosP1_4, cosP1_5, cosP1_6, cosP1_7, cosP1_8, cosP1_9, cosP1_10, cosP1_11, cosP1_12, cosP1_13;
static double cosP2_1, cosP2_2, cosP2_3, cosP2_4, cosP2_5, cosP2_6, cosP2_7, cosP2_8, cosP2_9, cosP2_10, cosP2_11, cosP2_12, cosP2_13;


// Eigen::Vector3cd AI_IDS_ch4_co2::tmp;
	
// Eigen::Vector3d AI_IDS_ch4_co2::dipole_vector(std::vector<double> const& q) {
//     assert(q.size() == 5 && "ERROR: expected 5 coordinates");
// 
//     Eigen::Vector3d res;
//     ids(res, q[0], q[1], q[2], q[3], q[4]);
//     return res;
// }

static void idsbf_0_0_0_1_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_0_2_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_0_2_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_0_4_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_0_4_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_0_6_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_0_6_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_0_8_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_0_8_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_0_10_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_0_10_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_0_12_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_0_12_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_0_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_0_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_2_1_0_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_2_1_2_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_2_2_2_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_2_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_2_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_2_4_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_2_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_2_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_4_1_0_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_4_1_2_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_4_2_2_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_4_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_4_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_4_4_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_4_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_4_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_4_6_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_4_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_4_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_6_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_6_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_6_4_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_6_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_6_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_6_6_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_6_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_6_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_6_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_6_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_6_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_8_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_8_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_8_6_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_8_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_8_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_8_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_8_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_8_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_8_10_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_8_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_8_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_10_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_10_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_10_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_10_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_10_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_10_10_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_10_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_10_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_10_12_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_10_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_12_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_12_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_12_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_12_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_3_12_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_0_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_0_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_2_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_2_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_2_3_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_2_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_2_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_2_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_2_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_2_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_4_0_1_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_4_1_1_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_4_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_4_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_4_3_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_4_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_4_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_4_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_4_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_4_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_4_7_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_4_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_4_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_3_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_7_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_9_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_6_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_8_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_8_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_8_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_8_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_8_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_8_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_8_9_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_8_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_8_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_8_11_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_8_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_8_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_10_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_10_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_10_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_10_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_10_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_10_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_10_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_10_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_10_13_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_10_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_12_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_12_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_12_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_4_12_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_0_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_0_6_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_0_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_2_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_2_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_2_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_2_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_2_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_2_7_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_2_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_2_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_2_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_3_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_7_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_9_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_10_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_4_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_0_1_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_1_1_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_3_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_7_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_9_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_11_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_6_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_3_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_7_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_9_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_11_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_13_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_8_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_10_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_10_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_10_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_10_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_10_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_10_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_10_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_6_10_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_0_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_0_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_2_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_2_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_2_6_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_2_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_2_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_2_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_2_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_2_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_4_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_4_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_4_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_4_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_4_6_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_4_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_4_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_4_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_4_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_4_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_4_10_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_4_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_4_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_1_0_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_1_2_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_10_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_12_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_6_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_8_1_2_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_8_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_8_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_8_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_8_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_8_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_8_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_8_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_8_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_8_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_8_12_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_8_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_7_10_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_0_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_0_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_2_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_2_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_2_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_2_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_2_9_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_2_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_2_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_4_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_4_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_4_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_4_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_4_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_4_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_4_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_4_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_4_11_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_4_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_4_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_6_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_6_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_6_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_6_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_6_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_8_8_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_0_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_0_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_2_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_2_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_2_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_2_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_2_10_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_2_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_2_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_4_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_4_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_4_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_4_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_4_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_4_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_4_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_4_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_4_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_6_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_6_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_10_1_0_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_9_12_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_10_0_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_10_0_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_10_2_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_10_2_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_10_2_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_10_2_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_10_2_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_10_2_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_10_4_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_10_4_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_10_4_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_10_4_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf);
static void idsbf_10_6_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf);

static double radcoeff_0_0_0_1_0(double R);
static double radcoeff_0_2_2_1_0(double R);
static double radcoeff_0_2_2_3_0(double R);
static double radcoeff_0_4_4_3_0(double R);
static double radcoeff_0_4_4_5_0(double R);
static double radcoeff_0_6_6_5_0(double R);
static double radcoeff_0_6_6_7_0(double R);
static double radcoeff_0_8_8_7_0(double R);
static double radcoeff_0_8_8_9_0(double R);
static double radcoeff_0_10_10_9_0(double R);
static double radcoeff_0_10_10_11_0(double R);
static double radcoeff_0_12_12_11_0(double R);
static double radcoeff_0_12_12_13_0(double R);
static double radcoeff_3_2_5_4_0(double R);
static double radcoeff_4_0_4_3_0(double R);
static double radcoeff_4_0_4_5_0(double R);
static double radcoeff_4_2_2_1_0(double R);
static double radcoeff_4_2_2_3_0(double R);
static double radcoeff_4_2_3_3_0(double R);
static double radcoeff_4_2_4_3_0(double R);
static double radcoeff_4_2_4_5_0(double R);
static double radcoeff_4_2_5_5_0(double R);
static double radcoeff_4_2_6_5_0(double R);
static double radcoeff_4_2_6_7_0(double R);
static double radcoeff_4_4_0_1_0(double R);
static double radcoeff_4_4_1_1_0(double R);
static double radcoeff_4_4_2_1_0(double R);
static double radcoeff_4_4_2_3_0(double R);
static double radcoeff_4_4_3_3_0(double R);
static double radcoeff_4_4_4_3_0(double R);
static double radcoeff_4_4_4_5_0(double R);
static double radcoeff_4_4_5_5_0(double R);
static double radcoeff_4_4_6_5_0(double R);
static double radcoeff_4_4_6_7_0(double R);
static double radcoeff_4_4_7_7_0(double R);
static double radcoeff_4_4_8_7_0(double R);
static double radcoeff_4_4_8_9_0(double R);
static double radcoeff_4_6_2_1_0(double R);
static double radcoeff_4_6_2_3_0(double R);
static double radcoeff_4_6_3_3_0(double R);
static double radcoeff_4_6_4_3_0(double R);
static double radcoeff_4_6_4_5_0(double R);
static double radcoeff_4_6_5_5_0(double R);
static double radcoeff_4_6_6_5_0(double R);
static double radcoeff_4_6_6_7_0(double R);
static double radcoeff_4_6_7_7_0(double R);
static double radcoeff_4_6_8_7_0(double R);
static double radcoeff_4_6_8_9_0(double R);
static double radcoeff_4_6_9_9_0(double R);
static double radcoeff_4_6_10_9_0(double R);
static double radcoeff_4_6_10_11_0(double R);
static double radcoeff_4_8_4_3_0(double R);
static double radcoeff_4_8_4_5_0(double R);
static double radcoeff_4_8_6_5_0(double R);
static double radcoeff_4_8_6_7_0(double R);
static double radcoeff_4_8_8_7_0(double R);
static double radcoeff_4_8_8_9_0(double R);
static double radcoeff_4_8_9_9_0(double R);
static double radcoeff_4_8_10_9_0(double R);
static double radcoeff_4_8_10_11_0(double R);
static double radcoeff_4_8_11_11_0(double R);
static double radcoeff_4_8_12_11_0(double R);
static double radcoeff_4_8_12_13_0(double R);
static double radcoeff_4_10_6_5_0(double R);
static double radcoeff_4_10_6_7_0(double R);
static double radcoeff_4_10_8_7_0(double R);
static double radcoeff_4_10_8_9_0(double R);
static double radcoeff_4_10_10_9_0(double R);
static double radcoeff_4_10_10_11_0(double R);
static double radcoeff_4_10_12_11_0(double R);
static double radcoeff_4_10_12_13_0(double R);
static double radcoeff_4_10_13_13_0(double R);
static double radcoeff_4_10_14_13_0(double R);
static double radcoeff_4_12_10_9_0(double R);
static double radcoeff_4_12_12_11_0(double R);
static double radcoeff_4_12_12_13_0(double R);
static double radcoeff_4_12_14_13_0(double R);
static double radcoeff_6_0_6_5_0(double R);
static double radcoeff_6_0_6_7_0(double R);
static double radcoeff_6_2_4_3_0(double R);
static double radcoeff_6_2_4_5_0(double R);
static double radcoeff_6_2_5_5_0(double R);
static double radcoeff_6_2_6_5_0(double R);
static double radcoeff_6_2_6_7_0(double R);
static double radcoeff_6_2_7_7_0(double R);
static double radcoeff_6_2_8_7_0(double R);
static double radcoeff_6_2_8_9_0(double R);
static double radcoeff_6_4_2_1_0(double R);
static double radcoeff_6_4_2_3_0(double R);
static double radcoeff_6_4_3_3_0(double R);
static double radcoeff_6_4_4_3_0(double R);
static double radcoeff_6_4_4_5_0(double R);
static double radcoeff_6_4_5_5_0(double R);
static double radcoeff_6_4_6_5_0(double R);
static double radcoeff_6_4_6_7_0(double R);
static double radcoeff_6_4_7_7_0(double R);
static double radcoeff_6_4_8_7_0(double R);
static double radcoeff_6_4_8_9_0(double R);
static double radcoeff_6_4_9_9_0(double R);
static double radcoeff_6_4_10_9_0(double R);
static double radcoeff_6_4_10_11_0(double R);
static double radcoeff_6_6_0_1_0(double R);
static double radcoeff_6_6_1_1_0(double R);
static double radcoeff_6_6_2_1_0(double R);
static double radcoeff_6_6_2_3_0(double R);
static double radcoeff_6_6_3_3_0(double R);
static double radcoeff_6_6_4_3_0(double R);
static double radcoeff_6_6_4_5_0(double R);
static double radcoeff_6_6_5_5_0(double R);
static double radcoeff_6_6_6_5_0(double R);
static double radcoeff_6_6_6_7_0(double R);
static double radcoeff_6_6_7_7_0(double R);
static double radcoeff_6_6_8_7_0(double R);
static double radcoeff_6_6_8_9_0(double R);
static double radcoeff_6_6_9_9_0(double R);
static double radcoeff_6_6_10_9_0(double R);
static double radcoeff_6_6_10_11_0(double R);
static double radcoeff_6_6_11_11_0(double R);
static double radcoeff_6_6_12_11_0(double R);
static double radcoeff_6_6_12_13_0(double R);
static double radcoeff_6_8_2_1_0(double R);
static double radcoeff_6_8_2_3_0(double R);
static double radcoeff_6_8_3_3_0(double R);
static double radcoeff_6_8_4_3_0(double R);
static double radcoeff_6_8_4_5_0(double R);
static double radcoeff_6_8_5_5_0(double R);
static double radcoeff_6_8_6_5_0(double R);
static double radcoeff_6_8_6_7_0(double R);
static double radcoeff_6_8_7_7_0(double R);
static double radcoeff_6_8_8_7_0(double R);
static double radcoeff_6_8_8_9_0(double R);
static double radcoeff_6_8_9_9_0(double R);
static double radcoeff_6_8_10_9_0(double R);
static double radcoeff_6_8_10_11_0(double R);
static double radcoeff_6_8_11_11_0(double R);
static double radcoeff_6_8_12_11_0(double R);
static double radcoeff_6_8_12_13_0(double R);
static double radcoeff_6_8_13_13_0(double R);
static double radcoeff_6_8_14_13_0(double R);
static double radcoeff_6_10_4_3_0(double R);
static double radcoeff_6_10_4_5_0(double R);
static double radcoeff_6_10_6_7_0(double R);
static double radcoeff_6_10_10_9_0(double R);
static double radcoeff_6_10_10_11_0(double R);
static double radcoeff_6_10_12_11_0(double R);
static double radcoeff_6_10_12_13_0(double R);
static double radcoeff_6_10_14_13_0(double R);
static double radcoeff_8_0_8_7_0(double R);
static double radcoeff_8_0_8_9_0(double R);
static double radcoeff_8_2_6_5_0(double R);
static double radcoeff_8_2_6_7_0(double R);
static double radcoeff_8_2_8_7_0(double R);
static double radcoeff_8_2_8_9_0(double R);
static double radcoeff_8_2_9_9_0(double R);
static double radcoeff_8_2_10_9_0(double R);
static double radcoeff_8_2_10_11_0(double R);
static double radcoeff_8_4_4_3_0(double R);
static double radcoeff_8_4_4_5_0(double R);
static double radcoeff_8_4_6_5_0(double R);
static double radcoeff_8_4_6_7_0(double R);
static double radcoeff_8_4_8_7_0(double R);
static double radcoeff_8_4_8_9_0(double R);
static double radcoeff_8_4_10_9_0(double R);
static double radcoeff_8_4_10_11_0(double R);
static double radcoeff_8_4_11_11_0(double R);
static double radcoeff_8_4_12_11_0(double R);
static double radcoeff_8_4_12_13_0(double R);
static double radcoeff_8_6_10_9_0(double R);
static double radcoeff_8_6_10_11_0(double R);
static double radcoeff_8_6_12_11_0(double R);
static double radcoeff_8_6_12_13_0(double R);
static double radcoeff_8_6_14_13_0(double R);
static double radcoeff_8_8_14_13_0(double R);
static double radcoeff_10_0_10_9_0(double R);
static double radcoeff_10_0_10_11_0(double R);
static double radcoeff_10_2_8_7_0(double R);
static double radcoeff_10_2_8_9_0(double R);
static double radcoeff_10_2_10_9_0(double R);
static double radcoeff_10_2_10_11_0(double R);
static double radcoeff_10_2_12_11_0(double R);
static double radcoeff_10_2_12_13_0(double R);
static double radcoeff_10_4_10_9_0(double R);
static double radcoeff_10_4_12_11_0(double R);
static double radcoeff_10_4_12_13_0(double R);
static double radcoeff_10_4_14_13_0(double R);
static double radcoeff_10_6_14_13_0(double R);
static double radcoeff_3_0_3_2_0(double R);
static double radcoeff_3_0_3_4_0(double R);
static double radcoeff_3_2_1_0_0(double R);
static double radcoeff_3_2_1_2_0(double R);
static double radcoeff_3_2_2_2_0(double R);
static double radcoeff_3_2_3_2_0(double R);
static double radcoeff_3_2_3_4_0(double R);
static double radcoeff_3_2_4_4_0(double R);
static double radcoeff_3_2_5_6_0(double R);
static double radcoeff_3_4_1_0_0(double R);
static double radcoeff_3_4_1_2_0(double R);
static double radcoeff_3_4_2_2_0(double R);
static double radcoeff_3_4_3_2_0(double R);
static double radcoeff_3_4_3_4_0(double R);
static double radcoeff_3_4_4_4_0(double R);
static double radcoeff_3_4_5_4_0(double R);
static double radcoeff_3_4_5_6_0(double R);
static double radcoeff_3_4_6_6_0(double R);
static double radcoeff_3_4_7_6_0(double R);
static double radcoeff_3_4_7_8_0(double R);
static double radcoeff_3_6_3_2_0(double R);
static double radcoeff_3_6_3_4_0(double R);
static double radcoeff_3_6_4_4_0(double R);
static double radcoeff_3_6_5_4_0(double R);
static double radcoeff_3_6_5_6_0(double R);
static double radcoeff_3_6_6_6_0(double R);
static double radcoeff_3_6_7_6_0(double R);
static double radcoeff_3_6_7_8_0(double R);
static double radcoeff_3_6_8_8_0(double R);
static double radcoeff_3_6_9_8_0(double R);
static double radcoeff_3_6_9_10_0(double R);
static double radcoeff_3_8_5_4_0(double R);
static double radcoeff_3_8_5_6_0(double R);
static double radcoeff_3_8_6_6_0(double R);
static double radcoeff_3_8_7_6_0(double R);
static double radcoeff_3_8_7_8_0(double R);
static double radcoeff_3_8_8_8_0(double R);
static double radcoeff_3_8_9_8_0(double R);
static double radcoeff_3_8_9_10_0(double R);
static double radcoeff_3_8_10_10_0(double R);
static double radcoeff_3_8_11_10_0(double R);
static double radcoeff_3_8_11_12_0(double R);
static double radcoeff_3_10_7_6_0(double R);
static double radcoeff_3_10_7_8_0(double R);
static double radcoeff_3_10_8_8_0(double R);
static double radcoeff_3_10_9_8_0(double R);
static double radcoeff_3_10_9_10_0(double R);
static double radcoeff_3_10_10_10_0(double R);
static double radcoeff_3_10_11_10_0(double R);
static double radcoeff_3_10_11_12_0(double R);
static double radcoeff_3_10_12_12_0(double R);
static double radcoeff_3_10_13_12_0(double R);
static double radcoeff_3_12_9_8_0(double R);
static double radcoeff_3_12_9_10_0(double R);
static double radcoeff_3_12_11_10_0(double R);
static double radcoeff_3_12_11_12_0(double R);
static double radcoeff_3_12_13_12_0(double R);
static double radcoeff_6_0_6_6_0(double R);
static double radcoeff_6_2_8_8_0(double R);
static double radcoeff_6_4_10_10_0(double R);
static double radcoeff_7_0_7_6_0(double R);
static double radcoeff_7_0_7_8_0(double R);
static double radcoeff_7_2_5_4_0(double R);
static double radcoeff_7_2_5_6_0(double R);
static double radcoeff_7_2_6_6_0(double R);
static double radcoeff_7_2_7_6_0(double R);
static double radcoeff_7_2_7_8_0(double R);
static double radcoeff_7_2_8_8_0(double R);
static double radcoeff_7_2_9_8_0(double R);
static double radcoeff_7_2_9_10_0(double R);
static double radcoeff_7_4_3_2_0(double R);
static double radcoeff_7_4_3_4_0(double R);
static double radcoeff_7_4_5_4_0(double R);
static double radcoeff_7_4_5_6_0(double R);
static double radcoeff_7_4_6_6_0(double R);
static double radcoeff_7_4_7_6_0(double R);
static double radcoeff_7_4_7_8_0(double R);
static double radcoeff_7_4_8_8_0(double R);
static double radcoeff_7_4_9_8_0(double R);
static double radcoeff_7_4_9_10_0(double R);
static double radcoeff_7_4_10_10_0(double R);
static double radcoeff_7_4_11_10_0(double R);
static double radcoeff_7_4_11_12_0(double R);
static double radcoeff_7_6_1_0_0(double R);
static double radcoeff_7_6_1_2_0(double R);
static double radcoeff_7_6_3_2_0(double R);
static double radcoeff_7_6_3_4_0(double R);
static double radcoeff_7_6_5_4_0(double R);
static double radcoeff_7_6_5_6_0(double R);
static double radcoeff_7_6_7_6_0(double R);
static double radcoeff_7_6_7_8_0(double R);
static double radcoeff_7_6_8_8_0(double R);
static double radcoeff_7_6_9_8_0(double R);
static double radcoeff_7_6_9_10_0(double R);
static double radcoeff_7_6_10_10_0(double R);
static double radcoeff_7_6_11_10_0(double R);
static double radcoeff_7_6_11_12_0(double R);
static double radcoeff_7_6_12_12_0(double R);
static double radcoeff_7_6_13_12_0(double R);
static double radcoeff_7_8_1_2_0(double R);
static double radcoeff_7_8_3_4_0(double R);
static double radcoeff_7_8_5_4_0(double R);
static double radcoeff_7_8_5_6_0(double R);
static double radcoeff_7_8_7_6_0(double R);
static double radcoeff_7_8_7_8_0(double R);
static double radcoeff_7_8_9_8_0(double R);
static double radcoeff_7_8_9_10_0(double R);
static double radcoeff_7_8_11_10_0(double R);
static double radcoeff_7_8_11_12_0(double R);
static double radcoeff_7_8_12_12_0(double R);
static double radcoeff_7_8_13_12_0(double R);
static double radcoeff_7_10_13_12_0(double R);
static double radcoeff_9_0_9_8_0(double R);
static double radcoeff_9_0_9_10_0(double R);
static double radcoeff_9_2_7_6_0(double R);
static double radcoeff_9_2_7_8_0(double R);
static double radcoeff_9_2_9_8_0(double R);
static double radcoeff_9_2_9_10_0(double R);
static double radcoeff_9_2_10_10_0(double R);
static double radcoeff_9_2_11_10_0(double R);
static double radcoeff_9_2_11_12_0(double R);
static double radcoeff_9_4_5_4_0(double R);
static double radcoeff_9_4_5_6_0(double R);
static double radcoeff_9_4_7_6_0(double R);
static double radcoeff_9_4_7_8_0(double R);
static double radcoeff_9_4_9_8_0(double R);
static double radcoeff_9_4_9_10_0(double R);
static double radcoeff_9_4_11_10_0(double R);
static double radcoeff_9_4_11_12_0(double R);
static double radcoeff_9_4_13_12_0(double R);
static double radcoeff_9_6_11_10_0(double R);
static double radcoeff_9_6_13_12_0(double R);
static double radcoeff_9_10_1_0_0(double R);
static double radcoeff_9_12_3_2_0(double R);

void fill_legP1() {
    gsl_sf_legendre_array_e(norm, lmax_bond, cosT1, csphase, &LegP1[0]);
}

void fill_legP2() {
    gsl_sf_legendre_array_e(norm, lmax_n2, cosT2, csphase, &LegP2[0]);
}


void dipole_vector(double *q, double dip[3])
{
    double R      = q[0];
    double phi1   = q[1];
    double theta1 = q[2];
    double phi2   = q[3];
    double theta2 = q[4];

    cosT1 = std::cos(theta1); 
    cosT2 = std::cos(theta2);

    cosP1_1 = std::cos(phi1);
    cosP1_2 = std::cos(2*phi1);
    cosP1_3 = std::cos(3*phi1);
    cosP1_4 = std::cos(4*phi1);
    cosP1_5 = std::cos(5*phi1);
    cosP1_6 = std::cos(6*phi1);
    cosP1_7 = std::cos(7*phi1);
    cosP1_8 = std::cos(8*phi1);
    cosP1_9 = std::cos(9*phi1);
    cosP1_10 = std::cos(10*phi1);
    cosP1_11 = std::cos(11*phi1);
    cosP1_12 = std::cos(12*phi1);
    cosP1_13 = std::cos(13*phi1);

    cosP2_1 = std::cos(phi2);
    cosP2_2 = std::cos(2*phi2);
    cosP2_3 = std::cos(3*phi2);
    cosP2_4 = std::cos(4*phi2);
    cosP2_5 = std::cos(5*phi2);
    cosP2_6 = std::cos(6*phi2);
    cosP2_7 = std::cos(7*phi2);
    cosP2_8 = std::cos(8*phi2);
    cosP2_9 = std::cos(9*phi2);
    cosP2_10 = std::cos(10*phi2);
    cosP2_11 = std::cos(11*phi2);
    cosP2_12 = std::cos(12*phi2);
    cosP2_13 = std::cos(13*phi2);

    sinP1_1 = std::sin(phi1);
    sinP1_2 = std::sin(2*phi1); 
    sinP1_3 = std::sin(3*phi1); 
    sinP1_4 = std::sin(4*phi1); 
    sinP1_5 = std::sin(5*phi1); 
    sinP1_6 = std::sin(6*phi1); 
    sinP1_7 = std::sin(7*phi1); 
    sinP1_8 = std::sin(8*phi1); 
    sinP1_9 = std::sin(9*phi1); 
    sinP1_10 = std::sin(10*phi1); 
    sinP1_11 = std::sin(11*phi1); 
    sinP1_12 = std::sin(12*phi1);
    sinP1_13 = std::sin(13*phi1); 

    sinP2_1 = std::sin(phi2);
    sinP2_2 = std::sin(2*phi2); 
    sinP2_3 = std::sin(3*phi2); 
    sinP2_4 = std::sin(4*phi2); 
    sinP2_5 = std::sin(5*phi2); 
    sinP2_6 = std::sin(6*phi2); 
    sinP2_7 = std::sin(7*phi2); 
    sinP2_8 = std::sin(8*phi2); 
    sinP2_9 = std::sin(9*phi2); 
    sinP2_10 = std::sin(10*phi2); 
    sinP2_11 = std::sin(11*phi2); 
    sinP2_12 = std::sin(12*phi2);
    sinP2_13 = std::sin(13*phi2);

    fill_legP1();
    fill_legP2();

    Eigen::Vector3d res = Eigen::Vector3d::Zero();
    idsbf_0_0_0_1_0(tmp);    res += tmp.real() * radcoeff_0_0_0_1_0(R);
    idsbf_0_2_2_1_0(tmp);    res += tmp.real() * radcoeff_0_2_2_1_0(R);
    idsbf_0_2_2_3_0(tmp);    res += tmp.real() * radcoeff_0_2_2_3_0(R);
    idsbf_0_4_4_3_0(tmp);    res += tmp.real() * radcoeff_0_4_4_3_0(R);
    idsbf_0_4_4_5_0(tmp);    res += tmp.real() * radcoeff_0_4_4_5_0(R);
    idsbf_0_6_6_5_0(tmp);    res += tmp.real() * radcoeff_0_6_6_5_0(R);
    idsbf_0_6_6_7_0(tmp);    res += tmp.real() * radcoeff_0_6_6_7_0(R);
    idsbf_0_8_8_7_0(tmp);    res += tmp.real() * radcoeff_0_8_8_7_0(R);
    idsbf_0_8_8_9_0(tmp);    res += tmp.real() * radcoeff_0_8_8_9_0(R);
    idsbf_0_10_10_9_0(tmp);  res += tmp.real() * radcoeff_0_10_10_9_0(R);
    idsbf_0_10_10_11_0(tmp); res += tmp.real() * radcoeff_0_10_10_11_0(R);
    idsbf_0_12_12_11_0(tmp); res += tmp.real() * radcoeff_0_12_12_11_0(R);
    idsbf_0_12_12_13_0(tmp); res += tmp.real() * radcoeff_0_12_12_13_0(R);
    idsbf_3_0_3_2_0(tmp);    res += tmp.real() * radcoeff_3_0_3_2_0(R);
    idsbf_3_0_3_4_0(tmp);    res += tmp.real() * radcoeff_3_0_3_4_0(R);
    idsbf_3_2_1_0_0(tmp);    res += tmp.real() * radcoeff_3_2_1_0_0(R);
    idsbf_3_2_1_2_0(tmp);    res += tmp.real() * radcoeff_3_2_1_2_0(R);
    idsbf_3_2_2_2_0(tmp);    res += tmp.real() * radcoeff_3_2_2_2_0(R);
    idsbf_3_2_3_2_0(tmp);    res += tmp.real() * radcoeff_3_2_3_2_0(R);
    idsbf_3_2_3_4_0(tmp);    res += tmp.real() * radcoeff_3_2_3_4_0(R);
    idsbf_3_2_4_4_0(tmp);    res += tmp.real() * radcoeff_3_2_4_4_0(R);
    idsbf_3_2_5_4_0(tmp);    res += tmp.real() * radcoeff_3_2_5_4_0(R);
    idsbf_3_2_5_6_0(tmp);    res += tmp.real() * radcoeff_3_2_5_6_0(R);
    idsbf_3_4_1_0_0(tmp);    res += tmp.real() * radcoeff_3_4_1_0_0(R);
    idsbf_3_4_1_2_0(tmp);    res += tmp.real() * radcoeff_3_4_1_2_0(R);
    idsbf_3_4_2_2_0(tmp);    res += tmp.real() * radcoeff_3_4_2_2_0(R);
    idsbf_3_4_3_2_0(tmp);    res += tmp.real() * radcoeff_3_4_3_2_0(R);
    idsbf_3_4_3_4_0(tmp);    res += tmp.real() * radcoeff_3_4_3_4_0(R);
    idsbf_3_4_4_4_0(tmp);    res += tmp.real() * radcoeff_3_4_4_4_0(R);
    idsbf_3_4_5_4_0(tmp);    res += tmp.real() * radcoeff_3_4_5_4_0(R);
    idsbf_3_4_5_6_0(tmp);    res += tmp.real() * radcoeff_3_4_5_6_0(R);
    idsbf_3_4_6_6_0(tmp);    res += tmp.real() * radcoeff_3_4_6_6_0(R);
    idsbf_3_4_7_6_0(tmp);    res += tmp.real() * radcoeff_3_4_7_6_0(R);
    idsbf_3_4_7_8_0(tmp);    res += tmp.real() * radcoeff_3_4_7_8_0(R);
    idsbf_3_6_3_2_0(tmp);    res += tmp.real() * radcoeff_3_6_3_2_0(R);
    idsbf_3_6_3_4_0(tmp);    res += tmp.real() * radcoeff_3_6_3_4_0(R);
    idsbf_3_6_4_4_0(tmp);    res += tmp.real() * radcoeff_3_6_4_4_0(R);
    idsbf_3_6_5_4_0(tmp);    res += tmp.real() * radcoeff_3_6_5_4_0(R);
    idsbf_3_6_5_6_0(tmp);    res += tmp.real() * radcoeff_3_6_5_6_0(R);
    idsbf_3_6_6_6_0(tmp);    res += tmp.real() * radcoeff_3_6_6_6_0(R);
    idsbf_3_6_7_6_0(tmp);    res += tmp.real() * radcoeff_3_6_7_6_0(R);
    idsbf_3_6_7_8_0(tmp);    res += tmp.real() * radcoeff_3_6_7_8_0(R);
    idsbf_3_6_8_8_0(tmp);    res += tmp.real() * radcoeff_3_6_8_8_0(R);
    idsbf_3_6_9_8_0(tmp);    res += tmp.real() * radcoeff_3_6_9_8_0(R);
    idsbf_3_6_9_10_0(tmp);   res += tmp.real() * radcoeff_3_6_9_10_0(R);
    idsbf_3_8_5_4_0(tmp);    res += tmp.real() * radcoeff_3_8_5_4_0(R);
    idsbf_3_8_5_6_0(tmp);    res += tmp.real() * radcoeff_3_8_5_6_0(R);
    idsbf_3_8_6_6_0(tmp);    res += tmp.real() * radcoeff_3_8_6_6_0(R);
    idsbf_3_8_7_6_0(tmp);    res += tmp.real() * radcoeff_3_8_7_6_0(R);
    idsbf_3_8_7_8_0(tmp);    res += tmp.real() * radcoeff_3_8_7_8_0(R);
    idsbf_3_8_8_8_0(tmp);    res += tmp.real() * radcoeff_3_8_8_8_0(R);
    idsbf_3_8_9_8_0(tmp);    res += tmp.real() * radcoeff_3_8_9_8_0(R);
    idsbf_3_8_9_10_0(tmp);   res += tmp.real() * radcoeff_3_8_9_10_0(R);
    idsbf_3_8_10_10_0(tmp);  res += tmp.real() * radcoeff_3_8_10_10_0(R);
    idsbf_3_8_11_10_0(tmp);  res += tmp.real() * radcoeff_3_8_11_10_0(R);
    idsbf_3_8_11_12_0(tmp);  res += tmp.real() * radcoeff_3_8_11_12_0(R);
    idsbf_3_10_7_6_0(tmp);   res += tmp.real() * radcoeff_3_10_7_6_0(R);
    idsbf_3_10_7_8_0(tmp);   res += tmp.real() * radcoeff_3_10_7_8_0(R);
    idsbf_3_10_8_8_0(tmp);   res += tmp.real() * radcoeff_3_10_8_8_0(R);
    idsbf_3_10_9_8_0(tmp);   res += tmp.real() * radcoeff_3_10_9_8_0(R);
    idsbf_3_10_9_10_0(tmp);  res += tmp.real() * radcoeff_3_10_9_10_0(R);
    idsbf_3_10_10_10_0(tmp); res += tmp.real() * radcoeff_3_10_10_10_0(R);
    idsbf_3_10_11_10_0(tmp); res += tmp.real() * radcoeff_3_10_11_10_0(R);
    idsbf_3_10_11_12_0(tmp); res += tmp.real() * radcoeff_3_10_11_12_0(R);
    idsbf_3_10_12_12_0(tmp); res += tmp.real() * radcoeff_3_10_12_12_0(R);
    idsbf_3_10_13_12_0(tmp); res += tmp.real() * radcoeff_3_10_13_12_0(R);
    idsbf_3_12_9_8_0(tmp);   res += tmp.real() * radcoeff_3_12_9_8_0(R);
    idsbf_3_12_9_10_0(tmp);  res += tmp.real() * radcoeff_3_12_9_10_0(R);
    idsbf_3_12_11_10_0(tmp); res += tmp.real() * radcoeff_3_12_11_10_0(R);
    idsbf_3_12_11_12_0(tmp); res += tmp.real() * radcoeff_3_12_11_12_0(R);
    idsbf_3_12_13_12_0(tmp); res += tmp.real() * radcoeff_3_12_13_12_0(R);
    idsbf_4_0_4_3_0(tmp);    res += tmp.real() * radcoeff_4_0_4_3_0(R);
    idsbf_4_0_4_5_0(tmp);    res += tmp.real() * radcoeff_4_0_4_5_0(R);
    idsbf_4_2_2_1_0(tmp);    res += tmp.real() * radcoeff_4_2_2_1_0(R);
    idsbf_4_2_2_3_0(tmp);    res += tmp.real() * radcoeff_4_2_2_3_0(R);
    idsbf_4_2_3_3_0(tmp);    res += tmp.real() * radcoeff_4_2_3_3_0(R);
    idsbf_4_2_4_3_0(tmp);    res += tmp.real() * radcoeff_4_2_4_3_0(R);
    idsbf_4_2_4_5_0(tmp);    res += tmp.real() * radcoeff_4_2_4_5_0(R);
    idsbf_4_2_5_5_0(tmp);    res += tmp.real() * radcoeff_4_2_5_5_0(R);
    idsbf_4_2_6_5_0(tmp);    res += tmp.real() * radcoeff_4_2_6_5_0(R);
    idsbf_4_2_6_7_0(tmp);    res += tmp.real() * radcoeff_4_2_6_7_0(R);
    idsbf_4_4_0_1_0(tmp);    res += tmp.real() * radcoeff_4_4_0_1_0(R);
    idsbf_4_4_1_1_0(tmp);    res += tmp.real() * radcoeff_4_4_1_1_0(R);
    idsbf_4_4_2_1_0(tmp);    res += tmp.real() * radcoeff_4_4_2_1_0(R);
    idsbf_4_4_2_3_0(tmp);    res += tmp.real() * radcoeff_4_4_2_3_0(R);
    idsbf_4_4_3_3_0(tmp);    res += tmp.real() * radcoeff_4_4_3_3_0(R);
    idsbf_4_4_4_3_0(tmp);    res += tmp.real() * radcoeff_4_4_4_3_0(R);
    idsbf_4_4_4_5_0(tmp);    res += tmp.real() * radcoeff_4_4_4_5_0(R);
    idsbf_4_4_5_5_0(tmp);    res += tmp.real() * radcoeff_4_4_5_5_0(R);
    idsbf_4_4_6_5_0(tmp);    res += tmp.real() * radcoeff_4_4_6_5_0(R);
    idsbf_4_4_6_7_0(tmp);    res += tmp.real() * radcoeff_4_4_6_7_0(R);
    idsbf_4_4_7_7_0(tmp);    res += tmp.real() * radcoeff_4_4_7_7_0(R);
    idsbf_4_4_8_7_0(tmp);    res += tmp.real() * radcoeff_4_4_8_7_0(R);
    idsbf_4_4_8_9_0(tmp);    res += tmp.real() * radcoeff_4_4_8_9_0(R);
    idsbf_4_6_2_1_0(tmp);    res += tmp.real() * radcoeff_4_6_2_1_0(R);
    idsbf_4_6_2_3_0(tmp);    res += tmp.real() * radcoeff_4_6_2_3_0(R);
    idsbf_4_6_3_3_0(tmp);    res += tmp.real() * radcoeff_4_6_3_3_0(R);
    idsbf_4_6_4_3_0(tmp);    res += tmp.real() * radcoeff_4_6_4_3_0(R);
    idsbf_4_6_4_5_0(tmp);    res += tmp.real() * radcoeff_4_6_4_5_0(R);
    idsbf_4_6_5_5_0(tmp);    res += tmp.real() * radcoeff_4_6_5_5_0(R);
    idsbf_4_6_6_5_0(tmp);    res += tmp.real() * radcoeff_4_6_6_5_0(R);
    idsbf_4_6_6_7_0(tmp);    res += tmp.real() * radcoeff_4_6_6_7_0(R);
    idsbf_4_6_7_7_0(tmp);    res += tmp.real() * radcoeff_4_6_7_7_0(R);
    idsbf_4_6_8_7_0(tmp);    res += tmp.real() * radcoeff_4_6_8_7_0(R);
    idsbf_4_6_8_9_0(tmp);    res += tmp.real() * radcoeff_4_6_8_9_0(R);
    idsbf_4_6_9_9_0(tmp);    res += tmp.real() * radcoeff_4_6_9_9_0(R);
    idsbf_4_6_10_9_0(tmp);   res += tmp.real() * radcoeff_4_6_10_9_0(R);
    idsbf_4_6_10_11_0(tmp);  res += tmp.real() * radcoeff_4_6_10_11_0(R);
    idsbf_4_8_4_3_0(tmp);    res += tmp.real() * radcoeff_4_8_4_3_0(R);
    idsbf_4_8_4_5_0(tmp);    res += tmp.real() * radcoeff_4_8_4_5_0(R);
    idsbf_4_8_6_5_0(tmp);    res += tmp.real() * radcoeff_4_8_6_5_0(R);
    idsbf_4_8_6_7_0(tmp);    res += tmp.real() * radcoeff_4_8_6_7_0(R);
    idsbf_4_8_8_7_0(tmp);    res += tmp.real() * radcoeff_4_8_8_7_0(R);
    idsbf_4_8_8_9_0(tmp);    res += tmp.real() * radcoeff_4_8_8_9_0(R);
    idsbf_4_8_9_9_0(tmp);    res += tmp.real() * radcoeff_4_8_9_9_0(R);
    idsbf_4_8_10_9_0(tmp);   res += tmp.real() * radcoeff_4_8_10_9_0(R);
    idsbf_4_8_10_11_0(tmp);  res += tmp.real() * radcoeff_4_8_10_11_0(R);
    idsbf_4_8_11_11_0(tmp);  res += tmp.real() * radcoeff_4_8_11_11_0(R);
    idsbf_4_8_12_11_0(tmp);  res += tmp.real() * radcoeff_4_8_12_11_0(R);
    idsbf_4_8_12_13_0(tmp);  res += tmp.real() * radcoeff_4_8_12_13_0(R);
    idsbf_4_10_6_5_0(tmp);   res += tmp.real() * radcoeff_4_10_6_5_0(R);
    idsbf_4_10_6_7_0(tmp);   res += tmp.real() * radcoeff_4_10_6_7_0(R);
    idsbf_4_10_8_7_0(tmp);   res += tmp.real() * radcoeff_4_10_8_7_0(R);
    idsbf_4_10_8_9_0(tmp);   res += tmp.real() * radcoeff_4_10_8_9_0(R);
    idsbf_4_10_10_9_0(tmp);  res += tmp.real() * radcoeff_4_10_10_9_0(R);
    idsbf_4_10_10_11_0(tmp); res += tmp.real() * radcoeff_4_10_10_11_0(R);
    idsbf_4_10_12_11_0(tmp); res += tmp.real() * radcoeff_4_10_12_11_0(R);
    idsbf_4_10_12_13_0(tmp); res += tmp.real() * radcoeff_4_10_12_13_0(R);
    idsbf_4_10_13_13_0(tmp); res += tmp.real() * radcoeff_4_10_13_13_0(R);
    idsbf_4_10_14_13_0(tmp); res += tmp.real() * radcoeff_4_10_14_13_0(R);
    idsbf_4_12_10_9_0(tmp);  res += tmp.real() * radcoeff_4_12_10_9_0(R);
    idsbf_4_12_12_11_0(tmp); res += tmp.real() * radcoeff_4_12_12_11_0(R);
    idsbf_4_12_12_13_0(tmp); res += tmp.real() * radcoeff_4_12_12_13_0(R);
    idsbf_4_12_14_13_0(tmp); res += tmp.real() * radcoeff_4_12_14_13_0(R);
    idsbf_6_0_6_5_0(tmp);    res += tmp.real() * radcoeff_6_0_6_5_0(R);
    idsbf_6_0_6_6_0(tmp);    res += tmp.real() * radcoeff_6_0_6_6_0(R);
    idsbf_6_0_6_7_0(tmp);    res += tmp.real() * radcoeff_6_0_6_7_0(R);
    idsbf_6_2_4_3_0(tmp);    res += tmp.real() * radcoeff_6_2_4_3_0(R);
    idsbf_6_2_4_5_0(tmp);    res += tmp.real() * radcoeff_6_2_4_5_0(R);
    idsbf_6_2_5_5_0(tmp);    res += tmp.real() * radcoeff_6_2_5_5_0(R);
    idsbf_6_2_6_5_0(tmp);    res += tmp.real() * radcoeff_6_2_6_5_0(R);
    idsbf_6_2_6_7_0(tmp);    res += tmp.real() * radcoeff_6_2_6_7_0(R);
    idsbf_6_2_7_7_0(tmp);    res += tmp.real() * radcoeff_6_2_7_7_0(R);
    idsbf_6_2_8_7_0(tmp);    res += tmp.real() * radcoeff_6_2_8_7_0(R);
    idsbf_6_2_8_8_0(tmp);    res += tmp.real() * radcoeff_6_2_8_8_0(R);
    idsbf_6_2_8_9_0(tmp);    res += tmp.real() * radcoeff_6_2_8_9_0(R);
    idsbf_6_4_2_1_0(tmp);    res += tmp.real() * radcoeff_6_4_2_1_0(R);
    idsbf_6_4_2_3_0(tmp);    res += tmp.real() * radcoeff_6_4_2_3_0(R);
    idsbf_6_4_3_3_0(tmp);    res += tmp.real() * radcoeff_6_4_3_3_0(R);
    idsbf_6_4_4_3_0(tmp);    res += tmp.real() * radcoeff_6_4_4_3_0(R);
    idsbf_6_4_4_5_0(tmp);    res += tmp.real() * radcoeff_6_4_4_5_0(R);
    idsbf_6_4_5_5_0(tmp);    res += tmp.real() * radcoeff_6_4_5_5_0(R);
    idsbf_6_4_6_5_0(tmp);    res += tmp.real() * radcoeff_6_4_6_5_0(R);
    idsbf_6_4_6_7_0(tmp);    res += tmp.real() * radcoeff_6_4_6_7_0(R);
    idsbf_6_4_7_7_0(tmp);    res += tmp.real() * radcoeff_6_4_7_7_0(R);
    idsbf_6_4_8_7_0(tmp);    res += tmp.real() * radcoeff_6_4_8_7_0(R);
    idsbf_6_4_8_9_0(tmp);    res += tmp.real() * radcoeff_6_4_8_9_0(R);
    idsbf_6_4_9_9_0(tmp);    res += tmp.real() * radcoeff_6_4_9_9_0(R);
    idsbf_6_4_10_9_0(tmp);   res += tmp.real() * radcoeff_6_4_10_9_0(R);
    idsbf_6_4_10_10_0(tmp);  res += tmp.real() * radcoeff_6_4_10_10_0(R);
    idsbf_6_4_10_11_0(tmp);  res += tmp.real() * radcoeff_6_4_10_11_0(R);
    idsbf_6_6_0_1_0(tmp);    res += tmp.real() * radcoeff_6_6_0_1_0(R);
    idsbf_6_6_1_1_0(tmp);    res += tmp.real() * radcoeff_6_6_1_1_0(R);
    idsbf_6_6_2_1_0(tmp);    res += tmp.real() * radcoeff_6_6_2_1_0(R);
    idsbf_6_6_2_3_0(tmp);    res += tmp.real() * radcoeff_6_6_2_3_0(R);
    idsbf_6_6_3_3_0(tmp);    res += tmp.real() * radcoeff_6_6_3_3_0(R);
    idsbf_6_6_4_3_0(tmp);    res += tmp.real() * radcoeff_6_6_4_3_0(R);
    idsbf_6_6_4_5_0(tmp);    res += tmp.real() * radcoeff_6_6_4_5_0(R);
    idsbf_6_6_5_5_0(tmp);    res += tmp.real() * radcoeff_6_6_5_5_0(R);
    idsbf_6_6_6_5_0(tmp);    res += tmp.real() * radcoeff_6_6_6_5_0(R);
    idsbf_6_6_6_7_0(tmp);    res += tmp.real() * radcoeff_6_6_6_7_0(R);
    idsbf_6_6_7_7_0(tmp);    res += tmp.real() * radcoeff_6_6_7_7_0(R);
    idsbf_6_6_8_7_0(tmp);    res += tmp.real() * radcoeff_6_6_8_7_0(R);
    idsbf_6_6_8_9_0(tmp);    res += tmp.real() * radcoeff_6_6_8_9_0(R);
    idsbf_6_6_9_9_0(tmp);    res += tmp.real() * radcoeff_6_6_9_9_0(R);
    idsbf_6_6_10_9_0(tmp);   res += tmp.real() * radcoeff_6_6_10_9_0(R);
    idsbf_6_6_10_11_0(tmp);  res += tmp.real() * radcoeff_6_6_10_11_0(R);
    idsbf_6_6_11_11_0(tmp);  res += tmp.real() * radcoeff_6_6_11_11_0(R);
    idsbf_6_6_12_11_0(tmp);  res += tmp.real() * radcoeff_6_6_12_11_0(R);
    idsbf_6_6_12_13_0(tmp);  res += tmp.real() * radcoeff_6_6_12_13_0(R);
    idsbf_6_8_2_1_0(tmp);    res += tmp.real() * radcoeff_6_8_2_1_0(R);
    idsbf_6_8_2_3_0(tmp);    res += tmp.real() * radcoeff_6_8_2_3_0(R);
    idsbf_6_8_3_3_0(tmp);    res += tmp.real() * radcoeff_6_8_3_3_0(R);
    idsbf_6_8_4_3_0(tmp);    res += tmp.real() * radcoeff_6_8_4_3_0(R);
    idsbf_6_8_4_5_0(tmp);    res += tmp.real() * radcoeff_6_8_4_5_0(R);
    idsbf_6_8_5_5_0(tmp);    res += tmp.real() * radcoeff_6_8_5_5_0(R);
    idsbf_6_8_6_5_0(tmp);    res += tmp.real() * radcoeff_6_8_6_5_0(R);
    idsbf_6_8_6_7_0(tmp);    res += tmp.real() * radcoeff_6_8_6_7_0(R);
    idsbf_6_8_7_7_0(tmp);    res += tmp.real() * radcoeff_6_8_7_7_0(R);
    idsbf_6_8_8_7_0(tmp);    res += tmp.real() * radcoeff_6_8_8_7_0(R);
    idsbf_6_8_8_9_0(tmp);    res += tmp.real() * radcoeff_6_8_8_9_0(R);
    idsbf_6_8_9_9_0(tmp);    res += tmp.real() * radcoeff_6_8_9_9_0(R);
    idsbf_6_8_10_9_0(tmp);   res += tmp.real() * radcoeff_6_8_10_9_0(R);
    idsbf_6_8_10_11_0(tmp);  res += tmp.real() * radcoeff_6_8_10_11_0(R);
    idsbf_6_8_11_11_0(tmp);  res += tmp.real() * radcoeff_6_8_11_11_0(R);
    idsbf_6_8_12_11_0(tmp);  res += tmp.real() * radcoeff_6_8_12_11_0(R);
    idsbf_6_8_12_13_0(tmp);  res += tmp.real() * radcoeff_6_8_12_13_0(R);
    idsbf_6_8_13_13_0(tmp);  res += tmp.real() * radcoeff_6_8_13_13_0(R);
    idsbf_6_8_14_13_0(tmp);  res += tmp.real() * radcoeff_6_8_14_13_0(R);
    idsbf_6_10_4_3_0(tmp);   res += tmp.real() * radcoeff_6_10_4_3_0(R);
    idsbf_6_10_4_5_0(tmp);   res += tmp.real() * radcoeff_6_10_4_5_0(R);
    idsbf_6_10_6_7_0(tmp);   res += tmp.real() * radcoeff_6_10_6_7_0(R);
    idsbf_6_10_10_9_0(tmp);  res += tmp.real() * radcoeff_6_10_10_9_0(R);
    idsbf_6_10_10_11_0(tmp); res += tmp.real() * radcoeff_6_10_10_11_0(R);
    idsbf_6_10_12_11_0(tmp); res += tmp.real() * radcoeff_6_10_12_11_0(R);
    idsbf_6_10_12_13_0(tmp); res += tmp.real() * radcoeff_6_10_12_13_0(R);
    idsbf_6_10_14_13_0(tmp); res += tmp.real() * radcoeff_6_10_14_13_0(R);
    idsbf_7_0_7_6_0(tmp);    res += tmp.real() * radcoeff_7_0_7_6_0(R);
    idsbf_7_0_7_8_0(tmp);    res += tmp.real() * radcoeff_7_0_7_8_0(R);
    idsbf_7_2_5_4_0(tmp);    res += tmp.real() * radcoeff_7_2_5_4_0(R);
    idsbf_7_2_5_6_0(tmp);    res += tmp.real() * radcoeff_7_2_5_6_0(R);
    idsbf_7_2_6_6_0(tmp);    res += tmp.real() * radcoeff_7_2_6_6_0(R);
    idsbf_7_2_7_6_0(tmp);    res += tmp.real() * radcoeff_7_2_7_6_0(R);
    idsbf_7_2_7_8_0(tmp);    res += tmp.real() * radcoeff_7_2_7_8_0(R);
    idsbf_7_2_8_8_0(tmp);    res += tmp.real() * radcoeff_7_2_8_8_0(R);
    idsbf_7_2_9_8_0(tmp);    res += tmp.real() * radcoeff_7_2_9_8_0(R);
    idsbf_7_2_9_10_0(tmp);   res += tmp.real() * radcoeff_7_2_9_10_0(R);
    idsbf_7_4_3_2_0(tmp);    res += tmp.real() * radcoeff_7_4_3_2_0(R);
    idsbf_7_4_3_4_0(tmp);    res += tmp.real() * radcoeff_7_4_3_4_0(R);
    idsbf_7_4_5_4_0(tmp);    res += tmp.real() * radcoeff_7_4_5_4_0(R);
    idsbf_7_4_5_6_0(tmp);    res += tmp.real() * radcoeff_7_4_5_6_0(R);
    idsbf_7_4_6_6_0(tmp);    res += tmp.real() * radcoeff_7_4_6_6_0(R);
    idsbf_7_4_7_6_0(tmp);    res += tmp.real() * radcoeff_7_4_7_6_0(R);
    idsbf_7_4_7_8_0(tmp);    res += tmp.real() * radcoeff_7_4_7_8_0(R);
    idsbf_7_4_8_8_0(tmp);    res += tmp.real() * radcoeff_7_4_8_8_0(R);
    idsbf_7_4_9_8_0(tmp);    res += tmp.real() * radcoeff_7_4_9_8_0(R);
    idsbf_7_4_9_10_0(tmp);   res += tmp.real() * radcoeff_7_4_9_10_0(R);
    idsbf_7_4_10_10_0(tmp);  res += tmp.real() * radcoeff_7_4_10_10_0(R);
    idsbf_7_4_11_10_0(tmp);  res += tmp.real() * radcoeff_7_4_11_10_0(R);
    idsbf_7_4_11_12_0(tmp);  res += tmp.real() * radcoeff_7_4_11_12_0(R);
    idsbf_7_6_1_0_0(tmp);    res += tmp.real() * radcoeff_7_6_1_0_0(R);
    idsbf_7_6_1_2_0(tmp);    res += tmp.real() * radcoeff_7_6_1_2_0(R);
    idsbf_7_6_3_2_0(tmp);    res += tmp.real() * radcoeff_7_6_3_2_0(R);
    idsbf_7_6_3_4_0(tmp);    res += tmp.real() * radcoeff_7_6_3_4_0(R);
    idsbf_7_6_5_4_0(tmp);    res += tmp.real() * radcoeff_7_6_5_4_0(R);
    idsbf_7_6_5_6_0(tmp);    res += tmp.real() * radcoeff_7_6_5_6_0(R);
    idsbf_7_6_7_6_0(tmp);    res += tmp.real() * radcoeff_7_6_7_6_0(R);
    idsbf_7_6_7_8_0(tmp);    res += tmp.real() * radcoeff_7_6_7_8_0(R);
    idsbf_7_6_8_8_0(tmp);    res += tmp.real() * radcoeff_7_6_8_8_0(R);
    idsbf_7_6_9_8_0(tmp);    res += tmp.real() * radcoeff_7_6_9_8_0(R);
    idsbf_7_6_9_10_0(tmp);   res += tmp.real() * radcoeff_7_6_9_10_0(R);
    idsbf_7_6_10_10_0(tmp);  res += tmp.real() * radcoeff_7_6_10_10_0(R);
    idsbf_7_6_11_10_0(tmp);  res += tmp.real() * radcoeff_7_6_11_10_0(R);
    idsbf_7_6_11_12_0(tmp);  res += tmp.real() * radcoeff_7_6_11_12_0(R);
    idsbf_7_6_12_12_0(tmp);  res += tmp.real() * radcoeff_7_6_12_12_0(R);
    idsbf_7_6_13_12_0(tmp);  res += tmp.real() * radcoeff_7_6_13_12_0(R);
    idsbf_7_8_1_2_0(tmp);    res += tmp.real() * radcoeff_7_8_1_2_0(R);
    idsbf_7_8_3_4_0(tmp);    res += tmp.real() * radcoeff_7_8_3_4_0(R);
    idsbf_7_8_5_4_0(tmp);    res += tmp.real() * radcoeff_7_8_5_4_0(R);
    idsbf_7_8_5_6_0(tmp);    res += tmp.real() * radcoeff_7_8_5_6_0(R);
    idsbf_7_8_7_6_0(tmp);    res += tmp.real() * radcoeff_7_8_7_6_0(R);
    idsbf_7_8_7_8_0(tmp);    res += tmp.real() * radcoeff_7_8_7_8_0(R);
    idsbf_7_8_9_8_0(tmp);    res += tmp.real() * radcoeff_7_8_9_8_0(R);
    idsbf_7_8_9_10_0(tmp);   res += tmp.real() * radcoeff_7_8_9_10_0(R);
    idsbf_7_8_11_10_0(tmp);  res += tmp.real() * radcoeff_7_8_11_10_0(R);
    idsbf_7_8_11_12_0(tmp);  res += tmp.real() * radcoeff_7_8_11_12_0(R);
    idsbf_7_8_12_12_0(tmp);  res += tmp.real() * radcoeff_7_8_12_12_0(R);
    idsbf_7_8_13_12_0(tmp);  res += tmp.real() * radcoeff_7_8_13_12_0(R);
    idsbf_7_10_13_12_0(tmp); res += tmp.real() * radcoeff_7_10_13_12_0(R);
    idsbf_8_0_8_7_0(tmp);    res += tmp.real() * radcoeff_8_0_8_7_0(R);
    idsbf_8_0_8_9_0(tmp);    res += tmp.real() * radcoeff_8_0_8_9_0(R);
    idsbf_8_2_6_5_0(tmp);    res += tmp.real() * radcoeff_8_2_6_5_0(R);
    idsbf_8_2_6_7_0(tmp);    res += tmp.real() * radcoeff_8_2_6_7_0(R);
    idsbf_8_2_8_7_0(tmp);    res += tmp.real() * radcoeff_8_2_8_7_0(R);
    idsbf_8_2_8_9_0(tmp);    res += tmp.real() * radcoeff_8_2_8_9_0(R);
    idsbf_8_2_9_9_0(tmp);    res += tmp.real() * radcoeff_8_2_9_9_0(R);
    idsbf_8_2_10_9_0(tmp);   res += tmp.real() * radcoeff_8_2_10_9_0(R);
    idsbf_8_2_10_11_0(tmp);  res += tmp.real() * radcoeff_8_2_10_11_0(R);
    idsbf_8_4_4_3_0(tmp);    res += tmp.real() * radcoeff_8_4_4_3_0(R);
    idsbf_8_4_4_5_0(tmp);    res += tmp.real() * radcoeff_8_4_4_5_0(R);
    idsbf_8_4_6_5_0(tmp);    res += tmp.real() * radcoeff_8_4_6_5_0(R);
    idsbf_8_4_6_7_0(tmp);    res += tmp.real() * radcoeff_8_4_6_7_0(R);
    idsbf_8_4_8_7_0(tmp);    res += tmp.real() * radcoeff_8_4_8_7_0(R);
    idsbf_8_4_8_9_0(tmp);    res += tmp.real() * radcoeff_8_4_8_9_0(R);
    idsbf_8_4_10_9_0(tmp);   res += tmp.real() * radcoeff_8_4_10_9_0(R);
    idsbf_8_4_10_11_0(tmp);  res += tmp.real() * radcoeff_8_4_10_11_0(R);
    idsbf_8_4_11_11_0(tmp);  res += tmp.real() * radcoeff_8_4_11_11_0(R);
    idsbf_8_4_12_11_0(tmp);  res += tmp.real() * radcoeff_8_4_12_11_0(R);
    idsbf_8_4_12_13_0(tmp);  res += tmp.real() * radcoeff_8_4_12_13_0(R);
    idsbf_8_6_10_9_0(tmp);   res += tmp.real() * radcoeff_8_6_10_9_0(R);
    idsbf_8_6_10_11_0(tmp);  res += tmp.real() * radcoeff_8_6_10_11_0(R);
    idsbf_8_6_12_11_0(tmp);  res += tmp.real() * radcoeff_8_6_12_11_0(R);
    idsbf_8_6_12_13_0(tmp);  res += tmp.real() * radcoeff_8_6_12_13_0(R);
    idsbf_8_6_14_13_0(tmp);  res += tmp.real() * radcoeff_8_6_14_13_0(R);
    idsbf_8_8_14_13_0(tmp);  res += tmp.real() * radcoeff_8_8_14_13_0(R);
    idsbf_9_0_9_8_0(tmp);    res += tmp.real() * radcoeff_9_0_9_8_0(R);
    idsbf_9_0_9_10_0(tmp);   res += tmp.real() * radcoeff_9_0_9_10_0(R);
    idsbf_9_2_7_6_0(tmp);    res += tmp.real() * radcoeff_9_2_7_6_0(R);
    idsbf_9_2_7_8_0(tmp);    res += tmp.real() * radcoeff_9_2_7_8_0(R);
    idsbf_9_2_9_8_0(tmp);    res += tmp.real() * radcoeff_9_2_9_8_0(R);
    idsbf_9_2_9_10_0(tmp);   res += tmp.real() * radcoeff_9_2_9_10_0(R);
    idsbf_9_2_10_10_0(tmp);  res += tmp.real() * radcoeff_9_2_10_10_0(R);
    idsbf_9_2_11_10_0(tmp);  res += tmp.real() * radcoeff_9_2_11_10_0(R);
    idsbf_9_2_11_12_0(tmp);  res += tmp.real() * radcoeff_9_2_11_12_0(R);
    idsbf_9_4_5_4_0(tmp);    res += tmp.real() * radcoeff_9_4_5_4_0(R);
    idsbf_9_4_5_6_0(tmp);    res += tmp.real() * radcoeff_9_4_5_6_0(R);
    idsbf_9_4_7_6_0(tmp);    res += tmp.real() * radcoeff_9_4_7_6_0(R);
    idsbf_9_4_7_8_0(tmp);    res += tmp.real() * radcoeff_9_4_7_8_0(R);
    idsbf_9_4_9_8_0(tmp);    res += tmp.real() * radcoeff_9_4_9_8_0(R);
    idsbf_9_4_9_10_0(tmp);   res += tmp.real() * radcoeff_9_4_9_10_0(R);
    idsbf_9_4_11_10_0(tmp);  res += tmp.real() * radcoeff_9_4_11_10_0(R);
    idsbf_9_4_11_12_0(tmp);  res += tmp.real() * radcoeff_9_4_11_12_0(R);
    idsbf_9_4_13_12_0(tmp);  res += tmp.real() * radcoeff_9_4_13_12_0(R);
    idsbf_9_6_11_10_0(tmp);  res += tmp.real() * radcoeff_9_6_11_10_0(R);
    idsbf_9_6_13_12_0(tmp);  res += tmp.real() * radcoeff_9_6_13_12_0(R);
    idsbf_9_10_1_0_0(tmp);   res += tmp.real() * radcoeff_9_10_1_0_0(R);
    idsbf_9_12_3_2_0(tmp);   res += tmp.real() * radcoeff_9_12_3_2_0(R);
    idsbf_10_0_10_9_0(tmp);  res += tmp.real() * radcoeff_10_0_10_9_0(R);
    idsbf_10_0_10_11_0(tmp); res += tmp.real() * radcoeff_10_0_10_11_0(R);
    idsbf_10_2_8_7_0(tmp);   res += tmp.real() * radcoeff_10_2_8_7_0(R);
    idsbf_10_2_8_9_0(tmp);   res += tmp.real() * radcoeff_10_2_8_9_0(R);
    idsbf_10_2_10_9_0(tmp);  res += tmp.real() * radcoeff_10_2_10_9_0(R);
    idsbf_10_2_10_11_0(tmp); res += tmp.real() * radcoeff_10_2_10_11_0(R);
    idsbf_10_2_12_11_0(tmp); res += tmp.real() * radcoeff_10_2_12_11_0(R);
    idsbf_10_2_12_13_0(tmp); res += tmp.real() * radcoeff_10_2_12_13_0(R);
    idsbf_10_4_10_9_0(tmp);  res += tmp.real() * radcoeff_10_4_10_9_0(R);
    idsbf_10_4_12_11_0(tmp); res += tmp.real() * radcoeff_10_4_12_11_0(R);
    idsbf_10_4_12_13_0(tmp); res += tmp.real() * radcoeff_10_4_12_13_0(R);
    idsbf_10_4_14_13_0(tmp); res += tmp.real() * radcoeff_10_4_14_13_0(R);
    idsbf_10_6_14_13_0(tmp); res += tmp.real() * radcoeff_10_6_14_13_0(R);

    dip[0] = res(0);
    dip[1] = res(1);
    dip[2] = res(2);
}

void init_ids() {
    size_t size1 = gsl_sf_legendre_array_n(lmax_bond);
    size_t size2 = gsl_sf_legendre_array_n(lmax_n2);
    
    LegP1 = (double*) malloc(size1 * sizeof(double));
    LegP2 = (double*) malloc(size2 * sizeof(double));
}

void free_ids() {
    free(LegP1);
    free(LegP2);
}

static void idsbf_0_0_0_1_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1;
    t1 = 0.89556120039180666071e-2 * LegP1[2];
    bf[0] = -t1 * cosP1_1;
    bf[1] = -t1 * sinP1_1;
    bf[2] = 0.89556120039180666071e-2 * cosT1;
}

static void idsbf_0_2_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5, t6;
    t1 = LegP1[2];
    t2 = LegP2[4];
    t3 = LegP2[3];
    t4 = t1 * LegP2[5];
    t5 = cosT1 * t2;
    t6 = 0.63325739776461107150e-2;
    bf[0] = 0.31662869888230553578e-2 * t4 * (cosP1_1 * cosP2_2 + sinP1_1 * sinP2_2) + t6 * (-t1 * cosP1_1 * t3 + t5 * cosP2_1);
    bf[1] = t6 * (-t1 * sinP1_1 * t3 + t5 * sinP2_1) - 0.31662869888230553578e-2 * t4 * (-cosP1_1 * sinP2_2 + sinP1_1 * cosP2_2);
    bf[2] = -0.63325739776461107156e-2 * t1 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.12665147955292221429e-1 * cosT1 * t3;
}

static void idsbf_0_2_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[7];
    t2 = LegP2[5];
    t3 = LegP1[6];
    t4 = LegP2[4];
    t5 = LegP2[3];
    t6 = LegP1[8];
    t7 = t1 * t2;
    t8 = t6 * t4;
    t9 = LegP1[9] * t2;
    bf[0] = 0.43087708343499496524e-3 * t7 * (cosP1_1 * cosP2_2 + sinP1_1 * sinP2_2) - 0.86175416686998993043e-3 * t8 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) - 0.21543854171749748262e-3 * t9 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.51705250012199395824e-2 * t3 * t4 * cosP2_1 - 0.51705250012199395829e-2 * t1 * cosP1_1 * t5;
    bf[1] = -0.86175416686998993040e-3 * t8 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) - 0.21543854171749748260e-3 * t9 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - 0.43087708343499496524e-3 * t7 * (-cosP1_1 * sinP2_2 + sinP1_1 * cosP2_2) + 0.51705250012199395822e-2 * t3 * t4 * sinP2_1 - 0.51705250012199395826e-2 * t1 * sinP1_1 * t5;
    bf[2] = 0.43087708343499496522e-3 * t6 * t2 * (cosP1_2 * cosP2_2 + sinP1_2 * sinP2_2) + 0.34470166674799597218e-2 * t1 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.15511575003659818747e-1 * t3 * t5;
}

static void idsbf_0_4_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[9];
    t2 = LegP1[8];
    t3 = LegP2[13];
    t4 = LegP1[7];
    t5 = LegP2[12];
    t6 = LegP1[6];
    t7 = LegP2[11];
    t8 = LegP2[10];
    t9 = t1 * LegP2[14];
    t10 = t2 * t3;
    t11 = t4 * t5;
    t12 = t2 * t7;
    t13 = t1 * t5;
    t14 = 0.37315050016325277531e-3;
    t15 = 0.37315050016325277531e-4;
    t16 = -0.12438350005441759176e-4;
    t17 = 0.62191750027208795884e-5;
    t18 = -0.44778060019590333038e-2 * t4;
    t1 = t16 * t1 * t3 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.14926020006530111012e-3 * t2 * t5 * (cosP1_2 * cosP2_2 + sinP1_2 * sinP2_2) - 0.22389030009795166518e-2 * t4 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.17911224007836133214e-1 * t6 * t8;
    bf[0] = t17 * t9 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t15 * t10 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + t14 * t11 * (cosP1_1 * cosP2_2 + sinP1_1 * sinP2_2) - 0.22389030009795166517e-3 * t12 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) + t16 * t13 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.44778060019590333034e-2 * t6 * t7 * cosP2_1 + t18 * cosP1_1 * t8;
    bf[1] = -t14 * t11 * (-cosP1_1 * sinP2_2 + sinP1_1 * cosP2_2) - t15 * t10 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + t16 * t13 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - t17 * t9 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.22389030009795166518e-3 * t12 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) + 0.44778060019590333036e-2 * t6 * t7 * sinP2_1 + t18 * sinP1_1 * t8;
    bf[2] = t1;
}

static void idsbf_0_4_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[15];
    t2 = LegP2[11];
    t3 = LegP1[16];
    t4 = LegP2[10];
    t5 = LegP1[18];
    t6 = LegP2[14];
    t7 = LegP1[17];
    t8 = LegP2[13];
    t9 = LegP2[12];
    t10 = LegP1[19];
    t11 = t5 * t6;
    t12 = t7 * t8;
    t13 = t3 * t9;
    t14 = t7 * t2;
    t15 = t5 * t9;
    t16 = t10 * t8;
    t17 = LegP1[20] * t6;
    t18 = 0.13350238147249273251e-3;
    t19 = -0.11125198456041061042e-4;
    t20 = 0.47679421954461690181e-5;
    t21 = -0.79465703257436150300e-6;
    t22 = -0.99332129071795187875e-7;
    t23 = -t18 * t13 * (-cosP1_1 * sinP2_2 + sinP1_1 * cosP2_2) + t19 * t15 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - t20 * t12 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + t21 * t16 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t22 * t17 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.19866425814359037576e-6 * t11 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.20025357220873909878e-3 * t14 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) + 0.40050714441747819752e-2 * t1 * t2 * sinP2_1 - 0.40050714441747819756e-2 * t3 * sinP1_1 * t4;
    t5 = 0.31786281302974460123e-5 * t5 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.66751190736246366256e-4 * t7 * t9 * (cosP1_2 * cosP2_2 + sinP1_2 * sinP2_2) + 0.16020285776699127901e-2 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.19866425814359037576e-6 * t10 * t6 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.20025357220873909876e-1 * t1 * t4;
    bf[0] = 0.19866425814359037575e-6 * t11 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t20 * t12 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + t18 * t13 * (cosP1_1 * cosP2_2 + sinP1_1 * sinP2_2) - 0.20025357220873909877e-3 * t14 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) + t19 * t15 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + t21 * t16 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t22 * t17 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.40050714441747819750e-2 * t1 * t2 * cosP2_1 - 0.40050714441747819753e-2 * t3 * cosP1_1 * t4;
    bf[1] = t23;
    bf[2] = t5;
}

static void idsbf_0_6_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[15];
    t2 = LegP2[22];
    t3 = LegP1[16];
    t4 = LegP2[21];
    t5 = LegP1[20];
    t6 = LegP1[19];
    t7 = LegP2[26];
    t8 = LegP1[18];
    t9 = LegP2[25];
    t10 = LegP1[17];
    t11 = LegP2[24];
    t12 = LegP2[23];
    t13 = t5 * LegP2[27];
    t14 = t6 * t7;
    t15 = t8 * t9;
    t16 = t10 * t11;
    t17 = t3 * t12;
    t18 = t10 * t2;
    t19 = t8 * t12;
    t20 = t6 * t11;
    t21 = t5 * t9;
    t22 = 0.12187044302190670635e-3;
    t23 = -0.87050316444219075957e-4;
    t24 = 0.43525158222109537972e-5;
    t25 = -0.21762579111054768990e-5;
    t26 = 0.18135482592545640823e-6;
    t27 = -0.60451608641818802743e-7;
    t28 = 0.10075268106969800457e-7;
    t29 = 0.20150536213939600915e-8;
    t30 = 0.10075268106969800458e-8;
    t31 = -0.36561132906572011904e-2 * t3;
    t32 = 0.36561132906572011898e-2 * t1 * t2;
    t33 = -t22 * t17 * (-cosP1_1 * sinP2_2 + sinP1_1 * cosP2_2) + t23 * t18 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) - t24 * t16 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + t25 * t19 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - t26 * t15 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t27 * t20 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t28 * t14 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t29 * t21 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4) - t30 * t13 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t31 * sinP1_1 * t4 + t32 * sinP2_1;
    t1 = -0.20150536213939600914e-8 * t5 * t7 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.40301072427879201826e-7 * t6 * t9 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.10881289555527384493e-5 * t8 * t11 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.34820126577687630379e-4 * t10 * t12 * (cosP1_2 * cosP2_2 + sinP1_2 * sinP2_2) - 0.12187044302190670634e-2 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.21936679743943207139e-1 * t1 * t4;
    bf[0] = t30 * t13 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t28 * t14 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t26 * t15 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t24 * t16 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + t22 * t17 * (cosP1_1 * cosP2_2 + sinP1_1 * sinP2_2) + t23 * t18 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) + t25 * t19 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + t27 * t20 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - t29 * t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t31 * cosP1_1 * t4 + t32 * cosP2_1;
    bf[1] = t33;
    bf[2] = t1;
}

static void idsbf_0_6_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[28];
    t2 = LegP2[22];
    t3 = LegP1[29];
    t4 = LegP2[21];
    t5 = LegP1[31];
    t6 = LegP2[23];
    t7 = LegP1[32];
    t8 = LegP2[24];
    t9 = LegP1[33];
    t10 = LegP2[25];
    t11 = LegP1[34];
    t12 = LegP2[26];
    t13 = LegP2[27];
    t14 = LegP1[30];
    t15 = t9 * t10;
    t16 = t11 * t12;
    t17 = LegP1[35] * t13;
    t18 = t9 * t13;
    t19 = t7 * t12;
    t20 = t5 * t10;
    t21 = t14 * t8;
    t22 = t3 * t6;
    t23 = t14 * t2;
    t24 = t5 * t6;
    t25 = t7 * t8;
    t26 = 0.60444699491714311559e-4;
    t27 = 0.11193462868835983621e-5;
    t28 = 0.22386925737671967242e-7;
    t29 = -0.18655771448059972700e-8;
    t30 = -0.84798961127545330462e-10;
    t31 = 0.14133160187924221742e-10;
    t32 = 0.33849031715360014469e-2 * t1 * t2;
    t33 = -t26 * t22 * (-cosP1_1 * sinP2_2 + sinP1_1 * cosP2_2) - t27 * t21 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) - t28 * t20 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t29 * t15 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t30 * t16 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - t31 * t18 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.50879376676527198274e-9 * t19 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.80592932655619082069e-4 * t23 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) - 0.20148233163904770519e-5 * t24 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - 0.55967314344179918100e-7 * t25 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - 0.70665800939621108725e-11 * t17 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.33849031715360014471e-2 * t3 * sinP1_1 * t4 + t32 * sinP2_1;
    t1 = 0.14133160187924221743e-10 * t11 * t13 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.33919584451018132180e-9 * t9 * t12 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.11193462868835983620e-7 * t7 * t10 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.44773851475343934484e-6 * t5 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.20148233163904770519e-4 * t14 * t6 * (cosP1_2 * cosP2_2 + sinP1_2 * sinP2_2) + 0.96711519186742898481e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.23694322200752010129e-1 * t1 * t4;
    bf[0] = t29 * t15 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t30 * t16 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.70665800939621108719e-11 * t17 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t31 * t18 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.50879376676527198272e-9 * t19 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t28 * t20 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t27 * t21 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + t26 * t22 * (cosP1_1 * cosP2_2 + sinP1_1 * sinP2_2) - 0.80592932655619082072e-4 * t23 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) - 0.20148233163904770518e-5 * t24 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - 0.55967314344179918097e-7 * t25 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.33849031715360014472e-2 * t3 * cosP1_1 * t4 + t32 * cosP2_1;
    bf[1] = t33;
    bf[2] = t1;
}

static void idsbf_0_8_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t5, t6, t7, t8, t9;
    t1 = LegP1[30];
    t2 = LegP2[37];
    t3 = LegP1[31];
    t4 = LegP2[38];
    t5 = LegP1[32];
    t6 = LegP2[39];
    t7 = LegP1[33];
    t8 = LegP2[40];
    t9 = LegP1[34];
    t10 = LegP2[41];
    t11 = LegP1[35];
    t12 = LegP2[42];
    t13 = LegP2[43];
    t14 = LegP1[29];
    t15 = LegP1[28];
    t16 = LegP2[36];
    t17 = t11 * LegP2[44];
    t18 = t9 * t13;
    t19 = t7 * t12;
    t20 = t5 * t10;
    t21 = t3 * t8;
    t22 = t1 * t6;
    t23 = t14 * t4;
    t24 = t1 * t2;
    t25 = t3 * t4;
    t26 = t5 * t6;
    t27 = t7 * t8;
    t28 = t9 * t10;
    t29 = t11 * t12;
    t30 = t29 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t31 = 0.56540839086125988528e-4;
    t32 = -0.43976208178097991078e-4;
    t33 = 0.10470525756689997875e-5;
    t34 = -0.62823154540139987250e-6;
    t35 = 0.20941051513379995751e-7;
    t36 = 0.95186597788090889762e-8;
    t37 = 0.47593298894045444881e-9;
    t38 = -0.15864432964681814961e-9;
    t39 = 0.13220360803901512469e-10;
    t40 = -0.30508524932080413389e-11;
    t41 = 0.50847541553467355650e-12;
    t42 = -0.72639345076381936638e-13;
    t43 = 0.36319672538190968319e-13;
    t44 = 0.31662869888230553572e-2 * t15 * t2;
    t45 = -0.31662869888230553575e-2 * t14;
    t29 = -t31 * t23 * (-cosP1_1 * sinP2_2 + sinP1_1 * cosP2_2) + t32 * t24 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) - t33 * t22 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + t34 * t25 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - t35 * t21 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t36 * t26 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3) - t37 * t20 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t38 * t27 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t39 * t19 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t40 * t28 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - t41 * t18 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + t42 * t29 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - t43 * t17 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + t44 * sinP2_1 + t45 * sinP1_1 * t16;
    t1 = -0.72639345076381936644e-13 * t11 * t13 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.20339016621386942257e-11 * t9 * t12 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.79322164823409074812e-10 * t7 * t10 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.38074639115236355903e-8 * t5 * t8 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.20941051513379995750e-6 * t3 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.12564630908027997449e-4 * t1 * t4 * (cosP1_2 * cosP2_2 + sinP1_2 * sinP2_2) - 0.79157174720576383931e-3 * t14 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.25330295910584442859e-1 * t15 * t16;
    bf[0] = t43 * t17 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + t41 * t18 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + t39 * t19 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t37 * t20 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t35 * t21 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t33 * t22 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + t31 * t23 * (cosP1_1 * cosP2_2 + sinP1_1 * sinP2_2) + t32 * t24 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) + t34 * t25 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - t36 * t26 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t38 * t27 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t40 * t28 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t42 * t30 + t44 * cosP2_1 + t45 * cosP1_1 * t16;
    bf[1] = t29;
    bf[2] = t1;
}

static void idsbf_0_8_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t5, t6, t7, t8, t9;
    t1 = LegP1[48];
    t2 = LegP2[38];
    t3 = LegP1[49];
    t4 = LegP2[39];
    t5 = LegP1[50];
    t6 = LegP2[40];
    t7 = LegP1[51];
    t8 = LegP2[41];
    t9 = LegP1[52];
    t10 = LegP2[42];
    t11 = LegP1[53];
    t12 = LegP2[43];
    t13 = LegP2[44];
    t14 = LegP1[47];
    t15 = LegP1[46];
    t16 = LegP2[37];
    t17 = LegP1[45];
    t18 = LegP2[36];
    t19 = t1 * t2;
    t20 = t3 * t4;
    t21 = t5 * t6;
    t22 = t7 * t8;
    t23 = t9 * t10;
    t24 = t11 * t12;
    t25 = LegP1[54] * t13;
    t26 = t9 * t13;
    t27 = t7 * t12;
    t28 = t5 * t10;
    t29 = t3 * t8;
    t30 = t1 * t6;
    t31 = t30 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t32 = t14 * t4;
    t33 = t32 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t34 = t15 * t2;
    t35 = t34 * (cosP1_1 * cosP2_2 + sinP1_1 * sinP2_2);
    t36 = t14 * t16;
    t37 = t36 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1);
    t38 = 0.29852040013060222021e-2 * t17 * t16;
    t39 = t38 * cosP2_1;
    t40 = -0.29852040013060222024e-2 * t15;
    t41 = t40 * cosP1_1 * t18;
    t31 = t41 + t39 - 0.68485031312612427125e-13 * t23 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.13697006262522485424e-13 * t27 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) - 0.22828343770870809041e-14 * t24 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.28535429713588511302e-15 * t26 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) - 0.14267714856794255651e-15 * t25 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) - 0.89742785032047324504e-8 * t20 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.44871392516023662248e-8 * t31 - 0.14957130838674554085e-9 * t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.33168933347844691140e-4 * t35 - 0.59230238121151234173e-6 * t19 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.37691969713459876294e-6 * t33 - 0.41461166684805863924e-4 * t37 + 0.57527426302594438785e-10 * t29 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.28763713151297219393e-11 * t22 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.82182037575134912554e-12 * t28 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t30 = t30 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t32 = t32 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t33 = t34 * (-cosP1_1 * sinP2_2 + sinP1_1 * cosP2_2);
    t34 = t36 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1);
    t19 = t19 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t20 = t20 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t21 = t21 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t1 = 0.28535429713588511300e-15 * t11 * t13 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + 0.91313375083483236167e-14 * t9 * t12 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.41091018787567456274e-12 * t7 * t10 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.23010970521037775512e-10 * t5 * t8 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.14957130838674554082e-8 * t3 * t6 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.10769134203845678940e-6 * t1 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.82922333369611727842e-5 * t14 * t2 * (cosP1_2 * cosP2_2 + sinP1_2 * sinP2_2) + 0.66337866695689382274e-3 * t15 * t16 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.26866836011754199820e-1 * t17 * t18;
    bf[0] = t31;
    bf[1] = t38 * sinP2_1 + t40 * sinP1_1 * t18 - 0.68485031312612427125e-13 * t23 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.13697006262522485424e-13 * t27 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.22828343770870809041e-14 * t24 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) - 0.28535429713588511302e-15 * t26 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.14267714856794255651e-15 * t25 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) - 0.89742785032047324504e-8 * t20 - 0.44871392516023662248e-8 * t30 - 0.14957130838674554085e-9 * t21 - 0.33168933347844691140e-4 * t33 - 0.59230238121151234173e-6 * t19 - 0.37691969713459876294e-6 * t32 - 0.41461166684805863924e-4 * t34 - 0.57527426302594438785e-10 * t29 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.28763713151297219393e-11 * t22 * (cosP1_6 * sinP2_5 - sinP1_6 * cosP2_5) - 0.82182037575134912554e-12 * t28 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    bf[2] = t1;
}

static void idsbf_0_10_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t5, t6, t7, t8, t9;
    t1 = LegP1[50];
    t2 = LegP2[61];
    t3 = LegP1[49];
    t4 = LegP2[60];
    t5 = LegP1[48];
    t6 = LegP2[59];
    t7 = LegP1[47];
    t8 = LegP2[58];
    t9 = LegP1[46];
    t10 = LegP2[57];
    t11 = LegP2[56];
    t12 = LegP1[51];
    t13 = LegP1[52];
    t14 = LegP1[53];
    t15 = LegP2[62];
    t16 = LegP1[54];
    t17 = LegP2[63];
    t18 = LegP2[64];
    t19 = LegP2[55];
    t20 = LegP1[45];
    t21 = t12 * t4;
    t22 = t13 * t2;
    t23 = t14 * t15;
    t24 = t16 * t17;
    t25 = t16 * LegP2[65];
    t26 = t14 * t18;
    t27 = t13 * t17;
    t28 = t12 * t15;
    t29 = t1 * t2;
    t30 = t3 * t4;
    t31 = t30 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t32 = t5 * t6;
    t33 = t7 * t8;
    t34 = t33 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t35 = t9 * t10;
    t36 = t35 * (cosP1_1 * cosP2_2 + sinP1_1 * sinP2_2);
    t37 = t7 * t11;
    t38 = t37 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1);
    t39 = t5 * t10;
    t40 = t39 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t41 = t3 * t8;
    t42 = t41 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t43 = t1 * t6;
    t44 = t43 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t45 = 0.28320131773125874470e-2 * t20 * t11;
    t46 = t45 * cosP2_1;
    t47 = -0.28320131773125874468e-2 * t9;
    t48 = t47 * cosP1_1 * t19;
    t31 = t46 + 0.27071085571975777296e-15 * t27 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) - 0.47772503950545489344e-16 * t23 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.31466813081250971631e-4 * t36 - 0.25745574339205340425e-4 * t38 + 0.77964726447290238606e-12 * t29 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.25988242149096746203e-12 * t21 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.54575308513103167022e-10 * t31 - 0.23389417934187071582e-10 * t44 + t48 + 0.44233799954208786428e-18 * t25 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10) + 0.12994121074548373100e-13 * t28 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) - 0.32485302686370932756e-14 * t22 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.79620839917575815569e-17 * t26 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) - 0.88467599908417572862e-18 * t24 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + 0.42568740640220470281e-8 * t32 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.22921629575503330149e-8 * t42 + 0.35757742137785195034e-6 * t34 - 0.23838494758523463356e-6 * t40;
    t27 = t27 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t28 = t28 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t29 = t29 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t30 = t30 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t33 = t33 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t34 = t35 * (-cosP1_1 * sinP2_2 + sinP1_1 * cosP2_2);
    t35 = t37 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1);
    t36 = t39 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t37 = t41 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t38 = t43 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t21 = -0.27071085571975777296e-15 * t27 - 0.47772503950545489344e-16 * t23 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) - 0.31466813081250971631e-4 * t34 - 0.25745574339205340425e-4 * t35 - 0.77964726447290238606e-12 * t29 - 0.25988242149096746203e-12 * t21 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.54575308513103167022e-10 * t30 - 0.23389417934187071582e-10 * t38 - 0.44233799954208786428e-18 * t25 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) - 0.12994121074548373100e-13 * t28 - 0.32485302686370932756e-14 * t22 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t45 * sinP2_1 + t47 * sinP1_1 * t19 - 0.79620839917575815569e-17 * t26 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) - 0.88467599908417572862e-18 * t24 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) - 0.42568740640220470281e-8 * t32 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.22921629575503330149e-8 * t37 - 0.35757742137785195034e-6 * t33 - 0.23838494758523463356e-6 * t36;
    bf[0] = t31;
    bf[1] = t21;
    bf[2] = -0.16242651343185466376e-14 * t13 * t15 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.10395296859638698481e-12 * t12 * t2 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.77964726447290238606e-11 * t1 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.65490370215723800431e-9 * t3 * t6 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.59596236896308658391e-7 * t5 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.57212387420456312055e-5 * t7 * t10 * (cosP1_2 * cosP2_2 + sinP1_2 * sinP2_2) - 0.56640263546251748938e-3 * t9 * t11 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.88467599908417572856e-18 * t16 * t18 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9) - 0.31848335967030326229e-16 * t14 * t17 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) - 0.28320131773125874468e-1 * t20 * t19;
}

static void idsbf_0_10_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t6, t7, t8, t9;
    t1 = LegP1[70];
    t2 = LegP2[60];
    t3 = LegP1[69];
    t4 = LegP2[59];
    t5 = LegP1[68];
    t6 = LegP2[58];
    t7 = LegP1[67];
    t8 = LegP2[57];
    t9 = LegP2[56];
    t10 = LegP1[71];
    t11 = LegP1[72];
    t12 = LegP1[73];
    t13 = LegP2[61];
    t14 = LegP1[74];
    t15 = LegP2[62];
    t16 = LegP1[75];
    t17 = LegP2[63];
    t18 = LegP1[76];
    t19 = LegP2[64];
    t20 = LegP2[65];
    t21 = LegP1[66];
    t22 = LegP2[55];
    t23 = t1 * t2;
    t24 = t3 * t4;
    t25 = t5 * t6;
    t26 = t7 * t8;
    t27 = t5 * t9;
    t28 = t3 * t8;
    t29 = t1 * t6;
    t30 = t10 * t4;
    t31 = t11 * t2;
    t32 = t31 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t33 = t12 * t13;
    t34 = t33 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t35 = t14 * t15;
    t36 = t16 * t17;
    t37 = t36 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t38 = t18 * t19;
    t39 = t38 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9);
    t40 = LegP1[77] * t20;
    t41 = t40 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10);
    t42 = t16 * t20;
    t43 = t42 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t44 = t14 * t19;
    t45 = t44 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t46 = t12 * t17;
    t47 = t46 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t48 = t11 * t15;
    t49 = t48 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t50 = t10 * t13;
    t51 = t50 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t52 = 0.27002186168180963628e-2 * t21 * t9;
    t53 = t52 * cosP2_1;
    t54 = -0.27002186168180963631e-2 * t7;
    t55 = t54 * cosP1_1 * t22;
    t32 = -0.22300934984477298187e-10 * t30 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.10407102992756072489e-10 * t23 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.24778816649419220210e-12 * t32 - 0.45549295311432390094e-16 * t35 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.10122065624762753354e-16 * t47 - 0.84350546873022944612e-18 * t37 + t55 + t53 + 0.92920562435322075794e-13 * t51 - 0.30973520811774025260e-14 * t34 + 0.91098590622864780181e-15 * t49 + 0.13318507401003622833e-18 * t45 - 0.22197512335006038055e-19 * t39 + 0.22197512335006038055e-20 * t43 - 0.24547441971073603298e-4 * t27 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) + 0.20456201642561336084e-4 * t26 * (cosP1_1 * cosP2_2 + sinP1_1 * sinP2_2) - 0.22729112936179262313e-6 * t28 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.15735539725047181602e-6 * t25 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - 0.21854916284787752225e-8 * t29 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.12488523591307286985e-8 * t24 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.11098756167503019028e-20 * t41;
    t28 = t28 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t29 = t29 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t30 = t30 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t31 = t31 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t33 = t33 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t34 = t35 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t35 = t36 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t36 = t38 * (sinP1_10 * cosP2_9 - cosP1_10 * sinP2_9);
    t37 = t42 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t38 = t44 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9);
    t39 = t46 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t41 = t48 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t42 = t50 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t23 = t52 * sinP2_1 - 0.22300934984477298187e-10 * t30 - 0.10407102992756072489e-10 * t23 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.24778816649419220210e-12 * t31 - 0.45549295311432390094e-16 * t34 - 0.10122065624762753354e-16 * t39 - 0.84350546873022944612e-18 * t35 + t54 * sinP1_1 * t22 - 0.92920562435322075794e-13 * t42 - 0.30973520811774025260e-14 * t33 - 0.91098590622864780181e-15 * t41 - 0.13318507401003622833e-18 * t38 - 0.22197512335006038055e-19 * t36 - 0.22197512335006038055e-20 * t37 - 0.24547441971073603298e-4 * t27 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) - 0.20456201642561336084e-4 * t26 * (-cosP1_1 * sinP2_2 + sinP1_1 * cosP2_2) - 0.22729112936179262313e-6 * t28 - 0.15735539725047181602e-6 * t25 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) - 0.21854916284787752225e-8 * t29 - 0.12488523591307286985e-8 * t24 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.11098756167503019028e-20 * t40 * (-cosP1_11 * sinP2_10 + sinP1_11 * cosP2_10);
    t1 = 0.22197512335006038056e-20 * t18 * t20 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10) + 0.88790049340024152219e-19 * t16 * t19 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9) + 0.50610328123813766770e-17 * t14 * t17 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + 0.36439436249145912074e-15 * t12 * t15 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.30973520811774025263e-13 * t11 * t13 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.29734579979303064251e-11 * t10 * t2 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.31221308978268217463e-9 * t1 * t4 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.34967866055660403559e-7 * t3 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.40912403285122672168e-5 * t5 * t8 * (cosP1_2 * cosP2_2 + sinP1_2 * sinP2_2) + 0.49094883942147206597e-3 * t7 * t9 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.29702404784999059991e-1 * t21 * t22;
    bf[0] = t32;
    bf[1] = t23;
    bf[2] = t1;
}

static void idsbf_0_12_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t7, t8, t9;
    t1 = LegP1[66];
    t2 = LegP2[79];
    t3 = LegP1[67];
    t4 = LegP2[78];
    t5 = LegP2[80];
    t6 = LegP1[68];
    t7 = LegP1[69];
    t8 = LegP1[70];
    t9 = LegP2[81];
    t10 = LegP1[71];
    t11 = LegP2[82];
    t12 = LegP1[72];
    t13 = LegP2[83];
    t14 = LegP1[73];
    t15 = LegP2[84];
    t16 = LegP1[74];
    t17 = LegP2[85];
    t18 = LegP1[75];
    t19 = LegP2[86];
    t20 = LegP1[76];
    t21 = LegP2[87];
    t22 = LegP1[77];
    t23 = LegP2[88];
    t24 = LegP2[89];
    t25 = t8 * t13;
    t26 = t7 * t11;
    t27 = t6 * t9;
    t28 = t3 * t5;
    t29 = t6 * t2;
    t30 = t7 * t5;
    t31 = t8 * t9;
    t32 = t10 * t11;
    t33 = t32 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t34 = t12 * t13;
    t35 = t34 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t36 = t14 * t15;
    t37 = t36 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t38 = t16 * t17;
    t39 = t38 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t40 = t18 * t19;
    t41 = t40 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t42 = t20 * t21;
    t43 = t42 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9);
    t44 = t22 * t23;
    t45 = t44 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10);
    t46 = t22 * LegP2[90];
    t47 = t20 * t24;
    t48 = t47 * (cosP1_10 * cosP2_11 + sinP1_10 * sinP2_11);
    t49 = t18 * t23;
    t50 = t49 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t51 = t16 * t21;
    t52 = t51 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t53 = t14 * t19;
    t54 = t53 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t55 = t12 * t17;
    t56 = t55 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t57 = t10 * t15;
    t58 = t57 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t59 = t1 * t2;
    t60 = 0.25852625006099697913e-2;
    t33 = -0.49820212592383885235e-11 * t33 - 0.36632509259105797967e-13 * t35 - 0.29073420046909363466e-15 * t37 - 0.25503000041148564445e-17 * t39 - 0.25503000041148564444e-19 * t41 - 0.30360714334700671958e-21 * t43 - 0.46001082325304048419e-23 * t45 + 0.23000541162652024208e-23 * t46 * (cosP1_11 * cosP2_12 + sinP1_11 * sinP2_12) + 0.50601190557834453260e-22 * t48 + 0.21252500034290470369e-20 * t50 + 0.12751500020574282223e-18 * t52 + 0.96911400156364544885e-17 * t54 + 0.87220260140728090406e-15 * t56 + 0.88964665343542652197e-13 * t58 + t60 * (-t3 * cosP1_1 * t4 + t59 * cosP2_1) + 0.99640425184767770468e-11 * t25 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.11956851022172132457e-8 * t26 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.15065632287936886896e-6 * t27 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + 0.19585321974317952964e-4 * t28 * (cosP1_1 * cosP2_2 + sinP1_1 * sinP2_2) - 0.16572195516730575585e-4 * t29 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) - 0.10761165919954919211e-6 * t30 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - 0.71741106133032794744e-9 * t31 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t30 = t30 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t31 = t31 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t34 = t34 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t35 = t36 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t36 = t38 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t37 = t40 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t38 = t42 * (sinP1_10 * cosP2_9 - cosP1_10 * sinP2_9);
    t39 = t44 * (-cosP1_11 * sinP2_10 + sinP1_11 * cosP2_10);
    t40 = t46 * (-cosP1_11 * sinP2_12 + sinP1_11 * cosP2_12);
    t41 = t47 * (-cosP1_10 * sinP2_11 + sinP1_10 * cosP2_11);
    t42 = t49 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t43 = t53 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t44 = t55 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t45 = t57 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t25 = t25 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t26 = t26 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t46 = -t3 * sinP1_1 * t4 + t59 * sinP2_1;
    t1 = -0.31023150007319637498e-1 * t1 * t4;
    t1 = -0.96911400156364544897e-16 * t14 * t17 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.10466431216887370848e-13 * t12 * t15 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.12455053148095971309e-11 * t10 * t13 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.15942468029562843277e-9 * t8 * t11 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.21522331839909838423e-7 * t7 * t9 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.30131264575873773791e-5 * t6 * t5 * (cosP1_2 * cosP2_2 + sinP1_2 * sinP2_2) - 0.43087708343499496523e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.46001082325304048421e-23 * t22 * t24 * (cosP1_11 * cosP2_11 + sinP1_11 * sinP2_11) - 0.20240476223133781306e-21 * t20 * t23 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10) - 0.12751500020574282222e-19 * t18 * t21 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9) - 0.10201200016459425778e-17 * t16 * t19 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + t1;
    bf[0] = t33;
    bf[1] = 0.15065632287936886896e-6 * t27 * (cosP1_2 * sinP2_3 - sinP1_2 * cosP2_3) - 0.19585321974317952964e-4 * t28 * (-cosP1_1 * sinP2_2 + sinP1_1 * cosP2_2) - 0.16572195516730575585e-4 * t29 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) - 0.10761165919954919211e-6 * t30 - 0.71741106133032794744e-9 * t31 - 0.49820212592383885235e-11 * t32 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.36632509259105797967e-13 * t34 - 0.29073420046909363466e-15 * t35 - 0.25503000041148564445e-17 * t36 - 0.25503000041148564444e-19 * t37 - 0.30360714334700671958e-21 * t38 - 0.46001082325304048419e-23 * t39 - 0.23000541162652024208e-23 * t40 - 0.50601190557834453260e-22 * t41 - 0.21252500034290470369e-20 * t42 - 0.12751500020574282223e-18 * t51 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) - 0.96911400156364544885e-17 * t43 - 0.87220260140728090406e-15 * t44 - 0.88964665343542652197e-13 * t45 - 0.99640425184767770468e-11 * t25 - 0.11956851022172132457e-8 * t26 + t60 * t46;
    bf[2] = t1;
}

static void idsbf_0_12_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t8, t9;
    t1 = LegP1[100];
    t2 = LegP2[88];
    t3 = LegP1[96];
    t4 = LegP2[84];
    t5 = LegP1[98];
    t6 = LegP1[97];
    t7 = LegP2[85];
    t8 = LegP1[99];
    t9 = LegP2[82];
    t10 = LegP1[95];
    t11 = LegP2[83];
    t12 = LegP2[90];
    t13 = LegP2[86];
    t14 = LegP2[87];
    t15 = LegP1[101];
    t16 = LegP1[102];
    t17 = LegP2[89];
    t18 = LegP1[103];
    t19 = LegP1[94];
    t20 = LegP2[80];
    t21 = LegP1[93];
    t22 = LegP2[81];
    t23 = LegP2[79];
    t24 = LegP1[92];
    t25 = LegP2[78];
    t26 = LegP1[91];
    t27 = t1 * t13;
    t28 = t8 * t14;
    t29 = t15 * t14;
    t30 = t16 * t2;
    t31 = t15 * t17;
    t32 = t18 * t17;
    t33 = t32 * (cosP1_12 * cosP2_11 + sinP1_12 * sinP2_11);
    t34 = t16 * t12;
    t35 = t34 * (cosP1_11 * cosP2_12 + sinP1_11 * sinP2_12);
    t36 = t19 * t20;
    t37 = t21 * t22;
    t38 = t37 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t39 = t10 * t22;
    t40 = t39 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t41 = t19 * t9;
    t42 = t41 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t43 = t21 * t23;
    t44 = t43 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1);
    t45 = t24 * t20;
    t46 = t45 * (cosP1_1 * cosP2_2 + sinP1_1 * sinP2_2);
    t47 = t1 * t2;
    t48 = t47 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t49 = t3 * t4;
    t50 = t49 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t51 = t5 * t4;
    t52 = t6 * t7;
    t53 = t52 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t54 = t8 * t7;
    t55 = t54 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t56 = t3 * t9;
    t57 = t56 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t58 = t10 * t11;
    t59 = t58 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t60 = t6 * t11;
    t61 = t60 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t62 = LegP1[104] * t12;
    t63 = t62 * (cosP1_13 * cosP2_12 + sinP1_13 * sinP2_12);
    t64 = t5 * t13;
    t65 = t64 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t66 = 0.24838398679451844715e-2 * t26 * t23;
    t67 = t66 * cosP2_1;
    t68 = -0.24838398679451844714e-2 * t24;
    t69 = t68 * cosP1_1 * t25;
    t33 = -0.96079152858088199264e-25 * t33 - 0.27932838461468436817e-15 * t51 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.80065960715073499383e-26 * t35 + 0.75819287788314544308e-7 * t38 - 0.68926625262104131200e-9 * t40 + 0.43079140788815081993e-9 * t42 - 0.15922050435546054305e-4 * t44 + 0.13647471801896617976e-4 * t46 + 0.53035692377664685992e-22 * t48 + 0.15642389538422324618e-13 * t50 + 0.10291045748962055669e-15 * t53 - 0.24502489878481084927e-17 * t55 - 0.47865711987572313328e-11 * t57 + 0.25340671052244165879e-11 * t59 - 0.35195376461450230388e-13 * t61 - 0.40032980357536749688e-26 * t63 + 0.73507469635443254784e-18 * t65 - 0.24502489878481084927e-19 * t27 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + 0.58339261615431154584e-20 * t28 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) - 0.29169630807715577292e-21 * t29 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9) - 0.44196410314720571661e-23 * t30 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10) + 0.57647491714852919555e-24 * t31 * (cosP1_10 * cosP2_11 + sinP1_10 * sinP2_11) - 0.10338993789315619679e-6 * t36 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + t67 + t69;
    t27 = t27 * (cosP1_9 * sinP2_8 - sinP1_9 * cosP2_8);
    t28 = t28 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9);
    t29 = t29 * (-sinP1_10 * cosP2_9 + cosP1_10 * sinP2_9);
    t30 = t30 * (cosP1_11 * sinP2_10 - sinP1_11 * cosP2_10);
    t35 = t47 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t31 = t31 * (-cosP1_10 * sinP2_11 + sinP1_10 * cosP2_11);
    t32 = t32 * (cosP1_12 * sinP2_11 - sinP1_12 * cosP2_11);
    t34 = t34 * (-cosP1_11 * sinP2_12 + sinP1_11 * cosP2_12);
    t37 = t37 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t38 = t39 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3);
    t39 = t41 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t40 = t43 * (cosP1_2 * sinP2_1 - sinP1_2 * cosP2_1);
    t41 = t45 * (-cosP1_1 * sinP2_2 + sinP1_1 * cosP2_2);
    t42 = t49 * (cosP1_5 * sinP2_6 - sinP1_5 * cosP2_6);
    t43 = t51 * (cosP1_7 * sinP2_6 - sinP1_7 * cosP2_6);
    t44 = t52 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t45 = t56 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4);
    t46 = t58 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t47 = t60 * (cosP1_6 * sinP2_5 - sinP1_6 * cosP2_5);
    t27 = 0.24502489878481084927e-19 * t27 - 0.58339261615431154584e-20 * t28 + 0.29169630807715577292e-21 * t29 + 0.44196410314720571661e-23 * t30 - 0.57647491714852919555e-24 * t31 + 0.96079152858088199264e-25 * t32 - 0.80065960715073499383e-26 * t34 + 0.10338993789315619679e-6 * t36 * (cosP1_3 * sinP2_2 - sinP1_3 * cosP2_2) + 0.24502489878481084927e-17 * t54 * (cosP1_8 * sinP2_7 - sinP1_8 * cosP2_7) + t68 * sinP1_1 * t25 - 0.53035692377664685992e-22 * t35 - 0.75819287788314544308e-7 * t37 + 0.68926625262104131200e-9 * t38 - 0.43079140788815081993e-9 * t39 + 0.15922050435546054305e-4 * t40 - 0.13647471801896617976e-4 * t41 + 0.15642389538422324618e-13 * t42 + 0.27932838461468436817e-15 * t43 - 0.10291045748962055669e-15 * t44 + 0.47865711987572313328e-11 * t45 - 0.25340671052244165879e-11 * t46 + 0.35195376461450230388e-13 * t47 + t66 * sinP2_1 + 0.40032980357536749688e-26 * t62 * (cosP1_13 * sinP2_12 - sinP1_13 * cosP2_12) - 0.73507469635443254784e-18 * t64 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t1 = t1 * t14 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9);
    t14 = 0.32289918283287398132e-1 * t26 * t25;
    t1 = 0.26517846188832342994e-22 * t15 * t2 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10) + 0.80065960715073499367e-26 * t18 * t12 * (cosP1_12 * cosP2_12 + sinP1_12 * sinP2_12) + 0.13785325052420826238e-7 * t19 * t22 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.86158281577630163993e-10 * t10 * t9 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.38212921045310530330e-3 * t24 * t23 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.22745786336494363293e-5 * t21 * t20 * (cosP1_2 * cosP2_2 + sinP1_2 * sinP2_2) + 0.38431661143235279704e-24 * t16 * t17 * (cosP1_11 * cosP2_11 + sinP1_11 * sinP2_11) + 0.39105973846055811545e-14 * t6 * t4 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.29402987854177301914e-16 * t5 * t7 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.56312602338320368621e-12 * t3 * t11 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.24502489878481084927e-18 * t8 * t13 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + 0.23335704646172461834e-20 * t1 + t14;
    bf[0] = t33;
    bf[1] = t27;
    bf[2] = t1;
}

static void idsbf_3_0_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1;
    t1 = -0.66751190736246366256e-2 * LegP1[4];
    bf[0] = t1 * sinP1_1;
    bf[1] = t1 * cosP1_1;
    bf[2] = 0.33375595368123183125e-2 * LegP1[5] * sinP1_2;
}

static void idsbf_3_0_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2;
    t1 = 0.28904113455224919886e-3 * LegP1[13];
    t2 = -0.17342468073134951932e-2 * LegP1[11];
    bf[0] = t2 * sinP1_1 + t1 * sinP1_3;
    bf[1] = t2 * cosP1_1 - t1 * cosP1_3;
    bf[2] = -0.11561645382089967956e-2 * LegP1[12] * sinP1_2;
}

static void idsbf_3_2_1_0_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1;
    t1 = -0.66751190736246366253e-2 * LegP2[4];
    bf[0] = t1 * sinP2_1;
    bf[1] = t1 * cosP2_1;
    bf[2] = 0.33375595368123183128e-2 * LegP2[5] * sinP2_2;
}

static void idsbf_3_2_1_2_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5, t6, t7;
    t1 = LegP2[4];
    t2 = LegP1[4];
    t3 = LegP2[5];
    t4 = LegP1[5] * t1;
    t5 = 0.23600109810938228724e-2;
    t6 = -0.47200219621876457446e-2 * LegP1[3];
    t7 = t6 * t1;
    bf[0] = t5 * (t4 * (cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) + t2 * cosP1_1 * t3 * sinP2_2) + t7 * sinP2_1;
    bf[1] = t5 * (t2 * sinP1_1 * t3 * sinP2_2 + t4 * (-cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1)) + t7 * cosP2_1;
    bf[2] = -0.47200219621876457450e-2 * t2 * t1 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + t6 * t3 * sinP2_2;
}

static void idsbf_3_2_2_2_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4;
    t1 = LegP1[4];
    t2 = LegP2[3];
    t3 = 0.37315050016325277530e-2 * LegP2[5] * cosP2_2;
    t4 = -0.74630100032650555064e-2 * t2;
    bf[0] = t1 * sinP1_1 * (t3 + t4);
    bf[1] = t1 * cosP1_1 * (-t3 + t4);
    bf[2] = -0.74630100032650555060e-2 * LegP1[5] * sinP1_2 * t2;
}

static void idsbf_3_2_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5, t6, t7;
    t1 = LegP1[5];
    t2 = LegP2[4];
    t3 = LegP1[3];
    t4 = LegP1[4];
    t5 = LegP2[5];
    t6 = 0.57808226910449839778e-2 * t3;
    t7 = 0.19269408970149946591e-2 * t4;
    bf[0] = t2 * (t1 * (0.19269408970149946590e-2 * sinP1_2 * cosP2_1 - 0.28904113455224919886e-2 * cosP1_2 * sinP2_1) + t6 * sinP2_1) + t7 * cosP1_1 * t5 * sinP2_2;
    bf[1] = t2 * (t1 * (0.19269408970149946590e-2 * sinP1_2 * sinP2_1 + 0.28904113455224919886e-2 * cosP1_2 * cosP2_1) + t6 * cosP2_1) + t7 * sinP1_1 * t5 * sinP2_2;
    bf[2] = -0.38538817940299893182e-2 * t4 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.57808226910449839772e-2 * t3 * t5 * sinP2_2;
}

static void idsbf_3_2_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = LegP1[12];
    t2 = LegP2[4];
    t3 = LegP1[10];
    t4 = LegP1[11];
    t5 = LegP2[5];
    t6 = LegP1[14] * t2;
    t7 = 0.50063393052184774696e-2 * t3;
    t8 = 0.16687797684061591564e-2 * t4;
    bf[0] = t2 * (t1 * (-0.55625992280205305212e-3 * cosP1_2 * sinP2_1 - 0.27812996140102652608e-3 * sinP1_2 * cosP2_1) + t7 * sinP2_1) - 0.69532490350256631508e-4 * t6 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t8 * cosP1_1 * t5 * sinP2_2;
    bf[1] = t2 * (t1 * (0.55625992280205305212e-3 * cosP1_2 * cosP2_1 - 0.27812996140102652608e-3 * sinP1_2 * sinP2_1) + t7 * cosP2_1) + 0.69532490350256631508e-4 * t6 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t8 * sinP1_1 * t5 * sinP2_2;
    bf[2] = 0.13906498070051326304e-3 * LegP1[13] * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.25031696526092387344e-2 * t4 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.66751190736246366252e-2 * t3 * t5 * sinP2_2;
}

static void idsbf_3_2_4_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[13];
    t2 = LegP2[5];
    t3 = LegP1[12];
    t4 = LegP2[4];
    t5 = LegP1[11];
    t6 = LegP2[3];
    t7 = LegP1[14];
    t8 = t1 * t2;
    t9 = t7 * t4;
    t10 = -0.43087708343499496522e-4;
    t11 = 0.10771927085874874130e-4;
    t12 = -0.90484187521348942688e-2 * LegP1[10];
    t13 = 0.46534725010979456240e-2 * t6;
    t14 = 0.12926312503049848956e-2 * cosP2_2 * t2;
    t15 = 0.25852625006099697912e-3 * t1;
    t1 = t10 * t7 * t2 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.64631562515249244780e-4 * t1 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.90484187521348942688e-3 * t5 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.10341050002439879164e-2 * t3 * sinP1_2 * t6;
    bf[0] = t4 * (t3 * (-0.60322791680899295124e-3 * cosP1_2 * sinP2_1 - 0.30161395840449647566e-3 * sinP1_2 * cosP2_1) + t12 * sinP2_1) + t10 * t8 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + t11 * t9 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + (t14 + t13) * t5 * sinP1_1 + t15 * sinP1_3 * t6;
    bf[1] = t10 * t8 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - t11 * t9 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t4 * (t3 * (0.60322791680899295124e-3 * cosP1_2 * cosP2_1 - 0.30161395840449647566e-3 * sinP1_2 * sinP2_1) + t12 * cosP2_1) + (-t14 + t13) * t5 * cosP1_1 - t15 * cosP1_3 * t6;
    bf[2] = t1;
}

static void idsbf_3_2_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    bf[0] = 0;
    bf[1] = 0;
    bf[2] = 0;
}

static void idsbf_3_2_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[24];
    t2 = LegP2[5];
    t3 = LegP1[23];
    t4 = LegP2[4];
    t5 = LegP1[22];
    t6 = LegP2[3];
    t7 = LegP1[21];
    t8 = LegP1[25];
    t9 = t1 * t2;
    t10 = LegP1[26] * t2;
    t11 = t8 * t4;
    t12 = 0.96832423463478830190e-5;
    t13 = -0.72624317597609122636e-5;
    t14 = 0.12104052932934853772e-5;
    t15 = sinP1_1 * t5;
    t8 = -0.48416211731739415092e-5 * t8 * t2 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.58099454078087298106e-4 * t1 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.11619890815617459621e-2 * t5 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.69719344893704757732e-3 * t3 * sinP1_2 * t6 - 0.17429836223426189433e-2 * t7 * t2 * sinP2_2;
    bf[0] = t4 * (-0.23239781631234919244e-3 * sinP1_2 * cosP2_1 * t3 + 0.34859672446852378866e-2 * sinP2_1 * t7) + t6 * (-0.17429836223426189433e-2 * t15 + 0.87149181117130947158e-4 * sinP1_3 * t1) + t13 * t9 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + t14 * t10 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t12 * t11 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + 0.29049727039043649052e-3 * t5 * cosP1_1 * t2 * sinP2_2;
    bf[1] = -t12 * t11 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t13 * t9 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - t14 * t10 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t4 * (-0.23239781631234919244e-3 * sinP1_2 * sinP2_1 * t3 + 0.34859672446852378866e-2 * cosP2_1 * t7) + t6 * (-0.17429836223426189433e-2 * t5 * cosP1_1 - 0.87149181117130947158e-4 * cosP1_3 * t1) + 0.29049727039043649052e-3 * t15 * t2 * sinP2_2;
    bf[2] = t8;
}

static void idsbf_3_4_1_0_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2;
    t1 = -0.17342468073134951932e-2 * LegP2[11];
    t2 = 0.28904113455224919886e-3 * LegP2[13];
    bf[0] = t1 * sinP2_1 + t2 * sinP2_3;
    bf[1] = t1 * cosP2_1 - t2 * cosP2_3;
    bf[2] = -0.11561645382089967955e-2 * LegP2[12] * sinP2_2;
}

static void idsbf_3_4_1_2_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[3];
    t2 = LegP2[11];
    t3 = LegP1[4];
    t4 = LegP2[12];
    t5 = LegP1[5];
    t6 = LegP2[13];
    t7 = t5 * t6;
    t5 = t5 * t2;
    t8 = 0.61314883885124614624e-3;
    t9 = 0.10219147314187435772e-3;
    t10 = -0.81753178513499486172e-3 * t3;
    bf[0] = t1 * (0.20438294628374871542e-3 * sinP2_3 * t6 - 0.12262976777024922925e-2 * sinP2_1 * t2) + t9 * t7 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + t8 * t5 * (cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) + t10 * cosP1_1 * t4 * sinP2_2;
    bf[1] = t1 * (-0.12262976777024922925e-2 * cosP2_1 * t2 - 0.20438294628374871542e-3 * cosP2_3 * t6) - t8 * t5 * (cosP1_2 * cosP2_1 - sinP1_2 * sinP2_1) - t9 * t7 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + t10 * sinP1_1 * t4 * sinP2_2;
    bf[2] = -0.20438294628374871544e-3 * t3 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.12262976777024922925e-2 * t3 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.16350635702699897234e-2 * t1 * t4 * sinP2_2;
}

static void idsbf_3_4_2_2_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[4];
    t2 = LegP2[10];
    t3 = LegP1[3];
    t4 = LegP2[11];
    t5 = LegP1[5];
    t6 = LegP2[13];
    t7 = LegP2[14];
    t8 = t5 * t6;
    t9 = t5 * t4;
    t10 = t1 * t7;
    t11 = 0.94400439243752914892e-3 * LegP2[12] * cosP2_2;
    t12 = -0.47200219621876457452e-2 * t2;
    t2 = 0.16520076867656760107e-2 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.39333516351563714538e-4 * t1 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.39333516351563714540e-4 * t5 * t7 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.47200219621876457448e-2 * t5 * sinP1_2 * t2;
    bf[0] = t3 * (0.49560230602970280318e-2 * sinP2_1 * t4 + 0.11800054905469114362e-3 * sinP2_3 * t6) - 0.19666758175781857271e-4 * t8 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.82600384338283800532e-3 * t9 * (cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) + 0.39333516351563714542e-4 * t10 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t1 * sinP1_1 * (-t11 + t12);
    bf[1] = t3 * (0.49560230602970280318e-2 * cosP2_1 * t4 - 0.11800054905469114362e-3 * cosP2_3 * t6) + 0.19666758175781857271e-4 * t8 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + 0.39333516351563714542e-4 * t10 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) - 0.82600384338283800532e-3 * t9 * (cosP1_2 * cosP2_1 - sinP1_2 * sinP2_1) + t1 * cosP1_1 * (t11 + t12);
    bf[2] = t2;
}

static void idsbf_3_4_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[5];
    t2 = LegP2[11];
    t3 = LegP1[4];
    t4 = LegP2[10];
    t5 = LegP1[3];
    t6 = LegP2[12];
    t7 = LegP2[13];
    t8 = LegP2[14];
    t9 = t1 * t7;
    t10 = t3 * t8;
    t11 = t3 * (0.99619811777903986562e-2 * cosP1_1 * t4 - 0.14231401682557712365e-3 * sinP1_1 * sinP2_2 * t6) + t5 * (-0.34155364038138509676e-2 * cosP2_1 * t2 + 0.14231401682557712367e-3 * cosP2_3 * t7) + 0.59297507010657134852e-4 * t10 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + 0.11859501402131426972e-4 * t9 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + t2 * (0.13519831598429826747e-2 * sinP1_2 * sinP2_1 + 0.78272709254067418008e-3 * cosP1_2 * cosP2_1) * t1;
    bf[0] = t3 * (-0.14231401682557712365e-3 * cosP1_1 * sinP2_2 * t6 + 0.99619811777903986562e-2 * sinP1_1 * t4) + t5 * (-0.34155364038138509676e-2 * sinP2_1 * t2 - 0.14231401682557712367e-3 * sinP2_3 * t7) - 0.11859501402131426972e-4 * t9 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.59297507010657134852e-4 * t10 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t2 * (0.13519831598429826747e-2 * sinP1_2 * cosP2_1 - 0.78272709254067418008e-3 * cosP1_2 * sinP2_1) * t1;
    bf[1] = t11;
    bf[2] = -0.29648753505328567426e-4 * t1 * t8 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.22770242692092339784e-2 * t3 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.94876011217051415770e-4 * t3 * t7 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.42694205047673137096e-3 * t5 * t6 * sinP2_2 - 0.49809905888951993278e-2 * t1 * sinP1_2 * t4;
}

static void idsbf_3_4_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[12];
    t2 = LegP2[11];
    t3 = LegP1[11];
    t4 = LegP2[12];
    t5 = LegP2[13];
    t6 = LegP1[13];
    t7 = LegP2[14];
    t8 = LegP2[10];
    t9 = LegP1[10];
    t10 = t1 * t5;
    t11 = t6 * t7;
    t12 = LegP1[14] * t2;
    t13 = t3 * t7;
    t14 = 0.12324755388555582401e-3 * t9 * t5;
    t15 = 0.43136643859944538398e-3 * t6;
    t16 = t2 * (t1 * (0.30811888471388956000e-3 * sinP1_2 * sinP2_1 - 0.18487133082833373600e-3 * cosP1_2 * cosP2_1) - 0.29579412932533397758e-2 * cosP2_1 * t9) + t3 * (-0.12324755388555582398e-3 * sinP1_1 * sinP2_2 * t4 + 0.25881986315966723038e-2 * cosP1_1 * t8) + 0.10270629490462985333e-4 * t10 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + 0.25676573726157463332e-5 * t11 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.15405944235694477998e-4 * t13 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + 0.30811888471388956000e-4 * t12 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t14 * cosP2_3 + t15 * cosP1_3 * t8;
    t5 = 0.61623776942777911998e-4 * t6 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.14789706466266698878e-2 * t3 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.61623776942777911996e-4 * t3 * t5 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.10270629490462985333e-4 * t1 * t7 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.17254657543977815359e-2 * t1 * sinP1_2 * t8 + 0.49299021554222329594e-3 * t9 * t4 * sinP2_2;
    bf[0] = t2 * (t1 * (0.30811888471388956000e-3 * sinP1_2 * cosP2_1 + 0.18487133082833373600e-3 * cosP1_2 * sinP2_1) - 0.29579412932533397758e-2 * sinP2_1 * t9) + t3 * (0.25881986315966723038e-2 * sinP1_1 * t8 - 0.12324755388555582398e-3 * cosP1_1 * sinP2_2 * t4) - 0.10270629490462985333e-4 * t10 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) - 0.25676573726157463332e-5 * t11 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.30811888471388956000e-4 * t12 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + 0.15405944235694477998e-4 * t13 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) - t14 * sinP2_3 - t15 * sinP1_3 * t8;
    bf[1] = t16;
    bf[2] = t5;
}

static void idsbf_3_4_4_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[13];
    t2 = LegP2[12];
    t3 = LegP1[11];
    t4 = LegP1[12];
    t5 = LegP2[11];
    t6 = LegP2[13];
    t7 = LegP2[14];
    t8 = LegP1[14];
    t9 = LegP2[10];
    t10 = t1 * t2;
    t11 = t4 * t5;
    t12 = t8 * t5;
    t13 = t1 * t7;
    t14 = t3 * t7;
    t15 = -0.25881986315966723040e-3;
    t16 = 0.18487133082833373600e-4;
    t17 = -0.12324755388555582399e-4;
    t18 = 0.15405944235694477998e-5;
    t19 = 0.27730699624250060398e-4;
    t20 = -0.33276839549100072478e-2 * t9;
    t21 = 0.36974266165666747198e-3 * cosP2_2 * t2;
    t22 = 0.18487133082833373599e-3 * t1;
    t23 = 0.36974266165666747196e-3 * LegP1[10] * t6;
    t24 = t15 * t11 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) - t16 * ((cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) * t6 * t4 - t12 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1)) + t17 * t10 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - t18 * t13 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t19 * t14 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + t22 * cosP1_3 * t9 + t23 * cosP2_3 + (-t21 + t20) * t3 * cosP1_1;
    bf[0] = t17 * t10 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + t15 * t11 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) + t16 * (t12 * (cosP1_4 * sinP2_1 - sinP1_4 * cosP2_1) + (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) * t6 * t4) + t18 * t13 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t19 * t14 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) - t22 * sinP1_3 * t9 - t23 * sinP2_3 + (t21 + t20) * t3 * sinP1_1;
    bf[1] = t24;
    bf[2] = -0.12324755388555582400e-4 * t8 * t2 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.11092279849700024159e-3 * t1 * t5 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.36974266165666747196e-4 * t3 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.61623776942777911996e-5 * t4 * t7 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.73948532331333494390e-3 * t4 * sinP1_2 * t9;
}

static void idsbf_3_4_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[10];
    t2 = LegP2[11];
    t3 = LegP1[13];
    t4 = LegP2[12];
    t5 = LegP1[12];
    t6 = LegP2[13];
    t7 = LegP2[14];
    t8 = LegP1[14];
    t9 = LegP1[11];
    t10 = LegP2[10];
    t11 = t8 * t6;
    t12 = t3 * t4;
    t13 = t5 * t6;
    t14 = t3 * t7;
    t15 = t8 * t2;
    t16 = t9 * t7;
    t17 = 0.48341667866540568896e-4 * t3;
    t18 = 0.26587917326597312892e-3 * t1 * t6;
    t19 = t2 * (t5 * (0.18853250467950821871e-3 * cosP1_2 * cosP2_1 - 0.53175834653194625788e-4 * sinP1_2 * sinP2_1) + 0.36256250899905426672e-2 * cosP2_1 * t1) + t9 * (-0.20303500503947038936e-2 * cosP1_1 * t10 + 0.38673334293232455116e-3 * sinP1_1 * sinP2_2 * t4) + 0.30213542416587855560e-5 * t11 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.40284723222117140748e-6 * t14 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.12085416966635142225e-5 * t15 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + 0.16919583753289199116e-4 * t16 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + 0.19336667146616227558e-4 * t12 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.88626391088657709642e-5 * t13 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - t17 * cosP1_3 * t10 + t18 * cosP2_3;
    t3 = -0.48341667866540568894e-5 * t8 * t4 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.19336667146616227560e-4 * t3 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.14502500359962170669e-2 * t9 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.10635166930638925158e-3 * t9 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.56398612510963997050e-5 * t5 * t7 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.19336667146616227559e-2 * t1 * t4 * sinP2_2 + 0.67678335013156796452e-3 * t5 * sinP1_2 * t10;
    bf[0] = t2 * (t5 * (-0.18853250467950821871e-3 * cosP1_2 * sinP2_1 - 0.53175834653194625788e-4 * sinP1_2 * cosP2_1) + 0.36256250899905426672e-2 * sinP2_1 * t1) + t9 * (-0.20303500503947038936e-2 * sinP1_1 * t10 + 0.38673334293232455116e-3 * cosP1_1 * sinP2_2 * t4) + 0.30213542416587855560e-5 * t11 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.19336667146616227558e-4 * t12 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - 0.88626391088657709642e-5 * t13 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) - 0.40284723222117140748e-6 * t14 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.12085416966635142225e-5 * t15 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + 0.16919583753289199116e-4 * t16 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t17 * sinP1_3 * t10 - t18 * sinP2_3;
    bf[1] = t19;
    bf[2] = t3;
}

static void idsbf_3_4_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[21];
    t2 = LegP2[13];
    t3 = LegP1[24];
    t4 = LegP2[10];
    t5 = LegP1[25];
    t6 = LegP2[12];
    t7 = LegP1[23];
    t8 = LegP2[11];
    t9 = LegP1[22];
    t10 = LegP2[14];
    t11 = LegP1[26];
    t12 = t5 * t2;
    t13 = t3 * t6;
    t14 = t7 * t2;
    t15 = t3 * t10;
    t16 = LegP1[27] * t2;
    t17 = t11 * t6;
    t18 = t5 * t8;
    t19 = t9 * t10;
    t20 = 0.61291254532238212066e-7;
    t21 = 0.35303762610569210150e-3 * cosP1_1 * sinP2_2 * t6 - 0.88259406526423025380e-3 * sinP1_1 * t4;
    t22 = 0.44129703263211512686e-4 * t3;
    t23 = 0.24271336794766331980e-3 * t1 * t2;
    t24 = 0.35303762610569210150e-3 * sinP1_1 * sinP2_2 * t6 - 0.88259406526423025380e-3 * cosP1_1 * t4;
    t24 = t8 * (t7 * (0.12356316913699223553e-3 * cosP1_2 * cosP2_1 - 0.97085347179065327912e-4 * sinP1_2 * sinP2_1) + 0.33097277447408634516e-2 * cosP2_1 * t1) + t9 * t24 + t20 * t12 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.14709901087737170896e-5 * t13 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.36774752719342927242e-6 * t15 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.30645627266119106034e-7 * t16 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.24516501812895284824e-6 * t17 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.11032425815802878173e-5 * t18 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + 0.73549505438685854486e-5 * t19 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + 0.80904455982554439928e-5 * t14 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - t22 * cosP1_3 * t4 + t23 * cosP2_3;
    t2 = t20 * t11 * t2 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.11032425815802878172e-2 * t9 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.80904455982554439928e-4 * t9 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.29419802175474341792e-5 * t7 * t10 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.98066007251581139308e-6 * t5 * t6 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.66194554894817269034e-5 * t3 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.35303762610569210150e-3 * t7 * sinP1_2 * t4 - 0.21182257566341526090e-2 * t1 * t6 * sinP2_2;
    bf[0] = t8 * (t7 * (-0.97085347179065327912e-4 * sinP1_2 * cosP2_1 - 0.12356316913699223553e-3 * cosP1_2 * sinP2_1) + 0.33097277447408634516e-2 * sinP2_1 * t1) + t9 * t21 + t20 * t12 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.14709901087737170896e-5 * t13 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - 0.80904455982554439928e-5 * t14 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) - 0.36774752719342927242e-6 * t15 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.30645627266119106034e-7 * t16 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.24516501812895284824e-6 * t17 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.11032425815802878173e-5 * t18 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + 0.73549505438685854486e-5 * t19 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t22 * sinP1_3 * t4 - t23 * sinP2_3;
    bf[1] = t24;
    bf[2] = t2;
}

static void idsbf_3_4_6_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[26];
    t2 = LegP2[12];
    t3 = LegP1[25];
    t4 = LegP2[11];
    t5 = LegP1[22];
    t6 = LegP2[14];
    t7 = LegP2[13];
    t8 = LegP1[24];
    t9 = LegP1[23];
    t10 = LegP1[27];
    t11 = LegP2[10];
    t12 = LegP1[21];
    t13 = t9 * t7;
    t14 = t8 * t6;
    t15 = t10 * t7;
    t16 = t1 * t2;
    t17 = t3 * t4;
    t18 = t5 * t6;
    t19 = t1 * t6;
    t20 = t3 * t7;
    t21 = t8 * t2;
    t22 = -0.54429995256678239402e-5;
    t23 = 0.33618526482065971391e-5;
    t24 = 0.16008822134317129235e-6;
    t25 = 0.74707836626813269762e-7;
    t26 = -0.58699014492496140530e-7;
    t27 = -0.16008822134317129237e-7;
    t28 = 0.26681370223861882058e-8;
    t29 = 0.22412350988043980930e-5;
    t30 = 0.64035288537268516938e-5;
    t31 = 0.37652749659913887960e-3 * cosP2_2 * t2;
    t32 = 0.43031713897044443382e-2 * t11;
    t33 = 0.10757928474261110846e-3 * t8;
    t34 = t12 * (-0.62127036938857915140e-2 * cosP2_1 * t4 + 0.22860598007804860546e-3 * cosP2_3 * t7) + t22 * t13 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - t23 * t17 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) - t24 * t14 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - t25 * t16 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t26 * t20 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t27 * t19 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t28 * t15 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t29 * t21 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + t30 * t18 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + (t32 - t31) * t5 * cosP1_1 + t4 * (0.26894821185652777114e-3 * cosP1_2 * cosP2_1 - 0.26894821185652777140e-4 * sinP1_2 * sinP2_1) * t9 - t33 * cosP1_3 * t11;
    t1 = t27 * t10 * t6 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.26681370223861882058e-7 * t1 * t7 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.59766269301450615816e-6 * t3 * t2 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.20171115889239582834e-4 * t8 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.29584303304218054826e-3 * t5 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.10885999051335647879e-4 * t5 * t7 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.64035288537268516944e-6 * t9 * t6 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.43031713897044443386e-3 * t9 * sinP1_2 * t11;
    bf[0] = t12 * (-0.22860598007804860546e-3 * sinP2_3 * t7 - 0.62127036938857915140e-2 * sinP2_1 * t4) + t22 * t13 * (cosP1_2 * sinP2_3 - sinP1_2 * cosP2_3) + t24 * t14 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t28 * t15 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t25 * t16 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t23 * t17 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t30 * t18 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t27 * t19 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t26 * t20 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t29 * t21 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + (t32 + t31) * t5 * sinP1_1 + t4 * (-0.26894821185652777114e-3 * cosP1_2 * sinP2_1 - 0.26894821185652777140e-4 * sinP1_2 * cosP2_1) * t9 + t33 * sinP1_3 * t11;
    bf[1] = t34;
    bf[2] = t1;
}

static void idsbf_3_4_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[24];
    t2 = LegP2[10];
    t3 = LegP1[21];
    t4 = LegP2[13];
    t5 = LegP1[22];
    t6 = LegP2[11];
    t7 = LegP2[14];
    t8 = LegP1[26];
    t9 = LegP1[25];
    t10 = LegP2[12];
    t11 = LegP1[23];
    t12 = LegP1[27];
    t13 = t5 * t7;
    t14 = t8 * t7;
    t15 = t9 * t4;
    t16 = t1 * t10;
    t17 = t11 * t4;
    t18 = t1 * t7;
    t19 = t12 * t4;
    t20 = t8 * t10;
    t21 = t9 * t6;
    t22 = -0.74902971509812549562e-5;
    t23 = 0.16342466511231828998e-5;
    t24 = 0.11673190365165592141e-5;
    t25 = -0.42801698005607171182e-6;
    t26 = 0.68093610463465954150e-7;
    t27 = -0.31614890572323478714e-7;
    t28 = 0.24319146594094983626e-7;
    t29 = 0.32425528792126644834e-8;
    t30 = 0.17509785547748388210e-5;
    t31 = 0.40856166278079572494e-4 * t1;
    t32 = 0.65369866044927315988e-4 * t3 * t4;
    t33 = t22 * t16 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - t23 * t21 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t24 * t17 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + t25 * t15 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - t26 * t20 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t27 * t14 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t28 * t18 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - t29 * t19 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t30 * t13 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + t5 * (0.11439726557862280298e-3 * sinP1_1 * sinP2_2 * t10 - 0.29416439720217292196e-2 * cosP1_1 * t2) + t6 * (t11 * (-0.98054799067390973978e-4 * cosP1_2 * cosP2_1 - 0.19610959813478194796e-3 * sinP1_2 * sinP2_1) + 0.27455343738869472716e-2 * cosP2_1 * t3) - t31 * cosP1_3 * t2 + t32 * cosP2_3;
    t1 = -0.18677104584264947425e-4 * t5 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.43774463869370970530e-6 * t11 * t7 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.52691484287205797858e-8 * t12 * t7 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.77821269101103947594e-7 * t8 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.14980594301962509913e-5 * t9 * t10 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.32684933022463657994e-4 * t1 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.78443839253912779176e-3 * t5 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.80078085905035962088e-3 * t3 * t10 * sinP2_2 + 0.73541099300543230490e-3 * t11 * sinP1_2 * t2;
    bf[0] = t5 * (-0.29416439720217292196e-2 * sinP1_1 * t2 + 0.11439726557862280298e-3 * cosP1_1 * sinP2_2 * t10) + t6 * (t11 * (-0.19610959813478194796e-3 * sinP1_2 * cosP2_1 + 0.98054799067390973978e-4 * cosP1_2 * sinP2_1) + 0.27455343738869472716e-2 * sinP2_1 * t3) + t30 * t13 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t27 * t14 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t25 * t15 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t22 * t16 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - t24 * t17 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) - t28 * t18 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t29 * t19 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t26 * t20 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t23 * t21 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t31 * sinP1_3 * t2 - t32 * sinP2_3;
    bf[1] = t33;
    bf[2] = t1;
}

static void idsbf_3_4_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[41];
    t2 = LegP2[14];
    t3 = LegP1[40];
    t4 = LegP2[13];
    t5 = LegP1[39];
    t6 = LegP2[12];
    t7 = LegP1[38];
    t8 = LegP2[11];
    t9 = LegP1[37];
    t10 = LegP1[42];
    t11 = LegP2[10];
    t12 = LegP1[36];
    t13 = t1 * t2;
    t14 = t3 * t4;
    t15 = t5 * t6;
    t16 = t7 * t4;
    t17 = t5 * t2;
    t18 = LegP1[43] * t2;
    t19 = t10 * t4;
    t20 = t1 * t6;
    t21 = t3 * t8;
    t22 = t9 * t2;
    t23 = 0.15286977634964084025e-5;
    t24 = -0.12739148029136736687e-5;
    t25 = 0.10919269739260060019e-5;
    t26 = 0.63695740145683683434e-7;
    t27 = -0.36397565797533533394e-7;
    t28 = 0.22748478623458458370e-7;
    t29 = 0.30331304831277944494e-8;
    t30 = -0.11374239311729229185e-8;
    t31 = 0.18957065519548715308e-9;
    t32 = 0.95543610218525525158e-6;
    t33 = -0.16051326516712288229e-2 * sinP1_1 * t11 + 0.10700884344474858817e-3 * cosP1_1 * sinP2_2 * t6;
    t34 = 0.38217444087410210070e-4 * t5;
    t35 = 0.61147910539856336108e-4 * t12 * t4;
    t36 = -0.16051326516712288229e-2 * cosP1_1 * t11 + 0.10700884344474858817e-3 * sinP1_1 * sinP2_2 * t6;
    t36 = -t23 * t21 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t24 * t15 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + t25 * t16 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - t26 * t20 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t27 * t14 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t28 * t17 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - t29 * t19 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t30 * t13 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - t31 * t18 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t32 * t22 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + t8 * (t7 * (0.28284271247461900976e-23 * cosP1_2 * cosP2_1 - 0.91721865809784504150e-4 * sinP1_2 * sinP2_1) + 0.25682122426739661164e-2 * cosP2_1 * t12) + t9 * t36 - t34 * cosP1_3 * t11 + t35 * cosP2_3;
    t1 = -0.75828262078194861232e-9 * t10 * t2 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.18198782898766766697e-7 * t1 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.50956592116546946748e-6 * t3 * t6 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.15286977634964084026e-4 * t5 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.64205306066849152906e-3 * t9 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.15286977634964084027e-4 * t9 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.27298174348150150042e-6 * t7 * t2 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.45860932904892252078e-3 * t7 * sinP1_2 * t11 - 0.85607074755798870540e-3 * t12 * t6 * sinP2_2;
    bf[0] = t8 * (t7 * (-0.28284271247461900976e-23 * cosP1_2 * sinP2_1 - 0.91721865809784504150e-4 * sinP1_2 * cosP2_1) + 0.25682122426739661164e-2 * sinP2_1 * t12) + t9 * t33 + t30 * t13 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t27 * t14 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t24 * t15 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - t25 * t16 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) - t28 * t17 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t31 * t18 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t29 * t19 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t26 * t20 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t23 * t21 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t32 * t22 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t34 * sinP1_3 * t11 - t35 * sinP2_3;
    bf[1] = t36;
    bf[2] = t1;
}

static void idsbf_3_6_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[5];
    t2 = LegP2[22];
    t3 = LegP1[4];
    t4 = LegP2[21];
    t5 = LegP1[3];
    t6 = LegP2[23];
    t7 = LegP2[24];
    t8 = LegP2[25];
    t9 = t1 * t7;
    t10 = t3 * t8;
    t11 = t1 * LegP2[26];
    t12 = -0.96832423463478830184e-5;
    t13 = sinP2_1 * t2;
    t14 = 0.29049727039043649052e-3 * t1 * sinP1_2;
    t1 = 0.11619890815617459622e-2 * t3 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.58099454078087298114e-4 * t3 * t7 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.48416211731739415090e-5 * t1 * t8 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.69719344893704757728e-3 * t5 * t6 * sinP2_2 - 0.17429836223426189433e-2 * t1 * sinP1_2 * t4;
    bf[0] = t3 * (-0.23239781631234919242e-3 * cosP1_1 * sinP2_2 * t6 + 0.34859672446852378868e-2 * sinP1_1 * t4) + t5 * (-0.17429836223426189434e-2 * t13 + 0.87149181117130947167e-4 * sinP2_3 * t7) + 0.72624317597609122636e-5 * t9 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + t12 * t10 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) - 0.12104052932934853773e-5 * t11 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t14 * t2 * cosP2_1;
    bf[1] = t12 * t10 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + t3 * (-0.23239781631234919242e-3 * sinP1_1 * sinP2_2 * t6 + 0.34859672446852378868e-2 * cosP1_1 * t4) + t5 * (-0.17429836223426189434e-2 * t2 * cosP2_1 - 0.87149181117130947170e-4 * cosP2_3 * t7) - 0.12104052932934853773e-5 * t11 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.72624317597609122636e-5 * t9 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + t14 * t13;
    bf[2] = t1;
}

static void idsbf_3_6_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[11];
    t2 = LegP2[25];
    t3 = LegP1[12];
    t4 = LegP2[26];
    t5 = LegP2[22];
    t6 = LegP2[23];
    t7 = LegP2[24];
    t8 = LegP1[13];
    t9 = LegP1[14];
    t10 = LegP1[10];
    t11 = LegP2[21];
    t12 = t9 * t5;
    t13 = t1 * t2;
    t14 = t3 * t4;
    t15 = t3 * t7;
    t16 = t8 * t2;
    t9 = t9 * t4;
    t17 = 0.62894503972038753686e-5;
    t18 = 0.41929669314692502456e-5;
    t19 = -0.25157801588815501474e-5;
    t20 = 0.41929669314692502458e-6;
    t21 = -0.69882782191154170758e-7;
    t22 = 0.34941391095577085380e-7;
    t23 = 0.75473404766446504424e-4 * t10 * t7;
    t24 = 0.15094680953289300885e-3 * t8;
    t25 = t1 * (0.90568085719735805304e-3 * cosP1_1 * t11 - 0.20126241271052401180e-3 * sinP1_1 * sinP2_2 * t6) - t17 * t15 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + t18 * t12 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t19 * t13 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) - t20 * t16 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t21 * t14 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - t22 * t9 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t5 * (t3 * (-0.11740307408113900688e-3 * cosP1_2 * cosP2_1 + 0.13417494180701600786e-3 * sinP1_2 * sinP2_1) - 0.15094680953289300886e-2 * cosP2_1 * t10) - t23 * cosP2_3 + t24 * cosP1_3 * t11;
    t2 = 0.83859338629385004910e-5 * t8 * t5 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.75473404766446504420e-3 * t1 * t5 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.37736702383223252208e-4 * t1 * t7 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.16771867725877000983e-5 * t3 * t2 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.69882782191154170764e-7 * t8 * t4 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.80504965084209604714e-3 * t10 * t6 * sinP2_2 + 0.60378723813157203542e-3 * t3 * sinP1_2 * t11;
    bf[0] = t1 * (-0.20126241271052401180e-3 * cosP1_1 * sinP2_2 * t6 + 0.90568085719735805304e-3 * sinP1_1 * t11) + t5 * (t3 * (0.11740307408113900688e-3 * cosP1_2 * sinP2_1 + 0.13417494180701600786e-3 * sinP1_2 * cosP2_1) - 0.15094680953289300886e-2 * sinP2_1 * t10) - t18 * t12 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t19 * t13 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t21 * t14 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t17 * t15 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + t20 * t16 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t22 * t9 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t23 * sinP2_3 - t24 * sinP1_3 * t11;
    bf[1] = t25;
    bf[2] = t2;
}

static void idsbf_3_6_4_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[13];
    t2 = LegP2[27];
    t3 = LegP2[23];
    t4 = LegP1[11];
    t5 = LegP2[25];
    t6 = LegP1[12];
    t7 = LegP2[26];
    t8 = LegP2[22];
    t9 = LegP2[24];
    t10 = LegP1[14];
    t11 = LegP1[10];
    t12 = LegP2[21];
    t13 = t1 * t2;
    t14 = t1 * t3;
    t15 = t4 * t5;
    t16 = t6 * t7;
    t17 = t6 * t9;
    t18 = t1 * t5;
    t19 = t10 * t7;
    t20 = t10 * t8;
    t21 = 0.31179438905815337574e-3 * cosP2_2 * t3;
    t22 = -0.49107616276659156684e-2 * t12;
    t23 = 0.27282009042588420378e-3 * t1;
    t24 = t11 * (0.97435746580672929902e-4 * sinP2_3 * t9 + 0.42871728495496089164e-2 * sinP2_1 * t8) + 0.15465991520741734909e-7 * t13 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.18559189824890081889e-5 * t14 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - 0.19487149316134585984e-5 * t15 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + 0.54130970322596072174e-7 * t16 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.48717873290336464950e-5 * t17 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) - 0.10826194064519214435e-6 * t18 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.38664978801854337270e-8 * t19 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.78876556755782848024e-5 * t20 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) - t23 * sinP1_3 * t12 + (t22 - t21) * t4 * sinP1_1 + t8 * (0.32478582193557643306e-3 * cosP1_2 * sinP2_1 + 0.10393146301938445858e-3 * sinP1_2 * cosP2_1) * t6;
    t11 = t11 * (-0.97435746580672929902e-4 * cosP2_3 * t9 + 0.42871728495496089164e-2 * cosP2_1 * t8) + 0.15465991520741734909e-7 * t13 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.18559189824890081889e-5 * t14 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.54130970322596072174e-7 * t16 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.48717873290336464950e-5 * t17 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + 0.10826194064519214435e-6 * t18 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.38664978801854337270e-8 * t19 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.19487149316134585984e-5 * t15 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + 0.78876556755782848024e-5 * t20 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t23 * cosP1_3 * t12 + (t22 + t21) * t4 * cosP1_1 + t8 * (-0.32478582193557643306e-3 * cosP1_2 * cosP2_1 + 0.10393146301938445858e-3 * sinP1_2 * sinP2_1) * t6;
    bf[0] = t24;
    bf[1] = t11;
    bf[2] = -0.18559189824890081890e-5 * t10 * t3 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.47325934053469708820e-4 * t1 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.42871728495496089164e-3 * t4 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.97435746580672929906e-5 * t4 * t9 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.43304776258076857740e-6 * t6 * t5 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.23198987281112602362e-7 * t1 * t7 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.15465991520741734909e-7 * t10 * t2 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.10912803617035368151e-2 * t6 * sinP1_2 * t12;
}

static void idsbf_3_6_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[13];
    t2 = LegP2[27];
    t3 = LegP2[23];
    t4 = LegP1[11];
    t5 = LegP2[25];
    t6 = LegP1[12];
    t7 = LegP2[26];
    t8 = LegP2[22];
    t9 = LegP1[14];
    t10 = LegP2[21];
    t11 = LegP1[10];
    t12 = t1 * t2;
    t13 = t1 * t3;
    t14 = t4 * t5;
    t15 = t6 * t7;
    t16 = t1 * t5;
    t17 = t9 * t7;
    t18 = t9 * t8;
    t19 = t9 * LegP2[24];
    t20 = 0.56704590953180023620e-2 * sinP1_1 * t10 - 0.90007287227269878762e-4 * cosP1_1 * sinP2_2 * t3;
    t21 = 0.13501093084090481815e-3 * t1;
    t22 = -0.90007287227269878762e-4 * sinP1_1 * sinP2_2 * t3 + 0.56704590953180023620e-2 * cosP1_1 * t10;
    t22 = t4 * t22 + t8 * (t6 * (0.15001214537878313122e-3 * cosP1_2 * cosP2_1 + 0.33002671983332288874e-3 * sinP1_2 * sinP2_1) - 0.27002186168180963628e-2 * cosP2_1 * t11) + 0.26787883103354130584e-7 * t12 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.96436379172074870102e-5 * t13 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.25002024229797188544e-6 * t15 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.53575766206708261164e-7 * t16 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.44646471838923550976e-8 * t17 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.22501821806817469692e-5 * t14 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + 0.40181824655031195876e-6 * t19 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.42860612965366608936e-5 * t18 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t21 * cosP1_3 * t10;
    t1 = -0.24109094793018717528e-5 * t9 * t3 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.66969707758385326460e-8 * t9 * t2 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.68576980744586574294e-4 * t1 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.10800874467272385452e-2 * t4 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.75006072689391565634e-6 * t6 * t5 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.71434354942277681560e-7 * t1 * t7 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.45003643613634939376e-3 * t11 * t3 * sinP2_2 - 0.18901530317726674541e-2 * t6 * sinP1_2 * t10;
    bf[0] = t4 * t20 + t8 * (t6 * (-0.15001214537878313122e-3 * cosP1_2 * sinP2_1 + 0.33002671983332288874e-3 * sinP1_2 * cosP2_1) - 0.27002186168180963628e-2 * sinP2_1 * t11) + 0.26787883103354130584e-7 * t12 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.96436379172074870102e-5 * t13 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.22501821806817469692e-5 * t14 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + 0.25002024229797188544e-6 * t15 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.53575766206708261164e-7 * t16 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.44646471838923550976e-8 * t17 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.42860612965366608936e-5 * t18 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + 0.40181824655031195876e-6 * t19 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t21 * sinP1_3 * t10;
    bf[1] = t22;
    bf[2] = t1;
}

static void idsbf_3_6_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[24];
    t2 = LegP2[21];
    t3 = LegP1[21];
    t4 = LegP2[22];
    t5 = LegP1[22];
    t6 = LegP2[23];
    t7 = LegP1[25];
    t8 = LegP2[24];
    t9 = LegP1[23];
    t10 = LegP2[25];
    t11 = LegP2[26];
    t12 = LegP1[26];
    t13 = LegP2[27];
    t14 = t9 * t11;
    t15 = t1 * t13;
    t16 = t1 * t6;
    t17 = t7 * t8;
    t18 = t7 * t11;
    t19 = t12 * t13;
    t20 = LegP1[27] * t8;
    t21 = t12 * t6;
    t22 = t7 * t4;
    t23 = t5 * t10;
    t24 = t5 * sinP1_1;
    t25 = t3 * t4;
    t26 = 0.24649510777111164800e-2;
    t27 = 0.48907759478395168250e-7;
    t28 = 0.12911648502296324418e-3 * sinP1_2;
    t29 = 0.35213586824444521146e-4 * cosP1_2;
    t30 = -0.82165035923703882658e-4 * t5 * cosP1_1 * t6 * sinP2_2;
    t31 = 0.12324755388555582399e-3 * t1;
    t32 = t31 * sinP1_3 * t2;
    t33 = t9 * t4;
    t34 = t33 * (t28 * cosP2_1 + t29 * sinP2_1);
    t30 = t27 * (t14 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + (cosP1_3 * sinP2_4 - sinP1_3 * cosP2_4) * t10 * t1) + 0.20378233115997986772e-8 * t15 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.73361639217592752374e-6 * t16 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.81512932463991947084e-8 * t17 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - 0.40756466231995973546e-8 * t18 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.33963721859996644622e-9 * t19 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.40756466231995973544e-8 * t20 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.12226939869598792062e-6 * t21 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.39126207582716134598e-5 * t22 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + 0.97815518956790336500e-6 * t23 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) - t26 * (t25 * sinP2_1 - t24 * t2) + t30 - t32 + t34;
    t17 = t17 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t24 = -0.82165035923703882658e-4 * t24 * t6 * sinP2_2;
    t28 = t33 * (-t29 * cosP2_1 + t28 * sinP2_1);
    t14 = t26 * (t5 * cosP1_1 * t2 - t25 * cosP2_1) + 0.40756466231995973546e-8 * t18 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.33963721859996644622e-9 * t19 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.40756466231995973544e-8 * t20 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.12226939869598792062e-6 * t21 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.97815518956790336500e-6 * t23 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + t27 * ((cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) * t10 * t1 + t14 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5)) + 0.20378233115997986772e-8 * t15 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.73361639217592752374e-6 * t16 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.81512932463991947084e-8 * t17 + 0.39126207582716134598e-5 * t22 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t24 + t31 * cosP1_3 * t2 + t28;
    bf[0] = t30;
    bf[1] = t14;
    bf[2] = 0.48907759478395168254e-6 * t7 * t6 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.23475724549629680758e-4 * t1 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.39126207582716134600e-6 * t9 * t10 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.24453879739197584126e-7 * t1 * t11 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.13585488743998657848e-8 * t7 * t13 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.82165035923703882666e-3 * t5 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.81512932463991947084e-8 * t12 * t8 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.49299021554222329594e-3 * t3 * t6 * sinP2_2 + 0.98598043108444659186e-3 * t9 * sinP1_2 * t2;
}

static void idsbf_3_6_6_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t5, t6, t7, t8, t9;
    t1 = LegP1[24];
    t2 = LegP2[23];
    t3 = LegP1[25];
    t4 = LegP2[24];
    t5 = LegP1[23];
    t6 = LegP2[22];
    t7 = LegP2[25];
    t8 = LegP2[26];
    t9 = LegP1[26];
    t10 = LegP2[27];
    t11 = LegP1[27];
    t12 = LegP1[22];
    t13 = LegP2[21];
    t14 = t9 * t10;
    t15 = t11 * t4;
    t16 = t9 * t2;
    t17 = t5 * t4;
    t18 = t12 * t7;
    t19 = t5 * t8;
    t20 = t1 * t10;
    t21 = t9 * t7;
    t22 = t1 * t2;
    t23 = t3 * t4;
    t24 = t23 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t25 = t5 * t6;
    t26 = t25 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1);
    t27 = t1 * t7;
    t28 = t27 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t29 = -0.83117705853691106830e-4;
    t30 = -0.25974283079278470884e-5;
    t31 = -0.23088251626025307454e-5;
    t32 = 0.86580943597594902954e-7;
    t33 = 0.86580943597594902951e-7;
    t34 = -0.70547435523966217218e-7;
    t35 = -0.32067016147257371464e-8;
    t36 = -0.16033508073628685732e-8;
    t37 = 0.13361256728023904776e-9;
    t38 = 0.40083770184071714328e-8;
    t39 = 0.11544125813012653726e-6;
    t40 = 0.34632377439037961180e-5;
    t41 = 0.96970656829306291296e-4 * cosP2_2 * t2;
    t42 = -0.19394131365861258261e-2 * t13;
    t43 = 0.48485328414653145648e-4 * t1;
    t44 = 0.96970656829306291312e-4 * LegP1[21] * t4;
    t45 = t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t46 = (t42 - t41) * t12 * cosP1_1;
    t23 = t29 * t25 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) + t30 * t22 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + t31 * (-t3 * t6 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t17 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3)) - t32 * t27 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t33 * t16 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t34 * t23 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t35 * ((cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) * t8 * t3 - t15 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3)) + t36 * t45 - t37 * t14 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t38 * t20 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t39 * t19 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t40 * t18 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + t46 + t43 * cosP1_3 * t13 + t44 * cosP2_3;
    t1 = t36 * t11 * t7 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.46176503252050614908e-5 * t12 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.32067016147257371464e-7 * t9 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.69264754878075922364e-6 * t3 * t2 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.13852950975615184472e-4 * t1 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.34632377439037961182e-6 * t5 * t7 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.19240209688354422876e-7 * t1 * t8 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.10689005382419123822e-8 * t3 * t10 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.19394131365861258262e-3 * t5 * sinP1_2 * t13;
    bf[0] = t37 * t14 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t35 * ((cosP1_4 * sinP2_5 - sinP1_4 * cosP2_5) * t8 * t3 + t15 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3)) - t33 * t16 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t31 * (t17 * (cosP1_2 * sinP2_3 - sinP1_2 * cosP2_3) + (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) * t6 * t3) + t40 * t18 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t39 * t19 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t38 * t20 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t36 * t21 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t30 * t22 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + t34 * t24 + t29 * t26 + t32 * t28 + (t42 + t41) * t12 * sinP1_1 - t43 * sinP1_3 * t13 - t44 * sinP2_3;
    bf[1] = t23;
    bf[2] = t1;
}

static void idsbf_3_6_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[27];
    t2 = LegP2[24];
    t3 = LegP1[26];
    t4 = LegP2[23];
    t5 = LegP1[25];
    t6 = LegP2[22];
    t7 = LegP1[22];
    t8 = LegP2[25];
    t9 = LegP1[23];
    t10 = LegP2[26];
    t11 = LegP1[24];
    t12 = LegP2[27];
    t13 = LegP2[21];
    t14 = LegP1[21];
    t15 = t1 * t2;
    t16 = t3 * t4;
    t17 = t5 * t6;
    t18 = t7 * t8;
    t19 = t9 * t10;
    t20 = t11 * t12;
    t21 = t1 * t10;
    t22 = t9 * t2;
    t23 = t3 * t8;
    t24 = t11 * t4;
    t25 = t5 * t2;
    t26 = t25 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t27 = t11 * t8;
    t28 = t5 * t10;
    t29 = t28 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t30 = t3 * t12;
    t31 = t30 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t32 = t9 * (-0.66677781402909144480e-4 * sinP1_2 * cosP2_1 - 0.35422571370295483002e-4 * cosP1_2 * sinP2_1) + 0.28588098776497295692e-2 * sinP2_1 * t14;
    t33 = 0.14585764681886375354e-3 * cosP1_1 * sinP2_2 * t4 - 0.21003501141916380508e-2 * sinP1_1 * t13;
    t34 = 0.29171529363772750708e-4 * t11;
    t35 = t34 * sinP1_3 * t13;
    t36 = 0.94807470432261439796e-4 * t14 * t2;
    t37 = t36 * sinP2_3;
    t26 = t32 * t6 + t33 * t7 + 0.26528341848669002792e-8 * t20 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.50162682768392296196e-8 * t23 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.79585025546007008382e-7 * t26 - 0.16929905434332399965e-5 * t22 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.82479026474952717768e-7 * t19 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.95502030655208410034e-6 * t24 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.27782408917878810200e-5 * t18 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) - 0.86820027868371281852e-8 * t16 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t35 - t37 + 0.17364005573674256376e-6 * t17 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) - 0.38586679052609458612e-7 * t27 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.24116674407880911630e-10 * t31 + 0.36576956185286049306e-9 * t21 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.91643362749947464196e-9 * t29 - 0.60291686019702279078e-9 * t15 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t20 = t20 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t21 = t21 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t23 = t23 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t22 = t22 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t25 = t25 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t27 = t27 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t29 = t9 * (0.35422571370295483002e-4 * cosP1_2 * cosP2_1 - 0.66677781402909144480e-4 * sinP1_2 * sinP2_1) + 0.28588098776497295692e-2 * cosP2_1 * t14;
    t31 = 0.14585764681886375354e-3 * sinP1_1 * sinP2_2 * t4 - 0.21003501141916380508e-2 * cosP1_1 * t13;
    t1 = -0.83604471280653826990e-9 * t1 * t8 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.27087848694931839942e-4 * t7 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.14470004644728546977e-7 * t3 * t2 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.19100406131041682009e-6 * t5 * t4 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.34728011147348512752e-5 * t11 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.69456022294697025506e-6 * t9 * t8 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.18328672549989492838e-7 * t11 * t10 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.53056683697338005582e-9 * t5 * t12 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.81680282218563701980e-3 * t7 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.10210035277320462748e-2 * t14 * t4 * sinP2_2 + 0.52508752854790951274e-3 * t9 * sinP1_2 * t13;
    bf[0] = t26;
    bf[1] = t29 * t6 + t31 * t7 + 0.26528341848669002792e-8 * t20 + 0.50162682768392296196e-8 * t23 + 0.79585025546007008382e-7 * t25 - t34 * cosP1_3 * t13 + t36 * cosP2_3 + 0.16929905434332399965e-5 * t22 + 0.82479026474952717768e-7 * t19 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.95502030655208410034e-6 * t24 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.27782408917878810200e-5 * t18 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + 0.86820027868371281852e-8 * t16 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.17364005573674256376e-6 * t17 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + 0.38586679052609458612e-7 * t27 + 0.24116674407880911630e-10 * t30 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.36576956185286049306e-9 * t21 + 0.91643362749947464196e-9 * t28 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.60291686019702279078e-9 * t15 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    bf[2] = t1;
}

static void idsbf_3_6_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t5, t6, t7, t8, t9;
    t1 = LegP1[36];
    t2 = LegP2[24];
    t3 = LegP1[39];
    t4 = LegP2[21];
    t5 = LegP1[37];
    t6 = LegP2[22];
    t7 = LegP1[42];
    t8 = LegP2[26];
    t9 = LegP1[41];
    t10 = LegP2[25];
    t11 = LegP1[40];
    t12 = LegP2[23];
    t13 = LegP1[38];
    t14 = LegP2[27];
    t15 = LegP1[43];
    t16 = t7 * t8;
    t17 = t9 * t10;
    t18 = t11 * t2;
    t19 = t3 * t12;
    t20 = t13 * t2;
    t21 = t3 * t10;
    t22 = t11 * t8;
    t23 = t9 * t14;
    t24 = LegP1[44] * t8;
    t25 = t15 * t10;
    t26 = t25 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t27 = t7 * t2;
    t28 = t27 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t29 = t9 * t12;
    t30 = t29 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t31 = t11 * t6;
    t32 = t5 * t10;
    t33 = t32 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4);
    t34 = t13 * t8;
    t35 = t34 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t36 = t3 * t14;
    t37 = t36 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t38 = t13 * (-0.52625829372164958552e-4 * sinP1_2 * cosP2_1 - 0.42880305414356632894e-4 * cosP1_2 * sinP2_1) + 0.26741717740226045606e-2 * sinP2_1 * t1;
    t39 = 0.13643733540931655921e-3 * cosP1_1 * sinP2_2 * t12 - 0.11460736174382590974e-2 * sinP1_1 * t4;
    t40 = 0.27287467081863311842e-4 * t3;
    t41 = t40 * sinP1_3 * t4;
    t42 = 0.88684268016055763484e-4 * t1 * t2;
    t43 = t42 * sinP2_3;
    t26 = 0.15159703934368506579e-5 * t33 + 0.25717354888660859370e-7 * t35 + 0.16242539929680542761e-6 * t19 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.67677249707002261512e-8 * t18 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t43 + 0.18047266588533936405e-9 * t17 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.45118166471334841004e-9 * t37 - 0.18799236029722850419e-11 * t24 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.37598472059445700838e-11 * t16 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.56397708089168551262e-9 * t28 - 0.30078777647556560672e-10 * t26 - 0.22559083235667420504e-10 * t23 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.81212699648402713802e-8 * t30 - 0.85724516295536197910e-9 * t22 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.15836476431438529194e-5 * t20 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.16242539929680542764e-6 * t31 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) - 0.36094533177067872810e-7 * t21 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t41 + t38 * t6 + t39 * t5;
    t25 = t25 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t27 = t27 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t28 = t29 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t29 = t31 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t30 = t32 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t31 = t36 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t16 = t16 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t17 = t17 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t18 = t18 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t32 = t13 * (-0.52625829372164958552e-4 * sinP1_2 * sinP2_1 + 0.42880305414356632894e-4 * cosP1_2 * cosP2_1) + 0.26741717740226045606e-2 * cosP2_1 * t1;
    t33 = -0.11460736174382590974e-2 * cosP1_1 * t4 + 0.13643733540931655921e-3 * sinP1_1 * sinP2_2 * t12;
    t35 = -0.32744960498235974210e-3 * t13 * sinP1_2 * t4;
    t1 = -0.10914986832745324737e-2 * t1 * t12 * sinP2_2;
    t1 = 0.37598472059445700842e-11 * t15 * t8 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.12031511059022624270e-9 * t7 * t10 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.33838624853501130760e-8 * t9 * t2 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.64970159718722171040e-7 * t11 * t12 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.16242539929680542765e-5 * t3 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.66854294350565114014e-3 * t5 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.22171067004013940874e-4 * t5 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.43313439812481447372e-6 * t13 * t10 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.85724516295536197920e-8 * t3 * t8 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.18047266588533936402e-9 * t11 * t14 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + t35 + t1;
    bf[0] = t26;
    bf[1] = 0.15159703934368506579e-5 * t30 + 0.25717354888660859370e-7 * t34 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.16242539929680542761e-6 * t19 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.67677249707002261512e-8 * t18 + 0.18047266588533936405e-9 * t17 + 0.45118166471334841004e-9 * t31 + 0.18799236029722850419e-11 * t24 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + 0.37598472059445700838e-11 * t16 + 0.30078777647556560672e-10 * t25 + 0.22559083235667420504e-10 * t23 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.81212699648402713802e-8 * t28 + 0.85724516295536197910e-9 * t22 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.56397708089168551262e-9 * t27 + 0.15836476431438529194e-5 * t20 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - 0.16242539929680542764e-6 * t29 + 0.36094533177067872810e-7 * t21 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - t40 * cosP1_3 * t4 + t32 * t6 + t33 * t5 + t42 * cosP2_3;
    bf[2] = t1;
}

static void idsbf_3_6_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t5, t6, t7, t8, t9;
    t1 = LegP1[44];
    t2 = LegP2[26];
    t3 = LegP1[42];
    t4 = LegP2[24];
    t5 = LegP1[41];
    t6 = LegP2[23];
    t7 = LegP1[40];
    t8 = LegP2[22];
    t9 = LegP1[37];
    t10 = LegP2[25];
    t11 = LegP1[38];
    t12 = LegP1[39];
    t13 = LegP2[27];
    t14 = LegP1[43];
    t15 = LegP1[36];
    t16 = LegP2[21];
    t17 = t7 * t4;
    t18 = t12 * t6;
    t19 = t11 * t4;
    t20 = t12 * t10;
    t21 = t7 * t2;
    t22 = t5 * t13;
    t23 = t1 * t2;
    t24 = t3 * t4;
    t25 = t5 * t6;
    t26 = t9 * t10;
    t27 = t26 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4);
    t28 = t11 * t2;
    t29 = t28 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t30 = t12 * t13;
    t31 = t30 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t32 = t14 * t13;
    t33 = t32 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t3 = t3 * t2;
    t34 = 0.99332129071795187868e-6;
    t35 = -0.97345486490359284114e-4 * sinP2_3 * t4 - 0.50063393052184774682e-2 * sinP2_1 * t8;
    t36 = 0.16687797684061591562e-3 * cosP2_2 * t6;
    t37 = 0.38938194596143713648e-2 * t16;
    t38 = (t37 + t36) * t9 * sinP1_1;
    t39 = t8 * (-0.13509169553764145551e-3 * cosP1_2 * sinP2_1 - 0.39732851628718075101e-5 * sinP1_2 * cosP2_1) * t11;
    t40 = 0.55625992280205305212e-4 * t12;
    t41 = t40 * sinP1_3 * t16;
    t27 = t34 * ((-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) * t8 * t7 + t18 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2)) + 0.15451664522279251447e-5 * t27 + 0.24833032267948796971e-7 * t29 + t35 * t15 + t41 + 0.41806451629543429238e-9 * t31 - 0.92903225843429842758e-12 * t33 - 0.34838709691286191032e-12 * t23 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.16555354845299197979e-7 * t25 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.11956645166049420763e-7 * t17 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3) + 0.37625806466589086318e-9 * t21 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.13520206456994345016e-5 * t19 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.22073806460398930640e-7 * t20 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.22993548396248886081e-9 * t24 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.10451612907385857310e-10 * t3 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.69677419382572382068e-11 * t22 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t39 + t38;
    t21 = t21 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t23 = t23 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t24 = t24 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t25 = t25 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t26 = t26 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t28 = t28 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t29 = t30 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t30 = 0.97345486490359284114e-4 * cosP2_3 * t4 - 0.50063393052184774682e-2 * cosP2_1 * t8;
    t31 = t8 * (-0.39732851628718075101e-5 * sinP1_2 * sinP2_1 + 0.13509169553764145551e-3 * cosP1_2 * cosP2_1) * t11;
    t3 = t34 * (-t7 * t8 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t18 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2)) + 0.15451664522279251447e-5 * t26 + 0.24833032267948796971e-7 * t28 - t40 * cosP1_3 * t16 + t31 + t30 * t15 + (t37 - t36) * t9 * cosP1_1 + 0.41806451629543429238e-9 * t29 - 0.92903225843429842758e-12 * t32 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.34838709691286191032e-12 * t23 + 0.11956645166049420763e-7 * t17 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.37625806466589086318e-9 * t21 - 0.13520206456994345016e-5 * t19 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - 0.22073806460398930640e-7 * t20 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.16555354845299197979e-7 * t25 - 0.22993548396248886081e-9 * t24 - 0.10451612907385857310e-10 * t3 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.69677419382572382068e-11 * t22 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t1 = -0.48774193567800667444e-11 * t14 * t2 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.22993548396248886082e-8 * t5 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.13244283876239358384e-6 * t7 * t6 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.59599277443077112722e-5 * t12 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.13906498070051326301e-3 * t9 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.27040412913988690032e-5 * t9 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.88295225841595722566e-7 * t11 * t10 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.22575483879953451790e-8 * t12 * t2 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.55741935506057905662e-10 * t7 * t13 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.92903225843429842760e-12 * t1 * t13 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) + 0.22250396912082122087e-3 * t11 * sinP1_2 * t16;
    bf[0] = t27;
    bf[1] = t3;
    bf[2] = t1;
}

static void idsbf_3_6_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t5, t6, t7, t8, t9;
    t1 = LegP1[41];
    t2 = LegP2[25];
    t3 = LegP1[37];
    t4 = LegP2[23];
    t5 = LegP1[43];
    t6 = LegP1[42];
    t7 = LegP2[26];
    t8 = LegP1[40];
    t9 = LegP2[24];
    t10 = LegP1[39];
    t11 = LegP1[38];
    t12 = LegP2[22];
    t13 = LegP2[27];
    t14 = LegP1[44];
    t15 = LegP1[36];
    t16 = LegP2[21];
    t17 = t1 * t2;
    t18 = t5 * t2;
    t19 = t6 * t7;
    t20 = t8 * t9;
    t21 = t10 * t4;
    t22 = t11 * t9;
    t23 = t10 * t2;
    t24 = t8 * t7;
    t25 = t1 * t13;
    t26 = t14 * t7;
    t27 = t26 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t28 = t6 * t9;
    t29 = t28 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t30 = t1 * t4;
    t31 = t30 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t32 = t8 * t12;
    t33 = t32 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    t34 = t3 * t2;
    t35 = t34 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4);
    t36 = t11 * t7;
    t37 = t36 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t38 = t10 * t13;
    t39 = t38 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t40 = t5 * t13;
    t41 = t40 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t42 = t11 * (-0.83125892123887200010e-4 * sinP1_2 * cosP2_1 + 0.33604084050082059578e-4 * cosP1_2 * sinP2_1) + 0.22284813633212313194e-2 * sinP2_1 * t15;
    t43 = -0.23832370135518723832e-2 * sinP1_1 * t16 + 0.55712034083030782982e-4 * cosP1_1 * sinP2_2 * t4;
    t44 = 0.21665791032289748940e-4 * t10;
    t45 = t44 * sinP1_3 * t16;
    t46 = 0.30951130046128212772e-4 * t15 * t9;
    t47 = t46 * sinP2_3;
    t27 = t42 * t12 + t43 * t3 + t45 + 0.15507821291350114624e-12 * t27 + 0.73693166776495744688e-8 * t37 + 0.47286448681584769516e-6 * t35 + 0.12096100607253089407e-9 * t39 + 0.51175810261455378260e-11 * t18 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.17575530796863463242e-11 * t41 - 0.77539106456750573124e-12 * t25 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.55828156648860412638e-10 * t24 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.37218771099240275096e-10 * t19 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.10746920154905629435e-8 * t17 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.20470324104582151306e-9 * t29 - 0.14370167521416670216e-5 * t21 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.44215900065897446812e-6 * t33 - 0.34390144495698014188e-6 * t22 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) - 0.37255989870339515374e-7 * t20 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.92116458470619680870e-8 * t31 - 0.42987680619622517742e-8 * t23 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t47;
    t22 = t22 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t23 = t23 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t24 = t24 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t26 = t26 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t28 = t28 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t29 = t30 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t30 = t32 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t31 = t34 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t32 = t36 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t33 = t38 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t34 = t40 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t35 = t11 * (-0.33604084050082059578e-4 * cosP1_2 * cosP2_1 - 0.83125892123887200010e-4 * sinP1_2 * sinP2_1) + 0.22284813633212313194e-2 * cosP2_1 * t15;
    t36 = 0.55712034083030782982e-4 * sinP1_1 * sinP2_2 * t4 - 0.23832370135518723832e-2 * cosP1_1 * t16;
    t15 = 0.50140830674727704692e-3 * t15 * t4 * sinP2_2;
    t37 = 0.47664740271037447670e-3 * t11 * sinP1_2 * t16;
    t1 = 0.49625028132320366798e-11 * t5 * t7 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.57316907492830023660e-8 * t1 * t9 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.23950279202361117024e-6 * t8 * t4 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.10611816015815387236e-4 * t10 * t12 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.49521808073805140434e-3 * t3 * t12 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.68780288991396028382e-5 * t3 * t9 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.94572897363169539034e-7 * t11 * t2 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.13398757595726499035e-8 * t10 * t7 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.20160167678755149011e-10 * t8 * t13 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.15352743078436613479e-9 * t6 * t2 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.21969413496079329052e-12 * t14 * t13 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) + t15 + t37;
    bf[0] = t27;
    bf[1] = t35 * t12 + t36 * t3 - 0.15507821291350114624e-12 * t26 + 0.73693166776495744688e-8 * t32 + 0.47286448681584769516e-6 * t31 + 0.12096100607253089407e-9 * t33 - 0.51175810261455378260e-11 * t18 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.17575530796863463242e-11 * t34 + 0.77539106456750573124e-12 * t25 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.55828156648860412638e-10 * t24 - 0.37218771099240275096e-10 * t19 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.10746920154905629435e-8 * t17 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.20470324104582151306e-9 * t28 - 0.14370167521416670216e-5 * t21 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - t44 * cosP1_3 * t16 - 0.44215900065897446812e-6 * t30 + 0.34390144495698014188e-6 * t22 + t46 * cosP2_3 - 0.37255989870339515374e-7 * t20 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.92116458470619680870e-8 * t29 + 0.42987680619622517742e-8 * t23;
    bf[2] = t1;
}

static void idsbf_3_6_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t6, t7, t8, t9;
    t1 = LegP1[63];
    t2 = LegP2[26];
    t3 = LegP1[62];
    t4 = LegP2[25];
    t5 = LegP1[61];
    t6 = LegP2[24];
    t7 = LegP1[60];
    t8 = LegP2[23];
    t9 = LegP1[59];
    t10 = LegP2[22];
    t11 = LegP1[56];
    t12 = LegP1[57];
    t13 = LegP1[58];
    t14 = LegP2[27];
    t15 = LegP2[21];
    t16 = LegP1[55];
    t17 = t9 * t2;
    t18 = t7 * t14;
    t19 = LegP1[64] * t14;
    t20 = t1 * t2;
    t21 = t3 * t4;
    t22 = t5 * t6;
    t23 = t7 * t8;
    t24 = t9 * t10;
    t25 = t11 * t4;
    t26 = t25 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4);
    t27 = t12 * t2;
    t28 = t27 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t29 = t13 * t14;
    t30 = t29 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t31 = t3 * t14;
    t32 = t31 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t33 = t5 * t2;
    t34 = t33 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t35 = t7 * t4;
    t36 = t9 * t6;
    t37 = t36 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t38 = t13 * t8;
    t39 = t38 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t40 = t12 * t6;
    t41 = t40 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t42 = t13 * t4;
    t43 = t42 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t44 = -0.46980512208882022726e-4 * sinP1_2 * cosP2_1 * t12 + 0.21141230493996910226e-2 * sinP2_1 * t16;
    t45 = -0.14798861345797837158e-2 * sinP1_1 * t15 + 0.52853076234992275566e-4 * cosP1_1 * sinP2_2 * t8;
    t46 = 0.20553974091385884942e-4 * t13;
    t47 = t46 * sinP1_3 * t15;
    t48 = 0.29362820130551264202e-4 * t16 * t6;
    t49 = t48 * sinP2_3;
    t26 = 0.29659414273284105256e-8 * t28 + 0.29362820130551264204e-6 * t26 + 0.30895223201337609640e-10 * t30 + 0.52963239773721616526e-10 * t17 * (cosP1_4 * sinP2_5 - sinP1_4 * cosP2_5) + 0.61300046034400019132e-14 * t19 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - 0.73560055241280022956e-12 * t18 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.14712011048256004590e-12 * t20 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.36780027620640011480e-13 * t32 + 0.48549636459244815152e-11 * t21 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.17654413257907205511e-11 * t34 + 0.19419854583697926062e-9 * t22 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.97099272918489630305e-10 * t35 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t47 + t44 * t10 + t45 * t11 - 0.58259563751093778184e-8 * t37 - 0.40781694625765644728e-8 * t43 - t49 + 0.41946885900787520292e-6 * t24 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) - 0.36703525163189080256e-6 * t39 - 0.32625355700612515782e-6 * t41 + 0.87389345626640667275e-8 * t23 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t25 = t25 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t28 = t29 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t29 = t31 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t30 = t33 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t31 = t35 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t32 = t36 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t33 = t38 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t34 = t40 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t35 = t42 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t18 = t18 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t19 = t19 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t20 = t20 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t36 = -0.46980512208882022726e-4 * sinP1_2 * sinP2_1 * t12 + 0.21141230493996910226e-2 * cosP2_1 * t16;
    t37 = 0.52853076234992275566e-4 * sinP1_1 * sinP2_2 * t8 - 0.14798861345797837158e-2 * cosP1_1 * t15;
    t17 = 0.29659414273284105256e-8 * t27 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.29362820130551264204e-6 * t25 + 0.30895223201337609640e-10 * t28 + 0.52963239773721616526e-10 * t17 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.61300046034400019132e-14 * t19 + 0.73560055241280022956e-12 * t18 - 0.14712011048256004590e-12 * t20 - 0.36780027620640011480e-13 * t29 - 0.48549636459244815152e-11 * t21 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.17654413257907205511e-11 * t30 - 0.19419854583697926062e-9 * t22 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.97099272918489630305e-10 * t31 + t36 * t10 + t37 * t11 - 0.58259563751093778184e-8 * t32 + 0.40781694625765644728e-8 * t35 - 0.41946885900787520292e-6 * t24 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) - 0.36703525163189080256e-6 * t33 + 0.32625355700612515782e-6 * t34 - 0.87389345626640667275e-8 * t23 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - t46 * cosP1_3 * t15 + t48 * cosP2_3;
    t18 = -0.58725640261102528404e-5;
    t15 = -0.32886358546217415908e-3 * t12 * sinP1_2 * t15;
    t16 = -0.52853076234992275562e-3 * t16 * t8 * sinP2_2;
    t1 = -0.24520018413760007652e-13 * t1 * t14 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) - 0.88272066289536027538e-12 * t3 * t2 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) - 0.38839709167395852120e-10 * t5 * t4 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.19419854583697926059e-8 * t7 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.10486721475196880073e-6 * t9 * t8 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + t18 * (t13 * t10 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + (cosP1_1 * sinP2_3 - sinP1_1 * cosP2_3) * t11 * t6) + 0.42282460987993820450e-3 * t11 * t10 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.65250711401225031570e-7 * t12 * t4 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.74148535683210263132e-9 * t13 * t2 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.88272066289536027548e-11 * t9 * t14 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + t15 + t16;
    bf[0] = t26;
    bf[1] = t17;
    bf[2] = t1;
}

static void idsbf_3_8_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[11];
    t2 = LegP2[38];
    t3 = LegP1[12];
    t4 = LegP2[39];
    t5 = LegP1[13];
    t6 = LegP2[40];
    t7 = LegP1[14];
    t8 = LegP2[41];
    t9 = LegP2[37];
    t10 = LegP2[42];
    t11 = LegP2[36];
    t12 = LegP1[10];
    t13 = t3 * t4;
    t14 = t5 * t6;
    t15 = t7 * t8;
    t16 = t7 * t9;
    t17 = t1 * t6;
    t18 = t3 * t8;
    t19 = t5 * t10;
    t20 = t7 * LegP2[43];
    t21 = t7 * t4;
    t22 = t5 * t2;
    t23 = -0.15286977634964084025e-5;
    t24 = 0.12739148029136736687e-5;
    t25 = 0.95543610218525525164e-6;
    t26 = -0.63695740145683683440e-7;
    t27 = 0.36397565797533533394e-7;
    t28 = -0.30331304831277944494e-8;
    t29 = 0.11374239311729229186e-8;
    t30 = -0.18957065519548715308e-9;
    t31 = 0.22748478623458458368e-7;
    t32 = 0.10919269739260060019e-5;
    t33 = 0.38217444087410210060e-4 * t12 * t4;
    t34 = 0.61147910539856336106e-4 * t5;
    t35 = t1 * (0.25682122426739661164e-2 * sinP1_1 * t11 - 0.91721865809784504148e-4 * cosP1_1 * sinP2_2 * t2) + t9 * (0.10700884344474858817e-3 * sinP1_2 * cosP2_1 * t3 - 0.16051326516712288228e-2 * sinP2_1 * t12) + t24 * t13 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + t27 * t14 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t29 * t15 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t25 * t16 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t23 * t17 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t26 * t18 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t28 * t19 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t30 * t20 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t31 * t21 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t32 * t22 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + t33 * sinP2_3 - t34 * sinP1_3 * t11;
    t4 = -0.27298174348150150044e-6 * t7 * t2 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.15286977634964084027e-4 * t5 * t9 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.64205306066849152906e-3 * t1 * t9 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.15286977634964084025e-4 * t1 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.50956592116546946750e-6 * t3 * t6 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.18198782898766766699e-7 * t5 * t8 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.75828262078194861236e-9 * t7 * t10 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.45860932904892252074e-3 * t12 * t2 * sinP2_2 - 0.85607074755798870546e-3 * t3 * sinP1_2 * t11;
    bf[0] = t35;
    bf[1] = t1 * (0.25682122426739661164e-2 * cosP1_1 * t11 - 0.91721865809784504148e-4 * sinP1_1 * sinP2_2 * t2) + t23 * t17 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) - t24 * t13 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + t25 * t16 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t26 * t18 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - t27 * t14 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t28 * t19 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - t29 * t15 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t30 * t20 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t31 * t21 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t32 * t22 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + t9 * (0.10700884344474858817e-3 * sinP1_2 * sinP2_1 * t3 - 0.16051326516712288228e-2 * cosP2_1 * t12) - t33 * cosP2_3 + t34 * cosP1_3 * t11;
    bf[2] = t4;
}

static void idsbf_3_8_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[24];
    t2 = LegP2[36];
    t3 = LegP1[21];
    t4 = LegP2[39];
    t5 = LegP1[22];
    t6 = LegP2[37];
    t7 = LegP1[25];
    t8 = LegP2[38];
    t9 = LegP1[23];
    t10 = LegP2[40];
    t11 = LegP2[41];
    t12 = LegP1[26];
    t13 = LegP2[42];
    t14 = LegP1[27];
    t15 = LegP2[43];
    t16 = t7 * t4;
    t17 = t1 * t8;
    t18 = t9 * t4;
    t19 = t1 * t10;
    t20 = t7 * t11;
    t21 = t12 * t13;
    t22 = t14 * t15;
    t14 = t14 * t4;
    t23 = t12 * t8;
    t24 = t7 * t6;
    t25 = t24 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    t26 = t5 * t10;
    t27 = t9 * t11;
    t28 = t27 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t29 = t7 * t15;
    t30 = t29 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t31 = 0.23073805353689384324e-9;
    t32 = t9 * (0.38376353064256184006e-4 * cosP1_2 * sinP2_1 + 0.59308909281123193470e-4 * sinP1_2 * cosP2_1) - 0.14652789351806906622e-2 * sinP2_1 * t3;
    t33 = 0.11164029982329071712e-2 * sinP1_1 * t2 - 0.83730224867468037834e-4 * cosP1_1 * sinP2_2 * t8;
    t34 = 0.34887593694778349096e-4 * t3 * t4;
    t35 = t34 * sinP2_3;
    t36 = 0.55820149911645358560e-4 * t1;
    t37 = t36 * sinP1_3 * t2;
    t25 = 0.19228171128074486936e-11 * t22 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + 0.46147610707378768646e-9 * t16 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t32 * t6 + 0.33226279709312713428e-7 * t19 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.13844283212213630594e-7 * t23 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.12459854890992267536e-7 * t28 - 0.87218984236945872744e-6 * t25 - 0.66452559418625426856e-6 * t26 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + 0.10383212409160222946e-8 * t20 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t31 * ((-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) * t13 * t1 + t14 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3)) + 0.11629197898259449698e-5 * t18 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.38456342256148973874e-10 * t21 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.38456342256148973872e-11 * t30 + 0.83065699273281783564e-7 * t17 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + t33 * t5 - t37 + t35;
    t16 = t16 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t17 = t17 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t18 = t18 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t19 = t19 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t20 = t20 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t28 = t9 * (-0.38376353064256184006e-4 * cosP1_2 * cosP2_1 + 0.59308909281123193470e-4 * sinP1_2 * sinP2_1) - 0.14652789351806906622e-2 * cosP2_1 * t3;
    t30 = -0.83730224867468037834e-4 * sinP1_1 * sinP2_2 * t8 + 0.11164029982329071712e-2 * cosP1_1 * t2;
    t32 = t36 * cosP1_3 * t2;
    t14 = -0.19228171128074486936e-11 * t22 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.46147610707378768646e-9 * t16 + t28 * t6 - 0.33226279709312713428e-7 * t19 + 0.13844283212213630594e-7 * t23 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.12459854890992267536e-7 * t27 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.87218984236945872744e-6 * t24 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) - 0.66452559418625426856e-6 * t26 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) - 0.10383212409160222946e-8 * t20 + t31 * (-t1 * t13 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t14 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3)) - 0.11629197898259449698e-5 * t18 - 0.38456342256148973874e-10 * t21 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.38456342256148973872e-11 * t29 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) - t34 * cosP2_3 + t32 + 0.83065699273281783564e-7 * t17 + t30 * t5;
    bf[0] = t25;
    bf[1] = t14;
    bf[2] = 0.46147610707378768646e-9 * t12 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.55377132848854522380e-7 * t7 * t8 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.52331390542167523648e-5 * t1 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.48842631172689688738e-3 * t5 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.11629197898259449698e-4 * t5 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.26581023767450170742e-6 * t9 * t10 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.62299274454961337676e-8 * t1 * t11 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.15382536902459589550e-9 * t7 * t13 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.38456342256148973872e-11 * t12 * t15 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) + 0.50238134920480822700e-3 * t3 * t8 * sinP2_2 + 0.44656119929316286848e-3 * t9 * sinP1_2 * t2;
}

static void idsbf_3_8_6_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[22];
    t2 = LegP2[36];
    t3 = LegP1[21];
    t4 = LegP2[37];
    t5 = LegP1[24];
    t6 = LegP2[39];
    t7 = LegP1[25];
    t8 = LegP2[38];
    t9 = LegP1[23];
    t10 = LegP2[40];
    t11 = LegP2[41];
    t12 = LegP1[27];
    t13 = LegP2[43];
    t14 = LegP1[26];
    t15 = LegP2[44];
    t16 = t12 * t13;
    t17 = t12 * t6;
    t18 = t14 * t8;
    t19 = t7 * t4;
    t20 = t1 * t10;
    t21 = t9 * t11;
    t22 = t7 * t13;
    t23 = t14 * t10;
    t24 = t14 * t15;
    t25 = t7 * t6;
    t26 = t5 * t8;
    t27 = t9 * t6;
    t28 = t27 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t29 = t5 * t10;
    t30 = t29 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t31 = t7 * t11;
    t32 = t31 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t33 = 0.38236548034660502672e-2 * sinP2_1 * t4 + 0.54623640049515003816e-4 * sinP2_3 * t6;
    t34 = 0.14566304013204001018e-3 * cosP2_2 * t8;
    t35 = -0.43698912039612003050e-2 * t2;
    t36 = 0.10924728009903000764e-3 * t5;
    t37 = t36 * sinP1_3 * t2;
    t38 = (-t34 + t35) * t1 * sinP1_1;
    t39 = t4 * (0.27311820024757501910e-4 * sinP1_2 * cosP2_1 + 0.15476698014029251081e-3 * cosP1_2 * sinP2_1) * t9;
    t28 = -0.10947498807422439438e-9 * t23 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.45614578364260164320e-12 * t16 * (cosP1_6 * sinP2_7 - sinP1_6 * cosP2_7) + 0.91229156728520328640e-12 * t24 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + 0.10035207240137236151e-10 * t22 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.10838023819348215043e-7 * t21 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.28901396851595240114e-7 * t18 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.21676047638696430084e-7 * t30 - 0.10838023819348215044e-7 * t25 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t33 * t3 + t39 - 0.49263744633400977472e-9 * t17 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.30105621720411708450e-9 * t32 + t38 - 0.86704190554785720338e-6 * t20 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) - 0.17702105571602084570e-5 * t19 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) - 0.13005628583217858052e-5 * t28 - 0.86704190554785720346e-6 * t26 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - t37;
    t23 = t23 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t25 = t25 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t26 = t26 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t27 = t27 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t29 = t29 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t24 = t24 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t30 = -0.54623640049515003816e-4 * cosP2_3 * t6 + 0.38236548034660502672e-2 * cosP2_1 * t4;
    t32 = t4 * (0.27311820024757501910e-4 * sinP1_2 * sinP2_1 - 0.15476698014029251081e-3 * cosP1_2 * cosP2_1) * t9;
    t3 = -0.10947498807422439438e-9 * t23 - 0.45614578364260164320e-12 * t16 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.91229156728520328640e-12 * t24 + t32 + 0.10035207240137236151e-10 * t22 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + (t34 + t35) * t1 * cosP1_1 + t36 * cosP1_3 * t2 - 0.10838023819348215043e-7 * t21 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.28901396851595240114e-7 * t18 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.21676047638696430084e-7 * t29 - 0.10838023819348215044e-7 * t25 + t30 * t3 + 0.49263744633400977472e-9 * t17 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.30105621720411708450e-9 * t31 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.86704190554785720338e-6 * t20 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + 0.17702105571602084570e-5 * t19 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + 0.13005628583217858052e-5 * t27 - 0.86704190554785720346e-6 * t26;
    t1 = -0.49263744633400977472e-8 * t14 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.23121117481276192092e-6 * t7 * t8 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.10621263342961250743e-4 * t5 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.18207880016505001272e-3 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.26011257166435716104e-5 * t1 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.86704190554785720346e-7 * t9 * t10 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.18063373032247025073e-8 * t5 * t11 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.45614578364260164320e-11 * t14 * t13 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) - 0.10947498807422439439e-9 * t12 * t10 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.91229156728520328650e-12 * t12 * t15 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8) - 0.43698912039612003054e-3 * t9 * sinP1_2 * t2;
    bf[0] = t28;
    bf[1] = t3;
    bf[2] = t1;
}

static void idsbf_3_8_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t5, t6, t7, t8, t9;
    t1 = LegP1[23];
    t2 = LegP2[39];
    t3 = LegP1[24];
    t4 = LegP2[40];
    t5 = LegP1[25];
    t6 = LegP2[41];
    t7 = LegP1[27];
    t8 = LegP2[43];
    t9 = LegP1[26];
    t10 = LegP2[38];
    t11 = LegP2[37];
    t12 = LegP1[22];
    t13 = LegP2[42];
    t14 = LegP2[44];
    t15 = LegP2[36];
    t16 = LegP1[21];
    t17 = t1 * t2;
    t18 = t3 * t4;
    t19 = t5 * t6;
    t20 = t7 * t8;
    t21 = t7 * t2;
    t22 = t9 * t10;
    t23 = t5 * t11;
    t24 = t12 * t4;
    t25 = t7 * t6;
    t26 = t9 * t13;
    t27 = t26 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t28 = t1 * t6;
    t29 = t28 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t30 = t5 * t8;
    t31 = t30 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t32 = t3 * t13;
    t33 = t32 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t34 = t9 * t4;
    t35 = t34 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t36 = t9 * t14;
    t37 = t36 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t38 = t5 * t2;
    t39 = t38 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t40 = t3 * t10;
    t41 = t40 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t42 = t1 * (-0.49220895340891559604e-4 * cosP1_2 * sinP2_1 + 0.13211924538870892316e-3 * sinP1_2 * cosP2_1) - 0.23211538013388861794e-2 * sinP2_1 * t16;
    t43 = 0.41034683273669594950e-2 * sinP1_1 * t15 - 0.51811468779885852212e-4 * cosP1_1 * sinP2_2 * t10;
    t44 = 0.10362293755977170442e-4 * t16 * t2;
    t45 = t44 * sinP2_3;
    t46 = -0.56992615657874437435e-4 * t3 * sinP1_3 * t15;
    t27 = t46 + t45 + t42 * t11 + t43 * t12 + 0.28555703692617863876e-10 * t31 + 0.59966977754497514134e-9 * t33 - 0.21633108858043836266e-12 * t20 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + 0.16873824909274192289e-11 * t37 + 0.23623354872983869206e-10 * t25 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.54515434322270467396e-11 * t27 - 0.13706737772456574659e-9 * t19 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.19223699725870345959e-5 * t41 + 0.41120213317369723976e-7 * t39 + 0.12336063995210917195e-6 * t24 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + 0.93143513499193541438e-9 * t35 + 0.12336063995210917194e-7 * t29 - 0.10074452262755582376e-5 * t23 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) - 0.18504095992816375790e-6 * t17 * (cosP1_2 * sinP2_3 - sinP1_2 * cosP2_3) - 0.17476090659882132692e-7 * t22 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.17133422215570718326e-8 * t18 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.31151676755583124228e-9 * t21 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t24 = t24 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t28 = t28 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t29 = t30 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t30 = t38 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t31 = t40 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t17 = t17 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t18 = t18 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t25 = t25 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t33 = t36 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t26 = t26 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t32 = t32 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t35 = t1 * (0.49220895340891559604e-4 * cosP1_2 * cosP2_1 + 0.13211924538870892316e-3 * sinP1_2 * sinP2_1) - 0.23211538013388861794e-2 * cosP2_1 * t16;
    t36 = -0.51811468779885852212e-4 * sinP1_1 * sinP2_2 * t10 + 0.41034683273669594950e-2 * cosP1_1 * t15;
    t16 = -0.36268028145920096550e-3 * t16 * t10 * sinP2_2;
    t37 = -0.10258670818417398739e-2 * t1 * sinP1_2 * t15;
    t1 = -0.38447399451740691918e-6 * t5 * t10 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.20148904525511164750e-4 * t3 * t11 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.66318680038253890838e-3 * t12 * t11 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.29606553588506201264e-5 * t12 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.30840159988027292990e-7 * t1 * t4 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.27413475544913149318e-8 * t3 * t6 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.51919461259305207046e-11 * t9 * t8 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) - 0.11993395550899502827e-9 * t5 * t13 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.15523918916532256907e-9 * t7 * t4 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.28123041515456987148e-12 * t7 * t14 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8) - 0.74764024213399498140e-8 * t9 * t2 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + t16 + t37;
    bf[0] = t27;
    bf[1] = 0.56992615657874437436e-4 * t3 * cosP1_3 * t15 - t44 * cosP2_3 + t35 * t11 + t36 * t12 + 0.28555703692617863876e-10 * t29 + 0.59966977754497514134e-9 * t32 + 0.21633108858043836266e-12 * t20 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.16873824909274192289e-11 * t33 + 0.23623354872983869206e-10 * t25 + 0.54515434322270467396e-11 * t26 + 0.13706737772456574659e-9 * t19 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.19223699725870345959e-5 * t31 + 0.41120213317369723976e-7 * t30 + 0.12336063995210917195e-6 * t24 + 0.93143513499193541438e-9 * t34 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.12336063995210917194e-7 * t28 + 0.10074452262755582376e-5 * t23 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) - 0.18504095992816375790e-6 * t17 + 0.17476090659882132692e-7 * t22 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.17133422215570718326e-8 * t18 + 0.31151676755583124228e-9 * t21 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    bf[2] = t1;
}

static void idsbf_3_8_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t5, t6, t7, t8, t9;
    t1 = LegP1[41];
    t2 = LegP2[44];
    t3 = LegP1[43];
    t4 = LegP1[42];
    t5 = LegP2[41];
    t6 = LegP2[40];
    t7 = LegP1[40];
    t8 = LegP2[39];
    t9 = LegP1[39];
    t10 = LegP2[38];
    t11 = LegP1[38];
    t12 = LegP2[37];
    t13 = LegP1[37];
    t14 = LegP2[42];
    t15 = LegP2[43];
    t16 = LegP2[36];
    t17 = LegP1[36];
    t18 = t1 * t2;
    t19 = t3 * t2;
    t20 = t4 * t5;
    t21 = t1 * t6;
    t22 = t7 * t8;
    t23 = t9 * t10;
    t24 = t11 * t8;
    t25 = t9 * t6;
    t26 = t7 * t5;
    t27 = t1 * t14;
    t28 = t4 * t15;
    t29 = LegP1[44] * t5;
    t30 = t3 * t6;
    t31 = t4 * t8;
    t32 = t1 * t10;
    t33 = t7 * t12;
    t34 = t13 * t6;
    t35 = t11 * t5;
    t36 = t9 * t14;
    t37 = t7 * t15;
    t38 = t11 * (0.10500791430992814640e-4 * cosP1_2 * sinP2_1 + 0.67043514520954124222e-4 * sinP1_2 * cosP2_1) - 0.21712405666545142880e-2 * sinP2_1 * t17;
    t39 = 0.22390918343624678592e-2 * sinP1_1 * t16 - 0.48465191219966836782e-4 * cosP1_1 * sinP2_2 * t10;
    t40 = 0.96930382439933673562e-5 * t17 * t8;
    t41 = t40 * sinP2_3;
    t42 = 0.53311710341963520458e-4 * t9;
    t43 = t42 * sinP1_3 * t16;
    t38 = t12 * t38 + t13 * t39 - 0.60707761168188377797e-13 * t18 * (cosP1_5 * sinP2_8 - sinP1_5 * cosP2_8) - 0.10117960194698062966e-13 * t19 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + 0.24283104467275351120e-12 * t20 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.33510684164839984546e-10 * t21 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.34967670432876505614e-8 * t22 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.32694771854739532750e-6 * t23 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.17308996864273870279e-6 * t24 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) - 0.16026848948401731741e-8 * t25 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.38464437476164156172e-8 * t35 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.10198903876255647470e-9 * t36 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.24283104467275351120e-11 * t37 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t41 - t43;
    t39 = t30 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t41 = t31 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t43 = t32 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t44 = t33 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t45 = t34 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t35 = t35 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t37 = t37 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t18 = t18 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t20 = t20 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t21 = t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t22 = t22 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t18 = -0.17308996864273870279e-6 * t24 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + 0.16026848948401731741e-8 * t25 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.12821479158721385391e-9 * t26 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.50994519381278237352e-11 * t27 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.20235920389396125936e-12 * t28 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.12141552233637675561e-12 * t29 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + 0.55851140274733307578e-11 * t39 + 0.29139725360730421342e-9 * t41 + 0.16347385927369766374e-7 * t43 + 0.94237871816602182634e-6 * t44 + 0.67312765583287273306e-7 * t45 + 0.38464437476164156172e-8 * t35 + 0.10198903876255647470e-9 * t36 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.24283104467275351120e-11 * t37 + 0.60707761168188377797e-13 * t18 + 0.24283104467275351120e-12 * t20 + 0.33510684164839984546e-10 * t21 + 0.34967670432876505614e-8 * t22;
    t18 = t12 * (t11 * (0.67043514520954124222e-4 * sinP1_2 * sinP2_1 - 0.10500791430992814640e-4 * cosP1_2 * cosP2_1) - 0.21712405666545142880e-2 * cosP2_1 * t17) + t13 * (0.22390918343624678592e-2 * cosP1_1 * t16 - 0.48465191219966836782e-4 * sinP1_1 * sinP2_2 * t10) + 0.32694771854739532750e-6 * t23 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.10117960194698062966e-13 * t19 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + t18 - t40 * cosP2_3 + t42 * cosP1_3 * t16;
    t19 = t13 * t12 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    t16 = 0.63974052410356224546e-3 * t11 * sinP1_2 * t16;
    t17 = 0.38772152975973469422e-3 * t17 * t10 * sinP2_2;
    t1 = 0.24283104467275351122e-12 * t3 * t5 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.22340456109893323030e-10 * t4 * t6 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.17483835216438252805e-8 * t1 * t8 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.13077908741895813099e-6 * t7 * t10 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.94237871816602182624e-5 * t9 * t12 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.24232595609983418388e-5 * t13 * t8 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.19232218738082078088e-7 * t11 * t6 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.12821479158721385391e-8 * t9 * t5 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.40795615505022589882e-10 * t7 * t14 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.12141552233637675561e-11 * t1 * t15 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) + 0.40471840778792251860e-13 * t4 * t2 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8) - 0.54281014166362857200e-3 * t19 + t16 + t17;
    bf[0] = -0.12821479158721385391e-9 * t26 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.50994519381278237352e-11 * t27 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.20235920389396125936e-12 * t28 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.12141552233637675561e-12 * t29 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.55851140274733307578e-11 * t30 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.29139725360730421342e-9 * t31 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.16347385927369766374e-7 * t32 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.94237871816602182634e-6 * t33 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + 0.67312765583287273306e-7 * t34 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t38;
    bf[1] = t18;
    bf[2] = t1;
}

static void idsbf_3_8_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t6, t7, t8, t9;
    t1 = LegP1[37];
    t2 = LegP2[36];
    t3 = LegP1[39];
    t4 = LegP2[39];
    t5 = LegP1[41];
    t6 = LegP2[44];
    t7 = LegP1[43];
    t8 = LegP1[42];
    t9 = LegP2[41];
    t10 = LegP2[40];
    t11 = LegP1[40];
    t12 = LegP2[38];
    t13 = LegP1[38];
    t14 = LegP2[37];
    t15 = LegP2[42];
    t16 = LegP2[43];
    t17 = LegP1[44];
    t18 = t5 * t6;
    t19 = t7 * t6;
    t20 = t8 * t9;
    t21 = t5 * t10;
    t22 = t11 * t4;
    t23 = t3 * t12;
    t24 = t13 * t14;
    t25 = t13 * t4;
    t26 = (cosP1_4 * sinP2_1 - sinP1_4 * cosP2_1) * t14 * t11 + t25 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t27 = t3 * t10;
    t28 = t27 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t29 = t11 * t9;
    t30 = t5 * t15;
    t31 = t30 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t32 = t17 * t9;
    t33 = (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) * t16 * t8 + t32 * (cosP1_8 * sinP2_5 - sinP1_8 * cosP2_5);
    t34 = t7 * t10;
    t35 = t34 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t36 = t8 * t4;
    t37 = t36 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t38 = t5 * t12;
    t39 = t38 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t40 = t1 * t10;
    t41 = t40 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4);
    t42 = t13 * t9;
    t43 = t42 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t44 = t3 * t15;
    t45 = t44 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t46 = t11 * t16;
    t47 = t7 * t15;
    t48 = t47 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t49 = -0.13022023594897355446e-2 * t2;
    t50 = 0.37205781699706729848e-4 * cosP2_2 * t12;
    t51 = 0.18602890849853364923e-4 * t3;
    t52 = t51 * sinP1_3 * t2;
    t53 = 0.37205781699706729844e-4 * LegP1[36] * t4;
    t54 = t53 * sinP2_3;
    t55 = (t50 + t49) * t1 * sinP1_1;
    t26 = -0.66438895892333446160e-6 * t23 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.51674696805148235900e-6 * t26 - 0.34105299891397835693e-4 * t24 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) + 0.22369998616947288268e-9 * t29 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.22369998616947288267e-9 * t37 - 0.11632399280812589899e-7 * t22 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.11073149315388907694e-7 * t28 - 0.11073149315388907693e-7 * t39 + 0.29874463964940288822e-14 * t19 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + 0.10754807027378503976e-12 * t33 - 0.47799142343904462112e-13 * t48 - 0.46604163785306850564e-11 * t35 + 0.46604163785306850562e-11 * t31 - 0.32264421082135511928e-11 * t20 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - t52 - 0.19573748789828877234e-9 * t21 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.12547274865274921305e-12 * t18 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + 0.55924996542368220670e-11 * t46 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.27962498271184110337e-9 * t45 + 0.14764199087185210256e-7 * t43 - t54 + t55 + 0.77512045207722353850e-6 * t41;
    t24 = t24 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1);
    t25 = -t11 * t14 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t25 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t27 = t27 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t28 = t29 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t29 = t30 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t30 = (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) * t16 * t8 - t32 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t31 = t34 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t32 = t36 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t33 = t40 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t34 = t42 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t35 = t44 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t36 = t46 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t18 = t18 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t37 = t47 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t20 = t20 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t18 = -0.66438895892333446160e-6 * t23 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - 0.51674696805148235900e-6 * t25 - 0.34105299891397835693e-4 * t24 + t51 * cosP1_3 * t2 + t53 * cosP2_3 - 0.22369998616947288268e-9 * t28 + 0.22369998616947288267e-9 * t32 - 0.11632399280812589899e-7 * t22 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.11073149315388907694e-7 * t27 + 0.11073149315388907693e-7 * t38 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.29874463964940288822e-14 * t19 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) - 0.10754807027378503976e-12 * t30 - 0.47799142343904462112e-13 * t37 + 0.46604163785306850564e-11 * t31 - 0.46604163785306850562e-11 * t29 - 0.32264421082135511928e-11 * t20 - 0.19573748789828877234e-9 * t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.12547274865274921305e-12 * t18 + 0.55924996542368220670e-11 * t36 + (-t50 + t49) * t1 * cosP1_1 + 0.27962498271184110337e-9 * t35 + 0.14764199087185210256e-7 * t34 + 0.77512045207722353850e-6 * t33;
    t19 = t3 * t9 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t2 = -0.74411563399413459692e-4 * t13 * sinP1_2 * t2;
    t1 = -0.37283331028245480452e-10 * t11 * t15 * (cosP1_4 * sinP2_6 - sinP1_4 * cosP2_6) + 0.10754807027378503975e-11 * t5 * t16 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) + 0.35849356757928346584e-13 * t8 * t6 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8) - 0.47799142343904462108e-13 * t17 * t15 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) - 0.15056729838329905565e-11 * t7 * t9 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) - 0.55924996542368220672e-10 * t8 * t10 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.22369998616947288266e-8 * t5 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.88585194523111261548e-7 * t11 * t12 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.31004818083088941538e-5 * t3 * t14 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.10334939361029647179e-5 * t1 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.44292597261555630776e-7 * t13 * t10 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.13421999170168372959e-8 * t19 + t2;
    bf[0] = t26;
    bf[1] = t18;
    bf[2] = t1;
}

static void idsbf_3_8_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t5, t6, t7, t8, t9;
    t1 = LegP1[37];
    t2 = LegP2[36];
    t3 = LegP1[36];
    t4 = LegP2[37];
    t5 = LegP1[39];
    t6 = LegP2[39];
    t7 = LegP1[44];
    t8 = LegP2[43];
    t9 = LegP2[38];
    t10 = LegP1[41];
    t11 = LegP2[44];
    t12 = LegP1[43];
    t13 = LegP1[42];
    t14 = LegP2[41];
    t15 = LegP2[40];
    t16 = LegP1[40];
    t17 = LegP1[38];
    t18 = LegP2[42];
    t19 = t7 * t8;
    t20 = t10 * t11;
    t21 = t12 * t11;
    t22 = t13 * t14;
    t23 = t10 * t15;
    t24 = t16 * t6;
    t25 = t17 * t6;
    t26 = t5 * t15;
    t27 = t16 * t14;
    t28 = t10 * t18;
    t29 = t13 * t8;
    t30 = t7 * t14;
    t31 = t12 * t15;
    t32 = t13 * t6;
    t33 = t32 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t34 = t16 * t4;
    t35 = t34 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    t36 = t1 * t15;
    t37 = t36 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4);
    t38 = t17 * t14;
    t39 = t38 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t40 = t5 * t18;
    t41 = t40 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t42 = t16 * t8;
    t43 = t42 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t44 = t12 * t18;
    t45 = t44 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t46 = -0.19852200542908207585e-2 * t1;
    t47 = t46 * sinP1_1 * t2;
    t33 = -0.27127607983116073598e-10 * t33 - 0.13911593837495422358e-11 * t28 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.90425359943720245324e-12 * t31 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.26084238445303916922e-13 * t30 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.22357918667403357362e-13 * t29 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + t47 + 0.49372246529271253950e-8 * t24 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.12532954888199626002e-7 * t39 + 0.75197729329197756004e-6 * t37 + 0.22523532879754493342e-12 * t45 + 0.40691411974674110396e-11 * t43 - 0.94946627940906257588e-10 * t27 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.50131819552798504002e-6 * t25 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.62602172268729400610e-11 * t22 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.18989325588181251520e-9 * t23 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.21702086386492858878e-9 * t41 + 0.12532954888199626003e-6 * t35 - 0.68361572117452505461e-8 * t26 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t35 = 0.18047455039007461442e-4 * t5;
    t37 = 0.72189820156029845766e-4 * t1;
    t30 = t30 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t31 = t31 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t32 = t32 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t34 = t34 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t36 = t36 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t38 = t38 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t39 = t40 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t40 = t17 * t4 * (0.10527682106087685842e-4 * cosP1_2 * cosP2_1 - 0.43614683010934698494e-4 * sinP1_2 * sinP2_1);
    t23 = 0.27127607983116073598e-10 * t32 + 0.13911593837495422358e-11 * t28 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.90425359943720245324e-12 * t31 + 0.26084238445303916922e-13 * t30 + 0.22357918667403357362e-13 * t29 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.41403553087783995114e-15 * t21 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.49372246529271253950e-8 * t24 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.12532954888199626002e-7 * t38 + 0.75197729329197756004e-6 * t36 + 0.94946627940906257588e-10 * t27 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.50131819552798504002e-6 * t25 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + t40 + 0.18989325588181251520e-9 * t23 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.21702086386492858878e-9 * t39 + t37 * sinP1_1 * t9 * sinP2_2 - 0.12532954888199626003e-6 * t34 + 0.68361572117452505461e-8 * t26 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t22 = t2 * (t46 * cosP1_1 - t35 * cosP1_3) + t3 * (0.45118637597518653602e-4 * cosP2_3 * t6 + 0.24364064302660072948e-2 * cosP2_1 * t4) + 0.40691411974674110396e-11 * t42 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + 0.86947461484346389744e-13 * t20 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + 0.10557906037384918753e-13 * t19 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.62602172268729400610e-11 * t22 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.22523532879754493342e-12 * t44 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t23;
    t11 = t13 * t11 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t23 = 0.64970838140426861188e-3 * t3 * t9 * sinP2_2;
    t24 = 0.39704401085816415172e-3 * t17 * sinP1_2 * t2;
    t1 = -0.54142365117022384332e-3 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.28154416099693116674e-13 * t7 * t18 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) - 0.83469563024972534148e-12 * t12 * t14 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) - 0.27127607983116073600e-10 * t13 * t15 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.75957302352725006078e-9 * t10 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.30079091731679102406e-5 * t5 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.10026363910559700801e-4 * t1 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.15039545865839551202e-6 * t17 * t15 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.22787190705817501822e-8 * t5 * t14 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.36170143977488098130e-10 * t16 * t18 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.62602172268729400612e-12 * t10 * t8 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) - 0.12421065926335198534e-13 * t11 + t23 + t24;
    bf[0] = t3 * (-0.45118637597518653602e-4 * sinP2_3 * t6 + 0.24364064302660072948e-2 * sinP2_1 * t4) + 0.10557906037384918753e-13 * t19 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.86947461484346389744e-13 * t20 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.41403553087783995114e-15 * t21 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + t33 + t35 * sinP1_3 * t2 + t37 * cosP1_1 * t9 * sinP2_2 + t4 * (-0.43614683010934698494e-4 * sinP1_2 * cosP2_1 - 0.10527682106087685842e-4 * cosP1_2 * sinP2_1) * t17;
    bf[1] = t22;
    bf[2] = t1;
}

static void idsbf_3_8_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t6, t7, t8, t9;
    t1 = LegP1[60];
    t2 = LegP2[44];
    t3 = LegP1[63];
    t4 = LegP2[43];
    t5 = LegP1[62];
    t6 = LegP2[42];
    t7 = LegP1[61];
    t8 = LegP2[41];
    t9 = LegP2[40];
    t10 = LegP1[59];
    t11 = LegP2[39];
    t12 = LegP1[57];
    t13 = LegP2[37];
    t14 = LegP1[56];
    t15 = LegP2[38];
    t16 = LegP1[58];
    t17 = LegP1[64];
    t18 = LegP2[36];
    t19 = LegP1[55];
    t20 = t5 * t6;
    t21 = t7 * t8;
    t22 = t1 * t9;
    t23 = t10 * t11;
    t24 = t12 * t11;
    t25 = t16 * t9;
    t26 = t10 * t8;
    t27 = t1 * t6;
    t28 = t7 * t4;
    t29 = t5 * t2;
    t30 = LegP1[65] * t4;
    t31 = t17 * t6;
    t32 = t31 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t33 = t3 * t8;
    t34 = t33 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t35 = t5 * t9;
    t36 = t7 * t11;
    t37 = t10 * t13;
    t38 = t14 * t9;
    t39 = t12 * t8;
    t40 = t16 * t6;
    t41 = t10 * t4;
    t42 = t1 * t2;
    t43 = t3 * t4;
    t44 = 0.47134631153194145736e-14;
    t45 = 0.29694817626512311818e-12;
    t46 = t12 * (-0.32340269539223040650e-4 * sinP1_2 * cosP2_1 - 0.19023687964248847441e-4 * cosP1_2 * sinP2_1) + 0.23113780876562349638e-2 * sinP2_1 * t19;
    t47 = 0.68485276671295850774e-4 * cosP1_1 * sinP2_2 * t15 - 0.12327349800833253141e-2 * sinP1_1 * t18;
    t48 = 0.17121319167823962696e-4 * t16;
    t49 = t48 * sinP1_3 * t18;
    t50 = 0.42803297919559906736e-4 * t19 * t11;
    t51 = t50 * sinP2_3;
    t32 = -0.21210584018937365580e-13 * t28 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.78557718588656909558e-15 * t32 - 0.39278859294328454778e-15 * t29 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.47559219910622118596e-6 * t24 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) - 0.64853481696302888998e-8 * t25 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.13197696722894360806e-11 * t27 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.24745681355426926514e-13 * t34 + 0.17157005739762669047e-10 * t22 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.77206525828932010710e-9 * t23 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t44 * t20 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t49 - 0.32732382745273712316e-16 * t30 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) - t51 + t45 * t21 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.90074280133754012494e-10 * t26 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t46 * t13 + t47 * t14;
    t26 = t26 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t28 = t28 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t29 = t29 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t30 = t30 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t31 = t31 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t33 = t33 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t34 = t35 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t46 = t36 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t47 = t37 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t49 = t39 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t51 = t40 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t52 = t41 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t53 = t42 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t54 = t43 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t22 = 0.17157005739762669047e-10 * t22 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.77206525828932010710e-9 * t23 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.47559219910622118596e-6 * t24 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + 0.64853481696302888998e-8 * t25 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.90074280133754012494e-10 * t26 + 0.13197696722894360806e-11 * t27 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.21210584018937365580e-13 * t28 + 0.39278859294328454778e-15 * t29 + 0.32732382745273712316e-16 * t30 + 0.78557718588656909558e-15 * t31 + 0.24745681355426926514e-13 * t33 + 0.85785028698813345230e-12 * t34 + 0.25735508609644003572e-10 * t46 - 0.11889804977655529650e-6 * t47 + 0.46694506821338080076e-6 * t38 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + 0.50441596874902246998e-8 * t49 + 0.55430326236156315386e-10 * t51 + 0.63631752056812096742e-12 * t52 + 0.78557718588656909552e-14 * t53 + 0.65464765490547424624e-16 * t54;
    t20 = t13 * (t12 * (-0.32340269539223040650e-4 * sinP1_2 * sinP2_1 + 0.19023687964248847441e-4 * cosP1_2 * cosP2_1) + 0.23113780876562349638e-2 * cosP2_1 * t19) + t14 * (-0.12327349800833253141e-2 * cosP1_1 * t18 + 0.68485276671295850774e-4 * sinP1_1 * sinP2_2 * t15) + t44 * t20 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t45 * t21 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t22 - t48 * cosP1_3 * t18 + t50 * cosP2_3;
    t21 = t16 * t8 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t10 = t10 * t6 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t22 = 0.31423087435462763822e-14;
    t18 = -0.27394110668518340312e-3 * t12 * sinP1_2 * t18;
    t15 = -0.68485276671295850770e-3 * t19 * t15 * sinP2_2;
    t1 = 0.21210584018937365578e-12 * t1 * t4 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) + t22 * ((-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) * t6 * t3 + t7 * t2 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8)) + 0.65464765490547424622e-16 * t17 * t4 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7) + 0.14847408813256155906e-12 * t5 * t8 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.68628022959050676190e-11 * t7 * t9 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.25735508609644003568e-9 * t1 * t11 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.16645726968717741511e-5 * t16 * t13 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.46227561753124699280e-3 * t14 * t13 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.85606595839119813470e-5 * t14 * t11 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.10376557071408462238e-6 * t12 * t9 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.12610399218725561750e-8 * t21 + 0.15837236067473232965e-10 * t10 + t18 + t15;
    bf[0] = -0.85785028698813345230e-12 * t35 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.25735508609644003572e-10 * t36 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.11889804977655529650e-6 * t37 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + 0.46694506821338080076e-6 * t38 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + 0.50441596874902246998e-8 * t39 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.55430326236156315386e-10 * t40 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.63631752056812096742e-12 * t41 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.78557718588656909552e-14 * t42 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + 0.65464765490547424624e-16 * t43 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + t32;
    bf[1] = t20;
    bf[2] = t1;
}

static void idsbf_3_8_10_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t7, t8, t9;
    t1 = LegP1[60];
    t2 = LegP2[40];
    t3 = LegP1[59];
    t4 = LegP2[39];
    t5 = LegP1[57];
    t6 = LegP2[37];
    t7 = LegP1[58];
    t8 = LegP2[41];
    t9 = LegP2[42];
    t10 = LegP1[61];
    t11 = LegP2[43];
    t12 = LegP1[62];
    t13 = LegP2[44];
    t14 = LegP1[65];
    t15 = LegP1[64];
    t16 = LegP1[63];
    t17 = LegP1[56];
    t18 = LegP2[36];
    t19 = LegP1[55];
    t20 = LegP2[38];
    t21 = t1 * t2;
    t22 = t3 * t4;
    t23 = t5 * t4;
    t24 = t7 * t2;
    t25 = t3 * t8;
    t26 = t1 * t9;
    t27 = t10 * t11;
    t28 = t12 * t13;
    t29 = t14 * t11;
    t30 = t15 * t9;
    t31 = t16 * t8;
    t32 = t12 * t2;
    t33 = t10 * t4;
    t34 = t3 * t6;
    t35 = t17 * t2;
    t36 = t5 * t8;
    t37 = t7 * t9;
    t38 = t3 * t11;
    t39 = t15 * t13;
    t40 = t39 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t41 = t7 * t20;
    t42 = t41 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t43 = t1 * t20;
    t44 = t43 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t45 = t1 * t13;
    t46 = t45 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t47 = t16 * t11;
    t48 = t12 * t9;
    t49 = t48 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t50 = t10 * t8;
    t51 = t50 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t52 = 0.46796232061390035568e-6;
    t53 = 0.48529425841441518374e-8;
    t54 = 0.51662506905380737272e-10;
    t55 = 0.33013214858123481884e-10;
    t56 = -0.51016300433226534508e-14;
    t57 = 0.13490977225675461349e-12;
    t58 = 0.38996860051158362978e-8;
    t59 = 0.35580111160916071848e-2;
    t60 = sinP1_1 * t17;
    t61 = t60 * t59 + 0.32944547371218585044e-4 * sinP1_3 * t7;
    t62 = sinP2_1 * t6;
    t63 = -0.43033815003654276716e-2 * t62 - 0.51475855267529039130e-4 * sinP2_3 * t4;
    t64 = t6 * (-0.77785736848710548014e-4 * cosP1_2 * sinP2_1 - 0.45756315793359145800e-6 * sinP1_2 * cosP2_1) * t5;
    t40 = t56 * t49 + t57 * t51 - 0.15745771738650164970e-16 * t40 + t61 * t18 + t63 * t19 + t53 * t24 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.40853853386927808832e-8 * t44 + 0.75579704345520791860e-14 * t46 + t58 * t22 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.53729007181595966764e-8 * t36 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t64 + t54 * t25 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t55 * t21 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4) + 0.40036776319189252654e-6 * t42 + 0.52411779908756839842e-6 * t35 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) - 0.29916966303435313446e-15 * t47 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.56662104347836937656e-10 * t37 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.62920103867646059223e-12 * t38 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t52 * t23 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t42 = 0.57818473824323405774e-12;
    t44 = 0.69911226519606732476e-14;
    t46 = t34 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t35 = t35 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t36 = t36 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t38 = t38 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t45 = t45 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t39 = t39 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t41 = t41 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t43 = t43 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t47 = t47 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t49 = (-0.43033815003654276716e-2 * t19 + 0.77785736848710548014e-4 * cosP1_2 * t5) * t6 * cosP2_1;
    t51 = (-0.90597505270851108864e-4 * t20 * cosP2_2 + t18 * t59) * t17 * cosP1_1;
    t19 = 0.51475855267529039130e-4 * t19 * t4 * cosP2_3;
    t19 = -0.19839672390699207866e-14 * t31 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t19 + 0.94474630431900989826e-16 * t30 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - 0.15745771738650164970e-16 * t39 - 0.32944547371218585044e-4 * t7 * cosP1_3 * t18 - 0.40853853386927808832e-8 * t43 - 0.41266518572654352358e-12 * t32 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t49 + 0.78728858693250824854e-17 * t29 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) + 0.75579704345520791860e-14 * t45 + 0.53729007181595966764e-8 * t36 - 0.43329844501287069976e-10 * t33 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.40036776319189252654e-6 * t41 + 0.52411779908756839842e-6 * t35 - 0.29916966303435313446e-15 * t47 - 0.94474630431900989832e-16 * t28 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.56662104347836937656e-10 * t37 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.62920103867646059223e-12 * t38 + t51 - 0.37177006582104306036e-6 * t46;
    t19 = -t42 * t26 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - t44 * t27 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) - t52 * t23 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - t53 * t24 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - t54 * t25 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t55 * t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t56 * t48 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t57 * t50 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t58 * t22 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t19 - 0.45756315793359145800e-6 * t62 * t5 * sinP1_2;
    t21 = t10 * t2 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4);
    t22 = t1 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t23 = t7 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    t6 = t17 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    t4 = t17 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t17 = 0.13177818948487434017e-3 * t5 * sinP1_2 * t18;
    t1 = 0.19411770336576607347e-7 * t5 * t2 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.30997504143228442364e-9 * t7 * t8 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.46254779059458724616e-11 * t3 * t9 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.69911226519606732468e-13 * t1 * t11 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) + 0.11336955651828118778e-14 * t10 * t13 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8) - 0.15745771738650164971e-16 * t14 * t13 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8) + 0.32683082709542247064e-7 * t3 * t20 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.14171194564785148473e-15 * t15 * t11 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7) - 0.15115940869104158372e-14 * t16 * t9 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) + 0.27775541346978891014e-13 * t12 * t8 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.49519822287185222822e-11 * t21 + 0.43329844501287069972e-9 * t22 + 0.22306203949262583624e-5 * t23 - 0.78243300006644139472e-4 * t6 + 0.93592464122780071134e-6 * t4 + t17;
    bf[0] = t42 * t26 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t44 * t27 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + 0.94474630431900989832e-16 * t28 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.78728858693250824854e-17 * t29 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) - 0.94474630431900989826e-16 * t30 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + 0.19839672390699207866e-14 * t31 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.41266518572654352358e-12 * t32 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.43329844501287069976e-10 * t33 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.37177006582104306036e-6 * t34 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t40 + 0.90597505270851108864e-4 * t60 * t20 * cosP2_2;
    bf[1] = t19;
    bf[2] = t1;
}

static void idsbf_3_8_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t7, t8, t9;
    t1 = LegP1[56];
    t2 = LegP2[36];
    t3 = LegP1[55];
    t4 = LegP2[37];
    t5 = LegP1[58];
    t6 = LegP2[39];
    t7 = LegP2[38];
    t8 = LegP1[60];
    t9 = LegP2[44];
    t10 = LegP1[63];
    t11 = LegP2[43];
    t12 = LegP1[62];
    t13 = LegP2[42];
    t14 = LegP1[61];
    t15 = LegP2[41];
    t16 = LegP2[40];
    t17 = LegP1[59];
    t18 = LegP1[57];
    t19 = LegP1[65];
    t20 = LegP1[64];
    t21 = t5 * t7;
    t22 = t8 * t7;
    t23 = t8 * t9;
    t24 = t10 * t11;
    t25 = t12 * t13;
    t26 = t14 * t15;
    t27 = t8 * t16;
    t28 = t17 * t6;
    t29 = t18 * t6;
    t30 = t29 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t31 = t5 * t16;
    t32 = t31 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t33 = t17 * t15;
    t34 = t33 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t35 = t8 * t13;
    t36 = t35 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t37 = t14 * t11;
    t38 = t37 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t39 = t12 * t9;
    t40 = t39 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t41 = t19 * t11;
    t42 = t41 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7);
    t43 = t20 * t13;
    t44 = t43 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t45 = t10 * t15;
    t46 = t12 * t16;
    t47 = t46 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t48 = t14 * t6;
    t49 = t48 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t50 = t17 * t4;
    t51 = t50 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    t52 = t1 * t16;
    t53 = t18 * t15;
    t54 = t5 * t13;
    t55 = t17 * t11;
    t56 = t20 * t9;
    t57 = 0.16126982270114033123e-6;
    t58 = -0.43865391774710170098e-4 * sinP1_2;
    t59 = 0.14836823688504910472e-4 * cosP1_2;
    t60 = t18 * t4 * (t58 * cosP2_1 + t59 * sinP2_1);
    t30 = 0.99893795874970968545e-16 * t44 - 0.83244829895809140449e-17 * t40 + 0.22198621305549104122e-17 * t42 - 0.42333328459049336954e-6 * t21 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + t60 + 0.55940525689983742389e-14 * t45 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.84354760961086595656e-15 * t24 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) - 0.79915036699976774839e-15 * t38 + 0.36361341698489432547e-12 * t47 - 0.83910788534975613574e-13 * t36 - 0.34163678189240071240e-13 * t25 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.22642593731660086202e-14 * t23 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.98902849419891256538e-10 * t27 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.26180166022912391437e-10 * t49 - 0.62832398454989739438e-8 * t28 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.20158727837642541406e-8 * t22 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.10995669729623204403e-8 * t32 + t57 * t51 - 0.13194803675547845284e-6 * t30 - 0.93980083159172687204e-11 * t34 - 0.17117800861135025170e-11 * t26 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t32 = 0.17104375134969429072e-8;
    t34 = 0.17153244778212198868e-6;
    t36 = t56 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t21 = t21 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t22 = t22 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t24 = t24 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t25 = t25 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t27 = t27 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t28 = t28 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t29 = t29 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t31 = t31 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t33 = t33 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t35 = t35 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t37 = t37 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t38 = t39 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t39 = t43 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t40 = t45 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t42 = t46 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t43 = t48 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t21 = 0.17621265592344878852e-10 * t54 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.19179608807994425960e-12 * t55 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + 0.22642593731660086202e-14 * t23 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) - 0.29135690463533199156e-16 * t36 - 0.42333328459049336954e-6 * t21 - 0.20158727837642541406e-8 * t22 - 0.84354760961086595656e-15 * t24 - 0.34163678189240071240e-13 * t25 - 0.17117800861135025170e-11 * t26 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.98902849419891256538e-10 * t27 - 0.62832398454989739438e-8 * t28 + 0.13194803675547845284e-6 * t29 + 0.10995669729623204403e-8 * t31 + 0.93980083159172687204e-11 * t33 + 0.83910788534975613574e-13 * t35 + 0.79915036699976774839e-15 * t37 + 0.83244829895809140449e-17 * t38 - 0.22198621305549104122e-17 * t41 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) - 0.99893795874970968545e-16 * t39 - 0.55940525689983742389e-14 * t40 - 0.36361341698489432547e-12 * t42 - 0.26180166022912391437e-10 * t43;
    t21 = t1 * (-0.20378054796516092256e-2 * cosP1_1 * t2 + 0.31931424894825785586e-4 * sinP1_1 * sinP2_2 * t7) + t32 * t53 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t34 * t52 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + t4 * (t18 * (-t59 * cosP2_1 + t58 * sinP2_1) + 0.19158854936895471354e-2 * cosP2_1 * t3) - t57 * t50 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t21 - 0.13062855638792366832e-4 * t5 * cosP1_3 * t2 + 0.17417140851723155776e-4 * t3 * t6 * cosP2_3;
    t22 = t1 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t23 = t18 * t16 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4);
    t24 = t17 * t13 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t25 = t8 * t11 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t26 = t14 * t9 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t27 = 0.35124567384308364142e-3 * t3 * t7 * sinP2_2;
    t18 = 0.33963424660860153760e-3 * t18 * sinP1_2 * t2;
    t8 = 0.60476183512927624216e-7 * t17 * t7 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.34834281703446311550e-3 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.29135690463533199158e-17 * t19 * t9 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8) + 0.88794485222196416476e-16 * t20 * t11 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7) - 0.31667528821314828682e-5 * t22 + t27 - 0.25572811743992567943e-13 * t25 + 0.45155550356319292748e-5 * t5 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.28303242164575107756e-15 * t26 + t18 + 0.37959642432488968046e-14 * t10 * t13 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) - 0.26314423284568352418e-9 * t5 * t15 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.28588741297020331448e-7 * t23 - 0.25173236560492684070e-11 * t24 + 0.20138589248394147257e-12 * t12 * t15 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.12362856177486407068e-10 * t14 * t16 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.83776531273319652583e-9 * t8 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    bf[0] = t2 * (0.13062855638792366832e-4 * sinP1_3 * t5 - 0.20378054796516092256e-2 * sinP1_1 * t1) + t3 * (0.19158854936895471354e-2 * sinP2_1 * t4 - 0.17417140851723155776e-4 * sinP2_3 * t6) + t34 * t52 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t32 * t53 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.17621265592344878852e-10 * t54 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.19179608807994425960e-12 * t55 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.29135690463533199156e-16 * t56 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + t30 + 0.31931424894825785586e-4 * t1 * cosP1_1 * t7 * sinP2_2;
    bf[1] = t21;
    bf[2] = t8;
}

static void idsbf_3_8_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t7, t8, t9;
    t1 = LegP1[83];
    t2 = LegP2[42];
    t3 = LegP1[84];
    t4 = LegP2[43];
    t5 = LegP1[85];
    t6 = LegP2[44];
    t7 = LegP1[88];
    t8 = LegP1[87];
    t9 = LegP1[86];
    t10 = LegP2[41];
    t11 = LegP2[40];
    t12 = LegP2[39];
    t13 = LegP2[38];
    t14 = LegP1[82];
    t15 = LegP2[37];
    t16 = LegP1[79];
    t17 = LegP1[80];
    t18 = LegP1[81];
    t19 = LegP1[78];
    t20 = LegP2[36];
    t21 = t1 * t2;
    t22 = t3 * t4;
    t23 = t5 * t6;
    t24 = LegP1[89] * t6;
    t25 = t7 * t4;
    t26 = t8 * t2;
    t27 = t9 * t10;
    t28 = t5 * t11;
    t29 = t3 * t12;
    t30 = t1 * t13;
    t31 = t14 * t15;
    t32 = t16 * t11;
    t33 = t17 * t10;
    t34 = t18 * t2;
    t35 = t14 * t4;
    t36 = t1 * t6;
    t37 = t8 * t6;
    t38 = t9 * t4;
    t39 = t5 * t2;
    t40 = t3 * t10;
    t41 = t40 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t42 = t1 * t11;
    t43 = t42 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t44 = t14 * t12;
    t45 = t44 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t46 = t18 * t13;
    t47 = t46 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t48 = t17 * t12;
    t49 = t48 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t50 = t18 * t11;
    t51 = t50 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t52 = t14 * t10;
    t53 = -0.16067692715319079447e-12;
    t54 = -0.19128205613475094578e-14;
    t55 = -0.25504274151300126104e-16;
    t56 = -0.39850428361406447040e-18;
    t57 = -0.27792737985083440652e-4 * sinP1_2 * cosP2_1 * t17 + 0.18343207070155070832e-2 * sinP2_1 * t19;
    t58 = -0.13757405302616303123e-2 * sinP1_1 * t20 + 0.30572011783591784720e-4 * cosP1_1 * sinP2_2 * t13;
    t59 = 0.12506732093287548293e-4 * t18;
    t60 = t59 * sinP1_3 * t20;
    t61 = 0.16675642791050064391e-4 * t19 * t12;
    t62 = t61 * sinP2_3;
    t41 = -t62 - 0.13896368992541720327e-6 * t47 - 0.12633062720492473024e-6 * t49 + 0.33474359823581415514e-15 * t36 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t60 + 0.57843693775148686006e-11 * t34 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.80981171285208160412e-9 * t33 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.14036736356102747803e-8 * t45 - 0.10527552267077060853e-8 * t51 + t56 * t37 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + 0.42847180574184211856e-13 * t35 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.11580307493784766938e-6 * t32 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t55 * t38 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) - 0.89979079205786844902e-11 * t52 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t53 * t41 + t57 * t15 + t58 * t16 - 0.80338463576595397226e-13 * t21 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t54 * t39 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.14621600370940362296e-10 * t43;
    t32 = t32 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t33 = t33 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t34 = t34 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t35 = t35 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t36 = t36 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t43 = t44 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t44 = t46 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t45 = t48 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t46 = t50 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t47 = t52 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t21 = t21 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t48 = t22 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t49 = t23 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t50 = t25 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t51 = t26 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t52 = t27 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t57 = t28 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t21 = -0.14621600370940362296e-10 * t42 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.14036736356102747803e-8 * t43 - 0.13896368992541720327e-6 * t44 + 0.12633062720492473024e-6 * t45 + 0.10527552267077060853e-8 * t46 + 0.89979079205786844902e-11 * t47 + 0.80338463576595397226e-13 * t21 + 0.76512822453900378323e-15 * t48 + 0.79700856722812894082e-17 * t49 - 0.66417380602344078400e-19 * t24 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8) - 0.21253561792750105086e-17 * t50 - 0.95641028067375472900e-16 * t51 - 0.53558975717730264821e-14 * t52 - 0.34813334216524672136e-12 * t57 - 0.25065600635897763935e-10 * t29 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.19300512489641278231e-8 * t30 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.15440409991713022585e-6 * t31 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + 0.11580307493784766938e-6 * t32 + 0.80981171285208160412e-9 * t33 + 0.57843693775148686006e-11 * t34 + 0.42847180574184211856e-13 * t35 + 0.33474359823581415514e-15 * t36;
    t21 = t15 * (0.18343207070155070832e-2 * cosP2_1 * t19 - 0.27792737985083440652e-4 * sinP1_2 * sinP2_1 * t17) + t16 * (-0.13757405302616303123e-2 * cosP1_1 * t20 + 0.30572011783591784720e-4 * sinP1_1 * sinP2_2 * t13) + t53 * t40 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t54 * t39 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t55 * t38 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + t56 * t37 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + t21 - t59 * cosP1_3 * t20 + t61 * cosP2_3;
    t32 = t1 * t4 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t33 = t3 * t6 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t6 = t7 * t6 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8);
    t7 = t9 * t2 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6);
    t5 = t5 * t10 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5);
    t9 = -0.25013464186575096587e-3 * t17 * sinP1_2 * t20;
    t19 = -0.36686414140310141660e-3 * t19 * t13 * sinP2_2;
    t1 = -0.30880819983426045168e-7 * t14 * t13 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.95641028067375472894e-16 * t33 + 0.10711795143546052964e-13 * t32 + 0.16196234257041632081e-9 * t18 * t10 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + t19 - 0.26566952240937631360e-18 * t6 + 0.12854154172255263557e-11 * t14 * t2 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.41776001059829606560e-11 * t3 * t11 * (cosP1_6 * sinP2_4 - sinP1_6 * cosP2_4) + 0.21055104534154121705e-7 * t17 * t11 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.27792737985083440654e-5 * t16 * t12 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.12752137075650063052e-16 * t8 * t4 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7) - 0.76512822453900378306e-15 * t7 - 0.27792737985083440650e-5 * t18 * t15 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.30572011783591784717e-3 * t16 * t15 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.53558975717730264822e-13 * t5 + t9 - 0.35091840890256869508e-9 * t1 * t12 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    bf[0] = -0.76512822453900378323e-15 * t22 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.79700856722812894082e-17 * t23 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + 0.66417380602344078400e-19 * t24 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8) + 0.21253561792750105086e-17 * t25 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) + 0.95641028067375472900e-16 * t26 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + 0.53558975717730264821e-14 * t27 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.34813334216524672136e-12 * t28 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.25065600635897763935e-10 * t29 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.19300512489641278231e-8 * t30 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + 0.15440409991713022585e-6 * t31 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t41;
    bf[1] = t21;
    bf[2] = t1;
}

static void idsbf_3_10_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t6, t7, t8, t9;
    t1 = LegP1[26];
    t2 = LegP2[61];
    t3 = LegP1[27];
    t4 = LegP2[62];
    t5 = LegP2[58];
    t6 = LegP2[57];
    t7 = LegP1[25];
    t8 = LegP2[56];
    t9 = LegP1[22];
    t10 = LegP2[59];
    t11 = LegP1[23];
    t12 = LegP2[60];
    t13 = LegP1[24];
    t14 = LegP2[63];
    t15 = LegP1[21];
    t16 = LegP2[55];
    t17 = t1 * t10;
    t18 = t7 * t5;
    t19 = t13 * t6;
    t20 = t11 * t5;
    t21 = t13 * t10;
    t22 = t7 * t12;
    t23 = t1 * t2;
    t24 = t3 * t4;
    t25 = t3 * t5;
    t26 = t25 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t27 = t1 * t6;
    t28 = t27 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t29 = t7 * t8;
    t30 = t29 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    t31 = t9 * t10;
    t32 = t31 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4);
    t33 = t11 * t12;
    t34 = t33 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t35 = t13 * t2;
    t36 = t7 * t4;
    t37 = t36 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t38 = t1 * t14;
    t39 = t38 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t40 = t3 * LegP2[64];
    t41 = t40 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9);
    t42 = t3 * t12;
    t43 = t42 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t44 = 0.52853076234992275566e-4 * sinP1_2 * cosP2_1 * t11 - 0.14798861345797837159e-2 * sinP2_1 * t15;
    t45 = -0.46980512208882022726e-4 * cosP1_1 * sinP2_2 * t6 + 0.21141230493996910226e-2 * sinP1_1 * t16;
    t46 = 0.20553974091385884941e-4 * t15 * t5;
    t47 = t46 * sinP2_3;
    t48 = 0.29362820130551264204e-4 * t13;
    t49 = t48 * sinP1_3 * t16;
    t26 = -t49 + t47 + t44 * t8 + t45 * t9 + 0.40781694625765644726e-8 * t18 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.32625355700612515780e-6 * t19 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - 0.48549636459244815151e-11 * t37 + 0.17654413257907205510e-11 * t23 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.36703525163189080256e-6 * t20 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) - 0.29362820130551264204e-6 * t30 - 0.52963239773721616532e-10 * t17 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4) - 0.19419854583697926061e-9 * t35 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.97099272918489630304e-10 * t22 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.87389345626640667272e-8 * t34 + 0.58259563751093778180e-8 * t21 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.29659414273284105254e-8 * t28 - 0.30895223201337609642e-10 * t26 - 0.41946885900787520286e-6 * t32 - 0.61300046034400019132e-14 * t41 + 0.73560055241280022968e-12 * t43 - 0.14712011048256004591e-12 * t39 + 0.36780027620640011479e-13 * t24 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t28 = t35 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t30 = t38 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t32 = t40 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t34 = t42 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t17 = t17 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t18 = t18 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t19 = t19 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t20 = t20 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t21 = t21 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t23 = t23 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t24 = t24 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t25 = t25 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t35 = -0.14798861345797837159e-2 * cosP2_1 * t15 + 0.52853076234992275566e-4 * sinP1_2 * sinP2_1 * t11;
    t37 = 0.21141230493996910226e-2 * cosP1_1 * t16 - 0.46980512208882022726e-4 * sinP1_1 * sinP2_2 * t6;
    t17 = t48 * cosP1_3 * t16 - t46 * cosP2_3 + t35 * t8 + t37 * t9 + 0.40781694625765644726e-8 * t18 + 0.32625355700612515780e-6 * t19 - 0.48549636459244815151e-11 * t36 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) - 0.17654413257907205510e-11 * t23 - 0.36703525163189080256e-6 * t20 + 0.29362820130551264204e-6 * t29 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + 0.52963239773721616532e-10 * t17 - 0.19419854583697926061e-9 * t28 - 0.97099272918489630304e-10 * t22 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.87389345626640667272e-8 * t33 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.58259563751093778180e-8 * t21 + 0.29659414273284105254e-8 * t27 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.30895223201337609642e-10 * t25 - 0.41946885900787520286e-6 * t31 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) - 0.61300046034400019132e-14 * t32 + 0.73560055241280022968e-12 * t34 - 0.14712011048256004591e-12 * t30 - 0.36780027620640011479e-13 * t24;
    t15 = -0.32886358546217415910e-3 * t15 * t6 * sinP2_2;
    t16 = -0.52853076234992275566e-3 * t11 * sinP1_2 * t16;
    t1 = -0.88272066289536027548e-11 * t3 * t10 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.74148535683210263134e-9 * t1 * t5 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.65250711401225031558e-7 * t7 * t6 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.58725640261102528408e-5 * t13 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.42282460987993820450e-3 * t9 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.58725640261102528404e-5 * t9 * t5 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.10486721475196880073e-6 * t11 * t10 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.19419854583697926060e-8 * t13 * t12 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.38839709167395852119e-10 * t7 * t2 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.88272066289536027541e-12 * t1 * t4 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) + 0.24520018413760007652e-13 * t3 * t14 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8) + t15 + t16;
    bf[0] = t26;
    bf[1] = t17;
    bf[2] = t1;
}

static void idsbf_3_10_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t6, t7, t8, t9;
    t1 = LegP1[40];
    t2 = LegP2[62];
    t3 = LegP1[41];
    t4 = LegP2[63];
    t5 = LegP1[42];
    t6 = LegP2[64];
    t7 = LegP2[60];
    t8 = LegP2[59];
    t9 = LegP2[58];
    t10 = LegP1[39];
    t11 = LegP2[57];
    t12 = LegP1[38];
    t13 = LegP2[56];
    t14 = LegP1[37];
    t15 = LegP2[61];
    t16 = LegP1[43];
    t17 = LegP1[44];
    t18 = LegP2[55];
    t19 = LegP1[36];
    t20 = t1 * t2;
    t21 = t3 * t4;
    t22 = t5 * t6;
    t23 = t5 * t7;
    t24 = t3 * t8;
    t25 = t1 * t9;
    t26 = t10 * t11;
    t27 = t12 * t9;
    t28 = t10 * t8;
    t29 = t28 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t30 = t1 * t7;
    t31 = t30 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t32 = t3 * t15;
    t33 = t32 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t34 = t5 * t2;
    t35 = t34 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t36 = t16 * t4;
    t37 = t36 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t38 = t17 * t6;
    t17 = t17 * t7;
    t39 = t17 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t40 = t16 * t8;
    t41 = t40 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t42 = t5 * t9;
    t43 = t42 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t44 = t3 * t11;
    t45 = t44 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t46 = t1 * t13;
    t47 = t46 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    t48 = t14 * t8;
    t49 = t48 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4);
    t50 = t12 * t7;
    t51 = t10 * t15;
    t52 = -0.52930100781737419440e-14;
    t53 = -0.63012024740163594560e-16;
    t29 = 0.41285478609755187162e-12 * t20 * (cosP1_4 * sinP2_7 - sinP1_4 * cosP2_7) + t52 * t21 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t53 * t22 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + 0.75614429688196313480e-14 * t23 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.19054836281425470998e-11 * t24 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.34679802032194357214e-9 * t25 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.55487683251510971544e-7 * t26 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.34333004011872413645e-6 * t27 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.54496831764876847056e-8 * t29 + 0.90828052941461411748e-10 * t31 + 0.16514191443902074864e-11 * t33 + 0.34404565508129322636e-13 * t35 + 0.88216834636229032396e-15 * t37 + 0.31506012370081797282e-16 * t38 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) - 0.37807214844098156740e-14 * t39 - 0.31758060469042451662e-12 * t41 - 0.28899835026828631016e-10 * t43 - 0.27743841625755485770e-8 * t45 - 0.27466403209497930914e-6 * t47 - 0.22888669341248275762e-6 * t49;
    t31 = 0.19226482246648551640e-4 * t19 * t9;
    t33 = 0.27466403209497930914e-4 * t10;
    t27 = t27 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t30 = t30 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t32 = t32 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t34 = t34 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t35 = t36 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t36 = t38 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t17 = t17 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t37 = t40 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t38 = t42 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t39 = t46 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t40 = t48 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t41 = t50 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t42 = t51 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t20 = t20 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t17 = 0.75614429688196313480e-14 * t23 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.19054836281425470998e-11 * t24 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.34679802032194357214e-9 * t25 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.55487683251510971544e-7 * t26 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - 0.34333004011872413645e-6 * t27 - 0.54496831764876847056e-8 * t28 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.90828052941461411748e-10 * t30 - 0.16514191443902074864e-11 * t32 - 0.34404565508129322636e-13 * t34 - 0.88216834636229032396e-15 * t35 - 0.31506012370081797282e-16 * t36 + 0.37807214844098156740e-14 * t17 + 0.31758060469042451662e-12 * t37 + 0.28899835026828631016e-10 * t38 + 0.27743841625755485770e-8 * t44 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.27466403209497930914e-6 * t39 - 0.22888669341248275762e-6 * t40 - 0.27248415882438423524e-8 * t41 - 0.33028382887804149728e-10 * t42 - 0.41285478609755187162e-12 * t20;
    t17 = t13 * (t12 * (0.32959683851397517096e-4 * sinP1_2 * sinP2_1 - 0.16479841925698758548e-4 * cosP1_2 * cosP2_1) - 0.13843067217586957182e-2 * cosP2_1 * t19) + t14 * (-0.43946245135196689464e-4 * sinP1_1 * sinP2_2 * t11 + 0.11535889347989130984e-2 * cosP1_1 * t18) + t52 * t21 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t53 * t22 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) + t17 - t31 * cosP2_3 + t33 * cosP1_3 * t18;
    t6 = t16 * t6 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9);
    t16 = t16 * t7 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5);
    t20 = 0.35156996108157351572e-3 * t19 * t11 * sinP2_2;
    t21 = 0.32959683851397517096e-3 * t12 * sinP1_2 * t18;
    t1 = -0.12703224187616980664e-11 * t5 * t8 * (cosP1_6 * sinP2_4 - sinP1_6 * cosP2_4) + 0.17339901016097178607e-9 * t3 * t9 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.22195073300604388616e-7 * t1 * t11 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.27466403209497930914e-5 * t10 * t13 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.34607668043967392952e-3 * t14 * t13 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.48066205616621379098e-5 * t14 * t9 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.65396198117852216460e-7 * t12 * t8 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.90828052941461411752e-9 * t10 * t7 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.13211353155121659891e-10 * t1 * t15 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.20642739304877593579e-12 * t3 * t2 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) - 0.35286733854491612956e-14 * t5 * t4 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8) - 0.63012024740163594562e-16 * t6 + 0.75614429688196313482e-14 * t16 + t20 + t21;
    bf[0] = t13 * (t12 * (0.16479841925698758548e-4 * cosP1_2 * sinP2_1 + 0.32959683851397517096e-4 * sinP1_2 * cosP2_1) - 0.13843067217586957182e-2 * sinP2_1 * t19) + t14 * (0.11535889347989130984e-2 * sinP1_1 * t18 - 0.43946245135196689464e-4 * cosP1_1 * sinP2_2 * t11) - 0.27248415882438423524e-8 * t50 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.33028382887804149728e-10 * t51 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t29 + t31 * sinP2_3 - t33 * sinP1_3 * t18;
    bf[1] = t17;
    bf[2] = t1;
}

static void idsbf_3_10_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t6, t7, t8, t9;
    t1 = LegP1[41];
    t2 = LegP2[57];
    t3 = LegP1[40];
    t4 = LegP2[56];
    t5 = LegP1[37];
    t6 = LegP2[59];
    t7 = LegP1[38];
    t8 = LegP2[60];
    t9 = LegP1[39];
    t10 = LegP2[61];
    t11 = LegP2[62];
    t12 = LegP2[63];
    t13 = LegP1[42];
    t14 = LegP2[64];
    t15 = LegP2[55];
    t16 = LegP1[36];
    t17 = LegP2[58];
    t18 = LegP1[43];
    t19 = LegP2[65];
    t20 = LegP1[44];
    t21 = t20 * t8;
    t22 = t18 * t6;
    t23 = t13 * t17;
    t24 = t1 * t2;
    t25 = t3 * t4;
    t26 = t5 * t6;
    t27 = t7 * t8;
    t28 = t9 * t10;
    t29 = t28 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t30 = t3 * t11;
    t31 = t30 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t32 = t1 * t12;
    t33 = t32 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t34 = t13 * t14;
    t35 = t18 * t19;
    t36 = t35 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10);
    t37 = t18 * t10;
    t38 = t37 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t39 = t13 * t8;
    t40 = t39 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t41 = t1 * t6;
    t42 = t41 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t43 = t3 * t17;
    t44 = t43 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t45 = t9 * t2;
    t46 = t45 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t47 = t7 * t17;
    t48 = t47 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t49 = t9 * t6;
    t50 = t3 * t8;
    t51 = t50 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t52 = t1 * t10;
    t53 = t52 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t54 = t13 * t11;
    t55 = t18 * t12;
    t56 = t20 * t14;
    t29 = 0.86412588724284939872e-14 * t21 * (cosP1_8 * sinP2_5 - sinP1_8 * cosP2_5) - 0.71465546350354571902e-12 * t22 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.63856567591875643946e-10 * t23 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.59983975750819959742e-8 * t24 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.57841690902576389750e-6 * t25 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) - 0.35347699996018904842e-6 * t26 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) - 0.35347699996018904847e-8 * t27 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.30604069260622428438e-10 * t29 - 0.12751695525259345183e-12 * t31 + 0.49044982789459019930e-14 * t33 + 0.29193442136582749960e-15 * t34 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + 0.15569835806177466646e-16 * t36 - 0.18683802967412959975e-14 * t38 - 0.25923776617285481964e-12 * t40 - 0.30015529467148920198e-10 * t42 - 0.33205415147775334854e-8 * t44 - 0.35990385450491975842e-6 * t46 - 0.45952009994824576296e-6 * t48 - 0.50496714280027006918e-8 * t49 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.53557121206089249770e-10 * t51 - 0.51006782101037380728e-12 * t53;
    t31 = 0.81441100790827556764e-4 * cosP2_2 * t2;
    t33 = -0.39193529755585761692e-2 * t15;
    t36 = 0.55990756793693945276e-4 * t9;
    t38 = t54 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t40 = t55 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t42 = t56 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t21 = t21 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t22 = t22 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t23 = t23 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t44 = 0.34816070588078780518e-2 * cosP2_1 * t4 - 0.33085447196273694934e-4 * cosP2_3 * t17;
    t46 = t4 * (-0.86531169590254279059e-4 * cosP1_2 * cosP2_1 + 0.10180137598853444599e-4 * sinP1_2 * sinP2_1) * t7;
    t21 = 0.24522491394729509967e-14 * t38 + 0.86412588724284939872e-14 * t21 + 0.63856567591875643946e-10 * t23 + 0.53557121206089249770e-10 * t50 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t46 + (t31 + t33) * t5 * cosP1_1 - 0.33205415147775334854e-8 * t43 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t44 * t16 + 0.45952009994824576296e-6 * t47 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - 0.35990385450491975842e-6 * t45 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.71465546350354571902e-12 * t22 + 0.51006782101037380728e-12 * t52 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.25923776617285481964e-12 * t39 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t36 * cosP1_3 * t15 + 0.50496714280027006918e-8 * t49 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.11677376854633099984e-15 * t40 - 0.97311473788609166532e-17 * t42 - 0.30015529467148920198e-10 * t41 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t21 = 0.59983975750819959742e-8 * t24 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.35347699996018904842e-6 * t26 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) - 0.35347699996018904847e-8 * t27 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.30604069260622428438e-10 * t28 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.12751695525259345183e-12 * t30 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + 0.49044982789459019930e-14 * t32 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + 0.29193442136582749960e-15 * t34 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) - 0.18683802967412959975e-14 * t37 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.15569835806177466646e-16 * t35 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) + 0.57841690902576389750e-6 * t25 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t21;
    t11 = t1 * t11 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t12 = t13 * t12 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t14 = t18 * t14 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9);
    t19 = t20 * t19 * (-cosP1_8 * sinP2_10 + sinP1_8 * cosP2_10);
    t20 = t20 * t10 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6);
    t22 = -0.22396302717477578110e-3 * t7 * sinP1_2 * t15;
    t1 = -0.12097762421399891583e-12 * t18 * t8 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) - 0.85758655620425486281e-11 * t13 * t6 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.63856567591875643946e-9 * t1 * t17 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.47987180600655967794e-7 * t3 * t2 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.34705014541545833846e-5 * t9 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.96711307189107723652e-4 * t5 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.91904019989649152594e-6 * t5 * t17 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.20198685712010802766e-7 * t7 * t6 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.32134272723653549858e-9 * t9 * t8 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.40805425680829904580e-11 * t3 * t10 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.24522491394729509967e-13 * t11 + 0.14012852225559719980e-14 * t12 + 0.13623606330405283314e-15 * t14 + 0.15569835806177466645e-16 * t19 - 0.18683802967412959973e-14 * t20 + t22;
    bf[0] = t16 * (0.33085447196273694934e-4 * sinP2_3 * t17 + 0.34816070588078780518e-2 * sinP2_1 * t4) - 0.24522491394729509967e-14 * t54 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + 0.11677376854633099984e-15 * t55 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + 0.97311473788609166532e-17 * t56 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) + t29 + (-t31 + t33) * t5 * sinP1_1 + t4 * (0.10180137598853444599e-4 * sinP1_2 * cosP2_1 + 0.86531169590254279059e-4 * cosP1_2 * sinP2_1) * t7 - t36 * sinP1_3 * t15;
    bf[1] = t21;
    bf[2] = t1;
}

static void idsbf_3_10_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t6, t7, t8, t9;
    t1 = LegP1[43];
    t2 = LegP2[65];
    t3 = LegP1[37];
    t4 = LegP2[57];
    t5 = LegP2[61];
    t6 = LegP1[42];
    t7 = LegP2[60];
    t8 = LegP1[41];
    t9 = LegP2[59];
    t10 = LegP1[40];
    t11 = LegP2[58];
    t12 = LegP1[39];
    t13 = LegP1[38];
    t14 = LegP2[56];
    t15 = LegP2[62];
    t16 = LegP2[63];
    t17 = LegP1[44];
    t18 = LegP2[64];
    t19 = LegP2[55];
    t20 = LegP1[36];
    t21 = t12 * t9;
    t22 = t10 * t7;
    t23 = t8 * t5;
    t24 = t6 * t15;
    t25 = t1 * t16;
    t26 = t17 * t18;
    t27 = t17 * t7;
    t28 = t1 * t9;
    t29 = t6 * t11;
    t30 = t8 * t4;
    t31 = t10 * t14;
    t32 = t3 * t9;
    t33 = t13 * t7;
    t34 = t12 * t5;
    t35 = t10 * t15;
    t36 = t8 * t16;
    t37 = t6 * t18;
    t38 = t17 * t15;
    t39 = t1 * t2;
    t40 = t1 * t5;
    t41 = t40 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t42 = t6 * t7;
    t43 = t8 * t9;
    t44 = t43 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t45 = t10 * t11;
    t46 = t45 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t47 = t12 * t4;
    t48 = t47 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t49 = t13 * t11;
    t50 = t49 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t51 = t13 * (0.67230001156047705194e-4 * sinP1_2 * cosP2_1 - 0.21182055158754756432e-4 * cosP1_2 * sinP2_1) - 0.20721575698781826944e-2 * sinP2_1 * t20;
    t52 = -0.32233562198105064134e-4 * cosP1_1 * sinP2_2 * t4 + 0.32924281388064458366e-2 * sinP1_1 * t19;
    t53 = 0.92095891994585897534e-5 * t20 * t11;
    t54 = t53 * sinP2_3;
    t55 = 0.29931164898240416702e-4 * t12;
    t56 = t55 * sinP1_3 * t19;
    t41 = -0.47538384644964977114e-12 * t28 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.22184579500983655990e-12 * t23 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.29070672978088982826e-9 * t21 * (cosP1_3 * sinP2_4 - sinP1_3 * cosP2_4) - 0.40997102917817796268e-10 * t29 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - t56 - 0.11620494024324772184e-15 * t25 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + 0.10232876888287321948e-6 * t50 + 0.22269092184796927058e-13 * t41 - 0.69215888043069006680e-11 * t22 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.99830607754426451942e-10 * t44 + 0.74614727310428389208e-8 * t46 + 0.57443649804703830024e-6 * t48 - 0.59158878669289749300e-14 * t27 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.50707610287962642262e-14 * t24 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + t54 + 0.14198130880629539833e-11 * t42 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t51 * t14 + t52 * t3 - 0.30811915973588411094e-17 * t26 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9);
    t44 = t31 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t46 = t32 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t48 = t33 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t50 = t34 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t51 = t35 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t52 = t36 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t54 = t37 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t40 = t40 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t56 = t13 * (0.21182055158754756432e-4 * cosP1_2 * cosP2_1 + 0.67230001156047705194e-4 * sinP1_2 * sinP2_1) - 0.20721575698781826944e-2 * cosP2_1 * t20;
    t57 = 0.32924281388064458366e-2 * cosP1_1 * t19 - 0.32233562198105064134e-4 * sinP1_1 * sinP2_2 * t4;
    t24 = -t53 * cosP2_3 + 0.47538384644964977114e-12 * t28 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.40997102917817796268e-10 * t29 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.50707610287962642262e-14 * t24 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.11620494024324772184e-15 * t25 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.33489415270758508194e-6 * t44 + 0.73948598336612186624e-15 * t54 + 0.22269092184796927058e-13 * t40 + 0.24403037451082021584e-13 * t52 - 0.31977740275897881108e-7 * t46 + 0.36822852438912711552e-8 * t30 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.91364972216851088820e-9 * t48 + t55 * cosP1_3 * t19 + 0.59158878669289749300e-14 * t27 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + 0.92287850724092008908e-12 * t51 + 0.34607944021534503344e-10 * t50 + t56 * t14 + t57 * t3 + 0.30811915973588411094e-17 * t26 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t21 = 0.29931575517200170776e-16 * t39 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) + 0.40407626948220230550e-15 * t38 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.14198130880629539833e-11 * t42 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.99830607754426451942e-10 * t43 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.74614727310428389208e-8 * t45 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.57443649804703830024e-6 * t47 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - 0.29070672978088982826e-9 * t21 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.69215888043069006680e-11 * t22 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.22184579500983655990e-12 * t23 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.10232876888287321948e-6 * t49 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + t24;
    t22 = t8 * t11 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t23 = t10 * t4 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2);
    t24 = t3 * t14 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    t3 = t3 * t11 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t11 = t13 * t9 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4);
    t4 = -0.29010205978294557722e-3 * t20 * t4 * sinP2_2;
    t13 = -0.65848562776128916736e-3 * t13 * sinP1_2 * t19;
    t1 = -0.11479188816988982955e-8 * t22 - 0.34861482072974316552e-14 * t6 * t16 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8) - 0.27836365230996158822e-14 * t17 * t5 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) + 0.20465753776574643896e-5 * t3 + 0.46047945997292948768e-3 * t24 + t4 - 0.80374596649820419668e-5 * t12 * t14 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.14261515393489493134e-10 * t6 * t9 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.57679906702557505566e-11 * t10 * t5 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.95739416341173050032e-7 * t23 + 0.16611813130336561602e-9 * t12 * t7 * (cosP1_3 * sinP2_5 - sinP1_3 * cosP2_5) + 0.63955480551795762210e-8 * t11 - 0.18930841174172719777e-12 * t1 * t7 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) - 0.14198130880629539831e-12 * t8 * t15 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) + t13 - 0.98598131115482915502e-16 * t1 * t18 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9) - 0.37414469396500213470e-17 * t17 * t2 * (-cosP1_8 * sinP2_10 + sinP1_8 * cosP2_10);
    bf[0] = -0.36822852438912711552e-8 * t30 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.33489415270758508194e-6 * t31 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) - 0.31977740275897881108e-7 * t32 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + 0.91364972216851088820e-9 * t33 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.34607944021534503344e-10 * t34 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.92287850724092008908e-12 * t35 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.24403037451082021584e-13 * t36 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + 0.73948598336612186624e-15 * t37 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + 0.40407626948220230550e-15 * t38 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.29931575517200170776e-16 * t39 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + t41;
    bf[1] = t21;
    bf[2] = t1;
}

static void idsbf_3_10_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t7, t8, t9;
    t1 = LegP1[57];
    t2 = LegP2[60];
    t3 = LegP1[59];
    t4 = LegP2[62];
    t5 = LegP1[60];
    t6 = LegP2[63];
    t7 = LegP1[61];
    t8 = LegP2[64];
    t9 = LegP1[62];
    t10 = LegP2[65];
    t11 = LegP2[58];
    t12 = LegP1[58];
    t13 = LegP2[61];
    t14 = LegP1[63];
    t15 = LegP2[59];
    t16 = LegP2[57];
    t17 = LegP2[56];
    t18 = LegP1[56];
    t19 = LegP1[64];
    t20 = LegP2[55];
    t21 = LegP1[55];
    t22 = t1 * t2;
    t23 = t3 * t4;
    t24 = t5 * t6;
    t25 = t7 * t8;
    t26 = t9 * t10;
    t27 = t7 * t11;
    t28 = t12 * t13;
    t29 = t14 * t4;
    t30 = t9 * t13;
    t31 = t30 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t32 = t7 * t2;
    t33 = t32 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t34 = t5 * t15;
    t35 = t34 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t36 = t3 * t11;
    t37 = t36 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t38 = t12 * t16;
    t39 = t1 * t11;
    t40 = t12 * t15;
    t41 = t3 * t2;
    t42 = t5 * t13;
    t43 = t7 * t4;
    t44 = t9 * t6;
    t45 = t14 * t8;
    t46 = t19 * t10;
    t47 = LegP1[65] * t4;
    t48 = t19 * t13;
    t49 = t14 * t2;
    t50 = t9 * t15;
    t51 = t50 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t52 = t5 * t16;
    t53 = t52 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t54 = t3 * t17;
    t55 = t54 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    t56 = t18 * t15;
    t57 = t56 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4);
    t58 = 0.46602167246611920620e-15;
    t59 = 0.67347648149942388516e-13;
    t60 = 0.90197743057958556038e-11;
    t61 = 0.11667980041977518810e-8;
    t62 = t1 * (0.40507832384279188220e-5 * cosP1_2 * sinP2_1 + 0.39634134038735911600e-4 * sinP1_2 * cosP2_1) - 0.19658212774723723691e-2 * sinP2_1 * t21;
    t63 = -0.30579442094014681292e-4 * cosP1_1 * sinP2_2 * t16 + 0.20444541285712672638e-2 * sinP1_1 * t20;
    t64 = 0.87369834554327660844e-5 * t21 * t11;
    t65 = t64 * sinP2_3;
    t66 = 0.28395196230156489776e-4 * t12;
    t67 = t66 * sinP1_3 * t20;
    t31 = -0.34933225095375116920e-8 * t53 - 0.36771815889868544126e-9 * t22 * (cosP1_2 * sinP2_5 - sinP1_2 * cosP2_5) + t62 * t17 + t63 * t18 + t59 * t33 + 0.14431638889273368966e-12 * t23 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.38893266806591729368e-10 * t27 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.31770848928846422126e-6 * t55 - 0.19856780580529013839e-7 * t57 + 0.22048337191945424810e-14 * t24 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - t67 + 0.25054928627210710010e-17 * t29 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.62637321568026775028e-18 * t26 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + 0.88393788196799384922e-11 * t28 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.45098871528979278020e-12 * t51 + t65 - 0.56123040124951990424e-14 * t49 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.35076900078094994016e-16 * t25 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + t58 * t31 + t60 * t35 + t61 * t37;
    t31 = 0.14671954540057549106e-6 * t38 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.97077593949252956492e-7 * t39 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.27578861917401408114e-9 * t40 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.65663956946193828804e-11 * t41 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.21046140046856996411e-12 * t42 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.48105462964244563220e-14 * t43 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.11024168595972712405e-15 * t44 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.29230750065079161680e-17 * t45 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) - 0.10439553594671129171e-18 * t46 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) - 0.12527464313605355007e-17 * t47 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) - 0.77670278744353201038e-16 * t48 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t31;
    t33 = t41 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t35 = t42 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t37 = t43 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t41 = t44 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t42 = t45 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t43 = t46 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t44 = t47 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t45 = t48 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t46 = t50 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t47 = t52 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t48 = t54 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t50 = t56 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t22 = t22 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t23 = t23 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t24 = t24 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t25 = t25 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t26 = t26 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t28 = t28 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t29 = t29 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t38 = t38 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t22 = 0.14671954540057549106e-6 * t38 - 0.97077593949252956492e-7 * t39 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - 0.27578861917401408114e-9 * t40 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.65663956946193828804e-11 * t33 + 0.21046140046856996411e-12 * t35 + 0.48105462964244563220e-14 * t37 + 0.11024168595972712405e-15 * t41 + 0.29230750065079161680e-17 * t42 + 0.10439553594671129171e-18 * t43 + 0.12527464313605355007e-17 * t44 + 0.77670278744353201038e-16 * t45 + 0.56123040124951990424e-14 * t49 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + 0.45098871528979278020e-12 * t46 + 0.34933225095375116920e-8 * t47 + 0.31770848928846422126e-6 * t48 - 0.19856780580529013839e-7 * t50 + 0.36771815889868544126e-9 * t22 + 0.14431638889273368966e-12 * t23 + 0.22048337191945424810e-14 * t24 + 0.35076900078094994016e-16 * t25 + 0.62637321568026775028e-18 * t26 + 0.38893266806591729368e-10 * t27 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.88393788196799384922e-11 * t28 + 0.25054928627210710010e-17 * t29;
    t23 = t14 * t13 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6);
    t24 = t9 * t2 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5);
    t25 = t7 * t15 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4);
    t26 = t5 * t11 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t27 = t3 * t16 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2);
    t28 = t12 * t17 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    t11 = t18 * t11 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t29 = 0.45432313968250383640e-3 * t1 * sinP1_2 * t20;
    t33 = 0.30579442094014681296e-3 * t21 * t16 * sinP2_2;
    t2 = -0.44126179067842252972e-8 * t1 * t15 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.39316425549447447380e-3 * t18 * t17 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.48105462964244563214e-13 * t5 * t4 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) - 0.17473966910865532169e-5 * t11 + 0.41919870114450140304e-7 * t27 + 0.44479188500384990978e-5 * t28 + 0.88193348767781699234e-15 * t7 * t6 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8) + 0.33673824074971194256e-13 * t24 + 0.25054928627210710012e-17 * t19 * t4 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7) + 0.17538450039047497008e-16 * t9 * t8 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9) + t29 + 0.41758214378684516688e-18 * t14 * t10 * (-cosP1_8 * sinP2_10 + sinP1_8 * cosP2_10) + t33 + 0.25255368056228395692e-11 * t3 * t13 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.36079097223183422414e-11 * t25 + 0.31068111497741280414e-15 * t23 + 0.91929539724671360313e-10 * t12 * t2 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.38893266806591729366e-9 * t26;
    bf[0] = t31;
    bf[1] = t17 * (t1 * (-0.40507832384279188220e-5 * cosP1_2 * cosP2_1 + 0.39634134038735911600e-4 * sinP1_2 * sinP2_1) - 0.19658212774723723691e-2 * cosP2_1 * t21) + t18 * (0.20444541285712672638e-2 * cosP1_1 * t20 - 0.30579442094014681292e-4 * sinP1_1 * sinP2_2 * t16) + t58 * t30 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t59 * t32 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t60 * t34 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t61 * t36 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t22 - t64 * cosP2_3 + t66 * cosP1_3 * t20;
    bf[2] = t2;
}

static void idsbf_3_10_10_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t7, t8, t9;
    t1 = LegP1[56];
    t2 = LegP2[55];
    t3 = LegP1[58];
    t4 = LegP2[58];
    t5 = LegP2[61];
    t6 = LegP1[63];
    t7 = LegP2[62];
    t8 = LegP1[62];
    t9 = LegP1[61];
    t10 = LegP2[60];
    t11 = LegP1[60];
    t12 = LegP2[59];
    t13 = LegP1[59];
    t14 = LegP2[57];
    t15 = LegP1[57];
    t16 = LegP2[56];
    t17 = LegP2[63];
    t18 = LegP2[64];
    t19 = LegP1[64];
    t20 = LegP2[65];
    t21 = LegP1[65];
    t22 = t9 * t10;
    t23 = t11 * t12;
    t24 = t13 * t4;
    t25 = t3 * t14;
    t26 = t15 * t16;
    t27 = t15 * t4;
    t28 = t3 * t12;
    t29 = t13 * t10;
    t30 = t29 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + (cosP1_6 * sinP2_3 - sinP1_6 * cosP2_3) * t9 * t4;
    t31 = t11 * t5;
    t32 = t31 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + (cosP1_7 * sinP2_4 - sinP1_7 * cosP2_4) * t12 * t8;
    t33 = t9 * t7;
    t34 = t8 * t17;
    t35 = t21 * t7;
    t36 = (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) * t18 * t6 + t35 * (-sinP1_10 * cosP2_7 + cosP1_10 * sinP2_7);
    t37 = t19 * t20;
    t38 = t37 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t39 = t19 * t5;
    t40 = t39 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t41 = t6 * t10;
    t42 = t11 * t14;
    t43 = t42 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t44 = t13 * t16;
    t45 = t44 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    t46 = t1 * t12;
    t47 = t15 * t10;
    t48 = t13 * t7;
    t49 = t11 * t17;
    t50 = t9 * t18;
    t51 = t8 * t20;
    t52 = t19 * t17;
    t53 = t3 * t5;
    t54 = t6 * t7;
    t55 = t8 * t5;
    t56 = 0.17597634178697985560e-4 * cosP2_2 * t14;
    t57 = 0.87988170893489927800e-5 * t3;
    t58 = t57 * sinP1_3 * t2;
    t59 = 0.17597634178697985563e-4 * LegP1[55] * t4;
    t60 = t59 * sinP2_3;
    t61 = (-0.95027224564969122026e-3 * t2 + t56) * t1 * sinP1_1;
    t30 = 0.24737498135509565886e-19 * t38 - 0.16637763223496277259e-4 * t26 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) - t58 + 0.70650294675015320166e-16 * t34 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.15997849253361805056e-6 * t45 - 0.25637578931669559383e-8 * t24 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - 0.29067549809149160298e-10 * t23 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.28486198812966177092e-10 * t30 - 0.70650294675015320169e-16 * t40 - 0.21774850372631345770e-6 * t25 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.15997849253361805058e-6 * t27 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.48445916348581933834e-14 * t33 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.48445916348581933830e-14 * t41 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.22219235074113618132e-8 * t43 + 0.22219235074113618130e-8 * t28 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t61 - t60 + 0.36334437261436450378e-12 * t32 - 0.32943223117035715006e-12 * t22 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.11873999105044591626e-17 * t36;
    t31 = t31 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - t8 * t12 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t32 = t33 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t33 = t34 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t34 = (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) * t18 * t6 - t35 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t35 = t37 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t36 = t39 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t37 = t41 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t38 = t42 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t39 = t44 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t40 = t46 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t41 = t48 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t42 = t49 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t43 = t50 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t44 = t51 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t45 = t52 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t58 = t53 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t27 = 0.80743193914303223056e-16 * t43 + 0.29625646765484824176e-8 * t47 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.24737498135509565886e-19 * t35 + 0.13358248993175165579e-17 * t44 + 0.23996773880042707582e-6 * t40 + 0.43601324713723740447e-12 * t41 + 0.35607748516207721370e-10 * t58 - 0.70650294675015320166e-16 * t33 + 0.15997849253361805056e-6 * t39 - t56 * t1 * cosP1_1 + 0.56520235740012256138e-14 * t42 - 0.28486198812966177092e-10 * t29 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.28486198812966177092e-10 * t9 * t4 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.70650294675015320169e-16 * t36 - 0.15997849253361805058e-6 * t27 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - 0.48445916348581933834e-14 * t32 + 0.48445916348581933830e-14 * t37 + 0.22219235074113618132e-8 * t38 - 0.22219235074113618130e-8 * t28 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.36334437261436450378e-12 * t31 - 0.11873999105044591626e-17 * t34 - 0.49474996271019131776e-18 * t45;
    t22 = t2 * (-0.95027224564969122026e-3 * t1 * cosP1_1 + t57 * cosP1_3) - 0.45121196599169448180e-16 * t54 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) - 0.38151159124508272893e-14 * t55 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.32943223117035715006e-12 * t22 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.29067549809149160298e-10 * t23 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.25637578931669559383e-8 * t24 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.21774850372631345770e-6 * t25 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - 0.16637763223496277259e-4 * t26 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) + t27 + t59 * cosP2_3;
    t23 = t15 * t12 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4);
    t24 = t3 * t10 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t25 = t13 * t5 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t26 = t11 * t7 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t27 = t9 * t17 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t20 = t6 * t20 * (-cosP1_8 * sinP2_10 + sinP1_8 * cosP2_10);
    t2 = -0.35195268357395971120e-4 * t15 * sinP1_2 * t2;
    t1 = 0.16623598747062428275e-16 * t8 * t18 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9) + 0.17091719287779706256e-9 * t24 + 0.88876940296454472534e-8 * t23 + 0.39579997016815305418e-18 * t20 + t2 + 0.31995698506723610112e-6 * t1 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.29067549809149160300e-11 * t25 - 0.21373198389080264926e-16 * t19 * t7 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7) - 0.17775388059290894504e-7 * t13 * t14 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.84780353610018384204e-15 * t27 + 0.48445916348581933828e-13 * t26 - 0.28486198812966177090e-9 * t11 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.11304047148002451228e-14 * t6 * t5 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) - 0.95987095520170830340e-6 * t3 * t16 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.67824282888014707358e-13 * t8 * t10 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) - 0.43601324713723740450e-11 * t9 * t12 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.49474996271019131770e-18 * t21 * t17 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8);
    bf[0] = 0.23996773880042707582e-6 * t46 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + 0.29625646765484824176e-8 * t47 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.43601324713723740447e-12 * t48 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.56520235740012256138e-14 * t49 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + 0.80743193914303223056e-16 * t50 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + 0.13358248993175165579e-17 * t51 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) - 0.49474996271019131776e-18 * t52 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + 0.35607748516207721370e-10 * t53 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.45121196599169448180e-16 * t54 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) - 0.38151159124508272893e-14 * t55 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t30;
    bf[1] = t22;
    bf[2] = t1;
}

static void idsbf_3_10_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t7, t8, t9;
    t1 = LegP1[56];
    t2 = LegP2[55];
    t3 = LegP1[55];
    t4 = LegP2[56];
    t5 = LegP1[58];
    t6 = LegP2[58];
    t7 = LegP2[59];
    t8 = LegP1[57];
    t9 = LegP2[60];
    t10 = LegP1[59];
    t11 = LegP2[62];
    t12 = LegP1[60];
    t13 = LegP2[63];
    t14 = LegP1[61];
    t15 = LegP2[64];
    t16 = LegP1[62];
    t17 = LegP2[65];
    t18 = LegP1[64];
    t19 = LegP2[61];
    t20 = LegP1[63];
    t21 = LegP2[57];
    t22 = LegP1[65];
    t23 = t1 * t7;
    t24 = t8 * t9;
    t25 = t10 * t11;
    t26 = t12 * t13;
    t27 = t14 * t15;
    t28 = t16 * t17;
    t29 = t18 * t13;
    t30 = t14 * t6;
    t31 = t30 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t32 = t5 * t19;
    t33 = t20 * t11;
    t34 = t33 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t35 = t16 * t19;
    t36 = t35 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t37 = t14 * t9;
    t38 = t37 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t39 = t12 * t7;
    t40 = t39 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t41 = t10 * t6;
    t42 = t41 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t43 = t5 * t21;
    t44 = t43 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t45 = t8 * t6;
    t46 = t45 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t47 = t5 * t7;
    t48 = t10 * t9;
    t49 = t48 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t50 = t12 * t19;
    t51 = t14 * t11;
    t52 = t22 * t15;
    t53 = t16 * t13;
    t54 = t20 * t15;
    t55 = t18 * t17;
    t56 = t22 * t11;
    t57 = t18 * t19;
    t58 = t20 * t9;
    t59 = t16 * t7;
    t60 = t12 * t21;
    t61 = t10 * t4;
    t62 = t8 * (-0.40561951088952455186e-5 * cosP1_2 * sinP2_1 - 0.28663778769526401667e-4 * sinP1_2 * cosP2_1) + 0.21595182759758287144e-2 * sinP2_1 * t3;
    t63 = -0.18561148818304643494e-2 * sinP1_1 * t2 + 0.41643603117991187322e-4 * cosP1_1 * sinP2_2 * t21;
    t64 = 0.25283616178780363738e-4 * t3 * t6;
    t65 = t64 * sinP2_3;
    t66 = 0.11898172319426053522e-4 * t5;
    t67 = t66 * sinP1_3 * t2;
    t31 = 0.13364210487280108110e-10 * t40 + 0.31297801766167017894e-10 * t32 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.28890278553384939608e-9 * t42 + 0.58345588064871795522e-14 * t36 + 0.29234210440925236494e-12 * t38 + 0.35621516923816464635e-12 * t25 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.95335928210574829288e-18 * t28 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + 0.31221122688843218950e-17 * t29 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + 0.59710397142412656236e-16 * t27 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + 0.28793977624873656462e-8 * t24 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.27041300725968303456e-6 * t23 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) - 0.19154254680894214951e-6 * t46 + t67 - t65 - 0.15820866826853657395e-10 * t49 + t62 * t4 + t63 * t1 + 0.12393670667374727806e-15 * t34 + 0.43673890481307542848e-14 * t26 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.12037616063910391504e-11 * t31 - 0.17334167132030963755e-8 * t47 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.52580306967160590055e-7 * t44;
    t31 = -0.14903715126746198997e-12 * t50 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.14842298718256860264e-14 * t51 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + 0.10732260924289856512e-18 * t52 * (sinP1_10 * cosP2_9 - cosP1_10 * sinP2_9) - 0.16056577382833655458e-16 * t53 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.19513201680527011842e-18 * t54 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) - 0.27876002400752874061e-20 * t55 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) - 0.32614922808880862648e-18 * t56 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) - 0.17060113469260758925e-16 * t57 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - 0.95536635427860249980e-15 * t58 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.49133126791470985698e-13 * t59 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.25038241412933614311e-9 * t60 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + 0.67603251814920758650e-7 * t61 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t31;
    t34 = t50 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t36 = t51 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t37 = t37 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t38 = t39 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t39 = t41 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t40 = t43 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t41 = t53 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t42 = t54 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t43 = t55 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t44 = t56 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t46 = t57 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t49 = t58 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t50 = t59 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t51 = t60 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t53 = t61 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t24 = t24 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t25 = t25 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t26 = t26 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t27 = t27 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t28 = t28 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t29 = t29 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t30 = t30 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t23 = 0.28793977624873656462e-8 * t24 + 0.35621516923816464635e-12 * t25 + 0.43673890481307542848e-14 * t26 + 0.59710397142412656236e-16 * t27 + 0.95335928210574829288e-18 * t28 + 0.31221122688843218950e-17 * t29 + 0.12037616063910391504e-11 * t30 + 0.14903715126746198997e-12 * t34 + 0.14842298718256860264e-14 * t36 + 0.29234210440925236494e-12 * t37 + 0.13364210487280108110e-10 * t38 + 0.28890278553384939608e-9 * t39 - 0.52580306967160590055e-7 * t40 + 0.16056577382833655458e-16 * t41 + 0.19513201680527011842e-18 * t42 + 0.27876002400752874061e-20 * t43 + 0.32614922808880862648e-18 * t44 + 0.17060113469260758925e-16 * t46 + 0.95536635427860249980e-15 * t49 + 0.49133126791470985698e-13 * t50 - 0.25038241412933614311e-9 * t51 - 0.67603251814920758650e-7 * t53 + 0.15820866826853657395e-10 * t48 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.19154254680894214951e-6 * t45 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) + 0.27041300725968303456e-6 * t23 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t24 = t5 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    t25 = t1 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t26 = t8 * t7 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4);
    t5 = t5 * t9 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t27 = t12 * t11 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t28 = t14 * t13 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t15 = t16 * t15 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9);
    t17 = t20 * t17 * (-cosP1_8 * sinP2_10 + sinP1_8 * cosP2_10);
    t29 = 0.45807963429790306056e-3 * t3 * t21 * sinP2_2;
    t30 = 0.30935248030507739156e-3 * t8 * sinP1_2 * t2;
    t5 = 0.18928910508177812422e-5 * t24 - 0.47495355898421952840e-13 * t27 - 0.34393188754029689994e-13 * t16 * t9 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) - 0.31221122688843218946e-18 * t22 * t13 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8) + t30 + t29 - 0.10592880912286092143e-18 * t17 - 0.39263968654105976622e-3 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.75114724238800842934e-8 * t10 * t21 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.45970211234146115882e-5 * t25 - 0.38520371404513252810e-10 * t12 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.44711145380238596988e-11 * t10 * t19 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.13045969123552345060e-16 * t18 * t11 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7) - 0.70247526049897242626e-17 * t15 - 0.16705263109100135138e-11 * t14 * t7 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.44298427115190240706e-9 * t5 - 0.64828431183190883916e-15 * t20 * t19 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) - 0.54592363101634428552e-15 * t28 - 0.45068834543280505762e-7 * t26;
    bf[0] = t31;
    bf[1] = t1 * (-0.18561148818304643494e-2 * cosP1_1 * t2 + 0.41643603117991187322e-4 * sinP1_1 * sinP2_2 * t21) + t4 * (t8 * (-0.28663778769526401667e-4 * sinP1_2 * sinP2_1 + 0.40561951088952455186e-5 * cosP1_2 * cosP2_1) + 0.21595182759758287144e-2 * cosP2_1 * t3) + 0.31297801766167017894e-10 * t32 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.12393670667374727806e-15 * t33 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.58345588064871795522e-14 * t35 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.10732260924289856512e-18 * t52 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9) + 0.17334167132030963755e-8 * t47 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t23 + t64 * cosP2_3 - t66 * cosP1_3 * t2;
    bf[2] = t5;
}

static void idsbf_3_10_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t8, t9;
    t1 = LegP1[78];
    t2 = LegP2[58];
    t3 = LegP1[79];
    t4 = LegP2[55];
    t5 = LegP2[56];
    t6 = LegP1[81];
    t7 = LegP1[88];
    t8 = LegP2[64];
    t9 = LegP1[87];
    t10 = LegP2[63];
    t11 = LegP1[86];
    t12 = LegP2[62];
    t13 = LegP1[85];
    t14 = LegP2[61];
    t15 = LegP1[84];
    t16 = LegP2[60];
    t17 = LegP1[83];
    t18 = LegP2[59];
    t19 = LegP1[82];
    t20 = LegP2[57];
    t21 = LegP1[80];
    t22 = LegP2[65];
    t23 = LegP1[89];
    t24 = t7 * t8;
    t25 = t9 * t10;
    t26 = t11 * t12;
    t27 = t13 * t14;
    t28 = t15 * t16;
    t29 = t17 * t18;
    t30 = t19 * t2;
    t31 = t6 * t20;
    t32 = t21 * t2;
    t33 = t6 * t18;
    t34 = t19 * t16;
    t35 = t17 * t14;
    t36 = t35 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t37 = t15 * t12;
    t38 = t37 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t39 = t13 * t10;
    t40 = t11 * t8;
    t41 = t9 * t22;
    t42 = LegP1[90] * t8;
    t43 = t23 * t10;
    t44 = t7 * t12;
    t45 = t9 * t14;
    t46 = t11 * t16;
    t47 = t13 * t18;
    t48 = t47 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t49 = t15 * t2;
    t50 = t49 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t51 = t17 * t20;
    t52 = t51 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t53 = t19 * t5;
    t54 = t53 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    t55 = t3 * t18;
    t56 = t21 * t16;
    t57 = t56 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t58 = t6 * t14;
    t59 = t58 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t60 = t19 * t12;
    t61 = t60 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t62 = t17 * t10;
    t63 = t62 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t64 = t15 * t8;
    t65 = t64 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9);
    t66 = t13 * t22;
    t67 = t66 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10);
    t68 = t21 * (-0.98382282507326155572e-5 * cosP1_2 * sinP2_1 - 0.21488761705547555034e-4 * sinP1_2 * cosP2_1) + 0.20675813371144912591e-2 * sinP2_1 * t1;
    t69 = 0.39870714489811126206e-4 * cosP1_1 * sinP2_2 * t20 - 0.12530795982512068236e-2 * sinP1_1 * t4;
    t70 = 0.11391632711374607487e-4 * t6;
    t71 = t70 * sinP1_3 * t4;
    t72 = 0.24207219511671040914e-4 * t1 * t2 * sinP2_3;
    t36 = 0.42702784566978498884e-19 * t25 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + t68 * t5 + t69 * t3 + 0.19757382741173076035e-11 * t29 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.27440809362740383381e-13 * t28 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t71 - 0.14210419134276269966e-14 * t38 + 0.32667630193738551648e-15 * t27 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.17260049562688799223e-7 * t31 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.44482067257269269664e-21 * t24 * (sinP1_10 * cosP2_9 - cosP1_10 * sinP2_9) - 0.14269220868624999358e-12 * t36 - t72 - 0.18338802660356849177e-6 * t32 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.37471693457523632768e-17 * t26 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.64540783621165381743e-10 * t30 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - 0.16596201502585383867e-8 * t33 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.15147326768232691628e-10 * t34 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t36 = t36 - 0.15373002444112259598e-16 * t39 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.18682468248053093261e-18 * t40 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) - 0.26689240354361561806e-20 * t41 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) - 0.22241033628634634833e-21 * t42 * (sinP1_12 * cosP2_9 - cosP1_12 * sinP2_9) - 0.71171307611630831474e-20 * t43 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8) - 0.31226411214603027308e-18 * t44 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) - 0.16333815096869275825e-16 * t45 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - 0.91469364542467944606e-15 * t46 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.47041387478983514368e-13 * t48 - 0.11525139932350961027e-11 * t50 + 0.23972291059289998919e-9 * t52 + 0.64725185860082997098e-7 * t54 + 0.18255821652843922255e-6 * t55 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + 0.13632594091409422464e-8 * t57 + 0.10273839025409999538e-10 * t59 + 0.79578347151947111797e-13 * t61 + 0.64566610265271490312e-15 * t63 + 0.56047404744159279782e-17 * t65 + 0.53378480708723123604e-19 * t67;
    t24 = t24 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9);
    t25 = t25 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t26 = t26 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t27 = t27 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t28 = t28 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t30 = t30 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t31 = t31 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t32 = t32 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t33 = t33 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t34 = t34 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t38 = t44 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t44 = t45 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t45 = t46 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t46 = t47 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t47 = t49 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t48 = t51 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t49 = t53 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t50 = 0.39870714489811126206e-4 * t3 * sinP1_1 * t20 * sinP2_2;
    t51 = t21 * t5 * (0.98382282507326155572e-5 * cosP1_2 * cosP2_1 - 0.21488761705547555034e-4 * sinP1_2 * sinP2_1);
    t24 = 0.42702784566978498884e-19 * t25 + 0.79578347151947111797e-13 * t60 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + 0.19757382741173076035e-11 * t29 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t50 + 0.27440809362740383381e-13 * t28 + 0.32667630193738551648e-15 * t27 + 0.64566610265271490312e-15 * t62 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) - 0.17260049562688799223e-7 * t31 + 0.44482067257269269664e-21 * t24 + 0.53378480708723123604e-19 * t66 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) + 0.18338802660356849177e-6 * t32 + 0.37471693457523632768e-17 * t26 + 0.56047404744159279782e-17 * t64 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) + t51 + 0.10273839025409999538e-10 * t58 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.64540783621165381743e-10 * t30 + 0.16596201502585383867e-8 * t33 + 0.15147326768232691628e-10 * t34 + 0.13632594091409422464e-8 * t56 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t25 = 0.20675813371144912591e-2 * cosP2_1 * t5 + 0.24207219511671040914e-4 * cosP2_3 * t2;
    t26 = -0.12530795982512068236e-2 * cosP1_1 * t3 - t70 * cosP1_3;
    t27 = t17 * t12 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t28 = t13 * t8 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9);
    t22 = t11 * t22 * (-cosP1_8 * sinP2_10 + sinP1_8 * cosP2_10);
    t8 = t23 * t8 * (sinP1_11 * cosP2_9 - cosP1_11 * sinP2_9);
    t7 = t7 * t10 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8);
    t9 = t9 * t12 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7);
    t11 = t11 * t14 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6);
    t12 = t13 * t16 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5);
    t13 = t17 * t2 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t17 = -0.22783265422749214975e-3 * t21 * sinP1_2 * t4;
    t23 = -0.47844857387773351446e-3 * t1 * t20 * sinP2_2;
    t2 = 0.21351392283489249442e-19 * t22 + 0.28468523044652332592e-19 * t7 + 0.56449664974780217240e-12 * t15 * t18 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.91469364542467944610e-14 * t12 + 0.19894586787986777952e-13 * t27 + 0.40345365852785068188e-5 * t3 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.18447602932934711518e-15 * t15 * t10 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8) - 0.38355665694863998273e-8 * t19 * t20 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.44482067257269269668e-21 * t8 + 0.18682468248053093261e-17 * t28 + 0.18735846728761816385e-17 * t9 + t23 - 0.11650533454814939476e-5 * t6 * t5 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.13067052077495420659e-15 * t11 + 0.22830753389799998972e-11 * t19 * t14 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.16135195905291345438e-10 * t13 + 0.34459688951908187651e-3 * t3 * t5 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + t17 + 0.27265188182818844928e-9 * t6 * t16 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.33192403005170767738e-7 * t21 * t18 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4);
    bf[0] = t36;
    bf[1] = t24 + t25 * t1 + t26 * t4 + 0.71171307611630831474e-20 * t43 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8) + 0.26689240354361561806e-20 * t41 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10) + 0.15373002444112259598e-16 * t39 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.31226411214603027308e-18 * t38 + 0.18682468248053093261e-18 * t40 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) + 0.14210419134276269966e-14 * t37 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.91469364542467944606e-15 * t45 + 0.16333815096869275825e-16 * t44 + 0.18255821652843922255e-6 * t55 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) - 0.64725185860082997098e-7 * t49 + 0.22241033628634634833e-21 * t42 * (cosP1_12 * cosP2_9 + sinP1_12 * sinP2_9) + 0.11525139932350961027e-11 * t47 + 0.14269220868624999358e-12 * t35 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.47041387478983514368e-13 * t46 - 0.23972291059289998919e-9 * t48;
    bf[2] = t2;
}

static void idsbf_3_10_12_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t8, t9;
    t1 = LegP1[88];
    t2 = LegP2[64];
    t3 = LegP1[87];
    t4 = LegP2[63];
    t5 = LegP1[86];
    t6 = LegP2[62];
    t7 = LegP1[85];
    t8 = LegP2[61];
    t9 = LegP1[84];
    t10 = LegP2[60];
    t11 = LegP1[83];
    t12 = LegP2[59];
    t13 = LegP1[82];
    t14 = LegP2[58];
    t15 = LegP1[81];
    t16 = LegP2[57];
    t17 = LegP1[80];
    t18 = LegP2[56];
    t19 = LegP1[78];
    t20 = LegP1[79];
    t21 = LegP2[55];
    t22 = LegP2[65];
    t23 = LegP1[90];
    t24 = LegP1[89];
    t25 = t1 * t2;
    t26 = t3 * t4;
    t27 = t5 * t6;
    t28 = t7 * t8;
    t29 = t9 * t10;
    t30 = t11 * t12;
    t31 = t13 * t14;
    t32 = t15 * t16;
    t33 = t17 * t14;
    t34 = t15 * t12;
    t35 = t13 * t10;
    t36 = t11 * t8;
    t37 = t36 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t38 = t9 * t6;
    t39 = t38 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t40 = t7 * t4;
    t41 = t5 * t2;
    t42 = t3 * t22;
    t43 = t23 * t2;
    t44 = t24 * t4;
    t45 = t1 * t6;
    t46 = t3 * t8;
    t47 = t5 * t10;
    t48 = t47 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t49 = t7 * t12;
    t50 = t49 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t51 = t9 * t14;
    t52 = t11 * t16;
    t53 = t52 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t54 = t13 * t18;
    t55 = t54 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    t56 = t20 * t12;
    t57 = t56 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4);
    t58 = t17 * t10;
    t59 = t58 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t60 = t15 * t8;
    t61 = t60 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t62 = t13 * t6;
    t63 = t62 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t64 = t11 * t4;
    t65 = t64 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t66 = t9 * t2;
    t67 = t7 * t22;
    t68 = t67 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10);
    t69 = t24 * t22;
    t70 = t69 * (-cosP1_11 * sinP2_10 + sinP1_11 * cosP2_10);
    t71 = -0.30960818628765750238e-4 * sinP2_3 * t14 - 0.38306005944831555812e-2 * sinP2_1 * t18;
    t72 = 0.55515950644683414216e-4 * cosP2_2 * t16;
    t73 = (0.32882524612620176114e-2 * t21 + t72) * t20 * sinP1_1;
    t74 = t18 * (0.19411171554085109503e-6 * sinP1_2 * cosP2_1 - 0.49304375747376179058e-4 * cosP1_2 * sinP2_1) * t17;
    t75 = 0.21352288709493620851e-4 * t15;
    t76 = t75 * sinP1_3 * t21;
    t37 = t19 * t71 - 0.28260229722979279227e-20 * t25 * (sinP1_10 * cosP2_9 - cosP1_10 * sinP2_9) - 0.88045535584139170556e-19 * t26 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) - 0.15127823841274821122e-17 * t27 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.24492667171587805626e-15 * t28 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.55843281151220196836e-13 * t29 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.88878990632257829054e-11 * t30 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.12926955415291722027e-8 * t31 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.18117093450479435876e-6 * t32 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.19846678608183173230e-6 * t33 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.14220638501161252648e-8 * t34 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.10369215573763413391e-10 * t35 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.78180593611708275556e-13 * t37 + 0.62024077749226766604e-15 * t39 + t73 + t74 + t76;
    t37 = t37 + 0.52827321350483502332e-17 * t40 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + 0.49499284359504079138e-19 * t41 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) + 0.52658813148408594828e-21 * t42 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) - 0.61435282006476693968e-22 * t43 * (sinP1_12 * cosP2_9 - cosP1_12 * sinP2_9) - 0.13340232664263510690e-20 * t44 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8) - 0.18009314096755739431e-19 * t45 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) + 0.24492667171587805626e-17 * t46 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + 0.48985334343175611252e-15 * t48 + 0.70538881454172880206e-13 * t50 + 0.95051142759497956076e-11 * t51 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.12581314896166274914e-8 * t53 + 0.16499495820972343385e-6 * t55 + 0.21899783291788329078e-6 * t57 + 0.15553823360645120085e-8 * t59 + 0.11258005480085991680e-10 * t61 + 0.84352745738948402586e-13 * t63 + 0.66562424901609212936e-15 * t65 + 0.56429184169834650222e-17 * t66 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + 0.52658813148408594828e-19 * t68 - 0.10531762629681718966e-21 * t70;
    t25 = t25 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9);
    t26 = t26 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t27 = t27 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t28 = t28 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t29 = t29 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t30 = t30 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t36 = t36 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t38 = t38 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t39 = t40 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t40 = t41 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t41 = t42 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t42 = t43 * (cosP1_12 * cosP2_9 + sinP1_12 * sinP2_9);
    t43 = t44 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t44 = t45 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t45 = t47 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t47 = t69 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10);
    t48 = t49 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t49 = t51 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t50 = t52 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t51 = cosP1_1 * t20;
    t52 = -t75 * cosP1_3 + 0.32882524612620176114e-2 * t51;
    t53 = 0.30960818628765750238e-4 * cosP2_3 * t14 - 0.38306005944831555812e-2 * cosP2_1 * t18;
    t55 = t18 * (0.19411171554085109503e-6 * sinP1_2 * sinP2_1 + 0.49304375747376179058e-4 * cosP1_2 * cosP2_1) * t17;
    t19 = 0.24492667171587805626e-15 * t28 + 0.66562424901609212936e-15 * t64 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + 0.52658813148408594828e-19 * t67 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) + 0.56429184169834650222e-17 * t66 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) - 0.15127823841274821122e-17 * t27 + 0.88878990632257829054e-11 * t30 + 0.11258005480085991680e-10 * t60 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.21899783291788329078e-6 * t56 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + t52 * t21 + t53 * t19 + 0.55843281151220196836e-13 * t29 + 0.84352745738948402586e-13 * t62 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) - 0.28260229722979279227e-20 * t25 + t55 - 0.88045535584139170556e-19 * t26 - 0.16499495820972343385e-6 * t54 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + 0.15553823360645120085e-8 * t58 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t25 = t11 * t6 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t26 = t9 * t4 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t27 = t7 * t2 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9);
    t28 = t5 * t22 * (-cosP1_8 * sinP2_10 + sinP1_8 * cosP2_10);
    t22 = t23 * t22 * (-cosP1_12 * sinP2_10 + sinP1_12 * cosP2_10);
    t2 = t24 * t2 * (sinP1_11 * cosP2_9 - cosP1_11 * sinP2_9);
    t3 = t3 * t6 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7);
    t5 = t5 * t8 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6);
    t6 = t7 * t10 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5);
    t7 = t9 * t12 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4);
    t9 = t11 * t14 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t11 = 0.85409154837974483410e-4 * t17 * sinP1_2 * t21;
    t1 = 0.39188267474540489000e-16 * t5 + 0.63392785620580202800e-16 * t26 + 0.62024077749226766608e-14 * t25 + 0.68579468080445855756e-14 * t6 + 0.69298998103305710802e-18 * t27 - 0.13515762041424872674e-20 * t2 + 0.84646657745007456248e-12 * t7 + t11 + 0.62215293442580480336e-10 * t15 * t10 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.95051142759497956078e-10 * t9 + 0.62544474889366620444e-12 * t13 * t8 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.26680465328527021382e-19 * t1 * t4 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8) - 0.10531762629681718966e-21 * t22 + 0.84254101037453751716e-20 * t28 - 0.32416765374160330978e-18 * t3 + 0.39693357216366346454e-6 * t20 * t14 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.98996974925834060304e-6 * t15 * t18 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.56882554004645010594e-8 * t17 * t12 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + 0.10065051916933019931e-7 * t13 * t16 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.49110264031835327958e-4 * t20 * t18 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    bf[0] = t37;
    bf[1] = t19 + 0.13340232664263510690e-20 * t43 - 0.52658813148408594828e-21 * t41 - 0.52827321350483502332e-17 * t39 - 0.24492667171587805626e-17 * t46 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - 0.62024077749226766604e-15 * t38 - 0.48985334343175611252e-15 * t45 + 0.18117093450479435876e-6 * t32 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.12926955415291722027e-8 * t31 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.18009314096755739431e-19 * t44 - 0.10531762629681718966e-21 * t47 + 0.61435282006476693968e-22 * t42 - 0.49499284359504079138e-19 * t40 - 0.19846678608183173230e-6 * t33 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - 0.95051142759497956076e-11 * t49 - 0.78180593611708275556e-13 * t36 - 0.70538881454172880206e-13 * t48 - t51 * t72 - 0.14220638501161252648e-8 * t34 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.12581314896166274914e-8 * t50 - 0.10369215573763413391e-10 * t35 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    bf[2] = t1;
}

static void idsbf_3_10_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t8, t9;
    t1 = LegP1[78];
    t2 = LegP2[58];
    t3 = LegP1[79];
    t4 = LegP2[55];
    t5 = LegP2[56];
    t6 = LegP1[81];
    t7 = LegP1[87];
    t8 = LegP2[65];
    t9 = LegP1[90];
    t10 = LegP2[64];
    t11 = LegP1[89];
    t12 = LegP2[63];
    t13 = LegP1[88];
    t14 = LegP2[62];
    t15 = LegP2[61];
    t16 = LegP1[86];
    t17 = LegP2[60];
    t18 = LegP1[85];
    t19 = LegP2[59];
    t20 = LegP1[84];
    t21 = LegP1[83];
    t22 = LegP2[57];
    t23 = LegP1[82];
    t24 = LegP1[80];
    t25 = t23 * t17;
    t26 = t21 * t15;
    t27 = t20 * t14;
    t28 = t18 * t12;
    t29 = t16 * t10;
    t30 = t7 * t8;
    t31 = t9 * t10;
    t32 = t11 * t12;
    t33 = t13 * t14;
    t34 = t7 * t15;
    t35 = t16 * t17;
    t36 = t35 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t37 = t18 * t19;
    t38 = t37 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t39 = t20 * t2;
    t40 = t21 * t22;
    t41 = t23 * t5;
    t42 = t3 * t19;
    t43 = t24 * t17;
    t44 = t6 * t15;
    t45 = t23 * t14;
    t46 = t21 * t12;
    t47 = t20 * t10;
    t48 = t47 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9);
    t49 = t18 * t8;
    t50 = t49 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10);
    t51 = t11 * t8;
    t52 = t51 * (-cosP1_11 * sinP2_10 + sinP1_11 * cosP2_10);
    t53 = t13 * t10;
    t54 = t53 * (sinP1_10 * cosP2_9 - cosP1_10 * sinP2_9);
    t55 = t7 * t12;
    t56 = t55 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t57 = t16 * t14;
    t58 = t57 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t59 = t18 * t15;
    t60 = t20 * t17;
    t61 = t60 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t62 = t21 * t19;
    t63 = t62 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t64 = t23 * t2;
    t65 = t64 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t66 = t6 * t22;
    t67 = t66 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t68 = t24 * t2;
    t69 = t68 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t70 = t6 * t19;
    t48 = 0.50484029096747513117e-11 * t39 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.59066314043194590352e-9 * t40 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + 0.70879576851833508422e-7 * t41 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + 0.74968783208670056976e-7 * t42 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + 0.51926429928083156353e-9 * t43 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.36781221199058902416e-11 * t44 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.27045015587543310600e-13 * t45 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.20990820921704366886e-15 * t46 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + 0.17536191246202478601e-17 * t48 + 0.16151755095186493449e-19 * t50 - 0.19228279875222016012e-21 * t52 - 0.70760069940817018922e-20 * t54 - 0.36972136544076892385e-18 * t56 - 0.24305161067236635342e-16 * t58 - 0.18781260824682854583e-14 * t59 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.16312866544867393694e-12 * t61 - 0.15415658884899687040e-10 * t63 - 0.15448112903604739014e-8 * t65 - 0.16066037419748928575e-6 * t67 - 0.59975026566936045584e-7 * t69;
    t50 = t24 * (-0.26367202588882065132e-4 * sinP1_2 * cosP2_1 + 0.76549942999980189098e-5 * cosP1_2 * sinP2_1) + 0.17028109542884482062e-2 * sinP2_1 * t1;
    t52 = -0.18010500478050894488e-2 * sinP1_1 * t4 + 0.20271558979624383406e-4 * cosP1_1 * sinP2_2 * t22;
    t54 = 0.85764287990718545180e-5 * t6;
    t56 = t54 * sinP1_3 * t4;
    t58 = 0.10915454835182360295e-4 * t1 * t2 * sinP2_3;
    t36 = t48 + 0.45075025979238850998e-13 * t38 - 0.13522507793771655300e-13 * t26 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t52 * t3 - t58 + 0.12818853250148010674e-22 * t31 * (sinP1_12 * cosP2_9 - cosP1_12 * sinP2_9) - 0.46147871700532838425e-20 * t29 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) + t50 * t5 + 0.73067463525843660848e-21 * t32 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8) - 0.38456559750444032018e-22 * t30 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) + 0.44717287677816320434e-17 * t34 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - 0.61376669361708675104e-18 * t28 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.21636012470034648480e-11 * t25 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.42928596170703667618e-15 * t36 + t56 + 0.52608573738607435808e-19 * t33 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) - 0.35699420575557169988e-9 * t70 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.88382403880860492155e-16 * t27 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t38 = t62 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t48 = t64 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t50 = t66 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t52 = t68 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t56 = t70 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t25 = t25 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t31 = t31 * (cosP1_12 * cosP2_9 + sinP1_12 * sinP2_9);
    t32 = t32 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t33 = t33 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t34 = t34 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t35 = t35 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t51 = t51 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10);
    t37 = t37 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t39 = t39 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t41 = t41 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t42 = t42 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t43 = t43 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t44 = t44 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t45 = t45 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t58 = 0.10915454835182360295e-4 * cosP2_3 * t2 + 0.17028109542884482062e-2 * cosP2_1 * t5;
    t54 = -0.18010500478050894488e-2 * cosP1_1 * t3 - t54 * cosP1_3;
    t61 = t5 * (-0.26367202588882065132e-4 * sinP1_2 * sinP2_1 - 0.76549942999980189098e-5 * cosP1_2 * cosP2_1) * t24;
    t25 = 0.59975026566936045584e-7 * t52 - 0.16066037419748928575e-6 * t50 - 0.16312866544867393694e-12 * t60 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t61 - 0.15448112903604739014e-8 * t48 + t58 * t1 + t54 * t4 - 0.70760069940817018922e-20 * t53 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9) + 0.20990820921704366886e-15 * t46 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + 0.21636012470034648480e-11 * t25 - 0.18781260824682854583e-14 * t59 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.16151755095186493449e-19 * t49 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) + 0.17536191246202478601e-17 * t47 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) - 0.36972136544076892385e-18 * t55 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + 0.35699420575557169988e-9 * t56 - 0.15415658884899687040e-10 * t38 - 0.24305161067236635342e-16 * t57 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t38 = 0.20271558979624383406e-4 * t3 * sinP1_1 * t22 * sinP2_2;
    t46 = t21 * t14 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t47 = t20 * t12 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t48 = t18 * t10 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9);
    t49 = t16 * t8 * (-cosP1_8 * sinP2_10 + sinP1_8 * cosP2_10);
    t8 = t9 * t8 * (-cosP1_12 * sinP2_10 + sinP1_12 * cosP2_10);
    t9 = t11 * t10 * (sinP1_11 * cosP2_9 - cosP1_11 * sinP2_9);
    t7 = t7 * t14 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7);
    t10 = t16 * t15 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6);
    t11 = t18 * t17 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5);
    t14 = t20 * t19 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4);
    t16 = t21 * t2 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t1 = 0.26353026673511698430e-3 * t1 * t22 * sinP2_2;
    t4 = 0.25729286397215563554e-3 * t24 * sinP1_2 * t4;
    t1 = 0.17128509872110763379e-11 * t14 + 0.18174250474829104722e-9 * t16 - 0.16793007438742092764e-5 * t3 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.23147772444987271754e-17 * t7 + 0.18781260824682854582e-15 * t10 - 0.10709826172667150997e-7 * t24 * t19 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + t4 + 0.16023566562685013341e-22 * t8 + 0.61530495600710451236e-21 * t9 - 0.16151755095186493448e-20 * t49 + 0.17171438468281467048e-13 * t11 - 0.23323134357449296542e-16 * t47 - 0.45976526498823628018e-12 * t23 * t15 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.22681464592586722693e-5 * t6 * t5 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.26197091604437664710e-3 * t3 * t5 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.31817665397109777177e-14 * t46 + 0.33611033221888083990e-19 * t13 * t12 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8) - 0.18459148680213135371e-18 * t48 - 0.69235239904110875136e-10 * t6 * t17 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + t1 + 0.20082546774686160718e-7 * t23 * t22 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2);
    bf[0] = t36;
    bf[1] = t25 - 0.70879576851833508422e-7 * t41 + 0.36781221199058902416e-11 * t44 + t38 - 0.45075025979238850998e-13 * t37 + 0.13522507793771655300e-13 * t26 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.59066314043194590352e-9 * t40 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.12818853250148010674e-22 * t31 + 0.46147871700532838425e-20 * t29 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) - 0.73067463525843660848e-21 * t32 - 0.19228279875222016012e-21 * t51 + 0.38456559750444032018e-22 * t30 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10) + 0.27045015587543310600e-13 * t45 - 0.44717287677816320434e-17 * t34 + 0.61376669361708675104e-18 * t28 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) - 0.50484029096747513117e-11 * t39 - 0.42928596170703667618e-15 * t35 - 0.52608573738607435808e-19 * t33 + 0.51926429928083156353e-9 * t43 + 0.74968783208670056976e-7 * t42 + 0.88382403880860492155e-16 * t27 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    bf[2] = t1;
}

static void idsbf_3_12_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t7, t8, t9;
    t1 = LegP1[39];
    t2 = LegP2[84];
    t3 = LegP1[40];
    t4 = LegP2[85];
    t5 = LegP1[41];
    t6 = LegP2[86];
    t7 = LegP1[42];
    t8 = LegP2[87];
    t9 = LegP1[43];
    t10 = LegP2[88];
    t11 = LegP1[44];
    t12 = LegP2[83];
    t13 = LegP2[82];
    t14 = LegP2[81];
    t15 = LegP2[80];
    t16 = LegP1[38];
    t17 = LegP2[79];
    t18 = LegP1[37];
    t19 = LegP2[78];
    t20 = LegP1[36];
    t21 = t11 * t8;
    t22 = t11 * t12;
    t23 = t9 * t13;
    t24 = t7 * t14;
    t25 = t5 * t15;
    t26 = t3 * t17;
    t27 = t18 * t13;
    t28 = t16 * t12;
    t29 = t1 * t2;
    t30 = t3 * t4;
    t31 = t5 * t6;
    t32 = t7 * t8;
    t33 = t9 * t10;
    t34 = t11 * LegP2[89];
    t35 = t11 * t4;
    t36 = t9 * t2;
    t37 = t36 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t38 = t7 * t12;
    t39 = t38 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t40 = t5 * t13;
    t41 = t40 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t42 = t3 * t14;
    t43 = t42 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t44 = t1 * t15;
    t45 = t16 * t14;
    t46 = t45 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t47 = t1 * t13;
    t48 = t47 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t49 = t3 * t12;
    t50 = t49 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t51 = t5 * t2;
    t52 = t51 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t53 = t7 * t4;
    t54 = t53 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t55 = t9 * t6;
    t56 = 0.19128205613475094579e-14;
    t57 = -0.13757405302616303123e-2 * sinP2_1 * t17 + 0.12506732093287548294e-4 * sinP2_3 * t14;
    t58 = sinP1_1 * t18;
    t59 = -0.16675642791050064392e-4 * sinP1_3 * t1 + 0.18343207070155070830e-2 * t58;
    t37 = -0.34813334216524672136e-12 * t30 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.16067692715319079446e-12 * t52 + 0.14621600370940362296e-10 * t50 + 0.76512822453900378320e-15 * t37 + 0.80338463576595397228e-13 * t39 + 0.79700856722812894080e-17 * t35 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) - 0.95641028067375472892e-16 * t32 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + t57 * t20 + t59 * t19 - 0.66417380602344078396e-19 * t34 * (-cosP1_8 * sinP2_11 + sinP1_8 * cosP2_11) - 0.53558975717730264821e-14 * t31 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t56 * t54 - 0.21253561792750105086e-17 * t33 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + 0.10527552267077060854e-8 * t43 + 0.12633062720492473024e-6 * t44 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - 0.19300512489641278231e-8 * t28 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.14036736356102747805e-8 * t48 + 0.89979079205786844900e-11 * t41 + 0.13896368992541720326e-6 * t46 - 0.25065600635897763936e-10 * t29 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t39 = 0.80981171285208160414e-9;
    t41 = 0.57843693775148686012e-11;
    t43 = 0.42847180574184211856e-13;
    t46 = 0.33474359823581415514e-15;
    t48 = 0.25504274151300126105e-16;
    t50 = -0.39850428361406447042e-18;
    t52 = 0.30572011783591784716e-4 * sinP1_2;
    t54 = 0.42426406871192851464e-24 * cosP1_2;
    t57 = t16 * t17;
    t31 = t31 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t32 = t32 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t33 = t33 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t34 = t34 * (cosP1_8 * cosP2_11 + sinP1_8 * sinP2_11);
    t35 = t35 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t36 = t36 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t38 = t38 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t40 = t40 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t44 = t44 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t45 = t45 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t47 = t47 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t49 = t49 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t51 = t51 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t59 = t57 * (t54 * cosP2_1 + t52 * sinP2_1);
    t58 = -0.27792737985083440650e-4 * t58 * t15 * sinP2_2;
    t28 = -0.34813334216524672136e-12 * t30 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) - 0.16067692715319079446e-12 * t51 - 0.14621600370940362296e-10 * t49 + 0.76512822453900378320e-15 * t36 + 0.80338463576595397228e-13 * t38 + 0.79700856722812894080e-17 * t35 - 0.95641028067375472892e-16 * t32 - 0.66417380602344078396e-19 * t34 - 0.53558975717730264821e-14 * t31 + t58 - 0.21253561792750105086e-17 * t33 + 0.10527552267077060854e-8 * t42 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.12633062720492473024e-6 * t44 - 0.19300512489641278231e-8 * t28 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.14036736356102747805e-8 * t47 + 0.89979079205786844900e-11 * t40 + t59 - 0.15440409991713022585e-6 * t27 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) - 0.13896368992541720326e-6 * t45 + 0.11580307493784766938e-6 * t26 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) - 0.25065600635897763936e-10 * t29 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t28 = t19 * (0.18343207070155070830e-2 * t18 * cosP1_1 + 0.16675642791050064392e-4 * cosP1_3 * t1) + t20 * (-0.13757405302616303123e-2 * cosP2_1 * t17 - 0.12506732093287548294e-4 * cosP2_3 * t14) + t39 * t25 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t41 * t24 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t43 * t23 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t46 * t22 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - t48 * t55 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + t50 * t21 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) - t56 * t53 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + t28;
    t29 = t1 * t12 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t30 = t3 * t2 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t6 = t7 * t6 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t8 = t9 * t8 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9);
    t10 = t11 * t10 * (-cosP1_8 * sinP2_10 + sinP1_8 * cosP2_10);
    t20 = -0.25013464186575096586e-3 * t20 * t15 * sinP2_2;
    t19 = -0.36686414140310141660e-3 * t16 * sinP1_2 * t19;
    t1 = -0.12854154172255263557e-11 * t7 * t13 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.27792737985083440654e-5 * t18 * t14 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.30572011783591784718e-3 * t18 * t17 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.53558975717730264822e-13 * t5 * t4 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) + 0.12752137075650063053e-16 * t8 + 0.76512822453900378312e-15 * t6 - 0.95641028067375472890e-16 * t11 * t2 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) + t20 - 0.27792737985083440651e-5 * t1 * t17 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.26566952240937631356e-18 * t10 - 0.10711795143546052964e-13 * t9 * t12 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.30880819983426045168e-7 * t16 * t13 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.21055104534154121706e-7 * t3 * t15 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.41776001059829606560e-11 * t30 + 0.35091840890256869508e-9 * t29 - 0.16196234257041632082e-9 * t5 * t14 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + t19;
    bf[0] = t50 * t21 * (cosP1_8 * sinP2_9 - sinP1_8 * cosP2_9) - t46 * t22 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - t43 * t23 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t41 * t24 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - t39 * t25 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.11580307493784766938e-6 * t26 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) - 0.15440409991713022585e-6 * t27 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) + t48 * t55 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + t37 + t57 * (t52 * cosP2_1 - t54 * sinP2_1) - 0.27792737985083440650e-4 * t18 * cosP1_1 * t15 * sinP2_2;
    bf[1] = t28;
    bf[2] = t1;
}

static void idsbf_3_12_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t8, t9;
    t1 = LegP1[55];
    t2 = LegP2[81];
    t3 = LegP1[58];
    t4 = LegP2[78];
    t5 = LegP1[56];
    t6 = LegP2[79];
    t7 = LegP1[63];
    t8 = LegP2[89];
    t9 = LegP2[85];
    t10 = LegP1[62];
    t11 = LegP2[84];
    t12 = LegP1[61];
    t13 = LegP2[83];
    t14 = LegP1[60];
    t15 = LegP2[82];
    t16 = LegP1[59];
    t17 = LegP2[80];
    t18 = LegP1[57];
    t19 = LegP2[86];
    t20 = LegP2[87];
    t21 = LegP1[64];
    t22 = LegP2[88];
    t23 = LegP1[65];
    t24 = t7 * t8;
    t25 = t7 * t9;
    t26 = t10 * t11;
    t27 = t12 * t13;
    t28 = t14 * t15;
    t29 = t16 * t2;
    t30 = t3 * t17;
    t31 = t18 * t2;
    t32 = t3 * t15;
    t33 = t16 * t13;
    t34 = t14 * t11;
    t35 = t12 * t9;
    t36 = t10 * t19;
    t37 = t7 * t20;
    t38 = t21 * t22;
    t39 = t38 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t40 = t23 * t8;
    t41 = t40 * (-cosP1_10 * sinP2_11 + sinP1_10 * cosP2_11);
    t23 = t23 * t9;
    t42 = t23 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7);
    t43 = t21 * t11;
    t44 = t43 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t45 = t7 * t13;
    t46 = t45 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t47 = t10 * t15;
    t48 = t12 * t2;
    t49 = t48 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t50 = t14 * t17;
    t51 = t50 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t52 = t16 * t6;
    t53 = t52 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    t54 = t5 * t15;
    t55 = t54 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4);
    t56 = t18 * t13;
    t57 = t56 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t58 = t3 * t11;
    t59 = t58 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t60 = t16 * t9;
    t61 = t60 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t62 = t14 * t19;
    t63 = t62 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t64 = t12 * t20;
    t65 = t10 * t22;
    t66 = t65 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10);
    t67 = 0.20653763294608487561e-4 * sinP1_2;
    t68 = 0.83493936722885375247e-5 * cosP1_2;
    t69 = -0.26366506333542750078e-4 * t5 * cosP1_1 * t17 * sinP2_2;
    t70 = t18 * t6 * (t67 * cosP2_1 + t68 * sinP2_1);
    t39 = -0.41182391946214379790e-21 * t24 * (-cosP1_8 * sinP2_11 + sinP1_8 * cosP2_11) + 0.20591195973107189896e-21 * t41 - 0.54439827561539712924e-13 * t61 - 0.24709435167728627872e-19 * t42 + 0.74128305503185883610e-20 * t39 - 0.48390957832479744823e-15 * t63 - 0.31756566077564832542e-15 * t46 - 0.77679101151009785588e-9 * t57 - 0.64021237212370702404e-11 * t59 - 0.54875346182032030638e-11 * t49 + 0.38107879293077799054e-14 * t27 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.49418870335457255750e-19 * t25 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.16011713988688150861e-16 * t26 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.40648404579282985654e-13 * t47 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t70 - 0.76825484654844842884e-9 * t51 + t69 + 0.81296809158565971304e-12 * t28 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.37805435806624800646e-18 * t37 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) - 0.44476983301911530166e-19 * t66 - 0.45366522967949760782e-17 * t64 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) - 0.26686189981146918100e-17 * t44 - 0.10986044305642812533e-6 * t53 - 0.95878204849246363926e-7 * t55;
    t41 = t52 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1);
    t42 = t54 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4);
    t44 = t56 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t46 = t58 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t49 = t60 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t51 = t62 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t52 = t65 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t24 = t24 * (cosP1_8 * cosP2_11 + sinP1_8 * sinP2_11);
    t25 = t25 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t26 = t26 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t27 = t27 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t28 = t28 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t53 = t29 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t54 = t30 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t55 = t31 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t56 = t33 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t57 = t34 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t58 = t35 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t59 = t36 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t37 = t37 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t38 = t38 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t40 = t40 * (cosP1_10 * cosP2_11 + sinP1_10 * sinP2_11);
    t24 = -0.18146609187179904310e-14 * t58 - 0.24195478916239872412e-16 * t59 - 0.13316417340173106102e-8 * t32 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.37805435806624800646e-18 * t37 - 0.74128305503185883610e-20 * t38 - 0.20591195973107189896e-21 * t40 + 0.10986044305642812533e-6 * t41 - 0.95878204849246363926e-7 * t42 - 0.77679101151009785588e-9 * t44 - 0.64021237212370702404e-11 * t46 - 0.54439827561539712924e-13 * t49 - 0.48390957832479744823e-15 * t51 - 0.44476983301911530166e-19 * t52 + 0.16462603854609609190e-9 * t53 + 0.32266703555034834012e-7 * t54 - 0.13183253166771375040e-6 * t55 - 0.13871268062680318855e-10 * t56 - 0.15243151717231119620e-12 * t57 + 0.76825484654844842884e-9 * t50 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.45366522967949760782e-17 * t64 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) - 0.41182391946214379790e-21 * t24 + 0.49418870335457255750e-19 * t25 + 0.16011713988688150861e-16 * t26 + 0.38107879293077799054e-14 * t27 + 0.81296809158565971304e-12 * t28;
    t23 = t5 * (0.11390330736090468035e-2 * cosP1_1 * t4 - 0.26366506333542750078e-4 * sinP1_1 * sinP2_2 * t17) + t6 * (t18 * (-t68 * cosP2_1 + t67 * sinP2_1) - 0.13051420635103661288e-2 * cosP2_1 * t1) + 0.24709435167728627872e-19 * t23 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) + 0.26686189981146918100e-17 * t43 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + 0.31756566077564832542e-15 * t45 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + 0.40648404579282985654e-13 * t47 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.54875346182032030638e-11 * t48 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t24 - 0.11864927850094237535e-4 * t1 * t2 * cosP2_3 + 0.15819903800125650048e-4 * t3 * cosP1_3 * t4;
    t24 = t21 * t9 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7);
    t25 = t7 * t11 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6);
    t26 = t10 * t13 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5);
    t27 = t12 * t15 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4);
    t28 = t14 * t2 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t37 = t16 * t17 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2);
    t38 = t3 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    t40 = t5 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t17 = 0.26366506333542750076e-3 * t1 * t17 * sinP2_2;
    t41 = 0.25311846080201040076e-3 * t18 * sinP1_2 * t4;
    t7 = -0.41182391946214379790e-21 * t21 * t8 * (-cosP1_9 * sinP2_11 + sinP1_9 * cosP2_11) + 0.49418870335457255744e-19 * t24 - 0.18291782060677343544e-11 * t16 * t11 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.92190581585813811465e-8 * t37 + 0.15380462027899937545e-5 * t38 - 0.29651322201274353448e-19 * t7 * t22 * (-cosP1_8 * sinP2_10 + sinP1_8 * cosP2_10) - 0.19356383132991897930e-15 * t12 * t19 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8) - 0.21306267744276969759e-7 * t18 * t15 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) + t41 + 0.19053939646538899524e-14 * t26 + 0.32518723663426388523e-12 * t27 + 0.10674475992458767241e-16 * t25 - 0.18146609187179904308e-13 * t14 * t9 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) - 0.19419775287752446396e-9 * t3 * t13 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.26102841270207322578e-3 * t5 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.54875346182032030635e-10 * t28 + t17 - 0.22683261483974880388e-17 * t10 * t20 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9) - 0.23729855700188475072e-5 * t40;
    bf[0] = t1 * (-0.13051420635103661288e-2 * sinP2_1 * t6 + 0.11864927850094237535e-4 * sinP2_3 * t2) + t4 * (0.11390330736090468035e-2 * sinP1_1 * t5 - 0.15819903800125650048e-4 * sinP1_3 * t3) + 0.16462603854609609190e-9 * t29 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.32266703555034834012e-7 * t30 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.13183253166771375040e-6 * t31 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.13316417340173106102e-8 * t32 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.13871268062680318855e-10 * t33 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.15243151717231119620e-12 * t34 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.18146609187179904310e-14 * t35 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + 0.24195478916239872412e-16 * t36 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + t39;
    bf[1] = t23;
    bf[2] = t7;
}

static void idsbf_3_12_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t8, t9;
    t1 = LegP1[60];
    t2 = LegP2[80];
    t3 = LegP1[59];
    t4 = LegP2[79];
    t5 = LegP1[56];
    t6 = LegP2[82];
    t7 = LegP1[58];
    t8 = LegP2[84];
    t9 = LegP2[85];
    t10 = LegP2[86];
    t11 = LegP1[61];
    t12 = LegP2[87];
    t13 = LegP1[62];
    t14 = LegP2[88];
    t15 = LegP1[63];
    t16 = LegP2[89];
    t17 = LegP1[65];
    t18 = LegP1[64];
    t19 = LegP2[90];
    t20 = LegP2[83];
    t21 = LegP2[81];
    t22 = LegP1[57];
    t23 = LegP1[55];
    t24 = LegP2[78];
    t25 = t11 * t9;
    t26 = t13 * t10;
    t27 = t15 * t12;
    t28 = t18 * t14;
    t29 = t17 * t16;
    t30 = t17 * t9;
    t31 = t18 * t8;
    t32 = t15 * t20;
    t33 = t13 * t6;
    t34 = t11 * t21;
    t35 = t1 * t2;
    t36 = t3 * t4;
    t37 = t5 * t6;
    t38 = t37 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4);
    t39 = t7 * t8;
    t40 = t3 * t9;
    t41 = t1 * t10;
    t42 = t11 * t12;
    t43 = t13 * t14;
    t44 = t15 * t16;
    t45 = t17 * t12;
    t46 = t18 * t10;
    t47 = t46 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t48 = t18 * t19;
    t49 = t48 * (-cosP1_9 * sinP2_12 + sinP1_9 * cosP2_12);
    t50 = t15 * t9;
    t51 = t50 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t52 = t13 * t8;
    t53 = t52 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t54 = t11 * t20;
    t55 = t1 * t6;
    t56 = t55 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t57 = t3 * t21;
    t58 = t57 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t59 = t7 * t2;
    t60 = t59 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t61 = t22 * t21;
    t62 = t61 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t63 = t7 * t6;
    t64 = t63 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t65 = t1 * t8;
    t66 = t65 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t67 = t22 * (0.39399236558381956071e-4 * sinP1_2 * cosP2_1 - 0.10745246334104169837e-4 * cosP1_2 * sinP2_1) - 0.18911633548023338915e-2 * sinP2_1 * t23;
    t68 = 0.27937640468670841578e-2 * sinP1_1 * t24 - 0.21490492668208339674e-4 * cosP1_1 * sinP2_2 * t2;
    t69 = 0.71634975560694465592e-5 * t23 * t21;
    t70 = t69 * sinP2_3;
    t71 = 0.17908743890173616396e-4 * t7;
    t72 = t71 * sinP1_3 * t24;
    t38 = t4 * t67 + t5 * t68 - 0.36251760906896137914e-17 * t26 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.53706312454660945063e-19 * t27 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) - 0.88332750747797607001e-21 * t28 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) - 0.17666550149559521402e-22 * t29 * (-cosP1_10 * sinP2_11 + sinP1_10 * cosP2_11) - 0.42399720358942851366e-19 * t30 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) - 0.44307707775095279674e-17 * t31 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - 0.50752465269654593082e-15 * t32 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.62121017490057221931e-13 * t33 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.79514902387273244075e-11 * t34 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.10436330938329613285e-8 * t35 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.13775956838595089535e-6 * t36 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) - 0.32561352527588393446e-7 * t38 + t70 - t72;
    t38 = t38 + 0.28989808162026703566e-11 * t39 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.59162873800054497080e-13 * t40 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.98604789666757495128e-15 * t41 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + 0.16434131611126249189e-16 * t42 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + 0.30209800755746781594e-18 * t43 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + 0.67132890568326181328e-20 * t44 * (-cosP1_8 * sinP2_11 + sinP1_8 * cosP2_11) + 0.27206487230321662958e-20 * t45 * (sinP1_10 * cosP2_9 - cosP1_10 * sinP2_9) + 0.19291872763318997370e-18 * t47 + 0.20610975174486108300e-21 * t49 + 0.16111893736398283520e-16 * t51 + 0.15153236059082585648e-14 * t53 + 0.15530254372514305482e-12 * t54 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.16896916757295564366e-10 * t56 + 0.19083576572945578577e-8 * t58 + 0.21916294970492187898e-6 * t60 + 0.54268920879313989082e-7 * t62 + 0.20872661876659226570e-9 * t64 - 0.13804670553346049318e-13 * t66 + 0.24651197416689373782e-15 * t25 * (cosP1_6 * sinP2_7 - sinP1_6 * cosP2_7);
    t39 = t39 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t40 = t40 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t41 = t41 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t42 = t42 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t44 = t44 * (cosP1_8 * cosP2_11 + sinP1_8 * sinP2_11);
    t47 = t50 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t49 = t52 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t50 = t54 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t51 = t55 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t52 = t57 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t53 = t59 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t54 = t61 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t55 = t63 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t31 = t31 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t32 = t32 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t34 = t34 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t35 = 0.19291872763318997370e-18 * t46 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + 0.20610975174486108300e-21 * t48 * (cosP1_9 * cosP2_12 + sinP1_9 * sinP2_12) + 0.10436330938329613285e-8 * t35 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.13775956838595089535e-6 * t36 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) - 0.32561352527588393446e-7 * t37 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + 0.28989808162026703566e-11 * t39 + 0.59162873800054497080e-13 * t40 + 0.98604789666757495128e-15 * t41 + 0.16434131611126249189e-16 * t42 + 0.30209800755746781594e-18 * t43 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) + 0.67132890568326181328e-20 * t44 + 0.16111893736398283520e-16 * t47 + 0.15153236059082585648e-14 * t49 + 0.15530254372514305482e-12 * t50 + 0.16896916757295564366e-10 * t51 + 0.19083576572945578577e-8 * t52 + 0.21916294970492187898e-6 * t53 - 0.54268920879313989082e-7 * t54 - 0.20872661876659226570e-9 * t55;
    t36 = t22 * (0.10745246334104169837e-4 * cosP1_2 * cosP2_1 + 0.39399236558381956071e-4 * sinP1_2 * sinP2_1) - 0.18911633548023338915e-2 * cosP2_1 * t23;
    t37 = -0.21490492668208339674e-4 * sinP1_1 * sinP2_2 * t2 + 0.27937640468670841578e-2 * cosP1_1 * t24;
    t25 = t4 * t36 + t5 * t37 + 0.27206487230321662958e-20 * t45 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9) + 0.13804670553346049318e-13 * t65 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.24651197416689373782e-15 * t25 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.36251760906896137914e-17 * t26 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.53706312454660945063e-19 * t27 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) + 0.88332750747797607001e-21 * t28 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10) + 0.17666550149559521402e-22 * t29 * (cosP1_10 * cosP2_11 + sinP1_10 * sinP2_11) + 0.42399720358942851366e-19 * t30 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) + 0.44307707775095279674e-17 * t31 + 0.50752465269654593082e-15 * t32 + 0.62121017490057221931e-13 * t33 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.79514902387273244075e-11 * t34 + t35 - t69 * cosP2_3 + t71 * cosP1_3 * t24;
    t26 = t1 * t9 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t27 = t11 * t10 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t12 = t13 * t12 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9);
    t14 = t15 * t14 * (-cosP1_8 * sinP2_10 + sinP1_8 * cosP2_10);
    t16 = t18 * t16 * (-cosP1_9 * sinP2_11 + sinP1_9 * cosP2_11);
    t10 = t17 * t10 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8);
    t17 = t17 * t19 * (-cosP1_10 * sinP2_12 + sinP1_10 * cosP2_12);
    t9 = t18 * t9 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7);
    t13 = t13 * t20 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5);
    t18 = -0.23639541935029173642e-3 * t23 * t2 * sinP2_2;
    t19 = -0.46562734114451402634e-3 * t22 * sinP1_2 * t24;
    t1 = -0.18270887497075653509e-13 * t13 - 0.78883831733405996106e-14 * t26 - 0.38572679148066250700e-5 * t7 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.25444768763927438104e-9 * t1 * t21 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.16836928954536206277e-15 * t15 * t8 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) - 0.12325598708344686891e-15 * t27 - 0.31308992814988839852e-7 * t3 * t2 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.54268920879313989082e-8 * t22 * t6 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4) - 0.19334272483677940223e-17 * t12 - 0.21121145946619455458e-11 * t11 * t6 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.41414011660038147952e-12 * t3 * t8 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.33566445284163090662e-19 * t14 - 0.19291872763318997370e-19 * t10 + t19 - 0.16959888143577140546e-17 * t9 + 0.13024541011035357379e-5 * t5 * t21 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.34384788269133343480e-3 * t5 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.70666200598238085610e-21 * t16 - 0.20610975174486108302e-22 * t17 + t18;
    bf[0] = t38;
    bf[1] = t25;
    bf[2] = t1;
}

static void idsbf_3_12_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t8, t9;
    t1 = LegP1[86];
    t2 = LegP2[87];
    t3 = LegP1[87];
    t4 = LegP2[88];
    t5 = LegP1[88];
    t6 = LegP2[89];
    t7 = LegP1[89];
    t8 = LegP2[90];
    t9 = LegP2[86];
    t10 = LegP2[85];
    t11 = LegP2[84];
    t12 = LegP2[83];
    t13 = LegP1[85];
    t14 = LegP2[82];
    t15 = LegP1[84];
    t16 = LegP2[81];
    t17 = LegP1[83];
    t18 = LegP2[80];
    t19 = LegP1[82];
    t20 = LegP2[79];
    t21 = LegP1[79];
    t22 = LegP1[81];
    t23 = LegP1[78];
    t24 = LegP2[78];
    t25 = LegP1[80];
    t26 = t3 * t8;
    t27 = t1 * t10;
    t28 = t19 * t16;
    t29 = t22 * t14;
    t30 = t13 * t9;
    t31 = t5 * t2;
    t32 = t3 * t9;
    t33 = t13 * t11;
    t34 = t25 * t16;
    t35 = t17 * t11;
    t36 = t15 * t10;
    t37 = t36 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t38 = t15 * t12;
    t39 = t38 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t40 = t17 * t14;
    t41 = t40 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t42 = t22 * t18;
    t43 = t42 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t44 = t1 * t2;
    t45 = t3 * t4;
    t46 = t45 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t47 = t5 * t6;
    t48 = t47 * (-cosP1_10 * sinP2_11 + sinP1_10 * cosP2_11);
    t49 = t7 * t8;
    t50 = LegP1[90] * t2;
    t51 = t7 * t9;
    t52 = t5 * t10;
    t53 = t3 * t11;
    t54 = t1 * t12;
    t55 = t13 * t14;
    t56 = t15 * t16;
    t57 = t56 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t58 = t17 * t18;
    t59 = t58 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t60 = t19 * t20;
    t61 = t60 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    t62 = t21 * t14;
    t63 = t22 * t11;
    t64 = t63 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t65 = t19 * t10;
    t66 = t65 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t67 = t17 * t9;
    t68 = t67 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t69 = t15 * t2;
    t70 = t69 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9);
    t71 = t13 * t4;
    t72 = t71 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10);
    t73 = t1 * t6;
    t74 = t73 * (-cosP1_8 * sinP2_11 + sinP1_8 * cosP2_11);
    t75 = 0.25587580554351352734e-4 * sinP1_2;
    t76 = 0.18465264317573141145e-5 * cosP1_2;
    t77 = t25 * t20 * (t75 * cosP2_1 + t76 * sinP2_1);
    t78 = -0.20575580239581500136e-4 * t21 * cosP1_1 * t18 * sinP2_2;
    t57 = 0.15425963820517268446e-17 * t70 + 0.20297320816470090060e-21 * t74 - 0.40594641632940180122e-19 * t52 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) - 0.43977528435685195128e-21 * t51 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8) - 0.76129723016174566684e-11 * t57 - 0.59476346106386380226e-13 * t55 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.16914434013725075049e-19 * t72 - 0.48591786034629395604e-15 * t54 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.42421400506422488226e-17 * t53 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t78 + t77 - 0.13189474512552243678e-6 * t61 - 0.21982457520920406130e-7 * t62 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4) - 0.99920261458729118762e-9 * t59 + 0.13216965801419195604e-13 * t66 + 0.14577535810388818681e-15 * t68 - 0.56381446712416916832e-23 * t50 * (sinP1_12 * cosP2_9 - cosP1_12 * sinP2_9) - 0.46984538927014097360e-24 * t49 * (-cosP1_11 * sinP2_12 + sinP1_11 * cosP2_12) + 0.95162153770218208340e-12 * t64 + 0.28190723356208458416e-23 * t26 * (-cosP1_9 * sinP2_12 + sinP1_9 * cosP2_12);
    t59 = -0.18106510610831720120e-2 * sinP2_1 * t20 + 0.68585267465271667121e-5 * sinP2_3 * t16;
    t61 = 0.18860948552949708458e-2 * sinP1_1 * t21 - 0.17146316866317916780e-4 * sinP1_3 * t22;
    t37 = t57 - 0.84572170068625375246e-21 * t46 - 0.13216965801419195603e-13 * t35 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.48713569959528216146e-18 * t27 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) - 0.34708418596163854004e-17 * t30 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.51419879401724228152e-19 * t44 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) - 0.23601724645391420724e-15 * t37 + 0.14577535810388818680e-13 * t39 + 0.51958535958539141758e-7 * t34 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.42632644889057757339e-9 * t28 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.71942588250284965508e-7 * t43 + 0.19984052291745823754e-9 * t29 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.84842801012844976450e-16 * t33 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.16914434013725075051e-22 * t48 + 0.24980065364682279692e-11 * t41 + t59 * t23 + t61 * t24 + 0.11276289342483383366e-22 * t31 * (sinP1_10 * cosP2_9 - cosP1_10 * sinP2_9) + 0.26386517061411117076e-20 * t32 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t39 = t65 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t41 = t67 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t43 = t71 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t46 = t73 * (cosP1_8 * cosP2_11 + sinP1_8 * sinP2_11);
    t26 = t26 * (cosP1_9 * cosP2_12 + sinP1_9 * sinP2_12);
    t31 = t31 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9);
    t42 = t42 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2);
    t34 = t34 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t35 = t35 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t44 = t44 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t45 = t45 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t47 = t47 * (cosP1_10 * cosP2_11 + sinP1_10 * sinP2_11);
    t48 = t49 * (cosP1_11 * cosP2_12 + sinP1_11 * sinP2_12);
    t49 = t50 * (cosP1_12 * cosP2_9 + sinP1_12 * sinP2_9);
    t50 = t51 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t51 = t52 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t52 = t53 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t27 = t27 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t29 = t29 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t30 = t30 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t53 = t25 * (-t76 * cosP2_1 + t75 * sinP2_1) - 0.18106510610831720120e-2 * cosP2_1 * t23;
    t57 = -0.20575580239581500136e-4 * sinP1_1 * sinP2_2 * t18 + 0.18860948552949708458e-2 * cosP1_1 * t24;
    t59 = 0.68585267465271667121e-5 * t23 * t16 * cosP2_3;
    t26 = 0.15425963820517268446e-17 * t69 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) + 0.20297320816470090060e-21 * t46 + 0.76129723016174566684e-11 * t56 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.59476346106386380226e-13 * t55 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.16914434013725075049e-19 * t43 + 0.48591786034629395604e-15 * t54 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + 0.13189474512552243678e-6 * t60 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) - 0.21982457520920406130e-7 * t62 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + 0.17146316866317916780e-4 * t22 * cosP1_3 * t24 + 0.99920261458729118762e-9 * t58 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.13216965801419195604e-13 * t39 - t59 + 0.14577535810388818681e-15 * t41 + 0.95162153770218208340e-12 * t63 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t53 * t20 + t57 * t21 + 0.28190723356208458416e-23 * t26 + 0.11276289342483383366e-22 * t31;
    t31 = t21 * t16 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t39 = t25 * t14 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4);
    t41 = t19 * t11 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t43 = t17 * t10 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t46 = t15 * t9 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t53 = t13 * t2 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9);
    t4 = t1 * t4 * (-cosP1_8 * sinP2_10 + sinP1_8 * cosP2_10);
    t8 = t5 * t8 * (-cosP1_10 * sinP2_12 + sinP1_10 * cosP2_12);
    t2 = t7 * t2 * (sinP1_11 * cosP2_9 - cosP1_11 * sinP2_9);
    t5 = t5 * t9 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8);
    t7 = t3 * t10 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7);
    t9 = 0.34292633732635833560e-3 * t25 * sinP1_2 * t24;
    t10 = 0.24690696287497800164e-3 * t23 * t18 * sinP2_2;
    t1 = 0.51419879401724228154e-18 * t53 + 0.33937120405137990580e-16 * t1 * t11 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) + 0.11276289342483383367e-22 * t2 + 0.10148660408235045031e-21 * t3 * t6 * (-cosP1_9 * sinP2_11 + sinP1_9 * cosP2_11) + 0.23741054122594038618e-5 * t22 * t20 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + t10 + 0.24356784979764108072e-18 * t7 - 0.30177517684719533534e-3 * t21 * t20 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.21147145282270712964e-12 * t41 + 0.71371615327663656264e-12 * t15 * t14 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.15987241833396659003e-7 * t19 * t18 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.39968104583491647509e-8 * t39 + 0.33042414503547989012e-14 * t43 + 0.48591786034629395604e-14 * t13 * t12 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.41650102315396624804e-16 * t46 + 0.10658161222264439335e-9 * t17 * t16 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.11430877910878611186e-5 * t31 + 0.18793815570805638943e-23 * t8 + 0.17591011374274078052e-20 * t5 + 0.67657736054900300194e-20 * t4 + t9;
    bf[0] = t37;
    bf[1] = t26 + 0.26386517061411117076e-20 * t32 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + 0.84842801012844976450e-16 * t33 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.14577535810388818680e-13 * t38 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.24980065364682279692e-11 * t40 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.71942588250284965508e-7 * t42 - 0.51958535958539141758e-7 * t34 + 0.13216965801419195603e-13 * t35 + 0.23601724645391420724e-15 * t36 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.51419879401724228152e-19 * t44 + 0.84572170068625375246e-21 * t45 + 0.16914434013725075051e-22 * t47 + 0.46984538927014097360e-24 * t48 + 0.56381446712416916832e-23 * t49 + 0.43977528435685195128e-21 * t50 + 0.40594641632940180122e-19 * t51 + 0.42421400506422488226e-17 * t52 + 0.48713569959528216146e-18 * t27 + 0.42632644889057757339e-9 * t28 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.19984052291745823754e-9 * t29 + 0.34708418596163854004e-17 * t30;
    bf[2] = t1;
}

static void idsbf_3_12_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t9;
    t1 = LegP1[81];
    t2 = LegP2[78];
    t3 = LegP1[78];
    t4 = LegP2[81];
    t5 = LegP1[79];
    t6 = LegP2[79];
    t7 = LegP1[87];
    t8 = LegP2[90];
    t9 = LegP1[80];
    t10 = LegP2[83];
    t11 = LegP1[86];
    t12 = LegP2[85];
    t13 = LegP1[82];
    t14 = LegP2[82];
    t15 = LegP1[85];
    t16 = LegP2[86];
    t17 = LegP1[88];
    t18 = LegP2[87];
    t19 = LegP2[84];
    t20 = LegP1[84];
    t21 = LegP1[83];
    t22 = LegP2[80];
    t23 = LegP1[89];
    t24 = LegP2[88];
    t25 = LegP1[90];
    t26 = LegP2[89];
    t27 = t13 * t12;
    t28 = t21 * t16;
    t29 = t20 * t18;
    t30 = t15 * t24;
    t31 = t11 * t26;
    t32 = t7 * t8;
    t33 = t9 * t10;
    t34 = t33 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t35 = t11 * t12;
    t36 = t13 * t4;
    t37 = t36 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t38 = t1 * t14;
    t39 = t38 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t40 = t15 * t16;
    t41 = t40 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t42 = t17 * t18;
    t43 = t42 * (sinP1_10 * cosP2_9 - cosP1_10 * sinP2_9);
    t44 = t7 * t16;
    t45 = t44 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t46 = t15 * t19;
    t47 = t46 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t48 = t20 * t10;
    t49 = t48 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t50 = t21 * t14;
    t51 = t1 * t22;
    t52 = t51 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2);
    t53 = t23 * t24;
    t54 = t53 * (cosP1_11 * sinP2_10 - sinP1_11 * cosP2_10);
    t55 = t13 * t10;
    t56 = t55 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t57 = t25 * t26;
    t58 = t57 * (cosP1_12 * sinP2_11 - sinP1_12 * cosP2_11);
    t59 = t9 * t4;
    t60 = t59 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3);
    t61 = t21 * t19;
    t62 = t20 * t12;
    t63 = t11 * t18;
    t64 = t7 * t24;
    t65 = t17 * t26;
    t66 = t23 * t8;
    t67 = t25 * t18;
    t68 = t23 * t16;
    t69 = t17 * t12;
    t70 = t69 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7);
    t71 = t7 * t19;
    t72 = t71 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t73 = t11 * t10;
    t74 = t73 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t75 = t15 * t14;
    t76 = t20 * t4;
    t77 = t76 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t78 = t21 * t22;
    t79 = t78 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t80 = t13 * t6;
    t81 = t80 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    t82 = t5 * t14;
    t83 = t82 * (-cosP1_1 * sinP2_4 + sinP1_1 * cosP2_4);
    t84 = t1 * t19;
    t85 = t84 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t86 = 0.82840270104238271678e-5 * t1;
    t87 = t86 * sinP1_3 * t2;
    t88 = 0.15739651319805271618e-4 * t3 * t4;
    t89 = t88 * sinP2_3;
    t34 = -0.11669609904018469032e-17 * t41 + 0.91292866596062852964e-21 * t43 + 0.32687982924421481878e-19 * t30 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + 0.57890417759150444408e-19 * t45 + 0.86205742282965234429e-9 * t34 - 0.17688302448280022664e-22 * t54 + 0.10919394022508929694e-11 * t50 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.86481600658270723180e-7 * t60 - 0.37516739041546470030e-7 * t52 + 0.34469477993802452644e-17 * t29 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + 0.41530082305477492730e-17 * t35 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.31302012448426011048e-15 * t47 - t89 + 0.39910065871743164088e-15 * t28 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + 0.22302683869503532870e-13 * t49 + 0.49488481680961523468e-13 * t27 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.47905819130758394710e-24 * t58 + t87 - 0.55631439019940231282e-9 * t39 + 0.44751405194148457333e-23 * t32 * (-cosP1_9 * sinP2_12 + sinP1_9 * cosP2_12) + 0.35139581643753093022e-21 * t31 * (-cosP1_8 * sinP2_11 + sinP1_8 * cosP2_11) - 0.70343885702899631278e-10 * t37 - 0.35919059284568847676e-11 * t56;
    t37 = 0.19600007906662775078e-2 * t3;
    t39 = t9 * (-0.18479752561714691386e-5 * cosP1_2 * sinP2_1 - 0.19690494970930481498e-4 * sinP1_2 * cosP2_1) + t37 * sinP2_1;
    t41 = 0.26508886433356246936e-4 * cosP1_1 * sinP2_2 * t22 - 0.17396456721890037051e-2 * sinP1_1 * t2;
    t34 = t34 - 0.74528601067680978686e-18 * t72 + 0.11682602194187448569e-6 * t83 + t6 * t39 + t41 * t5 - 0.77828530772432099706e-22 * t64 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) - 0.16538562789141821189e-23 * t67 * (sinP1_12 * cosP2_9 - cosP1_12 * sinP2_9) - 0.76059700527604097452e-24 * t65 * (-cosP1_10 * sinP2_11 + sinP1_10 * cosP2_11) + 0.64366954237947375040e-11 * t85 - 0.88441512241400113317e-26 * t66 * (-cosP1_11 * sinP2_12 + sinP1_11 * cosP2_12) - 0.31928052697394531274e-14 * t75 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.16172706431686772375e-15 * t62 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + 0.37171916072414609082e-7 * t81 - 0.58691273340798770714e-16 * t74 - 0.11440794023547518659e-21 * t68 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8) + 0.13792918765274437509e-9 * t79 - 0.23664321411010064354e-13 * t61 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.22988197942124062508e-12 * t77 - 0.90709152615269612222e-20 * t63 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) - 0.89891953042159075172e-20 * t70;
    t39 = t84 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t27 = t27 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t28 = t28 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t29 = t29 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t30 = t30 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t31 = t31 * (cosP1_8 * cosP2_11 + sinP1_8 * sinP2_11);
    t41 = t42 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9);
    t42 = t44 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t43 = t46 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t44 = t59 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3);
    t45 = t61 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t46 = t62 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t47 = t63 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t49 = t64 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t52 = t65 * (cosP1_10 * cosP2_11 + sinP1_10 * sinP2_11);
    t54 = t66 * (cosP1_11 * cosP2_12 + sinP1_11 * sinP2_12);
    t56 = t67 * (cosP1_12 * cosP2_9 + sinP1_12 * sinP2_9);
    t58 = t69 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t59 = t71 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t35 = t35 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t36 = t36 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t38 = t38 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t40 = t40 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t55 = t55 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t53 = t53 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10);
    t57 = t57 * (cosP1_12 * cosP2_11 + sinP1_12 * sinP2_11);
    t37 = t9 * (-0.19690494970930481498e-4 * sinP1_2 * sinP2_1 + 0.18479752561714691386e-5 * cosP1_2 * cosP2_1) + t37 * cosP2_1;
    t60 = -0.17396456721890037051e-2 * cosP1_1 * t2 + 0.26508886433356246936e-4 * sinP1_1 * sinP2_2 * t22;
    t27 = 0.91292866596062852964e-21 * t41 + 0.32687982924421481878e-19 * t30 + 0.57890417759150444408e-19 * t42 + 0.11682602194187448569e-6 * t82 * (cosP1_1 * cosP2_4 + sinP1_1 * sinP2_4) + t37 * t6 + t60 * t5 + 0.64366954237947375040e-11 * t39 + 0.34469477993802452644e-17 * t29 + 0.31302012448426011048e-15 * t43 + 0.39910065871743164088e-15 * t28 + 0.49488481680961523468e-13 * t27 - t86 * cosP1_3 * t2 + t88 * cosP2_3 + 0.31928052697394531274e-14 * t75 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.37171916072414609082e-7 * t80 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + 0.44751405194148457333e-23 * t32 * (cosP1_9 * cosP2_12 + sinP1_9 * sinP2_12) + 0.35139581643753093022e-21 * t31 + 0.58691273340798770714e-16 * t73 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - 0.13792918765274437509e-9 * t78 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.22988197942124062508e-12 * t76 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t27 = t27 + 0.22302683869503532870e-13 * t48 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.10919394022508929694e-11 * t50 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.37516739041546470030e-7 * t51 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) + 0.86481600658270723180e-7 * t44 + 0.23664321411010064354e-13 * t45 + 0.16172706431686772375e-15 * t46 + 0.90709152615269612222e-20 * t47 + 0.77828530772432099706e-22 * t49 + 0.76059700527604097452e-24 * t52 + 0.88441512241400113317e-26 * t54 + 0.16538562789141821189e-23 * t56 + 0.11440794023547518659e-21 * t68 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8) + 0.89891953042159075172e-20 * t58 + 0.74528601067680978686e-18 * t59 + 0.41530082305477492730e-17 * t35 - 0.70343885702899631278e-10 * t36 + 0.55631439019940231282e-9 * t38 + 0.11669609904018469032e-17 * t40 + 0.35919059284568847676e-11 * t55 + 0.17688302448280022664e-22 * t53 + 0.47905819130758394710e-24 * t57 + 0.86205742282965234429e-9 * t33 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t28 = t7 * t12 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7);
    t29 = t11 * t19 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6);
    t30 = t20 * t14 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4);
    t31 = t5 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    t32 = t1 * t10 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t25 = t25 * t24 * (cosP1_12 * sinP2_10 - sinP1_12 * cosP2_10);
    t33 = t21 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t35 = t13 * t22 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2);
    t1 = t1 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    t6 = t9 * t14 * (-cosP1_2 * sinP2_4 + sinP1_2 * cosP2_4);
    t13 = t13 * t19 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t12 = t21 * t12 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t14 = t20 * t16 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t19 = t15 * t18 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9);
    t3 = 0.34461552363363121016e-3 * t3 * t22 * sinP2_2;
    t2 = 0.24852081031271481502e-3 * t9 * sinP1_2 * t2;
    t1 = -0.39552459338549993076e-18 * t28 + 0.46895923801933087536e-8 * t35 - 0.79385101387880741704e-22 * t23 * t18 * (sinP1_11 * cosP2_9 - cosP1_11 * sinP2_9) - 0.33466268232145802878e-22 * t7 * t26 * (-cosP1_9 * sinP2_11 + sinP1_9 * cosP2_11) + 0.82757512591646625028e-11 * t33 + 0.11895013143172674907e-5 * t1 - 0.30153858317942730892e-3 * t31 - 0.40683095631044052126e-24 * t17 * t8 * (-cosP1_10 * sinP2_12 + sinP1_10 * cosP2_12) - 0.23476509336319508286e-14 * t15 * t10 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) - 0.16689431705982069386e-7 * t6 + 0.14740252040233352219e-23 * t25 - 0.44344517635270182322e-16 * t14 - 0.31302012448426011050e-16 * t29 - 0.52627652508318585826e-20 * t17 * t16 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8) - 0.32687982924421481878e-20 * t11 * t24 * (-cosP1_8 * sinP2_10 + sinP1_8 * cosP2_10) - 0.24214848184315802489e-5 * t5 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.11494098971062031257e-9 * t32 - 0.12132660025009921883e-12 * t30 - 0.58221743154072380550e-14 * t12 - 0.80458692797434218798e-12 * t13 + t2 - 0.36283661046107844888e-18 * t19 + t3;
    bf[0] = t34;
    bf[1] = t27;
    bf[2] = t1;
}

static void idsbf_4_0_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2;
    t1 = 0.56999680420291245884e-3 * LegP1[9];
    t2 = -0.34199808252174747534e-2 * LegP1[7];
    bf[0] = t2 * cosP1_1 + t1 * cosP1_3;
    bf[1] = t2 * sinP1_1 - t1 * sinP1_3;
    bf[2] = -0.13679923300869899013e-1 * LegP1[6];
}

static void idsbf_4_0_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3;
    t1 = -0.91039400082525006364e-5 * LegP1[20];
    t2 = 0.18207880016505001274e-4 * LegP1[18];
    t3 = -0.30589238427728402142e-2 * LegP1[16];
    bf[0] = t3 * cosP1_1 + t2 * cosP1_3 + t1 * cosP1_5;
    bf[1] = t3 * sinP1_1 - t2 * sinP1_3 + t1 * sinP1_5;
    bf[2] = 0.18207880016505001272e-4 * LegP1[19] * cosP1_4 + 0.15294619213864201070e-1 * LegP1[15];
}

static void idsbf_4_2_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5;
    t1 = LegP1[2];
    t2 = LegP2[5];
    t3 = LegP2[4];
    t4 = LegP2[3];
    t5 = -0.51705250012199395827e-2 * cosT1 * t3;
    bf[0] = t1 * (t2 * (-0.25852625006099697910e-2 * sinP1_1 * sinP2_2 + 0.38778937509149546866e-2 * cosP1_1 * cosP2_2) - 0.77557875018299093732e-2 * cosP1_1 * t4) + t5 * cosP2_1;
    bf[1] = t1 * (t2 * (-0.25852625006099697910e-2 * cosP1_1 * sinP2_2 - 0.38778937509149546866e-2 * cosP2_2 * sinP1_1) - 0.77557875018299093732e-2 * sinP1_1 * t4) + t5 * sinP2_1;
    bf[2] = 0.51705250012199395833e-2 * t1 * t3 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.15511575003659818747e-1 * cosT1 * t4;
}

static void idsbf_4_2_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = LegP1[7];
    t2 = LegP2[5];
    t3 = LegP1[9];
    t4 = LegP1[6];
    t5 = LegP2[4];
    t6 = LegP2[3];
    t7 = LegP1[8];
    t8 = t7 * t5;
    t7 = -0.28144773233982714291e-2 * t1 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.18997721932938332145e-1 * t4 * t6 + t7 * t2 * (-0.35180966542478392861e-3 * sinP1_2 * sinP2_2 + 0.52771449813717589291e-3 * cosP1_2 * cosP2_2);
    bf[0] = t1 * (t2 * (-0.35180966542478392861e-3 * sinP1_1 * sinP2_2 + 0.52771449813717589291e-3 * cosP1_1 * cosP2_2) - 0.63325739776461107152e-2 * cosP1_1 * t6) + 0.70361933084956785729e-3 * t8 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) - 0.42217159850974071437e-2 * t4 * t5 * cosP2_1 + t2 * (0.17590483271239196430e-3 * sinP1_3 * sinP2_2 - 0.26385724906858794646e-3 * cosP1_3 * cosP2_2) * t3;
    bf[1] = t1 * (t2 * (-0.35180966542478392861e-3 * cosP1_1 * sinP2_2 - 0.52771449813717589291e-3 * cosP2_2 * sinP1_1) - 0.63325739776461107153e-2 * sinP1_1 * t6) + 0.70361933084956785729e-3 * t8 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) - 0.42217159850974071436e-2 * t4 * t5 * sinP2_1 + t2 * (-0.17590483271239196430e-3 * cosP1_3 * sinP2_2 - 0.26385724906858794646e-3 * sinP1_3 * cosP2_2) * t3;
    bf[2] = t7;
}

static void idsbf_4_2_3_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5, t6, t7;
    t1 = LegP1[8];
    t2 = LegP2[4];
    t3 = LegP1[7];
    t4 = LegP2[5];
    t5 = LegP1[9];
    t6 = LegP1[6];
    t7 = 0.49363171251566687768e-3 * t5 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.16454390417188895923e-2 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t1 * t4 * (-0.2e-22 * cosP1_2 * cosP2_2 + 0.65817561668755583694e-3 * sinP1_2 * sinP2_2);
    bf[0] = t2 * (t1 * (-0.32908780834377791849e-3 * cosP1_2 * cosP2_1 - 0.13163512333751116740e-2 * sinP1_2 * sinP2_1) - 0.98726342503133375550e-2 * cosP2_1 * t6) + t4 * ((0.1e-22 * cosP1_1 * t3 + 0.1e-23 * cosP1_3 * t5) * cosP2_2 + (0.16454390417188895924e-3 * sinP1_3 * t5 + 0.16454390417188895923e-2 * sinP1_1 * t3) * sinP2_2);
    bf[1] = t2 * (t1 * (-0.13163512333751116739e-2 * sinP1_2 * cosP2_1 + 0.32908780834377791846e-3 * cosP1_2 * sinP2_1) - 0.98726342503133375547e-2 * sinP2_1 * t6) + t4 * (t3 * (0.16454390417188895924e-2 * cosP1_1 * sinP2_2 - 0.4e-22 * cosP2_2 * sinP1_1) + t5 * (-0.2e-23 * sinP1_3 * cosP2_2 - 0.16454390417188895924e-3 * cosP1_3 * sinP2_2));
    bf[2] = t7;
}

static void idsbf_4_2_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[9];
    t2 = LegP2[3];
    t3 = LegP1[8];
    t4 = LegP2[4];
    t5 = LegP1[7];
    t6 = LegP2[5];
    t7 = LegP1[6];
    t8 = t1 * cosP1_3;
    t9 = t5 * cosP1_1;
    t10 = sinP1_3 * t1;
    t11 = sinP1_1 * t5;
    t12 = 0.90940030141961401262e-3 * t1;
    t1 = 0.22735007535490350316e-3 * t1 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.97435746580672929926e-3 * t5 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.15589719452907668788e-1 * t7 * t2 + t3 * t6 * (-0.77948597264538343943e-3 * cosP1_2 * cosP2_2 - 0.38974298632269171973e-3 * sinP1_2 * sinP2_2);
    bf[0] = t2 * (0.38974298632269171972e-2 * t5 * cosP1_1 + t12 * cosP1_3) + t4 * (t3 * (-0.58461447948403757957e-3 * cosP1_2 * cosP2_1 + 0.77948597264538343943e-3 * sinP1_2 * sinP2_1) - 0.19487149316134585985e-2 * cosP2_1 * t7) + t6 * ((0.19487149316134585987e-2 * t9 - 0.64957164387115286617e-4 * t8) * cosP2_2 + (0.97435746580672929934e-3 * t11 - 0.32478582193557643311e-4 * t10) * sinP2_2);
    bf[1] = t2 * (-t12 * sinP1_3 + 0.38974298632269171973e-2 * t11) + t4 * (t3 * (0.58461447948403757957e-3 * cosP1_2 * sinP2_1 + 0.77948597264538343943e-3 * sinP1_2 * cosP2_1) - 0.19487149316134585985e-2 * sinP2_1 * t7) + t6 * ((-0.64957164387115286617e-4 * t10 - 0.19487149316134585987e-2 * t11) * cosP2_2 + (0.32478582193557643311e-4 * t8 + 0.97435746580672929934e-3 * t9) * sinP2_2);
    bf[2] = t1;
}

static void idsbf_4_2_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[17];
    t2 = LegP2[4];
    t3 = LegP1[16];
    t4 = LegP2[5];
    t5 = LegP1[19];
    t6 = LegP1[18];
    t7 = LegP2[3];
    t8 = LegP1[20];
    t9 = LegP1[15];
    t10 = t5 * t2;
    t11 = sinP1_3 * t6;
    t12 = sinP1_1 * t3;
    t13 = cosP1_3 * t6;
    t14 = cosP1_1 * t3;
    t15 = t2 * (t1 * (0.17429836223426189433e-3 * sinP1_2 * cosP2_1 - 0.8e-23 * cosP1_2 * sinP2_1) - 0.17429836223426189433e-2 * sinP2_1 * t9) + t4 * ((-0.69719344893704757735e-3 * t12 - 0.58099454078087298112e-4 * t11) * cosP2_2 + (0.34859672446852378869e-3 * t14 + 0.29049727039043649056e-4 * t13) * sinP2_2) + t7 * (-0.14524863519521824528e-4 * sinP1_5 * t8 - 0.29049727039043649058e-4 * t11 + 0.34859672446852378871e-2 * t12) + 0.14524863519521824526e-4 * t10 * (cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    bf[0] = t2 * (t1 * (0.17429836223426189432e-3 * sinP1_2 * sinP2_1 + 0.2e-23 * cosP1_2 * cosP2_1) - 0.17429836223426189433e-2 * cosP2_1 * t9) + t4 * ((-0.58099454078087298113e-4 * t13 + 0.69719344893704757734e-3 * t14) * cosP2_2 + (-0.29049727039043649057e-4 * t11 + 0.34859672446852378870e-3 * t12) * sinP2_2) + t7 * (-0.14524863519521824528e-4 * cosP1_5 * t8 + 0.29049727039043649058e-4 * t13 + 0.34859672446852378871e-2 * t14) + 0.14524863519521824526e-4 * t10 * (cosP1_4 * cosP2_1 - sinP1_4 * sinP2_1);
    bf[1] = t15;
    bf[2] = t7 * (-0.17429836223426189434e-1 * t9 + 0.29049727039043649054e-4 * cosP1_4 * t5) - 0.58099454078087298114e-4 * t6 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.69719344893704757733e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t1 * t4 * (0.34859672446852378866e-3 * cosP1_2 * cosP2_2 + 0.17429836223426189434e-3 * sinP1_2 * sinP2_2);
}

static void idsbf_4_2_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[17];
    t2 = LegP2[4];
    t3 = LegP1[16];
    t4 = LegP2[5];
    t5 = LegP1[19];
    t6 = LegP1[18];
    t7 = LegP1[20];
    t8 = LegP2[3];
    t9 = LegP1[15];
    t10 = 0.42049297715606280372e-3 * cosP1_2 * t1;
    t11 = cosP1_4 * t5;
    t12 = -0.35041081429671900306e-5 * t11;
    t5 = 0.14016432571868760123e-4 * sinP1_4 * t5;
    t13 = sinP1_2 * t1;
    t14 = t6 * cosP1_3;
    t15 = cosP1_1 * t3;
    t16 = sinP1_3 * t6;
    t17 = sinP1_1 * t3;
    t18 = -0.52561622144507850458e-5 * t7;
    t19 = 0.94610919860114130832e-4 * t6;
    t20 = 0.88303525202773188783e-2;
    t1 = -0.87602703574179750770e-5 * t7 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.31536973286704710278e-4 * t6 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.58869016801848792523e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.42049297715606280368e-4 * t11 * t8 + t1 * t4 * (0.12614789314681884112e-3 * cosP1_2 * cosP2_2 + 0.16819719086242512150e-3 * sinP1_2 * sinP2_2);
    bf[0] = t2 * ((0.88303525202773188780e-2 * t9 + t10 + t12) * cosP2_1 + (-t5 + 0.16819719086242512148e-3 * t13) * sinP2_1) + t4 * ((0.88303525202773188788e-3 * t15 + 0.31536973286704710281e-4 * t14) * cosP2_2 + (0.42049297715606280373e-4 * t16 + 0.11773803360369758506e-2 * t17) * sinP2_2) + t8 * (-t19 * cosP1_3 + t18 * cosP1_5);
    bf[1] = t2 * ((t5 + 0.16819719086242512150e-3 * t13) * cosP2_1 + (t20 * t9 - t10 + t12) * sinP2_1) + t4 * ((0.31536973286704710281e-4 * t16 - 0.88303525202773188788e-3 * t17) * cosP2_2 + (-0.42049297715606280375e-4 * t14 + 0.11773803360369758505e-2 * t15) * sinP2_2) + t8 * (t19 * sinP1_3 + t18 * sinP1_5);
    bf[2] = t1;
}

static void idsbf_4_2_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[16];
    t2 = LegP2[3];
    t3 = LegP1[20];
    t4 = LegP2[5];
    t5 = LegP1[17];
    t6 = LegP2[4];
    t7 = LegP1[19];
    t8 = LegP1[18];
    t9 = LegP1[15];
    t10 = t3 * t4;
    t11 = cosP1_4 * t7;
    t12 = 0.13436231697224058888e-4 * t11;
    t13 = cosP1_2 * t5;
    t7 = 0.12046276694062949348e-4 * sinP1_4 * t7;
    t14 = sinP1_2 * t5;
    t15 = cosP1_3 * t8;
    t16 = cosP1_1 * t1;
    t17 = sinP1_3 * t8;
    t18 = sinP1_1 * t1;
    t17 = t2 * (-0.35026866079659960412e-2 * t18 - 0.62547975142249929302e-4 * t17 - 0.69497750158055477000e-6 * sinP1_5 * t3) + t4 * ((-0.10424662523708321552e-4 * t17 - 0.58378110132766600687e-3 * t18) * cosP2_2 + (0.90347075205472120114e-5 * t15 + 0.50594362115064387263e-3 * t16) * sinP2_2) + t6 * ((-0.14455532032875539218e-3 * t14 - t7) * cosP2_1 + (t12 + 0.81729354185873240959e-2 * t9 + 0.24463208055635527906e-3 * t13) * sinP2_1) - 0.38223762586930512352e-5 * t10 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t5 = t2 * (-0.21016119647795976247e-1 * t9 - 0.13899550031611095400e-4 * t11) - 0.25482508391287008234e-5 * t3 * t6 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.12509595028449985860e-4 * t8 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.27243118061957746983e-2 * t1 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t5 * t4 * (-0.16679460037933314482e-3 * cosP1_2 * cosP2_2 - 0.14455532032875539218e-3 * sinP1_2 * sinP2_2);
    bf[0] = t2 * (-0.69497750158055477000e-6 * cosP1_5 * t3 + 0.62547975142249929302e-4 * t15 - 0.35026866079659960412e-2 * t16) + t4 * (t1 * (0.58378110132766600685e-3 * cosP1_1 * cosP2_2 + 0.50594362115064387261e-3 * sinP1_1 * sinP2_2) + t8 * (-0.90347075205472120110e-5 * sinP1_3 * sinP2_2 - 0.10424662523708321551e-4 * cosP1_3 * cosP2_2)) + t6 * ((0.81729354185873240955e-2 * t9 + t12 - 0.24463208055635527905e-3 * t13) * cosP2_1 + (-0.14455532032875539217e-3 * t14 + t7) * sinP2_1) + 0.38223762586930512352e-5 * t10 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    bf[1] = t17;
    bf[2] = t5;
}

static void idsbf_4_2_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[31];
    t2 = LegP2[3];
    t3 = LegP1[33];
    t4 = LegP1[28];
    t5 = LegP2[4];
    t6 = LegP1[29];
    t7 = LegP2[5];
    t8 = LegP1[32];
    t9 = LegP1[30];
    t10 = LegP1[34];
    t11 = t3 * t7;
    t12 = LegP1[35] * t7;
    t13 = t10 * t5;
    t14 = -0.10723735664216462639e-6;
    t15 = 0.19302724195589632747e-3 * cosP1_2 * t9;
    t16 = cosP1_4 * t8;
    t17 = 0.12868482797059755164e-5 * t16;
    t18 = 0.75666678846711360373e-2 * t4;
    t8 = 0.56568542494923801952e-25 * sinP1_4 * t8;
    t19 = sinP1_2 * t9;
    t20 = sinP1_3 * t1;
    t21 = sinP1_1 * t6;
    t22 = cosP1_3 * t1;
    t23 = cosP1_1 * t6;
    t24 = t14 * t13 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t2 * (-0.32428576648590583018e-2 * t21 - 0.64342413985298775820e-6 * sinP1_5 * t3 - 0.77210896782358530994e-5 * t20) + t5 * ((-0.16729027636177681713e-3 * t19 - t8) * cosP2_1 + (t15 + t17 + t18) * sinP2_1) + t7 * ((-0.96513620977948163746e-5 * t20 - 0.28954086293384449123e-3 * t21) * cosP2_2 + (0.25093541454266522573e-3 * t23 + 0.83645138180888408580e-5 * t22) * sinP2_2) - 0.26809339160541156596e-7 * t12 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.53618678321082313190e-7 * t11 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t1 = t2 * (0.22700003654013408111e-1 * t4 + 0.38605448391179265492e-5 * t16) + 0.53618678321082313192e-7 * t10 * t7 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.42894942656865850552e-6 * t3 * t5 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.51473931188239020666e-5 * t1 * t5 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.21619051099060388676e-2 * t6 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t9 * t7 * (0.96513620977948163752e-4 * cosP1_2 * cosP2_2 + 0.83645138180888408586e-4 * sinP1_2 * sinP2_2);
    bf[0] = t2 * (-0.32428576648590583017e-2 * t23 + 0.77210896782358530994e-5 * t22 - 0.64342413985298775820e-6 * cosP1_5 * t3) + t5 * ((-t15 + t17 + t18) * cosP2_1 + (-0.16729027636177681715e-3 * t19 + t8) * sinP2_1) + t7 * ((0.28954086293384449124e-3 * t23 - 0.96513620977948163748e-5 * t22) * cosP2_2 + (0.25093541454266522576e-3 * t21 - 0.83645138180888408580e-5 * t20) * sinP2_2) + 0.53618678321082313190e-7 * t11 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.26809339160541156596e-7 * t12 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t14 * t13 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    bf[1] = t24;
    bf[2] = t1;
}

static void idsbf_4_4_0_1_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4;
    t1 = LegP1[2];
    t2 = LegP2[10];
    t3 = -0.20519884951304848519e-1;
    t4 = 0.12214217232919552690e-3 * LegP2[14] * cosP2_4;
    t3 = t2 * t3 - t4;
    bf[0] = t1 * cosP1_1 * t3;
    bf[1] = t1 * sinP1_1 * t3;
    bf[2] = cosT1 * (0.20519884951304848517e-1 * t2 + t4);
}

static void idsbf_4_4_1_1_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5;
    t1 = LegP2[13];
    t2 = LegP1[2];
    t3 = LegP2[14];
    t4 = LegP2[11];
    t5 = 0.13380004601476741246e-3 * t2;
    bf[0] = (-0.56196019326202313236e-2 * cosP2_1 * t4 + 0.13380004601476741247e-3 * cosP2_3 * t1) * cosT1 + t5 * sinP1_1 * t3 * sinP2_4;
    bf[1] = (-0.13380004601476741247e-3 * sinP2_3 * t1 - 0.56196019326202313236e-2 * sinP2_1 * t4) * cosT1 - t5 * cosP1_1 * t3 * sinP2_4;
    bf[2] = -0.56196019326202313233e-2 * t2 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.13380004601476741246e-3 * t2 * t1 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
}

static void idsbf_4_4_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[2];
    t2 = LegP2[12];
    t3 = LegP2[13];
    t4 = LegP2[14];
    t5 = LegP2[11];
    t6 = LegP2[10];
    t7 = cosP2_4 * t4;
    t8 = -0.61623776942777911996e-4 * t7;
    t9 = cosP2_2 * t2;
    t4 = 0.28284271247461900976e-23 * sinP2_4 * t4;
    t2 = sinP2_2 * t2;
    bf[0] = (-0.11092279849700024159e-2 * cosP2_1 * t5 - 0.18487133082833373599e-3 * cosP2_3 * t3) * cosT1 + t1 * ((0.73948532331333494400e-2 * t6 + t8 + 0.14789706466266698880e-2 * t9) * cosP1_1 + (0.73948532331333494402e-3 * t2 + t4) * sinP1_1);
    bf[1] = (-0.11092279849700024159e-2 * sinP2_1 * t5 + 0.18487133082833373599e-3 * sinP2_3 * t3) * cosT1 + t1 * ((0.73948532331333494392e-3 * t2 - t4) * cosP1_1 + (0.73948532331333494398e-2 * t6 + t8 - 0.14789706466266698879e-2 * t9) * sinP1_1);
    bf[2] = (0.14789706466266698879e-1 * t6 - 0.12324755388555582398e-3 * t7) * cosT1 + 0.18487133082833373600e-3 * t1 * t3 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.11092279849700024159e-2 * t1 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
}

static void idsbf_4_4_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[7];
    t2 = LegP2[12];
    t3 = LegP1[6];
    t4 = LegP2[13];
    t5 = LegP1[9];
    t6 = LegP1[8];
    t7 = LegP2[11];
    t8 = LegP2[10];
    t9 = t1 * sinP1_1;
    t10 = t5 * cosP1_3;
    t11 = t6 * t4;
    t12 = t6 * t7;
    t13 = cosP2_4 * LegP2[14];
    t14 = -0.50315603177631002954e-4 * t13;
    t15 = 0.60378723813157203546e-2 * t8;
    t16 = cosP2_2 * t2;
    t6 = t3 * (-0.18113617143947161063e-1 * t8 + 0.15094680953289300884e-3 * t13) - 0.10063120635526200591e-3 * t1 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.60378723813157203538e-3 * t1 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t6 * t2 * (0.10063120635526200590e-3 * sinP1_2 * sinP2_2 + 0.20126241271052401180e-3 * cosP1_2 * cosP2_2);
    bf[0] = t3 * (-0.90568085719735805307e-3 * cosP2_1 * t7 - 0.15094680953289300885e-3 * cosP2_3 * t4) + 0.10063120635526200589e-3 * t2 * (-t10 * cosP2_2 + t9 * sinP2_2) + 0.25157801588815501476e-4 * t11 * (cosP1_2 * cosP2_3 - sinP1_2 * sinP2_3) + 0.15094680953289300884e-3 * t12 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) - 0.50315603177631002945e-4 * t5 * sinP1_3 * t2 * sinP2_2 + (t14 + 0.20126241271052401179e-3 * t16 + t15) * t1 * cosP1_1;
    bf[1] = 0.10063120635526200590e-3 * t2 * (t1 * cosP1_1 * sinP2_2 - t5 * sinP1_3 * cosP2_2) + 0.25157801588815501476e-4 * t11 * (cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.15094680953289300885e-3 * t3 * t4 * sinP2_3 + 0.15094680953289300885e-3 * t12 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) + 0.50315603177631002947e-4 * t10 * t2 * sinP2_2 + t9 * (t14 - 0.20126241271052401180e-3 * t16 + t15) - 0.90568085719735805304e-3 * t3 * t7 * sinP2_1;
    bf[2] = t6;
}

static void idsbf_4_4_3_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[6];
    t2 = LegP2[13];
    t3 = LegP2[11];
    t4 = LegP1[7];
    t5 = LegP2[12];
    t6 = LegP2[14];
    t7 = LegP1[9];
    t8 = LegP1[8];
    t9 = sinP2_3 * t2;
    t10 = sinP2_1 * t3;
    t11 = cosP2_3 * t2;
    t12 = cosP2_1 * t3;
    t13 = 0.47065937074892359954e-4 * t4;
    t14 = t1 * (0.50831212040883748752e-2 * t10 - 0.28239562244935415972e-3 * t9) + t5 * (t4 * (0.47065937074892359956e-3 * cosP1_1 * sinP2_2 - 0.2e-22 * cosP2_2 * sinP1_1) + t7 * (0.2e-23 * sinP1_3 * cosP2_2 - 0.47065937074892359956e-4 * cosP1_3 * sinP2_2)) + t8 * (t2 * (0.47065937074892359957e-4 * sinP1_2 * cosP2_3 - 0.1e-23 * cosP1_2 * sinP2_3) + t3 * (-0.56479124489870831946e-3 * cosP1_2 * sinP2_1 + 0.28239562244935415970e-3 * sinP1_2 * cosP2_1)) - t13 * cosP1_1 * t6 * sinP2_4;
    bf[0] = t1 * (0.28239562244935415972e-3 * t11 + 0.50831212040883748752e-2 * t12) + t5 * (t4 * (0.2e-22 * cosP1_1 * cosP2_2 + 0.47065937074892359956e-3 * sinP1_1 * sinP2_2) + t7 * (0.47065937074892359956e-4 * sinP1_3 * sinP2_2 + 0.2e-23 * cosP1_3 * cosP2_2)) + t8 * ((-0.1e-23 * t11 + 0.56479124489870831946e-3 * t12) * cosP1_2 + (-0.47065937074892359957e-4 * t9 + 0.28239562244935415970e-3 * t10) * sinP1_2) + t13 * sinP1_1 * t6 * sinP2_4;
    bf[1] = t14;
    bf[2] = 0.14119781122467707986e-3 * t7 * t3 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.47065937074892359952e-4 * t4 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.23532968537446179976e-4 * t7 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.84718686734806247916e-3 * t4 * t3 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t8 * t5 * (0.18826374829956943982e-3 * sinP1_2 * sinP2_2 + 0.7e-23 * cosP1_2 * cosP2_2);
}

static void idsbf_4_4_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[9];
    t2 = LegP2[10];
    t3 = LegP2[14];
    t4 = LegP1[6];
    t5 = LegP2[13];
    t6 = LegP2[11];
    t7 = LegP1[7];
    t8 = LegP2[12];
    t9 = LegP1[8];
    t10 = t1 * t3;
    t3 = cosP2_4 * t3;
    t11 = -0.41274839614403026869e-2 * t2 - 0.19108722043705105036e-4 * t3;
    t12 = cosP1_3 * t1;
    t13 = cosP1_1 * t7;
    t14 = sinP1_3 * t1;
    t15 = sinP1_1 * t7;
    t16 = cosP2_3 * t5;
    t17 = cosP2_1 * t6;
    t18 = sinP2_3 * t5;
    t19 = sinP2_1 * t6;
    t20 = t4 * (0.19108722043705105033e-3 * t18 + 0.20637419807201513437e-2 * t19) + t8 * (t1 * (-0.16560892437877757694e-4 * cosP1_3 * sinP2_2 - 0.25478296058273473378e-5 * sinP1_3 * cosP2_2) + t7 * (-0.7643488817482042015e-4 * cosP2_2 * sinP1_1 - 0.49682677313633273085e-3 * cosP1_1 * sinP2_2)) + t9 * ((-0.30573955269928168053e-4 * t18 + 0.50447026195381477286e-3 * t19) * cosP1_2 + (0.49682677313633273085e-4 * t16 + 0.29809606388179963850e-3 * t17) * sinP1_2) - 0.44587018101978578409e-5 * t10 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t15 * t11 - 0.53504421722374294090e-3 * t14 * t2;
    t1 = t4 * (-0.16509935845761210746e-1 * t2 - 0.76434888174820420130e-4 * t3) + 0.13376105430593573523e-3 * t1 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.95543610218525525156e-4 * t7 * t5 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.13376105430593573523e-4 * t1 * t5 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.10318709903600756719e-2 * t7 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t9 * t8 * (-0.30573955269928168055e-4 * cosP1_2 * cosP2_2 + 0.19873070925453309234e-3 * sinP1_2 * sinP2_2);
    bf[0] = t4 * (-0.19108722043705105033e-3 * t16 + 0.20637419807201513437e-2 * t17) + t8 * ((0.7643488817482042014e-4 * t13 - 0.25478296058273473378e-5 * t12) * cosP2_2 + (0.16560892437877757694e-4 * t14 - 0.49682677313633273086e-3 * t15) * sinP2_2) + t9 * ((-0.50447026195381477286e-3 * t17 - 0.30573955269928168053e-4 * t16) * cosP1_2 + (0.29809606388179963850e-3 * t19 - 0.49682677313633273085e-4 * t18) * sinP1_2) + 0.44587018101978578410e-5 * t10 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t13 * t11 + 0.53504421722374294090e-3 * t12 * t2;
    bf[1] = t20;
    bf[2] = t1;
}

static void idsbf_4_4_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[15];
    t2 = LegP2[11];
    t3 = LegP1[16];
    t4 = LegP2[10];
    t5 = LegP1[18];
    t6 = LegP2[13];
    t7 = LegP1[20];
    t8 = LegP1[17];
    t9 = LegP2[14];
    t10 = LegP1[19];
    t11 = LegP2[12];
    t12 = t5 * t9;
    t13 = t10 * t6;
    t14 = t7 * t9;
    t15 = t5 * cosP1_3;
    t16 = t3 * cosP1_1;
    t17 = t10 * t2;
    t18 = -0.17091360581149328874e-4;
    t19 = sinP1_3 * t5;
    t20 = sinP1_1 * t3;
    t21 = -0.85456802905746644366e-5 * cosP1_5 * t7 - 0.36917338855282550369e-2 * t16;
    t7 = -0.85456802905746644366e-5 * sinP1_5 * t7 - 0.36917338855282550371e-2 * t20;
    t22 = 0.17091360581149328872e-3 * sinP2_3 * t6 + 0.18458669427641275185e-2 * sinP2_1 * t2;
    t7 = t1 * t22 + t11 * (t3 * (-0.17775015004395302028e-3 * cosP1_1 * sinP2_2 - 0.27346176929838926202e-4 * cosP2_2 * sinP1_1) + t5 * (-0.22788480774865771832e-5 * sinP1_3 * cosP2_2 - 0.14812512503662751689e-4 * cosP1_3 * sinP2_2)) + t18 * (t20 * t9 * cosP2_4 + t19 * t4) + t4 * t7 + t8 * (t2 * (0.14356742888165436254e-3 * cosP1_2 * sinP2_1 - 0.41019265394758389311e-4 * sinP1_2 * cosP2_1) + t6 * (0.13673088464919463098e-4 * sinP1_2 * cosP2_3 + 0.34182721162298657748e-5 * cosP1_2 * sinP2_3)) + 0.85456802905746644360e-6 * t13 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - 0.71214002421455536973e-7 * t14 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.85456802905746644360e-5 * t17 * (cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) - 0.14242800484291107395e-6 * t12 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t3 = t4 * (0.18458669427641275182e-1 * t1 + 0.17091360581149328873e-4 * cosP1_4 * t10) - 0.34182721162298657746e-4 * t5 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.68365442324597315496e-4 * t3 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.34182721162298657747e-5 * t5 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.73834677710565100743e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.14242800484291107395e-6 * t10 * t9 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.85456802905746644368e-4 * t1 * t9 * cosP2_4 + (0.13673088464919463098e-4 * cosP1_2 * cosP2_2 - 0.88875075021976510134e-4 * sinP1_2 * sinP2_2) * t11 * t8;
    bf[0] = t1 * (0.18458669427641275185e-2 * cosP2_1 * t2 - 0.17091360581149328872e-3 * cosP2_3 * t6) + t11 * ((-0.22788480774865771834e-5 * t15 + 0.27346176929838926206e-4 * t16) * cosP2_2 + (-0.17775015004395302027e-3 * t20 + 0.14812512503662751689e-4 * t19) * sinP2_2) + t4 * t21 + t8 * (t2 * (-0.41019265394758389307e-4 * sinP1_2 * sinP2_1 - 0.14356742888165436254e-3 * cosP1_2 * cosP2_1) + t6 * (-0.13673088464919463098e-4 * sinP1_2 * sinP2_3 + 0.34182721162298657750e-5 * cosP1_2 * cosP2_3)) + 0.14242800484291107395e-6 * t12 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.85456802905746644360e-6 * t13 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.71214002421455536970e-7 * t14 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t18 * (t16 * t9 * cosP2_4 - t15 * t4) + 0.85456802905746644360e-5 * t17 * (cosP1_4 * cosP2_1 - sinP1_4 * sinP2_1);
    bf[1] = t7;
    bf[2] = t3;
}

static void idsbf_4_4_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[15];
    t2 = LegP2[11];
    t3 = LegP1[18];
    t4 = LegP2[10];
    t5 = LegP2[13];
    t6 = LegP1[20];
    t7 = LegP1[17];
    t8 = LegP2[14];
    t9 = LegP1[19];
    t10 = LegP1[16];
    t11 = LegP2[12];
    t12 = t3 * t8;
    t13 = t9 * t5;
    t14 = t6 * t8;
    t15 = 0.92773639724170211839e-6;
    t16 = -0.10308182191574467982e-6;
    t17 = 0.51540910957872339914e-7;
    t18 = cosP1_4 * t9;
    t19 = 0.30924546574723403948e-5 * t18;
    t20 = -0.46757914420981786773e-2 * t1;
    t21 = cosP1_2 * t7;
    t22 = -0.30429753829527829485e-3 * sinP1_2 * t7;
    t23 = 0.92773639724170211840e-5 * sinP1_4 * t9;
    t1 = 0.18554727944834042370e-3 * t1;
    t24 = 0.12369818629889361579e-4 * t10;
    t25 = t11 * (t10 * (-0.6927098432738042485e-4 * cosP1_1 * sinP2_2 + 0.41562590596428254909e-3 * cosP2_2 * sinP1_1) + t3 * (0.24739637259778723157e-5 * cosP1_3 * sinP2_2 - 0.14843782355867233896e-4 * sinP1_3 * cosP2_2)) - t15 * t12 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t16 * t13 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t17 * t14 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t2 * ((t22 + t23) * cosP2_1 + (0.742189117793361697e-5 * t21 + t19 + t20) * sinP2_1) + t4 * (0.11132836766900425421e-3 * sinP1_3 * t3 - 0.61849093149446807888e-5 * sinP1_5 * t6) + t5 * (t7 * (0.37109455889668084741e-5 * cosP1_2 * sinP2_3 + 0.86588730409225531059e-5 * sinP1_2 * cosP2_3) - t1 * sinP2_3) - t24 * cosP1_1 * t8 * sinP2_4;
    t9 = -0.30924546574723403946e-5 * t6 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.37109455889668084736e-4 * t3 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.12369818629889361580e-4 * t10 * t5 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.41232728766297871931e-6 * t9 * t8 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.61849093149446807894e-6 * t3 * t5 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.31171942947321191183e-3 * t10 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.49479274519557446314e-4 * t18 * t4 + t7 * t11 * (-0.59375129423468935585e-4 * cosP1_2 * cosP2_2 - 0.9895854903911489265e-5 * sinP1_2 * sinP2_2);
    bf[0] = t11 * (t10 * (-0.41562590596428254909e-3 * cosP1_1 * cosP2_2 - 0.69270984327380424848e-4 * sinP1_1 * sinP2_2) + t3 * (-0.14843782355867233896e-4 * cosP1_3 * cosP2_2 - 0.24739637259778723157e-5 * sinP1_3 * sinP2_2)) + t2 * ((t19 + t20 - 0.7421891177933616968e-5 * t21) * cosP2_1 + (t22 - t23) * sinP2_1) + t4 * (-0.11132836766900425421e-3 * cosP1_3 * t3 - 0.61849093149446807888e-5 * cosP1_5 * t6) + t5 * (t7 * (-0.86588730409225531059e-5 * sinP1_2 * sinP2_3 + 0.37109455889668084741e-5 * cosP1_2 * cosP2_3) + t1 * cosP2_3) + t15 * t12 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t16 * t13 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t17 * t14 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t24 * sinP1_1 * t8 * sinP2_4;
    bf[1] = t25;
    bf[2] = t9;
}

static void idsbf_4_4_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[15];
    t2 = LegP2[11];
    t3 = LegP1[18];
    t4 = LegP2[10];
    t5 = LegP2[13];
    t6 = LegP1[20];
    t7 = LegP1[17];
    t8 = LegP2[14];
    t9 = LegP1[19];
    t10 = LegP1[16];
    t11 = LegP2[12];
    t12 = t3 * t8;
    t13 = t9 * t5;
    t14 = t6 * t8;
    t15 = t10 * t11;
    t16 = t6 * t11;
    t17 = 0.10442993812386831372e-3;
    t18 = -0.18648203236405056021e-5;
    t19 = 0.13986152427303792014e-5;
    t20 = 0.68376745200151872076e-6;
    t21 = -0.15540169363670880017e-6;
    t22 = -0.15540169363670880017e-7;
    t23 = cosP2_4 * t8;
    t24 = cosP1_4 * t9;
    t25 = 0.12121332103663286412e-4 * t24;
    t26 = -0.32895430509018518820e-2 * t1;
    t27 = cosP1_2 * t7;
    t28 = 0.21258951689501763863e-3 * sinP1_2 * t7;
    t29 = 0.83916914563822752084e-5 * sinP1_4 * t9;
    t30 = (0.31328981437160494113e-2 * t4 - 0.37296406472810112040e-5 * t23) * t10;
    t31 = -t17 * t15 * (cosP1_1 * sinP2_2 + sinP1_1 * cosP2_2) + t18 * t3 * t11 * (cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - t19 * t12 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t2 * ((t28 - t29) * cosP2_1 + (0.55944609709215168068e-4 * t27 + t25 + t26) * sinP2_1) - t20 * t16 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t21 * t13 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t22 * t14 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t4 * (-0.18648203236405056018e-5 * sinP1_5 * t6 - 0.16783382912764550418e-3 * sinP1_3 * t3) + t5 * (t7 * (0.13053742265483539215e-4 * cosP1_2 * sinP2_3 - 0.93241016182025280109e-5 * sinP1_2 * cosP2_3) + 0.78322453592901235280e-4 * sinP2_3 * t1) + t30 * sinP1_1;
    t8 = t4 * (0.18797388862296296468e-1 * t1 - 0.37296406472810112040e-4 * t24) - 0.20513023560045561622e-5 * t6 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.33566765825529100840e-4 * t3 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.26107484530967078428e-4 * t10 * t5 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.31080338727341760036e-6 * t9 * t8 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.27972304854607584033e-5 * t3 * t5 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.10965143503006172939e-2 * t10 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.22377843883686067222e-4 * t23 * t1 + (0.29837125178248089631e-4 * sinP1_2 * sinP2_2 - 0.29837125178248089633e-4 * cosP1_2 * cosP2_2) * t11 * t7;
    bf[0] = t2 * ((t25 + t26 - 0.55944609709215168066e-4 * t27) * cosP2_1 + (t28 + t29) * sinP2_1) + t4 * (-0.18648203236405056018e-5 * cosP1_5 * t6 + 0.16783382912764550418e-3 * cosP1_3 * t3) + t5 * (t7 * (0.13053742265483539215e-4 * cosP1_2 * cosP2_3 + 0.93241016182025280110e-5 * sinP1_2 * sinP2_3) - 0.78322453592901235280e-4 * cosP2_3 * t1) + t19 * t12 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t21 * t13 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t22 * t14 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t17 * t15 * (cosP1_1 * cosP2_2 - sinP1_1 * sinP2_2) + t20 * t16 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t30 * cosP1_1 + t3 * (cosP1_3 * cosP2_2 * t18 + 0.18648203236405056020e-5 * sinP1_3 * sinP2_2) * t11;
    bf[1] = t31;
    bf[2] = t8;
}

static void idsbf_4_4_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[33];
    t2 = LegP2[10];
    t3 = LegP1[28];
    t4 = LegP2[13];
    t5 = LegP1[31];
    t6 = LegP2[11];
    t7 = LegP1[29];
    t8 = LegP2[12];
    t9 = LegP1[32];
    t10 = LegP1[30];
    t11 = LegP2[14];
    t12 = LegP1[34];
    t13 = t1 * t8;
    t14 = LegP1[35] * t8;
    t15 = t12 * t6;
    t16 = t5 * t8;
    t17 = t5 * t11;
    t18 = t9 * t4;
    t19 = t1 * t11;
    t20 = -0.17264881380907346035e-5;
    t21 = 0.17264881380907346034e-6;
    t22 = -0.14387401150756121695e-6;
    t23 = -0.86324406904536730172e-7;
    t24 = -0.14387401150756121695e-7;
    t25 = 0.95916007671707477966e-8;
    t26 = -0.47958003835853738988e-8;
    t27 = 0.37982739037996161267e-4 * cosP1_2 * t10;
    t28 = cosP1_4 * t9;
    t29 = 0.22444345795179549844e-5 * t28;
    t30 = -0.30455250755920558406e-2 * t3;
    t31 = 0.10704226456162554542e-3 * sinP1_2 * t10;
    t32 = 0.12085416966635142224e-5 * sinP1_4 * t9;
    t33 = 0.51794644142722038109e-4 * cosP2_2 * t8;
    t34 = cosP2_4 * t11;
    t35 = -0.34529762761814692070e-5 * t34;
    t36 = 0.29005000719924341337e-2 * t2;
    t37 = 0.72512501799810853342e-4 * t3;
    t38 = t2 * (-0.20717857657088815242e-4 * sinP1_3 * t5 - 0.17264881380907346034e-5 * sinP1_5 * t1) + t20 * t16 * (cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) - t21 * t17 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t22 * t18 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t23 * t15 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t24 * t19 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t25 * t13 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t26 * t14 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t4 * (t10 * (0.46039683682419589427e-5 * cosP1_2 * sinP2_3 - 0.11509920920604897359e-5 * sinP1_2 * cosP2_3) + t37 * sinP2_3) + t6 * ((t32 + t31) * cosP2_1 + (-t27 + t29 + t30) * sinP2_1) + t7 * ((t35 + t36 - t33) * sinP1_1 - 0.51794644142722038107e-4 * cosP1_1 * sinP2_2 * t8);
    t3 = t3 * (-0.20303500503947038936e-1 * t2 + 0.24170833933270284448e-4 * t34) + 0.95916007671707477970e-8 * t12 * t8 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.34529762761814692064e-6 * t1 * t6 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.13811905104725876829e-4 * t5 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.17264881380907346036e-4 * t10 * t8 * (cosP1_2 * cosP2_2 - sinP1_2 * sinP2_2) - 0.20717857657088815240e-4 * t7 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.86324406904536730165e-7 * t9 * t11 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.11509920920604897357e-5 * t5 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.87015002159773024012e-3 * t7 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.10358928828544407620e-4 * t28 * t2;
    bf[0] = t2 * (0.20717857657088815242e-4 * cosP1_3 * t5 - 0.17264881380907346034e-5 * cosP1_5 * t1) + t4 * (t10 * (0.11509920920604897359e-5 * sinP1_2 * sinP2_3 + 0.46039683682419589427e-5 * cosP1_2 * cosP2_3) - t37 * cosP2_3) + t6 * ((t27 + t29 + t30) * cosP2_1 + (-t32 + t31) * sinP2_1) + t7 * ((t35 + t36 + t33) * cosP1_1 - 0.51794644142722038107e-4 * sinP1_1 * sinP2_2 * t8) + t25 * t13 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t26 * t14 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t23 * t15 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t20 * t16 * (cosP1_3 * cosP2_2 - sinP1_3 * sinP2_2) + t21 * t17 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t22 * t18 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t24 * t19 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    bf[1] = t38;
    bf[2] = t3;
}

static void idsbf_4_4_7_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[33];
    t2 = LegP2[12];
    t3 = LegP1[32];
    t4 = LegP2[11];
    t5 = LegP1[30];
    t6 = LegP1[29];
    t7 = LegP1[35];
    t8 = LegP1[34];
    t9 = LegP1[31];
    t10 = LegP2[13];
    t11 = LegP2[14];
    t12 = LegP2[10];
    t13 = LegP1[28];
    t14 = t1 * t2;
    t15 = t7 * t2;
    t16 = t8 * t4;
    t17 = t9 * t11;
    t18 = t8 * t10;
    t19 = t3 * t10;
    t20 = t1 * t11;
    t21 = 0.11200155175468860798e-3 * cosP1_2 * t5;
    t22 = cosP1_4 * t3;
    t23 = -0.66866598062500661486e-6 * t22;
    t24 = 0.28418304176562781132e-4 * sinP1_2 * t5;
    t25 = 0.23403309321875231518e-5 * sinP1_4 * t3;
    t26 = cosP1_3 * t9;
    t27 = cosP1_1 * t6;
    t28 = sinP1_3 * t9;
    t29 = sinP1_1 * t6;
    t30 = 0.46806618643750463038e-4 * t13;
    t31 = t5 * (0.91941572335938409534e-5 * cosP1_2 * cosP2_3 + 0.75224922820313244166e-5 * sinP1_2 * sinP2_3) + t30 * cosP2_3;
    t32 = -0.83583247578125826850e-6 * cosP1_5 * t1 - 0.36776628934375363814e-4 * t26;
    t26 = t10 * t31 + t12 * t32 + t2 * ((0.30647190778646136516e-5 * t26 + 0.16549483020468913717e-3 * t27) * cosP2_2 + (0.25576473758906503017e-3 * t29 + 0.47363840294271301884e-5 * t28) * sinP2_2) + t4 * ((0.39317559660750388957e-2 * t13 + t21 + t23) * cosP2_1 + (t24 - t25) * sinP2_1) - 0.60365678806424208284e-7 * t14 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.23217568771701618570e-8 * t15 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.41791623789062913426e-7 * t16 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.30647190778646136511e-6 * t17 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.23217568771701618568e-8 * t18 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.16716649515625165370e-6 * t19 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.69652706315104855711e-8 * t20 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.16716649515625165370e-5 * t29 * t11 * sinP2_4;
    t29 = 0.39317559660750388956e-2;
    t31 = t6 * (0.25576473758906503017e-3 * cosP1_1 * sinP2_2 - 0.16549483020468913717e-3 * sinP1_1 * cosP2_2) + t9 * (-0.47363840294271301885e-5 * cosP1_3 * sinP2_2 + 0.30647190778646136515e-5 * sinP1_3 * cosP2_2);
    t27 = 0.16716649515625165370e-5 * t27 * t11 * sinP2_4;
    t3 = -0.23217568771701618566e-8 * t7 * t10 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.27861082526041942286e-7 * t8 * t2 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.41791623789062913426e-6 * t1 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.50149948546875496112e-5 * t9 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.16716649515625165374e-5 * t6 * t10 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.55722165052083884563e-7 * t3 * t11 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.10029989709375099222e-5 * t9 * t10 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.14041985593125138913e-3 * t6 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t5 * t2 * (0.18945536117708520753e-4 * sinP1_2 * sinP2_2 + 0.12258876311458454605e-4 * cosP1_2 * cosP2_2) - 0.66866598062500661478e-5 * t22 * t12;
    bf[0] = t26;
    bf[1] = t10 * (t5 * (-0.75224922820313244163e-5 * sinP1_2 * cosP2_3 + 0.91941572335938409533e-5 * cosP1_2 * sinP2_3) - t30 * sinP2_3) + t12 * (0.36776628934375363814e-4 * t28 - 0.83583247578125826850e-6 * sinP1_5 * t1) + t2 * t31 + t4 * ((t24 + t25) * cosP2_1 + (t13 * t29 - t21 + t23) * sinP2_1) + 0.23217568771701618568e-8 * t18 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.23217568771701618570e-8 * t15 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.41791623789062913426e-7 * t16 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - 0.30647190778646136513e-6 * t17 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.16716649515625165370e-6 * t19 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.69652706315104855712e-8 * t20 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.60365678806424208284e-7 * t14 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - t27;
    bf[2] = t3;
}

static void idsbf_4_4_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t5, t6, t7, t8, t9;
    t1 = LegP1[33];
    t2 = LegP2[10];
    t3 = LegP1[28];
    t4 = LegP2[13];
    t5 = LegP1[31];
    t6 = LegP2[11];
    t7 = LegP1[29];
    t8 = LegP2[12];
    t9 = LegP1[32];
    t10 = LegP1[30];
    t11 = LegP1[35];
    t12 = LegP1[34];
    t13 = LegP2[14];
    t14 = t1 * t8;
    t15 = t11 * t8;
    t16 = t12 * t6;
    t17 = t5 * t13;
    t18 = t12 * t4;
    t19 = t11 * t13;
    t20 = t9 * t4;
    t21 = t1 * t13;
    t22 = 0.70011125333604501058e-7;
    t23 = -0.69241772307960495554e-8;
    t24 = 0.57701476923300412960e-8;
    t25 = 0.82430681319000589948e-9;
    t26 = -0.38467651282200275308e-9;
    t27 = cosP2_4 * t13;
    t28 = -0.32571329693664617111e-2 * t2 - 0.27696708923184198224e-6 * t27;
    t29 = 0.96661514141912851803e-4 * cosP1_2 * t10;
    t30 = cosP1_4 * t9;
    t31 = 0.12186551926201047217e-5 * t30;
    t32 = 0.58628393448596310798e-2 * t3;
    t33 = -0.66195134326410233759e-4 * sinP1_2 * t10;
    t34 = 0.94168810338826273948e-6 * sinP1_4 * t9;
    t35 = sinP1_3 * t5;
    t36 = sinP1_1 * t7;
    t37 = cosP1_3 * t5;
    t38 = cosP1_1 * t7;
    t39 = 0.99708152123463113590e-5 * t3;
    t40 = t10 * (0.52162135138663573324e-5 * cosP1_2 * cosP2_3 + 0.49392464246345153500e-5 * sinP1_2 * sinP2_3) - t39 * cosP2_3;
    t37 = t2 * (0.18279827889301570827e-4 * t37 - 0.13848354461592099110e-6 * cosP1_5 * t1) + t4 * t40 + t6 * ((-t29 + t31 + t32) * cosP2_1 + (t33 + t34) * sinP2_1) + t8 * ((-0.20772531692388148667e-5 * t37 + 0.18695278523149333801e-3 * t38) * cosP2_2 + (-0.18002860800069728843e-5 * t35 + 0.16202574720062755961e-3 * t36) * sinP2_2) + t22 * t14 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t26 * t15 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t23 * t16 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.15233189907751309022e-6 * t17 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t24 * t18 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t25 * t19 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.46161181538640330367e-7 * t20 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.11540295384660082592e-8 * t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t38 * t28;
    t38 = t10 * (0.52162135138663573325e-5 * cosP1_2 * sinP2_3 - 0.49392464246345153501e-5 * sinP1_2 * cosP2_3) + t39 * sinP2_3;
    t35 = -0.13848354461592099110e-6 * sinP1_5 * t1 - 0.18279827889301570827e-4 * t35;
    t14 = t2 * t35 - t22 * t14 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t23 * t16 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - t24 * t18 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - t25 * t19 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t26 * t15 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t4 * t38 + t6 * ((t33 - t34) * cosP2_1 + (t29 + t31 + t32) * sinP2_1) + t8 * (t5 * (-0.20772531692388148667e-5 * sinP1_3 * cosP2_2 + 0.18002860800069728843e-5 * cosP1_3 * sinP2_2) + t7 * (0.16202574720062755961e-3 * cosP1_1 * sinP2_2 - 0.18695278523149333801e-3 * sinP1_1 * cosP2_2)) + 0.11540295384660082593e-8 * t21 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4) - 0.15233189907751309023e-6 * t17 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.46161181538640330368e-7 * t20 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t36 * t28;
    bf[0] = t37;
    bf[1] = t14;
    bf[2] = t3 * (-0.26057063754931693688e-1 * t2 - 0.22157367138547358580e-5 * t27) - 0.82430681319000589942e-9 * t11 * t4 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.10770942359016077086e-7 * t12 * t8 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.18002860800069728844e-6 * t1 * t6 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.30466379815502618046e-5 * t5 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.24927038030865778398e-5 * t7 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.27696708923184198219e-7 * t9 * t13 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.10155459938500872682e-5 * t5 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.14657098362149077700e-2 * t7 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + (-0.41545063384776297330e-4 * cosP1_2 * cosP2_2 - 0.36005721600139457686e-4 * sinP1_2 * sinP2_2) * t10 * t8 - 0.33236050707821037866e-5 * t30 * t2;
}

static void idsbf_4_4_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[50];
    t2 = LegP2[10];
    t3 = LegP1[45];
    t4 = LegP2[11];
    t5 = LegP1[46];
    t6 = LegP1[48];
    t7 = LegP2[13];
    t8 = LegP1[52];
    t9 = LegP2[14];
    t10 = LegP1[51];
    t11 = LegP2[12];
    t12 = LegP1[49];
    t13 = LegP1[47];
    t14 = LegP1[53];
    t15 = t8 * t9;
    t16 = t10 * t7;
    t17 = t1 * t11;
    t18 = t5 * cosP1_1;
    t19 = t12 * cosP1_4;
    t20 = t19 * t4;
    t21 = LegP1[54] * t9;
    t22 = t14 * t7;
    t23 = t8 * t11;
    t24 = t10 * t4;
    t25 = t6 * t9;
    t26 = t12 * t7;
    t27 = t1 * t9;
    t28 = 0.26112707594844676214e-6;
    t29 = sinP2_3 * t7;
    t30 = cosP2_3 * t7;
    t31 = t4 * cosP2_1;
    t32 = (-0.82255028923760730069e-4 * t31 + 0.19584530696133507160e-5 * t30) * cosP1_2 + (-0.71287691733925966061e-4 * sinP2_1 * t4 + 0.16973259936649039540e-5 * t29) * sinP1_2;
    t33 = cosP1_3 * t6;
    t34 = sinP1_3 * t6;
    t35 = sinP1_1 * t5;
    t36 = (0.10967337189834764009e-3 * t18 - 0.19584530696133507158e-5 * t33) * cosP2_2 + (0.95050255645234621410e-4 * t35 - 0.16973259936649039538e-5 * t34) * sinP2_2;
    t37 = 0.39169061392267014320e-5 * t33 - 0.13056353797422338107e-6 * cosP1_5 * t1 - 0.30708544131537339224e-2 * t18;
    t31 = -0.94005747341440834354e-5 * t30 + 0.55275379436767210606e-2 * t31;
    t18 = t11 * t36 + t13 * t32 + t2 * t37 + t3 * t31 + 0.64763659709436200924e-11 * t15 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.15543278330264688222e-9 * t16 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.43521179324741127024e-8 * t17 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t28 * (-t18 * t9 * cosP2_4 + t20 * cosP2_1) - 0.32381829854718100464e-11 * t21 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - 0.25905463883774480368e-10 * t22 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.36267649437284272520e-9 * t23 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.65281768987111690536e-8 * t24 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.32640884493555845266e-7 * t25 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.43521179324741127021e-7 * t26 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.10880294831185281756e-8 * t27 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t30 = -t30 * t13 * sinP1_2 + t33 * t11 * sinP2_2;
    t25 = t25 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t26 = t26 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t27 = t27 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t31 = -0.19584530696133507159e-5;
    t32 = t13 * (0.82255028923760730067e-4 * cosP1_2 * sinP2_1 - 0.71287691733925966059e-4 * sinP1_2 * cosP2_1) + 0.55275379436767210606e-2 * sinP2_1 * t3;
    t33 = t11 * (-0.10967337189834764009e-3 * sinP1_1 * cosP2_2 + 0.95050255645234621410e-4 * cosP1_1 * sinP2_2) - 0.30708544131537339225e-2 * sinP1_1 * t2;
    t36 = -0.13056353797422338107e-6 * sinP1_5 * t1 - 0.39169061392267014320e-5 * t34;
    t37 = (0.23762563911308655351e-4 * sinP1_2 * sinP2_2 + 0.27418342974586910021e-4 * cosP1_2 * cosP2_2) * t13 * t11;
    t1 = t3 * (0.27637689718383605303e-1 * t2 + 0.23501436835360208592e-5 * t9 * cosP2_4) + 0.52225415189689352422e-6 * t6 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.12283417652614935692e-2 * t5 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.64763659709436200922e-11 * t14 * t9 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.10362185553509792147e-9 * t8 * t7 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.21760589662370563510e-8 * t10 * t11 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.52225415189689352426e-7 * t1 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.15667624556906805726e-5 * t6 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.20890166075875740970e-5 * t5 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.10880294831185281755e-7 * t12 * t9 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.13056353797422338106e-5 * t19 * t2 + t37;
    bf[0] = t18;
    bf[1] = -0.32381829854718100464e-11 * t21 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.16973259936649039539e-5 * t30 + t28 * (-t35 * t9 * cosP2_4 + t20 * sinP2_1) - 0.15543278330264688222e-9 * t16 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.25905463883774480368e-10 * t22 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - 0.64763659709436200924e-11 * t15 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t32 * t4 + t33 * t5 + t36 * t2 + t31 * (-t29 * t13 * cosP1_2 + t34 * t11 * cosP2_2) - 0.43521179324741127024e-8 * t17 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.10880294831185281756e-8 * t27 - 0.36267649437284272520e-9 * t23 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.43521179324741127020e-7 * t26 - 0.32640884493555845266e-7 * t25 - 0.65281768987111690536e-8 * t24 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + 0.94005747341440834354e-5 * t29 * t3;
    bf[2] = t1;
}

static void idsbf_4_6_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[2];
    t2 = LegP2[23];
    t3 = LegP2[24];
    t4 = LegP2[26];
    t5 = LegP2[22];
    t6 = LegP2[21];
    t7 = t1 * LegP2[27];
    t8 = 0.11645799188507610627e-4;
    t9 = cosP2_4 * LegP2[25];
    t10 = -0.38819330628358702094e-5 * t9;
    t11 = cosP2_2 * t2;
    t9 = (-0.19564942636692785855e-1 * t6 - 0.77638661256717404190e-5 * t9) * cosT1 + t8 * t1 * t3 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.32608237727821309757e-2 * t1 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.19409665314179351047e-5 * t1 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    bf[0] = (0.32608237727821309756e-2 * cosP2_1 * t5 + 0.19409665314179351047e-5 * cosP2_5 * t4 - cosP2_3 * t3 * t8) * cosT1 + t1 * ((-0.97824713183463929277e-2 * t6 + t10 + 0.34937397565522831888e-3 * t11) * cosP1_1 + 0.30279077890119787636e-3 * sinP1_1 * t2 * sinP2_2) + 0.97048326570896755228e-6 * t7 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    bf[1] = (0.32608237727821309756e-2 * sinP2_1 * t5 + 0.19409665314179351047e-5 * sinP2_5 * t4 + sinP2_3 * t3 * t8) * cosT1 + t1 * ((t10 - 0.97824713183463929275e-2 * t6 - 0.34937397565522831886e-3 * t11) * sinP1_1 + 0.30279077890119787634e-3 * cosP1_1 * t2 * sinP2_2) - 0.97048326570896755228e-6 * t7 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    bf[2] = t9;
}

static void idsbf_4_6_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[6];
    t2 = LegP2[26];
    t3 = LegP2[22];
    t4 = LegP1[7];
    t5 = LegP2[21];
    t6 = LegP2[23];
    t7 = LegP1[8];
    t8 = LegP1[9];
    t9 = LegP2[27];
    t10 = LegP2[24];
    t11 = t7 * t10;
    t12 = t1 * t2;
    t13 = t7 * t2;
    t14 = t8 * t9;
    t15 = t4 * t9;
    t16 = t7 * t3;
    t17 = -0.44374191024740968811e-3;
    t18 = -0.26413208943298195722e-6;
    t19 = 0.15847925365978917434e-5;
    t20 = cosP2_4 * LegP2[25];
    t21 = -0.31695850731957834870e-5 * t20;
    t22 = -0.79873543844533743868e-2 * t5;
    t23 = cosP2_2 * t6;
    t24 = t1 * (0.95087552195873504590e-5 * sinP2_3 * t10 + 0.26624514614844581287e-2 * sinP2_1 * t3) + t17 * t16 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) + t18 * t13 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t4 * ((t21 + t22 - 0.47543776097936752306e-4 * t23) * sinP1_1 + 0.41204605951545185332e-4 * cosP1_1 * sinP2_2 * t6) + t19 * (t12 * sinP2_5 + t11 * (cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3)) - 0.66033022358245489306e-7 * t14 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.13206604471649097862e-6 * t15 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t6 * (-0.23771888048968376152e-4 * sinP1_3 * cosP2_2 + 0.20602302975772592664e-4 * cosP1_3 * sinP2_2) * t8;
    t2 = t1 * (0.23962063153360123159e-1 * t5 + 0.95087552195873504610e-5 * t20) - 0.63391701463915669738e-5 * t4 * t10 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.10565283577319278290e-5 * t4 * t2 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.17749676409896387527e-2 * t4 * t3 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.13206604471649097862e-6 * t7 * t9 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + t7 * t6 * (0.41204605951545185329e-4 * sinP1_2 * sinP2_2 + 0.47543776097936752303e-4 * cosP1_2 * cosP2_2);
    bf[0] = t1 * (0.26624514614844581287e-2 * cosP2_1 * t3 - 0.95087552195873504590e-5 * cosP2_3 * t10) + t4 * ((t21 + t22 + 0.47543776097936752308e-4 * t23) * cosP1_1 + 0.41204605951545185332e-4 * sinP1_1 * sinP2_2 * t6) + t19 * (t12 * cosP2_5 + t11 * (cosP1_2 * cosP2_3 - sinP1_2 * sinP2_3)) + t18 * t13 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.66033022358245489306e-7 * t14 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.13206604471649097862e-6 * t15 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t17 * t16 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) + t6 * (-0.20602302975772592664e-4 * sinP1_3 * sinP2_2 - 0.23771888048968376152e-4 * cosP1_3 * cosP2_2) * t8;
    bf[1] = t24;
    bf[2] = t2;
}

static void idsbf_4_6_3_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[6];
    t2 = LegP2[26];
    t3 = LegP2[22];
    t4 = LegP1[7];
    t5 = LegP2[23];
    t6 = LegP2[25];
    t7 = LegP1[8];
    t8 = LegP1[9];
    t9 = LegP2[27];
    t10 = LegP2[24];
    t11 = t7 * t2;
    t12 = t8 * t9;
    t13 = 0.29530865350560076954e-7;
    t14 = 0.29530865350560076954e-6;
    t15 = 0.70874076841344184684e-5 * t4;
    t16 = t1 * (-0.29767112273364557562e-2 * sinP2_1 * t3 - 0.42524446104806510808e-4 * sinP2_3 * t10 + 0.35437038420672092340e-5 * sinP2_5 * t2) + t13 * t12 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t14 * ((cosP1_1 * sinP2_6 - sinP1_1 * cosP2_6) * t9 * t4 + t11 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5)) + t5 * ((-0.23388445357643580944e-4 * sinP1_3 * t8 + 0.23388445357643580944e-3 * t4 * sinP1_1) * cosP2_2 + (-0.16301037673509162476e-3 * cosP1_1 * t4 + 0.16301037673509162476e-4 * cosP1_3 * t8) * sinP2_2) + t7 * (t10 * (-0.38980742262739301574e-5 * cosP1_2 * sinP2_3 + 0.10985481910408348625e-4 * sinP1_2 * cosP2_3) + t3 * (-0.26932149199710790178e-3 * sinP1_2 * cosP2_1 + 0.22679704589230139098e-3 * cosP1_2 * sinP2_1)) - t15 * cosP1_1 * t6 * sinP2_4;
    t17 = 0.21262223052403255402e-4 * t8 * t3 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.70874076841344184678e-5 * t4 * t10 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.59061730701120153896e-6 * t4 * t2 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.11812346140224030781e-6 * t7 * t9 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.74417780683411393912e-5 * t8 * t10 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.49611853788940929274e-3 * t4 * t3 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t7 * t5 * (-0.65204150694036649906e-4 * sinP1_2 * sinP2_2 - 0.93553781430574323778e-4 * cosP1_2 * cosP2_2);
    bf[0] = t1 * (-0.29767112273364557562e-2 * cosP2_1 * t3 + 0.35437038420672092340e-5 * cosP2_5 * t2 + 0.42524446104806510808e-4 * cosP2_3 * t10) + t5 * (t4 * (-0.23388445357643580945e-3 * cosP1_1 * cosP2_2 - 0.16301037673509162477e-3 * sinP1_1 * sinP2_2) + t8 * (-0.23388445357643580945e-4 * cosP1_3 * cosP2_2 - 0.16301037673509162477e-4 * sinP1_3 * sinP2_2)) + t7 * (t10 * (-0.38980742262739301572e-5 * cosP1_2 * cosP2_3 - 0.10985481910408348625e-4 * sinP1_2 * sinP2_3) + t3 * (-0.22679704589230139097e-3 * cosP1_2 * cosP2_1 - 0.26932149199710790177e-3 * sinP1_2 * sinP2_1)) + t14 * ((cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) * t9 * t4 + t11 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5)) + t13 * t12 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t15 * sinP1_1 * t6 * sinP2_4;
    bf[1] = t16;
    bf[2] = t17;
}

static void idsbf_4_6_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[6];
    t2 = LegP2[26];
    t3 = LegP2[22];
    t4 = LegP1[7];
    t5 = LegP2[23];
    t6 = LegP1[8];
    t7 = LegP1[9];
    t8 = LegP2[27];
    t9 = LegP2[24];
    t10 = LegP2[25];
    t11 = LegP2[21];
    t12 = t6 * t2;
    t13 = t7 * t8;
    t14 = t4 * t8;
    t15 = t7 * t10;
    t16 = 0.12809725566603036950e-5;
    t17 = 0.22874509940362565982e-6;
    t18 = -0.13724705964217539587e-6;
    t19 = -0.76248366467875219938e-8;
    t10 = cosP2_4 * t10;
    t20 = cosP2_3 * t9;
    t21 = cosP2_1 * t3;
    t22 = sinP2_3 * t9;
    t23 = sinP2_1 * t3;
    t24 = 0.15371670679923644338e-3 * t7;
    t25 = (0.46115012039770933019e-2 * t11 - 0.54898823856870158360e-5 * t10) * t4;
    t26 = t1 * (0.27449411928435079176e-5 * sinP2_5 * t2 + 0.54898823856870158358e-4 * t22 - 0.23057506019885466508e-2 * t23) - t16 * t15 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t17 * t14 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t18 * t12 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t19 * t13 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t5 * (t4 * (-0.82348235785305237540e-4 * cosP1_1 * sinP2_2 - 0.82348235785305237544e-4 * sinP1_1 * cosP2_2) + t7 * (-0.27449411928435079179e-5 * sinP1_3 * cosP2_2 - 0.27449411928435079177e-5 * cosP1_3 * sinP2_2)) + t6 * (t9 * (-0.68623529821087697944e-5 * sinP1_2 * cosP2_3 + 0.12352235367795785630e-4 * cosP1_2 * sinP2_3) + 0.23057506019885466508e-3 * t21 * sinP1_2) - t24 * sinP1_3 * t11 + t25 * sinP1_1;
    t3 = t1 * (0.18446004815908373206e-1 * t11 - 0.21959529542748063342e-4 * t10) + 0.38429176699809110846e-4 * t7 * t3 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.27449411928435079178e-4 * t4 * t9 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.13724705964217539587e-5 * t4 * t2 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.91498039761450263922e-7 * t6 * t8 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.32024313916507592374e-5 * t7 * t9 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.11528753009942733254e-2 * t4 * t3 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t6 * t5 * (0.32939294314122095013e-4 * sinP1_2 * sinP2_2 - 0.32939294314122095015e-4 * cosP1_2 * cosP2_2);
    bf[0] = t1 * (0.27449411928435079176e-5 * cosP2_5 * t2 - 0.23057506019885466508e-2 * t21 - 0.54898823856870158358e-4 * t20) + t5 * (t4 * (-0.82348235785305237540e-4 * sinP1_1 * sinP2_2 + 0.82348235785305237544e-4 * cosP1_1 * cosP2_2) + t7 * (-0.27449411928435079179e-5 * cosP1_3 * cosP2_2 + 0.27449411928435079177e-5 * sinP1_3 * sinP2_2)) + t6 * ((0.12352235367795785630e-4 * t20 + 0.4e-23 * t21) * cosP1_2 + (0.23057506019885466508e-3 * t23 + 0.68623529821087697944e-5 * t22) * sinP1_2) + t18 * t12 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t19 * t13 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t17 * t14 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t16 * t15 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t24 * cosP1_3 * t11 + t25 * cosP1_1;
    bf[1] = t26;
    bf[2] = t3;
}

static void idsbf_4_6_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[17];
    t2 = LegP2[22];
    t3 = LegP1[16];
    t4 = LegP2[23];
    t5 = LegP2[25];
    t6 = LegP2[26];
    t7 = LegP1[18];
    t8 = LegP2[27];
    t9 = LegP1[19];
    t10 = LegP2[24];
    t11 = LegP1[20];
    t12 = LegP2[21];
    t13 = LegP1[15];
    t14 = t9 * t2;
    t15 = t1 * t6;
    t16 = t7 * t8;
    t17 = t3 * t8;
    t18 = t7 * t5;
    t19 = t9 * t10;
    t20 = t11 * t5;
    t21 = -0.24551500405749771810e-5;
    t22 = -0.20459583671458143177e-6;
    t23 = -0.12275750202874885905e-6;
    t24 = 0.81838334685832572706e-7;
    t25 = 0.40919167342916286353e-7;
    t26 = -0.20459583671458143177e-7;
    t27 = -0.68198612238193810580e-8;
    t28 = cosP2_4 * t5;
    t29 = 0.41246520681659616644e-2 * t12 - 0.49103000811499543628e-5 * t28;
    t30 = cosP1_3 * t7;
    t31 = cosP1_1 * t3;
    t32 = sinP1_3 * t7;
    t33 = sinP1_1 * t3;
    t34 = 0.24551500405749771808e-5 * cosP2_5 * t6 - 0.20623260340829808319e-2 * cosP2_1 * t2 - 0.49103000811499543622e-4 * cosP2_3 * t10;
    t35 = 0.49103000811499543622e-5 * t30 * t12;
    t34 = t1 * (t10 * (-0.12275750202874885906e-5 * sinP1_2 * sinP2_3 + 0.36827250608624657718e-5 * cosP1_2 * cosP2_3) + t2 * (0.11784720194759890468e-3 * sinP1_2 * sinP2_1 + 0.88385401460699178514e-4 * cosP1_2 * cosP2_1)) + t13 * t34 + t4 * ((-0.24551500405749771813e-5 * t30 + 0.29461800486899726175e-4 * t31) * cosP2_2 + (-0.29461800486899726173e-4 * t33 + 0.24551500405749771811e-5 * t32) * sinP2_2) + t21 * (t11 * cosP1_5 * t12 + t14 * (-cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1)) + t23 * t15 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t27 * t16 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t24 * t17 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t25 * t18 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t22 * t19 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t26 * t20 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t35 + t31 * t29;
    t35 = 0.49103000811499543622e-4 * sinP2_3 * t10 - 0.20623260340829808319e-2 * sinP2_1 * t2 + 0.24551500405749771808e-5 * sinP2_5 * t6;
    t36 = 0.49103000811499543622e-5 * t32 * t12;
    t11 = t1 * (t10 * (0.12275750202874885906e-5 * sinP1_2 * cosP2_3 + 0.36827250608624657718e-5 * cosP1_2 * sinP2_3) + t2 * (0.11784720194759890468e-3 * sinP1_2 * cosP2_1 - 0.88385401460699178515e-4 * cosP1_2 * sinP2_1)) + t13 * t35 + t21 * (-t14 * (cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t11 * sinP1_5 * t12) + t22 * t19 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t23 * t15 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - t24 * t17 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - t25 * t18 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t26 * t20 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t27 * t16 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t4 * ((-0.24551500405749771813e-5 * t32 - 0.29461800486899726175e-4 * t33) * cosP2_2 + (-0.24551500405749771811e-5 * t30 - 0.29461800486899726173e-4 * t31) * sinP2_2) - t36 + t33 * t29;
    t14 = 0.40919167342916286352e-7;
    bf[0] = t34;
    bf[1] = t11;
    bf[2] = t13 * (-0.20623260340829808320e-1 * t12 + 0.24551500405749771810e-4 * t28) - 0.98206001622999087236e-5 * t7 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.14730900243449863086e-4 * t1 * t4 * (cosP1_2 * cosP2_2 - sinP1_2 * sinP2_2) - 0.19641200324599817451e-4 * t3 * t10 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.98206001622999087246e-6 * t3 * t6 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + t14 * ((cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) * t8 * t1 + t9 * t5 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4)) + 0.81838334685832572702e-6 * t7 * t10 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.82493041363319233279e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.49103000811499543618e-5 * t9 * cosP1_4 * t12;
}

static void idsbf_4_6_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t5, t6, t7, t8, t9;
    t1 = LegP1[16];
    t2 = LegP2[25];
    t3 = LegP1[19];
    t4 = LegP2[26];
    t5 = LegP1[17];
    t6 = LegP2[22];
    t7 = LegP2[23];
    t8 = LegP1[18];
    t9 = LegP2[27];
    t10 = LegP2[24];
    t11 = LegP1[20];
    t12 = LegP2[21];
    t13 = LegP1[15];
    t14 = t3 * t4;
    t15 = t5 * t4;
    t16 = t8 * t9;
    t17 = t1 * t9;
    t18 = t8 * t2;
    t19 = t3 * t10;
    t20 = t11 * t2;
    t21 = t13 * t4;
    t22 = 0.31095875013604397938e-5;
    t23 = 0.11105669647715856408e-6;
    t24 = 0.10365291671201465981e-6;
    t25 = 0.22211339295431712815e-7;
    t26 = 0.61698164709532535594e-8;
    t27 = -0.12339632941906507119e-8;
    t28 = 0.37018898825719521360e-8;
    t29 = 0.10365291671201465980e-6;
    t30 = cosP1_4 * t3;
    t31 = 0.23692095248460493670e-5 * t30;
    t32 = 0.29852040013060222022e-2 * t13;
    t33 = cosP1_2 * t5;
    t34 = 0.24876700010883518358e-4 * sinP1_2 * t5;
    t35 = 0.38499654778748302212e-5 * sinP1_4 * t3;
    t36 = sinP1_3 * t8;
    t37 = t1 * sinP1_1;
    t38 = cosP1_3 * t8;
    t39 = cosP1_1 * t1;
    t13 = 0.93287625040813193822e-4 * t13;
    t40 = t5 * (0.57749482168122453312e-5 * cosP1_2 * cosP2_3 - 0.4442267859086342564e-6 * sinP1_2 * sinP2_3) + t13 * cosP2_3;
    t41 = 0.62191750027208795880e-5 * t1;
    t13 = t5 * (0.57749482168122453312e-5 * cosP1_2 * sinP2_3 + 0.4442267859086342564e-6 * sinP1_2 * cosP2_3) - t13 * sinP2_3;
    t13 = t10 * t13 + t22 * (-t11 * sinP1_5 * t12 + t21 * sinP2_5) - t23 * t19 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3) - t24 * t17 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t25 * t18 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t26 * t14 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t27 * t20 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t28 * t16 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t29 * t15 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t6 * ((t35 + t34) * cosP2_1 + (t31 + t32 - 0.17413690007618462846e-3 * t33) * sinP2_1) + t7 * ((0.13326803577259027692e-5 * t36 - 0.37315050016325277534e-4 * t37) * cosP2_2 + (0.21145195009250990601e-3 * t39 - 0.75518553604467823568e-5 * t38) * sinP2_2) - t41 * cosP1_1 * t2 * sinP2_4 + 0.55972575024487916292e-4 * t36 * t12;
    t30 = -0.24876700010883518350e-4 * t30 * t12;
    t1 = -0.74037797651439042712e-6 * t11 * t6 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.18657525008162638763e-4 * t8 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.20730583342402931960e-6 * t1 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.14807559530287808543e-7 * t5 * t9 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.61698164709532535596e-8 * t11 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.98717063535252056953e-8 * t3 * t2 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.66634017886295138450e-6 * t8 * t10 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.19901360008706814681e-3 * t1 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.62191750027208795880e-5 * t1 * t10 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + t5 * t7 * (0.30207421441787129427e-4 * sinP1_2 * sinP2_2 + 0.5330721430903611077e-5 * cosP1_2 * cosP2_2) + t30;
    bf[0] = t10 * t40 + t6 * ((0.17413690007618462847e-3 * t33 + t31 + t32) * cosP2_1 + (-t35 + t34) * sinP2_1) + t7 * ((0.37315050016325277534e-4 * t39 + 0.13326803577259027692e-5 * t38) * cosP2_2 + (0.75518553604467823568e-5 * t36 + 0.21145195009250990601e-3 * t37) * sinP2_2) - t26 * t14 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t29 * t15 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t28 * t16 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t24 * t17 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - t25 * t18 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t23 * t19 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t27 * t20 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - t22 * (t11 * cosP1_5 * t12 - t21 * cosP2_5) + t41 * sinP1_1 * t2 * sinP2_4 - 0.55972575024487916292e-4 * t38 * t12;
    bf[1] = t13;
    bf[2] = t1;
}

static void idsbf_4_6_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[20];
    t2 = LegP2[21];
    t3 = LegP1[16];
    t4 = LegP1[15];
    t5 = LegP2[26];
    t6 = LegP2[22];
    t7 = LegP1[18];
    t8 = LegP2[24];
    t9 = LegP1[19];
    t10 = LegP2[23];
    t11 = LegP1[17];
    t12 = LegP2[27];
    t13 = LegP2[25];
    t14 = t9 * t8;
    t15 = t1 * t13;
    t16 = t1 * t10;
    t17 = t1 * t12;
    t18 = t9 * t5;
    t19 = t11 * t5;
    t20 = t7 * t12;
    t21 = t3 * t12;
    t22 = t7 * t13;
    t23 = 0.18376336204752608905e-6;
    t24 = 0.12633731140767418622e-6;
    t25 = 0.53597647263861775970e-7;
    t26 = -0.38284033759901268550e-7;
    t27 = 0.70187395226485659006e-8;
    t28 = 0.10528109283972848852e-8;
    t29 = -0.95710084399753171380e-9;
    t30 = 0.20418151338614009893e-8;
    t31 = cosP2_4 * t13;
    t32 = t6 * (0.56966642234733087597e-4 * sinP1_2 * sinP2_1 - 0.17457519394514978458e-3 * cosP1_2 * cosP2_1) * t11;
    t33 = (-0.32415857065183602100e-2 * t2 - 0.32158588358317065582e-5 * t31) * t3;
    t34 = t3 * (0.10419382628094729248e-3 * cosP1_1 * cosP2_2 - 0.75894268525628274773e-4 * sinP1_1 * sinP2_2) + t7 * (-0.18606040407312016516e-5 * cosP1_3 * cosP2_2 + 0.13552547951005049067e-5 * sinP1_3 * sinP2_2);
    t35 = (-0.87287596972574892262e-6 * cosP1_2 * cosP2_3 - 0.40887348055574554814e-5 * sinP1_2 * sinP2_3) * t11 * t8;
    t36 = (0.26033142956732862614e-5 * sinP1_4 * sinP2_1 + 0.58191731315049928196e-5 * cosP1_4 * cosP2_1) * t9 * t6;
    t37 = cosP1_4 * t9;
    t38 = t10 * (t3 * (-0.10419382628094729248e-3 * sinP1_1 * cosP2_2 - 0.75894268525628274773e-4 * cosP1_1 * sinP2_2) + t7 * (-0.18606040407312016516e-5 * sinP1_3 * cosP2_2 - 0.13552547951005049067e-5 * cosP1_3 * sinP2_2)) + t2 * (-0.16079294179158532789e-5 * sinP1_5 * t1 - 0.14471364761242679511e-3 * sinP1_3 * t7) + t4 * (0.67533035552465837726e-4 * sinP2_3 * t8 + 0.16079294179158532790e-5 * sinP2_5 * t5) + t6 * ((0.56966642234733087597e-4 * sinP1_2 * t11 - 0.26033142956732862614e-5 * sinP1_4 * t9) * cosP2_1 + (0.24697795859187506367e-2 * t4 + 0.58191731315049928196e-5 * t37 + 0.17457519394514978458e-3 * cosP1_2 * t11) * sinP2_1) - 0.34455630383911141695e-7 * t14 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3) + t8 * (-0.87287596972574892262e-6 * cosP1_2 * sinP2_3 + 0.40887348055574554814e-5 * sinP1_2 * cosP2_3) * t11 + t33 * sinP1_1;
    t38 = t23 * t22 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t24 * t16 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - t25 * t21 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t26 * t19 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t27 * t18 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t28 * t17 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t29 * t20 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t30 * t15 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t38;
    t39 = (-0.29769664651699226424e-4 * cosP1_2 * cosP2_2 + 0.21684076721608078508e-4 * sinP1_2 * sinP2_2) * t11 * t10;
    t3 = t4 * (-0.19449514239110161259e-1 * t2 - 0.19295153014990239348e-4 * t31) + 0.28942729522485359024e-4 * t7 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.22511011850821945908e-4 * t3 * t8 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.53597647263861775966e-6 * t3 * t5 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.15313613503960507420e-7 * t11 * t12 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.40836302677228019786e-7 * t9 * t13 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.62020134691040055052e-6 * t7 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.82325986197291687898e-3 * t3 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.84224874271782790802e-6 * t1 * t6 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.14037479045297131801e-8 * t1 * t5 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + t39 - 0.32158588358317065578e-4 * t37 * t2;
    bf[0] = t10 * t34 + t2 * (0.14471364761242679511e-3 * cosP1_3 * t7 - 0.16079294179158532789e-5 * cosP1_5 * t1) + t4 * (-0.67533035552465837726e-4 * cosP2_3 * t8 + 0.24697795859187506367e-2 * cosP2_1 * t6 + 0.16079294179158532790e-5 * cosP2_5 * t5) + 0.34455630383911141695e-7 * t14 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t30 * t15 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t24 * t16 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t28 * t17 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - t27 * t18 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t26 * t19 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t29 * t20 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t25 * t21 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - t23 * t22 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t32 + t33 * cosP1_1 + t35 + t36;
    bf[1] = t38;
    bf[2] = t3;
}

static void idsbf_4_6_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t5, t6, t7, t8, t9;
    t1 = LegP1[31];
    t2 = LegP2[21];
    t3 = LegP1[28];
    t4 = LegP2[22];
    t5 = LegP1[29];
    t6 = LegP2[24];
    t7 = LegP1[33];
    t8 = LegP2[26];
    t9 = LegP2[23];
    t10 = LegP1[32];
    t11 = LegP1[30];
    t12 = LegP2[25];
    t13 = LegP2[27];
    t14 = LegP1[35];
    t15 = LegP1[34];
    t16 = t11 * t8;
    t17 = t1 * t13;
    t18 = t14 * t9;
    t19 = t15 * t4;
    t20 = t5 * t13;
    t21 = t7 * t13;
    t22 = t10 * t8;
    t23 = t1 * t12;
    t24 = t10 * t6;
    t25 = t7 * t12;
    t26 = t15 * t8;
    t14 = t14 * t13;
    t27 = t7 * t9;
    t28 = 0.26583095966465640688e-7;
    t29 = 0.22684241891384013386e-7;
    t30 = 0.35444127955287520912e-9;
    t31 = 0.14768386648036467047e-10;
    t32 = 0.31899715159758768820e-7;
    t33 = t10 * (-0.12759886063903507529e-5 * sinP1_4 * sinP2_1 + 0.17013181418538010038e-5 * cosP1_4 * cosP2_1) + t11 * (-0.84215248021763149698e-4 * cosP1_2 * cosP2_1 - 0.24669113056880114558e-4 * sinP1_2 * sinP2_1);
    t34 = cosP1_3 * t1;
    t35 = cosP1_1 * t5;
    t36 = sinP1_3 * t1;
    t37 = sinP1_1 * t5;
    t38 = 0.21266476773172512548e-5 * sinP1_2;
    t39 = t11 * t6;
    t40 = t39 * (0.85065907092690050188e-6 * cosP1_2 * cosP2_3 - t38 * sinP2_3);
    t33 = t4 * t33 + t9 * ((-0.17225846186269735164e-5 * t34 + 0.51677538558809205493e-4 * t35) * cosP2_2 + (-0.37641663888515347211e-4 * t37 + 0.12547221296171782403e-5 * t36) * sinP2_2) - 0.35444127955287520912e-7 * t16 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.88610319888218802284e-9 * t17 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.88610319888218802298e-9 * t18 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.35444127955287520914e-7 * t19 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t28 * t20 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t31 * t21 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - t30 * t22 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - t29 * t23 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t32 * t24 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.29773067482441517566e-5 * t35 * t12 * cosP2_4 + t40;
    t40 = 0.17722063977643760458e-8;
    t41 = -0.73841933240182335246e-11;
    t42 = 0.59073546592145868189e-10;
    t43 = 0.18903534909486677818e-8;
    t44 = t10 * (0.17013181418538010038e-5 * cosP1_4 * sinP2_1 + 0.12759886063903507529e-5 * sinP1_4 * cosP2_1) + t11 * (0.84215248021763149698e-4 * cosP1_2 * sinP2_1 - 0.24669113056880114558e-4 * sinP1_2 * cosP2_1);
    t20 = -t28 * t20 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t29 * t23 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t30 * t22 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t31 * t21 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t32 * t24 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t4 * t44 - t40 * t27 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t41 * t14 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t42 * t26 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t43 * t25 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t9 * ((-0.17225846186269735163e-5 * t36 - 0.51677538558809205493e-4 * t37) * cosP2_2 + (-0.12547221296171782403e-5 * t34 - 0.37641663888515347211e-4 * t35) * sinP2_2) - 0.29773067482441517566e-5 * t37 * t12 * cosP2_4 + t39 * (0.85065907092690050184e-6 * cosP1_2 * sinP2_3 + t38 * cosP2_3);
    t16 = t2 * (-0.14886533741220758781e-5 * sinP1_5 * t7 - 0.17863840489464910540e-4 * t36 - 0.30011252022301049704e-2 * t37) + t3 * (0.62523441713127186896e-4 * sinP2_3 * t6 + 0.22865715826515085493e-2 * sinP2_1 * t4 + 0.14886533741220758783e-5 * sinP2_5 * t8) - 0.35444127955287520912e-7 * t16 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.88610319888218802284e-9 * t17 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.88610319888218802298e-9 * t18 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.35444127955287520914e-7 * t19 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t20;
    t17 = 0.21007876415610734793e-1 * t2 + 0.20841147237709062298e-4 * t12 * cosP2_4;
    t18 = 0.89319202447324552690e-5 * t10 * cosP1_4 * t2;
    t19 = (-0.12547221296171782404e-4 * sinP1_2 * sinP2_2 + 0.17225846186269735164e-4 * cosP1_2 * cosP2_2) * t11 * t9;
    t1 = t3 * t17 + 0.11909226992976607028e-4 * t1 * t4 * (-cosP1_3 * cosP2_1 + sinP1_3 * sinP2_1) - 0.17863840489464910541e-4 * t5 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.42532953546345025096e-6 * t5 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.88610319888218802292e-8 * t11 * t13 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.14768386648036467049e-10 * t15 * t13 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.23629418636858347274e-9 * t7 * t8 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.11342120945692006691e-7 * t10 * t12 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.25519772127807015059e-6 * t1 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.65330616647185958549e-3 * t5 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.17722063977643760457e-8 * t15 * t9 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.14177651182115008364e-6 * t7 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + t18 + t19;
    bf[0] = t2 * (-0.30011252022301049704e-2 * t35 - 0.14886533741220758781e-5 * cosP1_5 * t7 + 0.17863840489464910540e-4 * t34) + t3 * (0.22865715826515085493e-2 * cosP2_1 * t4 + 0.14886533741220758783e-5 * cosP2_5 * t8 - 0.62523441713127186896e-4 * cosP2_3 * t6) + t43 * t25 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t42 * t26 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t41 * t14 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t40 * t27 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t33;
    bf[1] = t16;
    bf[2] = t1;
}

static void idsbf_4_6_7_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t6, t7, t8, t9;
    t1 = LegP1[31];
    t2 = LegP2[21];
    t3 = LegP1[28];
    t4 = LegP2[22];
    t5 = LegP2[24];
    t6 = LegP1[33];
    t7 = LegP2[26];
    t8 = LegP1[34];
    t9 = LegP1[29];
    t10 = LegP2[25];
    t11 = LegP1[30];
    t12 = LegP2[27];
    t13 = LegP1[35];
    t14 = LegP2[23];
    t15 = LegP1[32];
    t16 = t9 * t12;
    t17 = t6 * t12;
    t18 = t15 * t7;
    t19 = t1 * t10;
    t20 = t15 * t5;
    t21 = t6 * t10;
    t22 = t8 * t7;
    t23 = t13 * t12;
    t24 = t6 * t14;
    t25 = t8 * t5;
    t26 = t3 * t7;
    t27 = t11 * t7;
    t28 = t1 * t12;
    t29 = t13 * t14;
    t30 = t8 * t4;
    t31 = 0.12892116394191377721e-5;
    t32 = -0.40415761711949160309e-7;
    t33 = 0.23021636418198888788e-7;
    t34 = 0.22510044497794469039e-7;
    t35 = 0.19952084895772370281e-7;
    t36 = 0.76738788060662962617e-9;
    t37 = -0.51159192040441975092e-9;
    t38 = 0.29842862023591152130e-9;
    t39 = 0.92370763406353566126e-10;
    t40 = 0.35527216694751371585e-11;
    t41 = 0.21316330016850822951e-10;
    t42 = -0.27846971411453375881e-2 * t3;
    t43 = 0.14733847307647288815e-4 * cosP1_2 * t11;
    t44 = cosP1_4 * t15;
    t45 = -0.11418731663426648839e-3 * sinP1_2 * t11;
    t46 = t4 * (t45 - 0.23942501874926844338e-5 * sinP1_4 * t15) * sinP2_1;
    t47 = 0.56725312134442061970e-4 * t1;
    t3 = 0.72195851807471715234e-4 * t3 * t5;
    t48 = t3 * cosP2_3;
    t46 = t33 * t16 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t39 * t17 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t36 * t18 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - t34 * t19 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t32 * t20 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t37 * t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t41 * t22 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t40 * t23 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - t35 * t24 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - t38 * t25 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - t31 * (t6 * cosP1_5 * t2 - t26 * cosP2_5) + (-0.24863367331654799893e-4 * sinP1_1 * sinP2_2 - 0.16409822438892167928e-3 * cosP1_1 * cosP2_2) * t14 * t9 + t46 + (0.18417309134559111030e-6 * t44 + t42 + t43) * t4 * cosP2_1 - t47 * cosP1_3 * t2 + t48;
    t48 = -0.30695515224265185049e-7;
    t49 = 0.23021636418198888786e-7;
    t50 = -0.76738788060662962622e-9;
    t51 = 0.42632660033701645902e-9;
    t52 = 0.33099997250165957877e-5 * sinP1_2;
    t53 = -0.73157644617832024367e-6 * cosP1_2;
    t54 = 0.25784232788382755442e-5 * t9;
    t55 = t11 * t5;
    t45 = t15 * (0.23942501874926844338e-5 * sinP1_4 * cosP2_1 + 0.18417309134559111030e-6 * cosP1_4 * sinP2_1) + t45 * cosP2_1;
    t56 = t54 * cosP1_1 * t10 * sinP2_4;
    t57 = t55 * (t52 * cosP2_3 + t53 * sinP2_3);
    t16 = t31 * (-t6 * sinP1_5 * t2 + t26 * sinP2_5) + t32 * t20 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t33 * t16 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t34 * t19 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t35 * t24 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - t36 * t18 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t37 * t21 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t38 * t25 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - t39 * t17 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t4 * t45 + t40 * t23 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t41 * t22 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t48 * t30 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + (0.46043272836397777550e-6 * cosP1_3 * sinP2_2 - 0.30388560072022533199e-5 * sinP1_3 * cosP2_2) * t14 * t1 - t56 + t57;
    t13 = t13 * t5 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t17 = t11 * t14 * (-0.12155424028809013279e-4 * cosP1_2 * cosP2_2 - 0.18417309134559111024e-5 * sinP1_2 * sinP2_2);
    t18 = -0.10313693115353102176e-4 * t44 * t2;
    t5 = -0.77352698365148266322e-5 * t1 * t4 * (-cosP1_3 * cosP2_1 + sinP1_3 * sinP2_1) + 0.25784232788382755444e-5 * t9 * t5 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.46043272836397777584e-7 * t9 * t7 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.17053064013480658359e-8 * t11 * t12 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.42632660033701645905e-10 * t8 * t12 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.21316330016850822951e-9 * t6 * t7 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.40927353632353580073e-8 * t15 * t10 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.24249457027169496190e-6 * t1 * t5 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.99453469326619199599e-4 * t9 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.92086545672795555154e-8 * t8 * t14 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.30695515224265185050e-6 * t6 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.29842862023591152132e-9 * t13 + t17 + t18;
    bf[0] = t49 * t27 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t51 * t28 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t50 * t29 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t48 * t30 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t46 + t54 * sinP1_1 * t10 * sinP2_4 + (-0.30388560072022533199e-5 * cosP1_3 * cosP2_2 - 0.46043272836397777550e-6 * sinP1_3 * sinP2_2) * t14 * t1 + t55 * (t53 * cosP2_3 - t52 * sinP2_3);
    bf[1] = -t49 * t27 * (cosP1_2 * sinP2_5 - sinP1_2 * cosP2_5) + t50 * t29 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t51 * t28 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t16 + (t42 - t43) * t4 * sinP2_1 + t9 * t14 * (0.16409822438892167928e-3 * sinP1_1 * cosP2_2 - 0.24863367331654799893e-4 * cosP1_1 * sinP2_2) + t47 * sinP1_3 * t2 - t3 * sinP2_3;
    bf[2] = t5;
}

static void idsbf_4_6_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t6, t7, t8, t9;
    t1 = LegP1[31];
    t2 = LegP2[25];
    t3 = LegP1[32];
    t4 = LegP2[24];
    t5 = LegP1[33];
    t6 = LegP1[34];
    t7 = LegP2[26];
    t8 = LegP1[35];
    t9 = LegP2[27];
    t10 = LegP1[29];
    t11 = LegP2[23];
    t12 = LegP2[22];
    t13 = LegP1[30];
    t14 = LegP2[21];
    t15 = LegP1[28];
    t16 = t10 * t9;
    t17 = t5 * t9;
    t18 = t3 * t7;
    t19 = t1 * t2;
    t20 = t3 * t4;
    t21 = t5 * t2;
    t22 = t6 * t7;
    t23 = t8 * t9;
    t24 = t8 * t2;
    t25 = t5 * t11;
    t26 = t6 * t4;
    t27 = t13 * t7;
    t28 = t1 * t9;
    t29 = t8 * t11;
    t30 = t6 * t12;
    t31 = t15 * t7;
    t32 = 0.48943826062456006920e-7;
    t33 = 0.45752616890618215995e-7;
    t34 = 0.80676636366685725700e-8;
    t35 = -0.26892212122228575234e-8;
    t36 = 0.25637242223191241720e-8;
    t37 = -0.34661073401983496965e-9;
    t38 = 0.13595507239571113034e-9;
    t39 = 0.59760471382730167186e-10;
    t40 = -0.16434129630250795975e-10;
    t41 = -0.74700589228412708977e-12;
    t42 = t1 * (-0.3227065454667429020e-7 * cosP1_3 * cosP2_2 + 0.87130767276020583756e-6 * sinP1_3 * sinP2_2) + t10 * (0.2904358909200686122e-5 * cosP1_1 * cosP2_2 - 0.78417690548418525386e-4 * sinP1_1 * sinP2_2);
    t43 = 0.12262848727736230306e-5 * sinP1_4;
    t44 = 0.21298632000805031584e-5 * cosP1_4;
    t45 = t3 * t12 * (t44 * cosP2_1 + t43 * sinP2_1);
    t46 = -0.90357832730688012794e-6 * t10;
    t47 = t46 * cosP1_1 * t2 * cosP2_4;
    t42 = t11 * t42 + t13 * (t12 * (0.92164989385301773038e-4 * sinP1_2 * sinP2_1 - 0.7228626618455041030e-5 * cosP1_2 * cosP2_1) + t4 * (0.74760349699795439151e-6 * cosP1_2 * cosP2_3 - 0.15597483030892573633e-6 * sinP1_2 * sinP2_3)) + t34 * t16 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t38 * t17 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t36 * t18 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t33 * t19 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t35 * t20 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t37 * t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t40 * t22 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t41 * t23 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t39 * t24 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t32 * t25 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t45 + t47;
    t45 = 0.45178916365344006388e-6;
    t47 = -0.10756884848891430092e-7;
    t48 = 0.62748494951866675540e-8;
    t49 = 0.15687123737966668885e-8;
    t50 = -0.26892212122228575232e-9;
    t51 = -0.89640707074095250776e-10;
    t52 = t1 * (-0.87130767276020583756e-6 * cosP1_3 * sinP2_2 - 0.3227065454667429020e-7 * sinP1_3 * cosP2_2) + t10 * (-0.78417690548418525386e-4 * cosP1_1 * sinP2_2 - 0.2904358909200686122e-5 * sinP1_1 * cosP2_2);
    t53 = t13 * t4 * (0.15597483030892573633e-6 * sinP1_2 * cosP2_3 + 0.74760349699795439151e-6 * cosP1_2 * sinP2_3);
    t16 = t11 * t52 + t12 * ((0.92164989385301773038e-4 * sinP1_2 * t13 - t43 * t3) * cosP2_1 + (0.7228626618455041030e-5 * cosP1_2 * t13 + t44 * t3) * sinP2_1) - t33 * t19 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t34 * t16 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t35 * t20 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t36 * t18 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t37 * t21 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t38 * t17 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t47 * t30 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t48 * t27 * (cosP1_2 * sinP2_5 - sinP1_2 * cosP2_5) + t50 * t29 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t51 * t28 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t53 + t46 * sinP1_1 * t2 * cosP2_4;
    t16 = t14 * (-0.59636169602254088438e-4 * sinP1_3 * t1 + 0.27324208617760055070e-2 * sinP1_1 * t10) + t15 * (0.32528819783047684600e-4 * sinP2_3 * t4 - 0.30577090596064823522e-2 * sinP2_1 * t12) - t32 * t25 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - t39 * t24 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t40 * t22 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t41 * t23 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t45 * (-t5 * sinP1_5 * t14 + t31 * sinP2_5) - t49 * t26 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t16;
    t17 = t13 * t9 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t18 = 0.21859366894208044056e-1 * t14 - 0.72286266184550410232e-5 * t2 * cosP2_4;
    t13 = (0.17426153455204116752e-4 * sinP1_2 * sinP2_2 - 0.6454130909334858043e-6 * cosP1_2 * cosP2_2) * t13 * t11;
    t19 = -0.10842939927682561533e-4 * t3 * cosP1_4 * t14;
    t2 = t15 * t18 - 0.20916164983955558513e-10 * t6 * t9 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.42728737038652069535e-9 * t5 * t7 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.83186576164760392715e-8 * t3 * t2 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.59162866668902865523e-7 * t1 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.76442726490162058813e-3 * t10 * t12 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.75298193942240010650e-8 * t6 * t11 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.27967900607117718238e-6 * t5 * t12 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.99393616003756814070e-5 * t1 * t12 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.22410176768523812694e-9 * t8 * t4 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.81322049457619211508e-5 * t10 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.11294729091336001598e-6 * t10 * t7 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.17928141414819050156e-8 * t17 + t13 + t19;
    bf[0] = t14 * (0.27324208617760055070e-2 * t10 * cosP1_1 + 0.59636169602254088438e-4 * cosP1_3 * t1) + t15 * (-0.32528819783047684600e-4 * cosP2_3 * t4 - 0.30577090596064823522e-2 * cosP2_1 * t12) + t49 * t26 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - t48 * t27 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t51 * t28 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t50 * t29 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t47 * t30 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) - t45 * (t5 * cosP1_5 * t14 - t31 * cosP2_5) + t42;
    bf[1] = t16;
    bf[2] = t2;
}

static void idsbf_4_6_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t5, t6, t7, t8, t9;
    t1 = LegP1[46];
    t2 = LegP2[23];
    t3 = LegP2[25];
    t4 = LegP1[47];
    t5 = LegP2[26];
    t6 = LegP1[48];
    t7 = LegP2[27];
    t8 = LegP1[53];
    t9 = LegP2[24];
    t10 = LegP1[52];
    t11 = LegP1[51];
    t12 = LegP2[22];
    t13 = LegP1[50];
    t14 = LegP1[49];
    t15 = LegP1[45];
    t16 = LegP2[21];
    t17 = t4 * t5;
    t18 = t6 * t7;
    t19 = LegP1[54] * t3;
    t20 = t8 * t9;
    t21 = t10 * t2;
    t22 = t11 * t12;
    t23 = t1 * t7;
    t24 = t13 * t7;
    t25 = t14 * t5;
    t26 = t6 * t3;
    t27 = t26 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t28 = t14 * t9;
    t29 = t28 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t30 = t13 * t3;
    t31 = t30 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t32 = t11 * t5;
    t33 = t32 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t34 = t10 * t7;
    t35 = t34 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t36 = t10 * t3;
    t37 = t11 * t9;
    t38 = t37 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t39 = t13 * t2;
    t40 = t39 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t41 = t2 * (0.1703803633525047214e-5 * cosP1_1 * cosP2_2 - 0.46002698105176274862e-4 * sinP1_1 * sinP2_2) - 0.85190181676252360856e-6 * cosP1_1 * cosP2_4 * t3;
    t42 = t2 * (-0.3042506488437584315e-7 * cosP1_3 * cosP2_2 + 0.82147675187814776541e-6 * sinP1_3 * sinP2_2) * t6;
    t43 = 0.57929323539851605378e-4 * t4 * sinP1_2;
    t44 = t43 * t12 * sinP2_1;
    t27 = -0.10141688294791947721e-7 * t22 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) - 0.70428390936055192509e-12 * t35 + 0.46952260624036795008e-12 * t36 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t41 * t1 - 0.23476130312018397504e-12 * t19 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.98036320182988827958e-8 * t27 - 0.59159848386286361706e-8 * t17 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.15494246005932142352e-10 * t33 + 0.84514069123266231013e-11 * t24 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.70428390936055192504e-11 * t20 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.32678773394329609325e-9 * t31 + 0.30988492011864284700e-9 * t25 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.25354220736979869302e-9 * t21 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.47327878709029089362e-8 * t23 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.30425064884375843164e-8 * t40 - 0.25354220736979869304e-8 * t29 + t44 + t42 - 0.84514069123266231004e-10 * t18 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.42257034561633115502e-10 * t38;
    t29 = 0.22149447235825613818e-4 * cosP1_2 * t4;
    t31 = cosP1_4 * t14;
    t33 = 0.62878467427710075870e-6 * t31;
    t17 = t17 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t18 = t18 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t19 = t19 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t20 = t20 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t21 = t21 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t22 = t22 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t24 = t24 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t25 = t25 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t26 = t26 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t28 = t28 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t35 = (0.22311714248542284988e-6 * sinP1_4 * t14 + t43) * cosP2_1 + (-t29 + t33) * sinP2_1;
    t38 = (-0.1703803633525047214e-5 * sinP1_1 * cosP2_2 - 0.46002698105176274862e-4 * cosP1_1 * sinP2_2) * t2 * t1;
    t17 = t38 - 0.10141688294791947721e-7 * t22 - 0.70428390936055192509e-12 * t34 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.46952260624036795008e-12 * t36 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t12 * t35 - 0.23476130312018397504e-12 * t19 - 0.98036320182988827958e-8 * t26 - 0.59159848386286361706e-8 * t17 - 0.15494246005932142352e-10 * t32 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.84514069123266231013e-11 * t24 - 0.70428390936055192504e-11 * t20 + 0.32678773394329609325e-9 * t30 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4) - 0.30988492011864284700e-9 * t25 - 0.25354220736979869302e-9 * t21 - 0.47327878709029089362e-8 * t23 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - 0.30425064884375843164e-8 * t39 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.25354220736979869304e-8 * t28 - 0.84514069123266231004e-10 * t18 - 0.42257034561633115502e-10 * t37 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t18 = cosP2_4 * t3;
    t17 = t15 * (0.42595090838126180426e-6 * sinP2_5 * t5 - 0.28828357479243798910e-2 * t12 * sinP2_1) + t6 * (t2 * (-0.82147675187814776541e-6 * cosP1_3 * sinP2_2 - 0.3042506488437584315e-7 * sinP1_3 * cosP2_2) - 0.12778527251437854128e-4 * sinP1_3 * t16) + t9 * (t4 * (0.31946318128594635318e-6 * sinP1_2 * cosP2_3 + 0.53243863547657725532e-6 * cosP1_2 * sinP2_3) + 0.30668465403450849906e-4 * sinP2_3 * t15) + t17 + (0.25761510938898713926e-2 * t16 - 0.85190181676252360856e-6 * t18) * t1 * sinP1_1 - 0.42595090838126180432e-6 * t13 * sinP1_5 * t16;
    t8 = t8 * t3 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t10 = t10 * t9 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t19 = t11 * t2 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t20 = -0.23185359845008842534e-1 * t15 + 0.42595090838126180424e-5 * t31;
    t2 = (-0.11500674526294068716e-4 * sinP1_2 * sinP2_2 + 0.4259509083812618035e-6 * cosP1_2 * cosP2_2) * t4 * t2;
    t18 = 0.76671163508627124772e-5 * t18 * t15;
    t2 = t16 * t20 + 0.81133506358335581766e-7 * t13 * t12 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.51114109005751416508e-5 * t6 * t12 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.68152145341001888683e-5 * t1 * t9 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.94655757418058178722e-7 * t1 * t5 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.11831969677257272341e-8 * t4 * t7 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.42257034561633115501e-11 * t11 * t7 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.12395396804745713881e-9 * t13 * t5 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.32678773394329609322e-8 * t14 * t3 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.30425064884375843164e-7 * t6 * t9 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.64063016620541775360e-3 * t1 * t12 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.46952260624036795002e-12 * t8 + 0.28171356374422077002e-10 * t10 + 0.15212532442187921580e-8 * t19 + t2 + t18;
    bf[0] = t12 * ((-0.28828357479243798910e-2 * t15 + t29 + t33) * cosP2_1 - 0.22311714248542284988e-6 * sinP1_4 * sinP2_1 * t14) + t16 * (-0.42595090838126180432e-6 * cosP1_5 * t13 + 0.25761510938898713926e-2 * cosP1_1 * t1 + 0.12778527251437854128e-4 * cosP1_3 * t6) + t9 * (t4 * (0.53243863547657725532e-6 * cosP1_2 * cosP2_3 - 0.31946318128594635318e-6 * sinP1_2 * sinP2_3) - 0.30668465403450849906e-4 * cosP2_3 * t15) + t27 + 0.42595090838126180426e-6 * t15 * t5 * cosP2_5;
    bf[1] = t17;
    bf[2] = t2;
}

static void idsbf_4_6_9_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t6, t7, t8, t9;
    t1 = LegP1[53];
    t2 = LegP2[26];
    t3 = LegP1[46];
    t4 = LegP2[25];
    t5 = LegP1[52];
    t6 = LegP1[51];
    t7 = LegP2[24];
    t8 = LegP1[50];
    t9 = LegP2[23];
    t10 = LegP1[49];
    t11 = LegP2[22];
    t12 = LegP1[47];
    t13 = LegP1[48];
    t14 = LegP2[27];
    t15 = LegP1[54];
    t16 = LegP1[45];
    t17 = LegP2[21];
    t18 = t1 * t2;
    t19 = t5 * t4;
    t20 = t6 * t7;
    t21 = t8 * t9;
    t22 = t12 * t2;
    t23 = t13 * t14;
    t24 = t15 * t4;
    t25 = t1 * t7;
    t26 = t5 * t9;
    t27 = t6 * t11;
    t28 = t8 * t14;
    t29 = t10 * t2;
    t30 = t13 * t4;
    t31 = t10 * t7;
    t32 = t8 * t4;
    t33 = t6 * t2;
    t34 = t5 * t14;
    t35 = t16 * t2;
    t36 = 0.25860752766283365462e-8;
    t37 = 0.14693609526297366743e-10;
    t38 = 0.65169096971034080968e-5 * sinP1_2 * t12;
    t39 = 0.62065806639080077108e-6 * sinP1_4 * t10;
    t40 = 0.45618367879723856673e-4 * cosP1_2 * t12;
    t41 = cosP1_4 * t10;
    t42 = -0.15516451659770019277e-6 * t41;
    t43 = (t40 + t42) * cosP2_1 + (t38 - t39) * sinP2_1;
    t44 = t13 * (0.58186693724137572289e-6 * cosP1_3 * cosP2_2 + 0.10473604870344763012e-5 * sinP1_3 * sinP2_2) + t3 * (0.92167722859033914508e-4 * sinP1_1 * sinP2_2 + 0.51204290477241063616e-4 * cosP1_1 * cosP2_2);
    t45 = 0.13964806493793017349e-5 * sinP1_2;
    t46 = 0.18619741991724023133e-5 * cosP1_2;
    t47 = t12 * t7 * (t46 * cosP2_3 + t45 * sinP2_3);
    t48 = 0.46549354979310057834e-6 * t3;
    t49 = t48 * sinP1_1 * t4 * sinP2_4;
    t43 = t11 * t43 + t9 * t44 - 0.10495435375926690528e-12 * t18 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - 0.43614364784406469530e-11 * t19 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.18471966261630975330e-9 * t20 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.83123848177339388986e-8 * t21 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t36 * (t22 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) * t14 * t3) + 0.29387219052594733478e-10 * t23 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.12827754348354843980e-12 * t24 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - 0.38483263045064531940e-11 * t25 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.13853974696223231498e-9 * t26 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.55415898784892925992e-8 * t27 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t37 * t28 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t47 + t49;
    t44 = 0.33618978596168375101e-7;
    t47 = 0.68570177789387711455e-9;
    t49 = 0.97957396841982444946e-11;
    t50 = 0.43101254610472275773e-9;
    t51 = 0.19395564574712524098e-7;
    t52 = 0.23274677489655028914e-6;
    t53 = 0.23460874909572269147e-2;
    t54 = 0.18154248441930922554e-4 * t13;
    t55 = t13 * (0.58186693724137572289e-6 * sinP1_3 * cosP2_2 - 0.10473604870344763012e-5 * cosP1_3 * sinP2_2) + t3 * (0.92167722859033914508e-4 * cosP1_1 * sinP2_2 - 0.51204290477241063616e-4 * sinP1_1 * cosP2_2);
    t22 = t11 * ((t38 + t39) * cosP2_1 + (t16 * t53 - t40 + t42) * sinP2_1) - t36 * ((-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) * t14 * t3 + t22 * (cosP1_2 * sinP2_5 - sinP1_2 * cosP2_5)) - t37 * t28 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - t44 * t30 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t47 * t29 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t49 * t33 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t50 * t32 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t51 * t31 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t52 * (-t8 * sinP1_5 * t17 + t35 * sinP2_5) + t7 * (t12 * (-t45 * cosP2_3 + t46 * sinP2_3) - 0.20947209740689526025e-4 * t16 * sinP2_3) + t9 * t55 + t54 * sinP1_3 * t17 - t48 * cosP1_1 * t4 * sinP2_4;
    t18 = 0.24489349210495611233e-12 * t34 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.43614364784406469530e-11 * t19 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.18471966261630975330e-9 * t20 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.29387219052594733478e-10 * t23 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.12827754348354843980e-12 * t24 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) - 0.38483263045064531940e-11 * t25 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - 0.13853974696223231498e-9 * t26 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.55415898784892925992e-8 * t27 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + 0.10495435375926690528e-12 * t18 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.83123848177339388986e-8 * t21 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t22;
    t19 = t3 * t11 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t1 = t1 * t4 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t5 = t5 * t7 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t20 = t6 * t9 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t21 = 0.18619741991724023133e-5 * t41 * t17;
    t9 = t12 * t9 * (0.41894419481379052050e-5 * sinP1_2 * sinP2_2 + 0.23274677489655028918e-5 * cosP1_2 * cosP2_2);
    t1 = -0.10495435375926690529e-12 * t15 * t2 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) - 0.55415898784892925990e-7 * t8 * t11 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.13964806493793017348e-5 * t13 * t11 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.46549354979310057830e-6 * t3 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.51721505532566730920e-8 * t3 * t2 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.11754887621037893393e-9 * t12 * t14 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.29387219052594733482e-11 * t6 * t14 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.97957396841982444938e-10 * t8 * t2 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.34481003688377820620e-8 * t10 * t4 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.11637338744827514457e-6 * t13 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.52135277576827264769e-4 * t19 - 0.20524406957367750368e-11 * t1 - 0.53876568263090344714e-10 * t5 - 0.16624769635467877797e-8 * t20 - t21 + t9;
    bf[0] = t16 * (0.20947209740689526025e-4 * cosP2_3 * t7 + cosP2_1 * t11 * t53) + t47 * t29 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t44 * t30 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t51 * t31 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t50 * t32 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t49 * t33 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.24489349210495611233e-12 * t34 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t52 * (-t8 * cosP1_5 * t17 + t35 * cosP2_5) + t43 - t54 * cosP1_3 * t17;
    bf[1] = t18;
    bf[2] = t1;
}

static void idsbf_4_6_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t8, t9;
    t1 = LegP1[48];
    t2 = LegP2[21];
    t3 = LegP1[45];
    t4 = LegP2[24];
    t5 = LegP1[50];
    t6 = LegP1[46];
    t7 = LegP2[22];
    t8 = LegP2[26];
    t9 = LegP1[53];
    t10 = LegP2[25];
    t11 = LegP1[52];
    t12 = LegP1[51];
    t13 = LegP2[23];
    t14 = LegP1[49];
    t15 = LegP1[47];
    t16 = LegP2[27];
    t17 = LegP1[54];
    t18 = t9 * t8;
    t19 = t11 * t10;
    t20 = t12 * t4;
    t21 = t5 * t13;
    t22 = t15 * t8;
    t23 = t1 * t16;
    t24 = t17 * t10;
    t25 = t9 * t4;
    t26 = t11 * t13;
    t27 = t12 * t7;
    t28 = t6 * t16;
    t29 = t5 * t16;
    t30 = t14 * t8;
    t31 = t1 * t10;
    t32 = t17 * t16;
    t33 = t14 * t4;
    t34 = t5 * t10;
    t35 = t12 * t8;
    t36 = t11 * t16;
    t37 = 0.61159801640282942263e-8;
    t38 = -0.38919873771089145076e-9;
    t39 = 0.19254011627496481822e-9;
    t40 = 0.72202543603111806842e-11;
    t41 = -0.36036920158415875066e-11;
    t42 = 0.36680436589816158552e-12;
    t43 = -0.23595602484677061058e-13;
    t44 = 0.49833006376502541356e-4 * cosP1_2 * t15;
    t45 = cosP1_4 * t14;
    t46 = 0.25687116688918835749e-6 * t45;
    t47 = 0.47469791641122008470e-2 * t3;
    t48 = -0.36475705698264746766e-4 * sinP1_2 * t15;
    t49 = 0.17124744459279223832e-6 * sinP1_4 * t14;
    t50 = sinP1_3 * t1;
    t51 = sinP1_1 * t6;
    t52 = cosP1_3 * t1;
    t53 = t6 * cosP1_1;
    t54 = cosP2_4 * t10;
    t55 = -0.85623722296396119160e-7 * t54;
    t56 = -0.30208049226168550843e-2 * t2;
    t57 = t4 * (0.13414383159768725335e-5 * cosP1_2 * cosP2_3 + 0.12558145936804764143e-5 * sinP1_2 * sinP2_3) * t15;
    t52 = t13 * ((0.84767485073432157971e-4 * t53 - 0.64217791722297089371e-6 * t52) * cosP2_2 + (0.73465153730307870243e-4 * t51 - 0.55655419492657477455e-6 * t50) * sinP2_2) + t2 * (-0.42811861148198059582e-7 * cosP1_5 * t5 + 0.77917587289720468442e-5 * t52) + t3 * (0.42811861148198059588e-7 * cosP2_5 * t8 - 0.47093047263017865542e-5 * cosP2_3 * t4) + t7 * ((-t44 + t46 + t47) * cosP2_1 + (t48 + t49) * sinP2_1) + t42 * t18 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t40 * t19 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t39 * t20 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t37 * t21 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t38 * t22 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t41 * t23 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t43 * t24 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + (t55 + t56) * t6 * cosP1_1 + t57;
    t57 = 0.21643774247144574568e-7;
    t58 = -0.83245285565940671398e-8;
    t59 = -0.10193300273380490378e-8;
    t60 = 0.47568734609108955091e-9;
    t61 = 0.37838766166336668825e-9;
    t62 = -0.11892183652277238774e-9;
    t63 = -0.25483250683451225946e-10;
    t64 = 0.72073840316831750142e-11;
    t65 = -0.18018460079207937536e-11;
    t66 = -0.70786807454031183170e-12;
    t67 = 0.33963367212792739402e-13;
    t68 = -0.30030766798679895895e-13;
    t69 = t1 * (-0.64217791722297089371e-6 * sinP1_3 * cosP2_2 + 0.55655419492657477455e-6 * cosP1_3 * sinP2_2) * t13;
    t51 = t51 * (-0.84767485073432157971e-4 * cosP2_2 * t13 + t55 + t56);
    t20 = t2 * (-0.77917587289720468442e-5 * t50 - 0.42811861148198059582e-7 * sinP1_5 * t5) - t37 * t21 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t38 * t22 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - t39 * t20 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t4 * (t15 * (0.13414383159768725335e-5 * cosP1_2 * sinP2_3 - 0.12558145936804764143e-5 * sinP1_2 * cosP2_3) + 0.47093047263017865542e-5 * t3 * sinP2_3) + t41 * t23 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t43 * t24 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t59 * t27 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t63 * t26 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t66 * t25 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t7 * ((t48 - t49) * cosP2_1 + (t44 + t46 + t47) * sinP2_1) + 0.42811861148198059588e-7 * t3 * t8 * sinP2_5 + t69 + t51;
    t18 = -t40 * t19 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t42 * t18 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - t57 * t31 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t58 * t33 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t60 * t28 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - t61 * t30 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t62 * t34 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t64 * t29 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t65 * t35 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - t67 * t32 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t68 * t36 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t20 + 0.73465153730307870243e-4 * t53 * t13 * sinP2_2;
    t19 = t6 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t20 = t15 * t16 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t16 = t12 * t16 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t21 = t5 * t8 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t22 = -0.30208049226168550841e-1 * t2 - 0.85623722296396119160e-6 * t54;
    t2 = -0.11987321121495456683e-5 * t45 * t2;
    t15 = (-0.15412270013351301448e-4 * cosP1_2 * cosP2_2 - 0.13357300678237794588e-4 * sinP1_2 * sinP2_2) * t15 * t13;
    t1 = -0.54055380237623812606e-10 * t21 - 0.24067514534370602278e-10 * t11 * t4 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.40756040655351287280e-13 * t17 * t8 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) - 0.30579900820141471130e-7 * t5 * t7 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.94939583282244016927e-3 * t6 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.86488608380198100160e-10 * t20 + t2 - 0.33298114226376268566e-8 * t14 * t10 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.81546402187043923008e-9 * t12 * t13 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.85623722296396119160e-8 * t19 + t15 + t22 * t3 - 0.21643774247144574565e-6 * t1 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.94186094526035731078e-6 * t6 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.96098453755775666854e-12 * t16 - 0.84944168944837419806e-12 * t9 * t10 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.11131083898531495491e-5 * t1 * t7 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    bf[0] = t66 * t25 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t63 * t26 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t59 * t27 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t60 * t28 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t64 * t29 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t61 * t30 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t57 * t31 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t67 * t32 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + t58 * t33 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t62 * t34 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t65 * t35 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t68 * t36 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t52;
    bf[1] = t18;
    bf[2] = t1;
}

static void idsbf_4_6_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t7, t8, t9;
    t1 = LegP1[72];
    t2 = LegP2[26];
    t3 = LegP1[73];
    t4 = LegP2[27];
    t5 = LegP2[25];
    t6 = LegP2[24];
    t7 = LegP1[71];
    t8 = LegP2[23];
    t9 = LegP1[70];
    t10 = LegP2[22];
    t11 = LegP1[68];
    t12 = LegP1[67];
    t13 = LegP1[69];
    t14 = LegP1[76];
    t15 = LegP1[75];
    t16 = LegP1[74];
    t17 = LegP1[66];
    t18 = LegP2[21];
    t19 = t1 * t2;
    t20 = t3 * t4;
    t21 = t3 * t5;
    t22 = t1 * t6;
    t23 = t7 * t8;
    t24 = t11 * t2;
    t25 = t13 * t4;
    t26 = LegP1[77] * t4;
    t27 = t14 * t2;
    t28 = t15 * t5;
    t29 = t16 * t6;
    t30 = t3 * t8;
    t31 = t30 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t32 = t1 * t10;
    t33 = t12 * t4;
    t34 = t7 * t4;
    t35 = t9 * t2;
    t36 = t13 * t5;
    t37 = t9 * t6;
    t38 = t15 * t4;
    t39 = t16 * t2;
    t40 = t7 * t5;
    t41 = 0.44085068619246394579e-4 * cosP1_2 * t11;
    t42 = cosP1_4 * t9;
    t43 = 0.81639015961567397372e-7 * t42;
    t44 = 0.45260670449092965096e-2 * t17;
    t45 = -0.38207059470013541967e-4 * t11 * sinP1_2;
    t46 = (-t41 + t43 + t44) * cosP2_1 + t45 * sinP2_1;
    t47 = cosP2_2 * t8;
    t48 = 0.55106335774057993225e-4 * t47;
    t49 = cosP2_4 * t5;
    t50 = -0.81639015961567397366e-7 * t49;
    t51 = -0.28802244831240977792e-2 * t18;
    t52 = (t48 + t50 + t51) * cosP1_1 + 0.47758824337516927461e-4 * sinP1_1 * sinP2_2 * t8;
    t53 = -0.44901458778862068550e-5 * cosP2_3 * t6 + 0.40819507980783698678e-7 * cosP2_5 * t2;
    t54 = -0.40819507980783698682e-7 * t7;
    t55 = t54 * cosP1_5 * t18;
    t47 = (0.22858924469238871262e-5 * t18 - 0.61229261971175548022e-6 * t47) * t13 * cosP1_3;
    t31 = t46 * t10 + t52 * t12 + t53 * t17 - 0.10226147381749964597e-14 * t27 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + t47 - 0.24297326179037915886e-10 * t31 + 0.13498514543909953268e-10 * t22 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.37108643618894271530e-9 * t24 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.34359855202679881045e-11 * t25 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.17179927601339940524e-11 * t19 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.72891978537113747650e-9 * t23 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.85217894847916371634e-16 * t26 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + t55 - 0.28633212668899900872e-13 * t20 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.22497524239849922115e-13 * t28 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - 0.67492572719549766346e-12 * t29 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.26997029087819906538e-12 * t21 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t46 = 0.53065360375018808283e-6 * sinP1_2;
    t47 = 0.61229261971175548019e-6 * cosP1_2;
    t52 = t11 * t6;
    t29 = t29 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t30 = t30 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t53 = t32 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t55 = t33 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t56 = t39 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t21 = t21 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t57 = t34 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t58 = t35 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t59 = t36 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t60 = t37 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t61 = t40 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t19 = t19 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t22 = t22 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t23 = t23 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t24 = t24 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t25 = t25 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t62 = (-0.61229261971175548022e-6 * sinP1_3 * cosP2_2 + 0.53065360375018808286e-6 * cosP1_3 * sinP2_2) * t13 * t8;
    t63 = t52 * (-t46 * cosP2_3 + t47 * sinP2_3);
    t19 = -0.10226147381749964597e-14 * t27 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) - 0.17043578969583274329e-15 * t38 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t62 - 0.72155695925627750208e-10 * t58 - 0.24297326179037915886e-10 * t30 - 0.13498514543909953268e-10 * t22 - 0.37108643618894271530e-9 * t24 - 0.34359855202679881045e-11 * t25 - 0.17179927601339940524e-11 * t19 - 0.61356884290499787579e-14 * t56 - 0.63497012414552420171e-8 * t59 - 0.97189304716151663530e-9 * t53 - 0.72891978537113747650e-9 * t23 - 0.85217894847916371634e-16 * t26 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) + t63 - 0.30923869682411892940e-9 * t55 - 0.11338752216884360746e-9 * t61 - 0.79371265518190525214e-8 * t60 - 0.28633212668899900872e-13 * t20 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.22497524239849922115e-13 * t28 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) - 0.85899638006699702621e-12 * t57 - 0.67492572719549766346e-12 * t29 - 0.26997029087819906538e-12 * t21;
    t19 = t10 * ((t41 + t43 + t44) * sinP2_1 + t45 * cosP2_1) + t12 * ((-t48 + t50 + t51) * sinP1_1 + 0.47758824337516927461e-4 * cosP1_1 * sinP2_2 * t8) + t17 * (0.40819507980783698678e-7 * sinP2_5 * t2 + 0.44901458778862068550e-5 * sinP2_3 * t6) + t18 * (-0.22858924469238871262e-5 * t13 * sinP1_3 + t54 * sinP1_5) + t19;
    t3 = t3 * t6 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t20 = t1 * t8 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t21 = t7 * t10 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t22 = t13 * t10 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t23 = t12 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t24 = t12 * t2 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t25 = 0.31682469314365075568e-1 * t17 + 0.57147311173097178154e-6 * t42;
    t17 = 0.89802917557724137092e-6 * t49 * t17;
    t26 = (0.95517648675033854908e-5 * sinP1_2 * sinP2_2 + 0.11021267154811598643e-4 * cosP1_2 * cosP2_2) * t11 * t8;
    t1 = t25 * t18 - 0.81639015961567397366e-6 * t23 + 0.17043578969583274329e-15 * t14 * t4 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) - 0.65311212769253917894e-6 * t22 + 0.61847739364823785880e-10 * t11 * t4 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.24297326179037915884e-9 * t20 + 0.12699402482910484034e-6 * t13 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + t17 + 0.28633212668899900873e-12 * t1 * t4 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.53994058175639813074e-11 * t3 + 0.20615913121607928628e-10 * t7 * t2 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.40904589526999858388e-14 * t15 * t2 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + 0.13498514543909953269e-12 * t16 * t5 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.82292128089259936554e-3 * t12 * t10 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.74217287237788543058e-8 * t24 + 0.11662716565938199624e-7 * t21 + 0.15874253103638105045e-8 * t9 * t5 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + t26;
    bf[0] = -0.97189304716151663530e-9 * t32 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.30923869682411892940e-9 * t33 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.85899638006699702621e-12 * t34 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.72155695925627750208e-10 * t35 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.63497012414552420171e-8 * t36 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.79371265518190525214e-8 * t37 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.17043578969583274329e-15 * t38 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + 0.61356884290499787579e-14 * t39 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - 0.11338752216884360746e-9 * t40 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t31 - 0.53065360375018808286e-6 * t13 * sinP1_3 * t8 * sinP2_2 + t52 * (t47 * cosP2_3 + t46 * sinP2_3);
    bf[1] = t19;
    bf[2] = t1;
}

static void idsbf_4_8_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[8];
    t2 = LegP2[37];
    t3 = LegP1[7];
    t4 = LegP2[38];
    t5 = LegP2[40];
    t6 = LegP2[41];
    t7 = LegP1[9];
    t8 = LegP2[42];
    t9 = LegP2[39];
    t10 = LegP2[43];
    t11 = LegP2[36];
    t12 = LegP1[6];
    t13 = t1 * t6;
    t14 = t7 * t8;
    t15 = t1 * cosP1_2 * t9;
    t16 = t7 * cosP1_3;
    t17 = t16 * t4;
    t18 = t1 * sinP1_2 * t9;
    t19 = t7 * sinP1_3;
    t20 = t19 * t4;
    t21 = t3 * t8;
    t22 = t1 * t10;
    t23 = t7 * LegP2[44];
    t24 = t7 * t5;
    t25 = -0.40374544344154910554e-5;
    t26 = 0.34991271764934255814e-5;
    t27 = 0.12560969351514861063e-6;
    t28 = 0.22430302413419394758e-7;
    t29 = -0.13458181448051636853e-7;
    t30 = 0.22430302413419394754e-8;
    t31 = -0.74767674711397982512e-9;
    t32 = 0.37383837355698991254e-9;
    t5 = cosP2_4 * t5;
    t33 = -0.53832725792206547418e-6 * t5;
    t34 = -0.63307285531634899758e-2 * t11;
    t35 = t4 * cosP2_2;
    t36 = 0.31653642765817449876e-2 * t12;
    t19 = t12 * (0.53832725792206547410e-5 * t9 * sinP2_3 + 0.26916362896103273704e-6 * sinP2_5 * t6) + t2 * (t1 * (0.16957308624545062434e-3 * cosP1_2 * sinP2_1 - 0.14696334141272387442e-3 * sinP1_2 * cosP2_1) + t36 * sinP2_1) + t25 * (t20 * cosP2_2 - t15 * sinP2_3) + t26 * (-t18 * cosP2_3 + t17 * sinP2_2) - t27 * t24 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t28 * t21 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t29 * t13 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t3 * ((-0.12112363303246473167e-3 * t35 + t33 + t34) * sinP1_1 + 0.10497381529480276745e-3 * cosP1_1 * sinP2_2 * t4) - t30 * t22 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + t31 * t14 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - t32 * t23 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - 0.15073163221817833276e-4 * t19 * t11;
    t5 = t12 * (-0.25322914212653959900e-1 * t11 - 0.21533090316882618962e-5 * t5) + 0.37682908054544583186e-5 * t7 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.26916362896103273702e-5 * t3 * t9 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.13458181448051636853e-6 * t3 * t6 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.89721209653677579022e-8 * t1 * t8 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.74767674711397982508e-9 * t7 * t10 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) - 0.12560969351514861061e-5 * t7 * t9 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.15826821382908724938e-2 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t1 * t4 * (-0.41989526117921106982e-4 * sinP1_2 * sinP2_2 - 0.48449453212985892672e-4 * cosP1_2 * cosP2_2);
    bf[0] = t12 * (0.26916362896103273704e-6 * cosP2_5 * t6 - 0.53832725792206547410e-5 * t9 * cosP2_3) + t2 * (t1 * (-0.14696334141272387442e-3 * sinP1_2 * sinP2_1 - 0.16957308624545062434e-3 * cosP1_2 * cosP2_1) + t36 * cosP2_1) + t3 * ((0.12112363303246473168e-3 * t35 + t33 + t34) * cosP1_1 + 0.10497381529480276744e-3 * sinP1_1 * sinP2_2 * t4) + t29 * t13 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t31 * t14 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t25 * (t17 * cosP2_2 - t15 * cosP2_3) - t26 * (t20 * sinP2_2 - t18 * sinP2_3) + t28 * t21 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t30 * t22 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t32 * t23 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + t27 * t24 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.15073163221817833276e-4 * t16 * t11;
    bf[1] = t19;
    bf[2] = t5;
}

static void idsbf_4_8_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t6, t7, t8, t9;
    t1 = LegP1[17];
    t2 = LegP2[37];
    t3 = LegP1[16];
    t4 = LegP2[38];
    t5 = LegP2[40];
    t6 = LegP2[41];
    t7 = LegP1[18];
    t8 = LegP2[42];
    t9 = LegP1[19];
    t10 = LegP2[43];
    t11 = LegP1[20];
    t12 = LegP2[44];
    t13 = LegP2[39];
    t14 = LegP1[15];
    t15 = LegP2[36];
    t16 = t14 * t6;
    t17 = t1 * t6;
    t18 = t7 * t8;
    t19 = t9 * t10;
    t20 = t11 * t12;
    t21 = t9 * t2;
    t22 = t3 * t8;
    t23 = t1 * t10;
    t24 = t7 * t12;
    t25 = t7 * t5;
    t26 = t9 * t13;
    t27 = t11 * t5;
    t28 = t27 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t29 = -0.56623757567889819528e-2;
    t30 = -0.12037363428548005852e-7;
    t31 = 0.80249089523653372350e-8;
    t32 = -0.20062272380913343085e-8;
    t33 = -0.66874241269711143622e-9;
    t34 = -0.47767315192650816864e-10;
    t35 = 0.11941828798162704218e-10;
    t36 = -0.59709143990813521084e-11;
    t37 = 0.28660389115590490122e-9;
    t38 = 0.24074726857096011700e-6;
    t39 = 0.24074726857096011702e-6;
    t40 = sinP2_3 * t13;
    t41 = cosP2_3 * t13;
    t42 = cosP2_1 * t2;
    t43 = (0.72224180571288035105e-6 * t41 - 0.14300387753115030951e-3 * t42) * cosP1_2 + (0.24074726857096011701e-6 * t40 - 0.14011491030829878811e-3 * sinP2_1 * t2) * sinP1_2;
    t44 = sinP1_3 * t7;
    t45 = sinP1_1 * t3;
    t46 = t7 * cosP1_3;
    t47 = cosP1_1 * t3;
    t48 = (-0.36112090285644017553e-5 * t46 + 0.43334508342772821063e-4 * t47) * cosP2_2 + (0.37556573897069778255e-4 * t45 - 0.31297144914224815213e-5 * t44) * sinP2_2;
    t49 = cosP2_4 * t5;
    t50 = 0.48149453714192023406e-6 * t49;
    t51 = 0.48149453714192023408e-6 * t7;
    t28 = t33 * t18 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t34 * t19 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t35 * t24 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + t39 * (-t11 * cosP1_5 * t15 + t16 * cosP2_5) + t51 * cosP1_3 * t15 + t38 * t21 * (cosP1_4 * cosP2_1 - sinP1_4 * sinP2_1) + t36 * t20 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t43 * t1 + t48 * t4 + (-0.48149453714192023400e-5 * t41 + 0.28311878783944909763e-2 * t42) * t14 + t37 * t23 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.40124544761826686172e-8 * t25 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.80249089523653372338e-7 * t26 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t30 * t17 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t47 * (t15 * t29 - t50) + t31 * t22 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t32 * t28;
    t29 = -0.56623757567889819530e-2;
    t42 = (-0.36112090285644017555e-5 * t44 - 0.43334508342772821063e-4 * t45) * cosP2_2 + (0.31297144914224815215e-5 * t46 + 0.37556573897069778253e-4 * t47) * sinP2_2;
    t43 = t1 * (0.14300387753115030951e-3 * cosP1_2 * sinP2_1 - 0.14011491030829878811e-3 * sinP1_2 * cosP2_1) + 0.28311878783944909763e-2 * sinP2_1 * t14;
    t29 = t45 * (t15 * t29 - t50);
    t40 = t40 * (0.48149453714192023400e-5 * t14 + 0.72224180571288035106e-6 * cosP1_2 * t1);
    t44 = (0.21667254171386410532e-4 * cosP1_2 * cosP2_2 + 0.18778286948534889128e-4 * sinP1_2 * sinP2_2) * t4 * t1;
    t3 = t15 * (0.28311878783944909761e-1 * t14 + 0.48149453714192023406e-6 * cosP1_4 * t9) - 0.96298907428384046804e-6 * t7 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.19259781485676809361e-5 * t3 * t13 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.96298907428384046818e-7 * t3 * t6 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.19106926077060326747e-9 * t7 * t10 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.11941828798162704217e-10 * t9 * t12 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) + 0.40124544761826686173e-8 * t9 * t5 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.32099635809461348939e-6 * t7 * t13 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.11324751513577963906e-2 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.40124544761826686172e-8 * t1 * t8 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.24074726857096011700e-5 * t49 * t14 + t44;
    bf[0] = t28;
    bf[1] = t2 * t43 + t30 * t17 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - t31 * t22 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t32 * t27 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t33 * t18 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t34 * t19 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - t35 * t24 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + t36 * t20 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t37 * t23 * (cosP1_2 * sinP2_7 - sinP1_2 * cosP2_7) + t38 * t21 * (cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t39 * (-t41 * t1 * sinP1_2 - t11 * sinP1_5 * t15 + t16 * sinP2_5) + t4 * t42 - 0.40124544761826686171e-8 * t25 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.80249089523653372342e-7 * t26 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t51 * sinP1_3 * t15 + t29 + t40;
    bf[2] = t3;
}

static void idsbf_4_8_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t6, t7, t8, t9;
    t1 = LegP1[15];
    t2 = LegP2[41];
    t3 = LegP2[37];
    t4 = LegP1[16];
    t5 = LegP2[36];
    t6 = LegP1[18];
    t7 = LegP2[39];
    t8 = LegP1[20];
    t9 = LegP1[17];
    t10 = LegP2[38];
    t11 = LegP2[40];
    t12 = LegP2[42];
    t13 = LegP1[19];
    t14 = LegP2[43];
    t15 = LegP2[44];
    t16 = t9 * t2;
    t17 = t6 * t12;
    t18 = t13 * t14;
    t19 = t8 * t15;
    t20 = t4 * t12;
    t21 = t9 * t14;
    t22 = t6 * t15;
    t23 = t6 * t11;
    t24 = t8 * t10;
    t25 = t8 * t12;
    t26 = t13 * t2;
    t27 = t13 * t7;
    t28 = t27 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t29 = t8 * t11;
    t30 = t29 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t31 = t1 * t2;
    t32 = 0.41191411140014602769e-7;
    t33 = 0.19885508826213946166e-7;
    t34 = 0.15624328363453814844e-7;
    t35 = -0.14203934875867104404e-7;
    t36 = -0.35509837189667761012e-8;
    t37 = 0.23870501666387772678e-8;
    t38 = 0.71019674379335522012e-9;
    t39 = -0.45768234600016225296e-9;
    t40 = 0.35509837189667761012e-9;
    t41 = 0.13020273636211512369e-9;
    t42 = 0.29591530991389800842e-10;
    t43 = -0.98638436637966002802e-11;
    t44 = -0.32879478879322000930e-12;
    t45 = 0.59656526478641838494e-6;
    t46 = t10 * (-0.64429048596933185579e-4 * sinP1_1 * sinP2_2 + 0.2386261059145673537e-5 * cosP1_1 * cosP2_2) - 0.11931305295728367699e-5 * cosP1_1 * cosP2_4 * t11;
    t47 = t9 * (0.99029833954545451898e-4 * sinP1_2 * sinP2_1 + 0.13124435825301204466e-4 * cosP1_2 * cosP2_1) + 0.15079844193212242509e-5 * cosP1_4 * cosP2_1 * t13;
    t48 = t10 * (-0.4261180462760131315e-7 * cosP1_3 * cosP2_2 + 0.11505187249452354568e-5 * sinP1_3 * sinP2_2) + 0.53690873830777654644e-4 * cosP1_3 * t5;
    t49 = t9 * (0.85223609255202626424e-6 * cosP1_2 * cosP2_3 - 0.34089443702081050568e-6 * sinP1_2 * sinP2_3) - 0.25055741121029572166e-4 * cosP2_3 * t1;
    t50 = -0.23552396653767797836e-2 * cosP2_1 * t1 + 0.31485388974838748101e-6 * sinP1_4 * sinP2_1 * t13;
    t51 = 0.36080267214282583928e-2 * t5;
    t52 = -t8 * sinP1_5 * t5 + t31 * sinP2_5;
    t53 = (-0.4261180462760131315e-7 * sinP1_3 * cosP2_2 - 0.11505187249452354568e-5 * cosP1_3 * sinP2_2) * t10 * t6;
    t54 = (0.34089443702081050568e-6 * sinP1_2 * cosP2_3 + 0.85223609255202626424e-6 * cosP1_2 * sinP2_3) * t9 * t7;
    t55 = t13 * t3 * (0.15079844193212242509e-5 * cosP1_4 * sinP2_1 - 0.31485388974838748101e-6 * sinP1_4 * cosP2_1);
    t27 = -t32 * t23 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t33 * t20 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - t34 * t24 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t35 * t16 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t36 * t27 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t37 * t26 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t38 * t21 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + t39 * t29 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t40 * t17 * (cosP1_3 * sinP2_6 - sinP1_3 * cosP2_6) - t41 * t25 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - t42 * t22 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + t43 * t18 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t44 * t19 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t45 * t52 + t53 + t54 + t55;
    t29 = cosP2_4 * t11;
    t27 = t3 * (t9 * (-0.13124435825301204466e-4 * cosP1_2 * sinP2_1 + 0.99029833954545451898e-4 * sinP1_2 * cosP2_1) - 0.23552396653767797836e-2 * sinP2_1 * t1) + t4 * ((t51 - 0.11931305295728367699e-5 * t29 - 0.2386261059145673537e-5 * cosP2_2 * t10) * sinP1_1 - 0.64429048596933185579e-4 * cosP1_1 * sinP2_2 * t10) + t27 + 0.25055741121029572166e-4 * t1 * t7 * sinP2_3 - 0.53690873830777654644e-4 * t6 * sinP1_3 * t5;
    t52 = 0.21648160328569550356e-1 * t1 - 0.11931305295728367698e-4 * cosP1_4 * t13;
    t10 = (-0.6817888740416210099e-6 * cosP1_2 * cosP2_2 + 0.18408299599123767307e-4 * sinP1_2 * sinP2_2) * t10 * t9;
    t1 = -0.71587831774370206194e-5 * t29 * t1;
    t1 = t5 * t52 - 0.18228383090696117317e-6 * t8 * t3 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.47741003332775545352e-9 * t8 * t2 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.10738174766155530929e-4 * t6 * t3 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.83519137070098573894e-5 * t4 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.19885508826213946163e-6 * t4 * t2 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.56815739503468417610e-8 * t9 * t12 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.17754918594833880503e-9 * t6 * t14 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) - 0.65758957758644001864e-11 * t13 * t15 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) - 0.91536469200032450594e-8 * t13 * t11 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.63917706941401969821e-7 * t6 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.78507988845892659455e-3 * t4 * t3 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t10 + t1;
    bf[0] = t3 * t50 + t6 * t48 + t7 * t49 + t46 * t4 + t47 * t3 + t36 * t28 + t37 * t26 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t38 * t21 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t39 * t30 - t40 * t17 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t32 * t23 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t44 * t19 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t45 * (-t8 * cosP1_5 * t5 + t31 * cosP2_5) + t41 * t25 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t42 * t22 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + t43 * t18 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t33 * t20 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t34 * t24 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t35 * t16 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t51 * t4 * cosP1_1;
    bf[1] = t27;
    bf[2] = t1;
}

static void idsbf_4_8_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t5, t6, t7, t8, t9;
    t1 = LegP1[33];
    t2 = LegP2[38];
    t3 = LegP1[32];
    t4 = LegP2[37];
    t5 = LegP1[30];
    t6 = LegP1[29];
    t7 = LegP2[40];
    t8 = LegP1[31];
    t9 = LegP2[36];
    t10 = LegP1[28];
    t11 = LegP2[39];
    t12 = LegP2[41];
    t13 = LegP2[42];
    t14 = LegP2[43];
    t15 = LegP2[44];
    t16 = LegP1[35];
    t17 = LegP1[34];
    t18 = t1 * t2;
    t19 = t5 * t12;
    t20 = t8 * t13;
    t21 = t3 * t14;
    t22 = t1 * t15;
    t23 = t16 * t2;
    t24 = t17 * t4;
    t25 = t6 * t13;
    t26 = t5 * t14;
    t27 = t8 * t15;
    t28 = t27 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t29 = t1 * t13;
    t30 = t29 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t31 = t3 * t12;
    t32 = t31 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t33 = t8 * t7;
    t34 = t3 * t11;
    t35 = t34 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t36 = t1 * t7;
    t37 = t36 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t38 = t17 * t12;
    t39 = t38 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t16 = t16 * t13;
    t40 = t16 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t41 = cosP1_4 * t3;
    t42 = (0.40871096359439633313e-4 * cosP1_2 * t5 + 0.59833812237918382100e-6 * t41) * cosP2_1 + (-0.50628610355161707932e-6 * sinP1_4 * t3 + 0.62963580878055651321e-4 * sinP1_2 * t5) * sinP2_1;
    t43 = (-0.31955200821569597479e-4 * sinP1_1 * sinP2_2 + 0.11835259563544295338e-5 * cosP1_1 * cosP2_2) * t6 * t2;
    t28 = -0.32875721009845264893e-8 * t35 - 0.42373151523800563638e-9 * t37 - 0.32875721009845264896e-9 * t20 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.10958573669948421633e-9 * t23 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.20090718394905439658e-10 * t39 + t43 + 0.21917147339896843262e-9 * t18 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.18264289449914036052e-9 * t26 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.12054431036943263794e-9 * t32 + 0.98627163029535794690e-8 * t25 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - 0.76710015689638951422e-8 * t24 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.50847781828560676366e-8 * t33 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.91321447249570180262e-12 * t40 - 0.30440482416523393416e-12 * t22 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) - 0.91321447249570180254e-11 * t21 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + 0.36528578899828072104e-11 * t28 + 0.18264289449914036052e-11 * t30 + t4 * t42 - 0.13150288403938105958e-7 * t19 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t30 = cosP2_1 * t4;
    t32 = cosP2_4 * t7;
    t35 = -0.11046242259308009004e-5 * t32;
    t37 = -0.55231211296540045016e-6 * t1;
    t20 = t20 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t21 = t21 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t22 = t22 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t23 = t23 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t24 = t24 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t25 = t25 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t26 = t26 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t29 = t29 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t31 = t31 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t33 = t33 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t39 = sinP2_3 * t11;
    t40 = sinP2_1 * t4;
    t42 = 0.55231211296540045022e-6 * sinP2_5 * t12 - 0.21805282219874009774e-2 * t40 + 0.23197108744546818910e-4 * t39;
    t43 = sinP1_1 * t6;
    t44 = -0.66277453555848054032e-5 * sinP1_3 * t8 + t37 * sinP1_5 + 0.33403836592147419234e-2 * t43;
    t16 = -0.32875721009845264893e-8 * t34 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - 0.42373151523800563638e-9 * t36 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.32875721009845264896e-9 * t20 - 0.10958573669948421633e-9 * t23 - 0.20090718394905439658e-10 * t38 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.21917147339896843262e-9 * t18 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.18264289449914036052e-9 * t26 - 0.12054431036943263794e-9 * t31 - 0.98627163029535794690e-8 * t25 - 0.76710015689638951422e-8 * t24 - 0.50847781828560676366e-8 * t33 - 0.91321447249570180262e-12 * t16 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.30440482416523393416e-12 * t22 - 0.91321447249570180254e-11 * t21 - 0.36528578899828072104e-11 * t27 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - 0.18264289449914036052e-11 * t29 + t42 * t10 + t44 * t9 - 0.13150288403938105958e-7 * t19 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t16 = t2 * (t6 * (-0.31955200821569597479e-4 * cosP1_1 * sinP2_2 - 0.11835259563544295338e-5 * sinP1_1 * cosP2_2) + t8 * (-0.10651733607189865827e-5 * cosP1_3 * sinP2_2 - 0.3945086521181431781e-7 * sinP1_3 * cosP2_2)) + t5 * ((0.61806355498509098001e-6 * t39 - 0.40871096359439633313e-4 * t40) * cosP1_2 + (0.62963580878055651321e-4 * t30 + 0.48656067094570992043e-6 * cosP2_3 * t11) * sinP1_2) + t16 + t43 * t35 + t3 * t4 * (0.50628610355161707932e-6 * sinP1_4 * cosP2_1 + 0.59833812237918382100e-6 * cosP1_4 * sinP2_1);
    t15 = t3 * t15 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t18 = t17 * t13 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t19 = t1 * t12 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t20 = -0.23382685614503193467e-1 * t9 + 0.77323695815156063034e-5 * t32;
    t21 = (-0.10651733607189865827e-4 * sinP1_2 * sinP2_2 + 0.3945086521181431783e-6 * cosP1_2 * cosP2_2) * t5 * t2;
    t22 = 0.33138726777924027012e-5 * t41 * t9;
    t1 = t10 * t20 + 0.25423890914280338183e-8 * t3 * t7 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.26300576807876211920e-7 * t8 * t11 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.62300806342497170782e-3 * t6 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.30684006275855580566e-7 * t1 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.44184969037232036022e-5 * t8 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.66277453555848054026e-5 * t6 * t11 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.15780346084725727149e-6 * t6 * t12 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.32875721009845264896e-8 * t5 * t13 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.73057157799656144212e-10 * t8 * t14 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.18264289449914036051e-11 * t15 + 0.18264289449914036052e-11 * t18 + 0.80362873579621758624e-10 * t19 + 0.21917147339896843262e-9 * t17 * t2 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + t21 + t22;
    bf[0] = t10 * (-0.21805282219874009774e-2 * t30 + 0.55231211296540045022e-6 * cosP2_5 * t12) + t11 * (t5 * (0.61806355498509098001e-6 * cosP1_2 * cosP2_3 - 0.48656067094570992043e-6 * sinP1_2 * sinP2_3) - 0.23197108744546818910e-4 * cosP2_3 * t10) + t8 * (t2 * (0.10651733607189865827e-5 * sinP1_3 * sinP2_2 - 0.3945086521181431781e-7 * cosP1_3 * cosP2_2) + 0.66277453555848054032e-5 * cosP1_3 * t9) + t28 + (0.33403836592147419234e-2 * t9 + t35) * t6 * cosP1_1 + t37 * cosP1_5 * t9;
    bf[1] = t16;
    bf[2] = t1;
}

static void idsbf_4_8_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t6, t7, t8, t9;
    t1 = LegP1[35];
    t2 = LegP2[44];
    t3 = LegP1[34];
    t4 = LegP2[43];
    t5 = LegP1[33];
    t6 = LegP2[38];
    t7 = LegP1[32];
    t8 = LegP2[37];
    t9 = LegP1[30];
    t10 = LegP1[29];
    t11 = LegP2[40];
    t12 = LegP2[41];
    t13 = LegP1[31];
    t14 = LegP2[42];
    t15 = LegP2[39];
    t16 = LegP2[36];
    t17 = LegP1[28];
    t18 = t10 * t14;
    t19 = t9 * t4;
    t20 = t13 * t2;
    t21 = t5 * t14;
    t22 = t7 * t12;
    t23 = t13 * t11;
    t24 = t7 * t15;
    t25 = t5 * t11;
    t26 = t3 * t12;
    t27 = t26 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t28 = t1 * t14;
    t29 = t1 * t11;
    t30 = t29 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t31 = t3 * t15;
    t32 = t31 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t33 = t1 * t2;
    t34 = t33 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t35 = t3 * t4;
    t36 = t35 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t37 = t5 * t6;
    t38 = t37 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t39 = t9 * t12;
    t40 = t39 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t41 = t13 * t14;
    t42 = t41 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t43 = t7 * t4;
    t44 = t43 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t45 = t5 * t2;
    t46 = t1 * t6;
    t47 = t3 * t8;
    t48 = 0.81777323476545499432e-8;
    t49 = 0.15143948791952870264e-9;
    t50 = -0.13767226174502609331e-11;
    t51 = -0.22945376957504348884e-13;
    t27 = t48 * t18 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t49 * t19 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.30287897583905740529e-11 * t20 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - 0.12528175818797374491e-10 * t21 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.45101432947670548167e-9 * t22 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.12212080305830794581e-7 * t23 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.69386819919493151014e-9 * t24 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.92515759892657534703e-10 * t25 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.28911174966455479595e-11 * t27 + 0.68836130872513046654e-13 * t28 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.55068904698010437324e-11 * t30 + 0.28911174966455479596e-9 * t32 + 0.45890753915008697769e-13 * t34 - 0.16061763870253044219e-12 * t36 + 0.16537192080812534327e-7 * t38 - 0.63604584926202055106e-8 * t40 - 0.90863692751717221590e-10 * t42 + t50 * t44 + t51 * t45 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t30 = -0.63604584926202055102e-8;
    t32 = -0.90863692751717221580e-10;
    t34 = 0.83500099091118057954e-4 * cosP1_2 * t9;
    t36 = cosP1_4 * t7;
    t38 = 0.14501845363174068564e-5 * t36;
    t40 = 0.23850192837287541819e-2 * t17;
    t42 = 0.17249563431985997340e-4 * sinP1_2 * t9;
    t44 = 0.53427851338009726283e-6 * sinP1_4 * t7;
    t52 = cosP2_4 * t11;
    t53 = -0.91590602293730959358e-6 * t52;
    t54 = -0.27696998133624242107e-2 * t16;
    t26 = t26 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t28 = t28 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t29 = t29 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t31 = t31 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t37 = t37 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t39 = t39 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t41 = t41 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t55 = (-0.71745971796755918163e-6 * sinP1_3 * cosP2_2 - 0.19844630496975041193e-6 * cosP1_3 * sinP2_2) * t13 * t6;
    t56 = t9 * t15 * (0.53427851338009726294e-6 * sinP1_2 * cosP2_3 + 0.38162750955721233070e-6 * cosP1_2 * sinP2_3);
    t20 = 0.12528175818797374491e-10 * t21 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.55068904698010437324e-11 * t29 + 0.68836130872513046654e-13 * t28 - 0.16537192080812534327e-7 * t37 - 0.30287897583905740529e-11 * t20 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + 0.16061763870253044219e-12 * t35 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.45890753915008697769e-13 * t33 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.90863692751717221590e-10 * t41 + 0.12212080305830794581e-7 * t23 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.63604584926202055106e-8 * t39 + 0.28911174966455479595e-11 * t26 + 0.92515759892657534703e-10 * t25 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.45101432947670548167e-9 * t22 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.28911174966455479596e-9 * t31 + t55 + t56 + 0.69386819919493151014e-9 * t24 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t18 = t10 * ((t53 + t54 - 0.64571374617080326353e-4 * cosP2_2 * t6) * sinP1_1 - 0.17860167447277537075e-4 * cosP1_1 * sinP2_2 * t6) + t16 * (-0.60449797513862433176e-4 * sinP1_3 * t13 - 0.45795301146865479676e-6 * sinP1_5 * t5) + t17 * (0.45795301146865479674e-6 * sinP2_5 * t12 + 0.32972616825743145366e-4 * sinP2_3 * t15) + t30 * t47 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t32 * t46 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - t48 * t18 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - t49 * t19 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + t50 * t43 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t51 * t45 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t8 * ((t42 - t44) * cosP2_1 + (t34 + t38 + t40) * sinP2_1) + t20;
    t19 = t5 * t12 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t11 = t7 * t11 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t20 = t13 * t15 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t21 = t10 * t8 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t22 = t1 * t15 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t23 = -0.22157598506899393685e-1 * t16 - 0.73272481834984767484e-5 * t52;
    t24 = (-0.14349194359351183633e-4 * cosP1_2 * cosP2_2 + 0.39689260993950082383e-5 * sinP1_2 * sinP2_2) * t9 * t6;
    t25 = -0.10990872275247715122e-4 * t36 * t16;
    t1 = -0.30287897583905740528e-10 * t13 * t4 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.22945376957504348886e-13 * t1 * t4 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.19274116644303653064e-11 * t3 * t14 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.59625482093218854550e-3 * t21 + t23 * t17 + t25 + t24 + 0.82431542064357863422e-5 * t10 * t15 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.10074966252310405530e-4 * t13 * t8 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.16537192080812534327e-6 * t5 * t8 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.11448825286716369920e-6 * t10 * t12 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.55068904698010437324e-12 * t7 * t2 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) - 0.41301678523507827994e-10 * t22 - 0.25441833970480822044e-8 * t3 * t6 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.18172738550343444318e-8 * t9 * t14 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.75169054912784246947e-10 * t19 + 0.22203782374237808329e-8 * t11 + 0.15265100382288493225e-7 * t20;
    bf[0] = t16 * (-0.45795301146865479676e-6 * cosP1_5 * t5 + 0.60449797513862433176e-4 * cosP1_3 * t13) + t17 * (-0.32972616825743145366e-4 * cosP2_3 * t15 + 0.45795301146865479674e-6 * cosP2_5 * t12) + t6 * (t10 * (-0.17860167447277537075e-4 * sinP1_1 * sinP2_2 + 0.64571374617080326353e-4 * cosP1_1 * cosP2_2) + t13 * (0.19844630496975041193e-6 * sinP1_3 * sinP2_2 - 0.71745971796755918163e-6 * cosP1_3 * cosP2_2)) + t8 * ((-t34 + t38 + t40) * cosP2_1 + (t42 + t44) * sinP2_1) + t32 * t46 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t30 * t47 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t27 + (t53 + t54) * t10 * cosP1_1 + t15 * (0.38162750955721233070e-6 * cosP1_2 * cosP2_3 - 0.53427851338009726294e-6 * sinP1_2 * sinP2_3) * t9;
    bf[1] = t18;
    bf[2] = t1;
}

static void idsbf_4_8_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t7, t8, t9;
    t1 = LegP1[50];
    t2 = LegP2[36];
    t3 = LegP1[45];
    t4 = LegP2[37];
    t5 = LegP1[46];
    t6 = LegP1[48];
    t7 = LegP2[39];
    t8 = LegP2[41];
    t9 = LegP2[40];
    t10 = LegP1[49];
    t11 = LegP1[52];
    t12 = LegP1[51];
    t13 = LegP2[38];
    t14 = LegP1[47];
    t15 = LegP2[42];
    t16 = LegP1[53];
    t17 = LegP2[43];
    t18 = LegP1[54];
    t19 = LegP2[44];
    t20 = t11 * t19;
    t21 = t12 * t17;
    t22 = t1 * t15;
    t23 = t10 * t8;
    t24 = t6 * t9;
    t25 = t10 * t7;
    t26 = t1 * t9;
    t27 = t11 * t9;
    t28 = t12 * t7;
    t29 = t1 * t13;
    t30 = t12 * t8;
    t31 = t11 * t15;
    t32 = t16 * t17;
    t33 = t32 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t34 = t18 * t19;
    t35 = t34 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t36 = t14 * t8;
    t37 = t36 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t38 = t11 * t13;
    t39 = (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) * t15 * t6 + t38 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t40 = t10 * t17;
    t41 = t40 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t42 = t1 * t19;
    t43 = t42 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t18 = t18 * t9;
    t44 = t18 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t45 = t16 * t7;
    t46 = t45 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t47 = t12 * t4;
    t48 = t5 * t15;
    t49 = t48 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t50 = t14 * t17;
    t51 = t50 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t52 = t6 * t19;
    t53 = t52 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t54 = cosP2_4 * t9;
    t55 = 0.49364816087502353640e-4 * cosP1_2 * t14;
    t56 = cosP1_4 * t10;
    t57 = 0.55169619534137713004e-6 * t56;
    t58 = 0.22486177450470459863e-2 * t3;
    t59 = -0.13096787941582257090e-4 * sinP1_2 * t14;
    t60 = 0.31182828432338707349e-6 * sinP1_4 * t10;
    t61 = (-0.26112980265062469512e-2 * t2 - 0.86352447966476420356e-6 * t54) * t5;
    t62 = t7 * (0.40428646093395778622e-6 * cosP1_2 * cosP2_3 - 0.45923801873080641734e-6 * sinP1_2 * sinP2_3) * t14;
    t62 = t13 * (t5 * (0.37879940507960989731e-4 * cosP1_1 * cosP2_2 - 0.10477430353265805669e-4 * sinP1_1 * sinP2_2) + t6 * (-0.67642750907073195946e-6 * cosP1_3 * cosP2_2 + 0.18709697059403224410e-6 * sinP1_3 * sinP2_2)) + t2 * (0.12952867194971463054e-4 * cosP1_3 * t6 - 0.43176223983238210178e-6 * cosP1_5 * t1) + t3 * (0.43176223983238210174e-6 * cosP2_5 * t8 - 0.31086881267931511326e-4 * cosP2_3 * t7) + t4 * ((-t55 + t57 + t58) * cosP2_1 + (t59 - t60) * sinP2_1) + 0.36055181430073060448e-15 * t20 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) - 0.43266217716087672539e-14 * t21 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) - 0.77879191888957810570e-12 * t22 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.54515434322270467398e-10 * t23 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t61 * cosP1_1 + t62;
    t33 = t62 - 0.26167408474689824351e-8 * t24 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.65418521186724560870e-9 * t25 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.87224694915632747843e-10 * t26 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.43266217716087672536e-13 * t27 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.77879191888957810572e-11 * t28 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.10280053329342430996e-8 * t29 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.27257717161135233699e-11 * t30 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.64899326574131508811e-13 * t31 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.72110362860146120894e-15 * t33 - 0.18027590715036530223e-15 * t35 - 0.59966977754497514132e-8 * t37 - 0.85667111077853591628e-10 * t39 - 0.12979865314826301761e-11 * t41 - 0.21633108858043836269e-13 * t43 - 0.21633108858043836270e-13 * t44 - 0.12979865314826301762e-11 * t46 - 0.59966977754497514134e-8 * t47 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.47973582203598011310e-8 * t49 + 0.54515434322270467400e-10 * t51 + 0.64899326574131508805e-12 * t53;
    t35 = t50 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t37 = t52 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t20 = t20 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t22 = t22 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t23 = t23 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t24 = t24 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t25 = t25 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t26 = t26 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t30 = t30 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t31 = t31 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t32 = t32 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t27 = t27 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t28 = t28 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t29 = t29 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t39 = 0.43176223983238210174e-6 * sinP2_5 * t8 + 0.31086881267931511326e-4 * sinP2_3 * t7;
    t41 = t7 * (0.45923801873080641734e-6 * sinP1_2 * cosP2_3 + 0.40428646093395778622e-6 * cosP1_2 * sinP2_3) * t14;
    t36 = t13 * (t5 * (-0.37879940507960989731e-4 * sinP1_1 * cosP2_2 - 0.10477430353265805669e-4 * cosP1_1 * sinP2_2) + t6 * (-0.67642750907073195946e-6 * sinP1_3 * cosP2_2 - 0.18709697059403224410e-6 * cosP1_3 * sinP2_2)) + t2 * (-0.43176223983238210178e-6 * sinP1_5 * t1 - 0.12952867194971463054e-4 * sinP1_3 * t6) + t3 * t39 + t4 * ((t59 + t60) * cosP2_1 + (t55 + t57 + t58) * sinP2_1) - 0.85667111077853591628e-10 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) * t15 * t6 - 0.85667111077853591628e-10 * t38 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.12979865314826301761e-11 * t40 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.21633108858043836269e-13 * t42 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + 0.59966977754497514132e-8 * t36 * (cosP1_2 * sinP2_5 - sinP1_2 * cosP2_5) + t61 * sinP1_1 + t41;
    t38 = t6 * t17 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t39 = t10 * t19 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t19 = t16 * t19 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8);
    t17 = t11 * t17 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7);
    t40 = t12 * t15 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t41 = t1 * t8 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t42 = t6 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t43 = t5 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t44 = 0.23501682238556222561e-1 * t2 + 0.77717203169828778318e-5 * t54;
    t2 = 0.43176223983238210174e-5 * t56 * t2;
    t46 = (-0.26193575883164514170e-5 * sinP1_2 * sinP2_2 + 0.94699851269902474322e-5 * cosP1_2 * cosP2_2) * t14 * t13;
    t1 = 0.47973582203598011310e-7 * t1 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.95947164407196022624e-7 * t5 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.87224694915632747837e-9 * t10 * t9 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + t46 + t44 * t3 + 0.51400266646712154972e-9 * t12 * t13 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.11993395550899502827e-8 * t14 * t15 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.36055181430073060446e-15 * t19 + 0.43266217716087672538e-13 * t16 * t9 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.69081958373181136286e-5 * t5 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.49969283223267688588e-3 * t43 + 0.51919461259305207052e-11 * t11 * t7 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.15575838377791562113e-10 * t38 - 0.38939595944478905284e-12 * t40 - 0.21806173728908186960e-10 * t41 - 0.51811468779885852212e-5 * t6 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.21633108858043836267e-12 * t39 - 0.78502225424069473036e-8 * t42 - 0.28844145144058448360e-14 * t17 + t2;
    bf[0] = t33;
    bf[1] = t36 - 0.21633108858043836270e-13 * t18 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) - 0.12979865314826301762e-11 * t45 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - 0.59966977754497514134e-8 * t47 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - 0.47973582203598011310e-8 * t48 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - 0.54515434322270467400e-10 * t35 - 0.64899326574131508805e-12 * t37 - 0.36055181430073060448e-15 * t20 + 0.43266217716087672539e-14 * t21 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + 0.77879191888957810570e-12 * t22 + 0.54515434322270467398e-10 * t23 + 0.26167408474689824351e-8 * t24 + 0.65418521186724560870e-9 * t25 + 0.87224694915632747843e-10 * t26 + 0.27257717161135233699e-11 * t30 + 0.64899326574131508811e-13 * t31 + 0.72110362860146120894e-15 * t32 - 0.18027590715036530223e-15 * t34 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) - 0.43266217716087672536e-13 * t27 - 0.77879191888957810572e-11 * t28 - 0.10280053329342430996e-8 * t29;
    bf[2] = t1;
}

static void idsbf_4_8_9_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t7, t8, t9;
    t1 = LegP1[46];
    t2 = LegP2[42];
    t3 = LegP1[47];
    t4 = LegP2[43];
    t5 = LegP1[48];
    t6 = LegP2[44];
    t7 = LegP1[52];
    t8 = LegP1[51];
    t9 = LegP1[50];
    t10 = LegP1[49];
    t11 = LegP2[41];
    t12 = LegP2[40];
    t13 = LegP2[39];
    t14 = LegP1[53];
    t15 = LegP2[38];
    t16 = LegP2[37];
    t17 = LegP1[54];
    t18 = LegP2[36];
    t19 = LegP1[45];
    t20 = t1 * t2;
    t21 = t5 * t2;
    t22 = t10 * t4;
    t23 = t9 * t6;
    t24 = t17 * t12;
    t25 = t14 * t13;
    t26 = t7 * t15;
    t27 = t26 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t28 = t8 * t16;
    t29 = t28 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    t30 = t19 * t11;
    t31 = t5 * t6;
    t32 = t31 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t33 = t7 * t6;
    t34 = t33 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t35 = t8 * t4;
    t36 = t35 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t37 = t9 * t2;
    t38 = t37 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t39 = t10 * t11;
    t40 = t39 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t41 = t5 * t12;
    t42 = t41 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t43 = t10 * t13;
    t44 = t43 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t45 = t9 * t12;
    t46 = t14 * t11;
    t47 = t46 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t48 = t7 * t12;
    t49 = t48 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t50 = t8 * t13;
    t51 = t50 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t52 = t9 * t15;
    t53 = t8 * t11;
    t54 = t7 * t2;
    t55 = t14 * t4;
    t56 = t17 * t6;
    t57 = t3 * t11;
    t58 = -0.40919167342916286348e-6;
    t59 = -0.56832176865161508824e-8;
    t60 = -0.81188824093087869740e-10;
    t61 = -0.12301336983801192385e-11;
    t62 = -0.20502228306335320642e-13;
    t63 = 0.78854724255135848624e-14;
    t64 = 0.61506684919005961925e-12;
    t65 = 0.51665615331965008020e-10;
    t27 = 0.45465741492129207056e-8 * t20 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t65 * (t21 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) * t4 * t3) + t64 * t22 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t63 * t23 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t62 * t24 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t61 * t25 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t60 * t27 + t59 * t29 + t58 * (t9 * cosP1_5 * t18 - t30 * cosP2_5) + 0.61506684919005961932e-12 * t32 + 0.22342171872288490444e-14 * t34 + 0.44158645582876075228e-13 * t36 + 0.28387700731848905506e-12 * t38 - 0.69549866793029818484e-10 * t40 - 0.80598359917865412515e-8 * t42 - 0.77498422997947512022e-8 * t44 - 0.10333123066393001603e-9 * t45 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.70969251829622263762e-14 * t47 - 0.69707576241540090183e-12 * t49 - 0.59046417522245723446e-10 * t51;
    t29 = 0.13366927998685986868e-4 * cosP1_2 * t3;
    t32 = cosP1_4 * t10;
    t34 = 0.11366435373032301751e-7 * t32;
    t36 = -0.18904655312427324297e-2 * t19;
    t38 = -0.55377273137413374204e-4 * sinP1_2 * t3;
    t40 = 0.80701691148529342520e-6 * sinP1_4 * t10;
    t19 = 0.36827250608624657712e-4 * t19;
    t42 = t3 * (-0.10601784266119219646e-5 * sinP1_2 * sinP2_3 - 0.24179507975359623753e-6 * cosP1_2 * cosP2_3) + t19 * cosP2_3;
    t44 = 0.31916950527474703356e-4 * t5;
    t47 = 0.81838334685832572706e-6 * t1;
    t49 = t56 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t46 = t46 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t48 = t48 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t50 = t50 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t51 = t52 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t66 = t57 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t21 = t21 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + (cosP1_2 * sinP2_7 - sinP1_2 * cosP2_7) * t4 * t3;
    t20 = t20 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t31 = t31 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t33 = t33 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t35 = t35 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t39 = t39 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t41 = t41 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t20 = -0.45465741492129207056e-8 * t20 - 0.61506684919005961932e-12 * t31 - 0.22342171872288490444e-14 * t33 - 0.44158645582876075228e-13 * t35 - 0.28387700731848905506e-12 * t37 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.69549866793029818484e-10 * t39 + 0.80598359917865412515e-8 * t41 + 0.77498422997947512022e-8 * t43 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3) - 0.10333123066393001603e-9 * t45 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.99356952561471169277e-12 * t53 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.47312834553081509173e-14 * t54 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.91997178297658490061e-15 * t55 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.65712270212613207185e-16 * t49 + 0.70969251829622263762e-14 * t46 + 0.69707576241540090183e-12 * t48 + 0.59046417522245723446e-10 * t50 + t58 * (t9 * sinP1_5 * t18 - t30 * sinP2_5) + 0.48713294455852721848e-8 * t51 + 0.45465741492129207058e-8 * t66 + t65 * t21;
    t19 = t13 * (t3 * (0.10601784266119219646e-5 * sinP1_2 * cosP2_3 - 0.24179507975359623753e-6 * cosP1_2 * sinP2_3) - t19 * sinP2_3) + t15 * (t1 * (0.78019212400493719315e-4 * cosP2_2 * sinP1_1 - 0.6001477876961055327e-5 * cosP1_1 * sinP2_2) + t5 * (0.6819861223819381058e-7 * cosP1_3 * sinP2_2 - 0.88658195909651953766e-6 * sinP1_3 * cosP2_2)) + t16 * ((t40 + t38) * cosP2_1 + (-t29 + t34 + t36) * sinP2_1) + t59 * t28 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t60 * t26 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t61 * t25 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t62 * t24 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t63 * t23 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t64 * t22 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t20 + t44 * sinP1_3 * t18 - t47 * cosP1_1 * t12 * sinP2_4;
    t20 = t10 * t6 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t6 = t14 * t6 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8);
    t21 = t7 * t4 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7);
    t22 = t8 * t2 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t23 = t9 * t11 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t10 = t10 * t12 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t24 = t5 * t13 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t17 = t17 * t11 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t14 = t14 * t12 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t25 = t3 * t15 * (-0.35463278363860781508e-5 * cosP1_2 * cosP2_2 - 0.27279444895277524244e-6 * sinP1_2 * sinP2_2);
    t26 = -0.32735333874333029082e-5 * t32 * t18;
    t2 = -0.70969251829622263758e-14 * t17 - 0.56832176865161508818e-7 * t9 * t16 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.46499053798768507212e-7 * t24 + 0.36904010951403577152e-11 * t5 * t4 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) - 0.97426588911705443682e-9 * t8 * t15 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.82664984531144012830e-9 * t10 + t26 - 0.17221871777321669338e-10 * t7 * t13 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.99356952561471169265e-11 * t23 - 0.32803565290136513026e-12 * t14 + t25 + 0.10513963234018113150e-14 * t6 + 0.20666246132786003209e-9 * t3 * t2 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.90931482984258414112e-8 * t1 * t11 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.12879604961672188608e-13 * t21 + 0.56775401463697811007e-13 * t22 + 0.63083779404108678902e-13 * t20 + 0.81838334685832572693e-6 * t1 * t13 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.24551500405749771808e-5 * t5 * t16 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.42010345138727387329e-4 * t1 * t16 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = t13 * t42 + t15 * (t1 * (-0.6001477876961055327e-5 * sinP1_1 * sinP2_2 - 0.78019212400493719315e-4 * cosP1_1 * cosP2_2) + t5 * (-0.6819861223819381058e-7 * sinP1_3 * sinP2_2 - 0.88658195909651953766e-6 * cosP1_3 * cosP2_2)) + t16 * ((t29 + t34 + t36) * cosP2_1 + (-t40 + t38) * sinP2_1) - 0.48713294455852721848e-8 * t52 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.99356952561471169277e-12 * t53 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.47312834553081509173e-14 * t54 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.91997178297658490061e-15 * t55 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.65712270212613207185e-16 * t56 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + 0.45465741492129207058e-8 * t57 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t27 - t44 * cosP1_3 * t18 + t47 * sinP1_1 * t12 * sinP2_4;
    bf[1] = t19;
    bf[2] = t2;
}

static void idsbf_4_8_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t7, t8, t9;
    t1 = LegP1[50];
    t2 = LegP2[36];
    t3 = LegP1[45];
    t4 = LegP2[37];
    t5 = LegP1[46];
    t6 = LegP1[48];
    t7 = LegP2[39];
    t8 = LegP2[41];
    t9 = LegP1[47];
    t10 = LegP2[42];
    t11 = LegP2[43];
    t12 = LegP2[44];
    t13 = LegP1[52];
    t14 = LegP1[51];
    t15 = LegP1[49];
    t16 = LegP2[40];
    t17 = LegP1[53];
    t18 = LegP2[38];
    t19 = LegP1[54];
    t20 = t5 * t10;
    t21 = t9 * t11;
    t22 = t6 * t12;
    t23 = t13 * t12;
    t24 = t14 * t11;
    t25 = t1 * t10;
    t26 = t15 * t8;
    t27 = t6 * t16;
    t28 = t27 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t29 = t15 * t7;
    t30 = t29 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t31 = t1 * t16;
    t32 = t17 * t8;
    t33 = t32 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t34 = t3 * t8;
    t35 = t1 * cosP1_5 * t2 - t34 * cosP2_5;
    t36 = t13 * t16;
    t37 = t36 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t38 = t14 * t7;
    t39 = t38 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t40 = t1 * t18;
    t41 = t40 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t42 = t19 * t10;
    t43 = t42 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t44 = t14 * t8;
    t45 = t44 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t46 = t13 * t10;
    t47 = t46 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t48 = t17 * t11;
    t49 = t19 * t12;
    t50 = t49 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t51 = t9 * t8;
    t52 = t6 * t10;
    t53 = t15 * t11;
    t54 = t1 * t12;
    t55 = t19 * t16;
    t56 = t17 * t7;
    t57 = t13 * t18;
    t58 = t14 * t4;
    t59 = 0.17262903170968641497e-8;
    t60 = 0.19616935421555274429e-10;
    t61 = 0.23353494549470564796e-12;
    t62 = 0.32720555550082384744e-14;
    t63 = 0.13544456545785736604e-14;
    t64 = 0.30837822482684891399e-6 * t9 * sinP1_2 * t7 * sinP2_3;
    t65 = -0.31073225707743554694e-6 * t5 * cosP1_1 * t16 * cosP2_4;
    t28 = -t64 - 0.11209677383745871102e-10 * t31 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.52096257071895875320e-12 * t45 + t60 * t21 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) - 0.10692992009830844687e-16 * t50 + 0.98084677107776372134e-9 * t30 - 0.36356172833424871935e-15 * t48 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) - 0.14029205516898068231e-13 * t47 + 0.33670093240555363756e-11 * t25 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.23820564440459976092e-11 * t37 + 0.73983870732722749277e-8 * t41 + t61 * t22 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + t65 + 0.20401612838417485405e-8 * t28 + t59 * t20 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - 0.15536612853871777347e-6 * t35 + t62 * t23 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + t63 * t43 + 0.98888790106915651661e-13 * t24 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.51198045743070084362e-13 * t33 + 0.12704301034911987249e-9 * t39 + 0.10940213985098133817e-9 * t26 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t30 = -0.21578628963710801872e-8;
    t33 = -0.30826612805301145534e-10;
    t35 = cosP1_4 * t15;
    t37 = cosP1_2 * t9;
    t39 = -0.27686244105599507239e-2 * t3;
    t41 = t5 * (-0.6836109655703582033e-5 * cosP1_1 * cosP2_2 - 0.47852767589925074233e-4 * sinP1_1 * sinP2_2) + t6 * (0.51788709512905924467e-7 * cosP1_3 * cosP2_2 + 0.36252096659034147143e-6 * sinP1_3 * sinP2_2);
    t43 = 0.28276635394046634775e-4 * t6;
    t45 = 0.17090274139258955082e-4 * t3;
    t47 = (-t45 + 0.2354032250586632930e-8 * t37) * t7 * cosP2_3;
    t28 = t18 * t41 + t2 * (0.24609994760532895324e-2 * t5 * cosP1_1 + t43 * cosP1_3) + t4 * ((0.932196771232306643e-6 * t37 + t39 + 0.60851733677664461278e-6 * t35) * cosP2_1 + (0.49406428875312251967e-4 * t9 * sinP1_2 + 0.29778507969920906584e-6 * sinP1_4 * t15) * sinP2_1) - 0.14124193503519797588e-8 * t51 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.13077956947703516286e-10 * t52 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.12574958603561073352e-12 * t53 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) - 0.12831590411797013624e-14 * t54 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) - 0.77844981831568549326e-14 * t55 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - 0.46706989098941129593e-12 * t56 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t33 * t57 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t30 * t58 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t28 + t47;
    t26 = t26 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t27 = t27 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t31 = t31 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t37 = t44 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t41 = t46 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t44 = t48 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t46 = t49 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t32 = t32 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t36 = t36 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t38 = t38 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t47 = t51 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t48 = t52 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t49 = t53 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t50 = t54 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t51 = t55 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t52 = t56 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t24 = -0.13077956947703516286e-10 * t48 - 0.11209677383745871102e-10 * t31 - 0.52096257071895875320e-12 * t37 - 0.46706989098941129593e-12 * t52 - 0.10692992009830844687e-16 * t46 + 0.98084677107776372134e-9 * t29 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t39 * t4 * sinP2_1 - 0.12831590411797013624e-14 * t50 - 0.36356172833424871935e-15 * t44 - 0.14029205516898068231e-13 * t41 - 0.77844981831568549326e-14 * t51 - 0.33670093240555363756e-11 * t25 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.23820564440459976092e-11 * t36 - 0.73983870732722749277e-8 * t40 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.12574958603561073352e-12 * t49 - 0.20401612838417485405e-8 * t27 - 0.15536612853871777347e-6 * t1 * sinP1_5 * t2 + 0.15536612853871777347e-6 * t34 * sinP2_5 - 0.98888790106915651661e-13 * t24 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.51198045743070084362e-13 * t32 - 0.14124193503519797588e-8 * t47 - 0.12704301034911987249e-9 * t38 - 0.10940213985098133817e-9 * t26;
    t25 = t5 * (0.6836109655703582033e-5 * cosP2_2 * sinP1_1 - 0.47852767589925074233e-4 * cosP1_1 * sinP2_2) + t6 * (0.51788709512905924467e-7 * cosP2_2 * sinP1_3 - 0.36252096659034147143e-6 * cosP1_3 * sinP2_2);
    t26 = t16 * cosP2_4;
    t27 = (0.24609994760532895324e-2 * t2 - 0.31073225707743554694e-6 * t26) * t5 * sinP1_1;
    t19 = t19 * t8 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t29 = t17 * t16 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t31 = t13 * t7 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t32 = t1 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t34 = t6 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t36 = t5 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t37 = t5 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t38 = t9 * t10 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t39 = t6 * t11 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t40 = t15 * t12 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t26 = 0.24609994760532895322e-1 * t2 - 0.31073225707743554694e-5 * t26;
    t35 = -0.43502515990840976574e-5 * t35 * t2;
    t41 = (0.12429290283097421880e-5 * cosP1_2 * cosP2_2 + 0.87005031981681953152e-5 * sinP1_2 * sinP2_2) * t18 * t9;
    t1 = 0.25502016048021856755e-7 * t6 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + t41 - 0.15628877121568762595e-10 * t1 * t8 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.55372488211199014473e-3 * t5 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.44893457654073818338e-12 * t14 * t10 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.15880376293639984060e-10 * t31 + 0.34180548278517910161e-5 * t36 + 0.40395193420066621100e-5 * t34 + t35 - 0.38494771235391040873e-15 * t17 * t12 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) - 0.12361098763364456458e-13 * t13 * t11 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.32694892369258790714e-11 * t39 - 0.64735886891132405612e-7 * t32 - 0.31073225707743554692e-7 * t37 - 0.28024193459364677756e-12 * t29 - 0.56886717492300093738e-14 * t19 - 0.35928453153031638150e-13 * t40 + t26 * t3 - 0.98645160976963665698e-9 * t14 * t18 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.31387096674488439085e-9 * t15 * t16 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.31387096674488439084e-9 * t38;
    bf[0] = t28;
    bf[1] = t18 * t25 + t30 * t58 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t33 * t57 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t4 * (t15 * (-0.29778507969920906584e-6 * sinP1_4 * cosP2_1 + 0.60851733677664461278e-6 * cosP1_4 * sinP2_1) + t9 * (-0.932196771232306643e-6 * cosP1_2 * sinP2_1 + 0.49406428875312251967e-4 * sinP1_2 * cosP2_1)) - t59 * t20 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - t60 * t21 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - t61 * t22 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - t62 * t23 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - t63 * t42 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t7 * (t9 * (0.2354032250586632930e-8 * cosP1_2 * sinP2_3 + 0.30837822482684891399e-6 * sinP1_2 * cosP2_3) + t45 * sinP2_3) + t24 - t43 * sinP1_3 * t2 + t27;
    bf[2] = t1;
}

static void idsbf_4_8_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t9;
    t1 = LegP1[72];
    t2 = LegP2[37];
    t3 = LegP1[69];
    t4 = LegP2[38];
    t5 = LegP1[68];
    t6 = LegP2[39];
    t7 = LegP1[67];
    t8 = LegP2[42];
    t9 = LegP2[43];
    t10 = LegP2[44];
    t11 = LegP1[73];
    t12 = LegP1[71];
    t13 = LegP1[70];
    t14 = LegP2[41];
    t15 = LegP2[40];
    t16 = LegP1[75];
    t17 = LegP1[74];
    t18 = LegP1[76];
    t19 = LegP1[66];
    t20 = LegP2[36];
    t21 = t12 * t15;
    t22 = t1 * t14;
    t23 = t11 * t8;
    t24 = t16 * t8;
    t25 = t17 * t14;
    t26 = t11 * t15;
    t27 = t1 * t6;
    t28 = t12 * t4;
    t29 = t5 * t14;
    t30 = t3 * t8;
    t31 = t13 * t9;
    t32 = t12 * t10;
    t33 = LegP1[77] * t8;
    t34 = t18 * t14;
    t35 = t16 * t15;
    t36 = t17 * t6;
    t37 = t11 * t4;
    t38 = t1 * t2;
    t39 = t17 * t9;
    t40 = t39 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t41 = t16 * t10;
    t42 = t41 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t43 = t7 * t8;
    t44 = t43 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t45 = t5 * t9;
    t46 = t45 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t47 = t3 * t10;
    t48 = t47 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t49 = t11 * t10;
    t50 = t49 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t51 = t1 * t9;
    t52 = t51 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t53 = t12 * t8;
    t54 = t13 * t14;
    t55 = t54 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t56 = t3 * t15;
    t57 = t56 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t58 = t13 * t6;
    t59 = t58 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t60 = 0.89066733524284128363e-11;
    t61 = 0.89066733524284128372e-13;
    t62 = 0.85641089927196277270e-15;
    t63 = -0.26397797991410424361e-2 * t19;
    t64 = 0.13332221207783042608e-4 * cosP1_2 * t5;
    t65 = cosP1_4 * t13;
    t66 = 0.23454833606284982364e-6 * t65;
    t67 = 0.34663775140235910778e-4 * sinP1_2 * t5;
    t68 = 0.61723246332328900950e-7 * sinP1_4 * t13;
    t69 = cosP2_4 * t15;
    t70 = -0.29627158239517872464e-6 * t69;
    t71 = 0.23464709325698154993e-2 * t20;
    t72 = (-0.44440737359276808683e-5 * cosP2_2 * t4 + t70 + t71) * cosP1_1 - 0.31108516151493766084e-4 * sinP1_1 * sinP2_2 * t4;
    t73 = -0.14813579119758936230e-6 * cosP1_5 * t12 + 0.82956043070650042886e-5 * cosP1_3 * t3;
    t74 = 0.14813579119758936227e-6 * cosP2_5 * t14 - 0.16294937031734829851e-4 * cosP2_3 * t6;
    t72 = t19 * t74 + t2 * ((t66 + t63 + t64) * cosP2_1 + (t67 - t68) * sinP2_1) + t20 * t73 + t7 * t72 + t62 * t25 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t61 * t26 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t60 * t27 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.88176066189041287082e-9 * t28 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.13466890108871760207e-8 * t29 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.12469342693399777971e-10 * t30 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.11989752589807478819e-12 * t31 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) - 0.12234441418170896752e-14 * t32 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) - 0.33984559494919157644e-17 * t33 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) - 0.14273514987866046213e-15 * t34 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t73 = 0.59852844928318934260e-9;
    t74 = 0.20862169506265013145e-10;
    t75 = 0.40128967851600541354e-12;
    t76 = 0.69328501369635081606e-14;
    t77 = 0.12234441418170896753e-15;
    t78 = 0.67969118989838315294e-17;
    t79 = 0.68512871941757021818e-13;
    t80 = 0.93520070200498334779e-9;
    t81 = 0.21547024174194816332e-6 * sinP1_2;
    t82 = 0.80801340653230561246e-7 * cosP1_2;
    t83 = t5 * t6;
    t84 = t83 * (t82 * cosP2_3 - t81 * sinP2_3);
    t85 = (0.34565017946104184536e-6 * sinP1_3 * sinP2_2 + 0.49378597065863120758e-7 * cosP1_3 * cosP2_2) * t4 * t3;
    t40 = t72 + t79 * t48 - 0.29392022063013762362e-10 * t37 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t74 * t55 - 0.10688008022914095403e-10 * t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.86326218646613847490e-11 * t46 - 0.49671832157773840820e-12 * t22 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.44533366762142064177e-12 * t36 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t78 * t24 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + 0.11222408424059800175e-8 * t44 + t73 * t57 + t85 - 0.34664250684817540800e-15 * t40 + t84 - 0.13376322617200180451e-13 * t23 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.74222277936903440305e-14 * t35 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t76 * t52 + t75 * t53 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t80 * t59 - 0.20574415444109633654e-8 * t38 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t77 * t50 - 0.10195367848475747295e-16 * t42;
    t41 = t41 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t29 = t29 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t30 = t30 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t31 = t31 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t32 = t32 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t33 = t33 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6);
    t35 = t35 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t36 = t36 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t37 = t37 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t38 = t38 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t42 = t43 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t43 = t45 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t44 = t4 * (0.44440737359276808683e-5 * cosP2_2 * sinP1_1 - 0.31108516151493766084e-4 * cosP1_1 * sinP2_2) + t71 * sinP1_1;
    t45 = 0.16294937031734829851e-4 * sinP2_3 * t6 + 0.14813579119758936227e-6 * sinP2_5 * t14;
    t24 = t19 * t45 + t2 * ((t67 + t68) * cosP2_1 + (t66 + t63 - t64) * sinP2_1) + t20 * (-0.14813579119758936230e-6 * sinP1_5 * t12 - 0.82956043070650042886e-5 * sinP1_3 * t3) - t60 * t27 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - t61 * t26 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t62 * t25 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + t7 * t44 - t73 * t56 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t74 * t54 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t75 * t53 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - t76 * t51 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - t77 * t49 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - t78 * t24 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t79 * t47 * (cosP1_3 * sinP2_8 - sinP1_3 * cosP2_8) + t80 * t58 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t25 = t3 * t4 * (-0.34565017946104184536e-6 * cosP1_3 * sinP2_2 + 0.49378597065863120758e-7 * sinP1_3 * cosP2_2);
    t26 = t83 * (t81 * cosP2_3 + t82 * sinP2_3);
    t27 = t1 * t8 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t44 = t12 * t14 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t45 = t13 * t15 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t46 = t3 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t47 = t7 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t18 = t18 * t8 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6);
    t16 = t16 * t14 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t15 = t17 * t15 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t1 = t1 * t4 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t12 = t12 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t2 = t3 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t48 = -0.25811180258267970490e-1 * t19 + 0.20739010767662510722e-5 * t65;
    t19 = 0.32589874063469659702e-5 * t69 * t19;
    t4 = (-0.8888147471855361736e-6 * cosP1_2 * cosP2_2 - 0.62217032302987532164e-5 * sinP1_2 * sinP2_2) * t5 * t4;
    t1 = -0.29627158239517872457e-5 * t7 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.23701726591614297968e-5 * t2 - 0.47995996348018953386e-3 * t47 + 0.17128217985439255454e-13 * t13 * t10 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) + 0.44533366762142064182e-13 * t15 + 0.13376322617200180452e-12 * t27 + 0.19183604143691966109e-11 * t3 * t9 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.35626693409713651345e-11 * t11 * t6 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.67969118989838315296e-17 * t18 + 0.26933780217743520416e-7 * t7 * t14 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.61172207090854483769e-16 * t17 * t10 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + 0.57094059951464184850e-15 * t16 + 0.27731400547854032641e-14 * t11 * t9 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + t19 + 0.29392022063013762360e-9 * t1 + 0.24689298532931560382e-7 * t12 + t48 * t20 + 0.59606198589328608981e-11 * t44 + 0.14963211232079733565e-9 * t45 + 0.22444816848119600348e-9 * t5 * t8 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + t4 - 0.14963211232079733565e-7 * t46;
    bf[0] = t40;
    bf[1] = t24 + t70 * t7 * sinP1_1 - 0.29392022063013762362e-10 * t37 - 0.12469342693399777971e-10 * t30 - 0.10688008022914095403e-10 * t21 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.86326218646613847490e-11 * t43 - 0.49671832157773840820e-12 * t22 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.44533366762142064177e-12 * t36 - 0.33984559494919157644e-17 * t33 - 0.11222408424059800175e-8 * t42 - 0.88176066189041287082e-9 * t28 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.12234441418170896752e-14 * t32 - 0.34664250684817540800e-15 * t39 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) - 0.13376322617200180451e-13 * t23 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.74222277936903440305e-14 * t35 + t25 + t26 - 0.11989752589807478819e-12 * t31 - 0.20574415444109633654e-8 * t38 - 0.13466890108871760207e-8 * t29 - 0.14273514987866046213e-15 * t34 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) - 0.10195367848475747295e-16 * t41;
    bf[2] = t1;
}

static void idsbf_4_8_11_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t9;
    t1 = LegP1[66];
    t2 = LegP2[39];
    t3 = LegP2[37];
    t4 = LegP2[41];
    t5 = LegP1[71];
    t6 = LegP2[36];
    t7 = LegP1[69];
    t8 = LegP1[72];
    t9 = LegP2[38];
    t10 = LegP1[68];
    t11 = LegP1[67];
    t12 = LegP2[42];
    t13 = LegP2[43];
    t14 = LegP2[44];
    t15 = LegP1[73];
    t16 = LegP1[70];
    t17 = LegP2[40];
    t18 = LegP1[75];
    t19 = LegP1[74];
    t20 = LegP1[77];
    t21 = LegP1[76];
    t22 = t1 * t4;
    t23 = t8 * t3;
    t24 = t11 * t12;
    t25 = t10 * t13;
    t26 = t7 * t14;
    t27 = t15 * t14;
    t28 = t8 * t13;
    t29 = t5 * t12;
    t30 = t16 * t4;
    t31 = t7 * t17;
    t32 = t16 * t2;
    t33 = t5 * t17;
    t34 = t8 * t4;
    t35 = t15 * t12;
    t36 = t18 * t12;
    t37 = t19 * t4;
    t38 = t15 * t17;
    t39 = t8 * t2;
    t40 = t5 * t9;
    t41 = t40 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t42 = t7 * t12;
    t43 = t42 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t44 = t16 * t13;
    t45 = t44 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t46 = t5 * t14;
    t47 = t46 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t48 = t20 * t12;
    t49 = t48 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6);
    t50 = t21 * t4;
    t51 = t50 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t52 = t18 * t17;
    t53 = t52 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t54 = t19 * t2;
    t55 = t15 * t9;
    t56 = t55 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t57 = t21 * t13;
    t58 = t57 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t59 = t19 * t13;
    t60 = t59 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t61 = t18 * t14;
    t62 = t61 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t63 = 0.17539165180266433755e-8;
    t64 = 0.23448081791800045128e-10;
    t65 = 0.33001004003274137586e-12;
    t66 = 0.50102738871367617789e-14;
    t67 = 0.83504564785612696310e-16;
    t68 = 0.16015527583900700264e-2;
    t69 = t68 * t3 * cosP2_1 + 0.11439662559929071616e-4 * t2 * cosP2_3;
    t70 = 0.10399693236299156014e-4 * t7 * cosP1_3 * t6;
    t41 = 0.70143834419914664904e-12 * t34 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.50503560782338558736e-11 * t43 + 0.10020547774273523559e-13 * t35 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.40082191097094094238e-13 * t45 - t64 * t39 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.17195259980653366427e-10 * t56 + 0.15587518759981036645e-15 * t60 - 0.83504564785612696315e-16 * t51 - t67 * t36 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - 0.43422373688518602084e-14 * t53 + t69 * t1 - t66 * t37 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + 0.51064711457697876049e-10 * t33 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - t63 * t41 - t65 * t38 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.26053424213111161248e-12 * t54 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - t70 - 0.19882039234669689598e-17 * t49 - 0.14580162105424439039e-17 * t58 + 0.36766592249542470756e-8 * t32 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.33401825914245078522e-15 * t47;
    t43 = 0.86664110302492966782e-7;
    t45 = 0.61277653749237451261e-8;
    t47 = 0.78561094550304424691e-10;
    t49 = 0.10220958729758994030e-11;
    t51 = 0.14028766883982932981e-13;
    t53 = 0.21154489745688549734e-15;
    t56 = 0.65654629017040126354e-9;
    t58 = 0.12132975442349015338e-5 * sinP1_2 * t10;
    t60 = 0.22147494855081535956e-6 * sinP1_4 * t16;
    t69 = 0.23052653340463129166e-4 * cosP1_2 * t10;
    t70 = cosP1_4 * t16;
    t71 = -0.48146727945829425987e-7 * t70;
    t72 = t11 * (0.42812070489431525596e-4 * sinP1_1 * sinP2_2 + 0.20279401810783354232e-4 * cosP1_1 * cosP2_2) + t7 * (0.15599539854448734024e-6 * cosP1_3 * cosP2_2 + 0.32932361914947327382e-6 * sinP1_3 * sinP2_2);
    t73 = 0.37659495204174216478e-6 * sinP1_2;
    t74 = 0.54992317264672809834e-6 * cosP1_2;
    t75 = 0.17332822060498593359e-6 * t11;
    t76 = t75 * sinP1_1 * t17 * sinP2_4;
    t77 = t10 * t2 * (t74 * cosP2_3 + t73 * sinP2_3);
    t59 = t59 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t61 = t61 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t78 = t5 * sinP1_5 * t6 - t22 * sinP2_5;
    t79 = (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) * t10 * t4 + t24 * (cosP1_1 * sinP2_6 - sinP1_1 * cosP2_6);
    t42 = t42 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t44 = t44 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t46 = t46 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t48 = t48 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6);
    t52 = t52 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t54 = t54 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t55 = t55 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t80 = t23 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t81 = t25 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t82 = t26 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t83 = t11 * t9 * (0.42812070489431525596e-4 * cosP1_1 * sinP2_2 - 0.20279401810783354232e-4 * sinP1_1 * cosP2_2);
    t32 = 0.70143834419914664904e-12 * t34 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.50503560782338558736e-11 * t42 + 0.10020547774273523559e-13 * t35 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.40082191097094094238e-13 * t44 - 0.17195259980653366427e-10 * t55 - 0.50503560782338558740e-11 * t81 + 0.27834854928537565439e-17 * t61 + 0.15587518759981036645e-15 * t59 - 0.83504564785612696315e-16 * t50 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) - 0.43422373688518602084e-14 * t52 - 0.40082191097094094232e-13 * t82 + 0.51064711457697876049e-10 * t33 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.12036681986457356500e-8 * t80 - 0.26053424213111161248e-12 * t54 - t43 * t78 + t83 - 0.19882039234669689598e-17 * t48 + 0.14580162105424439039e-17 * t57 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) + t56 * t79 + 0.36766592249542470756e-8 * t32 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.33401825914245078522e-15 * t46;
    t33 = t9 * (0.15599539854448734024e-6 * cosP2_2 * sinP1_3 - 0.32932361914947327382e-6 * cosP1_3 * sinP2_2) + 0.10399693236299156014e-4 * sinP1_3 * t6;
    t1 = t2 * (t10 * (-t73 * cosP2_3 + t74 * sinP2_3) - 0.11439662559929071616e-4 * t1 * sinP2_3) + t3 * ((t58 + t60) * cosP2_1 + (t1 * t68 - t69 + t71) * sinP2_1) - t45 * t31 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t47 * t30 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t49 * t29 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - t51 * t28 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - t53 * t27 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + t63 * t40 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t64 * t39 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t65 * t38 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t66 * t37 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + t67 * t36 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t7 * t33 + t32 - t75 * cosP1_1 * t17 * sinP2_4;
    t32 = t15 * t13 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7);
    t33 = t8 * t12 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t34 = t16 * t17 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t35 = t7 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t36 = t11 * t3 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t21 = t21 * t12 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6);
    t18 = t18 * t4 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t17 = t19 * t17 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t15 = t15 * t2 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t8 = t8 * t9 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t37 = t7 * t3 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t20 = t20 * t13 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7);
    t38 = -0.69331288241994373426e-6 * t70 * t6;
    t39 = t10 * t9 * (0.62398159417794936096e-6 * cosP1_2 * cosP2_2 + 0.13172944765978930953e-5 * sinP1_2 * sinP2_2);
    t2 = 0.51998466181495780069e-6 * t37 + 0.24049314658256456542e-12 * t7 * t13 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.70143834419914664904e-11 * t5 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.12024657329128228270e-12 * t33 + 0.24265950884698030701e-4 * t36 + 0.44535767885660104704e-16 * t19 * t14 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) - 0.39764078469339379198e-16 * t21 - 0.15030821661410285336e-14 * t18 + 0.20201424312935423494e-10 * t10 * t12 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.40851769166158300840e-9 * t34 - 0.12036681986457356497e-7 * t5 * t3 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.20634311976784039710e-9 * t8 - 0.69475797901629763334e-13 * t17 + t38 + t39 - 0.36474793898355625754e-11 * t15 - 0.14580162105424439040e-17 * t20 + 0.22059955349725482454e-7 * t35 + 0.17332822060498593358e-6 * t11 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.13130925803408025271e-8 * t11 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.21822526263973451304e-14 * t32 + 0.26721460731396062822e-14 * t16 * t14 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    bf[0] = t3 * ((t69 + t71) * cosP2_1 + (t58 - t60) * sinP2_1) + t9 * t72 + t43 * (-t5 * cosP1_5 * t6 + t22 * cosP2_5) - 0.12036681986457356500e-8 * t23 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t56 * ((cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) * t10 * t4 + t24 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6)) + 0.50503560782338558740e-11 * t25 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.40082191097094094232e-13 * t26 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + t53 * t27 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + t51 * t28 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + t49 * t29 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t47 * t30 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t45 * t31 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.27834854928537565439e-17 * t62 + t41 + t76 + t77;
    bf[1] = t1;
    bf[2] = t2;
}

static void idsbf_4_8_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t8, t9;
    t1 = LegP1[71];
    t2 = LegP2[38];
    t3 = LegP1[70];
    t4 = LegP2[37];
    t5 = LegP1[68];
    t6 = LegP1[67];
    t7 = LegP2[41];
    t8 = LegP1[69];
    t9 = LegP2[42];
    t10 = LegP2[43];
    t11 = LegP2[44];
    t12 = LegP1[77];
    t13 = LegP1[76];
    t14 = LegP1[75];
    t15 = LegP2[40];
    t16 = LegP1[74];
    t17 = LegP2[39];
    t18 = LegP1[73];
    t19 = LegP1[72];
    t20 = LegP2[36];
    t21 = LegP1[66];
    t22 = t6 * t9;
    t23 = t5 * t10;
    t24 = t8 * t11;
    t25 = t18 * t11;
    t26 = t19 * t10;
    t27 = t1 * t9;
    t28 = t3 * t7;
    t29 = t8 * t15;
    t30 = t3 * t17;
    t31 = t1 * t15;
    t32 = t19 * t7;
    t33 = t18 * t9;
    t34 = t14 * t9;
    t35 = t16 * t7;
    t36 = t18 * t15;
    t37 = t19 * t17;
    t38 = t1 * t2;
    t39 = t5 * t7;
    t40 = t8 * t9;
    t41 = t40 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t42 = t3 * t10;
    t43 = t42 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t44 = t1 * t11;
    t45 = t44 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t46 = t12 * t9;
    t47 = t46 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6);
    t48 = t13 * t7;
    t49 = t48 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t50 = t14 * t15;
    t51 = t16 * t17;
    t52 = t51 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t53 = t18 * t2;
    t54 = t53 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t55 = t19 * t4;
    t56 = t55 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    t57 = t13 * t10;
    t58 = t57 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t59 = t16 * t10;
    t60 = t59 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t61 = t14 * t11;
    t62 = t61 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t63 = t12 * t11;
    t64 = t63 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t65 = -0.10866560507645191820e-9;
    t66 = -0.70562081218475271562e-12;
    t67 = -0.47041387478983514373e-14;
    t68 = -0.32667630193738551642e-16;
    t69 = 0.65594527293776615608e-17;
    t70 = 0.44723541336665874276e-18;
    t71 = -0.38890035944926847198e-18;
    t72 = 0.16951834391926499238e-7 * t7;
    t73 = 0.26444861651405338811e-5 * t17;
    t74 = 0.40725086943164221772e-2 * t4 * cosP2_1 + t72 * cosP2_5 - t73 * cosP2_3;
    t75 = -0.28194290960652153532e-2 * t20;
    t76 = t75 * t6 * cosP1_1;
    t41 = t76 + 0.17967196606556203407e-15 * t34 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + t69 * t58 + t70 * t64 + 0.68602023406850958458e-14 * t35 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t67 * t43 + 0.32275618631413689028e-12 * t36 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t66 * t41 + t68 * t45 - 0.21778420129159034432e-16 * t60 - 0.50961503102232140564e-13 * t52 + 0.17428834060963392074e-10 * t37 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.33634592047473212777e-11 * t54 + t71 * t47 - 0.27223025161448793039e-18 * t62 - 0.16333815096869275822e-16 * t49 + 0.10292185166526803108e-8 * t38 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.23544214433231248946e-9 * t56 + t65 * t39 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.19600578116243130987e-14 * t33 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.84935838503720234277e-15 * t50 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t74 * t21;
    t43 = (-0.29665710185871373666e-4 * t4 * cosP2_1 + 0.47002813541250747890e-6 * t17 * cosP2_3) * cosP1_2 + (0.43612446662865448042e-6 * sinP2_3 * t17 - 0.22545939741262243986e-4 * sinP2_1 * t4) * sinP1_2;
    t45 = sinP1_3 * t8;
    t47 = sinP1_1 * t6;
    t49 = cosP1_3 * t8;
    t52 = t6 * cosP1_1;
    t54 = (-0.25427751587889748859e-6 * t49 + 0.46278507889959342921e-4 * t52) * cosP2_2 + (0.40108040171298097197e-4 * t47 - 0.22037384709504449011e-6 * t45) * sinP2_2;
    t49 = -0.16951834391926499237e-7 * cosP1_5 * t1 + 0.40684402540623598174e-5 * t49;
    t56 = 0.47088428866462497891e-7 * sinP1_4;
    t58 = 0.80992097650315496368e-7 * cosP1_4;
    t52 = -0.33903668783852998476e-7 * t52 * t15 * cosP2_4;
    t60 = t3 * t4 * (t58 * cosP2_1 + t56 * sinP2_1);
    t41 = t2 * t54 + t20 * t49 + t5 * t43 + 0.12842298781762499424e-9 * t22 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.98786913705865380176e-12 * t23 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.78402312464972523950e-14 * t24 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + 0.10344749561350541354e-15 * t25 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.74482196841723897765e-14 * t26 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.59977769035703980818e-12 * t27 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.52247301026657689966e-10 * t28 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.47944582118579997854e-8 * t29 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.21575061953360999032e-8 * t30 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.19976909216074999102e-10 * t31 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.19208566553918268368e-12 * t32 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t41 + t52 + t60;
    t43 = t50 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t49 = t51 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t50 = t53 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t22 = t22 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t23 = t23 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t24 = t24 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t25 = t25 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t26 = t26 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t27 = t27 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t28 = t28 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t29 = t29 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t35 = t35 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t36 = t36 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t37 = t37 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t38 = t38 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t30 = t30 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t31 = t31 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t32 = t32 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t33 = t33 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t51 = t61 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t52 = t6 * (-0.46278507889959342921e-4 * cosP2_2 * sinP1_1 + 0.40108040171298097197e-4 * cosP1_1 * sinP2_2) + t8 * (0.22037384709504449011e-6 * cosP1_3 * sinP2_2 - 0.25427751587889748859e-6 * cosP2_2 * sinP1_3);
    t53 = t15 * cosP2_4;
    t54 = t17 * (-0.43612446662865448042e-6 * sinP1_2 * cosP2_3 + 0.47002813541250747890e-6 * cosP1_2 * sinP2_3) * t5;
    t39 = t2 * t52 + t20 * (-0.40684402540623598174e-5 * t45 - 0.16951834391926499237e-7 * sinP1_5 * t1) + t21 * (t73 * sinP2_3 + t72 * sinP2_5) + t4 * ((-0.22545939741262243986e-4 * sinP1_2 * t5 - t56 * t3) * cosP2_1 + (0.40725086943164221772e-2 * t21 + t58 * t3 + 0.29665710185871373666e-4 * cosP1_2 * t5) * sinP2_1) + t65 * t39 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t66 * t40 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t67 * t42 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t68 * t44 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - t69 * t57 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) - t70 * t63 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8) + t71 * t46 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) + t47 * (t75 - 0.33903668783852998476e-7 * t53) + t54;
    t22 = -0.74482196841723897765e-14 * t26 - 0.59977769035703980818e-12 * t27 - 0.52247301026657689966e-10 * t28 - 0.47944582118579997854e-8 * t29 - 0.21575061953360999032e-8 * t30 - 0.19976909216074999102e-10 * t31 - 0.19208566553918268368e-12 * t32 - 0.19600578116243130987e-14 * t33 - 0.68602023406850958458e-14 * t35 - 0.33634592047473212777e-11 * t50 - 0.27223025161448793039e-18 * t51 - 0.12842298781762499424e-9 * t22 - 0.98786913705865380176e-12 * t23 - 0.78402312464972523950e-14 * t24 - 0.10344749561350541354e-15 * t25 - 0.16333815096869275822e-16 * t48 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) - 0.23544214433231248946e-9 * t55 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - 0.17967196606556203407e-15 * t34 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - 0.21778420129159034432e-16 * t59 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) - 0.32275618631413689028e-12 * t36 - 0.17428834060963392074e-10 * t37 - 0.10292185166526803108e-8 * t38 + t39 - 0.84935838503720234277e-15 * t43 - 0.50961503102232140564e-13 * t49;
    t23 = t19 * t9 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t24 = t1 * t7 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t25 = t3 * t15 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t26 = t8 * t17 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t27 = t6 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t13 = t13 * t9 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6);
    t15 = t16 * t15 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t28 = t18 * t17 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t19 = t19 * t2 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t1 = t1 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t4 = t8 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t12 = t12 * t10 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7);
    t17 = t6 * t17 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t29 = -0.33833149152782584239e-1 * t20 - 0.40684402540623598172e-6 * t53;
    t2 = (-0.71197704446091296802e-5 * cosP1_2 * cosP2_2 - 0.61704677186612457230e-5 * sinP1_2 * sinP2_2) * t5 * t2;
    t20 = -0.54245870054164797562e-6 * t3 * cosP1_4 * t20;
    t1 = -0.33974335401488093710e-13 * t15 - 0.82757996490804330839e-15 * t18 * t10 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.68602023406850958449e-15 * t14 * t7 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) - 0.19757382741173076034e-10 * t5 * t9 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.80050329072986246406e-8 * t1 - 0.67875144905273702952e-3 * t27 - 0.59631388448887832366e-18 * t12 + 0.50855503175779497713e-6 * t4 - 0.64725185860082997094e-7 * t26 - 0.28253057319877498730e-8 * t6 * t7 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.19365371178848213415e-11 * t28 + 0.44074769419008898021e-6 * t17 - 0.14112416243695054311e-12 * t8 * t10 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) - 0.70562081218475271554e-13 * t23 - 0.65309126283322112451e-11 * t24 - 0.17111615815767812768e-16 * t13 - 0.10889210064579517216e-16 * t16 * t11 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + t2 + t20 - 0.63926109491439997132e-9 * t25 - 0.12108453137090356598e-9 * t19 - 0.10453641661996336527e-14 * t3 * t11 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) + t29 * t21;
    bf[0] = t41;
    bf[1] = t22;
    bf[2] = t1;
}

static void idsbf_4_8_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t9, t90;
    t1 = LegP1[93];
    t2 = LegP2[41];
    t3 = LegP1[100];
    t4 = LegP2[42];
    t5 = LegP1[101];
    t6 = LegP2[43];
    t7 = LegP1[102];
    t8 = LegP2[44];
    t9 = LegP1[95];
    t10 = LegP2[37];
    t11 = LegP1[92];
    t12 = LegP2[40];
    t13 = LegP1[97];
    t14 = LegP2[39];
    t15 = LegP1[96];
    t16 = LegP1[94];
    t17 = LegP2[38];
    t18 = LegP1[98];
    t19 = LegP1[99];
    t20 = LegP1[103];
    t21 = LegP2[36];
    t22 = LegP1[91];
    t23 = t1 * t2;
    t24 = t3 * t4;
    t25 = t5 * t6;
    t26 = t7 * t8;
    t27 = t13 * t14;
    t28 = t9 * t6;
    t29 = t15 * t8;
    t30 = t16 * t4;
    t31 = t15 * t17;
    t32 = t18 * t12;
    t33 = t19 * t2;
    t34 = t7 * t4;
    t35 = t34 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6);
    t36 = t20 * t6;
    t37 = t36 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7);
    t38 = LegP1[104] * t8;
    t39 = t16 * cosP1_3;
    t40 = t39 * t17;
    t41 = t1 * cosP1_2;
    t42 = t41 * t14;
    t43 = t16 * sinP1_3;
    t44 = t43 * t17;
    t45 = t1 * sinP1_2;
    t46 = t45 * t14;
    t47 = t3 * t12;
    t48 = t5 * t2;
    t49 = t13 * t10;
    t50 = t1 * t6;
    t51 = t50 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t52 = t16 * t8;
    t53 = t52 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t54 = t11 * t4;
    t55 = t54 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t56 = t18 * t17;
    t57 = t19 * t14;
    t58 = t57 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t59 = t15 * t12;
    t60 = t59 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t61 = t9 * t2;
    t62 = t61 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t63 = t3 * t8;
    t64 = t63 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t65 = t9 * t14;
    t66 = t65 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t67 = t16 * t12;
    t68 = t67 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t69 = t13 * t2;
    t70 = t69 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t71 = t13 * t6;
    t72 = t71 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t73 = t18 * t8;
    t74 = t15 * t4;
    t75 = t74 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t76 = t18 * t4;
    t77 = t76 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t78 = t19 * t6;
    t79 = t78 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t80 = t22 * t2;
    t81 = -t15 * cosP1_5 * t21 + t80 * cosP2_5;
    t82 = 0.39127397914563277894e-2;
    t41 = 0.26873212853408844708e-4 * t41;
    t83 = cosP1_4 * t9;
    t84 = 0.32573591337465266314e-7 * t83;
    t45 = -0.23290117806287665412e-4 * t45;
    t85 = 0.56568542494923801952e-27 * sinP1_4 * t9;
    t86 = (t22 * t82 - t41 + t84) * cosP2_1 + (t45 - t85) * sinP2_1;
    t87 = cosP2_4 * t12;
    t88 = -0.32573591337465266312e-7 * t87;
    t89 = (-0.27088198556236115461e-2 * t21 + t88 + 0.32247855424090613650e-4 * t17 * cosP2_2) * cosP1_1 + 0.27948141367545198498e-4 * sinP1_1 * sinP2_2 * t17;
    t39 = 0.14658116101859369840e-5 * t39 * t21;
    t90 = 0.25407401243222907723e-5 * t22 * t14 * cosP2_3;
    t35 = 0.74728675887295359864e-19 * t25 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) + 0.31386043872664051142e-15 * t33 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t86 * t10 + t89 * t11 - 0.31386043872664051144e-16 * t29 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + 0.44837205532377215918e-17 * t24 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - 0.10440253633802969972e-9 * t23 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.15568474143186533305e-20 * t26 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8) + 0.20564135945369486306e-11 * t27 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.12454779314549226644e-19 * t37 - t90 + 0.24481114220677959892e-13 * t32 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.45195903176636233648e-14 * t28 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t39 - 0.67793854764954350466e-12 * t30 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.18096439631925147952e-9 * t31 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.37364337943647679935e-18 * t35;
    t37 = 0.21172834369352423103e-6;
    t39 = 0.24430193503098949735e-6;
    t35 = t35 - 0.77842370715932666516e-21 * t38 * (cosP1_13 * cosP2_8 + sinP1_13 * sinP2_8) + t39 * (-t40 * cosP2_2 + t42 * cosP2_3) + t37 * (-t44 * sinP2_2 + t46 * sinP2_3) - 0.81603714068926532968e-15 * t47 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - 0.15693021936332025570e-16 * t48 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) - 0.22620549539906434939e-9 * t49 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.49715493494299857012e-12 * t51 + 0.28247439485397646026e-14 * t53 + 0.89487888289739742622e-10 * t55 - 0.32315070771294907055e-11 * t56 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.48962228441355919780e-13 * t58 - 0.19193193549011520557e-10 * t60 + 0.13287595533931052692e-10 * t62 - 0.26155036560553375953e-18 * t64 - 0.20728649032932442200e-8 * t66 + 0.17273874194110368499e-8 * t68 - 0.18454993797126462072e-12 * t70 + 0.87880922843459343198e-15 * t72 + 0.78465109681660127860e-17 * t73 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.10545710741215121184e-12 * t75 - 0.18831626323598430684e-14 * t77 - 0.20924029248442700763e-16 * t79 + 0.16286795668732633156e-7 * t81;
    t50 = t50 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t51 = t52 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t52 = t54 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t53 = t56 * (cosP1_7 * sinP2_2 - sinP1_7 * cosP2_2);
    t54 = t57 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3);
    t55 = t59 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t56 = t63 * (cosP1_9 * sinP2_8 - sinP1_9 * cosP2_8);
    t57 = t65 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3);
    t23 = t23 * (cosP1_2 * sinP2_5 - sinP1_2 * cosP2_5);
    t31 = t31 * (cosP1_5 * sinP2_2 - sinP1_5 * cosP2_2);
    t32 = t32 * (cosP1_7 * sinP2_4 - sinP1_7 * cosP2_4);
    t33 = t33 * (cosP1_8 * sinP2_5 - sinP1_8 * cosP2_5);
    t26 = t26 * (-sinP1_11 * cosP2_8 + cosP1_11 * sinP2_8);
    t58 = t69 * (cosP1_6 * sinP2_5 - sinP1_6 * cosP2_5);
    t59 = t73 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t60 = t74 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t62 = t78 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t24 = t24 * (cosP1_9 * sinP2_6 - sinP1_9 * cosP2_6);
    t25 = t25 * (-sinP1_10 * cosP2_7 + cosP1_10 * sinP2_7);
    t34 = t34 * (-sinP1_11 * cosP2_6 + cosP1_11 * sinP2_6);
    t63 = t67 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t64 = t76 * (cosP1_7 * sinP2_6 - sinP1_7 * cosP2_6);
    t41 = (t45 + t85) * cosP2_1 + (t41 + t84) * sinP2_1;
    t45 = t17 * (-0.32247855424090613650e-4 * cosP2_2 * sinP1_1 + 0.27948141367545198498e-4 * cosP1_1 * sinP2_2) + t88 * sinP1_1;
    t23 = t41 * t10 + t45 * t11 + 0.15693021936332025570e-16 * t48 * (-sinP1_10 * cosP2_5 + cosP1_10 * sinP2_5) + 0.81603714068926532968e-15 * t47 * (cosP1_9 * sinP2_4 - sinP1_9 * cosP2_4) + 0.10440253633802969972e-9 * t23 - 0.89487888289739742622e-10 * t52 - 0.19193193549011520557e-10 * t55 + 0.22620549539906434939e-9 * t49 * (cosP1_6 * sinP2_1 - sinP1_6 * cosP2_1) - t37 * (t46 * cosP2_3 - t40 * sinP2_2) + 0.20728649032932442200e-8 * t57 + 0.26155036560553375953e-18 * t56 - 0.12454779314549226644e-19 * t36 * (sinP1_12 * cosP2_7 - cosP1_12 * sinP2_7) + 0.77842370715932666516e-21 * t38 * (-sinP1_13 * cosP2_8 + cosP1_13 * sinP2_8) + t39 * (-t44 * cosP2_2 + t42 * sinP2_3) + 0.48962228441355919780e-13 * t54 - 0.28247439485397646026e-14 * t51 - 0.49715493494299857012e-12 * t50 - 0.13287595533931052692e-10 * t61 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.32315070771294907055e-11 * t53;
    t36 = sinP2_1 * t10 * t82 + 0.25407401243222907723e-5 * t14 * sinP2_3;
    t37 = -0.27088198556236115461e-2 * sinP1_1 * t11 - 0.14658116101859369840e-5 * t43;
    t23 = t23 + 0.74728675887295359864e-19 * t25 + 0.31386043872664051142e-15 * t33 + t36 * t22 + t37 * t21 - 0.31386043872664051144e-16 * t29 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.20924029248442700763e-16 * t62 + 0.18831626323598430684e-14 * t64 - 0.87880922843459343198e-15 * t71 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + 0.44837205532377215918e-17 * t24 - 0.17273874194110368499e-8 * t63 + 0.15568474143186533305e-20 * t26 + 0.20564135945369486306e-11 * t27 * (cosP1_6 * sinP2_3 - sinP1_6 * cosP2_3) - 0.16286795668732633156e-7 * t15 * sinP1_5 * t21 + 0.16286795668732633156e-7 * t80 * sinP2_5 + 0.24481114220677959892e-13 * t32 - 0.45195903176636233648e-14 * t28 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.18454993797126462072e-12 * t58 - 0.10545710741215121184e-12 * t60 - 0.67793854764954350466e-12 * t30 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.18096439631925147952e-9 * t31 - 0.78465109681660127860e-17 * t59 + 0.37364337943647679935e-18 * t34;
    t24 = t9 * t8 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t25 = t1 * t4 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t26 = t19 * t12 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t27 = 0.35214658123106950102e-1 * t21 + 0.42345668738704846206e-6 * t87;
    t1 = (0.53746425706817689416e-5 * cosP1_2 * cosP2_2 + 0.46580235612575330828e-5 * sinP1_2 * sinP2_2) * t17 * t1;
    t21 = 0.29316232203718739679e-6 * t83 * t21;
    t1 = t22 * t27 + 0.15568474143186533304e-20 * t20 * t8 * (cosP1_12 * cosP2_8 + sinP1_12 * sinP2_8) - 0.39088309604958319574e-6 * t11 * t14 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.36192879263850295906e-8 * t15 * t10 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.25056608721127127930e-8 * t11 * t2 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.12554417549065620456e-15 * t3 * t2 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + 0.22418602766188607962e-17 * t5 * t4 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) - 0.32573591337465266313e-6 * t16 * t10 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.45241099079812869878e-10 * t13 * t17 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.58754674129627103734e-12 * t18 * t14 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.90391806353272467295e-13 * t16 * t6 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.56494878970795292054e-15 * t24 + 0.14914648048289957105e-10 * t25 + 0.81603714068926532972e-14 * t26 + t1 + t21;
    bf[0] = t35;
    bf[1] = t23;
    bf[2] = 0.26155036560553375953e-17 * t19 * t8 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + 0.25108835098131240916e-15 * t18 * t6 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.26364276853037802959e-13 * t13 * t4 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.29527990075402339316e-11 * t15 * t2 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.34547748388220736999e-9 * t9 * t12 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.41457298065864884400e-7 * t16 * t14 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.60195996791635812146e-3 * t11 * t10 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.49819117258196906578e-19 * t7 * t6 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7) + t1;
}

static void idsbf_4_10_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t5, t6, t7, t8, t9;
    t1 = LegP1[20];
    t2 = LegP2[59];
    t3 = LegP2[57];
    t4 = LegP1[19];
    t5 = LegP2[56];
    t6 = LegP1[17];
    t7 = LegP1[16];
    t8 = LegP2[60];
    t9 = LegP1[18];
    t10 = LegP2[61];
    t11 = LegP2[62];
    t12 = LegP2[63];
    t13 = LegP2[58];
    t14 = LegP2[64];
    t15 = LegP1[15];
    t16 = LegP2[55];
    t17 = t15 * t8;
    t18 = t9 * t2;
    t19 = t4 * t13;
    t20 = t1 * t2;
    t21 = t1 * t3;
    t22 = t7 * cosP1_1;
    t23 = t4 * cosP1_4;
    t24 = t23 * t5;
    t25 = t6 * t8;
    t26 = t9 * t10;
    t27 = t4 * t11;
    t28 = t1 * t12;
    t29 = t6 * cosP1_2 * t13;
    t30 = t9 * cosP1_3;
    t31 = t7 * t10;
    t32 = t31 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t33 = t6 * t11;
    t34 = t33 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t35 = t9 * t12;
    t36 = t35 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t37 = t4 * t14;
    t38 = t37 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9);
    t39 = t1 * LegP2[65];
    t40 = t1 * t10;
    t41 = t4 * t8;
    t42 = -0.10537017790010295962e-5;
    t43 = 0.70246785266735306408e-7;
    t44 = 0.14049357053347061283e-6;
    t45 = t13 * cosP2_3;
    t46 = 0.29739679010525059324e-2 * t5 * cosP2_1 - 0.29503649812028828690e-5 * t45;
    t47 = 0.63222106740061775772e-5 * t30 - 0.49566131684208432206e-2 * t22;
    t22 = t46 * t15 + t47 * t16 + t43 * (-t1 * cosP1_5 * t16 + t17 * cosP2_5) + 0.78051983629705896012e-9 * t21 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.41813562658771015726e-10 * t26 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.23415595088911768806e-8 * t32 - 0.16725425063508406289e-8 * t25 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.17561696316683826604e-7 * t18 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.13659097135198531802e-7 * t19 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.38716261721084273816e-13 * t28 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) - 0.11614878516325282144e-11 * t27 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t44 * (-t22 * t2 * cosP2_4 + t24 * cosP2_1) + 0.19358130860542136907e-12 * t38 + 0.34844635548975846436e-11 * t36 - 0.19512995907426474002e-9 * t20 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.83627125317542031448e-10 * t34 + t42 * (t30 * t3 * cosP2_2 - t29 * cosP2_3);
    t32 = t7 * sinP1_1;
    t34 = sinP1_3 * t9;
    t35 = t35 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t36 = t37 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9);
    t37 = t39 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10);
    t38 = t40 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t46 = t41 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t18 = t18 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t47 = 0.29739679010525059324e-2 * sinP2_1 * t5 + 0.29503649812028828690e-5 * sinP2_3 * t13;
    t17 = t47 * t15 + (-0.49566131684208432206e-2 * t32 - 0.63222106740061775772e-5 * t34) * t16 - t43 * (t1 * sinP1_5 * t16 - t17 * sinP2_5) - 0.78051983629705896012e-9 * t21 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.23415595088911768806e-8 * t31 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - 0.16725425063508406289e-8 * t25 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.17561696316683826604e-7 * t18 + 0.13659097135198531802e-7 * t19 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3) - 0.19358130860542136907e-13 * t37 + t44 * (-t32 * t2 * cosP2_4 + t24 * sinP2_1) - 0.19358130860542136907e-12 * t36 - 0.65043319691421580010e-11 * t38 - 0.34844635548975846436e-11 * t35 - 0.19512995907426474002e-9 * t20 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.83627125317542031448e-10 * t33 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - 0.32521659845710790006e-9 * t46 + t42 * (t34 * t3 * cosP2_2 - t29 * sinP2_3);
    t17 = t3 * (t7 * (-0.59007299624057657387e-4 * cosP2_2 * sinP1_1 + 0.51139659674183303067e-4 * cosP1_1 * sinP2_2) + 0.91320820846755898337e-6 * t30 * sinP2_2) + t6 * (t5 * (-0.65750991009664246808e-4 * sinP1_2 * cosP2_1 + 0.75866528088074130932e-4 * cosP1_2 * sinP2_1) - 0.91320820846755898334e-6 * t45 * sinP1_2) - 0.11614878516325282144e-11 * t27 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.38716261721084273816e-13 * t28 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.41813562658771015726e-10 * t26 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t17;
    t18 = t4 * t2 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t19 = -0.29739679010525059321e-1 * t15 - 0.14049357053347061282e-5 * t23;
    t2 = -0.84296142320082367692e-6 * t15 * t2 * cosP2_4;
    t15 = (-0.14611331335480943733e-4 * sinP1_2 * sinP2_2 - 0.16859228464016473537e-4 * cosP1_2 * cosP2_2) * t6 * t3;
    t1 = t16 * t19 - 0.24586374843357357245e-6 * t9 * t13 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.99132263368416864414e-3 * t7 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.14049357053347061282e-7 * t1 * t5 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.12644421348012355154e-5 * t9 * t5 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.98345499373429428974e-6 * t7 * t13 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.23415595088911768800e-7 * t7 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.66901700254033625152e-9 * t6 * t10 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.20906781329385507862e-10 * t9 * t11 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) - 0.77432523442168547630e-12 * t4 * t12 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) - 0.38716261721084273812e-13 * t1 * t14 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9) - 0.65043319691421580010e-10 * t1 * t8 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.39025991814852948007e-8 * t18 + t2 + t15;
    bf[0] = t3 * (t7 * (0.51139659674183303067e-4 * sinP1_1 * sinP2_2 + 0.59007299624057657387e-4 * cosP1_1 * cosP2_2) - 0.91320820846755898337e-6 * sinP1_3 * sinP2_2 * t9) + t6 * (t5 * (-0.75866528088074130932e-4 * cosP1_2 * cosP2_1 - 0.65750991009664246808e-4 * sinP1_2 * sinP2_1) + 0.91320820846755898334e-6 * sinP1_2 * sinP2_3 * t13) + 0.19358130860542136907e-13 * t39 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10) + 0.65043319691421580010e-11 * t40 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.32521659845710790006e-9 * t41 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t22;
    bf[1] = t17;
    bf[2] = t1;
}

static void idsbf_4_10_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t8, t9;
    t1 = LegP1[33];
    t2 = LegP2[55];
    t3 = LegP1[28];
    t4 = LegP2[56];
    t5 = LegP1[29];
    t6 = LegP1[31];
    t7 = LegP2[58];
    t8 = LegP2[60];
    t9 = LegP2[57];
    t10 = LegP1[32];
    t11 = LegP1[30];
    t12 = LegP2[59];
    t13 = LegP2[61];
    t14 = LegP2[62];
    t15 = LegP2[63];
    t16 = LegP1[34];
    t17 = LegP2[64];
    t18 = LegP1[35];
    t19 = LegP2[65];
    t20 = t11 * t8;
    t21 = t6 * t13;
    t22 = t10 * t14;
    t23 = t1 * t15;
    t24 = t16 * t17;
    t25 = t18 * t19;
    t26 = t18 * t9;
    t27 = t16 * t4;
    t28 = t5 * t13;
    t29 = t11 * t14;
    t30 = t29 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t31 = t6 * t15;
    t32 = t31 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t33 = t10 * t17;
    t34 = t33 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9);
    t35 = t1 * t19;
    t36 = t35 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10);
    t37 = t1 * t13;
    t38 = t37 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t39 = t10 * t8;
    t40 = t39 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t41 = t6 * t12;
    t42 = t10 * t7;
    t43 = t42 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t44 = t1 * t12;
    t45 = t44 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t46 = t16 * t8;
    t18 = t18 * t13;
    t47 = t1 * t9;
    t48 = -0.12645866672512476552e-7;
    t49 = 0.21678628581449959806e-8;
    t50 = -0.15484734701035685575e-8;
    t51 = 0.11613551025776764183e-8;
    t52 = -0.59123532494863526746e-9;
    t53 = -0.18065523817874966502e-9;
    t54 = -0.38711836752589213946e-10;
    t55 = 0.21506575973660674412e-10;
    t56 = 0.16423203470795424097e-10;
    t57 = -0.54744011569318080318e-11;
    t58 = -0.10753287986830337205e-11;
    t59 = 0.43013151947321348824e-12;
    t60 = 0.91240019282196800532e-13;
    t61 = -0.35844293289434457350e-13;
    t62 = 0.97757163516639429138e-14;
    t63 = -0.16292860586106571523e-14;
    t64 = 0.27154767643510952538e-15;
    t65 = -0.13577383821755476271e-15;
    t30 = t57 * t26 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t54 * t21 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t55 * t30 + t56 * t40 + t63 * t24 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) + t64 * t36 + t65 * t25 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) + t51 * t28 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t52 * t27 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t53 * t45 - 0.61488473794658067812e-7 * t10 * sinP1_4 * t4 * sinP2_1 + t61 * t23 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t62 * t34 + t48 * t43 + t49 * t41 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t50 * t20 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t58 * t22 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t59 * t32 + t60 * t38;
    t32 = cosP2_3 * t7;
    t34 = sinP2_3 * t7;
    t36 = t4 * sinP2_1;
    t38 = sinP1_3 * t6;
    t40 = sinP1_1 * t5;
    t43 = cosP1_3 * t6;
    t45 = 0.65035885744349879418e-7 * t8;
    t66 = cosP1_4 * t10;
    t67 = cosP2_4 * t12;
    t68 = -0.13007177148869975884e-6 * t67;
    t69 = t4 * (-0.64255455115417680869e-4 * sinP1_2 * cosP2_1 + 0.66856890545191676045e-4 * cosP1_2 * sinP2_1) + t7 * (-0.18788144770589965166e-6 * sinP1_2 * cosP2_3 + 0.31795321919459941050e-6 * cosP1_2 * sinP2_3);
    t70 = t10 * t4 * (0.61488473794658067812e-7 * sinP1_4 * cosP2_1 + 0.68583297694041691024e-7 * cosP1_4 * sinP2_1);
    t20 = t11 * t69 + t50 * t20 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t54 * t21 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t58 * t22 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t61 * t23 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t63 * t24 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + t9 * (t5 * (-0.29266148584957445737e-4 * cosP2_2 * sinP1_1 + 0.25363995440296452973e-4 * cosP1_1 * sinP2_2) + t6 * (-0.97553828616524819131e-6 * cosP2_2 * sinP1_3 + 0.84546651467654843245e-6 * cosP1_3 * sinP2_2)) - 0.27372005784659040161e-11 * t46 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.45620009641098400269e-13 * t18 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.10948802313863616064e-10 * t47 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t70 + t68 * t40;
    t21 = t45 * sinP2_5 + 0.27315072012626949354e-5 * t34 + 0.27533592588727964953e-2 * t36;
    t22 = -0.65035885744349879414e-7 * sinP1_5 * t1 - 0.78043062893219855307e-6 * t38 - 0.45889320981213274919e-2 * t40;
    t20 = t2 * t22 + t3 * t21 + t48 * t42 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t49 * t41 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t51 * t28 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t52 * t27 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t53 * t44 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t55 * t29 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - t56 * t39 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t57 * t26 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - t59 * t31 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - t60 * t37 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - t62 * t33 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9) - t64 * t35 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10) + t65 * t25 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + t20;
    t19 = t16 * t19 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10);
    t21 = t16 * t13 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t22 = t1 * t8 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t12 = t10 * t12 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t23 = t6 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t24 = t5 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t25 = 0.32122524686849292443e-1 * t2 + 0.91050240042089831186e-6 * t67;
    t26 = (0.97553828616524819129e-5 * cosP1_2 * cosP2_2 + 0.84546651467654843245e-5 * sinP1_2 * sinP2_2) * t11 * t9;
    t27 = 0.39021531446609927646e-6 * t66 * t2;
    t6 = 0.10948802313863616064e-10 * t22 + 0.10116693338009981244e-6 * t23 + t27 + 0.78667407396365614153e-3 * t24 - 0.78043062893219855300e-6 * t5 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.52028708595479903542e-6 * t6 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + t26 + 0.38711836752589213942e-9 * t11 * t13 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.10839314290724979902e-8 * t12 + 0.23649412997945410696e-8 * t1 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + t25 * t3 + 0.18581681641242822689e-7 * t5 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.27154767643510952536e-15 * t19 + 0.65171442344426286090e-14 * t1 * t17 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9) + 0.91240019282196800536e-13 * t21 + 0.21506575973660674410e-12 * t10 * t15 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) + 0.86026303894642697650e-11 * t6 * t14 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.10948802313863616063e-10 * t16 * t9 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    bf[0] = t11 * ((0.31795321919459941050e-6 * t32 - 0.66856890545191676045e-4 * t4 * cosP2_1) * cosP1_2 + (-0.64255455115417680869e-4 * t36 + 0.18788144770589965166e-6 * t34) * sinP1_2) + t2 * (-0.65035885744349879414e-7 * cosP1_5 * t1 + 0.78043062893219855307e-6 * t43) + t3 * (t45 * cosP2_5 - 0.27315072012626949354e-5 * t32) + t9 * ((0.29266148584957445737e-4 * t5 * cosP1_1 - 0.97553828616524819131e-6 * t43) * cosP2_2 + (0.25363995440296452973e-4 * t40 - 0.84546651467654843245e-6 * t38) * sinP2_2) - 0.27372005784659040161e-11 * t46 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.45620009641098400269e-13 * t18 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.10948802313863616064e-10 * t47 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t30 + (-0.45889320981213274919e-2 * t2 + t68) * t5 * cosP1_1 + (0.27533592588727964953e-2 * t3 + 0.68583297694041691024e-7 * t66) * t4 * cosP2_1;
    bf[1] = t20;
    bf[2] = t6;
}

static void idsbf_4_10_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t8, t9;
    t1 = LegP1[33];
    t2 = LegP2[55];
    t3 = LegP1[28];
    t4 = LegP2[56];
    t5 = LegP1[29];
    t6 = LegP1[31];
    t7 = LegP2[58];
    t8 = LegP2[60];
    t9 = LegP1[32];
    t10 = LegP2[62];
    t11 = LegP2[63];
    t12 = LegP1[34];
    t13 = LegP2[64];
    t14 = LegP1[35];
    t15 = LegP2[65];
    t16 = LegP2[57];
    t17 = LegP1[30];
    t18 = LegP2[61];
    t19 = LegP2[59];
    t20 = t9 * t7;
    t21 = t1 * t19;
    t22 = t12 * t8;
    t23 = t14 * t18;
    t24 = t14 * t19;
    t25 = t12 * t7;
    t26 = t14 * t11;
    t27 = t6 * t18;
    t28 = t12 * t10;
    t29 = t1 * t16;
    t30 = t17 * t8;
    t31 = t30 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t32 = t9 * t10;
    t33 = t32 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t34 = t1 * t11;
    t35 = t34 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t36 = t12 * t13;
    t37 = t36 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t38 = t14 * t15;
    t39 = t38 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t40 = t14 * t16;
    t41 = t12 * t4;
    t42 = t5 * t18;
    t43 = t17 * t10;
    t44 = t6 * t11;
    t45 = t9 * t13;
    t46 = t1 * t15;
    t47 = t1 * t18;
    t48 = t9 * t8;
    t49 = t6 * t19;
    t50 = 0.32814519700580231216e-10;
    t51 = -0.13929428770858547127e-10;
    t52 = 0.38267661458402602000e-12;
    t53 = 0.94871910698956450794e-13;
    t54 = 0.31889717882002168339e-14;
    t55 = 0.12188250174501228736e-8;
    t56 = cosP1_3 * t6;
    t57 = cosP1_1 * t5;
    t58 = 0.25484168524861129144e-4 * t56 + 0.30581002229833354977e-2 * t57 - 0.19306188276409946319e-6 * cosP1_5 * t1;
    t59 = cosP2_3 * t7;
    t60 = cosP2_1 * t4;
    t61 = -0.13900455559015161351e-4 * t59 - 0.22518738005604561387e-2 * t60 + 0.19306188276409946318e-6 * cosP2_5 * t8;
    t31 = -0.96732144242073243942e-14 * t35 + t54 * t26 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.29576820423456315072e-8 * t29 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.18602335431167931529e-15 * t37 + t53 * t28 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) - 0.38305929119861004606e-10 * t27 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t50 * t25 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t58 * t2 + t61 * t3 - 0.64736127300464401722e-12 * t22 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.58039286545243946364e-12 * t33 - 0.44291274836114122688e-17 * t39 - 0.26814150383902703222e-8 * t31 - 0.17433045775494518691e-13 * t23 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t55 * t20 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t51 * t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t52 * t24 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t33 = 0.18386845977533282209e-8;
    t35 = 0.10098835858872446668e-9;
    t37 = 0.31728143311400024016e-11;
    t39 = 0.80610120201727703286e-15;
    t58 = sinP2_3 * t7;
    t61 = sinP2_1 * t4;
    t59 = (0.58991130844585947094e-7 * t59 + 0.10039217903733172087e-4 * t60) * cosP1_2 + (-0.32713263468361297931e-6 * t58 + 0.52512832111835053995e-4 * t61) * sinP1_2;
    t60 = sinP1_3 * t6;
    t62 = sinP1_1 * t5;
    t56 = (0.64353960921366487748e-7 * t56 - 0.57918564829229838944e-5 * t57) * cosP2_2 + (0.45047772644956541415e-6 * t60 - 0.40542995380460887274e-4 * t62) * sinP2_2;
    t63 = 0.80734969155896139138e-7 * sinP1_4;
    t64 = 0.46685873468409506552e-6 * cosP1_4;
    t36 = t36 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9);
    t38 = t38 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10);
    t65 = t40 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t66 = t42 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t67 = t43 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t68 = t44 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t69 = t45 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9);
    t60 = 0.30581002229833354977e-2 * t62 - 0.19306188276409946319e-6 * sinP1_5 * t1 - 0.25484168524861129144e-4 * t60;
    t58 = 0.19306188276409946318e-6 * sinP2_5 * t8 + 0.13900455559015161351e-4 * t58 - 0.22518738005604561387e-2 * t61;
    t22 = -0.96732144242073243942e-14 * t34 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.34475336207874904146e-8 * t66 - 0.29576820423456315072e-8 * t29 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.26814150383902703222e-8 * t30 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.18602335431167931529e-15 * t36 - 0.38305929119861004606e-10 * t27 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t60 * t2 + t58 * t3 - 0.12768643039953668203e-11 * t68 - 0.64736127300464401722e-12 * t22 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.58039286545243946364e-12 * t32 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.44291274836114122688e-17 * t38 - 0.29019643272621973184e-13 * t69 - 0.17551080251281769382e-8 * t41 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - 0.17433045775494518691e-13 * t23 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.63843215199768341006e-10 * t67 - 0.16251000232668304983e-10 * t65;
    t23 = t5 * (-0.40542995380460887274e-4 * cosP1_1 * sinP2_2 + 0.57918564829229838944e-5 * cosP2_2 * sinP1_1) + t6 * (0.64353960921366487748e-7 * cosP2_2 * sinP1_3 - 0.45047772644956541415e-6 * cosP1_3 * sinP2_2);
    t27 = t17 * t7 * (0.58991130844585947094e-7 * cosP1_2 * sinP2_3 + 0.32713263468361297931e-6 * sinP1_2 * cosP2_3);
    t20 = t16 * t23 - t33 * t49 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t35 * t48 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t37 * t47 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - t39 * t46 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10) + t4 * ((0.52512832111835053995e-4 * sinP1_2 * t17 - t63 * t9) * cosP2_1 + (-0.10039217903733172087e-4 * cosP1_2 * t17 + t64 * t9) * sinP2_1) - t50 * t25 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t51 * t21 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t52 * t24 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t53 * t28 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - t54 * t26 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + t55 * t20 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t22 + t27 - 0.38612376552819892642e-6 * t62 * t19 * cosP2_4;
    t21 = t1 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t22 = t6 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t23 = t5 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t24 = t5 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t25 = t17 * t18 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t26 = t6 * t10 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t11 = t9 * t11 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t15 = t12 * t15 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10);
    t27 = 0.24464801783866683981e-1 * t2 - 0.30889901242255914112e-5 * t19 * cosP2_4;
    t28 = (0.90095545289913082830e-5 * sinP1_2 * sinP2_2 + 0.12870792184273297546e-5 * cosP1_2 * cosP2_2) * t17 * t16;
    t2 = -0.46334851863383871166e-5 * t9 * cosP1_4 * t2;
    t1 = -0.48366072121036621974e-14 * t1 * t13 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9) - 0.48265470691024865800e-7 * t24 - 0.45632808653332600388e-7 * t21 + 0.56296845014011403472e-3 * t5 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.23215714618097578546e-12 * t11 + 0.26814150383902703222e-7 * t6 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.46877885286543187454e-11 * t14 * t7 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + t2 + 0.34751138897537903374e-5 * t23 + 0.42473614208101881908e-5 * t22 + t28 - 0.16831393098120744448e-10 * t1 * t8 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + t27 * t3 - 0.12401556954111954352e-15 * t15 - 0.13553130099850921543e-13 * t14 * t10 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.76611858239722009210e-9 * t25 - 0.45502800651471253950e-9 * t12 * t16 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.33430629050060513103e-9 * t9 * t19 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.12768643039953668201e-10 * t26 - 0.48812528171384652335e-12 * t12 * t18 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    bf[0] = t16 * t56 + t17 * t59 - 0.16251000232668304983e-10 * t40 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.17551080251281769382e-8 * t41 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.34475336207874904146e-8 * t42 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.63843215199768341006e-10 * t43 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.12768643039953668203e-11 * t44 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + 0.29019643272621973184e-13 * t45 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9) + t39 * t46 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10) + t37 * t47 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t35 * t48 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t33 * t49 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t31 + t9 * t4 * (t64 * cosP2_1 + t63 * sinP2_1) - 0.38612376552819892642e-6 * t57 * t19 * cosP2_4;
    bf[1] = t20;
    bf[2] = t1;
}

static void idsbf_4_10_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t7, t8, t9;
    t1 = LegP1[50];
    t2 = LegP2[59];
    t3 = LegP1[52];
    t4 = LegP1[51];
    t5 = LegP2[58];
    t6 = LegP2[57];
    t7 = LegP1[49];
    t8 = LegP2[56];
    t9 = LegP1[47];
    t10 = LegP1[46];
    t11 = LegP2[60];
    t12 = LegP1[48];
    t13 = LegP2[61];
    t14 = LegP2[55];
    t15 = LegP1[45];
    t16 = LegP1[53];
    t17 = LegP2[62];
    t18 = LegP1[54];
    t19 = LegP2[63];
    t20 = LegP2[64];
    t21 = LegP2[65];
    t22 = t1 * t2;
    t23 = t3 * t2;
    t24 = t4 * t5;
    t25 = t1 * t6;
    t26 = t12 * t2;
    t27 = t7 * t5;
    t28 = t9 * t11;
    t29 = t12 * t13;
    t30 = t4 * t11;
    t31 = t3 * t13;
    t32 = t16 * t17;
    t33 = t32 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t34 = t18 * t19;
    t35 = t34 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t36 = t7 * t17;
    t37 = t36 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t38 = t1 * t19;
    t39 = t38 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t40 = t4 * t20;
    t41 = t40 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t42 = t3 * t21;
    t18 = t18 * t2;
    t43 = t16 * t5;
    t44 = t3 * t6;
    t45 = t4 * t8;
    t46 = t10 * t13;
    t47 = t9 * t17;
    t48 = t12 * t19;
    t49 = t7 * t20;
    t50 = t1 * t21;
    t51 = t3 * t19;
    t52 = t51 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t53 = t4 * t17;
    t54 = t53 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t55 = t1 * t13;
    t56 = t55 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t57 = t7 * t11;
    t58 = t57 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t59 = -0.21230869796701621585e-2;
    t60 = cosP1_1 * t10;
    t61 = 0.28832045402928128079e-2 * t60 + 0.54606146596454788030e-5 * cosP1_3 * t12 - 0.18202048865484929343e-6 * cosP1_5 * t1;
    t62 = cosP2_3 * t5;
    t63 = cosP2_1 * t8;
    t64 = t63 * t59 - 0.13105475183149149126e-4 * t62 + 0.18202048865484929341e-6 * cosP2_5 * t11;
    t65 = t8 * (-0.14892585435396760370e-6 * sinP1_4 * sinP2_1 + 0.21511512295573098312e-6 * cosP1_4 * cosP2_1) * t7;
    t33 = -0.42593378666258207019e-15 * t33 - 0.17538450039047497008e-15 * t41 + 0.88393788196799384922e-12 * t24 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.61033806135885289592e-12 * t30 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.54719964121828190662e-12 * t37 + 0.18385907944934272064e-9 * t25 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.11491192465583920039e-8 * t27 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t65 - 0.25280623424284624086e-8 * t28 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.12527464313605355006e-16 * t35 + t61 * t14 + t64 * t15 + 0.30065914352652852012e-14 * t23 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.13132791389238765758e-10 * t22 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.39398374167716297275e-9 * t26 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.36115176320406605842e-10 * t29 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.16436033179450225769e-13 * t31 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.91199940203046984440e-14 * t39;
    t35 = sinP2_3 * t5;
    t37 = (0.13375748029939682925e-6 * t62 + 0.21842458638581915211e-4 * t63) * cosP1_2 + (0.37132179685589255859e-4 * sinP2_1 * t8 - 0.23028349701030175758e-6 * t35) * sinP1_2;
    t39 = t10 * (-0.23784010517566974341e-4 * sinP1_1 * sinP2_2 - 0.33977157882238534768e-5 * cosP1_1 * cosP2_2) + t12 * (0.60673496218283097804e-7 * cosP1_3 * cosP2_2 + 0.42471447352798168464e-6 * sinP1_3 * sinP2_2);
    t41 = -0.36404097730969858682e-6 * t60 * t2 * cosP2_4;
    t33 = t33 - 0.15032957176326426006e-14 * t18 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.20224498739427699268e-8 * t46 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - 0.16547317150440844857e-8 * t45 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) - 0.41758214378684516688e-17 * t42 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) + 0.27359982060914095332e-12 * t48 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + 0.19723239815340270922e-12 * t56 - 0.14732298032799897487e-12 * t43 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.50109857254421420024e-16 * t50 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10) + 0.25054928627210710014e-16 * t52 + t37 * t9 + t39 * t6 + 0.35076900078094994016e-14 * t49 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9) + 0.25556027199754924210e-14 * t54 - 0.15321589954111893386e-10 * t44 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.12206761227177057918e-10 * t58 + 0.22982384931167840078e-10 * t47 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t41;
    t29 = t29 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t36 = t36 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t37 = t38 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t38 = t42 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10);
    t18 = t18 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t39 = t43 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t41 = t44 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t42 = t45 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t43 = t46 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t44 = t47 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t45 = t48 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t46 = t50 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10);
    t47 = t51 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t48 = t53 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t50 = t55 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t51 = t57 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t26 = t26 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t23 = t23 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t24 = t24 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t18 = -0.30065914352652852012e-14 * t23 - 0.88393788196799384922e-12 * t24 + 0.18385907944934272064e-9 * t25 * (cosP1_5 * sinP2_2 - sinP1_5 * cosP2_2) - 0.25280623424284624086e-8 * t28 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.36115176320406605842e-10 * t29 - 0.54719964121828190662e-12 * t36 - 0.91199940203046984440e-14 * t37 - 0.17538450039047497008e-15 * t40 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) - 0.41758214378684516688e-17 * t38 - 0.15032957176326426006e-14 * t18 - 0.14732298032799897487e-12 * t39 - 0.15321589954111893386e-10 * t41 - 0.16547317150440844857e-8 * t42 - 0.20224498739427699268e-8 * t43 - 0.22982384931167840078e-10 * t44 - 0.27359982060914095332e-12 * t45 - 0.35076900078094994016e-14 * t49 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9) - 0.50109857254421420024e-16 * t46 - 0.25054928627210710014e-16 * t47 - 0.25556027199754924210e-14 * t48 - 0.19723239815340270922e-12 * t50 - 0.12206761227177057918e-10 * t51 - 0.39398374167716297275e-9 * t26;
    t23 = cosP1_4 * t7;
    t24 = t10 * (-0.23784010517566974341e-4 * cosP1_1 * sinP2_2 + 0.33977157882238534768e-5 * cosP2_2 * sinP1_1) + t12 * (0.60673496218283097804e-7 * cosP2_2 * sinP1_3 - 0.42471447352798168464e-6 * cosP1_3 * sinP2_2);
    t25 = -0.54606146596454788030e-5 * sinP1_3 * t12 - 0.18202048865484929343e-6 * sinP1_5 * t1;
    t26 = t2 * cosP2_4;
    t28 = t5 * (0.13375748029939682925e-6 * cosP1_2 * sinP2_3 + 0.23028349701030175758e-6 * sinP1_2 * cosP2_3) * t9;
    t18 = t14 * t25 + t15 * (0.13105475183149149126e-4 * t35 + 0.18202048865484929341e-6 * sinP2_5 * t11) + t6 * t24 + t8 * ((0.37132179685589255859e-4 * sinP1_2 * t9 + 0.14892585435396760370e-6 * sinP1_4 * t7) * cosP2_1 + (t15 * t59 + 0.21511512295573098312e-6 * t23 - 0.21842458638581915211e-4 * cosP1_2 * t9) * sinP2_1) + 0.11491192465583920039e-8 * t27 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - 0.61033806135885289592e-12 * t30 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.16436033179450225769e-13 * t31 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.42593378666258207019e-15 * t32 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) - 0.12527464313605355006e-16 * t34 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) - 0.13132791389238765758e-10 * t22 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t18 + (0.28832045402928128079e-2 * t14 - 0.36404097730969858682e-6 * t26) * t10 * sinP1_1 + t28;
    t22 = t10 * t8 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t24 = t16 * t2 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t25 = t3 * t5 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t27 = t4 * t6 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t28 = t1 * t8 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t8 = t12 * t8 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t29 = t10 * t5 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t10 = t10 * t11 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t30 = t9 * t13 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t31 = t7 * t19 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t20 = t1 * t20 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9);
    t26 = -0.25948840862635315275e-1 * t14 + 0.32763687957872872816e-5 * t26;
    t6 = (-0.8494289470559633690e-6 * cosP1_2 * cosP2_2 - 0.59460026293917435850e-5 * sinP1_2 * sinP2_2) * t9 * t6;
    t9 = 0.18202048865484929343e-5 * t23 * t14;
    t1 = -0.29123278184775886950e-5 * t29 - 0.21842458638581915212e-5 * t8 + t6 + 0.50561246848569248176e-9 * t30 + 0.13237853720352675885e-7 * t28 + 0.40448997478855398538e-7 * t10 + 0.25054928627210710010e-16 * t4 * t21 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10) + 0.25054928627210710012e-16 * t16 * t19 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + t26 * t15 + t9 - 0.13789430958700704046e-7 * t12 * t5 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.91199940203046984436e-13 * t31 + 0.98616199076701354606e-13 * t4 * t13 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.58929192131199589952e-12 * t25 + 0.48827044908708231670e-11 * t1 * t11 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.14030760031237997606e-14 * t20 + 0.17037351466503282808e-14 * t3 * t17 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.30065914352652852010e-14 * t24 - 0.47179710659336936858e-3 * t22 + 0.65663956946193828790e-11 * t12 * t17 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.91929539724671360314e-10 * t27 + 0.13132791389238765758e-9 * t7 * t2 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    bf[0] = t33;
    bf[1] = t18;
    bf[2] = t1;
}

static void idsbf_4_10_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t8, t9;
    t1 = LegP1[51];
    t2 = LegP2[60];
    t3 = LegP1[52];
    t4 = LegP2[61];
    t5 = LegP1[53];
    t6 = LegP2[62];
    t7 = LegP1[54];
    t8 = LegP2[63];
    t9 = LegP1[49];
    t10 = LegP1[50];
    t11 = LegP2[64];
    t12 = LegP2[65];
    t13 = LegP2[59];
    t14 = LegP2[58];
    t15 = LegP2[57];
    t16 = LegP2[56];
    t17 = LegP1[48];
    t18 = LegP1[47];
    t19 = LegP1[46];
    t20 = LegP2[55];
    t21 = LegP1[45];
    t22 = t1 * t2;
    t23 = t3 * t4;
    t24 = t5 * t6;
    t25 = t7 * t8;
    t26 = t9 * t6;
    t27 = t10 * t8;
    t28 = t1 * t11;
    t29 = t3 * t12;
    t30 = t3 * t15;
    t31 = t18 * t2;
    t32 = t19 * t4;
    t33 = t32 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t34 = t18 * t6;
    t35 = t34 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t36 = t17 * t8;
    t37 = t36 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t38 = t9 * t11;
    t39 = t10 * t12;
    t40 = t39 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10);
    t41 = t3 * t8;
    t42 = t41 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t43 = t1 * t6;
    t44 = t43 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t45 = t10 * t4;
    t46 = t45 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t47 = t9 * t2;
    t48 = t47 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t49 = t17 * t13;
    t50 = t49 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t51 = t9 * t14;
    t52 = t51 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t53 = t10 * t13;
    t54 = t3 * t13;
    t55 = t54 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t56 = t1 * t14;
    t57 = t56 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t58 = t10 * t15;
    t59 = t58 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t60 = t17 * t4;
    t61 = t60 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t62 = t7 * t12;
    t63 = t62 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t64 = t7 * t4;
    t65 = t64 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t66 = t5 * t2;
    t67 = t66 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t68 = 0.34884807573706779366e-8;
    t69 = -0.15698163408168050716e-8;
    t70 = 0.38015495432885592904e-10;
    t71 = -0.14535336489044491403e-10;
    t72 = 0.43640237104077848994e-12;
    t73 = 0.54193758495260073914e-14;
    t74 = 0.75269109021194547099e-16;
    t75 = 0.62724257517662122581e-18;
    t33 = -0.15846128214988325705e-16 * t28 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) - 0.19807660268735407133e-18 * t29 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) - 0.14535336489044491404e-10 * t30 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t69 * ((cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) * t16 * t1 + t31 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5)) + 0.19186644165538728655e-8 * t33 + 0.21803004733566737106e-10 * t35 + 0.25955958016150877506e-12 * t37 + 0.33276869251475483981e-14 * t38 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9) + 0.47538384644964977114e-16 * t40 - 0.20203813474110115275e-15 * t42 - 0.12930440623430473774e-13 * t44 - 0.70166655735968306222e-12 * t46 - 0.32424981398637711591e-10 * t48 - 0.80982589010390737818e-9 * t50 - 0.50314626308230931789e-9 * t52 + 0.44495928027687218582e-11 * t53 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t72 * t55 + t70 * t57 + t68 * t59 + t71 * t61 + t75 * t63 + t74 * t65 + t73 * t67;
    t35 = -0.13976285085619703273e-12;
    t37 = -0.14261515393489493135e-14;
    t40 = 0.66025534229118023780e-18;
    t42 = 0.47538384644964977113e-16;
    t44 = 0.29236106556653460927e-14;
    t46 = 0.47282868185402168756e-4 * cosP1_2 * t18;
    t48 = cosP1_4 * t9;
    t50 = 0.50234122906137762289e-6 * t48;
    t52 = 0.22379301754684373104e-2 * t21;
    t55 = 0.6593228631430581296e-5 * sinP1_2 * t18;
    t57 = 0.15698163408168050717e-6 * sinP1_4 * t9;
    t59 = t17 * (-0.30698630664861965842e-6 * cosP1_3 * cosP2_2 + 0.38373288331077457298e-7 * sinP1_3 * sinP2_2) + t19 * (0.40522192477617794910e-4 * cosP1_1 * cosP2_2 - 0.5065274059702224362e-5 * sinP1_1 * sinP2_2);
    t61 = cosP2_4 * t13;
    t63 = -0.34535959497969711572e-6 * t61;
    t65 = -0.24617231930152810407e-2 * t20;
    t67 = t14 * (0.25117061453068881147e-6 * cosP1_2 * cosP2_3 - 0.94188980449008304270e-7 * sinP1_2 * sinP2_3) * t18;
    t76 = (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) * t14 * t5 + t26 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t31 = t31 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) * t16 * t1;
    t32 = t32 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t34 = t34 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t36 = t36 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t39 = t39 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10);
    t41 = t41 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t43 = t43 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t45 = t45 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t47 = t47 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t49 = t49 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t51 = t51 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t53 = t53 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t77 = (-0.38373288331077457298e-7 * cosP1_3 * sinP2_2 - 0.30698630664861965842e-6 * cosP2_2 * sinP1_3) * t17 * t15;
    t78 = t18 * t14 * (0.94188980449008304270e-7 * sinP1_2 * cosP2_3 + 0.25117061453068881147e-6 * cosP1_2 * sinP2_3);
    t28 = 0.12930440623430473774e-13 * t43 - 0.19807660268735407133e-18 * t29 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + 0.44495928027687218582e-11 * t53 + 0.32424981398637711591e-10 * t47 + t78 - 0.50314626308230931789e-9 * t51 + t77 - 0.15846128214988325705e-16 * t28 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) - 0.25955958016150877506e-12 * t36 + t35 * t76 + 0.20203813474110115275e-15 * t41 - 0.47538384644964977114e-16 * t39 - 0.33276869251475483981e-14 * t38 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9) - 0.21803004733566737106e-10 * t34 - 0.14535336489044491404e-10 * t30 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.15440467332684624567e-12 * t22 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t37 * ((-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) * t13 * t7 + t27 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8)) + 0.70166655735968306222e-12 * t45 - 0.19186644165538728655e-8 * t32 + t69 * t31 + 0.80982589010390737818e-9 * t49;
    t29 = -0.17267979748984855786e-6 * sinP1_5 * t10 - 0.31427723143152437534e-4 * sinP1_3 * t17;
    t30 = 0.17267979748984855789e-6 * sinP2_5 * t2 + 0.18994777723883341368e-4 * sinP2_3 * t14;
    t28 = t16 * ((t55 - t57) * cosP2_1 + (t46 + t50 + t52) * sinP2_1) + t19 * ((t63 + t65 - 0.40522192477617794910e-4 * cosP2_2 * t15) * sinP1_1 - 0.5065274059702224362e-5 * cosP1_1 * sinP2_2 * t15) + t20 * t29 + t21 * t30 + t40 * t25 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + t42 * t24 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + t44 * t23 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - t68 * t58 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - t70 * t56 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t71 * t60 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - t72 * t54 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t73 * t66 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - t74 * t64 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - t75 * t62 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) + t28;
    t12 = t1 * t12 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10);
    t29 = t7 * t2 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t30 = t5 * t8 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8);
    t31 = t3 * t6 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7);
    t32 = t1 * t4 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t34 = t9 * t13 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t36 = t17 * t14 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t38 = t19 * t16 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t39 = t5 * t13 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t3 = t3 * t14 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t1 = t1 * t15 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t41 = t10 * t16 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t43 = t17 * t16 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t45 = -0.24617231930152810408e-1 * t20 - 0.34535959497969711574e-5 * t61;
    t47 = (0.9209589199458589747e-6 * sinP1_2 * sinP2_2 - 0.73676713595668718013e-5 * cosP1_2 * cosP2_2) * t18 * t15;
    t48 = -0.48350343297157596203e-5 * t48 * t20;
    t1 = -0.51341455416562175280e-13 * t39 - 0.39932243101770580776e-13 * t9 * t8 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) + 0.23769192322482488560e-16 * t30 + t48 + 0.46321401998053873701e-11 * t10 * t2 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.12458859847752421204e-9 * t34 - 0.34884807573706779366e-9 * t18 * t4 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.46513076764942372486e-9 * t1 + t45 * t21 + t47 - 0.63384512859953302822e-17 * t12 - 0.34535959497969711578e-7 * t19 * t2 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.13081802840140042266e-7 * t36 - 0.47094490224504152144e-7 * t41 + 0.93555540981291074965e-13 * t32 + 0.37989555447766682728e-5 * t19 * t14 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.44896747347360625044e-5 * t43 - 0.44758603509368746206e-3 * t38 - 0.60215287216955637678e-15 * t29 - 0.47538384644964977112e-15 * t10 * t11 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9) - 0.47519369291106991126e-11 * t3 - 0.36338341222611228506e-11 * t17 * t6 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.16163050779288092219e-14 * t31;
    bf[0] = t15 * t59 + t16 * ((-t46 + t50 + t52) * cosP2_1 + (t55 + t57) * sinP2_1) + t20 * (-0.17267979748984855786e-6 * cosP1_5 * t10 + 0.31427723143152437534e-4 * cosP1_3 * t17) + t21 * (0.17267979748984855789e-6 * cosP2_5 * t2 - 0.18994777723883341368e-4 * cosP2_3 * t14) + 0.15440467332684624567e-12 * t22 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t44 * t23 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t42 * t24 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + t40 * t25 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + t35 * ((cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) * t14 * t5 + t26 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7)) + t37 * (t27 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) * t13 * t7) + t33 + (t63 + t65) * t19 * cosP1_1 + t67;
    bf[1] = t28;
    bf[2] = t1;
}

static void idsbf_4_10_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t7, t8, t9;
    t1 = LegP1[75];
    t2 = LegP2[61];
    t3 = LegP1[74];
    t4 = LegP2[60];
    t5 = LegP1[73];
    t6 = LegP2[59];
    t7 = LegP1[72];
    t8 = LegP2[58];
    t9 = LegP1[71];
    t10 = LegP2[57];
    t11 = LegP1[70];
    t12 = LegP2[56];
    t13 = LegP1[68];
    t14 = LegP1[67];
    t15 = LegP1[69];
    t16 = LegP2[62];
    t17 = LegP2[63];
    t18 = LegP2[64];
    t19 = LegP2[65];
    t20 = LegP1[77];
    t21 = LegP1[76];
    t22 = LegP2[55];
    t23 = LegP1[66];
    t24 = t1 * t2;
    t25 = t3 * t4;
    t26 = t5 * t6;
    t27 = t7 * t8;
    t28 = t9 * t10;
    t29 = t13 * t4;
    t30 = t15 * t2;
    t31 = t30 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t32 = t11 * t16;
    t33 = (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) * t8 * t3 + t32 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t34 = t9 * t17;
    t35 = t34 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) * t6 * t1;
    t36 = t21 * t4;
    t37 = t36 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) * t18 * t7;
    t38 = t5 * t19;
    t39 = t38 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t40 = t20 * t2;
    t41 = t40 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6);
    t42 = t5 * t10;
    t43 = t42 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t44 = t14 * t2;
    t45 = t13 * t16;
    t46 = t45 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t47 = t15 * t17;
    t48 = t47 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t49 = t11 * t18;
    t50 = t49 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9);
    t51 = t9 * t19;
    t52 = t51 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10);
    t53 = t1 * t19;
    t54 = t53 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t55 = t5 * t17;
    t56 = t55 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t57 = t7 * t16;
    t58 = t9 * t2;
    t59 = t11 * t4;
    t60 = t15 * t6;
    t61 = t11 * t8;
    t62 = t9 * t6;
    t63 = t7 * t4;
    t64 = t5 * t2;
    t65 = t3 * t16;
    t66 = t1 * t17;
    t20 = t20 * t19;
    t67 = -0.14967611529552321682e-8;
    t68 = t11 * (0.22750769524919528958e-6 * cosP1_4 * cosP2_1 - 0.10177975840095578744e-6 * sinP1_4 * sinP2_1) + t13 * (-0.75436762108943701300e-5 * sinP1_2 * sinP2_1 - 0.31252372873705247674e-4 * cosP1_2 * cosP2_1);
    t31 = -0.13858899564400297853e-10 * t31 + 0.95946227753540523602e-11 * t46 + 0.16317385672370837348e-13 * t26 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.13597821393642364456e-14 * t35 + 0.31476438411209176983e-20 * t54 + 0.56657589140176518571e-17 * t52 + 0.63456499836997700798e-15 * t50 + t67 * (t29 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) * t12 * t7) + 0.26651729931539034336e-11 * t27 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.12473009607960268068e-8 * t44 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.41576698693200893560e-9 * t28 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t12 * t68 - 0.13858899564400297854e-10 * t43 - 0.13325864965769517167e-12 * t33 + 0.76147799804397240950e-13 * t48 + 0.90652142624282429706e-16 * t25 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - 0.15108690437380404952e-16 * t37 - 0.75543452186902024756e-17 * t56 + 0.37771726093451012380e-18 * t24 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - 0.18885863046725506190e-18 * t39 - 0.18885863046725506189e-18 * t41;
    t33 = cosP1_3 * t15;
    t35 = cosP1_1 * t14;
    t37 = sinP1_3 * t15;
    t39 = sinP1_1 * t14;
    t41 = (-0.29269995880013429065e-6 * t33 + 0.26342996292012086159e-4 * t35) * cosP2_2 + (0.36587494850016786325e-7 * t37 - 0.32928745365015107696e-5 * t39) * sinP2_2;
    t43 = t13 * (0.19918436881635012701e-6 * cosP1_2 * cosP2_3 - 0.13010308483380095000e-6 * sinP1_2 * sinP2_3) - 0.18110809950758309235e-4 * t23 * cosP2_3;
    t46 = 0.21337826996529789791e-2 * cosP2_1 * t12 + 0.16464372682507553850e-6 * cosP2_5 * t4;
    t48 = -0.16464372682507553851e-6 * t9;
    t33 = t48 * cosP1_5 + 0.92200487022042301560e-5 * t33;
    t50 = cosP2_4 * t6;
    t52 = -0.32928745365015107704e-6 * t50;
    t35 = t35 * (-0.23471609696182768770e-2 * t22 + t52);
    t31 = t31 + t43 * t8 + t41 * t10 + t22 * t33 + t46 * t23 - 0.90652142624282429700e-15 * t57 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) - 0.83626601570900541408e-13 * t58 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.61832013441170559655e-11 * t59 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.23758113538971939179e-9 * t60 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.47973113876770261815e-9 * t61 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.42425202748164177103e-11 * t62 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.14721907962183466583e-12 * t63 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.27875533856966847135e-14 * t64 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.45326071312141214850e-16 * t65 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.62952876822418353965e-18 * t66 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) - 0.15738219205604588490e-20 * t20 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10) + t35;
    t29 = (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) * t12 * t7 + t29 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t30 = t30 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t32 = (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) * t8 * t3 + t32 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t33 = (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) * t6 * t1 + t34 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t34 = (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) * t18 * t7 + t36 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5);
    t35 = t44 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t36 = t45 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t41 = t47 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t43 = t49 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9);
    t44 = t51 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10);
    t45 = t53 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t46 = t57 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t47 = t58 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t49 = t59 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t51 = t60 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t53 = t61 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t54 = t62 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t37 = -0.92200487022042301560e-5 * t37 - 0.23471609696182768770e-2 * t39 + t48 * sinP1_5;
    t48 = 0.21337826996529789791e-2 * sinP2_1 * t12 + 0.16464372682507553850e-6 * sinP2_5 * t4 + 0.18110809950758309235e-4 * sinP2_3 * t8;
    t35 = -0.95946227753540523602e-11 * t36 + 0.61832013441170559655e-11 * t49 - 0.31476438411209176983e-20 * t45 - 0.56657589140176518571e-17 * t44 + 0.90652142624282429700e-15 * t46 - 0.63456499836997700798e-15 * t43 + 0.27875533856966847135e-14 * t64 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.42425202748164177103e-11 * t54 - 0.14721907962183466583e-12 * t63 * (cosP1_6 * sinP2_5 - sinP1_6 * cosP2_5) - 0.12473009607960268068e-8 * t35 - 0.47973113876770261815e-9 * t53 + t37 * t22 + t48 * t23 + 0.23758113538971939179e-9 * t51 - 0.13858899564400297854e-10 * t42 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.83626601570900541408e-13 * t47 - 0.76147799804397240950e-13 * t41 + 0.75543452186902024756e-17 * t55 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.18885863046725506190e-18 * t38 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) - 0.18885863046725506189e-18 * t40 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6);
    t36 = cosP1_4 * t11;
    t37 = cosP1_2 * t13;
    t38 = sinP1_2 * t13;
    t40 = (0.10177975840095578744e-6 * sinP1_4 * t11 - 0.75436762108943701300e-5 * t38) * cosP2_1 + (0.31252372873705247674e-4 * t37 + 0.22750769524919528958e-6 * t36) * sinP2_1;
    t41 = t14 * (-0.26342996292012086159e-4 * cosP2_2 * sinP1_1 - 0.32928745365015107696e-5 * cosP1_1 * sinP2_2) + t15 * (-0.36587494850016786325e-7 * cosP1_3 * sinP2_2 - 0.29269995880013429065e-6 * cosP2_2 * sinP1_3);
    t42 = t13 * t8 * (0.19918436881635012701e-6 * cosP1_2 * sinP2_3 + 0.13010308483380095000e-6 * sinP1_2 * cosP2_3);
    t13 = t13 * t2 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t43 = t15 * t16 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t44 = t11 * t17 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t18 = t9 * t18 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9);
    t45 = t7 * t19 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10);
    t19 = t21 * t19 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10);
    t37 = 0.52685992584024172317e-5 * t37 * t10 * cosP2_2;
    t46 = 0.36221619901516618468e-5 * t50 * t23;
    t36 = 0.23050121755510575392e-5 * t36 * t22;
    t1 = 0.81586928361854186736e-14 * t3 * t6 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.19036949951099310240e-13 * t44 + 0.10660691972615613734e-11 * t5 * t8 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + t36 + 0.31476438411209176981e-20 * t19 + t37 + 0.18885863046725506190e-17 * t45 + 0.24946019215920536137e-9 * t13 + 0.17961133835462786019e-7 * t9 * t12 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.29935223059104643366e-7 * t14 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.37771726093451012380e-18 * t21 * t2 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) + 0.60434761749521619812e-16 * t1 * t4 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + 0.18130428524856485942e-15 * t18 - 0.32928745365015107702e-5 * t14 * t8 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.21321383945231227468e-11 * t43 + 0.13858899564400297854e-9 * t7 * t10 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + t46 - 0.26342996292012086162e-5 * t15 * t12 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t1 = -0.37771726093451012380e-17 * t3 * t17 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) - 0.36260857049712971880e-15 * t5 * t16 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.27875533856966847136e-13 * t7 * t2 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.17666289554620159901e-11 * t9 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.59395283847429847946e-10 * t11 * t6 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.76756982202832418907e-8 * t15 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.38796049084599617806e-3 * t14 * t12 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t1 + 0.25818770665801045644e-1 * t23 * t22 - 0.6585749073003021539e-6 * t38 * t10 * sinP2_2;
    bf[0] = t31;
    bf[1] = t35 - 0.13858899564400297853e-10 * t30 - 0.16317385672370837348e-13 * t26 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.13597821393642364456e-14 * t33 - 0.15738219205604588490e-20 * t20 * (-cosP1_11 * sinP2_10 + sinP1_11 * cosP2_10) + 0.62952876822418353965e-18 * t66 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + 0.45326071312141214850e-16 * t65 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + t39 * t52 + t67 * t29 + t42 - 0.26651729931539034336e-11 * t27 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.41576698693200893560e-9 * t28 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t40 * t12 + t41 * t10 - 0.13325864965769517167e-12 * t32 - 0.90652142624282429706e-16 * t25 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.15108690437380404952e-16 * t34 - 0.37771726093451012380e-18 * t24 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    bf[2] = t1;
}

static void idsbf_4_10_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t100, t101, t102, t103, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t9, t90, t91, t92, t93, t94, t95, t96, t97, t98, t99;
    t1 = LegP1[71];
    t2 = LegP2[55];
    t3 = LegP1[66];
    t4 = LegP2[60];
    t5 = LegP1[69];
    t6 = LegP2[58];
    t7 = LegP2[56];
    t8 = LegP1[67];
    t9 = LegP1[68];
    t10 = LegP2[62];
    t11 = LegP2[63];
    t12 = LegP1[70];
    t13 = LegP2[64];
    t14 = LegP2[65];
    t15 = LegP1[75];
    t16 = LegP1[73];
    t17 = LegP1[72];
    t18 = LegP2[61];
    t19 = LegP2[59];
    t20 = LegP1[74];
    t21 = LegP1[77];
    t22 = LegP1[76];
    t23 = LegP2[57];
    t24 = t5 * t18;
    t25 = t12 * t10;
    t26 = t1 * t11;
    t27 = t17 * t13;
    t28 = t16 * t14;
    t29 = t21 * t18;
    t30 = t22 * t4;
    t31 = t15 * t19;
    t32 = t20 * t6;
    t33 = t32 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t34 = t16 * t23;
    t35 = t34 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t36 = t17 * t7;
    t37 = t36 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    t38 = t21 * t11;
    t39 = t38 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t40 = t22 * t10;
    t41 = t40 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t42 = t20 * t13;
    t43 = t42 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t44 = t22 * t13;
    t45 = t44 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9);
    t46 = t8 * t18;
    t47 = t9 * t10;
    t48 = t5 * t11;
    t49 = t12 * t13;
    t50 = t1 * t14;
    t51 = t15 * t14;
    t52 = t16 * t11;
    t53 = t17 * t10;
    t54 = t1 * t18;
    t55 = t54 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t56 = t12 * t4;
    t57 = t56 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t58 = t5 * t19;
    t59 = t58 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t60 = t12 * t6;
    t61 = t60 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t62 = t1 * t19;
    t63 = t62 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t64 = t17 * t4;
    t65 = t64 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t66 = t16 * t18;
    t67 = t66 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t68 = t20 * t10;
    t69 = t15 * t11;
    t70 = t69 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t71 = t21 * t14;
    t72 = t71 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10);
    t73 = t15 * t18;
    t74 = t73 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t75 = t20 * t4;
    t76 = t75 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t77 = t16 * t19;
    t78 = t77 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t79 = t17 * t6;
    t80 = t79 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t81 = t1 * t23;
    t82 = t81 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t83 = t9 * t4;
    t84 = t83 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t85 = 0.16954229057059496817e-8;
    t86 = -0.42193782721188792978e-9;
    t87 = 0.18220042538695160608e-10;
    t88 = -0.27398560208564151288e-11;
    t89 = -0.18265706805709434192e-13;
    t90 = -0.12684518615075995967e-15;
    t91 = 0.11917644123641662878e-17;
    t92 = -0.93268519228499970336e-18;
    t93 = -0.74022634308333309790e-20;
    t94 = -0.28375343151527768753e-20;
    t95 = 0.17376166884271384745e-6 * sinP1_2;
    t96 = -0.42117066752604813362e-7 * cosP1_2;
    t97 = (0.16754767538741149796e-6 * sinP1_3 * sinP2_2 + 0.35903073297302463859e-7 * cosP1_3 * cosP2_2) * t23 * t5;
    t98 = t9 * t6;
    t99 = t98 * (t96 * cosP2_3 - t95 * sinP2_3);
    t33 = t87 * t80 - 0.54362222636039982711e-15 * t31 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t89 * t25 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t99 + t90 * t26 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t91 * t43 + t92 * t27 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) + 0.56183179440024982132e-18 * t41 - 0.55405977310651950382e-11 * t35 + t97 + 0.11350137260611107501e-19 * t39 + t93 * t28 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) + t94 * t45 - 0.75503086994499975986e-19 * t29 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) - 0.53274978183319183058e-13 * t33 + 0.49865379579586755339e-9 * t46 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t86 * t84 + t85 * t82 - 0.59838455495504106414e-9 * t37 - 0.60402469595599980790e-17 * t30 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + t88 * t24 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t35 = 0.26302617800221585239e-9;
    t37 = 0.62103403139412076258e-11;
    t39 = 0.20657644601695193432e-12;
    t41 = -0.22832133507136792743e-13;
    t43 = 0.25369037230151991934e-14;
    t45 = -0.55268259679973982423e-15;
    t80 = 0.34882426191458988905e-16;
    t82 = -0.94600926646049969927e-17;
    t84 = -0.15692798473366661675e-18;
    t97 = -0.61685528590277758162e-22;
    t99 = 0.10959424083425660515e-11;
    t100 = 0.51399698951266347819e-9;
    t101 = 0.15797352250813084093e-4 * t5;
    t102 = -0.65822301045054517048e-7 * t1;
    t103 = 0.65822301045054517054e-7 * t3 * t4 * cosP2_5;
    t33 = t33 + t43 * t76 + t45 * t67 + (t101 * cosP1_3 + t102 * cosP1_5) * t2 + 0.59632634198793314372e-16 * t52 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + t80 * t74 + t37 * t57 + 0.38357984291989811804e-11 * t47 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t84 * t70 + t82 * t68 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.25369037230151991935e-15 * t49 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9) + t100 * t61 + 0.28498714208708324272e-19 * t51 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10) + t103 + t97 * t72 + t99 * t63 + 0.30442844676182390322e-13 * t48 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + t41 * t65 - t35 * t59 + 0.32353516912949089715e-14 * t53 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + t39 * t78 + 0.16912087462072038621e-12 * t55 + 0.22650926098349992796e-17 * t50 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10);
    t55 = 0.22590213718662710255e-2;
    t57 = cosP1_4 * t12;
    t59 = cosP2_4 * t19;
    t61 = -0.13164460209010903410e-6 * t59;
    t50 = t50 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10);
    t51 = t51 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t53 = t53 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t54 = t54 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t38 = t38 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8);
    t40 = t40 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7);
    t29 = t29 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6);
    t30 = t30 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5);
    t31 = t31 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t32 = t32 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t63 = t12 * (0.22858289999282568651e-6 * cosP1_4 * sinP2_1 - 0.96938297902716652391e-7 * cosP2_1 * sinP1_4) + t9 * (0.30014969276544859777e-4 * cosP2_1 * sinP1_2 - 0.23696028376219626147e-5 * cosP1_2 * sinP2_1);
    t65 = t5 * (0.35903073297302463859e-7 * cosP2_2 * sinP1_3 - 0.16754767538741149796e-6 * cosP1_3 * sinP2_2) + t8 * (-0.30493676920508892629e-4 * cosP1_1 * sinP2_2 + 0.65343593401090484228e-5 * cosP2_2 * sinP1_1);
    t24 = t23 * t65 + t45 * t66 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t7 * t63 + t82 * t68 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + t84 * t69 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) - t85 * t81 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t86 * t83 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - t87 * t79 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t88 * t24 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t89 * t25 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t90 * t26 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t92 * t27 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + t93 * t28 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + t97 * t71 * (-cosP1_11 * sinP2_10 + sinP1_11 * cosP2_10) + t98 * (t95 * cosP2_3 + t96 * sinP2_3) + t61 * t8 * sinP1_1;
    t25 = t8 * sinP1_1 * t55 - t101 * sinP1_3 + t102 * sinP1_5;
    t26 = -0.25259966249050121466e-2 * sinP2_1 * t7 + 0.10268278963028504660e-4 * sinP2_3 * t6 + 0.65822301045054517054e-7 * sinP2_5 * t4;
    t24 = t24 - 0.54362222636039982711e-15 * t31 - 0.59632634198793314372e-16 * t52 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.56183179440024982132e-18 * t40 - 0.55405977310651950382e-11 * t34 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.38357984291989811804e-11 * t47 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - 0.11350137260611107501e-19 * t38 + t25 * t2 + t26 * t3 - 0.25369037230151991935e-15 * t49 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9) - 0.75503086994499975986e-19 * t29 - 0.28498714208708324272e-19 * t51 - 0.53274978183319183058e-13 * t32 - 0.30442844676182390322e-13 * t48 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - 0.49865379579586755339e-9 * t46 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - 0.32353516912949089715e-14 * t53 - 0.16912087462072038621e-12 * t54 - 0.59838455495504106414e-9 * t36 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - 0.60402469595599980790e-17 * t30 - 0.22650926098349992796e-17 * t50;
    t24 = t100 * t60 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t35 * t58 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t37 * t56 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t39 * t77 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t41 * t64 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - t43 * t75 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - t80 * t73 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - t91 * t42 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) + t94 * t44 * (sinP1_10 * cosP2_9 - cosP1_10 * sinP2_9) + t99 * t62 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t24;
    t25 = t5 * t7 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t26 = t8 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t27 = t8 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t28 = t9 * t18 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t29 = t5 * t10 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t30 = t12 * t11 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t31 = 0.27108256462395252308e-1 * t2 - 0.15797352250813084093e-5 * t59;
    t32 = -0.21063136334417445458e-5 * t57 * t2;
    t34 = (0.10052860523244689881e-5 * cosP1_2 * cosP2_2 + 0.46913349108475219429e-5 * sinP1_2 * sinP2_2) * t23 * t9;
    t15 = -0.19946151831834702137e-9 * t17 * t23 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.76715968583979623596e-10 * t28 - 0.20345074868471396180e-7 * t1 * t7 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.21744889054415993088e-13 * t20 * t19 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + t31 * t3 - 0.11917644123641662877e-18 * t15 * t13 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9) - 0.25369037230151991933e-15 * t15 * t4 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + t32 - 0.51075617672749983760e-19 * t21 * t10 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7) + 0.17113798271714174434e-5 * t26 + 0.19746690313516355116e-5 * t25 + t34 - 0.40590459568243187098e-14 * t30 + 0.42099943748416869114e-3 * t8 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.54797120417128302576e-12 * t29 - 0.10970383507509086176e-7 * t27 - 0.33221358277579989436e-17 * t22 * t18 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) - 0.20244491709661289564e-11 * t16 * t6 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t1 = -0.31711296537689989916e-16 * t1 * t13 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9) - 0.26648148350999991524e-18 * t17 * t14 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10) - 0.27141632579722213591e-20 * t22 * t14 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10) - 0.62771193893466646715e-17 * t20 * t11 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) - 0.35948352125498988573e-15 * t16 * t10 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.19896573484790633673e-13 * t17 * t18 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.77629253924265095328e-12 * t1 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.35070157066962113654e-10 * t12 * t19 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.15419909685379904345e-7 * t5 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + t15;
    bf[0] = t7 * ((-0.25259966249050121466e-2 * t3 + 0.22858289999282568651e-6 * t57 + 0.23696028376219626147e-5 * cosP1_2 * t9) * cosP2_1 + (0.30014969276544859777e-4 * sinP1_2 * t9 + 0.96938297902716652391e-7 * sinP1_4 * t12) * sinP2_1) + t8 * ((-0.65343593401090484228e-5 * cosP2_2 * t23 + t2 * t55 + t61) * cosP1_1 - 0.30493676920508892629e-4 * sinP1_1 * sinP2_2 * t23) + t33 - 0.10268278963028504660e-4 * t3 * t6 * cosP2_3;
    bf[1] = t24;
    bf[2] = t1;
}

static void idsbf_4_10_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t9, t90, t91, t92, t93, t94;
    t1 = LegP1[94];
    t2 = LegP2[57];
    t3 = LegP1[93];
    t4 = LegP2[58];
    t5 = LegP1[100];
    t6 = LegP2[59];
    t7 = LegP1[95];
    t8 = LegP2[64];
    t9 = LegP1[97];
    t10 = LegP2[56];
    t11 = LegP1[101];
    t12 = LegP2[60];
    t13 = LegP2[62];
    t14 = LegP1[99];
    t15 = LegP1[102];
    t16 = LegP2[61];
    t17 = LegP1[103];
    t18 = LegP2[63];
    t19 = LegP1[98];
    t20 = LegP2[65];
    t21 = LegP1[96];
    t22 = LegP1[91];
    t23 = LegP1[92];
    t24 = LegP2[55];
    t25 = t5 * t6;
    t26 = t7 * t8;
    t27 = t9 * t10;
    t28 = t11 * t12;
    t29 = t3 * t13;
    t30 = t14 * t4;
    t31 = t15 * t16;
    t32 = t17 * t13;
    t33 = LegP1[104] * t18;
    t34 = t1 * t18;
    t35 = t19 * t2;
    t36 = t35 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t37 = t5 * t20;
    t38 = t37 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t39 = t15 * t20;
    t40 = t39 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10);
    t41 = t15 * t18;
    t42 = t41 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t43 = t9 * t4;
    t44 = t43 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t45 = t1 * t16;
    t46 = t21 * t2;
    t47 = t46 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t48 = t21 * t20;
    t49 = t48 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10);
    t50 = t23 * t16;
    t51 = t50 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t52 = t9 * t12;
    t53 = t52 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t54 = t21 * t16;
    t55 = t54 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t56 = t21 * t6;
    t57 = t56 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t58 = t7 * t12;
    t59 = t58 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t60 = t19 * t18;
    t61 = t60 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t62 = t5 * t18;
    t63 = t19 * t16;
    t64 = t63 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t65 = t7 * t4;
    t66 = t65 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t67 = t1 * t6;
    t68 = t67 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t69 = t14 * t8;
    t70 = t69 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t71 = t11 * t8;
    t72 = t9 * t13;
    t73 = t14 * t13;
    t74 = t3 * t12;
    t75 = t21 * t18;
    t76 = t5 * t16;
    t77 = t19 * t6;
    t78 = t9 * t8;
    t79 = t11 * t13;
    t80 = t19 * t20;
    t81 = t7 * t13;
    t82 = t14 * t12;
    t83 = cosP1_4 * t7;
    t84 = t1 * (0.34494557058154594701e-7 * cosP1_3 * cosP2_2 + 0.16097459960472144191e-6 * sinP1_3 * sinP2_2) + t23 * (-0.45532815316764065010e-5 * cosP1_1 * cosP2_2 - 0.21248647147823230333e-4 * sinP1_1 * sinP2_2);
    t85 = 0.63240021273283423602e-7 * cosP2_5 * t12 - 0.98654433186322140820e-5 * cosP2_3 * t4;
    t86 = cosP1_3 * t1;
    t87 = 0.56916019145955081244e-5 * t86 - 0.63240021273283423608e-7 * cosP1_5 * t21;
    t88 = cosP2_4 * t6;
    t89 = -0.12648004254656684721e-6 * t88;
    t90 = t4 * (-0.11756157800802687721e-6 * sinP1_2 * sinP2_3 + 0.8918464538539969989e-8 * cosP1_2 * cosP2_3) * t3;
    t84 = t10 * ((-0.24268990563835246644e-2 * t22 + 0.10463348974306893724e-6 * t83 + 0.86006428931665456104e-5 * cosP1_2 * t3) * cosP2_1 + (-0.21846552803497909975e-7 * sinP1_4 * t7 + 0.22513447573288898804e-4 * sinP1_2 * t3) * sinP2_1) + t2 * t84 + t22 * t85 + t24 * t87 - 0.52229534084701197946e-15 * t25 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.64518836222277950404e-16 * t26 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9) - 0.57490928430257657821e-9 * t27 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) - 0.58032815649667997712e-17 * t28 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + 0.19304035797705562761e-11 * t29 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) - 0.17549123452459602511e-13 * t81 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + 0.11606563129933599543e-15 * t82 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + (0.21703975300990870983e-2 * t24 + t89) * t23 * cosP1_1 + t90;
    t85 = 0.49383233395221321467e-9;
    t87 = 0.15794211107213642262e-11;
    t90 = 0.29736014738889882029e-13;
    t91 = -0.21936404315574503140e-13;
    t92 = 0.15077153085452960191e-18;
    t93 = 0.54524295749279573019e-19;
    t94 = 0.59265538857912579376e-22;
    t36 = t84 - 0.72541019562084997150e-19 * t31 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) - 0.10667796994424264288e-20 * t32 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7) - 0.19755179619304193122e-22 * t33 * (cosP1_13 * cosP2_8 + sinP1_13 * sinP2_8) + 0.10968202157787251569e-13 * t34 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - 0.26323685178689403764e-11 * t45 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.94765266643281853564e-10 * t68 - t94 * t40 + t85 * t66 + t87 * t59 + t90 * t55 + t91 * t53 + t93 * t70 - 0.53232341139127460950e-11 * t36 + 0.71118646629495095251e-21 * t38 + 0.39510359238608386246e-22 * t42 + 0.21497676229263013076e-11 * t44 + 0.29810111037911378128e-9 * t47 + 0.39826442112517253334e-18 * t49 - 0.51184943403007173986e-13 * t30 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.34747264435870012969e-9 * t51 + 0.10529474071475761507e-11 * t57 + 0.45231459256358880579e-17 * t61 - 0.53100026319446217911e-15 * t64 - t92 * t62 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t38 = -0.12186891286430279521e-15;
    t40 = -0.71118646629495095242e-20;
    t42 = 0.27262147874639786508e-20;
    t43 = t43 * (cosP1_6 * sinP2_3 - sinP1_6 * cosP2_3);
    t44 = t79 * (-sinP1_10 * cosP2_7 + cosP1_10 * sinP2_7);
    t47 = t48 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10);
    t31 = t31 * (-sinP1_11 * cosP2_6 + cosP1_11 * sinP2_6);
    t27 = t27 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t34 = t34 * (cosP1_3 * sinP2_8 - sinP1_3 * cosP2_8);
    t25 = t25 * (cosP1_9 * sinP2_4 - sinP1_9 * cosP2_4);
    t35 = t35 * (cosP1_7 * sinP2_2 - sinP1_7 * cosP2_2);
    t26 = t26 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9);
    t28 = t28 * (-sinP1_10 * cosP2_5 + cosP1_10 * sinP2_5);
    t29 = t29 * (cosP1_2 * sinP2_7 - sinP1_2 * cosP2_7);
    t30 = t30 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3);
    t48 = t73 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t49 = t60 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t51 = t63 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t53 = t72 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t37 = t37 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t55 = 0.63240021273283423602e-7 * sinP2_5 * t12 + 0.98654433186322140820e-5 * sinP2_3 * t4 - 0.24268990563835246644e-2 * sinP2_1 * t10;
    t57 = sinP1_3 * t1;
    t59 = sinP1_1 * t23;
    t60 = -0.63240021273283423608e-7 * sinP1_5 * t21 - 0.56916019145955081244e-5 * t57 + 0.21703975300990870983e-2 * t59;
    t25 = 0.64006781966545585728e-20 * t44 - 0.64518836222277950404e-16 * t26 + 0.58032815649667997712e-17 * t28 + 0.51184943403007173986e-13 * t30 + 0.53232341139127460950e-11 * t35 + 0.40538475175181681796e-9 * t74 * (cosP1_2 * sinP2_5 - sinP1_2 * cosP2_5) - 0.34747264435870012969e-9 * t50 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - 0.87049223474501996582e-18 * t76 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - 0.39826442112517253334e-18 * t47 + 0.26323685178689403764e-11 * t45 * (cosP1_3 * sinP2_6 - sinP1_3 * cosP2_6) + 0.72541019562084997150e-19 * t31 - 0.89609494753163820008e-18 * t78 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + 0.19304035797705562761e-11 * t29 + 0.21497676229263013076e-11 * t43 - 0.57490928430257657821e-9 * t27 + 0.52229534084701197946e-15 * t25 + 0.10968202157787251569e-13 * t34 + 0.15668860225410359385e-13 * t77 * (cosP1_7 * sinP2_4 - sinP1_7 * cosP2_4) + t55 * t22 + t60 * t24;
    t26 = (0.34494557058154594701e-7 * t57 + 0.45532815316764065010e-5 * t59) * cosP2_2 + (-0.21248647147823230333e-4 * t23 * cosP1_1 - 0.16097459960472144191e-6 * t86) * sinP2_2;
    t27 = t3 * (-0.86006428931665456104e-5 * cosP1_2 * sinP2_1 + 0.22513447573288898804e-4 * cosP2_1 * sinP1_2) + t7 * (0.10463348974306893724e-6 * cosP1_4 * sinP2_1 + 0.21846552803497909975e-7 * cosP2_1 * sinP1_4);
    t28 = t3 * t4 * (0.11756157800802687721e-6 * sinP1_2 * cosP2_3 + 0.8918464538539969989e-8 * cosP1_2 * sinP2_3);
    t25 = t25 - 0.90889630392494731725e-17 * t48 + t28 + 0.94765266643281853564e-10 * t67 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.29810111037911378128e-9 * t46 * (cosP1_5 * sinP2_2 - sinP1_5 * cosP2_2) + 0.10667796994424264288e-20 * t32 * (-sinP1_12 * cosP2_7 + cosP1_12 * sinP2_7) - 0.71118646629495095251e-21 * t37 - 0.39510359238608386246e-22 * t41 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8) + 0.11606563129933599543e-15 * t82 * (cosP1_8 * sinP2_5 - sinP1_8 * cosP2_5) + 0.19755179619304193122e-22 * t33 * (-sinP1_13 * cosP2_8 + cosP1_13 * sinP2_8) - 0.10529474071475761507e-11 * t56 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4) + t59 * t89 - 0.45231459256358880579e-17 * t49 + t26 * t2 + 0.17549123452459602511e-13 * t81 * (cosP1_4 * sinP2_7 - sinP1_4 * cosP2_7) - 0.53100026319446217911e-15 * t51 - 0.38173644764847787324e-15 * t53 + t27 * t10;
    t25 = t38 * t75 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t40 * t80 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + t42 * t71 * (-sinP1_10 * cosP2_9 + cosP1_10 * sinP2_9) - t85 * t65 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3) - t87 * t58 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t90 * t54 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t91 * t52 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t92 * t62 * (cosP1_9 * sinP2_8 - sinP1_9 * cosP2_8) - t93 * t69 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) + t94 * t39 * (cosP1_11 * sinP2_10 - sinP1_11 * cosP2_10) + t25;
    t26 = t7 * t6 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t27 = t1 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t28 = t23 * t10 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t29 = t3 * t16 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t30 = t21 * t10 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t10 = t1 * t10 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t31 = -0.28215167891288132279e-1 * t22 + 0.11383203829191016249e-5 * t83;
    t3 = (-0.75888025527940108366e-6 * cosP1_2 * cosP2_2 - 0.35414411913038717221e-5 * sinP1_2 * sinP2_2) * t3 * t2;
    t22 = 0.16442405531053690137e-5 * t88 * t22;
    t3 = 0.21809718299711829207e-19 * t5 * t8 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9) - 0.18953053328656370712e-10 * t26 - 0.37336908559746533299e-3 * t28 - 0.12648004254656684721e-5 * t10 + 0.46426252519734398174e-16 * t5 * t12 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + 0.10906755647099367807e-15 * t19 * t13 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.15177605105588021664e-5 * t23 * t4 * (-cosP1_1 * cosP2_3 + sinP1_1 * sinP2_3) + 0.91985485488412252514e-8 * t30 + 0.35559323314747547623e-21 * t11 * t20 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10) + t3 + 0.99566105281293133344e-19 * t9 * t20 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10) + 0.15077153085452960192e-17 * t14 * t18 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + 0.57912107393116688284e-10 * t29 - 0.98766466790442642933e-8 * t27 + 0.35098246904919205020e-12 * t21 * t12 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + t22 + 0.74340036847224705083e-14 * t9 * t16 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + t31 * t24;
    t1 = 0.14337519160506211200e-16 * t21 * t8 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9) + 0.97292340420436036317e-8 * t23 * t12 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.74525277594778445330e-10 * t9 * t2 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.43524611737250998290e-18 * t11 * t16 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) + 0.35098246904919205021e-12 * t1 * t13 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.42671187977697057148e-20 * t15 * t13 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7) + 0.39510359238608386244e-22 * t17 * t18 * (cosP1_12 * cosP2_8 + sinP1_12 * sinP2_8) + 0.52229534084701197946e-14 * t14 * t6 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.21936404315574503140e-14 * t7 * t18 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) + 0.61421932083608608788e-12 * t19 * t4 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + t3;
    bf[0] = -t42 * t71 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9) + 0.38173644764847787324e-15 * t72 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) - 0.90889630392494731725e-17 * t73 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) - 0.40538475175181681796e-9 * t74 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t38 * t75 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + 0.87049223474501996582e-18 * t76 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + 0.15668860225410359385e-13 * t77 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.89609494753163820008e-18 * t78 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) + 0.64006781966545585728e-20 * t79 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) + t40 * t80 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) + t36;
    bf[1] = t25;
    bf[2] = t1;
}

static void idsbf_4_10_13_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t100, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t9, t90, t91, t92, t93, t94, t95, t96, t97, t98, t99;
    t1 = LegP1[99];
    t2 = LegP2[64];
    t3 = LegP1[95];
    t4 = LegP2[60];
    t5 = LegP1[97];
    t6 = LegP1[101];
    t7 = LegP2[62];
    t8 = LegP1[102];
    t9 = LegP2[65];
    t10 = LegP1[94];
    t11 = LegP2[59];
    t12 = LegP1[96];
    t13 = LegP1[98];
    t14 = LegP2[63];
    t15 = LegP2[61];
    t16 = LegP1[93];
    t17 = LegP1[100];
    t18 = LegP2[56];
    t19 = LegP2[58];
    t20 = LegP1[92];
    t21 = LegP2[57];
    t22 = LegP1[103];
    t23 = LegP1[91];
    t24 = LegP2[55];
    t25 = LegP1[104];
    t26 = t1 * t2;
    t27 = t3 * t4;
    t28 = t5 * t4;
    t29 = t6 * t2;
    t30 = t5 * t7;
    t31 = t1 * t7;
    t32 = t8 * t9;
    t33 = t3 * t2;
    t34 = t5 * t18;
    t35 = t6 * t4;
    t36 = t16 * t7;
    t37 = t36 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) * t15 * t10;
    t38 = t1 * t19;
    t39 = t8 * t15;
    t40 = t39 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6);
    t41 = t22 * t7;
    t42 = t41 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7);
    t43 = t25 * t14;
    t44 = t43 * (cosP1_13 * cosP2_8 + sinP1_13 * sinP2_8);
    t45 = t10 * t14;
    t46 = (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) * t7 * t3 + t45 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t47 = t13 * t21;
    t48 = t17 * t9;
    t49 = t48 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t50 = t12 * t15;
    t51 = t50 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t52 = t12 * t11;
    t53 = t52 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t54 = t13 * t14;
    t55 = t54 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t56 = t17 * t14;
    t57 = t56 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t58 = t13 * t15;
    t59 = t58 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t60 = t3 * t19;
    t61 = t10 * t11;
    t62 = t61 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t63 = t16 * t4;
    t64 = t63 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t65 = t12 * t14;
    t66 = t65 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t67 = t17 * t15;
    t68 = t13 * t11;
    t69 = t12 * t9;
    t70 = t5 * t19;
    t71 = t6 * t7;
    t72 = t13 * t9;
    t73 = t1 * t4;
    t74 = t8 * t14;
    t75 = t12 * t21;
    t76 = t20 * t15;
    t77 = t17 * t11;
    t78 = t22 * t2;
    t79 = t23 * t4;
    t80 = 0.31937269170420353710e-15;
    t81 = 0.82651808536758454644e-23;
    t82 = 0.38669952109329000308e-7;
    t83 = sinP1_3 * t10;
    t84 = t20 * sinP1_1;
    t85 = cosP1_3 * t10;
    t86 = cosP1_1 * t20;
    t87 = (0.51559936145772000407e-7 * t85 + 0.92807885062389600733e-5 * t86) * cosP2_2 + (0.12889984036443000101e-6 * t83 + 0.23201971265597400183e-4 * t84) * sinP2_2;
    t88 = cosP1_4 * t3;
    t89 = (-0.18280340997137345601e-7 * t88 + 0.13302463525609176106e-4 * cosP1_2 * t16) * cosP2_1 + (-0.95620245215795346216e-7 * sinP1_4 * t3 - 0.3093596168746320024e-6 * sinP1_2 * t16) * sinP2_1;
    t90 = 0.12790830313085746255e-6 * sinP1_2;
    t91 = 0.20524820734951546315e-6 * cosP1_2;
    t92 = 0.77339904218658000614e-7 * t20;
    t93 = t92 * sinP1_1 * t11 * sinP2_4;
    t94 = t16 * t19;
    t95 = t94 * (t91 * cosP2_3 + t90 * sinP2_3);
    t87 = t18 * t89 + t21 * t87 + 0.10574345227564358597e-18 * t26 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) + 0.13520962275989160948e-10 * t27 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.83462730098698524367e-13 * t28 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.96130411159675987257e-21 * t29 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9) + 0.10739689534759001295e-14 * t30 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) - 0.60399398546092716863e-21 * t74 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8) - 0.49476706402508485242e-9 * t75 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.21247226433697252915e-9 * t76 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - t80 * t77 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - t81 * t78 * (cosP1_12 * cosP2_9 + sinP1_12 * sinP2_9) + t82 * (-t12 * cosP1_5 * t24 + t79 * cosP2_5) + t93 + t95;
    t89 = 0.15323757246121049073e-8;
    t93 = 0.32550464738492424500e-11;
    t95 = 0.31298523787011946632e-13;
    t96 = 0.39451920739931025173e-16;
    t97 = 0.35485854633800393013e-17;
    t98 = 0.12283330314847487261e-20;
    t99 = 0.65231350429780134208e-21;
    t100 = 0.12079879709218543372e-22;
    t37 = t87 + 0.76712068105421437827e-17 * t31 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.13351445994399442675e-22 * t32 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10) + t96 * t33 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9) - 0.35154501917571818464e-9 * t34 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) - t97 * t35 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + 0.11804014685387362731e-11 * t37 - t95 * t38 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.44357318292250491264e-19 * t40 - t99 * t42 - t100 * t44 + 0.67068265257882742790e-14 * t46 - t93 * t47 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t98 * t49 + 0.11893439039064539722e-12 * t51 + 0.90139748506594406309e-11 * t53 + 0.10228275747389525044e-16 * t55 + 0.81176791645948611452e-19 * t57 + 0.78246309467529866589e-15 * t59 + 0.94646735931924126632e-9 * t60 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t89 * t62 + 0.21247226433697252916e-9 * t64 + 0.39451920739931025172e-16 * t66;
    t40 = 0.24353037493784583438e-18;
    t42 = t65 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t44 = t68 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t46 = t72 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10);
    t49 = t70 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t36 = t36 * (cosP1_2 * sinP2_7 - sinP1_2 * cosP2_7) + (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) * t15 * t10;
    t51 = t63 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t53 = -t12 * sinP1_5 * t24 + t79 * sinP2_5;
    t28 = t28 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t50 = t50 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t27 = t27 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t54 = t54 * (cosP1_7 * sinP2_8 - sinP1_7 * cosP2_8);
    t55 = t56 * (cosP1_9 * sinP2_8 - sinP1_9 * cosP2_8);
    t56 = t58 * (cosP1_7 * sinP2_6 - sinP1_7 * cosP2_6);
    t57 = (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) * t5 * t2 + t69 * (cosP1_5 * sinP2_10 - sinP1_5 * cosP2_10);
    t39 = t39 * (-sinP1_11 * cosP2_6 + cosP1_11 * sinP2_6);
    t58 = t76 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t59 = t16 * t18 * (-0.3093596168746320024e-6 * sinP1_2 * cosP2_1 - 0.13302463525609176106e-4 * cosP1_2 * sinP2_1);
    t62 = 0.23201971265597400183e-4 * t86 * t21 * sinP2_2;
    t63 = 0.70379312838978780556e-5 * t23 * t19 * sinP2_3;
    t27 = -0.67068265257882742790e-14 * t45 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - 0.67068265257882742790e-14 * (cosP1_4 * sinP2_7 - sinP1_4 * cosP2_7) * t7 * t3 - 0.78246309467529866589e-15 * t56 + t82 * t53 + 0.40240959154729645674e-13 * t44 + 0.21247226433697252916e-9 * t51 + 0.90139748506594406309e-11 * t52 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.83462730098698524367e-13 * t28 + 0.11804014685387362731e-11 * t36 - 0.49476706402508485242e-9 * t75 * (cosP1_5 * sinP2_2 - sinP1_5 * cosP2_2) - 0.13520962275989160948e-10 * t27 + 0.43817933301816725290e-11 * t49 + 0.39451920739931025172e-16 * t42 + 0.60399398546092716863e-21 * t74 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8) + 0.16021735193279331210e-20 * t46 - 0.81176791645948611452e-19 * t55 - t63 + 0.10228275747389525044e-16 * t54 - 0.11893439039064539722e-12 * t50 + t62 - 0.39034440097180432314e-15 * t73 * (cosP1_8 * sinP2_5 - sinP1_8 * cosP2_5) + t59;
    t28 = t10 * (0.51559936145772000407e-7 * cosP2_2 * sinP1_3 - 0.12889984036443000101e-6 * cosP1_3 * sinP2_2) - 0.92807885062389600733e-5 * t84 * cosP2_2;
    t36 = t3 * (0.95620245215795346216e-7 * cosP2_1 * sinP1_4 - 0.18280340997137345601e-7 * cosP1_4 * sinP2_1) + 0.11823724556948435134e-2 * sinP2_1 * t23;
    t42 = t94 * (-t90 * cosP2_3 + t91 * sinP2_3);
    t44 = 0.65738918585859300522e-5 * t83 * t24;
    t26 = t27 + t36 * t18 + t28 * t21 - 0.94646735931924126632e-9 * t60 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3) - 0.10574345227564358597e-18 * t26 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) - 0.96130411159675987257e-21 * t29 * (-sinP1_10 * cosP2_9 + cosP1_10 * sinP2_9) + 0.10739689534759001295e-14 * t30 * (cosP1_6 * sinP2_7 - sinP1_6 * cosP2_7) - 0.76712068105421437827e-17 * t31 * (cosP1_8 * sinP2_7 - sinP1_8 * cosP2_7) + 0.13351445994399442675e-22 * t32 * (-cosP1_11 * sinP2_10 + sinP1_11 * cosP2_10) - 0.40808732828870451962e-17 * t67 * (cosP1_9 * sinP2_6 - sinP1_9 * cosP2_6) + t40 * t57 - 0.46966572309441696634e-19 * t71 * (-sinP1_10 * cosP2_7 + cosP1_10 * sinP2_7) + 0.44357318292250491264e-19 * t39 - 0.35154501917571818464e-9 * t34 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - 0.21247226433697252915e-9 * t58 - t92 * cosP1_1 * t11 * sinP2_4 + t42 + t44;
    t26 = t100 * t43 * (-sinP1_13 * cosP2_8 + cosP1_13 * sinP2_8) + t80 * t77 * (cosP1_9 * sinP2_4 - sinP1_9 * cosP2_4) + t81 * t78 * (sinP1_12 * cosP2_9 - cosP1_12 * sinP2_9) - t89 * t61 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t93 * t47 * (cosP1_7 * sinP2_2 - sinP1_7 * cosP2_2) + t95 * t38 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3) - t96 * t33 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9) + t97 * t35 * (-sinP1_10 * cosP2_5 + cosP1_10 * sinP2_5) - t98 * t48 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) + t99 * t41 * (-sinP1_12 * cosP2_7 + cosP1_12 * sinP2_7) + t26;
    t27 = t10 * t18 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t28 = t20 * t19 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t29 = t12 * t2 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9);
    t30 = t5 * t21 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t31 = t6 * t15 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6);
    t8 = t8 * t7 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7);
    t22 = t22 * t14 * (cosP1_12 * cosP2_8 + sinP1_12 * sinP2_8);
    t32 = t1 * t11 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t21 = t16 * t21 * (0.20623974458308800162e-6 * cosP1_2 * cosP2_2 + 0.51559936145772000404e-6 * sinP1_2 * sinP2_2);
    t33 = -0.30935961687463200246e-6 * t88 * t24;
    t8 = -0.51099630672672565932e-14 * t32 + 0.77339904218658000612e-7 * t28 + 0.42494452867394505830e-9 * t20 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.88714636584500982527e-18 * t31 + 0.47216058741549450921e-11 * t16 * t15 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.12993103908734544103e-4 * t20 * t18 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.82651808536758454642e-23 * t25 * t2 * (cosP1_13 * cosP2_9 + sinP1_13 * sinP2_9) - 0.39060557686190909398e-10 * t30 - 0.35154501917571818458e-8 * t12 * t18 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + t21 + 0.40240959154729645672e-13 * t10 * t7 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.31561536591944820136e-15 * t3 * t14 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) - 0.28991711302124504092e-21 * t22 + t33 + 0.23201971265597400184e-6 * t27 + 0.24353037493784583440e-17 * t29 - 0.43817933301816725290e-12 * t13 * t19 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.14350897094551629526e-19 * t8 - 0.63874538340840707424e-16 * t17 * t4 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t1 = 0.19226082231935197451e-19 * t5 * t9 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10) + 0.26702891988798885347e-21 * t6 * t9 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10) + 0.17303474008741677706e-19 * t17 * t2 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9) + 0.12988286663351777832e-17 * t1 * t14 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + 0.10739689534759001297e-15 * t13 * t7 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.93895571361035839904e-14 * t5 * t15 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.83462730098698524358e-12 * t12 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.72111798805275525051e-10 * t3 * t11 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.56788041559154475978e-8 * t10 * t19 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + t8;
    bf[0] = t23 * (0.70379312838978780556e-5 * cosP2_3 * t19 + 0.11823724556948435134e-2 * cosP2_1 * t18) - 0.40808732828870451962e-17 * t67 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - 0.40240959154729645674e-13 * t68 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t40 * (t69 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10) + (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) * t5 * t2) - 0.43817933301816725290e-11 * t70 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.46966572309441696634e-19 * t71 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) + 0.16021735193279331210e-20 * t72 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) - 0.39034440097180432314e-15 * t73 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t37 - 0.65738918585859300522e-5 * t85 * t24;
    bf[1] = t26;
    bf[2] = t1;
}

static void idsbf_4_10_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t9, t90, t91, t92, t93, t94, t95, t96;
    t1 = LegP1[94];
    t2 = LegP2[57];
    t3 = LegP1[93];
    t4 = LegP2[58];
    t5 = LegP1[100];
    t6 = LegP2[59];
    t7 = LegP1[95];
    t8 = LegP2[64];
    t9 = LegP1[97];
    t10 = LegP2[56];
    t11 = LegP1[101];
    t12 = LegP2[60];
    t13 = LegP2[62];
    t14 = LegP1[99];
    t15 = LegP1[102];
    t16 = LegP2[61];
    t17 = LegP1[103];
    t18 = LegP1[104];
    t19 = LegP2[63];
    t20 = LegP1[98];
    t21 = LegP2[65];
    t22 = LegP1[96];
    t23 = LegP1[92];
    t24 = LegP1[91];
    t25 = LegP2[55];
    t26 = t20 * t19;
    t27 = t5 * t19;
    t28 = t22 * t16;
    t29 = t20 * t16;
    t30 = t7 * t4;
    t31 = t1 * t6;
    t32 = t14 * t8;
    t33 = t7 * t12;
    t34 = t9 * t12;
    t35 = t11 * t8;
    t36 = t35 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9);
    t37 = t9 * t13;
    t38 = t37 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t39 = t14 * t13;
    t40 = t39 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t41 = t15 * t21;
    t42 = t41 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10);
    t43 = t22 * t6;
    t44 = t43 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t45 = t18 * t21;
    t46 = t45 * (cosP1_13 * cosP2_10 + sinP1_13 * sinP2_10);
    t47 = t3 * t12;
    t48 = t47 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t49 = t22 * t19;
    t50 = t5 * t16;
    t51 = t1 * t16;
    t52 = t20 * t6;
    t53 = t9 * t8;
    t54 = t9 * t4;
    t55 = t11 * t13;
    t56 = t55 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t57 = t20 * t21;
    t58 = t57 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t59 = t7 * t13;
    t60 = t59 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t61 = t14 * t12;
    t62 = t61 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t63 = t15 * t19;
    t64 = t63 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t65 = t22 * t2;
    t66 = t24 * t12;
    t67 = -t22 * cosP1_5 * t25 + t66 * cosP2_5;
    t68 = t5 * t6;
    t69 = t68 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t70 = t7 * t8;
    t71 = t70 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9);
    t72 = t9 * t10;
    t73 = t72 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    t74 = t11 * t12;
    t75 = t74 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t76 = t3 * t13;
    t77 = t76 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t78 = t14 * t4;
    t79 = t78 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t80 = t15 * t16;
    t81 = t17 * t13;
    t82 = t81 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7);
    t83 = t18 * t19;
    t84 = t83 * (cosP1_13 * cosP2_8 + sinP1_13 * sinP2_8);
    t85 = t1 * t19;
    t86 = t85 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t87 = t20 * t2;
    t88 = t87 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t89 = t5 * t21;
    t90 = t89 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t91 = t22 * t21;
    t92 = t23 * t16;
    t93 = t17 * t8;
    t94 = t3 * (-0.19349190309513606725e-4 * cosP1_2 * cosP2_1 - 0.15063376169295609145e-4 * sinP1_2 * sinP2_1) + t7 * (0.16616124340417370301e-7 * sinP1_4 * sinP2_1 + 0.32372793973571773172e-7 * cosP1_4 * cosP2_1);
    t95 = t2 * (0.24580404627720868479e-4 * sinP1_1 * sinP2_2 + 0.28362005339677925167e-4 * cosP1_1 * cosP2_2) - 0.15756669633154402872e-7 * cosP1_1 * cosP2_4 * t6;
    t36 = -0.37515880078939054454e-10 * t48 + 0.10467717588459218690e-10 * t33 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.57305449187670508366e-17 * t26 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) - 0.44653596769613383144e-17 * t49 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + 0.14048778868721582978e-8 * t31 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.70703004764154371861e-9 * t30 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.12403776880448161984e-19 * t27 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + t94 * t10 + t95 * t23 + 0.55055360539533069858e-19 * t32 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) - 0.45911042054645696008e-11 * t44 + 0.24481138579831898650e-23 * t46 + 0.65640787251331673218e-15 * t38 - 0.21255112062335970377e-15 * t29 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.15628758869364684101e-17 * t40 - 0.10880506035480843847e-21 * t36 + 0.80769425836876687422e-13 * t28 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.30607361369763797341e-13 * t34 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.10880506035480843844e-23 * t42;
    t38 = -0.71621225605247285779e-10;
    t40 = 0.66315949634488227573e-12;
    t42 = 0.65066669578579501144e-16;
    t44 = 0.80376474185304089656e-17;
    t46 = 0.72296299531755001282e-18;
    t48 = 0.90370374414693751590e-20;
    t94 = 0.79738565660023898472e-19;
    t95 = 0.13664000611501695241e-14;
    t96 = 0.78783348165772014346e-8;
    t36 = t94 * t56 + t95 * t86 + t96 * t67 - 0.18036480807182237718e-12 * t51 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.30060801345303729530e-13 * t52 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.23501893036638622705e-19 * t53 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) + 0.26781441198543322670e-11 * t54 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.25200060861105526477e-9 * t65 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - t48 * t80 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + t36 - 0.13056607242577012616e-21 * t58 - 0.88414121603834498624e-15 * t60 + 0.36581927563068030644e-15 * t62 + 0.15996934468831954940e-20 * t64 + 0.60060393315854258027e-21 * t90 + 0.24048641076242983626e-12 * t77 - 0.63765336187007911121e-14 * t79 - 0.13289760943337316411e-21 * t82 - 0.24610668413587622980e-23 * t84 + 0.49884446676910950880e-17 * t50 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + t38 * t73 - t40 * t88 - t42 * t69 + t44 * t71 - t46 * t75;
    t56 = 0.43287553937237370523e-10;
    t58 = 0.49615107521792647939e-19;
    t60 = -0.26497676188683096218e-2 * t25;
    t62 = 0.36133194802749676659e-2 * t24;
    t51 = t51 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t47 = t47 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t50 = t50 * (cosP1_9 * sinP2_6 - sinP1_9 * cosP2_6);
    t53 = t53 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9);
    t64 = t78 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3);
    t67 = t81 * (-sinP1_12 * cosP2_7 + cosP1_12 * sinP2_7);
    t69 = t83 * (-sinP1_13 * cosP2_8 + cosP1_13 * sinP2_8);
    t31 = t31 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t43 = t43 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4);
    t39 = t39 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t29 = t29 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t37 = t37 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t71 = t89 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t41 = t41 * (cosP1_11 * sinP2_10 - sinP1_11 * cosP2_10);
    t34 = t34 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t28 = t28 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t33 = t33 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t30 = t30 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3);
    t32 = t32 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9);
    t35 = t35 * (-sinP1_10 * cosP2_9 + cosP1_10 * sinP2_9);
    t73 = t3 * t10 * (-0.15063376169295609145e-4 * sinP1_2 * cosP2_1 + 0.19349190309513606725e-4 * cosP1_2 * sinP2_1);
    t75 = -0.11817502224865802154e-6 * t1 * sinP1_3 * t2 * cosP2_2;
    t26 = -0.10467717588459218690e-10 * t33 - 0.57305449187670508366e-17 * t26 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.14048778868721582978e-8 * t31 + 0.70703004764154371861e-9 * t30 + 0.12403776880448161984e-19 * t27 * (cosP1_9 * sinP2_8 - sinP1_9 * cosP2_8) + t75 - 0.55055360539533069858e-19 * t32 - 0.60060393315854258027e-21 * t71 + 0.45911042054645696008e-11 * t43 + 0.24610668413587622980e-23 * t69 - 0.24481138579831898650e-23 * t45 * (-cosP1_13 * sinP2_10 + sinP1_13 * cosP2_10) - 0.65640787251331673218e-15 * t37 - 0.21255112062335970377e-15 * t29 - 0.15628758869364684101e-17 * t39 + t73 + 0.10880506035480843847e-21 * t35 - 0.45464971648259240354e-22 * t93 * (sinP1_12 * cosP2_9 - cosP1_12 * sinP2_9) - 0.80769425836876687422e-13 * t28 - 0.30607361369763797341e-13 * t34 + 0.63765336187007911121e-14 * t64 + 0.13289760943337316411e-21 * t67 + 0.24048641076242983626e-12 * t76 * (cosP1_2 * sinP2_7 - sinP1_2 * cosP2_7) + 0.10880506035480843844e-23 * t41;
    t27 = cosP2_4 * t6;
    t28 = (-0.15756669633154402872e-7 * t27 - 0.28362005339677925167e-4 * t2 * cosP2_2 + t60) * sinP1_1 + 0.24580404627720868479e-4 * cosP1_1 * sinP2_2 * t2;
    t29 = t7 * (-0.16616124340417370301e-7 * cosP2_1 * sinP1_4 + 0.32372793973571773172e-7 * cosP1_4 * sinP2_1) + t62 * sinP2_1;
    t30 = t3 * (-0.18443383814192269002e-6 * cosP2_3 * sinP1_2 + 0.20019050777507709290e-6 * cosP1_2 * sinP2_3) + 0.16544503114812123014e-5 * t24 * sinP2_3;
    t31 = -0.24107704538726236390e-5 * sinP1_3 * t25 + 0.10241835261550361866e-6 * cosP1_3 * sinP2_2 * t2;
    t26 = t26 - 0.37515880078939054454e-10 * t47 + 0.25200060861105526477e-9 * t65 * (cosP1_5 * sinP2_2 - sinP1_5 * cosP2_2) - 0.44653596769613383144e-17 * t49 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.23501893036638622705e-19 * t53 + t28 * t23 + t29 * t10 + t4 * t30 + t31 * t1 - 0.15996934468831954940e-20 * t63 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8) - 0.26781441198543322670e-11 * t54 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.88414121603834498624e-15 * t59 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.18036480807182237718e-12 * t51 - 0.30060801345303729530e-13 * t52 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.13056607242577012616e-21 * t57 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + 0.36581927563068030644e-15 * t61 * (cosP1_8 * sinP2_5 - sinP1_8 * cosP2_5) + 0.49884446676910950880e-17 * t50;
    t26 = t38 * t72 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t40 * t87 * (cosP1_7 * sinP2_2 - sinP1_7 * cosP2_2) + t42 * t68 * (cosP1_9 * sinP2_4 - sinP1_9 * cosP2_4) - t44 * t70 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9) + t46 * t74 * (-sinP1_10 * cosP2_5 + cosP1_10 * sinP2_5) + t48 * t80 * (-sinP1_11 * cosP2_6 + cosP1_11 * sinP2_6) - t56 * t92 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - t58 * t91 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10) + t94 * t55 * (-sinP1_10 * cosP2_7 + cosP1_10 * sinP2_7) + t95 * t85 * (cosP1_3 * sinP2_8 - sinP1_3 * cosP2_8) + t96 * (-t22 * sinP1_5 * t25 + t66 * sinP2_5) + t26;
    t28 = t11 * t16 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6);
    t29 = t1 * t13 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t15 = t15 * t13 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7);
    t17 = t17 * t19 * (cosP1_12 * cosP2_8 + sinP1_12 * sinP2_8);
    t30 = t7 * t19 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t31 = t9 * t21 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10);
    t11 = t11 * t21 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10);
    t21 = -0.37096746664156334706e-1 * t24 - 0.28362005339677925168e-6 * cosP1_4 * t7;
    t32 = (-0.37816007119570566893e-5 * cosP1_2 * cosP2_2 - 0.32773872836961157973e-5 * sinP1_2 * sinP2_2) * t3 * t2;
    t27 = -0.22059337486416164018e-6 * t27 * t24;
    t11 = -0.26526379853795291026e-10 * t9 * t2 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.26781441198543322670e-12 * t20 * t4 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.11254764023681716336e-8 * t23 * t12 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + t21 * t25 + t27 - 0.43377779719053000768e-18 * t28 - 0.57716738582983160704e-11 * t3 * t16 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.16075294837060817932e-15 * t30 - 0.89307193539226766274e-18 * t22 * t8 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9) - 0.28629334614574980505e-14 * t14 * t6 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.52226428970308050454e-22 * t11 - 0.30060801345303729530e-13 * t29 - 0.12797547575065563951e-21 * t17 - 0.66448804716686582056e-20 * t15 - 0.52226428970308050460e-20 * t31 - 0.33256297784607300584e-16 * t5 * t12 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + 0.23635004449731604306e-6 * t23 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.26786338376362484880e-6 * t1 * t10 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + t32;
    t5 = -0.50050327763211881687e-20 * t5 * t8 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9) - 0.54576618273971912727e-18 * t14 * t19 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) - 0.65640787251331673218e-16 * t20 * t13 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.85020448249343881497e-14 * t9 * t16 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.11630797320510242989e-11 * t22 * t12 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.16527975139672450565e-9 * t7 * t6 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.24039021619812486433e-7 * t1 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.51618849718213823804e-3 * t23 * t10 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.34973055114045569500e-23 * t18 * t8 * (cosP1_13 * cosP2_9 + sinP1_13 * sinP2_9) - 0.27216065729993968596e-8 * t22 * t10 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + t11;
    bf[0] = t1 * (t2 * (-0.10241835261550361866e-6 * sinP1_3 * sinP2_2 - 0.11817502224865802154e-6 * cosP1_3 * cosP2_2) + 0.24107704538726236390e-5 * cosP1_3 * t25) + t4 * (t3 * (0.20019050777507709290e-6 * cosP1_2 * cosP2_3 + 0.18443383814192269002e-6 * sinP1_2 * sinP2_3) - 0.16544503114812123014e-5 * cosP2_3 * t24) + t58 * t91 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10) + t56 * t92 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.45464971648259240354e-22 * t93 * (cosP1_12 * cosP2_9 + sinP1_12 * sinP2_9) + t36 + t60 * t23 * cosP1_1 + t62 * t10 * cosP2_1;
    bf[1] = t26;
    bf[2] = t5;
}

static void idsbf_4_12_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t8, t9;
    t1 = LegP1[51];
    t2 = LegP2[81];
    t3 = LegP1[50];
    t4 = LegP2[80];
    t5 = LegP1[49];
    t6 = LegP2[79];
    t7 = LegP1[47];
    t8 = LegP1[46];
    t9 = LegP2[82];
    t10 = LegP2[83];
    t11 = LegP1[48];
    t12 = LegP2[84];
    t13 = LegP2[85];
    t14 = LegP2[86];
    t15 = LegP2[87];
    t16 = LegP1[45];
    t17 = LegP2[78];
    t18 = LegP1[52];
    t19 = LegP1[53];
    t20 = LegP1[54];
    t21 = LegP2[88];
    t22 = LegP2[89];
    t23 = LegP2[90];
    t24 = t5 * t2;
    t25 = t3 * t9;
    t26 = t1 * t10;
    t27 = t18 * t12;
    t28 = t19 * t13;
    t29 = t20 * t14;
    t30 = t1 * t15;
    t31 = t18 * t21;
    t32 = t31 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t33 = t19 * t22;
    t34 = t33 * (cosP1_8 * cosP2_11 + sinP1_8 * sinP2_11);
    t35 = t20 * t23;
    t36 = t35 * (cosP1_9 * cosP2_12 + sinP1_9 * sinP2_12);
    t37 = t20 * t9;
    t38 = t37 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t39 = t19 * t2;
    t40 = t39 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t41 = t18 * t4;
    t42 = t41 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t43 = t1 * t6;
    t44 = t43 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    t45 = t8 * t12;
    t46 = t45 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t47 = t7 * t13;
    t48 = t11 * t14;
    t49 = t48 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t50 = t5 * t15;
    t51 = t50 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9);
    t52 = t3 * t21;
    t53 = t52 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10);
    t54 = t1 * t22;
    t55 = t54 * (cosP1_6 * cosP2_11 + sinP1_6 * sinP2_11);
    t56 = t18 * t23;
    t57 = t56 * (cosP1_7 * cosP2_12 + sinP1_7 * sinP2_12);
    t58 = t20 * t21;
    t59 = t58 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t60 = t19 * t15;
    t61 = t18 * t14;
    t62 = t1 * t13;
    t63 = t3 * t12;
    t64 = t5 * t10;
    t65 = t1 * t2;
    t66 = t3 * t4;
    t67 = t7 * t10;
    t68 = t11 * t12;
    t69 = t5 * t13;
    t70 = t3 * t14;
    t71 = t11 * t9;
    t72 = t71 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t73 = t20 * t12;
    t74 = t19 * t10;
    t75 = t18 * t9;
    t32 = 0.61434390697728568110e-9 * t24 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.13099017206338713885e-11 * t25 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.27289619179872320592e-13 * t26 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.66058205157627442709e-15 * t27 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.11306973399690328911e-16 * t28 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) - 0.18756481695886930587e-18 * t29 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) - 0.72194759735111959240e-17 * t30 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) - 0.90243449668889949046e-19 * t32 - 0.13271095539542639566e-20 * t34 - 0.24576102851004888086e-22 * t36 - 0.15160899544373511440e-15 * t38 - 0.21831695343897856474e-13 * t40 - 0.32747543015846784710e-11 * t42 - 0.50431216244404048454e-9 * t44 + 0.87414108156967017336e-9 * t46 + 0.99334213814735246954e-11 * t47 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.11825501644611338923e-12 * t49 + 0.15160899544373511440e-14 * t51 + 0.21658427920533587770e-16 * t53 + 0.36097379867555979620e-18 * t55 + 0.75202874724074957542e-20 * t57 + 0.28016757250145572417e-19 * t59;
    t34 = t7 * (-0.17451034682972688186e-6 * sinP1_2 * sinP2_3 - 0.17164952147186250664e-7 * cosP1_2 * cosP2_3) - 0.86539967075397347148e-5 * t16 * cosP2_3;
    t36 = t4 * (0.42912380367965626698e-7 * cosP1_3 * cosP2_2 + 0.20025777505050625789e-6 * sinP1_3 * sinP2_2) + 0.14318430916111197438e-4 * cosP1_3 * t17;
    t38 = cosP2_1 * t6;
    t40 = -0.21288831900547747401e-2 * t38 + 0.78672697341270315592e-7 * cosP2_5 * t10;
    t42 = -0.78672697341270315578e-7 * cosP1_5 * t3 + 0.27000469727523972313e-2 * cosP1_1 * t8;
    t32 = t32 - 0.64975283761600763318e-15 * t70 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) - 0.66222809209823497968e-11 * t68 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.59382211335402169606e-11 * t65 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.63675778086368748040e-13 * t69 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) - 0.71520633946609377804e-9 * t67 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.23840211315536459272e-9 * t72 + 0.30754967647157694634e-14 * t62 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.15853969237830586250e-12 * t63 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.11598937501560266980e-17 * t60 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) + 0.57394833989414007599e-16 * t61 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + t34 * t2 + t36 * t11 + t40 * t16 + t42 * t17 + 0.78594103238032283298e-9 * t66 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.57308200277731873248e-11 * t64 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t34 = cosP1_4 * t5;
    t36 = 0.18457825145451881733e-6 * t34;
    t40 = 0.27232856771978186177e-7 * sinP1_4 * t5;
    t42 = t60 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9);
    t44 = t62 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t46 = t63 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t49 = t64 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t51 = t71 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t27 = t27 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t28 = t28 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t29 = t29 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t53 = t73 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t55 = t74 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t57 = t65 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t59 = t66 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t60 = t67 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t62 = t68 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t63 = t69 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t64 = t70 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t30 = t30 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9);
    t31 = t31 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10);
    t33 = t33 * (-cosP1_8 * sinP2_11 + sinP1_8 * cosP2_11);
    t37 = t37 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t39 = t39 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t41 = t41 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t43 = t43 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t45 = t45 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t47 = t47 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t24 = 0.61434390697728568110e-9 * t24 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.13099017206338713885e-11 * t25 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.27289619179872320592e-13 * t26 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.66058205157627442709e-15 * t27 - 0.11306973399690328911e-16 * t28 - 0.18756481695886930587e-18 * t29 - 0.33620108700174686898e-17 * t53 - 0.38125203265998094944e-15 * t55 - 0.46392352605782945010e-13 * t75 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.59382211335402169606e-11 * t57 - 0.78594103238032283298e-9 * t59 - 0.71520633946609377804e-9 * t60 - 0.66222809209823497968e-11 * t62 - 0.63675778086368748040e-13 * t63 - 0.64975283761600763318e-15 * t64 - 0.72194759735111959240e-17 * t30 - 0.90243449668889949046e-19 * t31 - 0.13271095539542639566e-20 * t33 - 0.24576102851004888086e-22 * t35 * (-cosP1_9 * sinP2_12 + sinP1_9 * cosP2_12) - 0.15160899544373511440e-15 * t37 - 0.21831695343897856474e-13 * t39 - 0.32747543015846784710e-11 * t41;
    t25 = sinP2_1 * t6;
    t26 = 0.86539967075397347148e-5 * sinP2_3 * t2 - 0.21288831900547747401e-2 * t25 + 0.78672697341270315592e-7 * sinP2_5 * t10;
    t27 = sinP1_1 * t8;
    t28 = 0.27000469727523972313e-2 * t27 - 0.14318430916111197438e-4 * sinP1_3 * t11 - 0.78672697341270315578e-7 * sinP1_5 * t3;
    t24 = t24 - 0.28016757250145572417e-19 * t58 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) - 0.50431216244404048454e-9 * t43 + 0.23840211315536459272e-9 * t51 - 0.30754967647157694634e-14 * t44 - 0.15160899544373511440e-14 * t50 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9) - 0.15853969237830586250e-12 * t46 - 0.11598937501560266980e-17 * t42 + 0.11825501644611338923e-12 * t48 * (cosP1_3 * sinP2_8 - sinP1_3 * cosP2_8) - 0.75202874724074957542e-20 * t56 * (-cosP1_7 * sinP2_12 + sinP1_7 * cosP2_12) - 0.57394833989414007599e-16 * t61 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.21658427920533587770e-16 * t52 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10) - 0.99334213814735246954e-11 * t47 + t26 * t16 + t28 * t17 - 0.87414108156967017336e-9 * t45 - t40 * t38 - 0.57308200277731873248e-11 * t49 - 0.36097379867555979620e-18 * t54 * (-cosP1_6 * sinP2_11 + sinP1_6 * cosP2_11);
    t24 = t4 * (t11 * (-0.20025777505050625789e-6 * cosP1_3 * sinP2_2 + 0.42912380367965626698e-7 * cosP2_2 * sinP1_3) + t8 * (-0.26434026306666826040e-4 * cosP1_1 * sinP2_2 + 0.56644342085714627242e-5 * cosP2_2 * sinP1_1)) + t7 * (t2 * (-0.17164952147186250664e-7 * cosP1_2 * sinP2_3 + 0.17451034682972688186e-6 * cosP2_3 * sinP1_2) + t6 * (0.31626424331190666867e-4 * cosP2_1 * sinP1_2 - 0.70805427607143284046e-5 * cosP1_2 * sinP2_1)) + t24 - 0.15734539468254063118e-6 * t27 * t9 * cosP2_4 + t25 * t36;
    t25 = t19 * t14 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8);
    t26 = t18 * t13 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7);
    t27 = t1 * t12 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t28 = t5 * t9 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t29 = t11 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t30 = t8 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t31 = t20 * t10 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t33 = 0.27000469727523972310e-1 * t16 - 0.22028355255555688363e-5 * t34;
    t16 = -0.15734539468254063115e-5 * t16 * t9 * cosP2_4;
    t5 = -0.38443709558947118293e-15 * t26 - 0.45121724834444974520e-19 * t18 * t22 * (cosP1_7 * cosP2_11 + sinP1_7 * sinP2_11) - 0.21658427920533587770e-15 * t3 * t15 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9) - 0.21138625650440781664e-13 * t27 - 0.18193079453248213726e-13 * t5 * t14 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) + t33 * t17 - 0.81868857539616961780e-12 * t3 * t10 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.28877903894044783690e-17 * t1 * t21 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10) + 0.42577663801095494797e-3 * t30 - 0.88473970263617597092e-21 * t19 * t23 * (cosP1_8 * cosP2_12 + sinP1_8 * sinP2_12) + t16 - 0.42361336962220105492e-16 * t31 + 0.36677248177748398875e-10 * t28 + 0.15972941581409427708e-7 * t29 - 0.15893474210357639512e-9 * t7 * t12 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.67523334105192950109e-17 * t25 - 0.16555702302455874491e-11 * t11 * t13 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) - 0.12887708335066963311e-18 * t20 * t15 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9);
    t1 = -0.54579238359744641184e-14 * t19 * t9 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.74227764169252712000e-12 * t18 * t2 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.10479213765070971106e-9 * t1 * t4 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.15129364873321214535e-7 * t3 * t6 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.20454901308730282050e-5 * t11 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.17307993415079469429e-5 * t8 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.15734539468254063117e-7 * t8 * t10 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + t5 + t7 * t4 * (0.48061866012121501885e-5 * sinP1_2 * sinP2_2 + 0.10298971288311750409e-5 * cosP1_2 * cosP2_2);
    bf[0] = t6 * ((0.70805427607143284046e-5 * cosP1_2 * t7 + t36) * cosP2_1 + (0.31626424331190666867e-4 * sinP1_2 * t7 + t40) * sinP2_1) + t8 * (t4 * (-0.56644342085714627242e-5 * cosP1_1 * cosP2_2 - 0.26434026306666826040e-4 * sinP1_1 * sinP2_2) - 0.15734539468254063118e-6 * cosP1_1 * cosP2_4 * t9) + 0.33620108700174686898e-17 * t73 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + 0.38125203265998094944e-15 * t74 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + 0.46392352605782945010e-13 * t75 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t32;
    bf[1] = t24;
    bf[2] = t1;
}

static void idsbf_4_12_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t100, t101, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t9, t90, t91, t92, t93, t94, t95, t96, t97, t98, t99;
    t1 = LegP1[74];
    t2 = LegP2[85];
    t3 = LegP1[75];
    t4 = LegP2[86];
    t5 = LegP1[76];
    t6 = LegP2[87];
    t7 = LegP1[77];
    t8 = LegP2[88];
    t9 = LegP1[70];
    t10 = LegP1[71];
    t11 = LegP1[72];
    t12 = LegP1[73];
    t13 = LegP2[89];
    t14 = LegP2[90];
    t15 = LegP2[84];
    t16 = LegP2[83];
    t17 = LegP2[82];
    t18 = LegP2[81];
    t19 = LegP2[80];
    t20 = LegP2[79];
    t21 = LegP1[69];
    t22 = LegP1[68];
    t23 = LegP1[67];
    t24 = LegP1[66];
    t25 = LegP2[78];
    t26 = t24 * t16;
    t27 = t11 * t13;
    t28 = t12 * t14;
    t29 = t7 * t14;
    t30 = t5 * t13;
    t31 = t3 * t8;
    t32 = t7 * t4;
    t33 = t5 * t2;
    t34 = t3 * t15;
    t35 = t34 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t36 = t1 * t16;
    t37 = t12 * t17;
    t38 = t37 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t39 = t11 * t18;
    t40 = t39 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t41 = t10 * t19;
    t42 = t41 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t43 = t22 * t16;
    t44 = (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) * t20 * t11 + t43 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t45 = t21 * t15;
    t46 = t45 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t47 = t11 * t2;
    t48 = t10 * t15;
    t49 = t9 * t16;
    t50 = t21 * t17;
    t51 = t9 * t18;
    t52 = t10 * t17;
    t53 = t11 * t16;
    t54 = t53 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t55 = t12 * t15;
    t56 = t55 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t57 = t1 * t6;
    t58 = t57 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t59 = t12 * t4;
    t60 = t59 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t61 = t1 * t2;
    t62 = t61 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t63 = t3 * t4;
    t64 = t5 * t6;
    t65 = t64 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9);
    t66 = t7 * t8;
    t67 = t66 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10);
    t68 = t9 * t2;
    t69 = (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) * t18 * t1 + t68 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t70 = t10 * t4;
    t71 = t70 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t72 = t11 * t6;
    t73 = t72 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t74 = t12 * t8;
    t75 = t74 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t76 = t1 * t13;
    t77 = t76 * (cosP1_8 * cosP2_11 + sinP1_8 * sinP2_11);
    t78 = t3 * t14;
    t79 = t78 * (cosP1_9 * cosP2_12 + sinP1_9 * sinP2_12);
    t80 = t7 * t15;
    t81 = t5 * t16;
    t82 = t81 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t83 = t3 * t17;
    t84 = t83 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t85 = t12 * t19;
    t86 = t85 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t87 = t23 * t15;
    t88 = t87 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t89 = t22 * t2;
    t90 = t21 * t4;
    t91 = t90 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t92 = t9 * t6;
    t93 = t92 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9);
    t94 = t10 * t8;
    t95 = t94 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10);
    t96 = cosP1_3 * t21;
    t97 = cosP1_1 * t23;
    t98 = -0.22394623771284021800e-2 * t97 + 0.18643542933136881285e-4 * t96;
    t99 = cosP2_3 * t18;
    t100 = cosP2_1 * t20;
    t101 = 0.20959070965432481939e-2 * t100 - 0.12118302906538972833e-4 * t99;
    t35 = 0.38775226837999043328e-19 * t33 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) + 0.40359953500073786840e-17 * t35 + 0.26731917253295625052e-17 * t95 - 0.11093086634523204569e-20 * t31 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10) + 0.42300247459635319994e-21 * t32 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8) - 0.14969873661845550028e-15 * t84 + 0.98944876955334347472e-9 * t42 + 0.58849567339447226271e-9 * t88 - 0.49795787748763037616e-9 * t44 + 0.46230492190993610384e-15 * t36 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + 0.29939747323691100058e-15 * t93 + 0.73723633809856964784e-11 * t40 + 0.35927696788429320070e-13 * t91 + t101 * t24 + 0.56885519915013090108e-13 * t38 - 0.32334927109586388060e-11 * t86 + 0.12925075612666347777e-22 * t30 * (cosP1_10 * cosP2_11 + sinP1_10 * sinP2_11) + 0.35250206216362766666e-23 * t29 * (cosP1_11 * cosP2_12 + sinP1_11 * sinP2_12) + 0.29119735570038807246e-21 * t28 * (cosP1_7 * cosP2_12 + sinP1_7 * sinP2_12) + t98 * t25 + 0.45268897953420943286e-11 * t89 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) - 0.32334927109586388064e-11 * t46;
    t38 = -0.28465083033111089137e-9;
    t40 = 0.94159307743115562053e-10;
    t42 = 0.26859546119029759682e-11;
    t44 = -0.39233044892964817520e-12;
    t46 = 0.24011010031435507726e-23;
    t84 = 0.27495160848762957999e-21;
    t86 = 0.25284513133698538233e-19;
    t88 = 0.22066016044378459538e-17;
    t91 = 0.17523557992395673267e-15;
    t93 = 0.98748331319962351777e-14;
    t95 = 0.57763113788565123634e-7 * sinP1_4;
    t98 = 0.21312597156470580099e-6 * cosP1_4;
    t101 = t9 * t20 * (t98 * cosP2_1 + t95 * sinP2_1);
    t35 = t35 - 0.76630883079049492748e-24 * t79 + t46 * t67 - 0.87359206710116421736e-20 * t75 - 0.87359206710116421742e-20 * t80 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) - 0.96081149908054445292e-17 * t60 - 0.75465774871774331615e-15 * t47 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + t101 + t88 * t62 - 0.11007260045474669139e-17 * t73 - 0.11007260045474669138e-17 * t82 - 0.14969873661845550029e-15 * t71 + t91 * t56 + t93 * t54 - 0.53622087456730760196e-13 * t48 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.21556618073057592042e-13 * t69 + t38 * t51 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t40 * t50 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t44 * t52 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - t42 * t49 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t84 * t65 + t86 * t63 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) - 0.76630883079049492754e-22 * t77 - 0.11547967556480442360e-18 * t58;
    t54 = 0.77681428888070338680e-7;
    t56 = sinP1_3 * t21;
    t58 = sinP1_1 * t23;
    t60 = t81 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5);
    t62 = t85 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t43 = t43 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) * t20 * t11;
    t65 = t87 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t67 = t90 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t69 = t92 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9);
    t71 = t94 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10);
    t73 = t27 * (-cosP1_6 * sinP2_11 + sinP1_6 * cosP2_11);
    t28 = t28 * (-cosP1_7 * sinP2_12 + sinP1_7 * cosP2_12);
    t29 = t29 * (-cosP1_11 * sinP2_12 + sinP1_11 * cosP2_12);
    t30 = t30 * (-cosP1_10 * sinP2_11 + sinP1_10 * cosP2_11);
    t31 = t31 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t32 = t32 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8);
    t34 = t34 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t36 = t36 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t37 = t37 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t39 = t39 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t41 = t41 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t57 = t57 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9);
    t59 = t59 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t47 = t47 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t75 = (0.28777981655765134682e-5 * sinP1_2 * t22 - t95 * t9) * cosP2_1 + (0.20959070965432481939e-2 * t24 + t98 * t9 + 0.29748401967413028775e-4 * cosP1_2 * t22) * sinP2_1;
    t77 = t21 * (-0.7822465566351138998e-8 * cosP1_3 * sinP2_2 - 0.14754039220978953836e-6 * cosP2_2 * sinP1_3) + t23 * (-0.26852351382181695980e-4 * cosP2_2 * sinP1_1 - 0.14236887330759072984e-5 * cosP1_1 * sinP2_2);
    t79 = t22 * (0.13745810325760362586e-6 * cosP1_2 * sinP2_3 + 0.17904754518537051495e-7 * cosP2_3 * sinP1_2) + 0.12118302906538972833e-4 * t24 * sinP2_3;
    t81 = t17 * cosP2_4;
    t82 = 0.18643542933136881285e-4 * t56 * t25;
    t45 = t18 * t79 + t19 * t77 + t20 * t75 - 0.21556618073057592042e-13 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) * t18 * t1 - 0.21556618073057592042e-13 * t68 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.14969873661845550029e-15 * t70 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.11007260045474669139e-17 * t72 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) - 0.87359206710116421736e-20 * t74 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) - 0.76630883079049492754e-22 * t76 * (-cosP1_8 * sinP2_11 + sinP1_8 * cosP2_11) - 0.76630883079049492748e-24 * t78 * (-cosP1_9 * sinP2_12 + sinP1_9 * cosP2_12) - 0.87359206710116421742e-20 * t80 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) - 0.11007260045474669138e-17 * t60 + 0.32334927109586388064e-11 * t45 * (cosP1_3 * sinP2_6 - sinP1_3 * cosP2_6) + t58 * (-0.22394623771284021800e-2 * t25 - 0.15536285777614067737e-6 * t81) - t82;
    t28 = -0.14969873661845550028e-15 * t83 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) - 0.45268897953420943286e-11 * t89 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - 0.38775226837999043328e-19 * t33 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) - 0.35250206216362766666e-23 * t29 - 0.12925075612666347777e-22 * t30 + 0.11093086634523204569e-20 * t31 - 0.42300247459635319994e-21 * t32 - 0.40359953500073786840e-17 * t34 - 0.46230492190993610384e-15 * t36 - 0.56885519915013090108e-13 * t37 - 0.73723633809856964784e-11 * t39 - 0.29119735570038807246e-21 * t28 + 0.11547967556480442360e-18 * t57 + 0.96081149908054445292e-17 * t59 - 0.32334927109586388060e-11 * t62 - 0.58849567339447226271e-9 * t65 - 0.35927696788429320070e-13 * t67 + 0.53622087456730760196e-13 * t48 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.98944876955334347472e-9 * t41 - 0.49795787748763037616e-9 * t43 + t45 + 0.75465774871774331615e-15 * t47 - 0.29939747323691100058e-15 * t69 - 0.26731917253295625052e-17 * t71 - 0.26207762013034926522e-19 * t73;
    t28 = t38 * t51 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t40 * t50 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t42 * t49 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t44 * t52 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t46 * t66 * (-cosP1_11 * sinP2_10 + sinP1_11 * cosP2_10) - t54 * (t10 * sinP1_5 * t25 - t26 * sinP2_5) + t84 * t64 * (sinP1_10 * cosP2_9 - cosP1_10 * sinP2_9) + t86 * t63 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + t88 * t61 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + t91 * t55 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t93 * t53 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t28;
    t29 = t23 * t16 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t30 = t21 * t2 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t31 = t9 * t4 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t32 = t10 * t6 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9);
    t33 = t11 * t8 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10);
    t34 = t12 * t13 * (cosP1_7 * cosP2_11 + sinP1_7 * sinP2_11);
    t14 = t1 * t14 * (cosP1_8 * cosP2_12 + sinP1_8 * sinP2_12);
    t13 = t7 * t13 * (cosP1_11 * cosP2_11 + sinP1_11 * sinP2_11);
    t8 = t5 * t8 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10);
    t36 = -0.26873548525540826159e-1 * t24 - 0.24858057244182508376e-5 * cosP1_4 * t9;
    t37 = (-0.41311309818741070738e-5 * cosP1_2 * cosP2_2 + 0.2190290358578318918e-6 * sinP1_2 * sinP2_2) * t22 * t19;
    t24 = -0.18643542933136881281e-5 * t81 * t24;
    t8 = 0.10564844413831623399e-21 * t8 - 0.37424684154613875068e-16 * t32 - 0.59879494647382200114e-14 * t1 * t17 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.47903595717905760090e-14 * t31 - 0.12946904814678389779e-7 * t29 - 0.29119735570038807245e-20 * t34 - 0.46230492190993610378e-16 * t3 * t16 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) - 0.16930567834579432788e-7 * t10 * t20 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.90537795906841886566e-10 * t22 * t15 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.11640573759451099701e-9 * t11 * t19 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + t36 * t25 - 0.64669854219172776115e-12 * t30 - 0.81915148677618849757e-12 * t12 * t18 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.11750068738787588888e-23 * t13 - 0.30652353231619797096e-22 * t14 + t24 - 0.31449314415641911822e-18 * t33 + 0.23304428666421101600e-5 * t21 * t20 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + t37 + 0.20197171510898288054e-5 * t23 * t18 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t1 = 0.11547967556480442360e-19 * t3 * t6 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9) + 0.10113805253479415293e-17 * t1 * t4 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + 0.83850860968638146236e-16 * t12 * t2 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.63084808772624423754e-14 * t11 * t15 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.33574432648787199603e-12 * t10 * t16 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.12554574365748741607e-10 * t9 * t17 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.85395249099333267400e-8 * t21 * t18 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.34931784942387469898e-3 * t23 * t20 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.35250206216362766664e-20 * t7 * t2 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7) - 0.38438050952451225562e-18 * t5 * t15 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) + t8;
    bf[0] = t19 * ((0.26852351382181695980e-4 * t97 - 0.14754039220978953836e-6 * t96) * cosP2_2 + (0.7822465566351138998e-8 * t56 - 0.14236887330759072984e-5 * t58) * sinP2_2) + t22 * ((0.13745810325760362586e-6 * t99 - 0.29748401967413028775e-4 * t100) * cosP1_2 + (-0.17904754518537051495e-7 * sinP2_3 * t18 + 0.28777981655765134682e-5 * sinP2_1 * t20) * sinP1_2) + t54 * (-t10 * cosP1_5 * t25 + t26 * cosP2_5) + 0.26207762013034926522e-19 * t27 * (cosP1_6 * cosP2_11 + sinP1_6 * sinP2_11) + t35 - 0.15536285777614067737e-6 * t97 * t17 * cosP2_4;
    bf[1] = t28;
    bf[2] = t1;
}

static void idsbf_4_12_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t9, t90, t91, t92, t93, t94, t95, t96, t97;
    t1 = LegP1[97];
    t2 = LegP2[81];
    t3 = LegP1[95];
    t4 = LegP2[85];
    t5 = LegP1[100];
    t6 = LegP2[90];
    t7 = LegP1[96];
    t8 = LegP2[80];
    t9 = LegP1[93];
    t10 = LegP2[83];
    t11 = LegP1[92];
    t12 = LegP1[99];
    t13 = LegP2[86];
    t14 = LegP1[94];
    t15 = LegP2[84];
    t16 = LegP1[98];
    t17 = LegP2[82];
    t18 = LegP2[87];
    t19 = LegP1[101];
    t20 = LegP1[102];
    t21 = LegP2[89];
    t22 = LegP1[103];
    t23 = LegP2[88];
    t24 = LegP2[79];
    t25 = LegP1[104];
    t26 = LegP1[91];
    t27 = LegP2[78];
    t28 = t16 * t15;
    t29 = t3 * t2;
    t30 = t5 * t13;
    t31 = t12 * t18;
    t32 = t19 * t18;
    t33 = t7 * t8;
    t34 = t19 * t4;
    t35 = t16 * t23;
    t36 = t20 * t13;
    t37 = t1 * t2;
    t38 = t12 * t2;
    t39 = t25 * t13;
    t40 = t39 * (cosP1_13 * cosP2_8 + sinP1_13 * sinP2_8) + (cosP1_9 * cosP2_12 + sinP1_9 * sinP2_12) * t6 * t5;
    t41 = t9 * t10;
    t42 = t12 * t10;
    t43 = t7 * t13;
    t44 = t16 * t8;
    t45 = t16 * t17;
    t46 = t5 * t17;
    t47 = t3 * t18;
    t48 = t19 * t10;
    t49 = t20 * t15;
    t50 = t1 * t21;
    t51 = t22 * t4;
    t52 = t51 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7);
    t53 = t14 * t13;
    t54 = t53 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t55 = t7 * t23;
    t56 = t55 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10);
    t57 = t1 * t24;
    t58 = t57 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    t59 = t9 * t4;
    t60 = t59 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t61 = t16 * t6;
    t62 = t5 * t23;
    t63 = t5 * t15;
    t64 = t1 * t18;
    t65 = t12 * t21;
    t66 = t11 * t15;
    t67 = t66 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t68 = t20 * t23;
    t69 = t68 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10);
    t70 = t19 * t21;
    t71 = t70 * (cosP1_10 * cosP2_11 + sinP1_10 * sinP2_11);
    t72 = t22 * t21;
    t73 = t72 * (cosP1_12 * cosP2_11 + sinP1_12 * sinP2_11);
    t74 = t16 * t13;
    t75 = t74 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t76 = t14 * t17;
    t77 = t76 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t78 = t7 * t17;
    t79 = t3 * t10;
    t80 = t79 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t81 = t1 * t10;
    t82 = t81 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t83 = t1 * t4;
    t84 = t83 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t85 = t20 * t6;
    t86 = t85 * (cosP1_11 * cosP2_12 + sinP1_11 * sinP2_12);
    t25 = t25 * t6;
    t87 = t25 * (cosP1_13 * cosP2_12 + sinP1_13 * sinP2_12);
    t88 = t12 * t4;
    t89 = t88 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t90 = t7 * t15;
    t91 = t90 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t92 = 0.31066393088880784152e-11;
    t93 = -0.14382589393000363035e-15;
    t94 = -0.14382589393000363033e-15;
    t95 = t8 * (0.18711293528055790516e-4 * cosP1_1 * cosP2_2 - 0.9920567997201891876e-6 * sinP1_1 * sinP2_2) - 0.14926780551345439168e-6 * cosP1_1 * cosP2_4 * t17;
    t96 = t2 * (0.10471710663713108094e-6 * cosP1_2 * cosP2_3 - 0.44550698876323310749e-7 * sinP1_2 * sinP2_3) - 0.46984912320081182378e-5 * sinP1_2 * sinP2_1 * t24;
    t97 = 0.7515581816062039298e-8 * t14 * sinP1_3 * t8 * sinP2_2;
    t52 = t95 * t11 + t96 * t9 + t93 * t43 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t94 * t46 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.30922319816392249384e-20 * t50 * (cosP1_6 * cosP2_11 + sinP1_6 * sinP2_11) + t97 - 0.73624570991410117586e-22 * t52 + 0.76143120315884274888e-16 * t47 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9) - t92 * ((cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) * t15 * t14 + t44 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2)) + 0.22782021598512575046e-11 * t60 - 0.83932010930207534047e-20 * t49 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) - 0.10575433377206149288e-17 * t48 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + 0.12944330453700326731e-13 * t54 + 0.43147768179001089102e-14 * t45 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.47001926120916219062e-18 * t56 + 0.21150866754412298576e-16 * t42 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - 0.47842245356876407593e-9 * t58;
    t52 = t52 + 0.22087371297423035272e-22 * t61 * (cosP1_7 * cosP2_12 + sinP1_7 * sinP2_12) - 0.27682838692770204208e-22 * t62 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10) + 0.10071841311624904086e-18 * t63 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - 0.10575433377206149290e-17 * t64 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) - 0.73624570991410117580e-22 * t65 * (cosP1_8 * cosP2_11 + sinP1_8 * sinP2_11) + 0.41007638877322635082e-9 * t67 + 0.23069032243975170174e-23 * t69 + 0.14724914198282023517e-24 * t71 - 0.24541523663803372526e-25 * t73 - 0.72877723343273253354e-18 * t75 + 0.33924501253057816298e-10 * t77 - 0.37693890281175351441e-12 * t78 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.68309516097786100684e-12 * t80 + 0.94874327913591806500e-14 * t82 - 0.89041438357697809940e-16 * t84 + 0.12270761831901686264e-25 * t86 - 0.61353809159508431317e-26 * t87 + 0.21200342466118526177e-17 * t89 - 0.94282103644468262133e-14 * t91 + 0.16836089936512189667e-15 * t28 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.27348367164003531904e-9 * t29 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t54 = -0.21516058557931369837e-2;
    t56 = 0.20710928725920522769e-13;
    t58 = cosP2_1 * t24;
    t60 = 0.74633902756727195842e-7 * cosP2_5 * t10 + 0.20136824034987051256e-2 * t58 - 0.11642888830049442551e-4 * cosP2_3 * t2;
    t67 = cosP1_1 * t11 * t54 - 0.74633902756727195850e-7 * cosP1_5 * t7;
    t69 = cosP2_2 * t8;
    t58 = 0.21117949838488101322e-4 * t58 * t9 * cosP1_2;
    t71 = (0.67170512481054476260e-5 * t27 - 0.14175222369739235238e-6 * t69) * t14 * cosP1_3;
    t73 = t24 * (-0.40187486099776182382e-7 * sinP1_4 * sinP2_1 + 0.10908031941367820932e-6 * cosP1_4 * cosP2_1) * t3;
    t40 = t26 * t60 + t27 * t67 + 0.24292574447757751117e-19 * t30 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) - 0.52832992143435900379e-20 * t31 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) + 0.26416496071717950185e-21 * t32 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9) + 0.17397180129773239125e-9 * t33 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.44174742594846070548e-21 * t34 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) - 0.83932010930207534038e-20 * t35 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) + 0.14724914198282023515e-23 * t36 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8) + 0.86985900648866195623e-12 * t37 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - t56 * ((cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) * t4 * t3 + t38 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3)) - 0.73624570991410117580e-24 * t40 - 0.47842245356876407592e-9 * t41 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t52 - t58 + t71 + t73;
    t52 = t53 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t53 = t55 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10);
    t55 = t57 * (cosP1_6 * sinP2_1 - sinP1_6 * cosP2_1);
    t57 = t59 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t58 = t61 * (-cosP1_7 * sinP2_12 + sinP1_7 * cosP2_12);
    t39 = (cosP1_9 * sinP2_12 - sinP1_9 * cosP2_12) * t6 * t5 + t39 * (-sinP1_13 * cosP2_8 + cosP1_13 * sinP2_8);
    t38 = (cosP1_4 * sinP2_7 - sinP1_4 * cosP2_7) * t4 * t3 + t38 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3);
    t44 = (cosP1_3 * sinP2_6 - sinP1_3 * cosP2_6) * t15 * t14 + t44 * (cosP1_7 * sinP2_2 - sinP1_7 * cosP2_2);
    t36 = t36 * (-sinP1_11 * cosP2_8 + cosP1_11 * sinP2_8);
    t41 = t41 * (cosP1_2 * sinP2_5 - sinP1_2 * cosP2_5);
    t37 = t37 * (cosP1_6 * sinP2_3 - sinP1_6 * cosP2_3);
    t33 = t33 * (cosP1_5 * sinP2_2 - sinP1_5 * cosP2_2);
    t42 = t42 * (cosP1_8 * sinP2_5 - sinP1_8 * cosP2_5);
    t29 = t29 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3);
    t31 = t31 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9);
    t32 = t32 * (-sinP1_10 * cosP2_9 + cosP1_10 * sinP2_9);
    t59 = t79 * (cosP1_4 * sinP2_5 - sinP1_4 * cosP2_5);
    t60 = t81 * (cosP1_6 * sinP2_5 - sinP1_6 * cosP2_5);
    t61 = t83 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t67 = t85 * (-cosP1_11 * sinP2_12 + sinP1_11 * cosP2_12);
    t25 = t25 * (cosP1_13 * sinP2_12 - sinP1_13 * cosP2_12);
    t71 = t78 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4);
    t73 = t90 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t28 = t28 * (cosP1_7 * sinP2_6 - sinP1_7 * cosP2_6);
    t63 = t63 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t75 = t9 * t2 * (0.10471710663713108094e-6 * cosP1_2 * sinP2_3 + 0.44550698876323310749e-7 * sinP1_2 * cosP2_3);
    t77 = (-0.7515581816062039298e-8 * cosP1_3 * sinP2_2 - 0.14175222369739235238e-6 * cosP2_2 * sinP1_3) * t14 * t8;
    t25 = t75 + 0.89041438357697809940e-16 * t61 - 0.26416496071717950185e-21 * t32 + 0.27682838692770204208e-22 * t62 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) - 0.21200342466118526177e-17 * t88 * (cosP1_8 * sinP2_7 - sinP1_8 * cosP2_7) - 0.68309516097786100684e-12 * t59 - 0.33924501253057816298e-10 * t76 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.37693890281175351441e-12 * t71 + 0.94282103644468262133e-14 * t73 - 0.16836089936512189667e-15 * t28 + 0.72877723343273253354e-18 * t74 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.94874327913591806500e-14 * t60 + t77 - 0.10071841311624904086e-18 * t63 - 0.23069032243975170174e-23 * t68 * (cosP1_11 * sinP2_10 - sinP1_11 * cosP2_10) - 0.14724914198282023517e-24 * t70 * (-cosP1_10 * sinP2_11 + sinP1_10 * cosP2_11) + 0.24541523663803372526e-25 * t72 * (cosP1_12 * sinP2_11 - sinP1_12 * cosP2_11) - 0.12270761831901686264e-25 * t67 + 0.61353809159508431317e-26 * t25;
    t28 = cosP1_4 * t3;
    t32 = (-0.46984912320081182378e-5 * sinP1_2 * t9 + 0.40187486099776182382e-7 * sinP1_4 * t3) * cosP2_1 + (0.20136824034987051256e-2 * t26 + 0.10908031941367820932e-6 * t28 + 0.21117949838488101322e-4 * t9 * cosP1_2) * sinP2_1;
    t59 = cosP2_4 * t17;
    t60 = -0.74633902756727195850e-7 * sinP1_5 * t7 - 0.67170512481054476260e-5 * t14 * sinP1_3;
    t25 = t11 * ((t27 * t54 - 0.14926780551345439168e-6 * t59 - 0.18711293528055790516e-4 * t69) * sinP1_1 - 0.9920567997201891876e-6 * cosP1_1 * t8 * sinP2_2) + t24 * t32 + t26 * (0.74633902756727195842e-7 * sinP2_5 * t10 + 0.11642888830049442551e-4 * sinP2_3 * t2) + t27 * t60 + t93 * t43 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t94 * t46 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.43147768179001089102e-14 * t45 * (cosP1_7 * sinP2_4 - sinP1_7 * cosP2_4) - 0.10575433377206149290e-17 * t64 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + 0.44174742594846070548e-21 * t34 * (-sinP1_10 * cosP2_7 + cosP1_10 * sinP2_7) - 0.73624570991410117580e-22 * t65 * (-cosP1_8 * sinP2_11 + sinP1_8 * cosP2_11) - 0.83932010930207534038e-20 * t35 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) - 0.76143120315884274888e-16 * t47 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9) + t25;
    t25 = t25 + 0.10575433377206149288e-17 * t48 * (-sinP1_10 * cosP2_5 + cosP1_10 * sinP2_5) - 0.83932010930207534047e-20 * t49 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) - 0.30922319816392249384e-20 * t50 * (-cosP1_6 * sinP2_11 + sinP1_6 * cosP2_11) + 0.73624570991410117586e-22 * t51 * (-sinP1_12 * cosP2_7 + cosP1_12 * sinP2_7) - 0.12944330453700326731e-13 * t52 - 0.47001926120916219062e-18 * t53 + 0.47842245356876407593e-9 * t55 - 0.22782021598512575046e-11 * t57 - 0.22087371297423035272e-22 * t58 + 0.73624570991410117580e-24 * t39 + t56 * t38 - 0.41007638877322635082e-9 * t66 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t92 * t44 + 0.14724914198282023515e-23 * t36 + 0.47842245356876407592e-9 * t41 + 0.86985900648866195623e-12 * t37 + 0.17397180129773239125e-9 * t33 + 0.21150866754412298576e-16 * t42 + 0.27348367164003531904e-9 * t29 + 0.24292574447757751117e-19 * t30 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + 0.52832992143435900379e-20 * t31;
    t29 = t9 * t15 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t30 = t16 * t2 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t31 = t14 * t24 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t32 = t11 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t33 = t5 * t10 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t34 = t7 * t18 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9);
    t35 = t20 * t4 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7);
    t36 = t16 * t21 * (cosP1_7 * cosP2_11 + sinP1_7 * sinP2_11);
    t37 = t22 * t13 * (cosP1_12 * cosP2_8 + sinP1_12 * sinP2_8);
    t38 = t3 * t13 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t39 = t19 * t15 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6);
    t41 = t1 * t23 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10);
    t42 = t14 * t4 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t2 = t14 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t13 = t12 * t13 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8);
    t14 = t11 * t24 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t2 = 0.73624570991410117580e-23 * t12 * t6 * (cosP1_8 * cosP2_12 + sinP1_8 * sinP2_12) + 0.76547592571002252144e-8 * t7 * t24 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.11482138885650337822e-7 * t11 * t10 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.14382589393000363033e-14 * t12 * t17 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.43492950324433097816e-10 * t1 * t8 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.68346064795537725138e-10 * t29 + 0.24853114471104627323e-12 * t30 - 0.14926780551345439168e-5 * t31 - 0.17912136661614527002e-5 * t32 + 0.84603467017649194308e-17 * t33 + 0.16920693403529838863e-16 * t34 + 0.29449828396564047034e-21 * t35 + 0.98166094655213490108e-25 * t20 * t21 * (cosP1_11 * cosP2_11 + sinP1_11 * sinP2_11) + 0.88349485189692141110e-21 * t36 + 0.14724914198282023515e-23 * t37 + 0.25888660907400653462e-14 * t38 + 0.50359206558124520430e-19 * t39 + 0.11750481530229054766e-18 * t41 + 0.41421857451841045539e-12 * t42 + 0.54696734328007063805e-8 * t2 - 0.21133196857374360150e-20 * t5 * t18 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9) - 0.24292574447757751119e-18 * t13 + 0.30979729284595463473e-3 * t14;
    bf[0] = t40;
    bf[1] = t25;
    bf[2] = t27 * (0.27970876125310780789e-1 * t26 + 0.13434102496210895253e-5 * t28) + 0.67849002506115632600e-11 * t3 * t17 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.13841419346385102105e-22 * t19 * t23 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10) - 0.15179892466174689040e-12 * t7 * t10 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.25440410959342231414e-16 * t16 * t4 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.12270761831901686262e-25 * t22 * t6 * (cosP1_12 * cosP2_12 + sinP1_12 * sinP2_12) - 0.23570525911117065535e-14 * t1 * t15 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + t2 + 0.19404814716749070919e-5 * t59 * t26 + (0.31185489213426317528e-5 * cosP1_2 * cosP2_2 - 0.16534279995336486444e-6 * sinP1_2 * sinP2_2) * t9 * t8;
}

static void idsbf_4_12_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t100, t101, t102, t103, t104, t105, t106, t107, t108, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t9, t90, t91, t92, t93, t94, t95, t96, t97, t98, t99;
    t1 = LegP1[98];
    t2 = LegP2[88];
    t3 = LegP1[102];
    t4 = LegP2[86];
    t5 = LegP1[97];
    t6 = LegP2[81];
    t7 = LegP1[95];
    t8 = LegP2[85];
    t9 = LegP1[100];
    t10 = LegP2[90];
    t11 = LegP1[96];
    t12 = LegP2[80];
    t13 = LegP1[93];
    t14 = LegP2[83];
    t15 = LegP1[92];
    t16 = LegP1[99];
    t17 = LegP1[94];
    t18 = LegP2[84];
    t19 = LegP2[82];
    t20 = LegP2[87];
    t21 = LegP1[101];
    t22 = LegP2[89];
    t23 = LegP1[103];
    t24 = LegP2[79];
    t25 = LegP1[104];
    t26 = LegP1[91];
    t27 = LegP2[78];
    t28 = t9 * t19;
    t29 = t7 * t20;
    t30 = t21 * t14;
    t31 = t3 * t18;
    t32 = t5 * t22;
    t33 = t23 * t8;
    t34 = t17 * t4;
    t35 = t34 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t36 = t11 * t2;
    t37 = t36 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10);
    t38 = t5 * t24;
    t39 = t38 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    t40 = t13 * t8;
    t41 = t40 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t42 = t1 * t10;
    t43 = t42 * (cosP1_7 * cosP2_12 + sinP1_7 * sinP2_12);
    t44 = t25 * t4;
    t45 = t44 * (cosP1_13 * cosP2_8 + sinP1_13 * sinP2_8);
    t46 = t9 * t2;
    t47 = t46 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t48 = t9 * t18;
    t49 = t5 * t20;
    t50 = t49 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t51 = t21 * t8;
    t52 = t51 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t53 = t3 * t4;
    t54 = t53 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t55 = t16 * t22;
    t56 = t55 * (cosP1_8 * cosP2_11 + sinP1_8 * sinP2_11);
    t57 = t11 * t4;
    t58 = t57 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t59 = t25 * t2;
    t60 = t59 * (cosP1_13 * cosP2_10 + sinP1_13 * sinP2_10);
    t61 = t23 * t20;
    t62 = t61 * (cosP1_12 * cosP2_9 + sinP1_12 * sinP2_9);
    t63 = t16 * t6;
    t64 = t15 * t18;
    t65 = t64 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t66 = t1 * t12;
    t67 = t3 * t2;
    t68 = t21 * t22;
    t69 = t23 * t22;
    t70 = t1 * t4;
    t71 = t9 * t4;
    t72 = t17 * t19;
    t73 = t11 * t19;
    t74 = t21 * t20;
    t75 = t7 * t14;
    t76 = t5 * t14;
    t77 = t5 * t8;
    t78 = t3 * t10;
    t79 = t78 * (cosP1_11 * cosP2_12 + sinP1_11 * sinP2_12);
    t80 = t25 * t10;
    t81 = t80 * (cosP1_13 * cosP2_12 + sinP1_13 * sinP2_12);
    t82 = t16 * t8;
    t83 = t82 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t84 = t11 * t18;
    t85 = t1 * t18;
    t86 = t85 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t87 = t7 * t6;
    t88 = t87 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t89 = t16 * t20;
    t90 = t89 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t91 = t11 * t12;
    t92 = t91 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t93 = t1 * t2;
    t94 = t93 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t95 = t5 * t6;
    t96 = t95 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t97 = t7 * t8;
    t98 = t97 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t99 = t9 * t10;
    t100 = t99 * (cosP1_9 * cosP2_12 + sinP1_9 * sinP2_12);
    t101 = t13 * t14;
    t102 = t16 * t14;
    t103 = t102 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t104 = t17 * t18;
    t105 = t104 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t106 = t1 * t19;
    t107 = t106 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t108 = -0.61780902679955425368e-16;
    t35 = t108 * t28 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.32707536712917578138e-16 * t29 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9) - 0.45427134323496636298e-18 * t30 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) - 0.36053281209124314524e-20 * t31 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + 0.13282787813887905351e-20 * t32 * (cosP1_6 * cosP2_11 + sinP1_6 * sinP2_11) - 0.31625685271161679406e-22 * t33 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7) + 0.55602812411959882830e-14 * t35 + 0.20189837477109616134e-18 * t37 - 0.20550799467460372694e-9 * t39 + 0.97860949845049393792e-12 * t41 + 0.94877055813485038208e-23 * t43 - 0.31625685271161679406e-24 * t45 + 0.39297994373308434875e-21 * t47 + 0.19901411227436621617e-17 * t48 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - 0.95636072259992918522e-19 * t50 + 0.18975411162697007644e-19 * t52 + 0.20556695426255091616e-21 * t54 - 0.31625685271161679407e-23 * t56 - 0.18170853729398654520e-16 * t58 + 0.43125934460675017370e-25 * t60 + 0.26430036976613689218e-23 * t62 - 0.88964499859135812524e-14 * t63 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.17614970972108890880e-9 * t65;
    t37 = cosP1_4 * t7;
    t39 = sinP1_3 * t17;
    t41 = sinP1_1 * t15;
    t43 = cosP1_3 * t17;
    t45 = cosP1_1 * t15;
    t47 = (0.21490264585972846881e-7 * t43 - 0.51576635006334832507e-5 * t45) * cosP2_2 + (-0.20546102141867810323e-4 * t41 + 0.85608758924449209681e-7 * t39) * sinP2_2;
    t50 = -0.67324419055400180948e-5 * cosP2_3 * t6 + 0.32059247169238181400e-7 * cosP2_5 * t14;
    t52 = cosP2_4 * t19;
    t54 = -0.64118494338476362806e-7 * t52;
    t56 = t6 * (-0.30227290188138856760e-7 * cosP1_2 * cosP2_3 - 0.94345784526615219560e-7 * sinP1_2 * sinP2_3) * t13;
    t35 = t12 * t47 + t24 * ((-0.23294248993168462607e-2 * t26 + 0.10234298134795265602e-6 * t37 + 0.23723842905236254232e-5 * cosP1_2 * t13) * cosP2_1 + (0.19812614750589196107e-4 * sinP1_2 * t13 + 0.38224487009476293210e-7 * sinP1_4 * t7) * sinP2_1) + t26 * t50 + t27 * (0.98101296337868835082e-5 * t43 - 0.32059247169238181404e-7 * cosP1_5 * t11) - 0.13344674978870371879e-11 * t66 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.71192018792225425505e-24 * t67 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10) + 0.59554861874265500182e-23 * t68 * (cosP1_10 * cosP2_11 + sinP1_10 * sinP2_11) - 0.99258103123775833635e-26 * t69 * (cosP1_12 * cosP2_11 + sinP1_12 * sinP2_11) + 0.23494595085204926984e-17 * t70 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) - 0.50854101916027980487e-20 * t71 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + t35 + t45 * (0.21005218745284856456e-2 * t27 + t54) + t56;
    t35 = t35 - 0.23139666413361224838e-9 * t72 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.75619824880265440649e-12 * t73 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.58281619999712237769e-22 * t74 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9) - 0.11185977555817811697e-12 * t75 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.32707536712917578059e-15 * t76 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.18186793074775320007e-15 * t77 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.11123752936285222736e-24 * t79 - 0.17113466055823419591e-27 * t81 - 0.43301888273274571447e-18 * t83 + 0.11047879067474381949e-13 * t84 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.29073365967037847233e-16 * t86 + 0.22899462263741558146e-9 * t88 + 0.29490499719854392308e-19 * t90 + 0.50709764919707413143e-9 * t92 - 0.53131151255551621404e-21 * t94 + 0.37365089940837041260e-11 * t96 - 0.35978290384209335948e-14 * t98 - 0.20536159266988103510e-25 * t100 - 0.15266308175827705429e-9 * t101 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.22986129967689297968e-15 * t103 - 0.73395712383787045336e-12 * t105 + 0.28542777038139406520e-13 * t107;
    t43 = t46 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t45 = t74 * (-sinP1_10 * cosP2_9 + cosP1_10 * sinP2_9);
    t46 = t75 * (cosP1_4 * sinP2_5 - sinP1_4 * cosP2_5);
    t47 = t76 * (cosP1_6 * sinP2_5 - sinP1_6 * cosP2_5);
    t50 = t77 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t56 = t69 * (-cosP1_12 * sinP2_11 + sinP1_12 * cosP2_11);
    t58 = t80 * (cosP1_13 * sinP2_12 - sinP1_13 * cosP2_12);
    t60 = t73 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4);
    t62 = t82 * (cosP1_8 * sinP2_7 - sinP1_8 * cosP2_7);
    t65 = t84 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t69 = t85 * (cosP1_7 * sinP2_6 - sinP1_7 * cosP2_6);
    t59 = t59 * (-cosP1_13 * sinP2_10 + sinP1_13 * cosP2_10);
    t61 = t61 * (sinP1_12 * cosP2_9 - cosP1_12 * sinP2_9);
    t48 = t48 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t51 = t51 * (-sinP1_10 * cosP2_7 + cosP1_10 * sinP2_7);
    t53 = t53 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8);
    t55 = t55 * (-cosP1_8 * sinP2_11 + sinP1_8 * cosP2_11);
    t57 = t57 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t28 = t28 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t29 = t29 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9);
    t36 = t36 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10);
    t38 = t38 * (cosP1_6 * sinP2_1 - sinP1_6 * cosP2_1);
    t42 = t42 * (-cosP1_7 * sinP2_12 + sinP1_7 * cosP2_12);
    t44 = t44 * (-sinP1_13 * cosP2_8 + cosP1_13 * sinP2_8);
    t63 = t63 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3);
    t64 = t64 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t66 = t66 * (cosP1_7 * sinP2_2 - sinP1_7 * cosP2_2);
    t73 = t87 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3);
    t74 = t89 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9);
    t67 = t67 * (cosP1_11 * sinP2_10 - sinP1_11 * cosP2_10);
    t70 = t70 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t39 = -0.32059247169238181404e-7 * sinP1_5 * t11 + 0.21005218745284856456e-2 * t41 - 0.98101296337868835082e-5 * t39;
    t75 = -0.23294248993168462607e-2 * sinP2_1 * t24 + 0.67324419055400180948e-5 * sinP2_3 * t6 + 0.32059247169238181400e-7 * sinP2_5 * t14;
    t30 = -0.29490499719854392308e-19 * t74 + 0.31625685271161679406e-22 * t33 * (-sinP1_12 * cosP2_7 + cosP1_12 * sinP2_7) - 0.94877055813485038208e-23 * t42 + 0.31625685271161679406e-24 * t44 + 0.13344674978870371879e-11 * t66 - 0.97860949845049393792e-12 * t40 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - 0.22899462263741558146e-9 * t73 + 0.20550799467460372694e-9 * t38 - 0.17614970972108890880e-9 * t64 + 0.71192018792225425505e-24 * t67 - 0.20189837477109616134e-18 * t36 - 0.36053281209124314524e-20 * t31 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) - 0.55602812411959882830e-14 * t34 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - 0.59554861874265500182e-23 * t68 * (-cosP1_10 * sinP2_11 + sinP1_10 * cosP2_11) - 0.13282787813887905351e-20 * t32 * (-cosP1_6 * sinP2_11 + sinP1_6 * cosP2_11) + 0.45427134323496636298e-18 * t30 * (-sinP1_10 * cosP2_5 + cosP1_10 * sinP2_5) + 0.88964499859135812524e-14 * t63 + t39 * t27 + t75 * t26;
    t30 = t30 - 0.23494595085204926984e-17 * t70 + 0.50854101916027980487e-20 * t71 * (cosP1_9 * sinP2_8 - sinP1_9 * cosP2_8) + 0.23139666413361224838e-9 * t72 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.39297994373308434875e-21 * t43 + 0.58281619999712237769e-22 * t45 - 0.11185977555817811697e-12 * t46 - 0.32707536712917578059e-15 * t47 - 0.18186793074775320007e-15 * t50 - 0.99258103123775833635e-26 * t56 - 0.11123752936285222736e-24 * t78 * (-cosP1_11 * sinP2_12 + sinP1_11 * cosP2_12) + 0.17113466055823419591e-27 * t58 - 0.75619824880265440649e-12 * t60 + 0.43301888273274571447e-18 * t62 - 0.11047879067474381949e-13 * t65 + 0.29073365967037847233e-16 * t69 - 0.43125934460675017370e-25 * t59 - 0.26430036976613689218e-23 * t61 - 0.19901411227436621617e-17 * t48 - 0.95636072259992918522e-19 * t49 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) + 0.18975411162697007644e-19 * t51 - 0.20556695426255091616e-21 * t53 - 0.31625685271161679407e-23 * t55 - 0.18170853729398654520e-16 * t57;
    t31 = t15 * (-0.20546102141867810323e-4 * cosP1_1 * sinP2_2 + 0.51576635006334832507e-5 * cosP2_2 * sinP1_1) + t17 * (0.21490264585972846881e-7 * cosP2_2 * sinP1_3 - 0.85608758924449209681e-7 * cosP1_3 * sinP2_2);
    t32 = t13 * (0.19812614750589196107e-4 * cosP2_1 * sinP1_2 - 0.23723842905236254232e-5 * cosP1_2 * sinP2_1) + t7 * (-0.38224487009476293210e-7 * cosP2_1 * sinP1_4 + 0.10234298134795265602e-6 * cosP1_4 * sinP2_1);
    t33 = t13 * t6 * (0.94345784526615219560e-7 * sinP1_2 * cosP2_3 - 0.30227290188138856760e-7 * cosP1_2 * sinP2_3);
    t34 = t15 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t36 = t9 * t14 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t38 = t3 * t8 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7);
    t3 = t3 * t22 * (cosP1_11 * cosP2_11 + sinP1_11 * sinP2_11);
    t22 = t1 * t22 * (cosP1_7 * cosP2_11 + sinP1_7 * sinP2_11);
    t39 = t23 * t4 * (cosP1_12 * cosP2_8 + sinP1_12 * sinP2_8);
    t40 = t7 * t4 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t42 = t21 * t18 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6);
    t43 = t5 * t2 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10);
    t44 = t17 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t9 = t9 * t20 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9);
    t4 = t16 * t4 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8);
    t45 = t15 * t24 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t7 = t7 * t19 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t2 = t21 * t2 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10);
    t21 = t11 * t14 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t23 = t23 * t10 * (cosP1_12 * cosP2_12 + sinP1_12 * sinP2_12);
    t1 = -0.53378699915481487516e-10 * t5 * t12 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.23486627962811854508e-10 * t13 * t18 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.37365089940837041262e-12 * t1 * t6 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.10900144037540981677e-5 * t17 * t24 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.96177741507714544210e-6 * t34 - 0.20896481788808452697e-16 * t36 - 0.36341707458797309040e-17 * t11 * t20 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9) - 0.15812842635580839704e-20 * t38 - 0.49629051561887916818e-24 * t3 - 0.13282787813887905351e-21 * t22 - 0.16445356341004073291e-22 * t39 - 0.65415073425835156278e-15 * t40 - 0.17305574980379670972e-18 * t42 - 0.21252460502220648560e-19 * t43 - 0.12232618730631174223e-12 * t17 * t8 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.77858171696721297708e-8 * t44 - 0.26809545199867629371e-20 * t9 - 0.22375804843052311415e-18 * t4 + 0.33277498561669232297e-3 * t45 + 0.27223136956895558637e-10 * t7 - 0.34172169020268204241e-22 * t2 + 0.12428863950908679663e-13 * t21 - 0.18186793074775320007e-16 * t1 * t8 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.88990023490281781878e-26 * t23;
    t1 = t27 * (0.29407306243398799038e-1 * t26 - 0.11541328980925745306e-5 * t37) - 0.20330797674318222476e-24 * t25 * t20 * (cosP1_13 * cosP2_9 + sinP1_13 * sinP2_9) - 0.90359100774747655448e-24 * t16 * t10 * (cosP1_8 * cosP2_12 + sinP1_8 * sinP2_12) - 0.78093037976349416235e-8 * t11 * t24 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.45798924527483116286e-8 * t15 * t14 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.27183597179180387162e-14 * t16 * t19 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.11629346386815138892e-14 * t5 * t18 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + t1 - 0.89765892073866907930e-6 * t52 * t26 + (0.68768846675113110013e-6 * cosP1_2 * cosP2_2 + 0.27394802855823747101e-5 * sinP1_2 * sinP2_2) * t13 * t12;
    bf[0] = t35;
    bf[1] = t108 * t28 + t12 * t31 + t24 * t32 - 0.53131151255551621404e-21 * t93 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + 0.15266308175827705429e-9 * t101 * (cosP1_2 * sinP2_5 - sinP1_2 * cosP2_5) + 0.37365089940837041260e-11 * t95 * (cosP1_6 * sinP2_3 - sinP1_6 * cosP2_3) - 0.35978290384209335948e-14 * t97 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.20536159266988103510e-25 * t99 * (-cosP1_9 * sinP2_12 + sinP1_9 * cosP2_12) + 0.50709764919707413143e-9 * t91 * (cosP1_5 * sinP2_2 - sinP1_5 * cosP2_2) + 0.22986129967689297968e-15 * t102 * (cosP1_8 * sinP2_5 - sinP1_8 * cosP2_5) - 0.73395712383787045336e-12 * t104 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.28542777038139406520e-13 * t106 * (cosP1_7 * sinP2_4 - sinP1_7 * cosP2_4) - 0.32707536712917578138e-16 * t29 + t30 + t41 * t54 + t33;
    bf[2] = t1;
}

static void idsbf_6_0_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3;
    t1 = 0.12926312503049848956e-2 * LegP1[16];
    t2 = -0.17953211809791456882e-5 * LegP1[20];
    t3 = 0.16157890628812311194e-3 * LegP1[18];
    bf[0] = t1 * cosP1_1 + t3 * cosP1_3 + t2 * cosP1_5;
    bf[1] = t1 * sinP1_1 - t3 * sinP1_3 + t2 * sinP1_5;
    bf[2] = -0.35906423619582913762e-4 * LegP1[19] * cosP1_4 + 0.77557875018299093735e-2 * LegP1[15];
}

static void idsbf_6_0_6_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3;
    t1 = 0.10798540905526631864e-5 * LegP1[26];
    t2 = 0.71270369976475770306e-4 * LegP1[24];
    t3 = -0.28508147990590308120e-2 * LegP1[22];
    bf[0] = t3 * sinP1_1 - t2 * sinP1_3 + t1 * sinP1_5;
    bf[1] = t3 * cosP1_1 + t2 * cosP1_3 + t1 * cosP1_5;
    bf[2] = 0.10798540905526631865e-5 * LegP1[27] * sinP1_6 - 0.28508147990590308122e-3 * LegP1[23] * sinP1_2;
}

static void idsbf_6_0_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3;
    t1 = -0.16621444348978875803e-5 * LegP1[33];
    t2 = 0.19945733218774650966e-4 * LegP1[31];
    t3 = 0.11967439931264790580e-2 * LegP1[29];
    bf[0] = t3 * cosP1_1 + t2 * cosP1_3 + t1 * cosP1_5;
    bf[1] = t3 * sinP1_1 - t2 * sinP1_3 + t1 * sinP1_5;
    bf[2] = 0.99728666093873254809e-5 * LegP1[32] * cosP1_4 - 0.83772079518853534057e-2 * LegP1[28];
}

static void idsbf_6_2_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[9];
    t2 = LegP2[3];
    t3 = LegP1[8];
    t4 = LegP2[4];
    t5 = LegP1[7];
    t6 = LegP2[5];
    t7 = LegP1[6];
    t8 = sinP1_3 * t1;
    t9 = sinP1_1 * t5;
    t10 = cosP1_3 * t1;
    t11 = cosP1_1 * t5;
    t1 = -0.37126111840187916000e-3 * t1 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.15911190788651964000e-2 * t5 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t3 * t6 * (-0.47733572365955892000e-3 * cosP1_2 * cosP2_2 + 0.63644763154607856004e-3 * sinP1_2 * sinP2_2) + 0.95467144731911783998e-2 * t7 * t2;
    bf[0] = t2 * (0.23866786182977946002e-2 * t11 + 0.55689167760281874002e-3 * t10) + t4 * (t3 * (0.95467144731911784010e-3 * cosP1_2 * cosP2_1 - 0.12728952630921571201e-2 * sinP1_2 * sinP2_1) + 0.31822381577303928002e-2 * cosP2_1 * t7) + t6 * ((-0.39777976971629909999e-4 * t10 + 0.11933393091488973001e-2 * t11) * cosP2_2 + (0.53037302628839880001e-4 * t8 - 0.15911190788651964001e-2 * t9) * sinP2_2);
    bf[1] = t2 * (-0.55689167760281874002e-3 * t8 + 0.23866786182977946001e-2 * t9) + t4 * (t3 * (-0.12728952630921571201e-2 * cosP2_1 * sinP1_2 - 0.95467144731911784011e-3 * cosP1_2 * sinP2_1) + 0.31822381577303928001e-2 * sinP2_1 * t7) + t6 * ((-0.39777976971629909999e-4 * t8 - 0.11933393091488973001e-2 * t9) * cosP2_2 + (-0.15911190788651964001e-2 * t11 - 0.53037302628839880001e-4 * t10) * sinP2_2);
    bf[2] = t1;
}

static void idsbf_6_2_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[20];
    t2 = LegP2[3];
    t3 = LegP1[18];
    t4 = LegP1[17];
    t5 = LegP2[4];
    t6 = LegP1[16];
    t7 = LegP2[5];
    t8 = LegP1[19];
    t9 = LegP1[15];
    t10 = t8 * t5;
    t11 = sinP1_3 * t3;
    t12 = sinP1_1 * t6;
    t13 = cosP1_3 * t3;
    t14 = cosP1_1 * t6;
    t15 = t2 * (-0.88946260515985702276e-5 * sinP1_5 * t1 - 0.17789252103197140458e-4 * t11 + 0.21347102523836568549e-2 * t12) + t5 * (t4 * (-0.2e-23 * cosP1_2 * sinP2_1 - 0.28462803365115424728e-3 * cosP2_1 * sinP1_2) + 0.28462803365115424728e-2 * sinP2_1 * t9) + t7 * ((-0.35578504206394280912e-4 * t11 - 0.42694205047673137092e-3 * t12) * cosP2_2 + (-0.47438005608525707884e-4 * t13 - 0.56925606730230849456e-3 * t14) * sinP2_2) - 0.23719002804262853940e-4 * t10 * (cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1);
    bf[0] = t2 * (0.21347102523836568549e-2 * t14 - 0.88946260515985702276e-5 * cosP1_5 * t1 + 0.17789252103197140458e-4 * t13) + t5 * (t4 * (0.2e-23 * cosP1_2 * cosP2_1 - 0.28462803365115424728e-3 * sinP1_2 * sinP2_1) + 0.28462803365115424728e-2 * cosP2_1 * t9) + t7 * ((-0.35578504206394280912e-4 * t13 + 0.42694205047673137092e-3 * t14) * cosP2_2 + (0.47438005608525707884e-4 * t11 - 0.56925606730230849456e-3 * t12) * sinP2_2) - 0.23719002804262853940e-4 * t10 * (cosP1_4 * cosP2_1 - sinP1_4 * sinP2_1);
    bf[1] = t15;
    bf[2] = t2 * (-0.10673551261918284274e-1 * t9 + 0.17789252103197140457e-4 * cosP1_4 * t8) + 0.94876011217051415768e-4 * t3 * t5 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.11385121346046169892e-2 * t6 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t4 * t7 * (-0.28462803365115424730e-3 * sinP1_2 * sinP2_2 + 0.21347102523836568546e-3 * cosP1_2 * cosP2_2);
}

static void idsbf_6_2_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[20];
    t2 = LegP2[3];
    t3 = LegP1[18];
    t4 = LegP1[17];
    t5 = LegP2[4];
    t6 = LegP1[16];
    t7 = LegP2[5];
    t8 = LegP1[19];
    t9 = LegP1[15];
    t10 = cosP1_4 * t8;
    t11 = -0.21458192384502855432e-5 * t10;
    t12 = cosP1_2 * t4;
    t8 = 0.85832769538011421740e-5 * sinP1_4 * t8;
    t13 = sinP1_2 * t4;
    t14 = cosP1_3 * t3;
    t15 = sinP1_3 * t3;
    t16 = 0.85832769538011421738e-5 * t1;
    t1 = -0.53645480961257138588e-5 * t1 * t5 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.19312373146052569894e-4 * t3 * t5 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.36049763205964797133e-3 * t6 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t4 * t7 * (-0.20599864689122741220e-3 * cosP1_2 * cosP2_2 + 0.10299932344561370610e-3 * sinP1_2 * sinP2_2) + 0.68666215630409137396e-4 * t10 * t2;
    bf[0] = t2 * (t16 * cosP1_5 + 0.15449898516842055914e-3 * t14) + t5 * ((0.54074644808947195699e-2 * t9 + t11 + 0.25749830861403426524e-3 * t12) * cosP2_1 + (-t8 + 0.10299932344561370608e-3 * t13) * sinP2_1) + t7 * ((-0.14419905282385918854e-2 * cosP1_1 * t6 - 0.51499661722806853045e-4 * t14) * cosP2_2 + (0.72099526411929594270e-3 * sinP1_1 * t6 + 0.25749830861403426523e-4 * t15) * sinP2_2);
    bf[1] = t2 * (t16 * sinP1_5 - 0.15449898516842055914e-3 * t15) + t5 * ((t8 + 0.10299932344561370609e-3 * t13) * cosP2_1 + (t11 + 0.54074644808947195700e-2 * t9 - 0.25749830861403426523e-3 * t12) * sinP2_1) + t7 * (t3 * (-0.25749830861403426523e-4 * cosP1_3 * sinP2_2 - 0.51499661722806853045e-4 * cosP2_2 * sinP1_3) + t6 * (0.72099526411929594267e-3 * cosP1_1 * sinP2_2 + 0.14419905282385918853e-2 * cosP2_2 * sinP1_1));
    bf[2] = t1;
}

static void idsbf_6_2_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[20];
    t2 = LegP2[3];
    t3 = LegP1[18];
    t4 = LegP1[17];
    t5 = LegP2[4];
    t6 = LegP1[16];
    t7 = LegP2[5];
    t8 = LegP1[19];
    t9 = LegP1[15];
    t10 = t1 * t7;
    t11 = 0.38193171335461860648e-3 * cosP1_2 * t4;
    t12 = cosP1_4 * t8;
    t13 = -0.18807243460644098043e-4 * t12;
    t14 = 0.72914236185881733961e-3 * t9;
    t15 = 0.34721064850419873316e-3 * sinP1_2 * t4;
    t8 = 0.28934220708683227760e-4 * sinP1_4 * t8;
    t16 = sinP1_3 * t3;
    t17 = sinP1_1 * t6;
    t18 = cosP1_3 * t3;
    t19 = cosP1_1 * t6;
    t20 = t2 * (-0.28934220708683227756e-6 * sinP1_5 * t1 - 0.26040798637814904982e-4 * t16 - 0.14582847237176346791e-2 * t17) + t5 * ((t15 + t8) * cosP2_1 + (t11 + t13 + t14) * sinP2_1) + t7 * (t3 * (-0.43401331063024841642e-5 * cosP2_2 * sinP1_3 - 0.21700665531512420821e-4 * cosP1_3 * sinP2_2) + t6 * (-0.12152372697646955660e-2 * cosP1_1 * sinP2_2 - 0.24304745395293911319e-3 * cosP2_2 * sinP1_1)) - 0.15913821389775775268e-5 * t10 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    bf[0] = t2 * (-0.14582847237176346792e-2 * t19 - 0.28934220708683227756e-6 * cosP1_5 * t1 + 0.26040798637814904982e-4 * t18) + t5 * ((-t11 + t13 + t14) * cosP2_1 + (t15 - t8) * sinP2_1) + t7 * ((-0.43401331063024841642e-5 * t18 + 0.24304745395293911318e-3 * t19) * cosP2_2 + (0.21700665531512420821e-4 * t16 - 0.12152372697646955660e-2 * t17) * sinP2_2) + 0.15913821389775775268e-5 * t10 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    bf[1] = t20;
    bf[2] = t2 * (-0.87497083423058080746e-2 * t9 - 0.57868441417366455513e-5 * t12) + 0.47741464169327325806e-5 * t1 * t5 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.91142795232352167452e-4 * t3 * t5 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.24304745395293911319e-3 * t6 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t4 * t7 * (0.34721064850419873314e-3 * sinP1_2 * sinP2_2 - 0.6944212970083974662e-4 * cosP1_2 * cosP2_2);
}

static void idsbf_6_2_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[30];
    t2 = LegP2[4];
    t3 = LegP1[29];
    t4 = LegP2[5];
    t5 = LegP1[34];
    t6 = LegP1[31];
    t7 = LegP1[33];
    t8 = LegP1[32];
    t9 = LegP2[3];
    t10 = LegP1[28];
    t11 = LegP1[35] * t4;
    t12 = t5 * t2;
    t13 = t7 * t4;
    t14 = 0.67505465420452409074e-3;
    t15 = 0.10983032072375193540e-3 * cosP1_2 * t1;
    t16 = cosP1_4 * t8;
    t17 = 0.34824248034360369756e-5 * t16;
    t18 = 0.77684860999726978701e-4 * sinP1_2 * t1;
    t8 = 0.58933342827379087282e-5 * sinP1_4 * t8;
    t19 = sinP1_3 * t6;
    t20 = sinP1_1 * t3;
    t21 = cosP1_3 * t6;
    t22 = cosP1_1 * t3;
    t23 = t2 * ((t18 + t8) * cosP2_1 + (0.67505465420452409073e-3 * t10 + t15 + t17) * sinP2_1) + t4 * (t3 * (-0.60272736982546793817e-3 * cosP1_1 * sinP2_2 - 0.12054547396509358763e-3 * cosP2_2 * sinP1_1) + t6 * (-0.40181824655031195873e-5 * cosP2_2 * sinP1_3 - 0.20090912327515597938e-4 * cosP1_3 * sinP2_2)) + t9 * (-0.13501093084090481815e-2 * t20 - 0.26787883103354130577e-6 * sinP1_5 * t7 - 0.32145459724024956696e-5 * t19) - 0.11161617959730887744e-7 * t11 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.20090912327515597936e-6 * t12 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - 0.22323235919461775488e-7 * t13 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t1 = t9 * (0.94507651588633372699e-2 * t10 + 0.16072729862012478345e-5 * t16) + 0.22323235919461775486e-7 * t5 * t4 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.80363649310062391740e-6 * t7 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.37503036344695782820e-4 * t6 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.19287275834414974021e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t1 * t4 * (-0.20090912327515597939e-3 * sinP1_2 * sinP2_2 + 0.40181824655031195874e-4 * cosP1_2 * cosP2_2);
    bf[0] = t2 * ((t10 * t14 - t15 + t17) * cosP2_1 + (t18 - t8) * sinP2_1) + t4 * ((-0.40181824655031195873e-5 * t21 + 0.12054547396509358764e-3 * t22) * cosP2_2 + (-0.60272736982546793816e-3 * t20 + 0.20090912327515597938e-4 * t19) * sinP2_2) + t9 * (-0.13501093084090481815e-2 * t22 + 0.32145459724024956696e-5 * t21 - 0.26787883103354130577e-6 * cosP1_5 * t7) - 0.11161617959730887744e-7 * t11 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.20090912327515597936e-6 * t12 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.22323235919461775488e-7 * t13 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    bf[1] = t23;
    bf[2] = t1;
}

static void idsbf_6_2_7_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[30];
    t2 = LegP2[4];
    t3 = LegP1[29];
    t4 = LegP2[5];
    t5 = LegP1[34];
    t6 = LegP1[31];
    t7 = LegP1[33];
    t8 = LegP1[32];
    t9 = LegP2[3];
    t10 = LegP1[28];
    t11 = t7 * t4;
    t12 = LegP1[35] * t4;
    t13 = t5 * t2;
    t14 = cosP1_4 * t8;
    t15 = 0.19866425814359037573e-5 * t14;
    t16 = cosP1_2 * t1;
    t17 = -0.26323014204025724788e-3 * sinP1_2 * t1;
    t8 = 0.49666064535897593940e-5 * sinP1_4 * t8;
    t18 = sinP1_3 * t6;
    t19 = sinP1_1 * t3;
    t20 = t6 * cosP1_3;
    t21 = cosP1_1 * t3;
    t22 = -0.14899819360769278182e-5 * t7;
    t23 = 0.65559205187384824000e-4 * t6;
    t24 = t2 * ((t17 + t8) * cosP2_1 + (-0.50063393052184774692e-2 * t10 + t15 - 0.84432309711025909699e-4 * t16) * sinP2_1) + t4 * ((-0.13658167747371838333e-4 * t18 + 0.73754105835807926994e-3 * t19) * cosP2_2 + (0.12416516133974398487e-5 * t20 - 0.6704918712346175182e-4 * t21) * sinP2_2) + t9 * (t23 * sinP1_3 + t22 * sinP1_5) + 0.10347096778311998737e-7 * t12 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.41388387113247994946e-7 * t13 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - 0.26902451623611196718e-6 * t11 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t1 = 0.12416516133974398484e-6 * t5 * t4 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.41388387113247994950e-6 * t7 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.20859747105076989454e-4 * t6 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.17879783232923133820e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.11919855488615422544e-4 * t14 * t9 + t1 * t4 * (-0.54632670989487353330e-4 * cosP1_2 * cosP2_2 - 0.4966606453589759394e-5 * sinP1_2 * sinP2_2);
    bf[0] = t2 * ((-0.50063393052184774691e-2 * t10 + t15 + 0.84432309711025909694e-4 * t16) * cosP2_1 + (t17 - t8) * sinP2_1) + t4 * ((-0.13658167747371838333e-4 * t20 - 0.73754105835807926995e-3 * t21) * cosP2_2 + (-0.6704918712346175183e-4 * t19 - 0.12416516133974398490e-5 * t18) * sinP2_2) + t9 * (-t23 * cosP1_3 + t22 * cosP1_5) + 0.26902451623611196718e-6 * t11 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.10347096778311998737e-7 * t12 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.41388387113247994946e-7 * t13 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    bf[1] = t24;
    bf[2] = t1;
}

static void idsbf_6_2_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[30];
    t2 = LegP2[4];
    t3 = LegP1[29];
    t4 = LegP2[5];
    t5 = LegP1[34];
    t6 = LegP1[31];
    t7 = LegP2[3];
    t8 = LegP1[33];
    t9 = LegP1[32];
    t10 = LegP1[28];
    t11 = LegP1[35] * t4;
    t12 = t5 * t2;
    t13 = t8 * t4;
    t14 = cosP1_4 * t9;
    t15 = 0.62712192155246174302e-5 * t14;
    t16 = -0.43100379335787370706e-2 * t10;
    t17 = cosP1_2 * t1;
    t18 = 0.13825187816042906610e-3 * sinP1_2 * t1;
    t9 = 0.48459421210872043782e-5 * sinP1_4 * t9;
    t19 = sinP1_3 * t6;
    t20 = sinP1_1 * t3;
    t21 = cosP1_3 * t6;
    t22 = cosP1_1 * t3;
    t23 = t2 * ((t18 - t9) * cosP2_1 + (0.18528602227686369678e-4 * t17 + t15 + t16) * sinP2_1) + t4 * (t3 * (0.96206203874525381044e-4 * cosP2_2 * sinP1_1 - 0.28861861162357614316e-3 * cosP1_1 * sinP2_2) + t6 * (-0.32068734624841793683e-5 * cosP1_3 * sinP2_2 + 0.10689578208280597893e-5 * cosP2_2 * sinP1_3)) + t7 * (-0.42758312833122391574e-6 * sinP1_5 * t8 - 0.56440972939721556886e-4 * t19 + 0.14366793111929123570e-2 * t20) - 0.29693272800779438594e-8 * t11 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.35631927360935326312e-7 * t12 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - 0.54041756497418578238e-6 * t13 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t1 = t7 * (0.11493434489543298856e-1 * t10 - 0.10261995079949373978e-4 * t14) - 0.83141163842182428062e-7 * t5 * t4 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.92643011138431848410e-6 * t8 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.15678048038811543578e-4 * t6 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.10775094833946842678e-2 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t1 * t4 * (0.64137469249683587363e-4 * sinP1_2 * sinP2_2 + 0.21379156416561195787e-4 * cosP1_2 * cosP2_2);
    bf[0] = t2 * ((-0.18528602227686369679e-4 * t17 + t15 + t16) * cosP2_1 + (t18 + t9) * sinP2_1) + t4 * ((-0.96206203874525381032e-4 * t22 + 0.10689578208280597895e-5 * t21) * cosP2_2 + (0.32068734624841793683e-5 * t19 - 0.28861861162357614315e-3 * t20) * sinP2_2) + t7 * (-0.42758312833122391574e-6 * cosP1_5 * t8 + 0.14366793111929123571e-2 * t22 + 0.56440972939721556886e-4 * t21) - 0.29693272800779438594e-8 * t11 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.35631927360935326312e-7 * t12 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.54041756497418578238e-6 * t13 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    bf[1] = t23;
    bf[2] = t1;
}

static void idsbf_6_2_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[37];
    t2 = LegP2[3];
    t3 = LegP2[4];
    t4 = LegP1[44];
    t5 = LegP1[41];
    t6 = LegP2[5];
    t7 = LegP1[38];
    t8 = LegP1[43];
    t9 = LegP1[42];
    t10 = LegP1[40];
    t11 = LegP1[39];
    t12 = t4 * t3;
    t13 = t8 * t6;
    t14 = 0.25677883722011796933e-3 * cosP1_2 * t7;
    t15 = 0.21902571973882116348e-5 * cosP1_4 * t10;
    t16 = 0.21614380237383667450e-7 * cosP1_6 * t9;
    t17 = 0.71898074421633031404e-2 * LegP1[36];
    t7 = sinP1_2 * t7;
    t18 = -0.57061963826692882082e-4 * t7;
    t19 = 0.25649064548361952040e-5 * sinP1_4 * t10;
    t9 = sinP1_6 * t9;
    t20 = 0.14409586824922444967e-7 * t9;
    t21 = sinP1_5 * t5;
    t22 = sinP1_3 * t11;
    t23 = cosP1_5 * t5;
    t24 = cosP1_3 * t11;
    t25 = 0.39943374678685017450e-3 * cosP2_2 * t6;
    t26 = -0.29957531009013763086e-2 * t2;
    t27 = t2 * (-0.36023967062306112422e-8 * cosP1_7 * t8 + 0.15130066166168567216e-6 * t23 + 0.42796472870019661556e-4 * t24) + t3 * ((-t14 + t15 + t16 + t17) * cosP2_1 + (t18 + t19 + t20) * sinP2_1) + t6 * (t11 * (-0.73488892807104469340e-5 * sinP1_3 * sinP2_2 - 0.69166016759627735848e-5 * cosP1_3 * cosP2_2) + t5 * (0.12248148801184078223e-6 * sinP1_5 * sinP2_2 + 0.11527669459937955975e-6 * cosP1_5 * cosP2_2)) + 0.24015978041537408280e-8 * t13 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.60039945103843520696e-9 * t12 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + (t26 + t25) * t1 * cosP1_1;
    t4 = t2 * (0.43228760474767334904e-7 * t9 - 0.17118589148007864624e-3 * t7) + 0.24015978041537408276e-8 * t4 * t6 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.84055923145380928978e-8 * t8 * t3 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.36023967062306112418e-7 * t5 * t3 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.14265490956673220517e-4 * t11 * t3 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.19971687339342508726e-3 * t1 * t3 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + t10 * t6 * (0.97985190409472625786e-6 * cosP1_4 * sinP2_2 - 0.92221355679503647798e-6 * sinP1_4 * cosP2_2);
    bf[0] = t2 * (0.15130066166168567216e-6 * t21 - 0.42796472870019661556e-4 * t22 + 0.36023967062306112422e-8 * sinP1_7 * t8) + t3 * ((t18 - t19 + t20) * cosP2_1 + (t14 + t15 - t16 + t17) * sinP2_1) + t6 * ((-0.11527669459937955975e-6 * t21 - 0.69166016759627735848e-5 * t22) * cosP2_2 + (0.73488892807104469340e-5 * t24 + 0.12248148801184078223e-6 * t23) * sinP2_2) - 0.60039945103843520696e-9 * t12 * (cosP1_8 * sinP2_1 - sinP1_8 * cosP2_1) + 0.24015978041537408280e-8 * t13 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + (t26 - t25) * t1 * sinP1_1;
    bf[1] = t27;
    bf[2] = t4;
}

static void idsbf_6_2_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[45];
    t2 = LegP2[4];
    t3 = LegP1[46];
    t4 = LegP2[3];
    t5 = LegP1[48];
    t6 = LegP1[50];
    t7 = LegP2[5];
    t8 = LegP1[47];
    t9 = LegP1[51];
    t10 = t6 * t7;
    t11 = LegP1[52] * t7;
    t12 = t9 * t2;
    t13 = cosP1_3 * t5;
    t14 = cosP1_1 * t3;
    t15 = sinP1_3 * t5;
    t16 = sinP1_1 * t3;
    t17 = cosP1_4 * LegP1[49];
    t18 = 0.13437641313954054174e-5 * t17;
    t19 = -0.40635427333397059820e-2 * t1;
    t20 = cosP1_2 * t8;
    t21 = t2 * ((t18 - 0.28219046759303513765e-4 * t20 + t19) * sinP2_1 + 0.84657140277910541291e-4 * t8 * sinP1_2 * cosP2_1) + t4 * (-0.40312923941862162526e-6 * sinP1_5 * t6 - 0.12093877182558648757e-4 * t15 + 0.13545142444465686608e-2 * t16) + t7 * (t3 * (-0.16931428055582108259e-3 * cosP1_1 * sinP2_2 + 0.56438093518607027518e-4 * cosP2_2 * sinP1_1) + t5 * (0.10078230985465540631e-5 * cosP2_2 * sinP1_3 - 0.30234692956396621891e-5 * cosP1_3 * sinP2_2)) - 0.27995086070737612862e-8 * t11 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.33594103284885135434e-7 * t12 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - 0.33594103284885135438e-7 * t10 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t1 = t4 * (-0.12190628200019117947e-1 * t1 + 0.40312923941862162526e-5 * t17) + 0.16797051642442567717e-7 * t9 * t7 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.26875282627908108352e-6 * t6 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.80625847883724325040e-5 * t5 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.90300949629771244059e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t8 * t7 * (-0.14109523379651756884e-4 * cosP1_2 * cosP2_2 - 0.42328570138955270648e-4 * sinP1_2 * sinP2_2);
    bf[0] = t2 * ((0.28219046759303513766e-4 * t20 + t18 + t19) * cosP2_1 + 0.84657140277910541292e-4 * t8 * sinP1_2 * sinP2_1) + t4 * (0.12093877182558648757e-4 * t13 + 0.13545142444465686607e-2 * t14 - 0.40312923941862162526e-6 * cosP1_5 * t6) + t7 * ((-0.56438093518607027528e-4 * t14 + 0.10078230985465540631e-5 * t13) * cosP2_2 + (0.30234692956396621891e-5 * t15 - 0.16931428055582108260e-3 * t16) * sinP2_2) + 0.33594103284885135438e-7 * t10 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.27995086070737612862e-8 * t11 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.33594103284885135434e-7 * t12 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    bf[1] = t21;
    bf[2] = t1;
}

static void idsbf_6_4_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[2];
    t2 = LegP2[12];
    t3 = LegP2[13];
    t4 = LegP2[11];
    t5 = LegP2[10];
    t6 = 0.90568085719735805304e-3 * cosP2_2 * t2;
    t7 = cosP2_4 * LegP2[14];
    t8 = -0.37736702383223252214e-4 * t7;
    t9 = 0.45284042859867902655e-2 * t5;
    bf[0] = (0.30189361906578601770e-3 * cosP2_3 * t3 + 0.18113617143947161061e-2 * cosP2_1 * t4) * cosT1 + t1 * ((t6 + t8 + t9) * cosP1_1 - 0.12075744762631440708e-2 * sinP1_1 * t2 * sinP2_2);
    bf[1] = (-0.30189361906578601770e-3 * sinP2_3 * t3 + 0.18113617143947161061e-2 * sinP2_1 * t4) * cosT1 + t1 * ((-t6 + t8 + t9) * sinP1_1 - 0.12075744762631440708e-2 * cosP1_1 * t2 * sinP2_2);
    bf[2] = (0.90568085719735805305e-2 * t5 - 0.75473404766446504420e-4 * t7) * cosT1 - 0.30189361906578601768e-3 * t1 * t3 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.18113617143947161060e-2 * t1 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
}

static void idsbf_6_4_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[7];
    t2 = LegP2[12];
    t3 = LegP1[6];
    t4 = LegP2[13];
    t5 = LegP1[9];
    t6 = LegP1[8];
    t7 = LegP2[11];
    t8 = LegP2[10];
    t9 = t6 * t4;
    t10 = t6 * t7;
    t11 = t3 * t4;
    t12 = -0.24649510777111164798e-3;
    t13 = 0.12324755388555582398e-3 * cosP2_2 * t2;
    t14 = cosP2_4 * LegP2[14];
    t15 = -0.30811888471388956000e-4 * t14;
    t16 = 0.36974266165666747196e-2;
    t4 = t3 * (-0.11092279849700024159e-1 * t8 + 0.92435665414166867990e-4 * t14) + 0.98598043108444659198e-3 * t1 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.16433007184740776532e-3 * t6 * sinP1_2 * t2 * sinP2_2 - 0.16433007184740776532e-3 * t1 * t4 * (-cosP1_1 * cosP2_3 + sinP1_1 * sinP2_3) + t13 * t6 * cosP1_2;
    bf[0] = t1 * ((0.36974266165666747198e-2 * t8 + t13 + t15) * cosP1_1 - 0.16433007184740776532e-3 * sinP1_1 * sinP2_2 * t2) - 0.41082517961851941330e-4 * t9 * (cosP1_2 * cosP2_3 - sinP1_2 * sinP2_3) + t12 * (-t11 * cosP2_3 + t10 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1)) + t2 * (0.82165035923703882657e-4 * sinP1_3 * sinP2_2 - 0.61623776942777911993e-4 * cosP1_3 * cosP2_2) * t5 + 0.14789706466266698878e-2 * t3 * t7 * cosP2_1;
    bf[1] = t1 * ((t16 * t8 - t13 + t15) * sinP1_1 - 0.16433007184740776532e-3 * cosP1_1 * sinP2_2 * t2) + t12 * (t11 * sinP2_3 + t10 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1)) - 0.41082517961851941330e-4 * t9 * (cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + t2 * (-0.82165035923703882657e-4 * cosP1_3 * sinP2_2 - 0.61623776942777911993e-4 * cosP2_2 * sinP1_3) * t5 + 0.14789706466266698879e-2 * t3 * t7 * sinP2_1;
    bf[2] = t4;
}

static void idsbf_6_4_3_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[7];
    t2 = LegP2[12];
    t3 = LegP2[14];
    t4 = LegP1[9];
    t5 = LegP1[8];
    t6 = LegP2[13];
    t7 = LegP2[11];
    t8 = LegP1[6];
    t9 = cosP2_3 * t6;
    t10 = cosP2_1 * t7;
    t11 = sinP2_3 * t6;
    t12 = sinP2_1 * t7;
    t13 = 0.68897477137167789602e-4 * t1;
    t6 = 0.43405410596415707448e-3 * t4 * t7 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.57414564280973157998e-4 * t1 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.34448738568583894799e-5 * t4 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.48228233996017452722e-3 * t1 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t5 * t2 * (-0.2e-23 * cosP1_2 * cosP2_2 - 0.12860862398937987394e-3 * sinP1_2 * sinP2_2);
    bf[0] = t2 * (t1 * (-0.32152155997344968483e-3 * sinP1_1 * sinP2_2 + 0.2e-23 * cosP1_1 * cosP2_2) + t4 * (-0.32152155997344968483e-4 * sinP1_3 * sinP2_2 + 0.2e-24 * cosP1_3 * cosP2_2)) + t5 * ((-0.25262408283628189520e-4 * t9 + 0.67519527594424433809e-3 * t10) * cosP1_2 + (0.32152155997344968480e-4 * t11 - 0.19291293598406981087e-3 * t12) * sinP1_2) + t8 * (-0.34448738568583894802e-3 * t9 + 0.28936940397610471631e-2 * t10) + t13 * sinP1_1 * t3 * sinP2_4;
    bf[1] = t2 * ((-0.1e-23 * sinP1_3 * t4 + 0.1e-22 * t1 * sinP1_1) * cosP2_2 + (-0.32152155997344968483e-3 * cosP1_1 * t1 + 0.32152155997344968483e-4 * cosP1_3 * t4) * sinP2_2) + t5 * ((-0.25262408283628189520e-4 * t11 - 0.67519527594424433809e-3 * t12) * cosP1_2 + (-0.32152155997344968480e-4 * t9 - 0.19291293598406981087e-3 * t10) * sinP1_2) + t8 * (0.34448738568583894802e-3 * t11 + 0.28936940397610471632e-2 * t12) - t13 * cosP1_1 * t3 * sinP2_4;
    bf[2] = t6;
}

static void idsbf_6_4_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[7];
    t2 = LegP2[12];
    t3 = LegP2[14];
    t4 = LegP1[9];
    t5 = LegP1[8];
    t6 = LegP2[13];
    t7 = LegP2[11];
    t8 = LegP1[6];
    t9 = LegP2[10];
    t10 = t5 * sinP1_2;
    t11 = t4 * t3;
    t12 = -0.10673551261918284274e-3;
    t13 = 0.59297507010657134855e-6;
    t3 = cosP2_4 * t3;
    t14 = 0.53367756309591421370e-4 * t8 * t6;
    t15 = 0.14942971766685597983e-2 * t4;
    t16 = (-0.21347102523836568548e-2 * t9 - 0.53367756309591421374e-4 * t3) * t1;
    t17 = t12 * t7 * (t10 * cosP2_1 + sinP2_1 * t8) + t13 * t11 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t2 * ((0.18975202243410283153e-4 * sinP1_3 * t4 + 0.56925606730230849460e-3 * sinP1_1 * t1) * cosP2_2 + (0.59297507010657134849e-5 * t4 * cosP1_3 + 0.17789252103197140456e-3 * t1 * cosP1_1) * sinP2_2) + t5 * (t6 * (0.12452476472237998319e-4 * cosP1_2 * sinP2_3 - 0.17789252103197140455e-4 * sinP1_2 * cosP2_3) - 0.11740906388110112702e-3 * cosP1_2 * sinP2_1 * t7) - t14 * sinP2_3 - t15 * sinP1_3 * t9 + t16 * sinP1_1;
    t3 = t8 * (-0.85388410095346274188e-2 * t9 - 0.21347102523836568548e-3 * t3) - 0.37357429416713994962e-4 * t4 * t7 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.26683878154795710684e-4 * t1 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.50402880959058564628e-5 * t4 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.53367756309591421368e-4 * t1 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t5 * t2 * (0.22770242692092339784e-3 * cosP1_2 * cosP2_2 - 0.71157008412788561821e-4 * sinP1_2 * sinP2_2);
    bf[0] = t2 * (t1 * (0.17789252103197140456e-3 * sinP1_1 * sinP2_2 - 0.56925606730230849460e-3 * cosP1_1 * cosP2_2) + t4 * (0.18975202243410283153e-4 * cosP1_3 * cosP2_2 - 0.59297507010657134847e-5 * sinP1_3 * sinP2_2)) + t5 * (t6 * (0.17789252103197140455e-4 * sinP1_2 * sinP2_3 + 0.12452476472237998319e-4 * cosP1_2 * cosP2_3) + 0.11740906388110112702e-3 * cosP1_2 * cosP2_1 * t7) + t12 * t7 * (cosP2_1 * t8 + t10 * sinP2_1) - t13 * t11 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t14 * cosP2_3 + t15 * cosP1_3 * t9 + t16 * cosP1_1;
    bf[1] = t17;
    bf[2] = t3;
}

static void idsbf_6_4_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[17];
    t2 = LegP2[11];
    t3 = LegP1[16];
    t4 = LegP2[12];
    t5 = LegP2[14];
    t6 = LegP1[19];
    t7 = LegP1[18];
    t8 = LegP2[13];
    t9 = LegP1[20];
    t10 = LegP2[10];
    t11 = LegP1[15];
    t12 = t6 * t8;
    t13 = t9 * t5;
    t14 = t6 * t2;
    t15 = t7 * t5;
    t16 = cosP2_4 * t5;
    t9 = -0.23866786182977946000e-4 * t9;
    t17 = 0.47733572365955892006e-4 * t7;
    t18 = t17 * cosP1_3 + t9 * cosP1_5;
    t19 = (-0.19093428946382356801e-2 * t10 - 0.47733572365955892004e-4 * t16) * t3;
    t20 = t19 * sinP1_1;
    t9 = t1 * (t2 * (-0.19093428946382356800e-4 * cosP1_2 * sinP2_1 - 0.95467144731911784001e-5 * sinP1_2 * cosP2_1) + t8 * (-0.4546054511043418289e-6 * cosP1_2 * sinP2_3 - 0.43187517854912473715e-5 * sinP1_2 * cosP2_3)) + t10 * (-t17 * sinP1_3 + t9 * sinP1_5) + t11 * (-0.95467144731911783998e-4 * sinP2_1 * t2 - 0.47733572365955892000e-4 * sinP2_3 * t8) + t4 * (cosP2_2 * (0.16971936841228761600e-4 * sinP1_3 * t7 + 0.20366324209474513920e-3 * sinP1_1 * t3) + sinP2_2 * (0.63644763154607855999e-4 * t3 * cosP1_1 + 0.53037302628839879999e-5 * t7 * cosP1_3)) + 0.18941893796014242859e-7 * t15 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.32201219453224212857e-6 * t12 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.94709468980071214289e-8 * t13 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.23866786182977946000e-5 * t14 * (cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t20;
    t5 = t11 * (0.95467144731911783997e-2 * t10 + 0.23866786182977946000e-3 * t16) + 0.95467144731911784004e-5 * t7 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.19093428946382356802e-4 * t3 * t8 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.12880487781289685143e-5 * t7 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.38186857892764713600e-4 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.18941893796014242859e-7 * t6 * t5 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + (-0.10183162104737256960e-3 * cosP1_2 * cosP2_2 + 0.31822381577303927998e-4 * sinP1_2 * sinP2_2) * t4 * t1 + 0.47733572365955892000e-4 * t6 * cosP1_4 * t10;
    bf[0] = t1 * (t2 * (-0.95467144731911783997e-5 * sinP1_2 * sinP2_1 + 0.19093428946382356800e-4 * cosP1_2 * cosP2_1) + t8 * (-0.4546054511043418289e-6 * cosP1_2 * cosP2_3 + 0.43187517854912473715e-5 * sinP1_2 * sinP2_3)) + t10 * t18 + t11 * (-0.95467144731911783998e-4 * cosP2_1 * t2 + 0.47733572365955892000e-4 * cosP2_3 * t8) + t4 * (t3 * (-0.20366324209474513920e-3 * cosP1_1 * cosP2_2 + 0.63644763154607855999e-4 * sinP1_1 * sinP2_2) + t7 * (-0.53037302628839880001e-5 * sinP1_3 * sinP2_2 + 0.16971936841228761600e-4 * cosP1_3 * cosP2_2)) - 0.32201219453224212857e-6 * t12 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.94709468980071214289e-8 * t13 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.23866786182977946000e-5 * t14 * (cosP1_4 * cosP2_1 - sinP1_4 * sinP2_1) - 0.18941893796014242859e-7 * t15 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t19 * cosP1_1;
    bf[1] = t9;
    bf[2] = t5;
}

static void idsbf_6_4_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[17];
    t2 = LegP2[11];
    t3 = LegP1[16];
    t4 = LegP2[12];
    t5 = LegP1[19];
    t6 = LegP1[18];
    t7 = LegP2[13];
    t8 = LegP2[14];
    t9 = LegP1[20];
    t10 = LegP2[10];
    t11 = LegP1[15];
    t12 = t1 * cosP1_2;
    t13 = t12 * t7;
    t14 = t5 * cosP1_4;
    t15 = t14 * t2;
    t16 = t6 * t8;
    t17 = t5 * t7;
    t18 = t9 * t8;
    t19 = -0.14970376775957207144e-4;
    t20 = sinP1_3 * t6;
    t21 = sinP1_1 * t3;
    t22 = cosP1_3 * t6;
    t23 = cosP1_1 * t3;
    t24 = sinP1_2 * t1;
    t25 = 0.89822260655743242853e-4 * t24;
    t26 = 0.57578372215220027460e-6 * sinP1_4 * t5;
    t12 = 0.28328559129888253520e-3 * t12;
    t27 = -0.29019499596470893851e-2 * t11;
    t24 = t10 * (0.14394593053805006868e-5 * sinP1_5 * t9 - 0.25910267496849012366e-4 * t20) + t19 * (t15 * sinP2_1 - t13 * sinP2_3) + t2 * ((t25 - t26) * cosP2_1 + (t27 + t12) * sinP2_1) + t4 * ((0.34547023329132016487e-5 * t20 - 0.96731665321569646171e-4 * t21) * cosP2_2 + (-0.16121944220261607694e-3 * t23 + 0.57578372215220027477e-5 * t22) * sinP2_2) + t7 * (-0.24182916330392411542e-3 * sinP2_3 * t11 + 0.11515674443044005501e-5 * t24 * cosP2_3) + 0.28789186107610013739e-6 * t17 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - 0.11995494211504172391e-7 * t18 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.21591889580707510305e-6 * t16 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.60457290825981028854e-4 * t23 * t8 * sinP2_4;
    t3 = -0.71972965269025034352e-5 * t9 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.95963953692033379125e-7 * t5 * t8 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.17273511664566008243e-5 * t6 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.19346333064313929234e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.46638481494328222254e-4 * t6 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.16121944220261607694e-4 * t3 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + t1 * t4 * (0.13818809331652806595e-4 * cosP1_2 * cosP2_2 - 0.23031348886088010990e-4 * sinP1_2 * sinP2_2) + 0.11515674443044005495e-4 * t14 * t10;
    bf[0] = t10 * (0.25910267496849012366e-4 * t22 + 0.14394593053805006868e-5 * cosP1_5 * t9) + t2 * ((t27 - t12) * cosP2_1 + (t25 + t26) * sinP2_1) + t4 * ((0.96731665321569646171e-4 * t23 + 0.34547023329132016487e-5 * t22) * cosP2_2 + (-0.57578372215220027477e-5 * t20 - 0.16121944220261607694e-3 * t21) * sinP2_2) + t7 * (0.24182916330392411542e-3 * cosP2_3 * t11 - 0.11515674443044005501e-5 * sinP1_2 * sinP2_3 * t1) + t19 * (t15 * cosP2_1 - t13 * cosP2_3) - 0.21591889580707510305e-6 * t16 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.28789186107610013739e-6 * t17 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.11995494211504172391e-7 * t18 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.60457290825981028854e-4 * t21 * t8 * sinP2_4;
    bf[1] = t24;
    bf[2] = t3;
}

static void idsbf_6_4_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[17];
    t2 = LegP2[11];
    t3 = LegP1[16];
    t4 = LegP2[12];
    t5 = LegP1[19];
    t6 = LegP1[18];
    t7 = LegP2[13];
    t8 = LegP2[14];
    t9 = LegP1[20];
    t10 = LegP2[10];
    t11 = LegP1[15];
    t12 = t9 * t4;
    t13 = t6 * t8;
    t14 = t5 * t7;
    t15 = t9 * t8;
    t16 = cosP2_4 * t8;
    t17 = 0.13040603557309384695e-3 * cosP1_2 * t1;
    t18 = cosP1_4 * t5;
    t19 = -0.56568828216638883370e-5 * t18;
    t20 = -0.75028130055752624278e-3 * t11;
    t21 = 0.25307107360075289928e-5 * sinP1_4 * t5;
    t22 = sinP1_2 * t1;
    t23 = 0.31261720856563593446e-3 * t11;
    t24 = cosP1_3 * t6;
    t25 = (0.15005626011150524852e-2 * t10 - 0.31261720856563593446e-4 * t16) * t3;
    t26 = sinP1_3 * t6;
    t26 = t10 * (0.21436608587357892648e-3 * t26 + 0.23818453985953214052e-5 * sinP1_5 * t9) + t2 * ((t21 - 0.94678354594164025869e-4 * t22) * cosP2_1 + (-t17 + t19 + t20) * sinP2_1) + t4 * ((-0.33494700917746707265e-5 * t26 - 0.18757032513938156070e-3 * sinP1_1 * t3) * cosP2_2 + (-0.744326687061037939e-7 * t24 - 0.4168229447541812453e-5 * t3 * cosP1_1) * sinP2_2) + t7 * (t1 * (0.20841147237709062308e-5 * sinP1_2 * cosP2_3 + 0.12802419017449852555e-4 * cosP1_2 * sinP2_3) + t23 * sinP2_3) + 0.55824501529577845441e-6 * t13 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.74432668706103793919e-7 * t14 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.62027223921753161595e-8 * t15 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.12281390336507125997e-5 * t12 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t25 * sinP1_1;
    t5 = t11 * (0.90033756066903149106e-2 * t10 - 0.18757032513938156067e-3 * t16) + 0.81875935576714173296e-6 * t9 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.28135548770907234102e-4 * t6 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.10420573618854531149e-3 * t3 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.12405444784350632320e-6 * t5 * t8 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.13397880367098682906e-5 * t6 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.25009376685250874758e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + (0.1190922699297660702e-5 * sinP1_2 * sinP2_2 - 0.53591521468394731622e-4 * cosP1_2 * cosP2_2) * t4 * t1 + 0.47636907971906428104e-4 * t18 * t10;
    bf[0] = t10 * (-0.21436608587357892648e-3 * t24 + 0.23818453985953214052e-5 * cosP1_5 * t9) + t2 * ((t17 + t19 + t20) * cosP2_1 + (-t21 - 0.94678354594164025865e-4 * t22) * sinP2_1) + t4 * (t3 * (-0.4168229447541812453e-5 * sinP1_1 * sinP2_2 + 0.18757032513938156070e-3 * cosP1_1 * cosP2_2) + t6 * (0.7443266870610379394e-7 * sinP1_3 * sinP2_2 - 0.33494700917746707265e-5 * cosP1_3 * cosP2_2)) + t7 * (t1 * (0.12802419017449852555e-4 * cosP1_2 * cosP2_3 - 0.20841147237709062308e-5 * sinP1_2 * sinP2_3) - t23 * cosP2_3) + 0.12281390336507125997e-5 * t12 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.55824501529577845441e-6 * t13 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.74432668706103793919e-7 * t14 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.62027223921753161595e-8 * t15 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t25 * cosP1_1;
    bf[1] = t26;
    bf[2] = t5;
}

static void idsbf_6_4_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[28];
    t2 = LegP2[11];
    t3 = LegP1[29];
    t4 = LegP2[10];
    t5 = LegP1[33];
    t6 = LegP1[31];
    t7 = LegP2[13];
    t8 = LegP1[32];
    t9 = LegP2[14];
    t10 = LegP2[12];
    t11 = LegP1[30];
    t12 = LegP1[34];
    t13 = t5 * t9;
    t14 = t5 * t10;
    t15 = LegP1[35] * t10;
    t16 = t12 * t2;
    t17 = t8 * t7;
    t18 = 0.68911260767822283385e-7;
    t19 = cosP2_4 * t9;
    t20 = 0.13892510170792972328e-2 * t4 - 0.28942729522485359022e-4 * t19;
    t21 = 0.45481432106762707036e-4 * cosP1_2 * t11;
    t22 = cosP1_4 * t8;
    t23 = -0.16538702584277348012e-5 * t22;
    t24 = -0.69462550853964861657e-3 * t1;
    t25 = -0.12404026938208011008e-4 * sinP1_2 * t11;
    t26 = 0.12404026938208011009e-5 * sinP1_4 * t8;
    t27 = sinP1_3 * t6;
    t28 = sinP1_1 * t3;
    t29 = cosP1_3 * t6;
    t30 = cosP1_1 * t3;
    t31 = 0.28942729522485359022e-3 * t1;
    t32 = -0.26461924134843756820e-4 * t29 + 0.22051603445703130680e-5 * cosP1_5 * t5;
    t33 = t11 * (0.82693512921386740062e-5 * cosP1_2 * sinP2_3 + 0.55129008614257826706e-5 * sinP1_2 * cosP2_3) + t31 * sinP2_3;
    t33 = t10 * (t3 * (-0.2067337823034668502e-5 * cosP1_1 * sinP2_2 - 0.93030202036560082582e-4 * cosP2_2 * sinP1_1) + t6 * (-0.689112607678222834e-7 * cosP1_3 * sinP2_2 - 0.31010067345520027524e-5 * cosP2_2 * sinP1_3)) + t18 * (t17 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3) + (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) * t9 * t6) + t2 * ((t25 - t26) * cosP2_1 + (-t21 + t23 + t24) * sinP2_1) + t4 * (0.22051603445703130680e-5 * sinP1_5 * t5 + 0.26461924134843756820e-4 * t27) + t7 * t33 - 0.86139075959777854238e-8 * t15 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.34455630383911141686e-7 * t16 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + 0.57426050639851902816e-8 * t13 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.17227815191955570846e-7 * t14 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t28 * t20;
    t1 = t4 * (-0.97247571195550806298e-2 * t1 - 0.13230962067421878409e-4 * t22) - 0.13782252153564456674e-6 * t5 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.11577091808994143609e-4 * t6 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.82693512921386740064e-4 * t3 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.34455630383911141688e-7 * t8 * t9 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.55129008614257826711e-6 * t6 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.19846443101132817616e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.17227815191955570846e-7 * t12 * t10 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + (-0.689112607678222834e-6 * sinP1_2 * sinP2_2 + 0.31010067345520027526e-4 * cosP1_2 * cosP2_2) * t11 * t10 + 0.20259910665739751314e-3 * t19 * t1;
    bf[0] = t10 * ((-0.31010067345520027524e-5 * t29 + 0.93030202036560082582e-4 * t30) * cosP2_2 + (0.6891126076782228340e-7 * t27 - 0.2067337823034668502e-5 * t28) * sinP2_2) + t2 * ((t21 + t23 + t24) * cosP2_1 + (t25 + t26) * sinP2_1) + t4 * t32 + t7 * (t11 * (0.82693512921386740062e-5 * cosP1_2 * cosP2_3 - 0.55129008614257826706e-5 * sinP1_2 * sinP2_3) - t31 * cosP2_3) + 0.57426050639851902816e-8 * t13 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.17227815191955570846e-7 * t14 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.86139075959777854238e-8 * t15 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.34455630383911141686e-7 * t16 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) - t18 * (t17 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) * t9 * t6) + t30 * t20;
    bf[1] = t33;
    bf[2] = t1;
}

static void idsbf_6_4_7_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[32];
    t2 = LegP2[13];
    t3 = LegP1[33];
    t4 = LegP2[14];
    t5 = LegP2[12];
    t6 = LegP2[11];
    t7 = LegP1[30];
    t8 = LegP1[29];
    t9 = LegP1[35];
    t10 = LegP1[34];
    t11 = LegP1[31];
    t12 = LegP1[28];
    t13 = LegP2[10];
    t14 = t1 * t2;
    t15 = t3 * t4;
    t16 = t3 * t5;
    t17 = t9 * t5;
    t18 = t10 * t6;
    t19 = t11 * t4;
    t20 = t10 * t2;
    t21 = 0.21882264224974280800e-6;
    t22 = 0.43101429534040250066e-7;
    t23 = -0.99464837386246730886e-8;
    t24 = -0.49732418693123365454e-8;
    t25 = 0.29010577570988629846e-8;
    t26 = 0.16577472897707788485e-8;
    t27 = 0.57192281497091870268e-7;
    t28 = 0.10055895059749544495e-3 * cosP1_2 * t7;
    t29 = cosP1_4 * t1;
    t30 = 0.31033029264508980044e-5 * t29;
    t31 = 0.27070350143040910288e-2 * t12;
    t32 = -0.3879128658063622500e-5 * sinP1_2 * t7;
    t33 = 0.10145413413397166556e-5 * sinP1_4 * t1;
    t34 = sinP1_3 * t11;
    t35 = cosP1_3 * t11;
    t12 = 0.42610736336268099524e-3 * t12;
    t36 = 0.26258717069969136964e-4 * t35 + 0.59678902431748038556e-6 * cosP1_5 * t3;
    t37 = 0.25065139021334176188e-4 * t8;
    t35 = t13 * t36 + t2 * (t7 * (-0.81063842469791085688e-5 * sinP1_2 * sinP2_3 + 0.71117358731166412600e-5 * cosP1_2 * cosP2_3) + t12 * cosP2_3) + t5 * ((-0.11816422681486111634e-3 * cosP1_1 * t8 - 0.21882264224974280803e-5 * t35) * cosP2_2 + (0.29003946581829546734e-3 * t8 * sinP1_1 + 0.53711012188573234693e-5 * t34) * sinP2_2) + t6 * ((t28 + t30 + t31) * cosP2_1 + (t33 + t32) * sinP2_1) + t23 * t14 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t24 * t15 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t22 * t16 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t26 * t17 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t27 * t18 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) - t21 * t19 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - t25 * t20 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t37 * sinP1_1 * t4 * sinP2_4;
    t34 = 0.59678902431748038556e-6 * sinP1_5 * t3 - 0.26258717069969136964e-4 * t34;
    t36 = t37 * cosP1_1 * t4 * sinP2_4;
    t12 = t13 * t34 + t2 * (t7 * (0.71117358731166412600e-5 * cosP1_2 * sinP2_3 + 0.81063842469791085688e-5 * sinP1_2 * cosP2_3) - t12 * sinP2_3) + t21 * t19 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t22 * t16 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t23 * t14 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t24 * t15 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t25 * t20 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t26 * t17 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t27 * t18 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t5 * (t11 * (-0.53711012188573234693e-5 * cosP1_3 * sinP2_2 - 0.21882264224974280803e-5 * cosP2_2 * sinP1_3) + t8 * (0.29003946581829546734e-3 * cosP1_1 * sinP2_2 + 0.11816422681486111634e-3 * cosP2_2 * sinP1_1)) + t6 * ((-t33 + t32) * cosP2_1 + (-t28 + t30 + t31) * sinP2_1) - t36;
    bf[0] = t35;
    bf[1] = t12;
    bf[2] = -0.29010577570988629852e-8 * t9 * t2 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.19892967477249346183e-7 * t10 * t5 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.57192281497091870274e-6 * t3 * t6 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.62662847553335440466e-5 * t11 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.15218120120095749832e-4 * t8 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.39785934954498692361e-7 * t1 * t4 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.59678902431748038532e-7 * t11 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.96679821939431822460e-4 * t8 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t7 * t5 * (-0.87529056899897123195e-5 * cosP1_2 * cosP2_2 + 0.21484404875429293874e-4 * sinP1_2 * sinP2_2) + 0.47743121945398430836e-5 * t29 * t13;
}

static void idsbf_6_4_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[32];
    t2 = LegP2[13];
    t3 = LegP1[33];
    t4 = LegP2[14];
    t5 = LegP2[12];
    t6 = LegP2[11];
    t7 = LegP1[30];
    t8 = LegP1[29];
    t9 = LegP1[35];
    t10 = LegP1[34];
    t11 = LegP1[31];
    t12 = LegP2[10];
    t13 = LegP1[28];
    t14 = t9 * t5;
    t15 = t10 * t6;
    t16 = t11 * t4;
    t17 = t9 * t4;
    t18 = t10 * t2;
    t19 = t1 * t2;
    t20 = t3 * t4;
    t21 = t3 * t5;
    t22 = cosP2_4 * t4;
    t23 = 0.13813548010017164829e-3 * cosP1_2 * t7;
    t24 = cosP1_4 * t1;
    t25 = 0.92020607485352801277e-6 * t24;
    t26 = 0.15810813467937890403e-2 * t13;
    t27 = 0.94216553800344174943e-4 * sinP1_2 * t7;
    t28 = 0.11920851424238885620e-5 * sinP1_4 * t1;
    t29 = t11 * (-0.17706995682787584488e-5 * cosP1_3 * cosP2_2 + 0.21053199591345868171e-5 * sinP1_3 * sinP2_2) + t8 * (0.15936296114508826040e-3 * cosP1_1 * cosP2_2 - 0.18947879632211281355e-3 * sinP1_1 * sinP2_2);
    t30 = 0.21959463149913736670e-3 * t13;
    t31 = 0.53371952341504624740e-4 * cosP1_3 * t11 - 0.40433297228412594498e-6 * cosP1_5 * t3;
    t32 = (-0.12648650774350312324e-2 * t12 - 0.87837852599654946678e-5 * t22) * t8;
    t29 = t12 * t31 + t2 * (t7 * (-0.65006982181887490300e-5 * sinP1_2 * sinP2_3 - 0.4008473432127110660e-6 * cosP1_2 * cosP2_3) - t30 * cosP2_3) + t5 * t29 + t6 * ((-t23 + t25 + t26) * cosP2_1 + (t27 - t28) * sinP2_1) + 0.58093817856914647268e-9 * t14 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.87140726785371970894e-9 * t15 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) - 0.23005151871338200319e-6 * t16 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.58093817856914647272e-9 * t17 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.71164926874720442904e-8 * t18 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.31370661642733909528e-7 * t19 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.17428145357074394181e-8 * t20 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.10573074849958465802e-6 * t21 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t32 * cosP1_1;
    t31 = t11 * (-0.17706995682787584488e-5 * cosP2_2 * sinP1_3 - 0.21053199591345868171e-5 * cosP1_3 * sinP2_2) + t8 * (-0.18947879632211281355e-3 * cosP1_1 * sinP2_2 - 0.15936296114508826040e-3 * cosP2_2 * sinP1_1);
    t33 = -0.53371952341504624740e-4 * sinP1_3 * t11 - 0.40433297228412594498e-6 * sinP1_5 * t3;
    t14 = t12 * t33 + t2 * (t7 * (-0.4008473432127110660e-6 * cosP1_2 * sinP2_3 + 0.65006982181887490300e-5 * sinP1_2 * cosP2_3) + t30 * sinP2_3) + t5 * t31 + t6 * ((t27 + t28) * cosP2_1 + (t23 + t25 + t26) * sinP2_1) + 0.10573074849958465802e-6 * t21 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - 0.58093817856914647272e-9 * t17 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.58093817856914647268e-9 * t14 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.87140726785371970894e-9 * t15 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + 0.31370661642733909528e-7 * t19 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.17428145357074394181e-8 * t20 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.71164926874720442904e-8 * t18 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.23005151871338200319e-6 * t16 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t32 * sinP1_1;
    bf[0] = t29;
    bf[1] = t14;
    bf[2] = t13 * (-0.10118920619480249858e-1 * t12 - 0.70270282079723957342e-4 * t22) + 0.41827548856978546031e-7 * t1 * t4 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.69015455614014600960e-6 * t11 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.10166418124960063273e-8 * t9 * t2 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.39527033669844726008e-3 * t8 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.16266268999936101235e-7 * t10 * t5 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.22656588964196712433e-7 * t3 * t6 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.23235203390051582324e-4 * t11 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.54898657874784341676e-4 * t8 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.97039913348190226790e-5 * t24 * t12 + (-0.35413991365575168977e-4 * cosP1_2 * cosP2_2 + 0.42106399182691736343e-4 * sinP1_2 * sinP2_2) * t7 * t5;
}

static void idsbf_6_4_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[51];
    t2 = LegP2[11];
    t3 = LegP1[48];
    t4 = LegP2[12];
    t5 = LegP1[47];
    t6 = LegP2[13];
    t7 = LegP2[14];
    t8 = LegP1[49];
    t9 = LegP1[50];
    t10 = LegP2[10];
    t11 = LegP1[45];
    t12 = LegP1[46];
    t13 = LegP1[52];
    t14 = LegP1[53];
    t15 = t1 * t2;
    t16 = t3 * t7;
    t17 = t8 * t6;
    t18 = t9 * t7;
    t19 = t13 * t7;
    t20 = t1 * t6;
    t21 = t9 * t4;
    t22 = LegP1[54] * t7;
    t23 = t14 * t6;
    t24 = t13 * t4;
    t25 = -0.11925262313871441603e-2;
    t26 = -0.38120878207922377252e-6 * cosP1_5 * t9 + 0.11436263462376713175e-4 * cosP1_3 * t3 + cosP1_1 * t12 * t25;
    t27 = cosP1_2 * t5;
    t28 = 0.20703580406026808336e-3 * t11;
    t29 = t3 * (0.19849146928952686087e-5 * sinP1_3 * sinP2_2 - 0.16694315628986696246e-5 * cosP1_3 * cosP2_2) * t4;
    t30 = 0.14906577892339302004e-2 * t11;
    t31 = t30 * t2 * cosP2_1;
    t26 = t10 * t26 + 0.82157065103280985452e-9 * t15 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) - 0.49294239061968591272e-7 * t16 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.29576543437181154765e-7 * t17 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.16431413020656197092e-8 * t18 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.45642813946267214144e-11 * t19 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.19169981857432229939e-9 * t20 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.65725652082624788368e-8 * t21 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.22821406973133607072e-11 * t22 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.31949969762387049904e-10 * t23 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.54771376735520656972e-9 * t24 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + (-t28 + 0.16332824542532259906e-5 * t27) * t6 * cosP2_3 + t29 + t31;
    t27 = 0.62524812826200961177e-4 * t27;
    t29 = cosP1_4 * t8;
    t31 = 0.97931221603110934672e-6 * t29;
    t32 = sinP1_2 * t5;
    t33 = 0.21117652014147344503e-4 * t32;
    t34 = 0.10121750420724217409e-5 * sinP1_4 * t8;
    t35 = cosP2_4 * t7;
    t19 = t10 * (-0.38120878207922377252e-6 * sinP1_5 * t9 - 0.11436263462376713175e-4 * sinP1_3 * t3) + t12 * ((t10 * t25 - 0.82814321624107233344e-5 * t35 - 0.93488167522325498969e-4 * cosP2_2 * t4) * sinP1_1 - 0.11115522280213504208e-3 * cosP1_1 * sinP2_2 * t4) + t2 * ((t33 + t34) * cosP2_1 + (t31 + t30 + t27) * sinP2_1) - 0.45642813946267214144e-11 * t19 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.19169981857432229939e-9 * t20 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.22821406973133607072e-11 * t22 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.31949969762387049904e-10 * t23 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + 0.54771376735520656972e-9 * t24 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.65725652082624788368e-8 * t21 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t28 * t6 * sinP2_3;
    t20 = (0.23372041880581374743e-4 * cosP1_2 * cosP2_2 - 0.27788805700533760521e-4 * sinP1_2 * sinP2_2) * t5 * t4;
    t1 = t11 * (0.10732736082484297443e-1 * t10 + 0.74532889461696510010e-4 * t35) + 0.45642813946267214142e-11 * t14 * t7 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.12779987904954819960e-9 * t13 * t6 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.32862826041312394180e-8 * t1 * t4 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.65725652082624788365e-8 * t9 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.11948923548621186526e-4 * t3 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.46007956457837351858e-4 * t12 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.16431413020656197091e-7 * t8 * t7 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.35491852124617385719e-6 * t3 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.33125728649642893345e-3 * t12 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t20 + 0.38120878207922377250e-5 * t29 * t10;
    bf[0] = t12 * (t4 * (0.93488167522325498969e-4 * cosP1_1 * cosP2_2 - 0.11115522280213504208e-3 * sinP1_1 * sinP2_2) - 0.82814321624107233344e-5 * cosP1_1 * cosP2_4 * t7) + t2 * ((t31 - t27) * cosP2_1 + (t33 - t34) * sinP2_1) + t26 - 0.41177121029764429910e-5 * t32 * t6 * sinP2_3;
    bf[1] = 0.82157065103280985452e-9 * t15 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + 0.29576543437181154765e-7 * t17 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.16431413020656197092e-8 * t18 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.49294239061968591272e-7 * t16 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t19 + (0.16332824542532259906e-5 * cosP1_2 * sinP2_3 + 0.41177121029764429910e-5 * sinP1_2 * cosP2_3) * t6 * t5 + t3 * t4 * (-0.16694315628986696246e-5 * sinP1_3 * cosP2_2 - 0.19849146928952686087e-5 * cosP1_3 * sinP2_2);
    bf[2] = t1;
}

static void idsbf_6_4_9_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t5, t6, t7, t8, t9;
    t1 = LegP1[48];
    t2 = LegP2[10];
    t3 = LegP1[45];
    t4 = LegP2[13];
    t5 = LegP1[50];
    t6 = LegP2[11];
    t7 = LegP1[52];
    t8 = LegP2[14];
    t9 = LegP1[51];
    t10 = LegP2[12];
    t11 = LegP1[49];
    t12 = LegP1[47];
    t13 = LegP1[46];
    t14 = LegP1[53];
    t15 = t1 * t8;
    t16 = t11 * t4;
    t17 = t5 * t8;
    t18 = t7 * t8;
    t19 = t9 * t4;
    t20 = t9 * t6;
    t21 = LegP1[54] * t8;
    t22 = t14 * t4;
    t23 = t7 * t10;
    t24 = 0.70031533765850723491e-7;
    t25 = -0.32322246353469564689e-7;
    t26 = -0.12569762470793719601e-7;
    t27 = -0.89784017648526568576e-9;
    t28 = 0.23942404706273751622e-9;
    t29 = -0.20949604117989532666e-9;
    t30 = 0.42398008334026435165e-10;
    t31 = 0.49880009804736982548e-11;
    t32 = 0.12470002451184245636e-11;
    t33 = 0.44346121996960242748e-4 * cosP1_2 * t12;
    t34 = cosP1_4 * t11;
    t35 = -0.50279049883174878357e-7 * t34;
    t36 = -0.22806577027008124844e-2 * t3;
    t37 = -0.95027404279200520176e-4 * sinP1_2 * t12;
    t38 = 0.17094876960279458657e-5 * sinP1_4 * t11;
    t39 = t1 * (-0.22876967696844569673e-5 * cosP1_3 * cosP2_2 + 0.17597667459111207438e-6 * sinP1_3 * sinP2_2) + t13 * (-0.20131731573223221313e-3 * cosP1_1 * cosP2_2 + 0.15485947364017862544e-4 * sinP1_1 * sinP2_2);
    t3 = 0.15385389264251512790e-3 * t3;
    t40 = cosP1_3 * t1;
    t41 = -0.39217658908876405154e-4 * t40 - 0.50279049883174878402e-6 * cosP1_5 * t5;
    t42 = 0.45251144894857390558e-5 * t13;
    t43 = t42 * sinP1_1 * t8 * sinP2_4;
    t39 = t10 * t39 + t2 * t41 + t4 * (t12 * (-0.44245563897193892996e-5 * sinP1_2 * sinP2_3 - 0.10055809976634975682e-5 * cosP1_2 * cosP2_3) + t3 * cosP2_3) + t6 * ((t36 + t33 + t35) * cosP2_1 + (t37 - t38) * sinP2_1) - t24 * t15 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t25 * t16 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t27 * t17 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t30 * t18 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t28 * t19 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t26 * (t20 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) * t10 * t5) + t32 * t21 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t31 * t22 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t29 * t23 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t43;
    t41 = sinP1_3 * t1;
    t40 = (-0.22876967696844569673e-5 * t41 + 0.20131731573223221313e-3 * t13 * sinP1_1) * cosP2_2 + (0.15485947364017862544e-4 * cosP1_1 * t13 - 0.17597667459111207438e-6 * t40) * sinP2_2;
    t41 = -0.50279049883174878402e-6 * sinP1_5 * t5 + 0.39217658908876405154e-4 * t41;
    t42 = t42 * cosP1_1 * t8 * sinP2_4;
    t34 = -0.40223239906539902726e-5 * t34 * t2;
    t1 = 0.34189753920558917312e-5 * t13 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.71827214118821254868e-8 * t11 * t8 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.19393347812081738814e-6 * t1 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.50681282282240277431e-4 * t13 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.19952003921894793018e-10 * t14 * t8 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.69832013726631775566e-10 * t7 * t4 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.25139524941587439200e-8 * t9 * t10 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.12569762470793719601e-6 * t5 * t6 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.49776259384343129618e-5 * t1 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + t12 * t10 * (-0.91507870787378278700e-5 * cosP1_2 * cosP2_2 + 0.7039066983644482976e-6 * sinP1_2 * sinP2_2) + t34;
    bf[0] = t39;
    bf[1] = t10 * t40 + t2 * t41 + t24 * t15 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t25 * t16 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t26 * ((cosP1_5 * sinP2_2 - sinP1_5 * cosP2_2) * t10 * t5 + t20 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1)) + t27 * t17 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t28 * t19 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t29 * t23 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - t30 * t18 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t31 * t22 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3) + t32 * t21 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t4 * (t12 * (-0.10055809976634975682e-5 * cosP1_2 * sinP2_3 + 0.44245563897193892996e-5 * sinP1_2 * cosP2_3) - t3 * sinP2_3) + t6 * ((t37 + t38) * cosP2_1 + (t36 - t33 + t35) * sinP2_1) - t42;
    bf[2] = t1;
}

static void idsbf_6_4_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t5, t6, t7, t8, t9;
    t1 = LegP1[46];
    t2 = LegP2[12];
    t3 = LegP2[14];
    t4 = LegP1[53];
    t5 = LegP2[13];
    t6 = LegP1[52];
    t7 = LegP1[51];
    t8 = LegP2[11];
    t9 = LegP1[48];
    t10 = LegP1[47];
    t11 = LegP1[49];
    t12 = LegP1[50];
    t13 = LegP2[10];
    t14 = LegP1[45];
    t15 = LegP1[54] * t3;
    t16 = t4 * t5;
    t17 = t6 * t2;
    t18 = t7 * t8;
    t19 = t9 * t3;
    t20 = t11 * t5;
    t21 = t12 * t3;
    t22 = t6 * t3;
    t23 = t7 * t5;
    t24 = t12 * t2;
    t25 = 0.36993676122361790624e-7;
    t26 = 0.30057361849418954882e-7;
    t27 = -0.46242095152952238278e-8;
    t28 = 0.14973630811432153348e-8;
    t29 = -0.15414031717650746094e-9;
    t30 = 0.70188894428588218820e-10;
    t31 = -0.55050113277324093192e-11;
    t32 = -0.22937547198885038828e-12;
    t33 = 0.16515033983197227957e-9;
    t34 = 0.92484190305904476566e-8;
    t35 = cosP1_1 * t1;
    t36 = cosP2_3 * t5;
    t37 = cosP2_1 * t8;
    t38 = t1 * (-0.10254647021118688362e-3 * sinP1_1 * sinP2_2 - 0.34182156737062294535e-4 * cosP1_1 * cosP2_2) * t2;
    t38 = t13 * (-0.13872628545885671483e-6 * cosP1_5 * t12 + 0.13983609574252756856e-2 * t35) + t14 * (-0.30763941063356065083e-2 * t37 - 0.36623739361138172716e-4 * t36) + t32 * t15 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t31 * t16 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t29 * t17 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t27 * t18 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) - t26 * t19 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t34 * t20 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t33 * t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t30 * t22 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t28 * t23 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t25 * t24 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + (0.25248183953511922100e-4 * t13 + 0.25895573285653253442e-6 * cosP2_2 * t2) * t9 * cosP1_3 + t38;
    t39 = sinP1_1 * t1;
    t40 = 0.13983609574252756856e-2 * t39 - 0.25248183953511922100e-4 * t9 * sinP1_3 - 0.13872628545885671483e-6 * sinP1_5 * t12;
    t41 = -0.77686719856959760309e-6 * sinP1_4 * cosP2_1 * t11 - 0.30763941063356065083e-2 * sinP2_1 * t14;
    t42 = t1 * (-0.10254647021118688362e-3 * cosP1_1 * sinP2_2 + 0.34182156737062294535e-4 * cosP2_2 * sinP1_1) + t9 * (-0.77686719856959760310e-6 * cosP1_3 * sinP2_2 + 0.25895573285653253442e-6 * cosP2_2 * sinP1_3);
    t43 = t10 * (0.2330601595708792807e-5 * cosP1_2 * sinP2_1 + 0.58265039892719820233e-4 * sinP1_2 * cosP2_1) + 0.11653007978543964046e-5 * cosP1_4 * sinP2_1 * t11;
    t15 = t2 * t42 + t8 * t43 + t13 * t40 - t25 * t24 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t26 * t19 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t27 * t18 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - t28 * t23 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t29 * t17 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - t30 * t22 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t31 * t16 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t32 * t15 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t33 * t21 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t34 * t20 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t5 * (t10 * (-0.11098102836708537187e-5 * cosP1_2 * sinP2_3 + 0.17756964538733659499e-5 * sinP1_2 * cosP2_3) + 0.36623739361138172716e-4 * sinP2_3 * t14) + t8 * t41 - 0.83235771275314028904e-6 * t39 * t3 * cosP2_4;
    t16 = (0.62149375885567808256e-5 * cosP1_2 * cosP2_2 + 0.18644812765670342474e-4 * sinP1_2 * sinP2_2) * t10 * t2;
    t1 = t14 * (0.13983609574252756856e-1 * t13 - 0.83235771275314028892e-5 * t3 * cosP2_4) - 0.82575169915986139784e-11 * t4 * t3 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.18717038514290191685e-9 * t6 * t5 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.49324901496482387494e-8 * t7 * t2 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.50496367907023844200e-5 * t9 * t8 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.73247478722276345430e-5 * t1 * t5 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.46242095152952238283e-8 * t11 * t3 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.24045889479535163905e-6 * t9 * t5 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.61527882126712130169e-3 * t1 * t8 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.13872628545885671483e-6 * t12 * t8 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + t16 - 0.38843359928479880155e-5 * t11 * cosP1_4 * t13;
    bf[0] = t10 * ((-0.11098102836708537187e-5 * t36 - 0.2330601595708792807e-5 * t37) * cosP1_2 + (0.58265039892719820233e-4 * sinP2_1 * t8 - 0.17756964538733659499e-5 * sinP2_3 * t5) * sinP1_2) + t38 + 0.77686719856959760310e-6 * t9 * sinP1_3 * t2 * sinP2_2 - 0.83235771275314028904e-6 * t35 * t3 * cosP2_4 + t8 * (0.11653007978543964046e-5 * cosP1_4 * cosP2_1 + 0.77686719856959760309e-6 * sinP1_4 * sinP2_1) * t11;
    bf[1] = t15;
    bf[2] = t1;
}

static void idsbf_6_4_10_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t6, t7, t8, t9;
    t1 = LegP1[62];
    t2 = LegP2[10];
    t3 = LegP1[60];
    t4 = LegP1[56];
    t5 = LegP1[55];
    t6 = LegP2[11];
    t7 = LegP1[58];
    t8 = LegP2[13];
    t9 = LegP1[64];
    t10 = LegP2[14];
    t11 = LegP1[63];
    t12 = LegP2[12];
    t13 = LegP1[61];
    t14 = LegP1[59];
    t15 = LegP1[57];
    t16 = LegP1[65];
    t17 = t9 * t10;
    t18 = t11 * t8;
    t19 = t1 * t12;
    t20 = t16 * t8;
    t21 = t9 * t12;
    t22 = t11 * t6;
    t23 = t7 * sinP1_3;
    t24 = t23 * t10;
    t25 = t3 * sinP1_5;
    t26 = t25 * t12;
    t27 = t7 * cosP1_3;
    t28 = t27 * t10;
    t29 = t3 * cosP1_5;
    t30 = t29 * t12;
    t31 = t3 * t10;
    t32 = t1 * t10;
    t33 = t13 * t8;
    t34 = 0.15040068099493053052e-7;
    t35 = 0.23500106405457895392e-10;
    t36 = 0.13055614669698830773e-11;
    t37 = 0.93254390497848791240e-13;
    t38 = 0.35436668389182540672e-11;
    t39 = 0.70500319216373686176e-10;
    t40 = 0.15980072355711368868e-7;
    t41 = t13 * (0.11280051074619789789e-8 * sinP1_6 * cosP2_1 - 0.20680093636802947946e-8 * cosP1_6 * sinP2_1) + t14 * (-0.69372314108911707194e-6 * sinP1_4 * cosP2_1 + 0.60912275802946864854e-6 * cosP1_4 * sinP2_1);
    t42 = t15 * (0.10678448350640067668e-5 * cosP1_2 * sinP2_3 - 0.11656052777107116116e-5 * sinP1_2 * cosP2_3) - 0.33705866901542467105e-7 * sinP1_4 * cosP2_3 * t14;
    t43 = (0.17258478144168278376e-5 * cosP1_1 * sinP2_4 - 0.16243273547452497296e-5 * cosP2_4 * sinP1_1) * t10 * t4;
    t41 = t6 * t41 + t8 * t42 + 0.23313597624462197810e-12 * t17 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t38 * t18 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t39 * t19 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t37 * t20 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t36 * t21 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t35 * t22 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) - t34 * (t26 * cosP2_2 + t24 * cosP2_4) + t40 * (t30 * sinP2_2 + t28 * sinP2_4) - 0.73857477274296242668e-9 * t31 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.92321846592870303332e-11 * t32 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.36928738637148121330e-9 * t33 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + (0.15660470908597141489e-5 * cosP1_3 * sinP2_2 - 0.14739266737503191989e-5 * cosP2_2 * sinP1_3) * t12 * t7 + t43;
    t42 = -0.28141471420961451564e-2;
    t43 = cosP1_4 * t14;
    t44 = 0.32765862645324151289e-7 * t43;
    t45 = cosP1_2 * t15;
    t46 = sinP1_6 * t13;
    t47 = sinP1_4 * t14;
    t48 = sinP1_2 * t15;
    t49 = t7 * (-0.15660470908597141489e-5 * sinP1_3 * sinP2_2 - 0.14739266737503191989e-5 * cosP1_3 * cosP2_2) + 0.15634150789423028647e-3 * cosP1_1 * cosP2_2 * t4;
    t50 = t4 * (-0.17258478144168278376e-5 * sinP1_1 * sinP2_4 - 0.16243273547452497296e-5 * cosP1_1 * cosP2_4) * t10;
    t18 = t12 * t49 + t34 * (t30 * cosP2_2 + t28 * cosP2_4) - t35 * t22 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) - t36 * t21 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - t37 * t20 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t38 * t18 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t39 * t19 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t40 * (t26 * sinP2_2 + t24 * sinP2_4) + t6 * ((0.20680093636802947946e-8 * cosP1_6 * t13 + 0.60912275802946864854e-6 * t43 - 0.11465043912243554341e-3 * t45) * cosP2_1 + (0.11280051074619789789e-8 * t46 - 0.20845534385897371526e-4 * t48 + 0.69372314108911707194e-6 * t47) * sinP2_1) + t8 * ((-t44 + 0.10678448350640067668e-5 * t45) * cosP2_3 + (-0.33705866901542467105e-7 * t47 + 0.11656052777107116116e-5 * t48) * sinP2_3) + t50;
    t17 = t2 * (cosP1_1 * t4 * t42 + 0.26056917982371714410e-4 * t27 - 0.47000212810915790789e-9 * cosP1_7 * t1 + 0.37600170248732632632e-7 * t29) + t5 * (0.51592697605095994534e-2 * cosP2_1 * t6 - 0.12283975620260951080e-3 * cosP2_3 * t8) + 0.92321846592870303332e-11 * t32 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.36928738637148121330e-9 * t33 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.23313597624462197810e-12 * t17 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - 0.73857477274296242668e-9 * t31 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t18;
    t18 = -0.10422767192948685765e-3 * t48 + 0.56400255373098948944e-8 * t46;
    t19 = t15 * (0.63920289422845475466e-7 * cosP1_2 * sinP2_4 - 0.60160272397972212202e-7 * cosP2_4 * sinP1_2) * t10;
    t14 = (-0.12032054479594442441e-6 * cosP2_2 * sinP1_4 + 0.12784057884569095093e-6 * cosP1_4 * sinP2_2) * t14 * t12;
    t3 = t2 * t18 - 0.16785790289612782423e-11 * t9 * t8 * (cosP1_9 * sinP2_3 - sinP1_9 * cosP2_3) + 0.20888983471518129238e-10 * t11 * t12 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.32900148967641053549e-9 * t1 * t6 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.47000212810915790784e-8 * t3 * t6 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.28200127686549474472e-8 * t7 * t8 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.11078621591144436400e-9 * t13 * t10 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.36928738637148121328e-8 * t3 * t8 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.39085376973557571614e-5 * t7 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.93804904736538171886e-4 * t4 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.22334501127747183782e-5 * t4 * t8 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.23313597624462197812e-12 * t16 * t10 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) + t19 + t14;
    bf[0] = t2 * (-0.26056917982371714410e-4 * t23 + 0.47000212810915790789e-9 * sinP1_7 * t1 + 0.37600170248732632632e-7 * t25) + t6 * (t15 * (0.11465043912243554341e-3 * cosP1_2 * sinP2_1 - 0.20845534385897371526e-4 * sinP1_2 * cosP2_1) + 0.51592697605095994534e-2 * t5 * sinP2_1) + t41 + (0.12283975620260951080e-3 * t5 + t44) * t8 * sinP2_3 + (-0.15634150789423028647e-3 * t12 * cosP2_2 + t2 * t42) * t4 * sinP1_1;
    bf[1] = t17;
    bf[2] = t3;
}

static void idsbf_6_4_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t5, t6, t7, t8, t9;
    t1 = LegP1[70];
    t2 = LegP2[13];
    t3 = LegP1[71];
    t4 = LegP2[14];
    t5 = LegP1[73];
    t6 = LegP1[72];
    t7 = LegP2[12];
    t8 = LegP2[11];
    t9 = LegP1[68];
    t10 = LegP1[67];
    t11 = LegP1[74];
    t12 = LegP1[69];
    t13 = LegP2[10];
    t14 = LegP1[66];
    t15 = t1 * t2;
    t16 = t3 * t4;
    t17 = t5 * t4;
    t18 = t6 * t2;
    t19 = t6 * t8;
    t20 = LegP1[75] * t4;
    t21 = t11 * t2;
    t22 = t5 * t7;
    t23 = t12 * t4;
    t24 = 0.88180215553349790644e-8;
    t25 = 0.44090107776674895320e-8;
    t26 = -0.14696702592224965109e-9;
    t27 = 0.10497644708732117934e-9;
    t28 = -0.52488223543660589676e-11;
    t29 = 0.26244111771830294837e-11;
    t30 = -0.21870093143191912364e-12;
    t31 = 0.15746467063098176901e-9;
    t32 = 0.88180215553349790655e-8;
    t33 = cosP2_4 * t4;
    t34 = 0.13332848591666488346e-2 * t13 - 0.79362193998014811586e-6 * t33;
    t35 = cosP1_4 * t1;
    t36 = -0.29332266901666274359e-2 * t14 + 0.37035690532406912074e-6 * t35;
    t37 = sinP1_3 * t12;
    t38 = sinP1_1 * t10;
    t39 = cosP1_3 * t12;
    t40 = cosP1_1 * t10;
    t41 = cosP2_3 * t2;
    t42 = cosP2_1 * t8;
    t43 = sinP2_3 * t2;
    t44 = sinP2_1 * t8;
    t45 = (0.13332848591666488345e-4 * t42 - 0.31744877599205924635e-6 * t41) * cosP1_2 + (0.39998545774999465037e-4 * t44 - 0.95234632797617773903e-6 * t43) * sinP1_2;
    t46 = -0.13227032333002468597e-6 * t3;
    t47 = t46 * cosP1_5 + 0.74071381064813824142e-5 * t39;
    t39 = t13 * t47 + t7 * ((-0.22221414319444147244e-4 * t40 + 0.24690460354937941382e-6 * t39) * cosP2_2 + (0.74071381064813824140e-6 * t37 - 0.66664242958332441732e-4 * t38) * sinP2_2) + t9 * t45 + t32 * t15 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t31 * t16 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t29 * t17 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t27 * t18 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t25 * (-t19 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) * t7 * t3) + t30 * t20 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t28 * t21 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t26 * t22 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - t24 * t23 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t42 * t36 + t40 * t34 - 0.34919365359126517092e-4 * t41 * t14;
    t40 = t10 * (-0.66664242958332441732e-4 * cosP1_1 * sinP2_2 + 0.22221414319444147244e-4 * cosP2_2 * sinP1_1) + t12 * (-0.74071381064813824140e-6 * cosP1_3 * sinP2_2 + 0.24690460354937941382e-6 * cosP2_2 * sinP1_3);
    t41 = t2 * (0.95234632797617773903e-6 * sinP1_2 * cosP2_3 - 0.31744877599205924635e-6 * cosP1_2 * sinP2_3) + t8 * (0.39998545774999465037e-4 * sinP1_2 * cosP2_1 - 0.13332848591666488345e-4 * cosP1_2 * sinP2_1);
    t42 = (-0.44442828638888294492e-5 * cosP1_2 * cosP2_2 - 0.13332848591666488346e-4 * sinP1_2 * sinP2_2) * t9 * t7;
    t1 = t14 * (-0.14666133450833137180e-1 * t13 + 0.87298413397816292732e-5 * t33) + 0.13122055885915147418e-11 * t11 * t4 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.41990578834928471738e-10 * t5 * t2 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.14696702592224965108e-8 * t6 * t7 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.52908129332009874384e-7 * t3 * t8 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.29628552425925529658e-5 * t12 * t8 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.63489755198411849268e-5 * t10 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.22045053888337447662e-8 * t1 * t4 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.14108834488535966504e-6 * t12 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.53331394366665953391e-3 * t10 * t8 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t42 + 0.18517845266203456036e-5 * t35 * t13;
    bf[0] = t39;
    bf[1] = t13 * (t46 * sinP1_5 - 0.74071381064813824142e-5 * t37) + t24 * t23 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t25 * ((-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) * t7 * t3 + t19 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1)) + t26 * t22 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - t27 * t18 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t28 * t21 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - t29 * t17 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t30 * t20 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t31 * t16 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t32 * t15 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t7 * t40 + t9 * t41 + t44 * t36 + t38 * t34 + 0.34919365359126517092e-4 * t43 * t14;
    bf[2] = t1;
}

static void idsbf_6_6_0_1_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2;
    t1 = LegP1[2];
    t2 = 0.11416210091036001256e-1 * LegP2[21] - 0.31711694697322225708e-4 * LegP2[25] * cosP2_4;
    bf[0] = t1 * cosP1_1 * t2;
    bf[1] = t1 * sinP1_1 * t2;
    bf[2] = -cosT1 * t2;
}

static void idsbf_6_6_1_1_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5, t6;
    t1 = LegP2[24];
    t2 = LegP1[2];
    t3 = LegP2[25];
    t4 = LegP2[26];
    t5 = LegP2[22];
    t6 = 0.23971787949005801126e-4 * t2;
    bf[0] = (0.21574609154105221015e-2 * cosP2_1 * t5 + 0.89894204808771754226e-4 * cosP2_3 * t1 - 0.29964734936257251406e-5 * cosP2_5 * t4) * cosT1 + t6 * sinP1_1 * t3 * sinP2_4;
    bf[1] = (0.21574609154105221015e-2 * sinP2_1 * t5 - 0.29964734936257251406e-5 * sinP2_5 * t4 - 0.89894204808771754226e-4 * sinP2_3 * t1) * cosT1 - t6 * cosP1_1 * t3 * sinP2_4;
    bf[2] = -0.29964734936257251410e-5 * t2 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.21574609154105221013e-2 * t2 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.89894204808771754226e-4 * t2 * t1 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
}

static void idsbf_6_6_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[2];
    t2 = LegP2[23];
    t3 = LegP2[24];
    t4 = LegP2[26];
    t5 = LegP2[22];
    t6 = LegP2[21];
    t7 = t1 * LegP2[27];
    t8 = LegP2[25] * cosP2_4;
    t9 = -0.16161776138217715214e-5 * t8;
    t10 = cosP2_2 * t2;
    t8 = (-0.81455351736617284694e-2 * t6 - 0.32323552276435430429e-5 * t8) * cosT1 + 0.84849324725643004896e-4 * t1 * t3 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.36363996310989859238e-5 * t1 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.29091197048791887392e-3 * t1 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = (-0.84849324725643004890e-4 * cosP2_3 * t3 - 0.36363996310989859234e-5 * cosP2_5 * t4 + 0.29091197048791887389e-3 * cosP2_1 * t5) * cosT1 + t1 * ((-0.40727675868308642347e-2 * t6 + t9 + 0.14545598524395943694e-3 * t10) * cosP1_1 - 0.72727992621979718478e-3 * sinP1_1 * t2 * sinP2_2) + 0.40404440345544288042e-6 * t7 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    bf[1] = (-0.36363996310989859234e-5 * sinP2_5 * t4 + 0.29091197048791887390e-3 * sinP2_1 * t5 + 0.84849324725643004890e-4 * sinP2_3 * t3) * cosT1 + t1 * ((-0.40727675868308642346e-2 * t6 + t9 - 0.14545598524395943693e-3 * t10) * sinP1_1 - 0.72727992621979718479e-3 * cosP1_1 * t2 * sinP2_2) - 0.40404440345544288042e-6 * t7 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    bf[2] = t8;
}

static void idsbf_6_6_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[6];
    t2 = LegP2[22];
    t3 = LegP1[7];
    t4 = LegP2[21];
    t5 = LegP2[23];
    t6 = LegP1[8];
    t7 = LegP2[26];
    t8 = LegP1[9];
    t9 = LegP2[27];
    t10 = LegP2[24];
    t11 = t6 * t7;
    t12 = t8 * t9;
    t13 = t6 * t10;
    t14 = t3 * t9;
    t15 = t6 * t2;
    t16 = -0.39588104875722216681e-4;
    t17 = cosP2_4 * LegP2[25];
    t18 = -0.13196034958574072228e-5 * t17;
    t19 = cosP2_2 * t5;
    t20 = t1 * (0.69279183532513879200e-4 * sinP2_3 * t10 - 0.29691078656791662510e-5 * sinP2_5 * t7 + 0.23752862925433330011e-3 * sinP2_1 * t2) + t16 * t15 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) + t3 * ((t18 - 0.33254008095606662019e-2 * t4 - 0.19794052437861108342e-4 * t19) * sinP1_1 - 0.98970262189305541718e-4 * cosP1_1 * sinP2_2 * t5) + 0.49485131094652770858e-6 * t11 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.27491739497029317144e-7 * t12 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.11546530588752313200e-4 * t13 * (cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) - 0.54983478994058634288e-7 * t14 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t5 * (-0.9897026218930554172e-5 * cosP2_2 * sinP1_3 - 0.49485131094652770856e-4 * cosP1_3 * sinP2_2) * t8;
    t6 = t1 * (0.99762024286819986049e-2 * t4 + 0.39588104875722216682e-5 * t17) - 0.46186122355009252806e-4 * t3 * t10 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.19794052437861108344e-5 * t3 * t7 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.54983478994058634290e-7 * t6 * t9 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.15835241950288886676e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t6 * t5 * (-0.98970262189305541720e-4 * sinP1_2 * sinP2_2 + 0.19794052437861108344e-4 * cosP1_2 * cosP2_2);
    bf[0] = t1 * (0.23752862925433330010e-3 * cosP2_1 * t2 - 0.69279183532513879200e-4 * cosP2_3 * t10 - 0.29691078656791662510e-5 * cosP2_5 * t7) + t3 * ((-0.33254008095606662020e-2 * t4 + t18 + 0.19794052437861108340e-4 * t19) * cosP1_1 - 0.98970262189305541720e-4 * sinP1_1 * sinP2_2 * t5) + 0.49485131094652770858e-6 * t11 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.27491739497029317144e-7 * t12 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.11546530588752313200e-4 * t13 * (cosP1_2 * cosP2_3 - sinP1_2 * sinP2_3) + 0.54983478994058634288e-7 * t14 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t16 * t15 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) + t5 * (0.49485131094652770856e-4 * sinP1_3 * sinP2_2 - 0.9897026218930554172e-5 * cosP1_3 * cosP2_2) * t8;
    bf[1] = t20;
    bf[2] = t6;
}

static void idsbf_6_6_3_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[6];
    t2 = LegP2[22];
    t3 = LegP1[7];
    t4 = LegP2[23];
    t5 = LegP2[25];
    t6 = LegP1[8];
    t7 = LegP2[26];
    t8 = LegP1[9];
    t9 = LegP2[27];
    t10 = LegP2[24];
    t11 = t6 * t7;
    t12 = t8 * t9;
    t13 = t3 * t9;
    t14 = -0.34501859245578661864e-6;
    t15 = 0.82804462189388788476e-5 * t3;
    t16 = t1 * (-0.41402231094694394236e-4 * sinP2_3 * t10 - 0.19873070925453309230e-2 * sinP2_1 * t2 - 0.41402231094694394232e-5 * sinP2_5 * t7) + t14 * t11 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t4 * ((-0.22771227102081916829e-4 * sinP1_3 * t8 + 0.22771227102081916829e-3 * t3 * sinP1_1) * cosP2_2 + (0.14490780883143037983e-3 * cosP1_1 * t3 - 0.14490780883143037983e-4 * cosP1_3 * t8) * sinP2_2) + t6 * (t10 * (-0.6900371849115732367e-6 * sinP1_2 * cosP2_3 + 0.75904090340273056099e-5 * cosP1_2 * sinP2_3) + t2 * (-0.8280446218938878850e-4 * cosP1_2 * sinP2_1 - 0.41402231094694394238e-3 * sinP1_2 * cosP2_1)) + 0.28751549371315551550e-7 * t12 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.28751549371315551550e-6 * t13 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t15 * cosP1_1 * t5 * sinP2_4;
    t9 = 0.24841338656816636542e-3 * t8 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.69003718491157323728e-5 * t3 * t10 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.69003718491157323722e-6 * t3 * t7 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.11500619748526220621e-6 * t6 * t9 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.41402231094694394234e-5 * t8 * t10 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.33121784875755515386e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t6 * t4 * (0.57963123532572151936e-4 * sinP1_2 * sinP2_2 - 0.91084908408327667324e-4 * cosP1_2 * cosP2_2);
    bf[0] = t1 * (-0.19873070925453309230e-2 * cosP2_1 * t2 + 0.41402231094694394236e-4 * cosP2_3 * t10 - 0.41402231094694394232e-5 * cosP2_5 * t7) + t4 * (t3 * (0.14490780883143037983e-3 * sinP1_1 * sinP2_2 - 0.22771227102081916829e-3 * cosP1_1 * cosP2_2) + t8 * (0.14490780883143037983e-4 * sinP1_3 * sinP2_2 - 0.22771227102081916829e-4 * cosP1_3 * cosP2_2)) + t6 * (t10 * (0.75904090340273056099e-5 * cosP1_2 * cosP2_3 + 0.6900371849115732367e-6 * sinP1_2 * sinP2_3) + t2 * (-0.41402231094694394238e-3 * sinP1_2 * sinP2_1 + 0.8280446218938878850e-4 * cosP1_2 * cosP2_1)) + t14 * t11 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.28751549371315551550e-7 * t12 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.28751549371315551550e-6 * t13 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - t15 * sinP1_1 * t5 * sinP2_4;
    bf[1] = t16;
    bf[2] = t9;
}

static void idsbf_6_6_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[6];
    t2 = LegP2[22];
    t3 = LegP1[7];
    t4 = LegP2[21];
    t5 = LegP2[23];
    t6 = LegP2[25];
    t7 = LegP1[8];
    t8 = LegP2[26];
    t9 = LegP1[9];
    t10 = LegP2[27];
    t11 = LegP2[24];
    t12 = t7 * t8;
    t13 = t9 * t10;
    t14 = t3 * t10;
    t15 = t9 * t6;
    t16 = 0.41085720665932053678e-6;
    t17 = -0.13695240221977351225e-7;
    t18 = 0.54780960887909404890e-7;
    t19 = sinP2_3 * t11;
    t20 = sinP2_1 * t2;
    t21 = cosP2_3 * t11;
    t22 = cosP2_1 * t2;
    t6 = cosP2_4 * t6;
    t23 = 0.70119629936524038282e-5 * t6;
    t24 = 0.12884482000836292032e-2 * t9;
    t25 = t1 * (-0.52589722452393028705e-3 * t20 - 0.10956192177581880978e-5 * sinP2_5 * t8 - 0.46016007145843900120e-4 * t19) - t16 * t14 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t17 * t13 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t18 * t12 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t5 * ((-0.49302864799118464414e-5 * sinP1_3 * t9 - 0.14790859439735539325e-3 * t3 * sinP1_1) * cosP2_2 + (-0.3286857653274564298e-5 * t3 * cosP1_1 - 0.1095619217758188098e-6 * t9 * cosP1_3) * sinP2_2) + t7 * (t11 * (-0.69024010718765850177e-5 * sinP1_2 * cosP2_3 + 0.23008003572921950061e-5 * cosP1_2 * sinP2_3) + t2 * (0.43386521023224248681e-3 * cosP1_2 * sinP2_1 + 0.48645493268463551551e-3 * sinP1_2 * cosP2_1)) + 0.51128896828715444575e-6 * t15 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + (t23 + 0.22087683430005072054e-2 * t4) * t3 * sinP1_1 - t24 * sinP1_3 * t4;
    t2 = t1 * (0.88350733720020288208e-2 * t4 + 0.28047851974609615310e-4 * t6) + 0.15338669048614633374e-3 * t9 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.23008003572921950062e-4 * t3 * t11 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.54780960887909404894e-6 * t3 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.16434288266372821472e-6 * t7 * t10 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.15338669048614633372e-5 * t9 * t11 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.26294861226196514353e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t7 * t5 * (0.1314743061309825719e-5 * sinP1_2 * sinP2_2 - 0.59163437758942157301e-4 * cosP1_2 * cosP2_2);
    bf[0] = t1 * (-0.52589722452393028704e-3 * t22 - 0.10956192177581880978e-5 * cosP2_5 * t8 + 0.46016007145843900120e-4 * t21) + t5 * (t3 * (0.14790859439735539326e-3 * cosP1_1 * cosP2_2 - 0.3286857653274564297e-5 * sinP1_1 * sinP2_2) + t9 * (0.1095619217758188098e-6 * sinP1_3 * sinP2_2 - 0.49302864799118464414e-5 * cosP1_3 * cosP2_2)) + t7 * ((0.23008003572921950062e-5 * t21 - 0.43386521023224248681e-3 * t22) * cosP1_2 + (0.48645493268463551551e-3 * t20 + 0.69024010718765850178e-5 * t19) * sinP1_2) + t18 * t12 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t17 * t13 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t16 * t14 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - 0.51128896828715444576e-6 * t15 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + (0.22087683430005072055e-2 * t4 + t23) * t3 * cosP1_1 + t24 * cosP1_3 * t4;
    bf[1] = t25;
    bf[2] = t2;
}

static void idsbf_6_6_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[19];
    t2 = LegP2[24];
    t3 = LegP1[20];
    t4 = LegP2[25];
    t5 = LegP1[17];
    t6 = LegP2[22];
    t7 = LegP1[16];
    t8 = LegP2[23];
    t9 = LegP2[26];
    t10 = LegP1[18];
    t11 = LegP2[27];
    t12 = LegP2[21];
    t13 = LegP1[15];
    t14 = t1 * t2;
    t15 = t3 * t4;
    t16 = t5 * t9;
    t17 = t10 * t11;
    t18 = t1 * t6;
    t19 = t7 * t11;
    t20 = t10 * t4;
    t21 = cosP2_4 * t4;
    t22 = t2 * (-0.14699274290174719990e-5 * cosP1_2 * cosP2_3 + 0.26458693722314495982e-5 * sinP1_2 * sinP2_3) + t6 * (0.82315936024978431948e-4 * sinP1_2 * sinP2_1 - 0.35278258296419327976e-4 * cosP1_2 * cosP2_1);
    t23 = cosP2_3 * t2;
    t24 = cosP2_1 * t6;
    t25 = -0.47037677728559103970e-3 * t24 - 0.97995161934498133252e-6 * cosP2_5 * t9 + 0.41157968012489215972e-4 * t23;
    t3 = -0.20578984006244607986e-4 * t3;
    t26 = 0.41157968012489215976e-4 * t10;
    t27 = (0.19755824645994823664e-2 * t12 + 0.62716903638078805294e-5 * t21) * t7;
    t28 = sinP2_3 * t2;
    t29 = sinP2_1 * t6;
    t30 = t10 * (-0.979951619344981332e-7 * cosP1_3 * sinP2_2 - 0.44097822870524159976e-5 * cosP2_2 * sinP1_3) + t7 * (-0.52917387444628991971e-4 * cosP2_2 * sinP1_1 - 0.1175941943213977601e-5 * cosP1_1 * sinP2_2);
    t31 = -t26 * sinP1_3 + t3 * sinP1_5;
    t23 = t12 * t31 + t13 * (-0.97995161934498133252e-6 * sinP2_5 * t9 - 0.41157968012489215972e-4 * t28 - 0.47037677728559103970e-3 * t29) + t5 * ((-0.14699274290174719990e-5 * t28 + 0.35278258296419327976e-4 * t29) * cosP1_2 + (-0.26458693722314495982e-5 * t23 + 0.82315936024978431948e-4 * t24) * sinP1_2) + t8 * t30 + 0.48997580967249066626e-7 * t16 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.12249395241812266659e-7 * t17 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.97995161934498133268e-5 * t18 * (cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + 0.16332526989083022212e-7 * t20 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.97995161934498133265e-7 * t14 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.81662634945415111052e-8 * t15 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.14699274290174719991e-6 * t19 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t27 * sinP1_1;
    t1 = t13 * (-0.98779123229974118318e-2 * t12 - 0.31358451819039402648e-4 * t21) - 0.39198064773799253310e-4 * t10 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.16463187204995686393e-4 * t7 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.39198064773799253308e-6 * t7 * t9 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.73496371450873599952e-7 * t5 * t11 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.39198064773799253310e-6 * t10 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.18815071091423641591e-3 * t7 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.16332526989083022212e-7 * t1 * t4 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.41157968012489215976e-4 * t1 * cosP1_4 * t12 + (-0.587970971606988800e-6 * sinP1_2 * sinP2_2 + 0.26458693722314495986e-4 * cosP1_2 * cosP2_2) * t8 * t5;
    bf[0] = t12 * (t26 * cosP1_3 + t3 * cosP1_5) + t13 * t25 + t5 * t22 + t8 * (t10 * (0.979951619344981332e-7 * sinP1_3 * sinP2_2 - 0.44097822870524159976e-5 * cosP1_3 * cosP2_2) + t7 * (0.52917387444628991971e-4 * cosP1_1 * cosP2_2 - 0.1175941943213977601e-5 * sinP1_1 * sinP2_2)) - 0.97995161934498133265e-7 * t14 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.81662634945415111052e-8 * t15 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.48997580967249066626e-7 * t16 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.12249395241812266659e-7 * t17 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.97995161934498133268e-5 * t18 * (cosP1_4 * cosP2_1 - sinP1_4 * sinP2_1) + 0.14699274290174719991e-6 * t19 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - 0.16332526989083022212e-7 * t20 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t27 * cosP1_1;
    bf[1] = t23;
    bf[2] = t1;
}

static void idsbf_6_6_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t5, t6, t7, t8, t9;
    t1 = LegP1[19];
    t2 = LegP2[24];
    t3 = LegP1[20];
    t4 = LegP2[25];
    t5 = LegP1[16];
    t6 = LegP2[26];
    t7 = LegP1[17];
    t8 = LegP2[22];
    t9 = LegP2[23];
    t10 = LegP1[18];
    t11 = LegP2[27];
    t12 = LegP2[21];
    t13 = LegP1[15];
    t14 = t1 * t2;
    t15 = t3 * t4;
    t16 = t1 * t6;
    t17 = t7 * t6;
    t18 = t10 * t11;
    t19 = t5 * t11;
    t20 = t10 * t4;
    t21 = 0.30960084517614886886e-6;
    t22 = -0.66343038252031900476e-7;
    t23 = -0.33171519126015950237e-7;
    t24 = -0.36857243473351055817e-8;
    t25 = 0.18428621736675527907e-8;
    t26 = 0.11057173042005316745e-7;
    t27 = 0.66343038252031900470e-7;
    t28 = 0.11145630426341359278e-3 * cosP1_2 * t7;
    t29 = cosP1_4 * t1;
    t30 = -0.26537215300812760187e-5 * t29;
    t31 = 0.19106795016585187335e-2 * t13;
    t32 = 0.15922329180487656112e-4 * sinP1_2 * t7;
    t33 = 0.66343038252031900470e-5 * sinP1_4 * t1;
    t34 = cosP1_3 * t10;
    t35 = 0.19902911475609570140e-5 * cosP2_5 * t6 - 0.11543688655853550681e-3 * cosP2_3 * t2;
    t36 = t2 * (-0.46440126776422330328e-5 * cosP1_2 * cosP2_3 + 0.30517797595934674216e-5 * sinP1_2 * sinP2_3) * t7;
    t37 = 0.47766987541462968342e-5 * t5;
    t38 = sinP1_3 * t10;
    t39 = t2 * (-0.30517797595934674216e-5 * sinP1_2 * cosP2_3 - 0.46440126776422330328e-5 * cosP1_2 * sinP2_3) * t7;
    t40 = t37 * cosP1_1 * t4 * sinP2_4;
    t38 = t12 * (-0.92880253552844660648e-5 * sinP1_5 * t3 + 0.16718445639512038919e-3 * t38) + t13 * (0.11543688655853550681e-3 * sinP2_3 * t2 + 0.19902911475609570140e-5 * sinP2_5 * t6) - t21 * t19 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t22 * t20 * (cosP1_3 * sinP2_4 - sinP1_3 * cosP2_4) + t23 * t14 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t24 * t15 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t25 * t16 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t26 * t18 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t27 * t17 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t8 * ((t33 + t32) * cosP2_1 + (t31 - t28 + t30) * sinP2_1) + t9 * ((-0.11145630426341359280e-3 * t5 * sinP1_1 + 0.39805822951219140284e-5 * t38) * cosP2_2 + (-0.22291260852682718560e-4 * cosP1_1 * t5 + 0.7961164590243828056e-6 * t34) * sinP2_2) + t39 + t40;
    t29 = -0.74304202842275728522e-4 * t29 * t12;
    t1 = -0.46440126776422330336e-5 * t3 * t8 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.18428621736675527909e-8 * t3 * t6 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.11941746885365742085e-4 * t10 * t8 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.76957924372357004554e-5 * t5 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.13268607650406380095e-6 * t5 * t6 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.44228692168021266980e-7 * t7 * t11 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.29485794778680844654e-7 * t1 * t4 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.19902911475609570143e-6 * t10 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.12737863344390124889e-3 * t5 * t8 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t7 * t9 * (-0.31844658360975312233e-5 * sinP1_2 * sinP2_2 + 0.15922329180487656113e-4 * cosP1_2 * cosP2_2) + t29;
    bf[0] = t12 * (-0.16718445639512038919e-3 * t34 - 0.92880253552844660648e-5 * cosP1_5 * t3) + t13 * t35 + t8 * ((t31 + t28 + t30) * cosP2_1 + (-t33 + t32) * sinP2_1) + t9 * (t10 * (-0.7961164590243828056e-6 * sinP1_3 * sinP2_2 + 0.39805822951219140284e-5 * cosP1_3 * cosP2_2) + t5 * (-0.22291260852682718560e-4 * sinP1_1 * sinP2_2 + 0.11145630426341359280e-3 * cosP1_1 * cosP2_2)) + t23 * t14 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t24 * t15 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t25 * t16 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t27 * t17 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t26 * t18 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t21 * t19 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t22 * t20 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t36 - t37 * sinP1_1 * t4 * sinP2_4;
    bf[1] = t38;
    bf[2] = t1;
}

static void idsbf_6_6_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t5, t6, t7, t8, t9;
    t1 = LegP1[20];
    t2 = LegP2[21];
    t3 = LegP1[15];
    t4 = LegP2[26];
    t5 = LegP2[22];
    t6 = LegP1[18];
    t7 = LegP2[24];
    t8 = LegP1[16];
    t9 = LegP1[19];
    t10 = LegP2[25];
    t11 = LegP2[23];
    t12 = LegP2[27];
    t13 = LegP1[17];
    t14 = t9 * t7;
    t15 = t1 * t10;
    t16 = t9 * t4;
    t17 = t1 * t11;
    t18 = t1 * t12;
    t19 = t13 * t4;
    t20 = t6 * t12;
    t21 = t8 * t12;
    t22 = t6 * t10;
    t23 = 0.59728129825887226560e-6;
    t24 = 0.25339206592800641572e-6;
    t25 = -0.81447449762573490764e-7;
    t26 = 0.15513799954775903004e-7;
    t27 = 0.59254097049491296196e-8;
    t28 = -0.45248583201429717092e-8;
    t29 = 0.23701638819796518476e-9;
    t30 = 0.17237555505306558893e-9;
    t31 = 0.27795558252306826211e-7;
    t32 = sinP1_3 * t6;
    t33 = cosP1_3 * t6;
    t34 = cosP1_1 * t8;
    t35 = t13 * (-0.11635349966081927253e-3 * sinP1_2 * sinP2_1 + 0.79120379769357105315e-4 * cosP1_2 * cosP2_1) + t9 * (0.10316676969925975497e-4 * sinP1_4 * sinP2_1 + 0.76017619778401924712e-5 * cosP1_4 * cosP2_1);
    t36 = -0.15637910354414110230e-2 * t34 - 0.43438639873372528406e-6 * cosP1_5 * t1 + 0.39094775886035275567e-4 * t33;
    t37 = 0.78189551772070551150e-3 * cosP2_1 * t5 + 0.34207928900280866122e-5 * cosP2_5 * t4 + 0.57013214833801443540e-4 * cosP2_3 * t7;
    t38 = t7 * (-0.64382269812319997431e-6 * sinP1_2 * sinP2_3 - 0.33587376902089830003e-5 * cosP1_2 * cosP2_3) * t13;
    t39 = (0.76017619778401924712e-5 * cosP1_4 * sinP2_1 - 0.10316676969925975497e-4 * sinP1_4 * cosP2_1) * t9 * t5;
    t40 = -0.43438639873372528406e-6 * t1 * sinP1_5 * t2;
    t39 = -t23 * t17 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - t24 * t21 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t25 * t19 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t26 * t22 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t27 * t16 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t28 * t20 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t29 * t18 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t3 * (0.34207928900280866122e-5 * sinP2_5 * t4 - 0.57013214833801443540e-4 * sinP2_3 * t7) + t30 * t15 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t31 * t14 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t7 * (0.64382269812319997431e-6 * sinP1_2 * cosP2_3 - 0.33587376902089830003e-5 * cosP1_2 * sinP2_3) * t13 + t39 + (0.24666941928093685777e-5 * cosP2_2 * sinP1_3 + 0.14427833957941589795e-5 * cosP1_3 * sinP2_2) * t11 * t6 + t40;
    t40 = t10 * cosP2_4;
    t39 = t5 * (t13 * (-0.79120379769357105315e-4 * cosP1_2 * sinP2_1 - 0.11635349966081927253e-3 * sinP1_2 * cosP2_1) + 0.78189551772070551150e-3 * sinP2_1 * t3) + t8 * ((-0.15637910354414110230e-2 * t2 - 0.86877279746745056824e-6 * t40 + 0.13813487479732464035e-3 * cosP2_2 * t11) * sinP1_1 + 0.80795870164472902854e-4 * cosP1_1 * sinP2_2 * t11) + t39 - 0.39094775886035275567e-4 * t32 * t2;
    t41 = (0.39467107084949897243e-4 * cosP1_2 * cosP2_2 - 0.23084534332706543673e-4 * sinP1_2 * sinP2_2) * t13 * t11;
    t1 = t3 * (-0.93827462126484661370e-2 * t2 - 0.52126367848047034093e-5 * t40) - 0.17918438947766167968e-5 * t1 * t5 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.11850819409898259238e-8 * t1 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.24434234928772047235e-4 * t6 * t5 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.19004404944600481182e-4 * t8 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.11402642966760288708e-5 * t8 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.72397733122287547344e-7 * t13 * t12 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.34475111010613117786e-8 * t9 * t10 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.50032004854152287181e-6 * t6 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.26063183924023517052e-3 * t8 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t41 - 0.86877279746745056817e-5 * t9 * cosP1_4 * t2;
    bf[0] = t2 * t36 + t3 * t37 + t11 * ((-0.13813487479732464035e-3 * t34 + 0.24666941928093685777e-5 * t33) * cosP2_2 + (-0.14427833957941589795e-5 * t32 + 0.80795870164472902854e-4 * sinP1_1 * t8) * sinP2_2) + t5 * t35 + t31 * t14 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t30 * t15 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t27 * t16 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t23 * t17 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - t29 * t18 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t25 * t19 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t28 * t20 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t24 * t21 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - t26 * t22 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.86877279746745056824e-6 * t34 * t10 * cosP2_4 + t38;
    bf[1] = t39;
    bf[2] = t1;
}

static void idsbf_6_6_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t6, t7, t8, t9;
    t1 = LegP1[33];
    t2 = LegP2[25];
    t3 = LegP1[34];
    t4 = LegP2[26];
    t5 = LegP1[35];
    t6 = LegP2[27];
    t7 = LegP2[23];
    t8 = LegP1[32];
    t9 = LegP2[22];
    t10 = LegP1[30];
    t11 = LegP1[29];
    t12 = LegP1[31];
    t13 = LegP2[24];
    t14 = LegP1[28];
    t15 = LegP2[21];
    t16 = t1 * t2;
    t17 = t3 * t4;
    t18 = t5 * t6;
    t19 = t1 * t7;
    t20 = t10 * t4;
    t21 = t12 * t6;
    t22 = t3 * t9;
    t23 = t11 * t6;
    t24 = t1 * t6;
    t25 = t8 * t4;
    t26 = t12 * t2;
    t27 = t8 * t13;
    t28 = -0.49871485492993162744e-10;
    t29 = 0.16623828497664387584e-11;
    t30 = 0.15958875357757812079e-9;
    t31 = cosP1_4 * t8;
    t32 = sinP1_3 * t12;
    t33 = sinP1_1 * t11;
    t34 = cosP1_3 * t12;
    t35 = t11 * cosP1_1;
    t36 = cosP2_4 * t2;
    t37 = -0.80432731803099372882e-6 * t36;
    t38 = t13 * (-0.17714351647111171409e-5 * cosP1_2 * cosP2_3 + 0.74208770413573826189e-6 * sinP1_2 * sinP2_3) * t10;
    t38 = t14 * (0.52783980245783963456e-4 * cosP2_3 * t13 + 0.31670388147470378070e-5 * cosP2_5 * t4) + t15 * (-0.40216365901549686437e-6 * cosP1_5 * t1 + 0.48259639081859623730e-5 * t34) + t7 * ((-0.68511451910854287262e-4 * t35 + 0.22837150636951429087e-5 * t34) * cosP2_2 + (0.40072736023329866138e-4 * t33 - 0.13357578674443288713e-5 * t32) * sinP2_2) + t9 * ((0.72389458622789435605e-3 * t14 - 0.80432731803099372886e-6 * t31 + 0.7899643302090116978e-5 * cosP1_2 * t10) * cosP2_1 + (-0.42370814074846991076e-4 * sinP1_2 * t10 + 0.17091955508158616736e-5 * sinP1_4 * t8) * sinP2_1) + t30 * t16 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t28 * t17 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t29 * t18 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + (-0.14477891724557887121e-2 * t15 + t37) * t11 * cosP1_1 + t38;
    t39 = 0.12567614344234277012e-6;
    t40 = -0.75405686065405662070e-7;
    t41 = -0.75405686065405662068e-7;
    t42 = 0.83784095628228513410e-8;
    t43 = -0.41892047814114256706e-8;
    t44 = 0.19150650429309374496e-8;
    t45 = 0.29922891295795897647e-9;
    t46 = 0.33247656995328775165e-11;
    t47 = 0.25733686514384471971e-7;
    t48 = 0.31670388147470378070e-5 * sinP2_5 * t4 + 0.72389458622789435605e-3 * sinP2_1 * t9 - 0.52783980245783963456e-4 * sinP2_3 * t13;
    t49 = -0.40216365901549686437e-6 * sinP1_5 * t1 - 0.48259639081859623730e-5 * t32 - 0.14477891724557887121e-2 * t33;
    t50 = t9 * (-0.80432731803099372886e-6 * cosP1_4 * sinP2_1 - 0.17091955508158616736e-5 * sinP1_4 * cosP2_1) * t8;
    t16 = t14 * t48 + t15 * t49 + t28 * t17 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t29 * t18 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t30 * t16 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t39 * t23 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t40 * t22 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t41 * t20 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - t42 * t19 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t43 * ((-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) * t7 * t5 + t21 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6)) + t44 * t26 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t45 * t25 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t46 * t24 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t47 * t27 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t50;
    t16 = t10 * (t13 * (-0.17714351647111171409e-5 * cosP1_2 * sinP2_3 - 0.74208770413573826189e-6 * sinP1_2 * cosP2_3) + t9 * (-0.42370814074846991076e-4 * sinP1_2 * cosP2_1 - 0.7899643302090116978e-5 * cosP1_2 * sinP2_1)) + t7 * ((0.22837150636951429087e-5 * t32 + 0.68511451910854287262e-4 * t33) * cosP2_2 + (0.40072736023329866138e-4 * t35 + 0.13357578674443288713e-5 * t34) * sinP2_2) + t16 + t37 * t33;
    t17 = 0.10134524207190520984e-1 * t14 + 0.24129819540929811860e-5 * t31;
    t14 = 0.56302912262169561017e-5 * t36 * t14;
    t18 = (-0.22837150636951429088e-4 * cosP1_2 * cosP2_2 + 0.13357578674443288713e-4 * sinP1_2 * sinP2_2) * t10 * t7;
    t1 = t15 * t17 + 0.83784095628228513402e-8 * t3 * t7 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.30162274426162264826e-6 * t1 * t9 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.10054091475387421611e-4 * t12 * t9 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.15081137213081132417e-4 * t11 * t13 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.90486823278486794478e-6 * t11 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.41892047814114256706e-7 * t10 * t6 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.33247656995328775163e-11 * t3 * t6 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.19948594197197265096e-9 * t1 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.95753252146546872461e-9 * t8 * t2 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.20586949211507577580e-6 * t12 * t13 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.20682702463654124458e-3 * t11 * t9 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t14 + t18;
    bf[0] = t42 * t19 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t41 * t20 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t43 * (t21 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) * t7 * t5) + t40 * t22 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t39 * t23 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - t46 * t24 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t45 * t25 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - t44 * t26 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t47 * t27 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t38;
    bf[1] = t16;
    bf[2] = t1;
}

static void idsbf_6_6_7_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t5, t6, t7, t8, t9;
    t1 = LegP1[31];
    t2 = LegP2[25];
    t3 = LegP1[32];
    t4 = LegP2[24];
    t5 = LegP1[33];
    t6 = LegP1[34];
    t7 = LegP2[26];
    t8 = LegP1[35];
    t9 = LegP2[27];
    t10 = LegP1[29];
    t11 = LegP1[28];
    t12 = LegP2[22];
    t13 = LegP2[21];
    t14 = LegP2[23];
    t15 = LegP1[30];
    t16 = t10 * t9;
    t17 = t5 * t9;
    t18 = t3 * t7;
    t19 = t1 * t2;
    t20 = t3 * t4;
    t21 = t5 * t2;
    t22 = t6 * t7;
    t23 = t8 * t9;
    t24 = t6 * t4;
    t25 = t5 * t14;
    t26 = t15 * t7;
    t27 = t1 * t9;
    t28 = t27 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t29 = t8 * t14;
    t30 = t29 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t31 = t6 * t12;
    t32 = 0.16966279364716273966e-6;
    t33 = 0.22382322689255331438e-7;
    t34 = -0.35907469554955077172e-8;
    t35 = 0.10473011953528564176e-8;
    t36 = 0.71814939109910154359e-9;
    t37 = 0.32416465570445555784e-10;
    t38 = -0.12467871373248290686e-11;
    t39 = 0.19948594197197265101e-10;
    t40 = 0.50868915202853025998e-9;
    t41 = 0.21113592098313585383e-4 * cosP2_3 * t4 + 0.56302912262169561012e-5 * cosP2_5 * t7 - 0.18097364655697358899e-2 * cosP2_1 * t12;
    t42 = cosP1_3 * t1;
    t43 = t4 * (-0.55656577810180369625e-6 * sinP1_2 * sinP2_3 + 0.19749108255225292453e-6 * cosP1_2 * cosP2_3) * t15;
    t28 = t11 * t41 + t13 * (0.12818966631118962552e-5 * cosP1_5 * t5 + 0.56403453176923435226e-4 * t42) + t32 * t16 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - t37 * t17 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t36 * t18 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t33 * t19 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t34 * t20 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t40 * t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t39 * t22 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t38 * t23 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - t35 * t24 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.27229831079174266858e-7 * t25 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.10054091475387421609e-6 * t26 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.31419035860585692530e-8 * t28 - 0.10473011953528564175e-8 * t30 + t43;
    t30 = 0.41892047814114256710e-8;
    t41 = sinP1_3 * t1;
    t43 = 0.51778571098245221292e-5 * t10;
    t44 = cosP1_4 * t3;
    t45 = 0.56302912262169561012e-5 * sinP2_5 * t7 - 0.21113592098313585383e-4 * sinP2_3 * t4;
    t46 = t43 * cosP1_1 * t2 * sinP2_4;
    t47 = t4 * (0.19749108255225292453e-6 * cosP1_2 * sinP2_3 + 0.55656577810180369625e-6 * sinP1_2 * cosP2_3) * t15;
    t11 = t11 * t45 + t12 * ((0.45602486334792948013e-4 * sinP1_2 * t15 - 0.17091955508158616735e-5 * sinP1_4 * t3) * cosP2_1 + (-0.18097364655697358899e-2 * t11 - 0.14075728065542390252e-5 * t44 + 0.11023593153371208693e-3 * cosP1_2 * t15) * sinP2_1) + t13 * (-0.56403453176923435226e-4 * t41 + 0.12818966631118962552e-5 * sinP1_5 * t5) + t14 * (t1 * (0.19749108255225292440e-6 * cosP2_2 * sinP1_3 + 0.18133272125252313976e-5 * cosP1_3 * sinP2_2) + t10 * (-0.10664518457821657921e-4 * cosP2_2 * sinP1_1 - 0.97919669476362495467e-4 * cosP1_1 * sinP2_2)) + 0.10054091475387421609e-6 * t26 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.31419035860585692530e-8 * t27 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.10473011953528564175e-8 * t29 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.27229831079174266858e-7 * t25 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - t46 + t47;
    t11 = t30 * t31 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - t32 * t16 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - t33 * t19 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t34 * t20 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t35 * t24 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - t36 * t18 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t37 * t17 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t38 * t23 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t39 * t22 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t40 * t21 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t11;
    t16 = t15 * t9 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t17 = t15 * t14 * (-0.72533088501009255896e-5 * sinP1_2 * sinP2_2 + 0.7899643302090116976e-6 * cosP1_2 * cosP2_2);
    t13 = 0.10255173304895170040e-4 * t44 * t13;
    t1 = -0.14961445647897948823e-10 * t6 * t9 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.19948594197197265099e-9 * t5 * t7 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.40695132162282420798e-8 * t3 * t2 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.21544481732973046305e-7 * t1 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.64633445198919138933e-4 * t10 * t12 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.12567614344234277012e-7 * t6 * t14 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.41892047814114256712e-7 * t5 * t12 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.93503050721103020960e-5 * t1 * t12 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.10473011953528564177e-8 * t8 * t4 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.75405686065405662089e-6 * t10 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.20108182950774843222e-6 * t10 * t7 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.12567614344234277009e-7 * t16 + t17 + t13;
    bf[0] = t12 * (t15 * (-0.11023593153371208693e-3 * cosP1_2 * cosP2_1 + 0.45602486334792948013e-4 * sinP1_2 * sinP2_1) + t3 * (-0.14075728065542390252e-5 * cosP1_4 * cosP2_1 + 0.17091955508158616735e-5 * sinP1_4 * sinP2_1)) + t14 * ((0.10664518457821657921e-4 * cosP1_1 * t10 + 0.19749108255225292440e-6 * t42) * cosP2_2 + (-0.18133272125252313976e-5 * t41 - 0.97919669476362495467e-4 * t10 * sinP1_1) * sinP2_2) + t30 * t31 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t28 + t43 * sinP1_1 * t2 * sinP2_4;
    bf[1] = t11;
    bf[2] = t1;
}

static void idsbf_6_6_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t6, t7, t8, t9;
    t1 = LegP1[33];
    t2 = LegP2[23];
    t3 = LegP1[32];
    t4 = LegP2[22];
    t5 = LegP1[30];
    t6 = LegP1[29];
    t7 = LegP2[26];
    t8 = LegP1[31];
    t9 = LegP2[27];
    t10 = LegP1[35];
    t11 = LegP1[34];
    t12 = LegP2[24];
    t13 = LegP2[25];
    t14 = LegP2[21];
    t15 = LegP1[28];
    t16 = t1 * t2;
    t17 = t5 * t7;
    t18 = t8 * t9;
    t19 = t11 * t4;
    t20 = t6 * t9;
    t21 = t1 * t9;
    t22 = t8 * t13;
    t23 = t3 * t12;
    t24 = t1 * t13;
    t25 = t10 * t9;
    t26 = t25 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t27 = t11 * t12;
    t28 = t27 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t29 = 0.94257107581757077592e-7;
    t30 = -0.50270457376937108046e-7;
    t31 = 0.27648751557315409425e-7;
    t32 = 0.27229831079174266858e-7;
    t33 = -0.83784095628228513405e-8;
    t34 = 0.10473011953528564177e-8;
    t35 = -0.10473011953528564176e-8;
    t36 = -0.20946023907057128352e-9;
    t37 = 0.75638419664372963494e-10;
    t38 = 0.41559571244160968952e-12;
    t39 = 0.14961445647897948824e-9;
    t40 = 0.12567614344234277011e-7;
    t41 = cosP2_3 * t12;
    t42 = cosP2_1 * t4;
    t43 = cosP1_3 * t8;
    t44 = cosP1_1 * t6;
    t45 = 0.12668155258988151229e-2 * t44 - 0.69674853924434831756e-4 * t43 + 0.52783980245783963448e-6 * cosP1_5 * t1;
    t46 = t4 * (-0.22119001245852327537e-5 * cosP1_4 * cosP2_1 - 0.17091955508158616733e-5 * sinP1_4 * sinP2_1) * t3;
    t26 = t14 * t45 + t15 * (0.36194729311394717792e-5 * cosP2_5 * t7 - 0.10858418793418415336e-2 * t42 - 0.81438140950638115032e-4 * t41) - t32 * t16 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t30 * t17 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t35 * t18 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t39 * t10 * (t13 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t2 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2)) + t40 * t19 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t29 * t20 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - t37 * t21 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t31 * t22 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t33 * t23 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t36 * t24 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t38 * t26 + t34 * t28 + t46;
    t28 = sinP1_3 * t8;
    t45 = sinP1_1 * t6;
    t46 = sinP2_3 * t12;
    t47 = sinP2_1 * t4;
    t48 = 0.81438140950638115032e-4 * t46 + 0.36194729311394717792e-5 * sinP2_5 * t7 - 0.10858418793418415336e-2 * t47;
    t49 = 0.52783980245783963448e-6 * sinP1_5 * t1 + 0.69674853924434831756e-4 * t28 + 0.12668155258988151229e-2 * t45;
    t50 = t4 * (-0.22119001245852327537e-5 * cosP1_4 * sinP2_1 + 0.17091955508158616733e-5 * sinP1_4 * cosP2_1) * t3;
    t16 = t14 * t49 + t15 * t48 - t29 * t20 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t30 * t17 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - t31 * t22 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t32 * t16 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t33 * t23 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t34 * t27 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t35 * t18 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t36 * t24 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t37 * t21 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t38 * t25 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t39 * t10 * (t13 * (cosP1_7 * sinP2_4 - sinP1_7 * cosP2_4) + t2 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2)) + t40 * t19 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t50;
    t17 = 0.10134524207190520983e-1 * t14 - 0.35792565652379220930e-4 * t13 * cosP2_4;
    t18 = (-0.75405686065405662074e-5 * cosP1_2 * cosP2_2 + 0.45243411639243397242e-5 * sinP1_2 * sinP2_2) * t5 * t2;
    t14 = 0.12668155258988151227e-4 * t3 * cosP1_4 * t14;
    t1 = t15 * t17 + 0.27146046983546038344e-3 * t6 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.41892047814114256702e-8 * t11 * t2 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.32675797295009120227e-6 * t1 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.55297503114630818854e-5 * t8 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.14961445647897948826e-9 * t10 * t12 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.90486823278486794484e-6 * t6 * t7 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.20946023907057128354e-7 * t5 * t9 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.11636679948365071306e-10 * t11 * t9 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.50270457376937108046e-8 * t3 * t13 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.18432501038210272950e-6 * t8 * t12 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.20359535237659528760e-4 * t6 * t12 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + t18 + t14;
    bf[0] = t2 * ((-0.37702843032702831036e-6 * t43 + 0.33932558729432547934e-4 * t44) * cosP2_2 + (0.22621705819621698620e-6 * t28 - 0.20359535237659528760e-4 * t45) * sinP2_2) + t5 * (t12 * (-0.20946023907057128354e-6 * sinP1_2 * sinP2_3 + 0.20527103428915985785e-5 * cosP1_2 * cosP2_3) + t4 * (0.42729888770396541839e-4 * cosP1_2 * cosP2_1 - 0.12567614344234277013e-4 * sinP1_2 * sinP2_1)) + t26 - 0.44740707065474026168e-5 * t44 * t13 * cosP2_4;
    bf[1] = t2 * (t6 * (-0.20359535237659528760e-4 * cosP1_1 * sinP2_2 - 0.33932558729432547934e-4 * cosP2_2 * sinP1_1) + t8 * (-0.37702843032702831036e-6 * cosP2_2 * sinP1_3 - 0.22621705819621698620e-6 * cosP1_3 * sinP2_2)) + t5 * ((0.20527103428915985785e-5 * t46 - 0.42729888770396541839e-4 * t47) * cosP1_2 + (0.20946023907057128354e-6 * t41 - 0.12567614344234277013e-4 * t42) * sinP1_2) + t16 - 0.44740707065474026168e-5 * t45 * t13 * cosP2_4;
    bf[2] = t1;
}

static void idsbf_6_6_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t5, t6, t7, t8, t9;
    t1 = LegP1[50];
    t2 = LegP2[21];
    t3 = LegP1[45];
    t4 = LegP2[26];
    t5 = LegP1[48];
    t6 = LegP2[24];
    t7 = LegP2[22];
    t8 = LegP1[46];
    t9 = LegP2[27];
    t10 = LegP2[25];
    t11 = LegP1[53];
    t12 = LegP1[52];
    t13 = LegP2[23];
    t14 = LegP1[51];
    t15 = LegP1[47];
    t16 = LegP1[49];
    t17 = t5 * t9;
    t18 = LegP1[54] * t10;
    t19 = t11 * t6;
    t20 = t12 * t13;
    t21 = t14 * t7;
    t22 = t8 * t9;
    t23 = t5 * t10;
    t24 = t16 * t6;
    t25 = t1 * t10;
    t26 = t12 * t9;
    t27 = t26 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t28 = t12 * t10;
    t29 = t28 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t30 = t14 * t6;
    t31 = t30 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t32 = t1 * t13;
    t33 = t15 * t4;
    t34 = t33 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t35 = 0.47019287439922660698e-11;
    t36 = t6 * (-0.73462934696135165064e-6 * sinP1_2 * sinP2_3 + 0.13981655313135402383e-5 * cosP1_2 * cosP2_3) + 0.24171675287115441408e-4 * cosP1_2 * cosP2_1 * t7;
    t37 = t7 * (0.26870057685088805927e-25 * sinP1_4 * sinP2_1 - 0.47395441739442041980e-6 * cosP1_4 * cosP2_1) * t16;
    t38 = (-0.35546581304581531489e-6 * cosP1_3 * cosP2_2 + 0.21327948782748918893e-6 * sinP1_3 * sinP2_2) * t13 * t5;
    t27 = t36 * t15 + t37 + t38 - 0.58774109299903325872e-12 * t18 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.39182739533268883912e-12 * t27 + 0.59244302174302552480e-8 * t23 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.16926943478372157850e-8 * t32 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.98740503623837587462e-9 * t17 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.19748100724767517495e-9 * t25 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.28211572463953596422e-10 * t31 + 0.55294682029349048978e-7 * t22 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.14105786231976798208e-9 * t20 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - t35 * ((cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) * t9 * t1 + t19 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3)) + 0.11754821859980665175e-11 * t29 - 0.47395441739442041978e-7 * t34 + 0.11848860434860510495e-7 * t21 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) - 0.78992402899070069963e-8 * t24 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t29 = -0.10237415415719481066e-2;
    t31 = cosP2_4 * t10;
    t34 = -0.42181943148103417364e-5 * t31;
    t36 = 0.76780615617896108006e-4 * t6;
    t37 = 0.34124718052398270228e-5 * t4;
    t38 = 0.42655897565497837760e-5 * t15 * sinP1_2;
    t28 = t28 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t30 = t30 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t32 = t32 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t33 = t33 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t17 = t17 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t18 = t18 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t20 = t20 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t39 = t16 * (-0.26870057685088805927e-25 * sinP1_4 * cosP2_1 - 0.47395441739442041980e-6 * cosP1_4 * sinP2_1) + t38 * cosP2_1;
    t40 = (-0.35546581304581531489e-6 * cosP2_2 * sinP1_3 - 0.21327948782748918893e-6 * cosP1_3 * sinP2_2) * t13 * t5;
    t41 = t15 * (0.13981655313135402383e-5 * cosP1_2 * sinP2_3 + 0.73462934696135165064e-6 * sinP1_2 * cosP2_3) * t6;
    t17 = t40 + t39 * t7 - 0.58774109299903325872e-12 * t18 + 0.39182739533268883912e-12 * t26 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.59244302174302552480e-8 * t23 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.16926943478372157850e-8 * t32 - 0.98740503623837587462e-9 * t17 - 0.19748100724767517495e-9 * t25 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.28211572463953596422e-10 * t30 - 0.55294682029349048978e-7 * t22 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + 0.14105786231976798208e-9 * t20 + t35 * ((-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) * t9 * t1 + t19 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3)) - 0.11754821859980665175e-11 * t28 - 0.47395441739442041978e-7 * t33 - 0.11848860434860510495e-7 * t21 * (cosP1_6 * sinP2_1 - sinP1_6 * cosP2_1) - 0.78992402899070069963e-8 * t24 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t41;
    t18 = t5 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t19 = -0.10749286186505455122e-1 * t2 + 0.37963748833293075630e-4 * t31;
    t20 = -0.49765213826414144080e-5 * t16 * cosP1_4 * t2;
    t21 = (0.49765213826414144078e-5 * cosP1_2 * cosP2_2 - 0.29859128295848486446e-5 * sinP1_2 * sinP2_2) * t15 * t13;
    t4 = t3 * t19 - 0.22749812034932180148e-3 * t8 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.11754821859980665173e-11 * t11 * t10 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.18807714975969064280e-10 * t12 * t6 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.84634717391860789250e-9 * t14 * t13 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.94790883478884083957e-7 * t1 * t7 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.28437265043665225186e-5 * t5 * t7 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.17062359026199135113e-4 * t8 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.75832706783107267170e-6 * t8 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.13823670507337262244e-7 * t15 * t9 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.23509643719961330346e-11 * t14 * t9 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.19748100724767517490e-8 * t16 * t10 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.94790883478884083952e-7 * t18 + t20 + t21;
    bf[0] = t2 * (-0.14929564147924243225e-4 * cosP1_3 * t5 + 0.49765213826414144082e-6 * cosP1_5 * t1) + t3 * (t29 * t7 * cosP2_1 - t36 * cosP2_3 + t37 * cosP2_5) + t8 * ((0.11943651318339394580e-2 * t2 + t34 + 0.19906085530565657633e-4 * cosP2_2 * t13) * cosP1_1 - 0.11943651318339394580e-4 * sinP1_1 * sinP2_2 * t13) + t27 + t38 * t7 * sinP2_1;
    bf[1] = t2 * (0.49765213826414144082e-6 * sinP1_5 * t1 + 0.11943651318339394580e-2 * t8 * sinP1_1 + 0.14929564147924243225e-4 * sinP1_3 * t5) + t3 * (t36 * sinP2_3 + t37 * sinP2_5) + t17 + t34 * t8 * sinP1_1 + (-0.24171675287115441408e-4 * cosP1_2 * t15 + t29 * t3) * t7 * sinP2_1 + t8 * (-0.11943651318339394580e-4 * cosP1_1 * sinP2_2 - 0.19906085530565657633e-4 * cosP2_2 * sinP1_1) * t13;
    bf[2] = t4;
}

static void idsbf_6_6_9_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t6, t7, t8, t9;
    t1 = LegP1[50];
    t2 = LegP2[21];
    t3 = LegP1[45];
    t4 = LegP2[26];
    t5 = LegP1[48];
    t6 = LegP2[24];
    t7 = LegP2[22];
    t8 = LegP2[27];
    t9 = LegP1[53];
    t10 = LegP1[52];
    t11 = LegP2[23];
    t12 = LegP1[51];
    t13 = LegP1[47];
    t14 = LegP1[46];
    t15 = LegP2[25];
    t16 = LegP1[49];
    t17 = t13 * t4;
    t18 = t9 * t4;
    t19 = t16 * t4;
    t20 = t12 * t4;
    t21 = t5 * t8;
    t9 = t9 * t6;
    t22 = t10 * t11;
    t23 = t12 * t7;
    t24 = t14 * t8;
    t25 = t1 * t8;
    t26 = t5 * t15;
    t27 = t16 * t6;
    t28 = t1 * t15;
    t29 = t10 * t8;
    t30 = t12 * t6;
    t31 = t1 * t11;
    t32 = 0.29017553783082012791e-9;
    t33 = -0.41453648261545732561e-11;
    t34 = 0.37999177573083588178e-11;
    t35 = 0.18239605235080122328e-9;
    t36 = 0.58035107566164025582e-9;
    t37 = 0.54718815705240366971e-8;
    t38 = 0.50560185711642099083e-4 * cosP1_2 * t13;
    t39 = cosP1_4 * t16;
    t40 = 0.76606341987336513767e-6 * t39;
    t41 = 0.16546969869264686973e-2 * t3;
    t42 = -0.13789141557720572477e-4 * sinP1_2 * t13;
    t43 = 0.42426406871192851464e-25 * sinP1_4 * t16;
    t44 = cosP1_3 * t5;
    t45 = t6 * (0.21449775756454223856e-5 * cosP1_2 * cosP2_3 - 0.10724887878227111928e-5 * sinP1_2 * sinP2_3) * t13;
    t46 = 0.49028058871895368812e-5 * t14;
    t45 = t11 * (t14 * (0.12134444570794103781e-3 * sinP1_1 * sinP2_2 - 0.40448148569313679267e-4 * cosP1_1 * cosP2_2) + t5 * (-0.45963805192401908258e-6 * cosP1_3 * cosP2_2 + 0.13789141557720572478e-5 * sinP1_3 * sinP2_2)) + t2 * (0.25546692285839128883e-24 * t44 + 0.32752169597229652412e-26 * cosP1_5 * t1) + t3 * (0.34472853894301431194e-5 * cosP2_5 * t4 + 0.14478598635606601102e-3 * cosP2_3 * t6) + t7 * ((t38 + t40 + t41) * cosP2_1 + (t42 - t43) * sinP2_1) - t32 * t19 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t33 * t20 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t36 * t21 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t34 * t9 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t35 * t22 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t37 * t23 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t45 + t46 * sinP1_1 * t15 * sinP2_4;
    t47 = 0.51070894658224342510e-7;
    t48 = 0.10943763141048073398e-7;
    t49 = 0.18239605235080122324e-9;
    t50 = 0.13817882753848577521e-10;
    t51 = -0.23029804589747629199e-12;
    t52 = 0.17272353442310721901e-12;
    t53 = 0.10137576303904416223e-27;
    t54 = 0.12996892697313354132e-29;
    t55 = 0.63838618322780428150e-8;
    t56 = 0.38303170993668256884e-7;
    t57 = sinP1_3 * t5;
    t58 = t6 * (0.21449775756454223856e-5 * cosP1_2 * sinP2_3 + 0.10724887878227111928e-5 * sinP1_2 * cosP2_3) * t13;
    t3 = t11 * ((0.40448148569313679267e-4 * t14 * sinP1_1 - 0.45963805192401908258e-6 * t57) * cosP2_2 + (-0.13789141557720572478e-5 * t44 + 0.12134444570794103781e-3 * cosP1_1 * t14) * sinP2_2) + t2 * (0.32752169597229652412e-26 * sinP1_5 * t1 - 0.25546692285839128883e-24 * t57) + t3 * (0.34472853894301431194e-5 * sinP2_5 * t4 - 0.14478598635606601102e-3 * sinP2_3 * t6) + t34 * t9 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t35 * t22 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t36 * t21 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t37 * t23 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - t47 * t24 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t52 * t18 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + t7 * ((t42 + t43) * cosP2_1 + (-t38 + t40 + t41) * sinP2_1) + t58 - t46 * cosP1_1 * t15 * sinP2_4;
    t3 = t32 * t19 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t33 * t20 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - t48 * t31 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - t49 * t30 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t50 * t25 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t51 * t29 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - t53 * t26 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t54 * t28 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t55 * t27 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t56 * t17 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t3;
    t9 = t5 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t19 = t1 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t20 = t13 * t11 * (-0.18385522076960763304e-5 * cosP1_2 * cosP2_2 + 0.55156566230882289916e-5 * sinP1_2 * sinP2_2);
    t2 = 0.26201735677783721932e-25 * t39 * t2;
    t1 = -t52 * LegP1[54] * t4 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + t56 * t9 + 0.36771044153921526604e-4 * t14 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.53198848602317023446e-10 * t10 * t6 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.21887526282096146792e-8 * t12 * t11 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.54718815705240366972e-7 * t1 * t7 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.22981902596200954130e-5 * t5 * t7 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.32174663634681335784e-5 * t14 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.76606341987336513762e-7 * t14 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.23214043026465610234e-8 * t13 * t8 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.27635765507697155040e-11 * t12 * t8 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.10397514157850683308e-28 * t16 * t15 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.41453648261545732557e-10 * t19 + t20 + t2;
    bf[0] = t56 * t17 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - t52 * t18 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t47 * t24 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - t50 * t25 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t53 * t26 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t55 * t27 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t54 * t28 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t51 * t29 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t49 * t30 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t48 * t31 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t45;
    bf[1] = t3;
    bf[2] = t1;
}

static void idsbf_6_6_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t6, t7, t8, t9;
    t1 = LegP1[46];
    t2 = LegP2[21];
    t3 = LegP1[50];
    t4 = LegP1[45];
    t5 = LegP2[26];
    t6 = LegP1[48];
    t7 = LegP2[24];
    t8 = LegP2[22];
    t9 = LegP2[27];
    t10 = LegP1[53];
    t11 = LegP1[52];
    t12 = LegP2[23];
    t13 = LegP1[51];
    t14 = LegP1[47];
    t15 = LegP2[25];
    t16 = LegP1[49];
    t17 = LegP1[54];
    t18 = t6 * t9;
    t19 = t10 * t7;
    t20 = t11 * t12;
    t21 = t13 * t8;
    t22 = t1 * t9;
    t23 = t3 * t9;
    t24 = t6 * t15;
    t25 = t16 * t7;
    t26 = t3 * t15;
    t27 = t11 * t9;
    t28 = t13 * t7;
    t29 = t3 * t12;
    t30 = t14 * t5;
    t31 = t10 * t5;
    t32 = t16 * t5;
    t33 = t13 * t5;
    t34 = t17 * t9;
    t35 = t11 * t15;
    t36 = t17 * t15;
    t37 = cosP2_4 * t15;
    t38 = cosP2_3 * t7;
    t39 = t8 * cosP2_1;
    t40 = sinP2_3 * t7;
    t41 = sinP2_1 * t8;
    t42 = (-0.68169312671259206758e-4 * t39 + 0.53316780860202731531e-6 * t38) * cosP1_2 + (-0.10282522023039098225e-5 * t40 + 0.40749253943154944822e-4 * t41) * sinP1_2;
    t43 = t1 * (-0.61999799457435747820e-4 * sinP1_1 * sinP2_2 + 0.82107842524712206568e-4 * cosP1_1 * cosP2_2) + t6 * (-0.62202911003569853456e-6 * cosP1_3 * cosP2_2 + 0.46969545043511930164e-6 * sinP1_3 * sinP2_2);
    t44 = -0.19041707450072404120e-6 * t3;
    t45 = 0.34655907559131775504e-4 * t6;
    t46 = t45 * cosP1_3 + t44 * cosP1_5;
    t47 = 0.69819593983598815110e-6 * t16 * cosP1_4 * t8;
    t48 = (-0.11516424665803790012e-2 * t2 - 0.21072822911413460558e-5 * t37) * t1;
    t38 = t12 * t43 + t14 * t42 + t2 * t46 + t4 * (0.13646557005885222953e-5 * cosP2_5 * t5 - 0.85878100599826542586e-4 * t38) - 0.14425535947024548575e-9 * t18 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.94452913938851210920e-12 * t19 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.75562331151080968732e-11 * t20 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.16623712853237813122e-8 * t21 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.19041707450072404121e-7 * t22 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - 0.13738605663832903407e-10 * t23 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.13752344269496736311e-7 * t24 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.15868089541727003433e-8 * t25 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.75562331151080968739e-10 * t26 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t47 * cosP2_1 + t48 * cosP1_1;
    t42 = t33 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t43 = t28 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t46 = t29 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t49 = t30 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t50 = t31 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t19 = t19 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t40 = 0.15081032300457344065e-2 * t41 + 0.13646557005885222953e-5 * sinP2_5 * t5 + 0.85878100599826542586e-4 * t40;
    t41 = -t45 * sinP1_3 + t44 * sinP1_5;
    t44 = t8 * (0.40749253943154944822e-4 * sinP1_2 * cosP2_1 + 0.68169312671259206758e-4 * cosP1_2 * sinP2_1) * t14;
    t18 = -0.30212211529262171842e-13 * t34 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + 0.34982560718093041084e-13 * t36 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.75562331151080968739e-10 * t26 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.10704663579736470573e-10 * t35 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.27190990376335954656e-12 * t50 + 0.18134959476259432494e-8 * t46 - 0.15868089541727003433e-8 * t25 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3) + 0.45680863832244403822e-9 * t32 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.25691192591367529368e-9 * t43 - 0.14425535947024548575e-9 * t18 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.21752792301068763725e-11 * t42 + 0.57244190265970430861e-13 * t27 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.94452913938851210920e-12 * t19 - 0.12405960914441111775e-7 * t49 + t47 * sinP2_1 + t48 * sinP1_1 + t44 + t40 * t4 + t41 * t2;
    t18 = t12 * (t1 * (-0.61999799457435747820e-4 * cosP1_1 * sinP2_2 - 0.82107842524712206568e-4 * cosP2_2 * sinP1_1) + t6 * (-0.46969545043511930164e-6 * cosP1_3 * sinP2_2 - 0.62202911003569853456e-6 * cosP2_2 * sinP1_3)) + 0.75562331151080968732e-11 * t20 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.16623712853237813122e-8 * t21 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + 0.13738605663832903407e-10 * t23 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.13752344269496736311e-7 * t24 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.19041707450072404121e-7 * t22 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t18 + (0.53316780860202731531e-6 * cosP1_2 * sinP2_3 + 0.10282522023039098225e-5 * sinP1_2 * cosP2_3) * t14 * t7;
    t19 = t16 * t15 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t20 = t6 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t10 = t10 * t15 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t15 = t3 * t5 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t21 = -0.11516424665803790012e-1 * t2 - 0.21072822911413460560e-4 * t37;
    t22 = (-0.14928698640856764829e-4 * cosP1_2 * cosP2_2 + 0.11272690810442863239e-4 * sinP1_2 * sinP2_2) * t14 * t12;
    t2 = -0.53316780860202731539e-5 * t16 * cosP1_4 * t2;
    t1 = 0.30212211529262171840e-13 * t17 * t5 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + 0.32113990739209411712e-10 * t11 * t7 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.65258376903206291170e-10 * t15 - 0.49871138559713439367e-7 * t3 * t8 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.18318140885110537874e-11 * t13 * t9 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.12593721858513494789e-11 * t10 + 0.24179945968345909992e-9 * t13 * t12 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.21157452722302671244e-8 * t19 + 0.41257032808490208924e-7 * t20 - 0.27293114011770445906e-6 * t1 * t5 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.34621286272858916582e-8 * t14 * t9 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.90765472178678459640e-5 * t6 * t8 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.17175620119965308516e-4 * t1 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.30162064600914688125e-3 * t1 * t8 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t22 + t2 + t21 * t4;
    bf[0] = 0.57244190265970430861e-13 * t27 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.25691192591367529368e-9 * t28 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.18134959476259432494e-8 * t29 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.12405960914441111775e-7 * t30 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.27190990376335954656e-12 * t31 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - 0.45680863832244403822e-9 * t32 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.21752792301068763725e-11 * t33 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.30212211529262171842e-13 * t34 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - 0.10704663579736470573e-10 * t35 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.34982560718093041084e-13 * t36 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t38 + 0.15081032300457344065e-2 * t39 * t4;
    bf[1] = t18;
    bf[2] = t1;
}

static void idsbf_6_6_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t6, t7, t8, t9;
    t1 = LegP1[75];
    t2 = LegP2[27];
    t3 = LegP1[74];
    t4 = LegP2[26];
    t5 = LegP1[73];
    t6 = LegP2[25];
    t7 = LegP1[72];
    t8 = LegP2[24];
    t9 = LegP1[71];
    t10 = LegP2[23];
    t11 = LegP1[70];
    t12 = LegP2[22];
    t13 = LegP1[68];
    t14 = LegP1[67];
    t15 = LegP1[69];
    t16 = LegP1[76];
    t17 = LegP1[66];
    t18 = LegP2[21];
    t19 = t1 * t2;
    t20 = t3 * t4;
    t21 = t5 * t6;
    t22 = t7 * t8;
    t23 = t9 * t10;
    t24 = t13 * t4;
    t25 = t15 * t2;
    t26 = LegP1[77] * t2;
    t27 = t16 * t4;
    t28 = t1 * t6;
    t29 = t28 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t30 = t3 * t8;
    t31 = t5 * t10;
    t32 = t31 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t33 = t7 * t12;
    t34 = t33 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    t35 = t14 * t2;
    t36 = t35 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t37 = t9 * t2;
    t38 = t37 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t39 = t11 * t4;
    t40 = t39 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t41 = t15 * t6;
    t42 = t41 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t43 = t11 * t8;
    t44 = t43 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t45 = t9 * t6;
    t46 = t45 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t47 = t7 * t4;
    t48 = t5 * t2;
    t29 = -0.45483494891882915697e-14 * t20 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - 0.40025475504856965816e-12 * t21 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.18011463977185634616e-10 * t22 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.21613756772622761536e-9 * t23 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.11828619615562638586e-7 * t24 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.13754208855305393706e-9 * t25 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.75805824819804859490e-16 * t26 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + 0.75805824819804859490e-15 * t27 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + 0.33354562920714138180e-13 * t29 + 0.90057319885928173076e-12 * t30 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.72045855908742538460e-11 * t32 - 0.15850088299923358464e-8 * t34 + 0.12378787969774854336e-7 * t36 - 0.16374058161077849650e-11 * t38 - 0.87109989416934160146e-10 * t40 - 0.40345679308895821542e-8 * t42 + 0.15129629740835933079e-8 * t44 + 0.72045855908742538464e-10 * t46 + 0.20740473670698609558e-11 * t47 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t32 = 0.14379200105690470797e-2;
    t34 = cosP1_4 * t11;
    t36 = 0.39942222515806863330e-6 * t34;
    t38 = 0.10893333413401871818e-4 * sinP1_2 * t13;
    t40 = 0.26628148343871242218e-6 * sinP1_4 * t11;
    t42 = cosP1_3 * t15;
    t44 = cosP2_4 * t6;
    t46 = -0.20092148295830119130e-5 * t44;
    t39 = t39 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t49 = sinP1_3 * t15;
    t50 = t14 * sinP1_1;
    t51 = (-0.53377333725669171898e-4 * t50 - 0.59308148584076857665e-6 * t49) * cosP2_2 + (-0.44783704032874361913e-6 * t42 - 0.40305333629586925722e-4 * t14 * cosP1_1) * sinP2_2;
    t52 = t8 * (0.63544444911510918924e-6 * cosP1_2 * sinP2_3 + 0.85331111738314662556e-6 * sinP1_2 * cosP2_3) + 0.37037333605566364174e-4 * cosP1_2 * sinP2_1 * t12;
    t24 = t10 * t51 + t13 * t52 - 0.11828619615562638586e-7 * t24 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.13754208855305393706e-9 * t25 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.75805824819804859490e-16 * t26 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) + 0.75805824819804859490e-15 * t27 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) + 0.33354562920714138180e-13 * t28 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.90057319885928173076e-12 * t30 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + 0.72045855908742538460e-11 * t31 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.15850088299923358464e-8 * t33 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + 0.16374058161077849650e-11 * t37 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.87109989416934160146e-10 * t39 - 0.12378787969774854336e-7 * t35 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t46 * t14 * sinP1_1;
    t25 = sinP2_1 * t12;
    t26 = t25 * t32 + 0.13011481577118902444e-5 * sinP2_5 * t4 + 0.81881556157404069806e-4 * sinP2_3 * t8;
    t27 = -0.18155555689003119694e-6 * sinP1_5 * t9 - 0.10167111185841747028e-4 * t49 - 0.10980480080709086790e-2 * t50;
    t20 = t17 * t26 + t18 * t27 + 0.15129629740835933079e-8 * t43 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.72045855908742538464e-10 * t45 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.20740473670698609558e-11 * t47 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.54580193870259498838e-13 * t48 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.15161164963960971900e-15 * t19 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + 0.45483494891882915697e-14 * t20 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.40025475504856965816e-12 * t21 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.18011463977185634616e-10 * t22 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.21613756772622761536e-9 * t23 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + 0.40345679308895821542e-8 * t41 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t24 + t12 * (t38 + t40) * cosP2_1 + t25 * t36;
    t21 = t13 * t2 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t22 = t7 * t2 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t23 = t9 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t11 = t11 * t6 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t24 = t15 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t25 = t14 * t12 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t26 = 0.12078528088779995467e-1 * t17 + 0.25417777964604367572e-5 * t34;
    t27 = (-0.80610667259173851446e-5 * sinP1_2 * sinP2_2 + 0.10675466745133834380e-4 * cosP1_2 * cosP2_2) * t13 * t10;
    t28 = 0.22101363125413131040e-4 * t44 * t17;
    t1 = -0.72045855908742538468e-11 * t5 * t8 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.54580193870259498837e-12 * t22 - 0.72045855908742538460e-10 * t7 * t10 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.24888568404838331468e-10 * t23 - 0.10086419827223955386e-8 * t11 - 0.24207407585337492923e-7 * t24 - 0.53256296687742484438e-5 * t15 * t12 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.14887555664982558148e-4 * t14 * t8 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + t28 + t27 - 0.30322329927921943798e-14 * t1 * t4 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + 0.15161164963960971900e-15 * t16 * t2 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) + 0.26144000192164492358e-3 * t25 + t26 * t18 + 0.24757575939549708671e-8 * t21 - 0.20012737752428482908e-12 * t3 * t6 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.19020105959908030156e-7 * t9 * t12 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.23657239231125277178e-6 * t14 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    bf[0] = t10 * (t14 * (0.53377333725669171898e-4 * cosP1_1 * cosP2_2 - 0.40305333629586925722e-4 * sinP1_1 * sinP2_2) + t15 * (0.44783704032874361913e-6 * sinP1_3 * sinP2_2 - 0.59308148584076857665e-6 * cosP1_3 * cosP2_2)) + t12 * ((-0.37037333605566364174e-4 * cosP1_2 * t13 + t17 * t32 + t36) * cosP2_1 + (t38 - t40) * sinP2_1) + t17 * (-0.81881556157404069806e-4 * cosP2_3 * t8 + 0.13011481577118902444e-5 * cosP2_5 * t4) + t18 * (-0.18155555689003119694e-6 * cosP1_5 * t9 + 0.10167111185841747028e-4 * t42) + 0.15161164963960971900e-15 * t19 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + 0.54580193870259498838e-13 * t48 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t29 + (-0.10980480080709086790e-2 * t18 + t46) * t14 * cosP1_1 + t8 * (-0.85331111738314662556e-6 * sinP1_2 * sinP2_3 + 0.63544444911510918924e-6 * cosP1_2 * cosP2_3) * t13;
    bf[1] = t20;
    bf[2] = t1;
}

static void idsbf_6_6_11_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t6, t7, t8, t9;
    t1 = LegP1[75];
    t2 = LegP2[27];
    t3 = LegP1[74];
    t4 = LegP2[26];
    t5 = LegP1[72];
    t6 = LegP2[24];
    t7 = LegP1[71];
    t8 = LegP2[23];
    t9 = LegP1[70];
    t10 = LegP2[22];
    t11 = LegP1[68];
    t12 = LegP1[67];
    t13 = LegP1[69];
    t14 = LegP1[76];
    t15 = LegP1[73];
    t16 = LegP2[25];
    t17 = LegP1[66];
    t18 = LegP2[21];
    t19 = t1 * t2;
    t20 = t3 * t4;
    t21 = t5 * t6;
    t22 = t7 * t8;
    t23 = t11 * t4;
    t24 = t13 * t2;
    t25 = LegP1[77] * t2;
    t26 = t14 * t4;
    t3 = t3 * t6;
    t27 = t15 * t8;
    t28 = t5 * t10;
    t29 = t12 * t2;
    t30 = t7 * t2;
    t31 = t9 * t4;
    t32 = t13 * t16;
    t33 = t9 * t6;
    t34 = t7 * t16;
    t35 = t5 * t4;
    t36 = t15 * t2;
    t37 = cosP1_4 * t9;
    t38 = (-0.13792044229378389680e-2 * t17 - 0.58047324197720495276e-7 * t37 + 0.26121295888974222876e-4 * cosP1_2 * t11) * cosP2_1 + (-0.47018332600153601180e-4 * sinP1_2 * t11 - 0.63852056617492544804e-6 * sinP1_4 * t9) * sinP2_1;
    t39 = t12 * (-0.84894211639166224350e-4 * cosP1_1 * cosP2_2 + 0.16978842327833244866e-4 * sinP1_1 * sinP2_2) + t13 * (0.13060647944487111435e-6 * sinP1_3 * sinP2_2 - 0.65303239722435557193e-6 * cosP1_3 * cosP2_2);
    t40 = cosP1_3 * t13;
    t41 = -0.20316563469202173348e-6 * cosP1_5 * t7 - 0.24379876163042608016e-4 * t40;
    t42 = 0.67044659448367172049e-4 * cosP2_3 * t6 + 0.78363887666922668624e-6 * cosP2_5 * t4;
    t38 = t10 * t38 + t17 * t42 + t18 * t41 + t8 * t39 + 0.30295997026795158560e-16 * t25 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + 0.36355196432154190264e-15 * t26 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) - 0.47988859290443531154e-12 * t3 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.43189973361399178036e-10 * t27 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.31096780820207408184e-8 * t28 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.71459774107042276386e-8 * t29 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - 0.22249380216478364443e-11 * t30 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.14658415201444569516e-9 * t31 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.96745540329534158806e-8 * t32 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.48372770164767079403e-8 * t33 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.80621283607945132336e-10 * t34 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t39 = 0.11174109908061195342e-5 * sinP1_2;
    t41 = -0.10158281734601086678e-6 * cosP1_2;
    t42 = t11 * t6;
    t43 = 0.12770411323498508961e-5 * t12;
    t44 = t21 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t45 = t22 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t46 = t23 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t25 = t25 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6);
    t26 = t26 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5);
    t3 = t3 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t27 = t27 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t28 = t28 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t29 = t29 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t30 = t30 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t31 = t31 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t33 = t33 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t34 = t34 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t47 = -0.13792044229378389680e-2 * sinP2_1 * t10 - 0.67044659448367172049e-4 * sinP2_3 * t6 + 0.78363887666922668624e-6 * sinP2_5 * t4;
    t48 = sinP1_3 * t13;
    t49 = -0.20316563469202173348e-6 * sinP1_5 * t7 + 0.24379876163042608016e-4 * t48;
    t3 = 0.59366581565850506534e-8 * t46 + 0.54969057005417135686e-10 * t24 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.30295997026795158560e-16 * t25 + 0.36355196432154190264e-15 * t26 - 0.21813117859292514163e-13 * t36 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.21813117859292514160e-13 * t20 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.12724318751253966594e-14 * t19 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - 0.13087870715575508496e-11 * t35 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.47988859290443531154e-12 * t3 + 0.22249380216478364443e-11 * t30 - 0.80621283607945132336e-10 * t34 + 0.43189973361399178037e-10 * t44 - 0.43189973361399178036e-10 * t27 + 0.14658415201444569516e-9 * t31 - 0.48372770164767079403e-8 * t33 + 0.44053772828627161598e-8 * t45 - 0.31096780820207408184e-8 * t28 + 0.96745540329534158806e-8 * t32 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.71459774107042276386e-8 * t29 + t47 * t17 + t49 * t18;
    t3 = t10 * (t11 * (-0.26121295888974222876e-4 * cosP1_2 * sinP2_1 - 0.47018332600153601180e-4 * sinP1_2 * cosP2_1) + t9 * (-0.58047324197720495276e-7 * cosP1_4 * sinP2_1 + 0.63852056617492544804e-6 * sinP1_4 * cosP2_1)) + t8 * ((0.84894211639166224350e-4 * t12 * sinP1_1 - 0.65303239722435557193e-6 * t48) * cosP2_2 + (0.16978842327833244866e-4 * cosP1_1 * t12 - 0.13060647944487111435e-6 * t40) * sinP2_2) + t3 + t42 * (t39 * cosP2_3 + t41 * sinP2_3) - t43 * cosP1_1 * t16 * sinP2_4;
    t15 = t15 * t6 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t17 = t5 * t8 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t25 = t7 * t10 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t26 = t13 * t10 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t8 = t11 * t8 * (0.52242591777948445750e-6 * sinP1_2 * sinP2_2 - 0.26121295888974222877e-5 * cosP1_2 * cosP2_2);
    t18 = -0.16253250775361738679e-5 * t37 * t18;
    t1 = -0.10158281734601086674e-5 * t12 * t6 * (-cosP1_1 * cosP2_3 + sinP1_1 * sinP2_3) + 0.11873316313170101307e-7 * t12 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.21987622802166854274e-9 * t11 * t2 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.26175741431151016992e-12 * t5 * t2 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.13087870715575508495e-10 * t7 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.64497026886356105871e-9 * t9 * t16 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.29023662098860247642e-7 * t13 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.20897036711179378302e-4 * t12 * t10 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.60591994053590317108e-15 * t14 * t2 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) + 0.65439353577877542484e-14 * t1 * t4 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) - 0.67184403006620943615e-11 * t15 - 0.51827968033679013642e-9 * t17 - 0.31096780820207408182e-7 * t25 + 0.17414197259316148584e-5 * t26 + t8 + t18;
    bf[0] = 0.12724318751253966594e-14 * t19 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + 0.21813117859292514160e-13 * t20 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - 0.43189973361399178037e-10 * t21 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.44053772828627161598e-8 * t22 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.59366581565850506534e-8 * t23 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.54969057005417135686e-10 * t24 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.13087870715575508496e-11 * t35 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.21813117859292514163e-13 * t36 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t38 + t42 * (t41 * cosP2_3 - t39 * sinP2_3) + t43 * sinP1_1 * t16 * sinP2_4;
    bf[1] = t3;
    bf[2] = t1;
}

static void idsbf_6_6_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t7, t8, t9;
    t1 = LegP1[67];
    t2 = LegP2[21];
    t3 = LegP1[66];
    t4 = LegP2[24];
    t5 = LegP2[22];
    t6 = LegP1[71];
    t7 = LegP2[26];
    t8 = LegP1[69];
    t9 = LegP1[72];
    t10 = LegP2[23];
    t11 = LegP1[68];
    t12 = LegP2[27];
    t13 = LegP1[70];
    t14 = LegP2[25];
    t15 = LegP1[73];
    t16 = LegP1[75];
    t17 = LegP1[74];
    t18 = LegP1[76];
    t19 = LegP1[77] * t12;
    t20 = t18 * t7;
    t21 = t17 * t4;
    t22 = t15 * t10;
    t23 = t9 * t5;
    t24 = t1 * t12;
    t25 = t6 * t12;
    t26 = t13 * t7;
    t27 = t8 * t14;
    t28 = t13 * t4;
    t29 = t6 * t14;
    t30 = t9 * t7;
    t31 = t15 * t12;
    t32 = t16 * t12;
    t33 = t17 * t7;
    t34 = t9 * t4;
    t35 = t6 * t10;
    t36 = t11 * t7;
    t37 = t8 * t12;
    t38 = t15 * t14;
    t39 = t38 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t40 = t16 * t14;
    t41 = t40 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t42 = 0.54838811966466316152e-8;
    t43 = -0.10035861013470959817e-8;
    t44 = 0.11350080908092156939e-9;
    t45 = -0.76029250102052725900e-11;
    t46 = 0.25222402017982570976e-11;
    t47 = 0.63357708418377271586e-13;
    t48 = -0.66374742152585713089e-14;
    t49 = 0.19359299794504166317e-14;
    t50 = -0.15085168671042207520e-15;
    t51 = -0.41903246308450576444e-17;
    t52 = 0.30170337342084415042e-14;
    t53 = 0.25343083367350908636e-12;
    t54 = 0.22301913363268799598e-10;
    t55 = cosP1_3 * t8;
    t56 = cosP1_1 * t1;
    t57 = cosP2_3 * t4;
    t58 = cosP2_1 * t5;
    t59 = 0.15655943181014697315e-6 * cosP2_5 * t7 - 0.17221537499116167048e-4 * t57 - 0.24799013998727280550e-2 * t58;
    t39 = t2 * (-0.56200821675437374987e-7 * cosP1_5 * t6 + 0.13488197202104969998e-4 * t55 + 0.13353315230083920297e-2 * t56) + t3 * t59 + t51 * t19 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + t50 * t20 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + t54 * t29 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t53 * t30 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t52 * t31 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t49 * t32 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + t47 * t33 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t44 * t34 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t42 * t35 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t43 * t36 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t45 * t37 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t46 * t39 + t48 * t41;
    t41 = 0.53524592071845119039e-8;
    t59 = 0.68933186759194471492e-10;
    t60 = 0.20071722026941919638e-8;
    t61 = sinP1_3 * t8;
    t62 = sinP1_1 * t1;
    t63 = sinP2_3 * t4;
    t64 = sinP2_1 * t5;
    t57 = (0.7225819929699091078e-6 * t58 - 0.31111169141759975440e-6 * t57) * cosP1_2 + (-0.53190063371396087040e-6 * t63 + 0.31071025697706091598e-4 * t64) * sinP1_2;
    t58 = 0.20071722026941919639e-6 * sinP1_4;
    t65 = 0.34523361886340101777e-6 * cosP1_4;
    t63 = 0.15655943181014697315e-6 * sinP2_5 * t7 + 0.17221537499116167048e-4 * t63 - 0.24799013998727280550e-2 * t64;
    t64 = -0.56200821675437374987e-7 * sinP1_5 * t6 - 0.13488197202104969998e-4 * t61 + 0.13353315230083920297e-2 * t62;
    t29 = t2 * t64 + t3 * t63 + t41 * t27 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t42 * t35 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t43 * t36 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - t44 * t34 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - t46 * t38 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t47 * t33 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + t48 * t40 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) - t49 * t32 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t52 * t31 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t53 * t30 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t54 * t29 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t59 * t26 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t60 * t28 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t30 = t1 * (0.16438740340065432182e-4 * cosP2_2 * sinP1_1 - 0.49316221020196296550e-4 * cosP1_1 * sinP2_2) + t8 * (-0.27096824736371591513e-6 * cosP1_3 * sinP2_2 + 0.90322749121238638367e-7 * cosP2_2 * sinP1_3);
    t31 = t11 * t4 * (-0.31111169141759975440e-6 * cosP1_2 * sinP2_3 + 0.53190063371396087040e-6 * sinP1_2 * cosP2_3);
    t19 = t10 * t30 + t45 * t37 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t5 * ((0.31071025697706091598e-4 * sinP1_2 * t11 - t58 * t13) * cosP2_1 + (-0.7225819929699091078e-6 * cosP1_2 * t11 + t65 * t13) * sinP2_1) + t50 * t20 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) + t51 * t19 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) - 0.33187371076292856542e-12 * t21 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - 0.17921180381198142534e-10 * t22 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.10035861013470959819e-8 * t23 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + 0.92321232266778310026e-12 * t25 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.13837323518573596113e-8 * t24 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t29 - 0.26494673075563333924e-6 * t62 * t14 * cosP2_4 + t31;
    t20 = t11 * t12 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t29 = t9 * t12 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t30 = t6 * t7 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t31 = t13 * t14 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t32 = t8 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t33 = 0.16023978276100704356e-1 * t2 - 0.31793607690676000710e-5 * t14 * cosP2_4;
    t34 = (0.25290369753946818739e-5 * cosP1_2 * cosP2_2 + 0.75871109261840456227e-5 * sinP1_2 * sinP2_2) * t11 * t10;
    t2 = -0.17984262936139959997e-5 * t13 * cosP1_4 * t2;
    t1 = t34 - 0.63357708418377271588e-14 * t16 * t7 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) - 0.18437428375718253635e-15 * t18 * t12 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) - 0.34121927445801263384e-7 * t6 * t5 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.26093238635024495528e-7 * t1 * t7 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + t33 * t3 + 0.71366122762460158716e-9 * t31 + t2 - 0.12611201008991285487e-10 * t15 * t4 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.21677459789097273208e-5 * t8 * t5 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.60215166080825758913e-7 * t32 + 0.41331689997878800918e-3 * t1 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.10861321443150389414e-12 * t29 + 0.86166483448993089353e-11 * t30 + 0.28702562498526945084e-5 * t1 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.26549896861034285236e-12 * t17 * t14 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.21288190028574763250e-9 * t20 - 0.64516249372313313120e-9 * t9 * t10 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    bf[0] = t10 * ((-0.16438740340065432182e-4 * t56 + 0.90322749121238638367e-7 * t55) * cosP2_2 + (-0.49316221020196296550e-4 * t62 + 0.27096824736371591513e-6 * t61) * sinP2_2) + t11 * t57 - 0.33187371076292856542e-12 * t21 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.17921180381198142534e-10 * t22 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.10035861013470959819e-8 * t23 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.13837323518573596113e-8 * t24 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - 0.92321232266778310026e-12 * t25 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - t59 * t26 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - t41 * t27 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t60 * t28 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t39 - 0.26494673075563333924e-6 * t56 * t14 * cosP2_4 + t13 * t5 * (t65 * cosP2_1 + t58 * sinP2_1);
    bf[1] = t19;
    bf[2] = t1;
}

static void idsbf_6_6_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t7, t8, t9;
    t1 = LegP1[91];
    t2 = LegP2[26];
    t3 = LegP1[96];
    t4 = LegP2[21];
    t5 = LegP1[94];
    t6 = LegP2[24];
    t7 = LegP2[22];
    t8 = LegP1[92];
    t9 = LegP1[97];
    t10 = LegP2[23];
    t11 = LegP1[95];
    t12 = LegP1[93];
    t13 = LegP2[25];
    t14 = LegP2[27];
    t15 = LegP1[101];
    t16 = LegP1[100];
    t17 = LegP1[99];
    t18 = LegP1[98];
    t19 = t16 * t13;
    t20 = t17 * t6;
    t21 = t18 * t10;
    t22 = t9 * t7;
    t23 = t8 * t14;
    t24 = t3 * t14;
    t25 = t11 * t2;
    t26 = t11 * t6;
    t27 = -t26 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) * t13 * t5;
    t28 = t3 * t13;
    t29 = t28 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t30 = t9 * t2;
    t31 = t30 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t32 = t18 * t14;
    t33 = t32 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t34 = t16 * t14;
    t35 = t34 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t36 = t17 * t2;
    t37 = t18 * t13;
    t38 = t37 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t39 = t9 * t6;
    t40 = t39 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t41 = t12 * t2;
    t42 = t41 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t43 = t5 * t14;
    t44 = t43 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t45 = LegP1[102] * t14;
    t46 = t15 * t2;
    t47 = -0.23826121966816265269e-2;
    t48 = 0.19284286751178665883e-8;
    t49 = -0.96421433755893329416e-9;
    t50 = 0.96421433755893329412e-9;
    t51 = 0.17531169773798787166e-10;
    t52 = 0.13391865799429629084e-10;
    t53 = 0.19131236856328041553e-12;
    t54 = 0.16232564605369247377e-12;
    t55 = 0.28986722509587941744e-14;
    t56 = 0.48311204182646569572e-16;
    t57 = 0.28986722509587941742e-14;
    t58 = 0.24348846908053871065e-12;
    t59 = 0.21426985279087406538e-10;
    t60 = cosP2_1 * t7 * t47 + 0.15041743665919359386e-6 * cosP2_5 * t2 - 0.16545918032511295327e-4 * cosP2_3 * t6;
    t61 = -0.53996002903300264478e-7 * t3;
    t62 = (0.48596402612970238024e-5 * t4 + 0.86779290380303996469e-7 * cosP2_2 * t10) * t5 * cosP1_3;
    t27 = t50 * ((cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) * t10 * t3 + t23 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6)) - 0.96421433755893329404e-9 * t42 - t48 * t27 + t49 * t22 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t56 * t35 - t51 * t25 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.17218113170695237395e-10 * t21 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t52 * t40 - 0.73046540724161613188e-11 * t44 - 0.31885394760546735918e-12 * t20 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t53 * t38 - t54 * t24 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t58 * t31 + t59 * t29 + t57 * t33 - 0.63770789521093471842e-14 * t19 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t55 * t36 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t60 * t1 + t4 * (0.12829450289824142836e-2 * t8 * cosP1_1 + t61 * cosP1_5) + t62;
    t29 = 0.22909732660400255067e-4 * sinP1_2 * t12;
    t31 = 0.28284271247461900976e-26 * sinP1_4 * t11;
    t33 = 0.76365775534667516890e-5 * cosP1_2 * t12;
    t35 = cosP1_4 * t11;
    t38 = 0.13884686460848639436e-6 * t35;
    t40 = 0.31819073139444798707e-6 * sinP1_2;
    t42 = -0.10606357713148266237e-6 * cosP1_2;
    t44 = t12 * t6;
    t39 = t39 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t60 = t5 * (-0.26033787114091198941e-6 * cosP1_3 * sinP2_2 + 0.86779290380303996469e-7 * cosP2_2 * sinP1_3) + t8 * (-0.34364598990600382601e-4 * cosP1_1 * sinP2_2 + 0.11454866330200127531e-4 * cosP2_2 * sinP1_1);
    t62 = cosP2_4 * t13;
    t63 = (0.12829450289824142836e-2 * t4 - 0.25455258511555838964e-6 * t62) * t8 * sinP1_1;
    t19 = t1 * (0.15041743665919359386e-6 * sinP2_5 * t2 + 0.16545918032511295327e-4 * sinP2_3 * t6) + t10 * t60 + t4 * (-0.48596402612970238024e-5 * t5 * sinP1_3 + t61 * sinP1_5) + t7 * ((t29 + t31) * cosP2_1 + (t1 * t47 - t33 + t38) * sinP2_1) - 0.73046540724161613188e-11 * t43 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.40259336818872141310e-17 * t45 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) - 0.14493361254793970870e-15 * t46 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) - 0.63770789521093471842e-14 * t19 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) - 0.31885394760546735918e-12 * t20 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - 0.17218113170695237395e-10 * t21 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.96421433755893329404e-9 * t41 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t63 + t44 * (t40 * cosP2_3 + t42 * sinP2_3);
    t19 = t48 * ((-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) * t13 * t5 + t26 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3)) + t49 * t22 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - t50 * (t23 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) * t10 * t3) + t51 * t25 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t52 * t39 - t53 * t37 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t54 * t24 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - t55 * t36 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - t56 * t34 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t57 * t32 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t58 * t30 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t59 * t28 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t19;
    t16 = t16 * t2 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t17 = t17 * t13 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t18 = t18 * t6 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t20 = t9 * t10 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t21 = t3 * t7 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t22 = -0.16678285376771385689e-1 * t1 + 0.97192805225940476056e-6 * t35;
    t1 = 0.33091836065022590658e-5 * t62 * t1;
    t23 = (-0.57274331651000637674e-5 * sinP1_2 * sinP2_2 - 0.19091443883666879222e-5 * cosP1_2 * cosP2_2) * t12 * t10;
    t1 = -0.38568573502357331770e-9 * t11 * t13 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.38568573502357331767e-7 * t5 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + t22 * t4 - 0.38958155052886193703e-11 * t3 * t2 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.40581411513423118442e-13 * t9 * t14 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.36655572256640408110e-3 * t8 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.13884686460848639436e-5 * t5 * t7 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.63770789521093471842e-13 * t17 + 0.38262473712656083098e-11 * t18 + 0.16070238959315554902e-9 * t12 * t14 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.24105358438973332356e-9 * t20 + 0.15427429400942932706e-7 * t21 + 0.23141144101414399057e-7 * t8 * t2 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + t1 + t23 + 0.24155602091323284788e-16 * t15 * t14 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) + 0.11594689003835176698e-14 * t16 + 0.25455258511555838965e-5 * t8 * t6 * (-cosP1_1 * cosP2_3 + sinP1_1 * sinP2_3);
    bf[0] = t7 * ((t38 + t33) * cosP2_1 + (t29 - t31) * sinP2_1) + t8 * (t10 * (-0.34364598990600382601e-4 * sinP1_1 * sinP2_2 - 0.11454866330200127531e-4 * cosP1_1 * cosP2_2) - 0.25455258511555838964e-6 * cosP1_1 * cosP2_4 * t13) - 0.40259336818872141310e-17 * t45 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) - 0.14493361254793970870e-15 * t46 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + t27 + 0.26033787114091198941e-6 * t5 * sinP1_3 * t10 * sinP2_2 + t44 * (t42 * cosP2_3 - t40 * sinP2_3);
    bf[1] = t19;
    bf[2] = t1;
}

static void idsbf_6_8_2_1_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[2];
    t2 = LegP2[38];
    t3 = LegP2[39];
    t4 = LegP2[41];
    t5 = LegP2[37];
    t6 = LegP2[36];
    t7 = t1 * LegP2[42];
    t8 = 0.52982115121663913270e-2;
    t9 = 0.47305459930057065412e-4 * cosP2_2 * t2;
    t10 = cosP2_4 * LegP2[40];
    t11 = -0.31536973286704710278e-5 * t10;
    t10 = (0.10596423024332782653e-1 * t6 - 0.63073946573409420556e-5 * t10) * cosT1 + 0.15768486643352355137e-4 * t1 * t3 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.78842433216761775686e-6 * t1 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.13245528780415978317e-2 * t1 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = (0.78842433216761775690e-6 * cosP2_5 * t4 - 0.13245528780415978317e-2 * cosP2_1 * t5 - 0.15768486643352355137e-4 * cosP2_3 * t3) * cosT1 + t1 * ((t6 * t8 + t11 - t9) * cosP1_1 - 0.14191637979017119624e-3 * sinP1_1 * t2 * sinP2_2) + 0.13140405536126962616e-6 * t7 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    bf[1] = (-0.13245528780415978317e-2 * sinP2_1 * t5 + 0.78842433216761775690e-6 * sinP2_5 * t4 + 0.15768486643352355137e-4 * sinP2_3 * t3) * cosT1 + t1 * ((t11 + 0.52982115121663913267e-2 * t6 + t9) * sinP1_1 - 0.14191637979017119624e-3 * cosP1_1 * t2 * sinP2_2) - 0.13140405536126962616e-6 * t7 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    bf[2] = t10;
}

static void idsbf_6_8_2_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[7];
    t2 = LegP2[42];
    t3 = LegP1[8];
    t4 = LegP2[37];
    t5 = LegP1[6];
    t6 = LegP2[41];
    t7 = LegP2[39];
    t8 = LegP2[38];
    t9 = LegP1[9];
    t10 = LegP2[36];
    t11 = t3 * t7;
    t12 = t1 * t2;
    t13 = t3 * t4;
    t14 = t3 * t6;
    t15 = t9 * t2;
    t16 = -0.10729096192251427717e-6;
    t17 = 0.43259715847157756560e-2;
    t18 = 0.64374577153508566306e-5 * cosP2_2 * t8;
    t19 = cosP2_4 * LegP2[40];
    t20 = -0.25749830861403426526e-5 * t19;
    t21 = t1 * ((0.43259715847157756563e-2 * t10 + t18 + t20) * sinP1_1 - 0.19312373146052569891e-4 * cosP1_1 * sinP2_2 * t8) + t16 * t14 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t5 * (0.12874915430701713261e-4 * sinP2_3 * t7 + 0.64374577153508566304e-6 * sinP2_5 * t6 - 0.10814928961789439141e-2 * sinP2_1 * t4) - 0.89409134935428564310e-8 * t15 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.21458192384502855434e-5 * t11 * (cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + 0.18024881602982398567e-3 * t13 * (-cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) - 0.17881826987085712863e-7 * t12 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t8 * (-0.96561865730262849451e-5 * cosP1_3 * sinP2_2 + 0.32187288576754283151e-5 * cosP2_2 * sinP1_3) * t9;
    t2 = t5 * (-0.12977914754147326968e-1 * t10 + 0.77249492584210279576e-5 * t19) - 0.85832769538011421746e-5 * t1 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.42916384769005710872e-6 * t1 * t6 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.17881826987085712864e-7 * t3 * t2 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.72099526411929594273e-3 * t1 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t3 * t8 * (-0.64374577153508566300e-5 * cosP1_2 * cosP2_2 - 0.19312373146052569892e-4 * sinP1_2 * sinP2_2);
    bf[0] = t1 * ((t10 * t17 - t18 + t20) * cosP1_1 - 0.19312373146052569891e-4 * sinP1_1 * sinP2_2 * t8) + t5 * (0.64374577153508566304e-6 * cosP2_5 * t6 - 0.12874915430701713261e-4 * cosP2_3 * t7 - 0.10814928961789439140e-2 * cosP2_1 * t4) + 0.21458192384502855434e-5 * t11 * (cosP1_2 * cosP2_3 - sinP1_2 * sinP2_3) + 0.17881826987085712863e-7 * t12 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.18024881602982398567e-3 * t13 * (cosP1_2 * cosP2_1 + sinP1_2 * sinP2_1) + t16 * t14 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.89409134935428564310e-8 * t15 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t8 * (0.96561865730262849449e-5 * sinP1_3 * sinP2_2 + 0.32187288576754283149e-5 * cosP1_3 * cosP2_2) * t9;
    bf[1] = t21;
    bf[2] = t2;
}

static void idsbf_6_8_3_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[8];
    t2 = LegP2[37];
    t3 = LegP1[6];
    t4 = LegP2[41];
    t5 = LegP2[43];
    t6 = LegP2[39];
    t7 = LegP1[7];
    t8 = LegP2[38];
    t9 = LegP2[40];
    t10 = LegP1[9];
    t11 = t1 * t5;
    t12 = t1 * t4;
    t13 = cosP2_3 * t6;
    t14 = cosP2_1 * t2;
    t15 = sinP2_3 * t6;
    t16 = sinP2_1 * t2;
    t17 = 0.41461166684805863922e-5 * t7;
    t18 = t1 * (t2 * (0.54417781273807696380e-4 * sinP1_2 * cosP2_1 - 0.16325334382142308918e-3 * cosP1_2 * sinP2_1) + t6 * (0.23321906260203298458e-5 * sinP1_2 * cosP2_3 + 0.54417781273807696398e-5 * cosP1_2 * sinP2_3)) + t3 * (-0.46643812520406596912e-4 * t15 + 0.13060267505713847136e-2 * t16 + 0.77739687534010994844e-6 * sinP2_5 * t4) + t8 * (t10 * (0.4e-24 * cosP2_2 * sinP1_3 - 0.12438350005441759176e-4 * cosP1_3 * sinP2_2) + t7 * (-0.4e-23 * cosP2_2 * sinP1_1 + 0.12438350005441759176e-3 * cosP1_1 * sinP2_2)) + 0.64783072945009162378e-7 * t12 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.21594357648336387458e-8 * t11 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - t17 * cosP1_1 * t9 * sinP2_4;
    t2 = 0.54417781273807696402e-4 * t10 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.77739687534010994852e-5 * t7 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.12956614589001832475e-6 * t7 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.15547937506802198970e-5 * t10 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.21767112509523078558e-3 * t7 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.21594357648336387458e-8 * t10 * t5 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + t1 * t8 * (0.49753400021767036706e-4 * sinP1_2 * sinP2_2 + 0.2e-23 * cosP1_2 * cosP2_2);
    bf[0] = t1 * ((0.54417781273807696398e-5 * t13 + 0.16325334382142308918e-3 * t14) * cosP1_2 + (0.54417781273807696380e-4 * t16 - 0.23321906260203298458e-5 * t15) * sinP1_2) + t3 * (0.13060267505713847136e-2 * t14 + 0.77739687534010994844e-6 * cosP2_5 * t4 + 0.46643812520406596912e-4 * t13) + t8 * (t10 * (0.12438350005441759176e-4 * sinP1_3 * sinP2_2 + 0.3e-24 * cosP1_3 * cosP2_2) + t7 * (0.12438350005441759176e-3 * sinP1_1 * sinP2_2 + 0.3e-23 * cosP1_1 * cosP2_2)) - 0.21594357648336387458e-8 * t11 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.64783072945009162378e-7 * t12 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t17 * sinP1_1 * t9 * sinP2_4;
    bf[1] = t18;
    bf[2] = t2;
}

static void idsbf_6_8_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[8];
    t2 = LegP2[43];
    t3 = LegP1[9];
    t4 = LegP2[40];
    t5 = LegP1[7];
    t6 = LegP2[42];
    t7 = LegP2[37];
    t8 = LegP2[38];
    t9 = LegP2[41];
    t10 = LegP1[6];
    t11 = LegP2[39];
    t12 = LegP2[36];
    t13 = t1 * t9;
    t14 = t3 * t6;
    t15 = t5 * t6;
    t16 = t1 * t2;
    t17 = t3 * LegP2[44];
    t18 = t3 * t4;
    t19 = 0.18969566409448156045e-6;
    t20 = 0.33874225731157421510e-7;
    t21 = 0.27663951013778560900e-8;
    t22 = 0.26346620013122438950e-9;
    t23 = 0.11291408577052473836e-8;
    t24 = 0.16937112865578710753e-8;
    t4 = cosP2_4 * t4;
    t25 = sinP1_3 * t3;
    t26 = sinP1_1 * t5;
    t27 = cosP1_3 * t3;
    t28 = t5 * cosP1_1;
    t29 = 0.85363048842516702219e-3 * cosP2_1 * t7 - 0.41055561586162794874e-4 * cosP2_3 * t11 - 0.33874225731157421509e-7 * cosP2_5 * t9;
    t30 = (-0.24584558066644810240e-2 * t12 - 0.15717640739257043581e-5 * t4) * t5;
    t31 = -0.33874225731157421509e-7 * sinP2_5 * t9 + 0.85363048842516702219e-3 * sinP2_1 * t7 + 0.41055561586162794874e-4 * sinP2_3 * t11;
    t31 = t1 * (t11 * (-0.5081133859673613228e-6 * cosP1_2 * sinP2_3 + 0.46136695445836408096e-5 * sinP1_2 * cosP2_3) + t7 * (0.29165708354526539925e-3 * cosP1_2 * sinP2_1 + 0.20629403470274869703e-3 * sinP1_2 * cosP2_1)) + t10 * t31 + t19 * t18 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t20 * t15 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t21 * t16 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - t22 * t17 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + t23 * t14 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t24 * t13 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t8 * ((-0.34416213342855940255e-5 * t25 - 0.10324864002856782076e-3 * t26) * cosP2_2 + (-0.40920064683238165185e-5 * t27 - 0.12276019404971449556e-3 * t28) * sinP2_2) + t30 * sinP1_1 - 0.47803307351809353238e-3 * t25 * t12;
    t2 = t10 * (-0.98338232266579240952e-2 * t12 - 0.62870562957028174320e-5 * t4) + 0.82991853041335682714e-4 * t3 * t7 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.92213170045928536336e-9 * t3 * t2 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.85363048842516702210e-6 * t3 * t11 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.20527780793081397436e-4 * t5 * t11 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.16937112865578710754e-7 * t5 * t9 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.13549690292462968605e-7 * t1 * t6 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.42681524421258351109e-3 * t5 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t1 * t8 * (0.49104077619885798226e-4 * sinP1_2 * sinP2_2 - 0.41299456011427128310e-4 * cosP1_2 * cosP2_2);
    bf[0] = t1 * (t11 * (-0.5081133859673613228e-6 * cosP1_2 * cosP2_3 - 0.46136695445836408096e-5 * sinP1_2 * sinP2_3) + t7 * (-0.29165708354526539925e-3 * cosP1_2 * cosP2_1 + 0.20629403470274869703e-3 * sinP1_2 * sinP2_1)) + t10 * t29 + t8 * ((-0.34416213342855940255e-5 * t27 + 0.10324864002856782076e-3 * t28) * cosP2_2 + (-0.12276019404971449556e-3 * t26 + 0.40920064683238165185e-5 * t25) * sinP2_2) + t24 * t13 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t23 * t14 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - t20 * t15 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - t21 * t16 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t22 * t17 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - t19 * t18 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t30 * cosP1_1 + 0.47803307351809353238e-3 * t27 * t12;
    bf[1] = t31;
    bf[2] = t2;
}

static void idsbf_6_8_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[17];
    t2 = LegP2[39];
    t3 = LegP1[16];
    t4 = LegP2[42];
    t5 = LegP2[43];
    t6 = LegP1[18];
    t7 = LegP2[44];
    t8 = LegP2[40];
    t9 = LegP1[19];
    t10 = LegP1[20];
    t11 = LegP2[37];
    t12 = LegP2[38];
    t13 = LegP2[41];
    t14 = LegP2[36];
    t15 = LegP1[15];
    t16 = t9 * t5;
    t17 = t10 * t7;
    t18 = t9 * t11;
    t19 = t3 * t4;
    t20 = t1 * t5;
    t21 = t6 * t7;
    t22 = t6 * t8;
    t23 = t9 * t2;
    t24 = t10 * t8;
    t25 = t1 * t13;
    t26 = t6 * t4;
    t27 = 0.76351031991400834475e-3 * cosP2_1 * t11 - 0.36721210624435639430e-4 * cosP2_3 * t2 - 0.30298028568016204147e-7 * cosP2_5 * t13;
    t10 = -0.76351031991400834466e-5 * t10;
    t28 = -0.21989097213523440329e-2 * t3;
    t29 = t28 * cosP1_1 + t10 * cosP1_5;
    t30 = (0.15270206398280166895e-4 * t14 - 0.30782797025104463419e-5 * cosP2_2 * t12) * t6 * cosP1_3;
    t27 = t14 * t29 + t15 * t27 + 0.58912833326698174734e-10 * t16 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) - 0.42080595233355839098e-11 * t17 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + 0.53021549994028357268e-5 * t18 * (cosP1_4 * cosP2_1 - sinP1_4 * sinP2_1) - 0.12119211427206481661e-7 * t19 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - 0.35347699996018904840e-9 * t20 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.84161190466711678200e-11 * t21 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - 0.60596057136032408300e-8 * t22 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.54536451422429167469e-7 * t23 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.30298028568016204150e-8 * t24 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.15149014284008102075e-8 * t25 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.10099342856005401384e-8 * t26 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t30;
    t24 = t24 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t29 = t12 * (-0.43920022212196289540e-4 * cosP1_1 * sinP2_2 - 0.36939356430125356104e-4 * cosP2_2 * sinP1_1) - 0.14058285255559518727e-5 * cosP2_4 * sinP1_1 * t8;
    t30 = (0.69988445992117431598e-4 * cosP1_2 * sinP2_1 - 0.6362585999283402878e-5 * sinP1_2 * cosP2_1) * t11 * t1;
    t31 = t12 * (-0.36600018510163574617e-5 * cosP1_3 * sinP2_2 - 0.30782797025104463419e-5 * cosP2_2 * sinP1_3) * t6;
    t16 = t3 * t29 + 0.15149014284008102075e-8 * t25 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.10099342856005401384e-8 * t26 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.58912833326698174734e-10 * t16 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.42080595233355839098e-11 * t17 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + 0.53021549994028357268e-5 * t18 * (cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + 0.35347699996018904840e-9 * t20 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - 0.84161190466711678200e-11 * t21 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + 0.60596057136032408300e-8 * t22 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.54536451422429167469e-7 * t23 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.30298028568016204150e-8 * t24 + 0.12119211427206481661e-7 * t19 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t30 + t31;
    t17 = (0.18469678215062678053e-4 * cosP1_2 * cosP2_2 - 0.21960011106098144771e-4 * sinP1_2 * sinP2_2) * t12 * t1;
    t4 = t15 * (0.10994548606761720164e-1 * t14 + 0.70291426277797593626e-5 * t8 * cosP2_4) - 0.60596057136032408302e-8 * t9 * t8 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.21814580568971666991e-6 * t6 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.30540412796560333791e-3 * t3 * t11 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.21208619997611342910e-4 * t6 * t11 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.14688484249774255774e-4 * t3 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.60596057136032408304e-8 * t1 * t4 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.23565133330679269898e-9 * t6 * t5 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.84161190466711678198e-11 * t9 * t7 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) - 0.12119211427206481661e-7 * t3 * t13 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + t17 + 0.15270206398280166893e-4 * t9 * cosP1_4 * t14;
    bf[0] = t1 * (t11 * (-0.6362585999283402878e-5 * sinP1_2 * sinP2_1 - 0.69988445992117431598e-4 * cosP1_2 * cosP2_1) + t2 * (-0.21632792397563569765e-5 * sinP1_2 * sinP2_3 + 0.15088418226872069668e-5 * cosP1_2 * cosP2_3)) + t12 * (t3 * (-0.43920022212196289540e-4 * sinP1_1 * sinP2_2 + 0.36939356430125356104e-4 * cosP1_1 * cosP2_2) + 0.36600018510163574617e-5 * sinP1_3 * sinP2_2 * t6) + t27 - 0.14058285255559518727e-5 * t3 * cosP1_1 * t8 * cosP2_4;
    bf[1] = t14 * (-0.15270206398280166895e-4 * sinP1_3 * t6 + t10 * sinP1_5 + t28 * sinP1_1) + t15 * (-0.30298028568016204147e-7 * sinP2_5 * t13 + 0.36721210624435639430e-4 * sinP2_3 * t2 + 0.76351031991400834475e-3 * sinP2_1 * t11) + t16 + t2 * (0.15088418226872069668e-5 * cosP1_2 * sinP2_3 + 0.21632792397563569765e-5 * sinP1_2 * cosP2_3) * t1;
    bf[2] = t4;
}

static void idsbf_6_8_5_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t5, t6, t7, t8, t9;
    t1 = LegP1[16];
    t2 = LegP2[40];
    t3 = LegP1[19];
    t4 = LegP2[41];
    t5 = LegP1[17];
    t6 = LegP2[39];
    t7 = LegP2[42];
    t8 = LegP2[43];
    t9 = LegP1[18];
    t10 = LegP2[44];
    t11 = LegP1[20];
    t12 = LegP2[37];
    t13 = LegP2[38];
    t14 = LegP2[36];
    t15 = LegP1[15];
    t16 = t3 * t4;
    t17 = t1 * t7;
    t18 = t5 * t8;
    t19 = t9 * t10;
    t20 = t9 * t2;
    t21 = t3 * t6;
    t22 = t11 * t2;
    t23 = t5 * t4;
    t24 = t9 * t7;
    t25 = t3 * t8;
    t26 = t11 * t10;
    t27 = 0.26586412169253132408e-7;
    t28 = -0.15192235525287504230e-7;
    t29 = 0.11394176643965628174e-7;
    t30 = 0.63300981355364600960e-9;
    t31 = 0.25320392542145840382e-9;
    t32 = 0.47475736016523450722e-10;
    t33 = 0.63300981355364600965e-9;
    t34 = 0.13217244907000128682e-5 * sinP1_2;
    t35 = 0.59249718548621266519e-6 * cosP1_2;
    t36 = 0.42538259470805011853e-6 * t1;
    t37 = t36 * sinP1_1 * t2 * sinP2_4;
    t38 = t5 * t6;
    t39 = t38 * (t35 * cosP2_3 - t34 * sinP2_3);
    t37 = t12 * (t3 * (0.34562335820029072126e-5 * cosP1_4 * cosP2_1 - 0.66466030423132831008e-5 * sinP1_4 * sinP2_1) + t5 * (0.76568867047449021320e-4 * cosP1_2 * cosP2_1 - 0.16589921193613954619e-3 * sinP1_2 * sinP2_1)) + t13 * (t1 * (-0.11293907889498730647e-3 * cosP1_1 * cosP2_2 + 0.38922507415786585848e-4 * sinP1_1 * sinP2_2) + t9 * (-0.40335385319638323737e-5 * cosP1_3 * cosP2_2 + 0.13900895505638066375e-5 * sinP1_3 * sinP2_2)) + t30 * t16 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - t27 * t17 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - t31 * t18 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t32 * t19 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + t29 * t20 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t28 * t21 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t33 * t22 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - t37 + t39;
    t39 = -0.26586412169253132406e-7;
    t40 = -0.94951472033046901449e-9;
    t41 = -0.10550163559227433493e-10;
    t42 = 0.26375408898068583732e-11;
    t43 = cosP2_1 * t12;
    t44 = 0.14356662571396691500e-3 * sinP1_3 * t9 - 0.79759236507759397216e-5 * sinP1_5 * t11;
    t45 = -0.16589921193613954619e-3 * t43 * t5 * sinP1_2;
    t16 = t14 * t44 + t15 * (-0.79759236507759397218e-6 * sinP2_5 * t4 - 0.28713325142793382998e-4 * sinP2_3 * t6 - 0.13399551733303578731e-2 * sinP2_1 * t12) + t27 * t17 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t28 * t21 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t29 * t20 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t30 * t16 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t31 * t18 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - t32 * t19 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + t33 * t22 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t39 * t23 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t40 * t24 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t41 * t25 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t42 * t26 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t45 + t36 * cosP1_1 * t2 * sinP2_4;
    t16 = t12 * (t3 * (0.66466030423132831008e-5 * sinP1_4 * cosP2_1 + 0.34562335820029072126e-5 * cosP1_4 * sinP2_1) - 0.76568867047449021320e-4 * cosP1_2 * sinP2_1 * t5) + t13 * (t1 * (0.38922507415786585848e-4 * cosP1_1 * sinP2_2 + 0.11293907889498730647e-3 * cosP2_2 * sinP1_1) + t9 * (-0.40335385319638323737e-5 * cosP2_2 * sinP1_3 - 0.13900895505638066375e-5 * cosP1_3 * sinP2_2)) + t16 + t38 * (t34 * cosP2_3 + t35 * sinP2_3);
    t17 = -0.63807389206207517774e-4 * t3 * cosP1_4 * t14;
    t13 = t5 * t13 * (0.55603582022552265497e-5 * sinP1_2 * sinP2_2 - 0.16134154127855329495e-4 * cosP1_2 * cosP2_2);
    t1 = 0.30308509872948570944e-4 * t9 * t12 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.19142216761862255334e-5 * t1 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.53172824338506264815e-7 * t1 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.37980588813218760579e-8 * t5 * t7 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.63300981355364600966e-10 * t9 * t8 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.21100327118454866986e-10 * t3 * t10 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) + 0.50640785084291680771e-8 * t3 * t2 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.91153413151725025390e-7 * t9 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.89330344888690524879e-4 * t1 * t12 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.15951847301551879443e-5 * t11 * t12 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.63300981355364600961e-9 * t11 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + t17 + t13;
    bf[0] = t14 * (-0.14356662571396691500e-3 * cosP1_3 * t9 - 0.79759236507759397216e-5 * cosP1_5 * t11) + t15 * (0.28713325142793382998e-4 * cosP2_3 * t6 - 0.13399551733303578731e-2 * t43 - 0.79759236507759397218e-6 * cosP2_5 * t4) + t39 * t23 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t40 * t24 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t41 * t25 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t42 * t26 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t37;
    bf[1] = t16;
    bf[2] = t1;
}

static void idsbf_6_8_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t6, t7, t8, t9;
    t1 = LegP1[20];
    t2 = LegP2[36];
    t3 = LegP1[15];
    t4 = LegP2[41];
    t5 = LegP1[18];
    t6 = LegP2[39];
    t7 = LegP1[16];
    t8 = LegP2[37];
    t9 = LegP2[38];
    t10 = LegP2[40];
    t11 = LegP2[42];
    t12 = LegP1[17];
    t13 = LegP2[43];
    t14 = LegP2[44];
    t15 = LegP1[19];
    t16 = t1 * t9;
    t17 = t1 * t11;
    t18 = t7 * t11;
    t19 = t12 * t13;
    t20 = t5 * t14;
    t21 = t5 * t10;
    t22 = t15 * t6;
    t23 = t1 * t10;
    t24 = t12 * t4;
    t25 = t5 * t11;
    t26 = t15 * t13;
    t27 = t1 * t14;
    t28 = 0.18254405064102263200e-6;
    t29 = 0.24892370541957631639e-7;
    t30 = 0.11063275796425614062e-7;
    t31 = -0.11063275796425614060e-7;
    t32 = 0.47414039127538345982e-9;
    t33 = -0.27658189491064035150e-9;
    t34 = 0.19755849636474310824e-9;
    t35 = 0.74084436136778665588e-10;
    t36 = 0.72438115333739139679e-10;
    t37 = -0.65852832121581036082e-11;
    t38 = -0.82316040151976295092e-12;
    t39 = 0.16594913694638421092e-7;
    t40 = cosP2_3 * t6;
    t41 = cosP2_1 * t8;
    t42 = 0.13939727503496273718e-4 * t40 - 0.69698637517481368581e-6 * cosP2_5 * t4 - 0.83638365020977642298e-3 * t41;
    t43 = cosP1_3 * t5;
    t44 = cosP2_4 * t10;
    t45 = 0.13939727503496273717e-5 * t44;
    t46 = (0.16727673004195528462e-2 * t2 + t45) * t7 * cosP1_1;
    t47 = 0.11284541312354126341e-5 * t12 * sinP1_2 * t6 * sinP2_3;
    t42 = t2 * (-0.29538946376456389542e-5 * cosP1_5 * t1 + 0.26585051738810750590e-3 * t43) + t3 * t42 + t28 * t16 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - t36 * t17 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - t30 * t18 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t32 * t19 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t35 * t20 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + t29 * t21 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t31 * t22 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t33 * t23 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t39 * t24 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t34 * t25 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t37 * t26 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t38 * t27 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t46 + t47;
    t46 = sinP1_3 * t5;
    t47 = sinP1_1 * t7;
    t48 = t7 * cosP1_1;
    t49 = 0.16727673004195528462e-2 * t47 - 0.29538946376456389542e-5 * sinP1_5 * t1 - 0.26585051738810750590e-3 * t46;
    t50 = t6 * sinP2_3;
    t51 = sinP2_1 * t8;
    t52 = t8 * (0.87953042581583631790e-5 * cosP1_4 * sinP2_1 - 0.58082197931234473824e-5 * sinP1_4 * cosP2_1) * t15;
    t16 = t2 * t49 - t28 * t16 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) - t29 * t21 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t3 * (-0.13939727503496273718e-4 * t50 - 0.83638365020977642298e-3 * t51 - 0.69698637517481368581e-6 * sinP2_5 * t4) + t30 * t18 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t31 * t22 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t32 * t19 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + t33 * t23 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t34 * t25 * (cosP1_3 * sinP2_6 - sinP1_3 * cosP2_6) - t35 * t20 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + t36 * t17 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t37 * t26 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t38 * t27 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t39 * t24 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t52;
    t17 = 0.10036603802517317077e-1 * t2 + 0.83638365020977642306e-5 * t44;
    t18 = (0.47793351440558652745e-5 * sinP1_2 * sinP2_2 - 0.79655585734264421245e-5 * cosP1_2 * cosP2_2) * t12 * t9;
    t2 = -0.59077892752912779088e-4 * t15 * cosP1_4 * t2;
    t1 = t3 * t17 + 0.27879455006992547433e-3 * t7 * t8 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.14603524051281810561e-5 * t1 * t8 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.26883760185314242174e-4 * t5 * t8 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.46465758344987579058e-5 * t7 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.23232879172493789527e-6 * t7 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.31609359418358897316e-8 * t12 * t11 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.11853509781884586496e-9 * t5 * t13 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) - 0.16463208030395259019e-10 * t15 * t14 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) - 0.55316378982128070305e-8 * t15 * t10 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.19913896433566105310e-6 * t5 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + t18 + t2;
    bf[0] = t8 * (t12 * (0.12744893717482307399e-3 * sinP1_2 * sinP2_1 - 0.87621144307690863370e-4 * cosP1_2 * cosP2_1) + t15 * (0.87953042581583631790e-5 * cosP1_4 * cosP2_1 + 0.58082197931234473824e-5 * sinP1_4 * sinP2_1)) + t9 * ((0.27879455006992547435e-4 * t48 - 0.49784741083915263279e-6 * t43) * cosP2_2 + (0.29870844650349157966e-6 * t46 - 0.16727673004195528461e-4 * t47) * sinP2_2) + t42 + 0.46465758344987579050e-6 * t40 * t12 * cosP1_2;
    bf[1] = t12 * ((0.46465758344987579050e-6 * t50 + 0.87621144307690863370e-4 * t51) * cosP1_2 + (0.12744893717482307399e-3 * t41 - 0.11284541312354126341e-5 * t40) * sinP1_2) + t9 * ((-0.27879455006992547435e-4 * t47 - 0.49784741083915263279e-6 * t46) * cosP2_2 + (-0.29870844650349157966e-6 * t43 - 0.16727673004195528461e-4 * t48) * sinP2_2) + t16 + t47 * t45;
    bf[2] = t1;
}

static void idsbf_6_8_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t6, t7, t8, t9;
    t1 = LegP1[30];
    t2 = LegP2[39];
    t3 = LegP1[29];
    t4 = LegP2[42];
    t5 = LegP2[43];
    t6 = LegP1[31];
    t7 = LegP2[44];
    t8 = LegP1[33];
    t9 = LegP2[40];
    t10 = LegP1[32];
    t11 = LegP1[35];
    t12 = LegP2[38];
    t13 = LegP2[37];
    t14 = LegP2[41];
    t15 = LegP1[34];
    t16 = LegP1[28];
    t17 = LegP2[36];
    t18 = t1 * t14;
    t19 = t6 * t4;
    t20 = t10 * t5;
    t21 = t8 * t7;
    t22 = t11 * t12;
    t23 = t15 * t13;
    t24 = t3 * t4;
    t25 = t1 * t5;
    t26 = t6 * t7;
    t27 = t8 * t4;
    t28 = t6 * t9;
    t29 = t10 * t2;
    t30 = t8 * t9;
    t11 = t11 * t4;
    t31 = t8 * t12;
    t32 = -0.77434079448534599012e-3;
    t33 = cosP1_4 * t10;
    t34 = 0.17514851303835206920e-5 * t33;
    t35 = 0.10140177070641435585e-5 * sinP1_4 * t10;
    t36 = cosP2_3 * t2;
    t37 = cosP1_3 * t6;
    t38 = -0.27347750281426902034e-5 * cosP1_5 * t8 + 0.32817300337712282444e-4 * t37;
    t39 = cosP2_4 * t9;
    t40 = 0.12905679908089099836e-5 * t39;
    t41 = (0.15486815889706919805e-2 * t17 + t40) * t3 * cosP1_1;
    t42 = t2 * (0.51213015508290078713e-6 * sinP1_2 * sinP2_3 - 0.10242603101658015743e-6 * cosP1_2 * cosP2_3) * t1;
    t38 = t12 * (t3 * (0.13827514187238321255e-4 * cosP1_1 * cosP2_2 - 0.82965085123429927529e-5 * sinP1_1 * sinP2_2) + t6 * (0.27655028374476642510e-6 * sinP1_3 * sinP2_2 - 0.46091713957461070850e-6 * cosP1_3 * cosP2_2)) + t13 * ((-0.9218342791492214173e-5 * cosP1_2 * t1 + t16 * t32 + t34) * cosP2_1 + (-t35 + 0.46091713957461070843e-4 * sinP1_2 * t1) * sinP2_1) + t16 * (0.12905679908089099837e-4 * t36 - 0.64528399540445499179e-6 * cosP2_5 * t14) + t17 * t38 + 0.15363904652487023614e-7 * t18 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.10242603101658015741e-7 * t29 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.25606507754145039357e-9 * t30 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.50806563004256030474e-12 * t11 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.25606507754145039356e-8 * t31 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t41 + t42;
    t41 = t23 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t42 = t24 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t43 = t25 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t44 = t26 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t45 = t27 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t46 = t28 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t30 = t30 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t47 = sinP2_3 * t2;
    t48 = sinP2_1 * t13;
    t32 = t48 * t32 - 0.64528399540445499179e-6 * sinP2_5 * t14 - 0.12905679908089099837e-4 * t47;
    t49 = sinP1_3 * t6;
    t50 = sinP1_1 * t3;
    t51 = 0.15486815889706919805e-2 * t50 - 0.32817300337712282444e-4 * t49 - 0.27347750281426902034e-5 * sinP1_5 * t8;
    t11 = 0.10161312600851206093e-11 * t45 - 0.76209844506384045696e-12 * t21 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.12803253877072519680e-8 * t22 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.25606507754145039357e-9 * t30 - 0.61455618609948094458e-7 * t41 - 0.10242603101658015741e-7 * t29 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t16 * t32 + t51 * t17 - 0.50806563004256030474e-12 * t11 * (cosP1_7 * sinP2_6 - sinP1_7 * cosP2_6) + 0.18290362681532170971e-9 * t19 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.15363904652487023614e-7 * t18 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t35 * t13 * cosP2_1 - 0.12193575121021447314e-9 * t43 - 0.91451813407660854848e-11 * t44 - 0.60967875605107236568e-11 * t20 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.54871088044596512914e-8 * t42 - 0.30727809304974047231e-8 * t46 - 0.25606507754145039356e-8 * t31 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t11 = t1 * ((-0.10242603101658015743e-6 * t47 + 0.9218342791492214173e-5 * t48) * cosP1_2 + (0.46091713957461070843e-4 * t13 * cosP2_1 - 0.51213015508290078713e-6 * t36) * sinP1_2) + t12 * ((-0.46091713957461070850e-6 * t49 - 0.13827514187238321255e-4 * t50) * cosP2_2 + (-0.27655028374476642510e-6 * t37 - 0.82965085123429927529e-5 * t3 * cosP1_1) * sinP2_2) + t11 + t48 * t34 + t50 * t40;
    t18 = t3 * t13 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t29 = -0.10840771122794843863e-1 * t16 + 0.16408650168856141219e-4 * t33;
    t16 = -0.90339759356623698858e-5 * t39 * t16;
    t30 = (0.46091713957461070848e-5 * cosP1_2 * cosP2_2 - 0.27655028374476642508e-5 * sinP1_2 * sinP2_2) * t12 * t1;
    t1 = t17 * t29 + 0.24582247443979237782e-6 * t8 * t13 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.11062011349790657003e-4 * t6 * t13 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.36873371165968856676e-5 * t3 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.18436685582984428336e-6 * t3 * t14 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.18290362681532170970e-8 * t1 * t4 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.48774300484085789256e-10 * t6 * t5 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.45725906703830427414e-11 * t10 * t7 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) - 0.10161312600851206094e-11 * t15 * t4 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.15363904652487023613e-8 * t10 * t9 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.81940824813264125943e-7 * t6 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.22124022699581314004e-3 * t18 + 0.25606507754145039356e-8 * t15 * t12 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + t16 + t30;
    bf[0] = 0.18290362681532170971e-9 * t19 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.60967875605107236568e-11 * t20 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) - 0.76209844506384045696e-12 * t21 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) - 0.12803253877072519680e-8 * t22 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.61455618609948094458e-7 * t23 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) - 0.54871088044596512914e-8 * t24 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.12193575121021447314e-9 * t25 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.91451813407660854848e-11 * t26 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - 0.10161312600851206093e-11 * t27 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.30727809304974047231e-8 * t28 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t38;
    bf[1] = t11;
    bf[2] = t1;
}

static void idsbf_6_8_7_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t6, t7, t8, t9;
    t1 = LegP1[30];
    t2 = LegP2[43];
    t3 = LegP1[31];
    t4 = LegP2[44];
    t5 = LegP1[33];
    t6 = LegP2[42];
    t7 = LegP2[40];
    t8 = LegP1[32];
    t9 = LegP2[39];
    t10 = LegP1[34];
    t11 = LegP2[41];
    t12 = LegP1[35];
    t13 = LegP1[29];
    t14 = LegP2[38];
    t15 = LegP2[37];
    t16 = LegP1[28];
    t17 = LegP2[36];
    t18 = t8 * t9;
    t19 = t10 * t2;
    t20 = t8 * t11;
    t21 = t10 * t11;
    t22 = t5 * t7;
    t23 = t12 * t6;
    t24 = t10 * t9;
    t25 = t5 * t14;
    t26 = t1 * t11;
    t27 = t26 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t28 = t3 * t6;
    t29 = t28 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t30 = t8 * t2;
    t31 = t30 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t32 = t5 * t4;
    t33 = t32 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t34 = t12 * t14;
    t35 = t34 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t36 = t10 * t15;
    t37 = t36 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    t38 = t13 * t6;
    t39 = t38 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t40 = t1 * t2;
    t41 = t40 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t42 = t3 * t4;
    t43 = t5 * t6;
    t44 = t43 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t45 = t3 * t7;
    t46 = t45 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t47 = -0.43685933004689390906e-6 * cosP2_5 * t11 - 0.52423119605627269083e-4 * cosP2_3 * t9 + 0.13105779901406817269e-2 * cosP2_1 * t15;
    t48 = cosP1_3 * t3;
    t49 = -0.49427512771019996568e-4 * t48 - 0.11233525629777271946e-5 * cosP1_5 * t5;
    t27 = t47 * t16 + t49 * t17 - 0.22536394010355638164e-7 * t25 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.10318861726353314178e-10 * t31 + 0.20637723452706628355e-10 * t42 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - 0.35538159785560814032e-7 * t37 - 0.16547701895715678375e-9 * t20 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.63038864364631155719e-10 * t22 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.46903916937969609902e-12 * t33 - 0.78010594651231055178e-8 * t27 + 0.66866223986769475883e-8 * t39 + 0.10944247285526242310e-12 * t19 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) - 0.93807833875939219804e-13 * t23 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.45965838599210217703e-11 * t21 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.24390036807744197149e-11 * t44 - 0.27737100320437708517e-8 * t46 - 0.86678438501367839094e-9 * t35 + 0.12382634071623977016e-9 * t29 + 0.52007063100820703453e-8 * t18 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.51594308631766570892e-9 * t41 - 0.27579503159526130620e-9 * t24 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t29 = cosP1_4 * t8;
    t31 = 0.11961624513188761794e-5 * sinP1_2;
    t33 = -0.67609182031066914483e-6 * cosP1_2;
    t35 = 0.17474373201875756364e-5 * t13;
    t22 = t22 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t23 = t23 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t21 = t21 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t20 = t20 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t24 = t24 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t26 = t26 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t28 = t28 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t30 = t30 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t32 = t32 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t34 = t34 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t36 = t36 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t37 = t40 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t25 = t25 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t39 = 0.52423119605627269083e-4 * sinP2_3 * t9 + 0.13105779901406817269e-2 * sinP2_1 * t15 - 0.43685933004689390906e-6 * sinP2_5 * t11;
    t40 = sinP1_3 * t3;
    t41 = -0.11233525629777271946e-5 * sinP1_5 * t5 + 0.49427512771019996568e-4 * t40;
    t16 = t39 * t16 + t41 * t17 + 0.22536394010355638164e-7 * t25 + 0.10318861726353314178e-10 * t30 + 0.20637723452706628355e-10 * t42 * (cosP1_3 * sinP2_8 - sinP1_3 * cosP2_8) + 0.12382634071623977016e-9 * t28 - 0.35538159785560814032e-7 * t36 + 0.16547701895715678375e-9 * t20 - 0.63038864364631155719e-10 * t22 + 0.46903916937969609902e-12 * t32 - 0.78010594651231055178e-8 * t26 - 0.66866223986769475883e-8 * t38 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - 0.10944247285526242310e-12 * t19 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.93807833875939219804e-13 * t23 - 0.45965838599210217703e-11 * t21 + 0.24390036807744197149e-11 * t43 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.27737100320437708517e-8 * t45 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.86678438501367839094e-9 * t34 + 0.52007063100820703453e-8 * t18 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - 0.51594308631766570892e-9 * t37 + 0.27579503159526130620e-9 * t24;
    t16 = t1 * (t15 * (0.20282754609320074353e-4 * sinP1_2 * cosP2_1 - 0.26523602181418558749e-4 * cosP1_2 * sinP2_1) + t9 * (-t31 * cosP2_3 + t33 * sinP2_3)) + t14 * ((0.11441553882180554762e-5 * t40 - 0.61784390963774995711e-4 * t13 * sinP1_1) * cosP2_2 + (-0.5616762814888635969e-5 * cosP1_1 * t13 + 0.10401412620164140676e-6 * t48) * sinP2_2) + t16 + t35 * cosP1_1 * t7 * sinP2_4 + t8 * t15 * (-0.12169652765592044612e-5 * cosP1_4 * sinP2_1 + 0.13417822280011741491e-5 * sinP1_4 * cosP2_1);
    t18 = t3 * t2 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t4 = t8 * t4 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t19 = t10 * t6 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t20 = t3 * t9 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t21 = t13 * t15 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t17 = -0.89868205038218175566e-5 * t29 * t17;
    t22 = t1 * t14 * (-0.4160565048065656272e-6 * sinP1_2 * sinP2_2 + 0.45766215528722219044e-5 * cosP1_2 * cosP2_2);
    t2 = -0.18722542716295453245e-5 * t13 * t9 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.15602118930246211039e-7 * t13 * t11 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.61913170358119885074e-10 * t18 - 0.45965838599210217706e-10 * t5 * t11 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.46806356790738633109e-4 * t21 + 0.10944247285526242309e-12 * t12 * t2 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.37523133550375687914e-11 * t4 - 0.35538159785560814032e-6 * t5 * t15 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.10401412620164140692e-7 * t10 * t14 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + t17 - 0.11256940065112706376e-11 * t19 + 0.31204237860492422074e-7 * t20 + 0.37445085432590906384e-6 * t3 * t15 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.49530536286495908059e-9 * t1 * t6 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + t22 - 0.50431091491704924569e-9 * t8 * t7 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.27579503159526130620e-9 * t12 * t9 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    bf[0] = t14 * (t13 * (0.61784390963774995711e-4 * cosP1_1 * cosP2_2 - 0.5616762814888635969e-5 * sinP1_1 * sinP2_2) + t3 * (-0.10401412620164140676e-6 * sinP1_3 * sinP2_2 + 0.11441553882180554762e-5 * cosP1_3 * cosP2_2)) + t15 * ((-0.12169652765592044612e-5 * t29 + 0.26523602181418558749e-4 * cosP1_2 * t1) * cosP2_1 + (0.20282754609320074353e-4 * sinP1_2 * t1 - 0.13417822280011741491e-5 * sinP1_4 * t8) * sinP2_1) + t27 - t35 * sinP1_1 * t7 * sinP2_4 + t1 * t9 * (t33 * cosP2_3 + t31 * sinP2_3);
    bf[1] = t16;
    bf[2] = t2;
}

static void idsbf_6_8_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t7, t8, t9;
    t1 = LegP1[34];
    t2 = LegP2[39];
    t3 = LegP1[35];
    t4 = LegP2[40];
    t5 = LegP1[29];
    t6 = LegP2[44];
    t7 = LegP1[33];
    t8 = LegP2[38];
    t9 = LegP1[32];
    t10 = LegP2[37];
    t11 = LegP1[30];
    t12 = LegP2[41];
    t13 = LegP1[31];
    t14 = LegP2[42];
    t15 = LegP2[43];
    t16 = LegP1[28];
    t17 = LegP2[36];
    t18 = t3 * t14;
    t19 = t1 * t2;
    t20 = t3 * t4;
    t21 = t3 * t6;
    t22 = t7 * t8;
    t23 = t11 * t12;
    t24 = t13 * t14;
    t25 = t9 * t15;
    t26 = t7 * t6;
    t27 = t3 * t8;
    t28 = t27 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t29 = t1 * t10;
    t30 = t5 * t14;
    t31 = t30 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t32 = t11 * t15;
    t33 = t32 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t34 = t13 * t6;
    t35 = t34 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t36 = t7 * t14;
    t37 = t36 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t38 = t13 * t4;
    t39 = t38 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t40 = t9 * t2;
    t41 = t40 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t42 = t1 * t15;
    t43 = t42 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t44 = t9 * t12;
    t45 = t1 * t12;
    t46 = t45 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t47 = t7 * t4;
    t48 = 0.32894140944200726142e-7;
    t49 = 0.16266333433945414029e-7;
    t50 = 0.92537363535333910917e-8;
    t51 = -0.37954778012539299398e-8;
    t52 = -0.37954778012539299396e-8;
    t53 = 0.10926375488458283159e-8;
    t54 = 0.57233395415733864168e-9;
    t55 = -0.18073703815494904475e-9;
    t56 = -0.18073703815494904474e-9;
    t57 = 0.10679915890974261734e-9;
    t58 = 0.32861279664536189954e-10;
    t59 = 0.18073703815494904474e-10;
    t60 = -0.52030359468848967428e-11;
    t61 = 0.35599719636580872449e-11;
    t62 = 0.29666433030484060373e-12;
    t63 = -0.13692199860223412480e-12;
    t64 = 0.13040190343069916648e-13;
    t65 = 0.68460999301117062402e-12;
    t66 = 0.30560990088018656654e-8;
    t28 = t53 * t19 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t58 * t20 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - t64 * t21 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + t48 * t22 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t52 * t23 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t56 * t24 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t60 * t25 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t63 * t26 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t55 * t28 + t51 * t29 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t49 * t31 + t54 * t33 + t59 * t35 + t61 * t37 - t50 * t39 + t66 * t41 + t62 * t43 - t57 * t44 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t65 * t46;
    t31 = 0.19560285514604874972e-13;
    t33 = 0.70104063284343871899e-10;
    t35 = cosP1_4 * t9;
    t37 = cosP2_4 * t4;
    t39 = 0.36436586892037727414e-6 * t37;
    t41 = t2 * (-0.79162822711867681603e-6 * cosP1_2 * cosP2_3 + 0.11928644518226636951e-6 * sinP1_2 * sinP2_3) * t11;
    t43 = t11 * (-0.37195682452288513412e-4 * cosP1_2 * sinP2_1 - 0.63004931500815237006e-4 * sinP1_2 * cosP2_1) + t9 * (0.13663720084514147782e-6 * cosP1_4 * sinP2_1 - 0.10475518731460846633e-5 * sinP1_4 * cosP2_1);
    t20 = t10 * t43 + t31 * t18 * (cosP1_7 * sinP2_6 - sinP1_7 * cosP2_6) - t48 * t22 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t52 * t23 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t56 * t24 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - t58 * t20 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t60 * t25 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t63 * t26 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t64 * t21 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + t8 * (t13 * (0.54221111446484713425e-6 * cosP1_3 * sinP2_2 + 0.55088649229628468831e-6 * cosP2_2 * sinP1_3) + t5 * (0.49579784306665621951e-4 * cosP2_2 * sinP1_1 + 0.48799000301836242085e-4 * cosP1_1 * sinP2_2)) + t11 * t2 * (-0.11928644518226636951e-6 * sinP1_2 * cosP2_3 - 0.79162822711867681603e-6 * cosP1_2 * sinP2_3) + t39 * t5 * sinP1_1;
    t21 = 0.92913296574696204937e-3 * sinP2_1 * t10 - 0.32792928202833954677e-4 * sinP2_3 * t2 + 0.27327440169028295568e-6 * sinP2_5 * t12;
    t22 = 0.24048147348744900093e-4 * sinP1_3 * t13 - 0.13117171281133581874e-2 * t5 * sinP1_1 + 0.18218293446018863706e-6 * sinP1_5 * t7;
    t19 = t16 * t21 + t17 * t22 + t33 * t47 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t49 * t30 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t50 * t38 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t51 * t29 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - t53 * t19 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - t54 * t32 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + t55 * t27 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t57 * t44 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t59 * t34 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - t61 * t36 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - t62 * t42 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + t65 * t45 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t66 * t40 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t20;
    t4 = t9 * t4 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t20 = t13 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t21 = t5 * t10 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t22 = t3 * t15 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7);
    t23 = t7 * t12 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t24 = -0.10493737024906865499e-1 * t16 + 0.43723904270445272891e-5 * t35;
    t25 = (-0.10844222289296942685e-4 * sinP1_2 * sinP2_2 + 0.11017729845925693766e-4 * cosP1_2 * cosP2_2) * t11 * t8;
    t26 = 0.29149269513630181931e-5 * t37 * t16;
    t1 = 0.67234178193641044651e-7 * t20 - 0.15609107840654690227e-9 * t3 * t2 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.32861279664536189952e-11 * t9 * t6 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) - 0.54768799440893649922e-12 * t1 * t14 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.50606370683385732528e-8 * t1 * t8 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.42380618614977229110e-13 * t22 + 0.17799859818290436225e-10 * t23 - 0.98682422832602178429e-7 * t7 * t10 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.68318600422570738918e-7 * t5 * t12 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.11446679083146772834e-9 * t13 * t15 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + t24 * t17 - 0.36147407630989808951e-8 * t11 * t14 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.23228324143674051236e-3 * t21 + 0.16824975188242529256e-8 * t4 + t25 + t26 - 0.10020061395310375041e-4 * t13 * t10 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.81982320507084886702e-5 * t5 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    bf[0] = t10 * ((0.92913296574696204937e-3 * t16 + 0.37195682452288513412e-4 * cosP1_2 * t11 + 0.13663720084514147782e-6 * t35) * cosP2_1 + (0.10475518731460846633e-5 * sinP1_4 * t9 - 0.63004931500815237006e-4 * sinP1_2 * t11) * sinP2_1) + t16 * (0.27327440169028295568e-6 * cosP2_5 * t12 + 0.32792928202833954677e-4 * cosP2_3 * t2) + t17 * (0.18218293446018863706e-6 * cosP1_5 * t7 - 0.24048147348744900093e-4 * cosP1_3 * t13) + t8 * (t13 * (0.55088649229628468831e-6 * cosP1_3 * cosP2_2 - 0.54221111446484713425e-6 * sinP1_3 * sinP2_2) + t5 * (-0.49579784306665621951e-4 * cosP1_1 * cosP2_2 + 0.48799000301836242085e-4 * sinP1_1 * sinP2_2)) - t31 * t18 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t33 * t47 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t28 + (-0.13117171281133581874e-2 * t17 + t39) * t5 * cosP1_1 + t41;
    bf[1] = t19;
    bf[2] = t1;
}

static void idsbf_6_8_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t9;
    t1 = LegP1[54];
    t2 = LegP2[40];
    t3 = LegP1[53];
    t4 = LegP2[39];
    t5 = LegP1[52];
    t6 = LegP2[38];
    t7 = LegP1[51];
    t8 = LegP2[37];
    t9 = LegP1[48];
    t10 = LegP1[47];
    t11 = LegP1[46];
    t12 = LegP2[42];
    t13 = LegP2[43];
    t14 = LegP2[44];
    t15 = LegP1[50];
    t16 = LegP1[49];
    t17 = LegP2[41];
    t18 = LegP1[45];
    t19 = LegP2[36];
    t20 = t15 * t14;
    t21 = t16 * t13;
    t22 = t9 * t12;
    t23 = t7 * t8;
    t24 = t11 * t12;
    t25 = t10 * t13;
    t26 = t9 * t14;
    t27 = t5 * t14;
    t28 = t7 * t13;
    t29 = t15 * t12;
    t30 = t16 * t17;
    t31 = t9 * t2;
    t32 = t16 * t4;
    t33 = t15 * t2;
    t34 = t7 * t17;
    t35 = t5 * t12;
    t36 = t3 * t13;
    t37 = t1 * t14;
    t38 = t37 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t39 = t5 * t2;
    t40 = t39 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t41 = t7 * t4;
    t42 = t41 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t43 = t15 * t6;
    t44 = t43 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t45 = t10 * t17;
    t46 = t45 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t47 = 0.95424287683899063150e-8;
    t48 = -0.35784107881462148682e-8;
    t49 = 0.20602971204478206814e-9;
    t50 = -0.17040051372124832705e-9;
    t51 = -0.49054693343995730510e-11;
    t52 = 0.38727389482101892510e-11;
    t53 = -0.12909129827367297504e-12;
    t54 = 0.58685936925597923823e-5 * cosP1_2 * t10;
    t55 = cosP1_4 * t16;
    t56 = -0.35784107881462148680e-6 * t55;
    t57 = -0.30201787051954053488e-4 * sinP1_2 * t10;
    t58 = 0.50097751034047008151e-6 * sinP1_4 * t16;
    t59 = t11 * (0.28627286305169718947e-4 * sinP1_1 * sinP2_2 - 0.29085322886052434445e-4 * cosP1_1 * cosP2_2) + t9 * (-0.51120154116374498113e-6 * sinP1_3 * sinP2_2 + 0.51938076582236490075e-6 * cosP1_3 * cosP2_2);
    t60 = 0.30839394792387379041e-6 * sinP1_2;
    t61 = -0.55042464123121777783e-6 * cosP1_2;
    t62 = cosP2_4 * t2;
    t63 = 0.34352743566203662728e-6 * t62;
    t64 = t10 * t4;
    t59 = t6 * t59 + t8 * ((0.87599496093819339974e-3 * t18 + t54 + t56) * cosP2_1 + (t57 + t58) * sinP2_1) + t53 * ((cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) * t2 * t1 + t20 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8)) + t51 * ((cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) * t4 * t3 + t21 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7)) + t50 * (t22 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) * t6 * t5) + t48 * t23 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t47 * t24 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t49 * t25 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t52 * t26 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + (-0.12366987683833318585e-2 * t19 + t63) * t11 * cosP1_1 + t64 * (t61 * cosP2_3 + t60 * sinP2_3);
    t65 = -0.35784107881462148680e-8;
    t66 = 0.20448061646549799246e-8;
    t67 = 0.19828423414836168965e-8;
    t68 = 0.29432816006397438306e-10;
    t69 = -0.12909129827367297503e-10;
    t70 = 0.25818259654734595006e-12;
    t71 = 0.22129936846915367149e-12;
    t72 = -0.18441614039096139290e-13;
    t73 = 0.79913660836083270260e-14;
    t74 = -0.13318943472680545043e-14;
    t75 = 0.10245341132831188495e-15;
    t76 = 0.51226705664155942474e-16;
    t77 = 0.64545649136836487519e-12;
    t78 = 0.66094744716120563221e-10;
    t79 = 0.28813177774683808027e-8;
    t80 = 0.25764557674652747052e-6 * cosP2_5 * t17 + 0.30917469209583296458e-4 * cosP2_3 * t4;
    t81 = t29 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t54 = (t57 - t58) * cosP2_1 + (-t54 + t56) * sinP2_1;
    t56 = t11 * (0.29085322886052434445e-4 * cosP2_2 * sinP1_1 + 0.28627286305169718947e-4 * cosP1_1 * sinP2_2) + t9 * (0.51938076582236490075e-6 * cosP2_2 * sinP1_3 + 0.51120154116374498113e-6 * cosP1_3 * sinP2_2);
    t1 = -t47 * t24 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t48 * t23 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - t49 * t25 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + t50 * (t22 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) * t6 * t5) + t51 * (t21 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) * t4 * t3) - t52 * t26 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + t53 * (t20 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) * t2 * t1) + t6 * t56 - t71 * t81 - t73 * t28 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + t75 * t27 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + t8 * t54 + t63 * t11 * sinP1_1 - t60 * t64 * cosP2_3;
    t20 = 0.51529115349305494088e-5 * sinP1_3 * t9 - 0.12366987683833318585e-2 * t11 * sinP1_1 + 0.17176371783101831363e-6 * sinP1_5 * t15;
    t21 = (-0.30917469209583296458e-4 * t18 + t61 * t10) * t4 * sinP2_3;
    t1 = t18 * (0.87599496093819339974e-3 * t8 * sinP2_1 + 0.25764557674652747052e-6 * t17 * sinP2_5) + t19 * t20 + t65 * t45 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - t66 * t43 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t67 * t31 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t68 * t41 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t69 * t30 * (cosP1_4 * sinP2_5 - sinP1_4 * cosP2_5) - t70 * t39 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t72 * t35 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t74 * t36 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + t76 * t37 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + t77 * t34 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t78 * t33 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t79 * t32 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t1 + t21;
    t20 = t15 * t8 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t21 = t9 * t8 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t22 = t11 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t23 = t11 * t17 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t24 = t9 * t13 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t25 = t16 * t14 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t14 = t3 * t14 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8);
    t13 = t5 * t13 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7);
    t26 = 0.11130288915449986727e-1 * t18 - 0.17176371783101831363e-5 * t55;
    t37 = (-0.72713307215131086115e-5 * cosP1_2 * cosP2_2 + 0.71568215762924297369e-5 * sinP1_2 * sinP2_2) * t10 * t6;
    t39 = -0.30917469209583296454e-5 * t62 * t18;
    t2 = t70 * t3 * t2 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.19466554687515408887e-3 * t11 * t8 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.66094744716120563214e-9 * t16 * t2 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.12909129827367297503e-11 * t25 + 0.19621877337598292205e-10 * t5 * t4 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.58865632012794876616e-10 * t24 + t26 * t19 - 0.51636519309469190022e-11 * t15 * t17 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.28627286305169718948e-7 * t20 + 0.57254572610339437896e-7 * t23 - t75 * t14 + 0.10224030823274899623e-8 * t7 * t6 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.23856071920974765788e-8 * t10 * t12 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.34575813329620569632e-7 * t9 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + t39 + 0.51529115349305494100e-5 * t21 + 0.68705487132407325470e-5 * t22 + 0.53275773890722180179e-14 * t13 + 0.11064968423457683575e-12 * t7 * t12 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + t37;
    bf[0] = t59 + t70 * t40 + t71 * t29 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - t67 * t31 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + (-0.51529115349305494088e-5 * cosP1_3 * t9 + 0.17176371783101831363e-6 * cosP1_5 * t15) * t19 + t80 * t18 + t69 * t30 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t79 * t32 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t68 * t42 + t65 * t46 + t66 * t44 + t74 * t36 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) - t75 * t27 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + t76 * t38 + t78 * t33 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t77 * t34 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t72 * t35 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t73 * t28 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    bf[1] = t1;
    bf[2] = t2;
}

static void idsbf_6_8_9_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t8, t9;
    t1 = LegP1[53];
    t2 = LegP2[41];
    t3 = LegP1[46];
    t4 = LegP2[40];
    t5 = LegP1[52];
    t6 = LegP1[51];
    t7 = LegP2[39];
    t8 = LegP1[50];
    t9 = LegP2[38];
    t10 = LegP1[49];
    t11 = LegP2[37];
    t12 = LegP1[47];
    t13 = LegP1[48];
    t14 = LegP2[42];
    t15 = LegP1[45];
    t16 = LegP2[36];
    t17 = LegP2[43];
    t18 = LegP2[44];
    t19 = LegP1[54];
    t20 = t1 * t2;
    t21 = t5 * t4;
    t22 = t6 * t7;
    t23 = t8 * t9;
    t24 = t12 * t2;
    t25 = t13 * t14;
    t26 = t10 * t17;
    t27 = t8 * t18;
    t28 = t19 * t4;
    t29 = t1 * t7;
    t30 = t5 * t9;
    t31 = t6 * t11;
    t32 = t3 * t14;
    t33 = t12 * t17;
    t34 = t13 * t18;
    t35 = t5 * t18;
    t36 = t6 * t17;
    t37 = t8 * t14;
    t38 = t10 * t2;
    t39 = t13 * t4;
    t40 = t39 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t41 = t10 * t7;
    t42 = t41 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t43 = t8 * t4;
    t44 = t6 * t2;
    t45 = t5 * t14;
    t46 = t1 * t17;
    t47 = t46 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t48 = t19 * t18;
    t49 = t48 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t50 = -0.56778829826459530240e-11;
    t51 = 0.30417230264174748344e-13;
    t52 = 0.20278153509449832230e-13;
    t53 = 0.64890091230239463155e-12;
    t54 = cosP2_3 * t7;
    t55 = cosP2_1 * t11;
    t56 = -0.12465360569292508773e-2 * t55 - 0.24283169940180211887e-5 * t54 + 0.10117987475075088289e-5 * cosP2_5 * t2;
    t57 = cosP1_3 * t13;
    t58 = 0.47217274883683745348e-6 * cosP1_5 * t8 + 0.36829474409273321376e-4 * t57;
    t59 = 0.83642029793954063182e-6 * t3;
    t60 = t59 * sinP1_1 * t4 * sinP2_4;
    t61 = t11 * (0.78695458139472908917e-6 * sinP1_4 * sinP2_1 - 0.15739091627894581784e-6 * cosP1_4 * cosP2_1) * t10;
    t47 = t60 + t61 + t56 * t15 + t58 * t16 + 0.32120595158968534248e-9 * t23 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.60347784844122700722e-10 * t22 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t50 * t43 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.17236430483032357395e-11 * t21 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - t51 * t20 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - 0.28164102096458100318e-16 * t49 + 0.22531281677166480254e-15 * t47 + t52 * t45 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.70973537283074412801e-13 * t27 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t53 * t44 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.39745180878521671168e-11 * t26 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + 0.22143743632319216796e-9 * t25 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.11242208305638986987e-7 * t24 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t49 = -0.28616530232535603246e-8;
    t56 = 0.44287487264638433592e-9;
    t58 = 0.45423063861167624198e-10;
    t60 = 0.55359359080798041987e-11;
    t61 = 0.12166892105669899338e-11;
    t62 = 0.10815015205039910523e-13;
    t63 = 0.95757947127957541085e-15;
    t64 = sinP2_3 * t7;
    t65 = sinP2_1 * t11;
    t54 = (-0.53512911534841578066e-4 * t55 - 0.26736015388683263604e-6 * t54) * cosP1_2 + (-0.21339755401976549852e-6 * t64 + 0.25812110269747114122e-4 * t65) * sinP1_2;
    t55 = t13 * (0.5845948318932273228e-7 * cosP1_3 * cosP2_2 - 0.58909171521548291816e-6 * sinP1_3 * sinP2_2) + t3 * (-0.51840070938962496801e-4 * sinP1_1 * sinP2_2 + 0.5144434520660400443e-5 * cosP1_1 * cosP2_2);
    t26 = t26 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t27 = t27 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t66 = t28 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t67 = t29 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t68 = t30 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t69 = t31 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t70 = t32 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t71 = t33 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t72 = cosP1_4 * t10;
    t73 = (-0.78695458139472908917e-6 * sinP1_4 * t10 + 0.25812110269747114122e-4 * sinP1_2 * t12) * cosP2_1 + (-0.15739091627894581784e-6 * t72 + 0.53512911534841578066e-4 * cosP1_2 * t12) * sinP2_1;
    t74 = sinP1_3 * t13;
    t57 = (-0.5144434520660400443e-5 * t3 * sinP1_1 + 0.5845948318932273228e-7 * t74) * cosP2_2 + (0.58909171521548291816e-6 * t57 - 0.51840070938962496801e-4 * cosP1_1 * t3) * sinP2_2;
    t20 = t11 * t73 + t49 * t41 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t50 * t43 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t51 * t20 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + t52 * t45 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t53 * t44 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t56 * t39 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - t58 * t38 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t60 * t34 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - t61 * t37 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - t62 * t36 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + t63 * t35 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + t9 * t57 + t12 * t7 * (0.21339755401976549852e-6 * sinP1_2 * cosP2_3 - 0.26736015388683263604e-6 * cosP1_2 * sinP2_3);
    t39 = 0.10117987475075088289e-5 * sinP2_5 * t2 + 0.24283169940180211887e-5 * t64 - 0.12465360569292508773e-2 * t65;
    t41 = t59 * cosP1_1 * t4 * sinP2_4;
    t15 = t20 - 0.19486494396440910780e-7 * t70 - t41 + t39 * t15 + (-0.36829474409273321376e-4 * t74 + 0.47217274883683745348e-6 * sinP1_5 * t8) * t16 - 0.33385951937958203785e-9 * t71 - 0.32120595158968534248e-9 * t23 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + 0.60347784844122700722e-10 * t22 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.17236430483032357395e-11 * t21 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.12572455175858895983e-11 * t67 - 0.50695383773624580572e-13 * t66 - 0.28164102096458100318e-16 * t48 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + 0.22531281677166480254e-15 * t46 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.70973537283074412801e-13 * t27 + 0.39745180878521671168e-11 * t26 + 0.53534325264947557081e-11 * t68 + 0.22143743632319216796e-9 * t25 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.44968833222555947951e-8 * t69 + 0.11242208305638986987e-7 * t24 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t20 = t3 * t11 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t19 = t19 * t2 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t21 = t1 * t4 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t22 = t5 * t7 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t23 = t6 * t9 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t24 = t8 * t11 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t11 = t13 * t11 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t25 = t3 * t2 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t26 = t12 * t14 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t27 = t12 * t9 * (-0.23563668608619316729e-5 * sinP1_2 * sinP2_2 + 0.23383793275729092918e-6 * cosP1_2 * cosP2_2);
    t16 = 0.37773819906946996286e-5 * t72 * t16;
    t1 = -0.27700801265094463942e-4 * t20 - 0.28330364930210247210e-5 * t11 - 0.53962599867067137532e-7 * t3 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + t16 - 0.17169918139521361948e-7 * t13 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.45423063861167624196e-10 * t10 * t4 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.17601437246202454378e-10 * t22 - 0.81112614037799328922e-12 * t21 - t51 * t19 - 0.45062563354332960510e-15 * t1 * t18 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + 0.31543794348033072359e-14 * t5 * t17 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.24333784211339798677e-12 * t6 * t14 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.56778829826459530248e-12 * t10 * t18 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) + 0.64890091230239463149e-11 * t8 * t2 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.23847108527113002703e-10 * t13 * t17 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.64241190317937068501e-10 * t23 + 0.88574974529276867198e-9 * t26 + 0.22484416611277973976e-7 * t25 + 0.44968833222555947951e-7 * t24 + t27;
    bf[0] = t12 * t54 + t9 * t55 - 0.50695383773624580572e-13 * t28 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - 0.12572455175858895983e-11 * t29 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.53534325264947557081e-11 * t30 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.44968833222555947951e-8 * t31 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.19486494396440910780e-7 * t32 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.33385951937958203785e-9 * t33 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t60 * t34 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - t63 * t35 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + t62 * t36 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + t61 * t37 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t58 * t38 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - t56 * t40 + t49 * t42 + t47;
    bf[1] = t15;
    bf[2] = t1;
}

static void idsbf_6_8_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t8, t9;
    t1 = LegP1[45];
    t2 = LegP2[37];
    t3 = LegP1[48];
    t4 = LegP2[36];
    t5 = LegP2[39];
    t6 = LegP1[50];
    t7 = LegP1[46];
    t8 = LegP2[41];
    t9 = LegP1[53];
    t10 = LegP1[52];
    t11 = LegP2[40];
    t12 = LegP1[51];
    t13 = LegP2[38];
    t14 = LegP1[49];
    t15 = LegP1[47];
    t16 = LegP2[42];
    t17 = LegP2[43];
    t18 = LegP2[44];
    t19 = LegP1[54];
    t20 = t10 * t18;
    t21 = t12 * t17;
    t22 = t6 * t16;
    t23 = t14 * t8;
    t24 = t3 * t11;
    t25 = t14 * t5;
    t26 = t6 * t11;
    t27 = t12 * t8;
    t28 = t10 * t16;
    t29 = t9 * t8;
    t30 = t9 * t17;
    t31 = t19 * t18;
    t32 = t31 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t33 = t19 * t16;
    t34 = t33 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t35 = t10 * t11;
    t36 = t12 * t5;
    t37 = t36 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t38 = t6 * t13;
    t39 = t38 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t40 = t15 * t8;
    t41 = t40 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t42 = t3 * t16;
    t43 = t42 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t44 = t14 * t17;
    t45 = t44 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t46 = t6 * t18;
    t47 = t46 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t48 = t19 * t11;
    t49 = t48 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t50 = t9 * t5;
    t51 = t50 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t52 = t10 * t13;
    t53 = t12 * t2;
    t54 = t53 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    t55 = t7 * t16;
    t56 = t55 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t57 = t15 * t17;
    t58 = t57 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t59 = t3 * t18;
    t60 = t59 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t61 = 0.19223380200444650136e-4 * cosP1_2 * t15;
    t62 = cosP1_4 * t14;
    t63 = -0.61309134384134172248e-6 * t62;
    t64 = -0.10964446484698059708e-2 * t1;
    t65 = 0.7119770444609129670e-6 * sinP1_2 * t15;
    t66 = 0.49442850309785622781e-6 * sinP1_4 * t14;
    t67 = -0.32445811026147319544e-4 * cosP2_3 * t5 + 0.87301947118421471076e-6 * cosP2_5 * t8;
    t68 = cosP2_4 * t11;
    t69 = -0.11120403361103783500e-5 * t68;
    t70 = 0.11277716384260861414e-2 * t4;
    t71 = t5 * (0.42317942945663788096e-6 * cosP1_2 * cosP2_3 - 0.16674440738240429244e-6 * sinP1_2 * sinP2_3) * t15;
    t67 = t1 * t67 + t13 * (t3 * (0.12261826876826834450e-6 * sinP1_3 * sinP2_2 - 0.57071175786152547415e-7 * cosP1_3 * cosP2_2) + t7 * (-0.16185611477411421475e-4 * sinP1_1 * sinP2_2 + 0.75333952037721362593e-5 * cosP1_1 * cosP2_2)) + t2 * ((t61 + t63 + t64) * cosP2_1 + (t65 - t66) * sinP2_1) + t4 * (0.15256650952733849315e-6 * cosP1_5 * t6 - 0.27767104733975605756e-4 * cosP1_3 * t3) - 0.21658638818448659741e-14 * t20 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) - 0.23102548073011903724e-13 * t21 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.61153803722678568683e-12 * t22 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.72773026429987496735e-10 * t23 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.41180971426851748146e-8 * t24 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + (t70 + t69) * t7 * cosP1_1 + t71;
    t32 = t67 - 0.82190712203279996322e-9 * t25 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.22626907377391070412e-10 * t26 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.34653822109517855585e-12 * t27 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.25480751551116070287e-14 * t28 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.72620141920680800306e-13 * t29 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + 0.84935838503720234268e-16 * t30 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.70779865419766861894e-17 * t32 + 0.40344523289267111282e-14 * t34 + 0.51980733164276783376e-12 * t35 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.79010714409700710740e-10 * t37 - 0.81530251123075067764e-8 * t39 - 0.79365406471292246423e-8 * t41 - 0.10487877338439374529e-9 * t43 - 0.13555759825193749390e-11 * t45 - 0.17836526085781249198e-13 * t47 - 0.16987167700744046855e-14 * t49 + 0.29048056768272320126e-12 * t51 + 0.33970937967947944905e-10 * t52 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.26369520165218998816e-8 * t54 + 0.13843998086739974378e-7 * t56 + 0.21146985327302249050e-9 * t58 + 0.32462477476121873540e-11 * t60;
    t22 = t22 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t23 = t23 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t24 = t24 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t25 = t25 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t26 = t26 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t27 = t27 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t28 = t28 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t30 = t30 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t31 = t31 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t33 = t33 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t34 = t36 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t36 = t3 * t13 * (-0.12261826876826834450e-6 * cosP1_3 * sinP2_2 - 0.57071175786152547415e-7 * sinP1_3 * cosP2_2);
    t37 = (0.16674440738240429244e-6 * sinP1_2 * cosP2_3 + 0.42317942945663788096e-6 * cosP1_2 * sinP2_3) * t15 * t5;
    t20 = 0.70779865419766861894e-17 * t31 + 0.84935838503720234268e-16 * t30 - 0.21146985327302249050e-9 * t57 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + 0.79010714409700710740e-10 * t34 - 0.82190712203279996322e-9 * t25 - 0.32462477476121873540e-11 * t59 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - 0.72620141920680800306e-13 * t29 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.23102548073011903724e-13 * t21 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.40344523289267111282e-14 * t33 + t37 - 0.61153803722678568683e-12 * t22 - 0.51980733164276783376e-12 * t35 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t36 - 0.13843998086739974378e-7 * t55 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - 0.41180971426851748146e-8 * t24 - 0.25480751551116070287e-14 * t28 + 0.21658638818448659741e-14 * t20 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.72773026429987496735e-10 * t23 - 0.22626907377391070412e-10 * t26 - 0.34653822109517855585e-12 * t27;
    t21 = (t70 + t69 - 0.75333952037721362593e-5 * cosP2_2 * t13) * sinP1_1 - 0.16185611477411421475e-4 * cosP1_1 * sinP2_2 * t13;
    t22 = 0.27767104733975605756e-4 * sinP1_3 * t3 + 0.15256650952733849315e-6 * sinP1_5 * t6;
    t23 = 0.32445811026147319544e-4 * sinP2_3 * t5 + 0.87301947118421471076e-6 * sinP2_5 * t8;
    t24 = t6 * t8 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t25 = t14 * t11 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t26 = t3 * t5 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t19 = t19 * t8 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t11 = t9 * t11 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t27 = t10 * t5 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t28 = t12 * t13 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t6 = t6 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t29 = t3 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t5 = t7 * t5 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t30 = 0.11277716384260861414e-1 * t1 + 0.42718622667654778084e-5 * t62;
    t31 = -0.11120403361103783501e-4 * t68 * t1;
    t13 = (-0.13697082188676611381e-5 * cosP1_2 * cosP2_2 + 0.29428384504384402681e-5 * sinP1_2 * sinP2_2) * t15 * t13;
    t3 = t30 * t4 + 0.98763393012125888430e-11 * t27 + 0.10870700149743342369e-8 * t28 + 0.64891622052294639086e-5 * t5 - 0.25170905612254498868e-8 * t15 * t16 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.63355340656694997150e-9 * t25 - 0.10396146632855356675e-10 * t24 + t13 - 0.17460389423684294215e-6 * t7 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.61153803722678568684e-13 * t11 - 0.80689046578534222566e-14 * t19 + 0.25480751551116070285e-15 * t9 * t18 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + 0.28878185091264879654e-14 * t10 * t17 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.21369585172852799045e-7 * t26 - 0.15426169296653114308e-5 * t29 + t31 + 0.21928892969396119414e-3 * t7 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.35244975545503748416e-10 * t3 * t17 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.79108560495656996452e-7 * t6 - 0.49942273040187497757e-12 * t14 * t18 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) - 0.81538404963571424911e-13 * t12 * t16 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    bf[0] = t32;
    bf[1] = t1 * t23 + t2 * ((t65 + t66) * cosP2_1 + (-t61 + t63 + t64) * sinP2_1) + t4 * t22 + t7 * t21 - 0.79365406471292246423e-8 * t40 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) - 0.10487877338439374529e-9 * t42 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.13555759825193749390e-11 * t44 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.17836526085781249198e-13 * t46 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.16987167700744046855e-14 * t48 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.29048056768272320126e-12 * t50 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + 0.33970937967947944905e-10 * t52 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.26369520165218998816e-8 * t53 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + 0.81530251123075067764e-8 * t38 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t20;
    bf[2] = t3;
}

static void idsbf_6_8_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t8, t9;
    t1 = LegP1[71];
    t2 = LegP2[36];
    t3 = LegP1[66];
    t4 = LegP2[37];
    t5 = LegP1[67];
    t6 = LegP2[39];
    t7 = LegP1[69];
    t8 = LegP2[41];
    t9 = LegP1[68];
    t10 = LegP2[43];
    t11 = LegP2[44];
    t12 = LegP1[73];
    t13 = LegP1[72];
    t14 = LegP2[42];
    t15 = LegP1[70];
    t16 = LegP2[40];
    t17 = LegP1[74];
    t18 = LegP1[75];
    t19 = LegP2[38];
    t20 = LegP1[76];
    t21 = t9 * t10;
    t22 = t7 * t11;
    t23 = t12 * t11;
    t24 = t13 * t10;
    t25 = t1 * t14;
    t26 = t15 * t8;
    t27 = t7 * t16;
    t28 = t27 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t29 = t15 * t6;
    t30 = t29 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t31 = t1 * t16;
    t32 = t31 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t33 = t13 * t8;
    t34 = t33 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t35 = t12 * t14;
    t36 = t35 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t37 = t17 * t10;
    t38 = t37 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t39 = t18 * t11;
    t40 = t39 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t41 = t18 * t14;
    t42 = t17 * t8;
    t43 = t42 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t44 = t12 * t16;
    t45 = t13 * t6;
    t46 = t1 * t19;
    t47 = t9 * t8;
    t48 = t7 * t14;
    t49 = t15 * t10;
    t50 = t1 * t11;
    t51 = t50 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t52 = LegP1[77] * t14;
    t53 = t52 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6);
    t54 = t20 * t8;
    t55 = t54 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t56 = t18 * t16;
    t57 = t56 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t58 = t17 * t6;
    t59 = t58 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t60 = t12 * t19;
    t61 = t60 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t62 = t13 * t4;
    t63 = t62 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    t64 = t5 * t14;
    t65 = cosP1_4 * t15;
    t66 = -0.10454189534944944691e-2 * t3;
    t67 = t5 * (0.48973707932719824377e-5 * cosP1_1 * cosP2_2 - 0.10522073882574457321e-4 * sinP1_1 * sinP2_2) + t7 * (0.11691193202860508134e-6 * sinP1_3 * sinP2_2 - 0.54415231036355360421e-7 * cosP1_3 * cosP2_2);
    t68 = 0.14546645920609848830e-6 * cosP1_5 * t1 - 0.81461217155415153448e-5 * cosP1_3 * t7;
    t69 = 0.10752880664514800257e-2 * t2;
    t70 = cosP2_4 * t16;
    t71 = -0.10602888582133400925e-5 * t70;
    t72 = t6 * (-0.22481180059124311823e-6 * sinP1_2 * sinP2_3 + 0.33765850833900436977e-6 * cosP1_2 * cosP2_3) * t9;
    t67 = t19 * t67 + t2 * t68 + t3 * (0.83239140545711912730e-6 * cosP2_5 * t8 - 0.30935866991163611842e-4 * cosP2_3 * t6) + t4 * ((0.13576869525902525573e-4 * cosP1_2 * t9 + t66 - 0.16216816378161349992e-6 * t65) * cosP2_1 + (-0.49027584399092453462e-7 * sinP1_4 * t15 + 0.54307478103610102288e-5 * sinP1_2 * t9) * sinP2_1) + 0.19435954679880616789e-13 * t44 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.55392470837659757850e-11 * t45 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.97170055422063143633e-9 * t46 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.75671945950647193392e-8 * t47 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.99997986827985773374e-10 * t48 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.12924909862120610165e-11 * t49 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + (t71 + t69) * t5 * cosP1_1 + t72;
    t28 = t67 - 0.17006460344895539689e-13 * t51 - 0.10122893062437821243e-16 * t53 - 0.20245786124875642486e-15 * t55 - 0.16196628899900513990e-14 * t57 + 0.27696235418829878924e-12 * t59 + 0.32390018474021047879e-10 * t61 + 0.25142350973893565878e-8 * t63 + 0.89998188145187196038e-8 * t64 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.93059351007268393178e-10 * t21 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.95236177931415022262e-12 * t22 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - 0.80983144499502569953e-16 * t23 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) - 0.16196628899900513989e-14 * t24 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.72884830049552312959e-13 * t25 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.13877271641434760387e-10 * t26 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.12081389429013791395e-8 * t28 - 0.78365769269278646909e-9 * t30 - 0.21573909694667484632e-10 * t32 - 0.33041122955797048541e-12 * t34 - 0.24294943349850770986e-14 * t36 + 0.80983144499502569951e-16 * t38 + 0.67485953749585474955e-17 * t40 + 0.20245786124875642486e-16 * t41 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + 0.12147471674925385492e-14 * t43;
    t21 = t21 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t22 = t22 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t23 = t23 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t24 = t24 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t30 = t35 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t32 = t37 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t34 = t39 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t35 = t41 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t36 = t42 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t37 = t44 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t38 = t46 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t39 = t47 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t40 = t48 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t41 = t49 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t42 = t7 * t19 * (-0.11691193202860508134e-6 * cosP1_3 * sinP2_2 - 0.54415231036355360421e-7 * sinP1_3 * cosP2_2);
    t43 = (0.22481180059124311823e-6 * sinP1_2 * cosP2_3 + 0.33765850833900436977e-6 * cosP1_2 * sinP2_3) * t9 * t6;
    t44 = (0.49027584399092453462e-7 * sinP1_4 * cosP2_1 - 0.16216816378161349992e-6 * cosP1_4 * sinP2_1) * t15 * t4;
    t25 = -0.24294943349850770986e-14 * t30 - 0.33041122955797048541e-12 * t33 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.55392470837659757850e-11 * t45 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.12924909862120610165e-11 * t41 + 0.80983144499502569951e-16 * t32 + 0.67485953749585474955e-17 * t34 - 0.72884830049552312959e-13 * t25 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.19435954679880616789e-13 * t37 - 0.12147471674925385492e-14 * t36 + t43 - 0.20245786124875642486e-16 * t35 + t42 - 0.78365769269278646909e-9 * t29 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - 0.99997986827985773374e-10 * t40 + t44 - 0.75671945950647193392e-8 * t39 - 0.12081389429013791395e-8 * t27 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.97170055422063143633e-9 * t38 - 0.21573909694667484632e-10 * t31 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.13877271641434760387e-10 * t26 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t26 = (-0.48973707932719824377e-5 * cosP2_2 * t19 + t71 + t69) * sinP1_1 - 0.10522073882574457321e-4 * cosP1_1 * sinP2_2 * t19;
    t27 = t9 * (-0.13576869525902525573e-4 * cosP1_2 * sinP2_1 + 0.54307478103610102288e-5 * sinP1_2 * cosP2_1) + t66 * sinP2_1;
    t29 = 0.81461217155415153448e-5 * sinP1_3 * t7 + 0.14546645920609848830e-6 * sinP1_5 * t1;
    t21 = t25 - 0.16196628899900513990e-14 * t56 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.16196628899900513989e-14 * t24 + 0.27696235418829878924e-12 * t58 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - 0.95236177931415022262e-12 * t22 + 0.25142350973893565878e-8 * t62 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - 0.10122893062437821243e-16 * t52 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) - 0.17006460344895539689e-13 * t50 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.20245786124875642486e-15 * t54 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) + 0.80983144499502569953e-16 * t23 + t26 * t5 + t27 * t4 + t29 * t2 + (0.30935866991163611842e-4 * sinP2_3 * t6 + 0.83239140545711912730e-6 * sinP2_5 * t8) * t3 + 0.32390018474021047879e-10 * t60 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.89998188145187196038e-8 * t64 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - 0.93059351007268393178e-10 * t21;
    t22 = t9 * t14 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t23 = t7 * t10 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t24 = t15 * t11 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t11 = t17 * t11 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8);
    t10 = t12 * t10 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7);
    t25 = t13 * t14 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t26 = t1 * t8 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t15 = t15 * t16 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t27 = t5 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t14 = t20 * t14 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6);
    t18 = t18 * t8 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t20 = -0.11828168730966280280e-1 * t2 + 0.11663177440346741016e-4 * t70;
    t9 = (-0.21044147765148914642e-5 * sinP1_2 * sinP2_2 + 0.97947415865439648760e-6 * cosP1_2 * cosP2_2) * t19 * t9;
    t2 = -0.20365304288853788362e-5 * t65 * t2;
    t1 = 0.24294943349850770987e-13 * t25 + 0.23809044482853755566e-12 * t24 + t2 + t9 - 0.19007617336263535803e-3 * t27 - 0.22156988335063903142e-11 * t12 * t6 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.30203473572534478490e-9 * t15 + 0.17999637629037439207e-8 * t22 + 0.80983144499502569950e-15 * t18 + 0.97179773399403083940e-14 * t17 * t16 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.20245786124875642490e-16 * t14 + 0.90512463506016837168e-6 * t7 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.64786515599602055961e-15 * t10 - 0.40491572249751284980e-16 * t11 + t20 * t3 + 0.12538523083084583505e-7 * t7 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.15134389190129438680e-6 * t5 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.39649347546956458246e-11 * t26 + 0.20679855779392976264e-10 * t23 - 0.32390018474021047879e-9 * t13 * t19 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.30170821168672279054e-7 * t1 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.56247030893024748812e-5 * t5 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    bf[0] = t28;
    bf[1] = t21;
    bf[2] = t1;
}

static void idsbf_6_8_11_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t8, t9;
    t1 = LegP1[69];
    t2 = LegP2[42];
    t3 = LegP1[70];
    t4 = LegP2[43];
    t5 = LegP1[71];
    t6 = LegP2[44];
    t7 = LegP1[77];
    t8 = LegP1[76];
    t9 = LegP2[41];
    t10 = LegP1[75];
    t11 = LegP2[40];
    t12 = LegP1[74];
    t13 = LegP2[39];
    t14 = LegP1[73];
    t15 = LegP2[38];
    t16 = LegP1[72];
    t17 = LegP2[37];
    t18 = LegP1[68];
    t19 = LegP1[67];
    t20 = LegP2[36];
    t21 = LegP1[66];
    t22 = t1 * t6;
    t23 = t14 * t6;
    t24 = t16 * t4;
    t25 = t5 * t2;
    t26 = t3 * t9;
    t27 = t1 * t11;
    t28 = t3 * t13;
    t29 = t5 * t11;
    t30 = t16 * t9;
    t31 = t8 * t4;
    t32 = t31 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t33 = t14 * t2;
    t34 = t33 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t35 = t12 * t4;
    t36 = t35 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t37 = t10 * t6;
    t38 = t37 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t39 = t10 * t2;
    t40 = t12 * t9;
    t41 = t40 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t42 = t14 * t11;
    t43 = t42 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t44 = t16 * t13;
    t45 = t5 * t15;
    t46 = t18 * t9;
    t47 = t1 * t2;
    t48 = t3 * t4;
    t49 = t5 * t6;
    t50 = t7 * t2;
    t51 = t8 * t9;
    t52 = t10 * t11;
    t53 = t12 * t13;
    t54 = t14 * t15;
    t55 = t54 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t56 = t16 * t17;
    t57 = t56 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    t58 = t19 * t2;
    t59 = t58 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t60 = t18 * t4;
    t61 = t60 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t62 = 0.11403685446463213029e-2;
    t63 = cosP2_1 * t17;
    t64 = 0.10015724397284956497e-5 * cosP2_5 * t9 + 0.67879080038471506120e-4 * cosP2_3 * t13 + t63 * t62;
    t65 = -0.53164034715446214584e-5 * cosP1_3 * t1 - 0.44303362262871845486e-7 * cosP1_5 * t5;
    t66 = t17 * (0.23259265188007718880e-6 * cosP1_4 * cosP2_1 - 0.99682565091461652330e-7 * sinP1_4 * sinP2_1) * t3;
    t67 = 0.29572494310466956863e-4 * t63 * t18 * cosP1_2;
    t68 = 0.14809981099302874063e-5 * t19;
    t69 = t68 * sinP1_1 * t11 * sinP2_4;
    t55 = 0.18836463547139390090e-10 * t55 + 0.75609301231174894486e-10 * t47 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.59334860173489078784e-9 * t57 + t67 + 0.33772447268861027676e-12 * t53 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.75301946348121337994e-12 * t48 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + 0.98292091600527362830e-8 * t59 + 0.75876699979431488610e-8 * t46 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.19213192818082177891e-8 * t45 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.10163851952829248732e-17 * t50 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + 0.41163600408958457353e-16 * t51 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + 0.47566827139240884066e-14 * t52 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t64 * t21 + t65 * t20 + 0.94880452398632885880e-10 * t61 + 0.30395202541974924916e-10 * t44 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t69 + t66 + 0.76838720763389120398e-14 * t49 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t57 = t1 * (-0.17088439729964854686e-6 * cosP1_3 * cosP2_2 + 0.47467888138791263022e-6 * sinP1_3 * sinP2_2) + t19 * (-0.22214971648954311095e-4 * cosP1_1 * cosP2_2 + 0.61708254580428641935e-4 * sinP1_1 * sinP2_2);
    t59 = t13 * (-0.29070485432877921986e-6 * sinP1_2 * sinP2_3 + 0.73776605534503147890e-6 * cosP1_2 * cosP2_3) - 0.12294183027946937125e-4 * sinP1_2 * sinP2_1 * t17;
    t32 = t55 - 0.30491555858487746192e-17 * t38 + 0.17261050232287732007e-8 * t27 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.92206464916066944488e-12 * t22 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + 0.36150788625823071887e-12 * t43 - 0.29857331496631201075e-12 * t25 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.10367128991885833704e-15 * t36 - 0.42688178201882844670e-16 * t39 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + t57 * t15 + 0.17740523849851280120e-8 * t28 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.27950592870280434004e-17 * t32 + t59 * t18 + 0.18441292983213388880e-11 * t26 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.24698160245375074411e-14 * t41 - 0.23173582452450687103e-15 * t23 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.14384208526906443338e-10 * t29 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.93304160926972503343e-14 * t24 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) - 0.29271893624148236347e-14 * t34 + 0.16465440163583382929e-13 * t30 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t34 = t53 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t36 = t56 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t38 = t58 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t26 = t26 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t27 = t27 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t28 = t28 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t29 = t29 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t30 = t30 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t33 = t33 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t37 = t37 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t31 = t31 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7);
    t39 = t39 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t40 = t40 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t41 = t42 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t42 = t44 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t43 = cosP1_4 * t3;
    t44 = 0.10015724397284956497e-5 * t9 * sinP2_5 - 0.67879080038471506120e-4 * t13 * sinP2_3;
    t53 = 0.53164034715446214584e-5 * sinP1_3 * t1 - 0.44303362262871845486e-7 * sinP1_5 * t5;
    t55 = (0.22214971648954311095e-4 * cosP2_2 * sinP1_1 + 0.61708254580428641935e-4 * cosP1_1 * sinP2_2) * t19 * t15;
    t56 = t63 * (-0.12294183027946937125e-4 * sinP1_2 * t18 + 0.99682565091461652330e-7 * sinP1_4 * t3);
    t57 = (t21 * t62 + 0.23259265188007718880e-6 * t43 - 0.29572494310466956863e-4 * t18 * cosP1_2) * t17 * sinP2_1;
    t21 = t20 * t53 + t21 * t44 + 0.19213192818082177891e-8 * t45 * (cosP1_5 * sinP2_2 - sinP1_5 * cosP2_2) + 0.76838720763389120398e-14 * t49 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.10163851952829248732e-17 * t50 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) + 0.75876699979431488610e-8 * t46 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.75609301231174894486e-10 * t47 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.75301946348121337994e-12 * t48 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.41163600408958457353e-16 * t51 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) + 0.47566827139240884066e-14 * t52 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.33772447268861027676e-12 * t34 + 0.18836463547139390090e-10 * t54 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.59334860173489078784e-9 * t36 - 0.98292091600527362830e-8 * t38 + t55 + t56 + t57;
    t34 = t1 * t15 * (-0.17088439729964854686e-6 * sinP1_3 * cosP2_2 - 0.47467888138791263022e-6 * cosP1_3 * sinP2_2);
    t36 = (0.29070485432877921986e-6 * sinP1_2 * cosP2_3 + 0.73776605534503147890e-6 * cosP1_2 * sinP2_3) * t18 * t13;
    t8 = t8 * t2 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6);
    t38 = t12 * t11 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t44 = t14 * t13 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t45 = t16 * t15 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t46 = t5 * t17 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t47 = t1 * t17 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t48 = t19 * t13 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t49 = t19 * t9 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t50 = t18 * t2 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t51 = t1 * t4 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t12 = t12 * t6 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8);
    t7 = t7 * t4 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7);
    t15 = t18 * t15 * (0.18987155255516505210e-5 * sinP1_2 * sinP2_2 - 0.68353758919859418748e-6 * cosP1_2 * cosP2_2);
    t18 = -0.35442689810297476394e-6 * t43 * t20;
    t1 = 0.11507366821525154671e-9 * t3 * t11 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.22603756256567268106e-9 * t45 + 0.30243720492469957794e-9 * t50 - 0.20327703905658497462e-16 * t8 - 0.27950592870280434010e-17 * t7 + 0.99682565091461652344e-6 * t47 + 0.16465440163583382928e-12 * t5 * t9 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.17278311282520019739e-4 * t19 * t17 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t15 + t18 + 0.10644314309910768072e-7 * t1 * t13 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.15175339995886297724e-7 * t49 - 0.48786489373580393909e-16 * t12 + 0.59334860173489078778e-8 * t46 + 0.74094480736125223237e-15 * t10 * t9 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + 0.10284709096738106988e-5 * t48 - 0.14513980588640167188e-14 * t14 * t4 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.45181167808872802800e-11 * t51 + 0.47281426176405438758e-11 * t44 - 0.35126272348977883614e-13 * t16 * t2 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.61470976610711296326e-13 * t3 * t6 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) + 0.76106923422785414503e-13 * t38;
    bf[0] = t32;
    bf[1] = t21 - 0.30491555858487746192e-17 * t37 + t34 - 0.17261050232287732007e-8 * t27 - 0.92206464916066944488e-12 * t22 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - 0.36150788625823071887e-12 * t41 + 0.29857331496631201075e-12 * t25 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t36 - 0.10367128991885833704e-15 * t35 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.42688178201882844670e-16 * t39 - t68 * cosP1_1 * t11 * sinP2_4 + 0.17740523849851280120e-8 * t28 + 0.27950592870280434004e-17 * t31 - 0.94880452398632885880e-10 * t60 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - 0.30395202541974924916e-10 * t42 - 0.18441292983213388880e-11 * t26 - 0.24698160245375074411e-14 * t40 + 0.23173582452450687103e-15 * t23 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + 0.14384208526906443338e-10 * t29 + 0.93304160926972503343e-14 * t24 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.29271893624148236347e-14 * t33 + 0.16465440163583382929e-13 * t30;
    bf[2] = t1;
}

static void idsbf_6_8_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t8, t9;
    t1 = LegP1[69];
    t2 = LegP2[42];
    t3 = LegP1[70];
    t4 = LegP2[43];
    t5 = LegP1[71];
    t6 = LegP2[44];
    t7 = LegP1[77];
    t8 = LegP1[76];
    t9 = LegP2[41];
    t10 = LegP1[75];
    t11 = LegP2[40];
    t12 = LegP1[74];
    t13 = LegP2[39];
    t14 = LegP1[73];
    t15 = LegP2[38];
    t16 = LegP1[72];
    t17 = LegP2[37];
    t18 = LegP1[68];
    t19 = LegP1[67];
    t20 = LegP2[36];
    t21 = LegP1[66];
    t22 = t5 * t6;
    t23 = t7 * t2;
    t24 = t8 * t9;
    t25 = t10 * t11;
    t26 = t12 * t13;
    t27 = t14 * t15;
    t28 = t16 * t17;
    t29 = t19 * t2;
    t30 = t18 * t4;
    t31 = t1 * t6;
    t32 = t14 * t6;
    t33 = t32 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t34 = t16 * t4;
    t35 = t34 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t36 = t5 * t2;
    t37 = t36 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t38 = t3 * t9;
    t39 = t1 * t11;
    t40 = t3 * t13;
    t41 = t5 * t11;
    t42 = t16 * t9;
    t43 = t8 * t4;
    t44 = t7 * t6;
    t45 = t14 * t2;
    t46 = t12 * t4;
    t47 = t46 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t48 = t10 * t6;
    t49 = t48 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t50 = t10 * t2;
    t51 = t50 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t52 = t12 * t9;
    t53 = t52 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t54 = t14 * t11;
    t55 = t54 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t56 = t16 * t13;
    t57 = t5 * t15;
    t58 = t57 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t59 = t18 * t9;
    t60 = t59 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t61 = t1 * t2;
    t62 = t61 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t63 = t3 * t4;
    t64 = t63 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t65 = t15 * (-0.25894354756452962247e-6 * cosP1_3 * cosP2_2 + 0.15536612853871777348e-6 * sinP1_3 * sinP2_2) + 0.22372722509575359384e-4 * cosP1_3 * t20;
    t66 = t18 * (0.28660342650892255941e-6 * cosP1_2 * cosP2_3 - 0.27012520075481612891e-6 * sinP1_2 * sinP2_3) - 0.43424832926571617692e-4 * cosP2_3 * t21;
    t67 = 0.13774760956242717798e-2 * cosP2_1 * t17 + 0.44926705502445889498e-6 * cosP2_5 * t9;
    t68 = cosP2_4 * t11;
    t69 = -0.71813677191229548632e-6 * t68;
    t70 = -0.93219677123230664093e-7 * t5;
    t71 = t70 * cosP1_5 * t20;
    t72 = (-0.10664331062897587972e-2 * t20 + t69) * t19 * cosP1_1;
    t33 = 0.41587903093697181789e-8 * t29 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.38353623740861273720e-10 * t30 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) - 0.34251792005890161701e-11 * t27 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.63696014804160375631e-12 * t37 + t72 + t65 * t1 + t66 * t13 + t67 * t21 + 0.19461245457892137334e-13 * t26 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.11783677194833590847e-13 * t35 - 0.14970188813763182561e-14 * t22 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) - 0.22574094242976227673e-15 * t33 + 0.47524408932581531942e-18 * t23 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) - 0.70130544132060106090e-9 * t28 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.35928453153031638150e-12 * t31 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + 0.10379330910875806576e-14 * t25 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t71 + 0.24534476111445215863e-16 * t24 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t35 = t18 * (0.21712416463285808841e-4 * sinP1_2 * sinP2_1 - 0.39372366407186729095e-4 * cosP1_2 * cosP2_1) + t3 * (0.33619503925461429318e-6 * cosP1_4 * cosP2_1 + 0.45315120823792683954e-7 * sinP1_4 * sinP2_1);
    t37 = (0.47127725656744391288e-4 * cosP1_1 * cosP2_2 - 0.28276635394046634774e-4 * sinP1_1 * sinP2_2) * t19 * t15;
    t33 = t33 - 0.28799170193875570190e-8 * t60 - 0.39233870843110548829e-10 * t40 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.32493693031601813547e-10 * t38 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t37 + 0.52311827790814065140e-11 * t41 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t17 * t35 + 0.20815691112470710989e-14 * t45 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.10304479966806990663e-13 * t53 + 0.59405511165726914927e-18 * t49 - 0.12554838669795375635e-8 * t39 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.10481048353802389481e-8 * t58 - 0.21956276926852667757e-15 * t51 - 0.25049323874881515798e-17 * t43 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) + 0.45544225227057301444e-18 * t44 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8) - 0.39441457461328064990e-12 * t55 - 0.18263630352791082725e-12 * t64 - 0.22850496205328121864e-10 * t62 - 0.66557459465991109688e-11 * t56 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.11946210673383019686e-12 * t42 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.34455196476121610660e-16 * t47;
    t35 = t38 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t37 = t40 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t38 = t41 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t40 = t42 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t41 = t45 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t42 = t46 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t44 = t44 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8);
    t45 = t48 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t43 = t43 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7);
    t46 = t50 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t47 = t59 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t48 = t61 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t49 = t63 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t22 = t22 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t23 = t23 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6);
    t24 = t24 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5);
    t50 = t15 * (-0.25894354756452962247e-6 * cosP2_2 * sinP1_3 - 0.15536612853871777348e-6 * cosP1_3 * sinP2_2) - 0.22372722509575359384e-4 * sinP1_3 * t20;
    t51 = t18 * (0.27012520075481612891e-6 * sinP1_2 * cosP2_3 + 0.28660342650892255941e-6 * cosP1_2 * sinP2_3) + 0.43424832926571617692e-4 * sinP2_3 * t21;
    t53 = -0.10664331062897587972e-2 * sinP1_1 * t19 + t70 * sinP1_5;
    t55 = 0.44926705502445889498e-6 * sinP2_5 * t9 + 0.13774760956242717798e-2 * sinP2_1 * t17;
    t22 = -0.41587903093697181789e-8 * t29 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) - 0.28799170193875570190e-8 * t47 - 0.34251792005890161701e-11 * t27 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t50 * t1 + t51 * t13 + t53 * t20 + t55 * t21 - 0.19461245457892137334e-13 * t26 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3) - 0.14970188813763182561e-14 * t22 + 0.47524408932581531942e-18 * t23 - 0.70130544132060106090e-9 * t28 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - 0.10481048353802389481e-8 * t57 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + 0.39441457461328064990e-12 * t54 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.18263630352791082725e-12 * t49 - 0.22850496205328121864e-10 * t48 + 0.66557459465991109688e-11 * t56 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.10379330910875806576e-14 * t25 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.24534476111445215863e-16 * t24;
    t23 = cosP1_4 * t3;
    t24 = (0.21712416463285808841e-4 * sinP1_2 * t18 - 0.45315120823792683954e-7 * sinP1_4 * t3) * cosP2_1 + (0.39372366407186729095e-4 * cosP1_2 * t18 + 0.33619503925461429318e-6 * t23) * sinP2_1;
    t25 = t15 * (-0.28276635394046634774e-4 * cosP1_1 * sinP2_2 - 0.47127725656744391288e-4 * cosP2_2 * sinP1_1) + t69 * sinP1_1;
    t8 = t8 * t2 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6);
    t10 = t10 * t9 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t26 = t12 * t11 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t27 = t14 * t13 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t28 = t16 * t15 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t29 = t1 * t17 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t47 = t19 * t13 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t48 = t19 * t9 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t49 = t18 * t2 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t50 = t1 * t4 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t51 = t3 * t6 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t6 = t12 * t6 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8);
    t7 = t7 * t4 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7);
    t12 = -0.12797197275477105566e-1 * t20 - 0.86176412629475458358e-5 * t68;
    t20 = -0.29830296679433812510e-5 * t23 * t20;
    t15 = (0.43502515990840976574e-5 * sinP1_2 * sinP2_2 - 0.72504193318068294290e-5 * cosP1_2 * cosP2_2) * t18 * t15;
    t1 = -0.23844385004900436070e-7 * t5 * t17 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.54790891058373248178e-11 * t50 + 0.40617116289502266932e-11 * t5 * t9 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.16739784893060500847e-9 * t3 * t11 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + t12 * t21 + 0.13092974660926212050e-14 * t14 * t4 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.41517323643503226304e-13 * t26 - 0.47904604204042184200e-13 * t51 + 0.22772112613528650726e-18 * t7 - 0.63981389374918741214e-9 * t49 - 0.12330645122120458213e-9 * t28 - 0.11770161252933164649e-8 * t1 * t13 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.74877842504076482500e-7 * t48 + 0.74936488004894559563e-13 * t16 * t2 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.73952732739990121880e-12 * t27 + 0.43631987764623241386e-5 * t29 + 0.72374721544286029488e-5 * t47 + t20 + 0.10304479966806990663e-14 * t10 + 0.20910739930335874055e-16 * t8 + 0.23762204466290765973e-16 * t6 - 0.22957934927071196329e-3 * t19 * t17 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t15;
    bf[0] = t33;
    bf[1] = t22 - 0.39233870843110548829e-10 * t37 - 0.38353623740861273720e-10 * t30 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + 0.32493693031601813547e-10 * t35 + 0.63696014804160375631e-12 * t36 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t24 * t17 + 0.52311827790814065140e-11 * t38 + t25 * t19 + 0.20815691112470710989e-14 * t41 + 0.11783677194833590847e-13 * t34 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + 0.10304479966806990663e-13 * t52 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.22574094242976227673e-15 * t32 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + 0.59405511165726914927e-18 * t45 + 0.12554838669795375635e-8 * t39 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.21956276926852667757e-15 * t46 + 0.25049323874881515798e-17 * t43 - 0.45544225227057301444e-18 * t44 - 0.35928453153031638150e-12 * t31 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + 0.11946210673383019686e-12 * t40 + 0.34455196476121610660e-16 * t42;
    bf[2] = t1;
}

static void idsbf_6_8_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t8, t9;
    t1 = LegP1[95];
    t2 = LegP2[39];
    t3 = LegP1[94];
    t4 = LegP2[40];
    t5 = LegP1[100];
    t6 = LegP2[44];
    t7 = LegP1[98];
    t8 = LegP2[42];
    t9 = LegP1[97];
    t10 = LegP2[43];
    t11 = LegP1[92];
    t12 = LegP1[101];
    t13 = LegP1[96];
    t14 = LegP1[93];
    t15 = LegP2[37];
    t16 = LegP1[91];
    t17 = LegP2[36];
    t18 = LegP2[41];
    t19 = LegP2[38];
    t20 = LegP1[99];
    t21 = LegP1[102];
    t22 = LegP1[103];
    t23 = t1 * t2;
    t24 = t3 * t4;
    t25 = t5 * t6;
    t26 = t7 * t6;
    t27 = t7 * t8;
    t28 = t9 * t10;
    t29 = t3 * t8;
    t30 = t7 * t4;
    t31 = t5 * t8;
    t32 = t12 * t10;
    t33 = t32 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t34 = t13 * t6;
    t35 = t1 * t10;
    t36 = t35 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t37 = t20 * t18;
    t38 = t37 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t39 = t13 * t19;
    t40 = t39 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t41 = t14 * t18;
    t42 = t41 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t43 = t21 * t6;
    t44 = t43 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t45 = t9 * t2;
    t46 = t45 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t47 = t5 * t4;
    t48 = t47 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t49 = t12 * t18;
    t50 = t3 * t6;
    t51 = t50 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t52 = t7 * t19;
    t53 = t52 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t54 = t14 * t10;
    t55 = t54 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t56 = t20 * t2;
    t57 = t21 * t8;
    t58 = t22 * t10;
    t59 = LegP1[104] * t6;
    t60 = t9 * t15;
    t61 = t11 * t8;
    t62 = t20 * t10;
    t63 = t13 * t4;
    t64 = t9 * t18;
    t65 = t13 * t8;
    t66 = t1 * t18;
    t67 = 0.23854326767130914109e-4 * cosP1_2 * t14;
    t68 = cosP1_4 * t1;
    t69 = 0.18824725103906544422e-6 * t68;
    t70 = 0.13234362246177258199e-2 * t16;
    t71 = 0.68871956822882753928e-5 * sinP1_2 * t14;
    t72 = 0.91221134864745369446e-7 * sinP1_4 * t1;
    t73 = cosP2_4 * t4;
    t74 = -0.68996349279516497616e-6 * t73;
    t75 = -0.10245957868008199895e-2 * t17;
    t76 = t15 * ((-t67 + t69 + t70) * cosP2_1 + (t71 - t72) * sinP2_1) + t16 * (-0.41721229954957632151e-4 * cosP2_3 * t2 + 0.43164182451909058902e-6 * cosP2_5 * t18) + t17 * (-0.89562568776295453640e-7 * cosP1_5 * t13 + 0.80606311898665908272e-5 * cosP1_3 * t3) + t19 * (t11 * (0.32839608551308332998e-4 * cosP1_1 * cosP2_2 - 0.19703765130784999798e-4 * sinP1_1 * sinP2_2) + t3 * (-0.24878491326748737122e-6 * cosP1_3 * cosP2_2 + 0.14927094796049242274e-6 * sinP1_3 * sinP2_2)) - 0.37694683828407177431e-10 * t23 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.45233620594088612947e-9 * t24 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.82638345316123427509e-11 * t66 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + (t74 + t75) * t11 * cosP1_1 + t2 * (0.27159019698367371356e-6 * cosP1_2 * cosP2_3 - 0.26329736654142413452e-6 * sinP1_2 * sinP2_3) * t14;
    t33 = t76 + 0.57074968972892042924e-18 * t25 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) - 0.17122490691867612877e-16 * t26 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.19999069128101371839e-14 * t27 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.13903462441796501655e-14 * t28 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) - 0.21954046625336048408e-10 * t29 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.29916415736831093220e-13 * t30 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.54791970213976361202e-17 * t31 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - 0.28537484486446021466e-19 * t33 - 0.14382892181168794817e-14 * t34 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) - 0.17547128461025929676e-12 * t36 - 0.47143924371608827450e-15 * t38 + 0.18428512093887953424e-9 * t40 - 0.27669347725582730066e-8 * t42 + 0.15854158048025567479e-20 * t44 - 0.78530591309181619716e-12 * t46 + 0.99721385789436977390e-15 * t48 + 0.23571962185804413724e-16 * t49 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + 0.12944602963051915334e-12 * t51 - 0.32908057310514202542e-11 * t53 + 0.19301841307128522643e-10 * t55;
    t36 = t52 * (cosP1_7 * sinP2_2 - sinP1_7 * cosP2_2);
    t38 = t47 * (cosP1_9 * sinP2_4 - sinP1_9 * cosP2_4);
    t40 = t50 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t42 = t54 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t44 = t56 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3);
    t46 = t57 * (-sinP1_11 * cosP2_6 + cosP1_11 * sinP2_6);
    t47 = t63 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4);
    t48 = t64 * (cosP1_6 * sinP2_5 - sinP1_6 * cosP2_5);
    t50 = t66 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t29 = t29 * (cosP1_3 * sinP2_6 - sinP1_3 * cosP2_6);
    t31 = t31 * (cosP1_9 * sinP2_6 - sinP1_9 * cosP2_6);
    t32 = t32 * (-sinP1_10 * cosP2_7 + cosP1_10 * sinP2_7);
    t34 = t34 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t35 = t35 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t37 = t37 * (cosP1_8 * sinP2_5 - sinP1_8 * cosP2_5);
    t43 = t43 * (-sinP1_11 * cosP2_8 + cosP1_11 * sinP2_8);
    t45 = t45 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t41 = t41 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t31 = -0.54791970213976361202e-17 * t31 - 0.28537484486446021466e-19 * t32 - 0.14382892181168794817e-14 * t34 - 0.17547128461025929676e-12 * t35 - 0.47143924371608827450e-15 * t37 + 0.18428512093887953424e-9 * t39 * (cosP1_5 * sinP2_2 - sinP1_5 * cosP2_2) + 0.15854158048025567479e-20 * t43 + 0.78530591309181619716e-12 * t45 - 0.27669347725582730066e-8 * t41 + 0.47562474144076702444e-20 * t58 * (sinP1_12 * cosP2_7 - cosP1_12 * sinP2_7) + 0.79270790240127837392e-21 * t59 * (-sinP1_13 * cosP2_8 + cosP1_13 * sinP2_8) - 0.67379247343277829707e-9 * t60 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) - 0.28979341545443583896e-8 * t61 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + 0.32908057310514202542e-11 * t36 - 0.99721385789436977390e-15 * t38 - 0.23571962185804413724e-16 * t49 * (-sinP1_10 * cosP2_5 + cosP1_10 * sinP2_5) - 0.12944602963051915334e-12 * t40 - 0.19301841307128522643e-10 * t42 - 0.18697759835519433266e-13 * t44 - 0.45659975178313634340e-18 * t46;
    t32 = t19 * (-0.14927094796049242274e-6 * cosP1_3 * sinP2_2 - 0.24878491326748737122e-6 * cosP2_2 * sinP1_3) - 0.80606311898665908272e-5 * sinP1_3 * t17;
    t34 = t14 * (0.26329736654142413452e-6 * sinP1_2 * cosP2_3 + 0.27159019698367371356e-6 * cosP1_2 * sinP2_3) + 0.41721229954957632151e-4 * sinP2_3 * t16;
    t35 = 0.43164182451909058902e-6 * t16 * t18 * sinP2_5;
    t23 = t31 + t34 * t2 + t32 * t3 - 0.11199478711736768232e-12 * t65 * (cosP1_5 * sinP2_6 - sinP1_5 * cosP2_6) - 0.19999069128101371839e-14 * t27 * (cosP1_7 * sinP2_6 - sinP1_7 * cosP2_6) - 0.37694683828407177431e-10 * t23 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.45233620594088612947e-9 * t24 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) - 0.57074968972892042924e-18 * t25 * (cosP1_9 * sinP2_8 - sinP1_9 * cosP2_8) + 0.17122490691867612877e-16 * t26 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + 0.13903462441796501655e-14 * t28 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.33103482004277384893e-16 * t62 * (cosP1_8 * sinP2_7 - sinP1_8 * cosP2_7) - 0.50259578437876236609e-11 * t47 - 0.11477547960572698265e-12 * t48 + 0.82638345316123427509e-11 * t50 + 0.21954046625336048408e-10 * t29 - 0.29916415736831093220e-13 * t30 * (cosP1_7 * sinP2_4 - sinP1_7 * cosP2_4) + t35;
    t23 = t11 * ((t74 + t75 - 0.32839608551308332998e-4 * cosP2_2 * t19) * sinP1_1 - 0.19703765130784999798e-4 * cosP1_1 * t19 * sinP2_2) + t15 * ((t71 + t72) * cosP2_1 + (t67 + t69 + t70) * sinP2_1) + t23 - 0.89562568776295453640e-7 * t13 * sinP1_5 * t17;
    t24 = t11 * t15 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t25 = t11 * t18 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t26 = t14 * t8 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t27 = t7 * t2 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t28 = t3 * t15 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t5 = t5 * t18 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t12 = t12 * t8 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6);
    t29 = 0.89695254063371446896e-5 * t73 * t16;
    t30 = 0.16121262379733181654e-5 * t68 * t17;
    t5 = -0.18364076736916317224e-11 * t13 * t18 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.19024989657630680977e-19 * t21 * t10 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7) + 0.15854158048025567478e-20 * t22 * t6 * (cosP1_12 * cosP2_8 + sinP1_12 * sinP2_8) - 0.27998696779341920576e-13 * t9 * t8 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.39724178405132861874e-15 * t7 * t10 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.18857569748643530980e-15 * t5 - 0.90467241188177225898e-10 * t1 * t4 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + 0.46071280234719883560e-10 * t9 * t19 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.20360557301811166460e-3 * t24 + 0.48298902575739306496e-9 * t26 + 0.75389367656814354857e-9 * t3 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.27946838590381081366e-5 * t28 + t29 - 0.27395985106988180602e-17 * t12 - 0.22437311802623319919e-12 * t27 - 0.57074968972892042924e-17 * t20 * t6 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + t30 + 0.66406434541398552158e-7 * t25;
    t1 = 0.25889205926103830668e-13 * t1 * t6 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) - 0.64186507623011741771e-5 * t11 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.35094256922051859352e-11 * t3 * t10 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) - 0.99721385789436977394e-14 * t20 * t4 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.10780679574924452753e-7 * t13 * t15 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + t5 + t14 * t19 * (-0.32839608551308332997e-5 * sinP1_2 * sinP2_2 + 0.54732680918847221663e-5 * cosP1_2 * cosP2_2) + 0.13319745228410659864e-1 * t16 * t17;
    bf[0] = 0.18697759835519433266e-13 * t56 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.45659975178313634340e-18 * t57 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + 0.47562474144076702444e-20 * t58 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7) - 0.79270790240127837392e-21 * t59 * (cosP1_13 * cosP2_8 + sinP1_13 * sinP2_8) - 0.67379247343277829707e-9 * t60 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.28979341545443583896e-8 * t61 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.33103482004277384893e-16 * t62 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.50259578437876236609e-11 * t63 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.11477547960572698265e-12 * t64 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.11199478711736768232e-12 * t65 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t33;
    bf[1] = t23;
    bf[2] = t1;
}

static void idsbf_6_8_13_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t8, t9;
    t1 = LegP1[99];
    t2 = LegP2[43];
    t3 = LegP1[96];
    t4 = LegP2[40];
    t5 = LegP1[97];
    t6 = LegP2[41];
    t7 = LegP2[42];
    t8 = LegP1[95];
    t9 = LegP1[98];
    t10 = LegP2[39];
    t11 = LegP1[94];
    t12 = LegP1[100];
    t13 = LegP2[44];
    t14 = LegP1[101];
    t15 = LegP1[93];
    t16 = LegP2[37];
    t17 = LegP1[92];
    t18 = LegP2[38];
    t19 = LegP2[36];
    t20 = LegP1[102];
    t21 = LegP1[103];
    t22 = LegP1[91];
    t23 = t1 * t2;
    t24 = t3 * t4;
    t25 = t5 * t6;
    t26 = t3 * t7;
    t27 = t8 * t6;
    t28 = t9 * t7;
    t29 = t28 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t30 = t8 * t10;
    t31 = t30 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t32 = t11 * t4;
    t33 = t12 * t13;
    t34 = t33 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t35 = t9 * t13;
    t36 = t35 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t37 = t5 * t2;
    t38 = t37 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t39 = t11 * t7;
    t40 = t39 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t41 = t9 * t4;
    t42 = (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) * t10 * t1 + t41 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t43 = t12 * t7;
    t44 = t43 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t45 = t14 * t2;
    t46 = t45 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t47 = t3 * t13;
    t48 = t47 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t49 = t8 * t2;
    t50 = t1 * t6;
    t51 = t50 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t52 = t3 * t18;
    t53 = t52 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t54 = t15 * t6;
    t55 = t54 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t56 = t20 * t13;
    t57 = t56 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t58 = t5 * t10;
    t59 = t58 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t60 = t12 * t4;
    t61 = t60 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t62 = t14 * t6;
    t63 = t62 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t64 = t11 * t13;
    t65 = t9 * t18;
    t66 = t15 * t2;
    t67 = t20 * t7;
    t68 = t21 * t2;
    t69 = LegP1[104] * t13;
    t70 = t5 * t16;
    t71 = t17 * t7;
    t72 = 0.66031570573455844116e-15;
    t73 = 0.25396757912867632357e-17;
    t29 = -0.15238054747720579413e-16 * t23 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) - 0.11980768164847828359e-10 * t24 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.12799965988085286707e-12 * t25 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.20845658894881752638e-12 * t26 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.20735944900698164467e-10 * t27 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.13714249272948521471e-14 * t29 - 0.10782691348363045523e-8 * t31 - 0.20367305880241308210e-8 * t32 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.18140541366334023110e-18 * t34 - 0.22857082121580869121e-16 * t36 - 0.21333276646808811176e-14 * t38 + 0.10258258456165494061e-10 * t40 - 0.83199778922554363590e-13 * t42 + 0.83446490285136506294e-17 * t44 + 0.36281082732668046222e-18 * t46 + 0.45714164243161738242e-15 * t48 + 0.67656963079879372590e-13 * t49 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) - 0.27936433704154395596e-15 * t51 - 0.13911003035851089594e-8 * t53 + 0.15713238246973497962e-8 * t55 + 0.12597598171065293826e-19 * t57 - 0.11647969049157610902e-10 * t59 - t72 * t61 - t73 * t63;
    t31 = 0.18464865221097889309e-8;
    t34 = -0.95180547087402191952e-9;
    t36 = 0.91519756814809799956e-11;
    t38 = 0.77714079213374955002e-13;
    t40 = 0.25195196342130587654e-21;
    t42 = 0.50390392684261175306e-20;
    t44 = 0.16816206196180411882e-4 * cosP1_2 * t15;
    t46 = cosP1_4 * t8;
    t48 = -0.28993458958931744630e-7 * t46;
    t51 = -0.94982571549460395388e-3 * t22;
    t53 = -0.27253851421395839948e-4 * sinP1_2 * t15;
    t55 = 0.27939151360425135730e-6 * sinP1_4 * t8;
    t57 = t11 * (-0.24644440115091982931e-6 * cosP1_3 * cosP2_2 + 0.72483647397329361558e-7 * sinP1_3 * sinP2_2) + t17 * (0.13047056531519285084e-4 * sinP1_1 * sinP2_2 - 0.44359992207165569276e-4 * cosP1_1 * cosP2_2);
    t59 = cosP1_3 * t11;
    t61 = 0.47970995732050704746e-6 * t17;
    t63 = t10 * (-0.38745804245117876908e-6 * sinP1_2 * sinP2_3 + 0.7907306988799566738e-8 * cosP1_2 * cosP2_3) * t15;
    t41 = (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3) * t10 * t1 + t41 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t74 = t67 * (-sinP1_11 * cosP2_6 + cosP1_11 * sinP2_6);
    t28 = t28 * (cosP1_7 * sinP2_6 - sinP1_7 * cosP2_6);
    t30 = t30 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t32 = t32 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t33 = t33 * (cosP1_9 * sinP2_8 - sinP1_9 * cosP2_8);
    t35 = t35 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t37 = t37 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t23 = t23 * (cosP1_8 * sinP2_7 - sinP1_8 * cosP2_7);
    t24 = t24 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4);
    t25 = t25 * (cosP1_6 * sinP2_5 - sinP1_6 * cosP2_5);
    t39 = t39 * (cosP1_3 * sinP2_6 - sinP1_3 * cosP2_6);
    t43 = t43 * (cosP1_9 * sinP2_6 - sinP1_9 * cosP2_6);
    t45 = t45 * (-sinP1_10 * cosP2_7 + cosP1_10 * sinP2_7);
    t47 = t47 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t49 = t49 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t50 = t50 * (cosP1_8 * sinP2_5 - sinP1_8 * cosP2_5);
    t52 = t52 * (cosP1_5 * sinP2_2 - sinP1_5 * cosP2_2);
    t56 = t56 * (-sinP1_11 * cosP2_8 + cosP1_11 * sinP2_8);
    t54 = t54 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t75 = sinP1_3 * t11;
    t76 = 0.28598093609491766288e-6 * sinP2_5 * t6 - 0.35978246799038028559e-4 * sinP2_3 * t10;
    t77 = t61 * cosP1_1 * t4 * sinP2_4;
    t78 = t10 * (0.7907306988799566738e-8 * cosP1_2 * sinP2_3 + 0.38745804245117876908e-6 * sinP1_2 * cosP2_3) * t15;
    t60 = t16 * ((t53 + t55) * cosP2_1 + (-t44 + t48 + t51) * sinP2_1) + t18 * ((0.44359992207165569276e-4 * t17 * sinP1_1 - 0.24644440115091982931e-6 * t75) * cosP2_2 + (0.13047056531519285084e-4 * cosP1_1 * t17 - 0.72483647397329361558e-7 * t59) * sinP2_2) + t19 * (-0.94887683865594800602e-7 * sinP1_5 * t3 + 0.16130906257151116100e-4 * t75) + t22 * t76 - t31 * t71 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t34 * t70 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t36 * t65 * (cosP1_7 * sinP2_2 - sinP1_7 * cosP2_2) - t38 * t64 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - t40 * t69 * (-sinP1_13 * cosP2_8 + cosP1_13 * sinP2_8) + t42 * t68 * (sinP1_12 * cosP2_7 - cosP1_12 * sinP2_7) + t72 * t60 * (cosP1_9 * sinP2_4 - sinP1_9 * cosP2_4) + t73 * t62 * (-sinP1_10 * cosP2_5 + cosP1_10 * sinP2_5) - t77 + t78;
    t23 = -0.90702706831670115551e-19 * t74 - 0.10258258456165494061e-10 * t39 + 0.83199778922554363590e-13 * t41 + 0.83446490285136506294e-17 * t43 + 0.36281082732668046222e-18 * t45 + 0.45714164243161738242e-15 * t47 + 0.67656963079879372590e-13 * t49 - 0.27936433704154395596e-15 * t50 - 0.13911003035851089594e-8 * t52 + 0.12799965988085286707e-12 * t25 + 0.13714249272948521471e-14 * t28 - 0.10782691348363045523e-8 * t30 + 0.20367305880241308210e-8 * t32 + 0.18140541366334023110e-18 * t33 + 0.22857082121580869121e-16 * t35 + 0.21333276646808811176e-14 * t37 + 0.15238054747720579413e-16 * t23 + 0.11980768164847828359e-10 * t24 + 0.15713238246973497962e-8 * t54 + 0.12597598171065293826e-19 * t56 + t60 - 0.11907625502058769577e-10 * t66 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - 0.20845658894881752638e-12 * t26 * (cosP1_5 * sinP2_6 - sinP1_5 * cosP2_6) + 0.20735944900698164467e-10 * t27 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.11647969049157610902e-10 * t58 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t20 = t20 * t2 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7);
    t21 = t21 * t13 * (cosP1_12 * cosP2_8 + sinP1_12 * sinP2_8);
    t24 = t5 * t18 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2);
    t25 = t1 * t13 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8);
    t26 = t9 * t2 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7);
    t5 = t5 * t7 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t27 = t3 * t6 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t28 = t11 * t10 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t30 = t17 * t16 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t32 = t17 * t6 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t33 = t15 * t7 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t35 = t11 * t16 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t12 = t12 * t6 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t13 = t8 * t13 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t37 = -0.75910147092475840476e-6 * t46 * t19;
    t15 = t15 * t18 * (0.28993458958931744623e-6 * sinP1_2 * sinP2_2 - 0.98577760460367931717e-6 * cosP1_2 * cosP2_2);
    t1 = -0.95180547087402191954e-8 * t3 * t16 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.64696148090178273127e-8 * t28 - 0.12799965988085286708e-11 * t27 - 0.21333276646808811177e-15 * t26 - 0.45714164243161738246e-16 * t12 - 0.29024866186134436978e-17 * t25 - 0.39536534943997833578e-6 * t17 * t10 * (-cosP1_1 * cosP2_3 + sinP1_1 * sinP2_3) + t15 - 0.11647969049157610903e-11 * t9 * t10 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.36571331394529390588e-14 * t13 + 0.40594177847927623554e-12 * t11 * t2 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.41033033824661976241e-10 * t33 + 0.31426476493946995921e-8 * t32 + 0.60468471221113410362e-20 * t21 + 0.11085886390537458568e-18 * t20 + 0.18140541366334023108e-17 * t14 * t7 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) + 0.75119416393595883801e-6 * t35 - 0.10437645225215428064e-4 * t30 - 0.10982370817777175995e-9 * t24 - 0.95846145318782626869e-10 * t8 * t4 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) + t37 - 0.16457099127538225766e-13 * t5 - 0.10565051291752935059e-13 * t1 * t4 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    bf[0] = t16 * ((t44 + t48 + t51) * cosP2_1 + (t53 - t55) * sinP2_1) + t18 * t57 + t19 * (-0.16130906257151116100e-4 * t59 - 0.94887683865594800602e-7 * cosP1_5 * t3) + t22 * (0.28598093609491766288e-6 * cosP2_5 * t6 + 0.35978246799038028559e-4 * cosP2_3 * t10) + t38 * t64 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - t36 * t65 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.11907625502058769577e-10 * t66 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.90702706831670115551e-19 * t67 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + t42 * t68 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7) + t40 * t69 * (cosP1_13 * cosP2_8 + sinP1_13 * sinP2_8) + t34 * t70 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t31 * t71 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t29 + t61 * sinP1_1 * t4 * sinP2_4 + t63;
    bf[1] = t23;
    bf[2] = t1;
}

static void idsbf_6_8_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t8, t9;
    t1 = LegP1[102];
    t2 = LegP2[44];
    t3 = LegP1[97];
    t4 = LegP2[39];
    t5 = LegP1[94];
    t6 = LegP2[42];
    t7 = LegP1[93];
    t8 = LegP2[41];
    t9 = LegP1[100];
    t10 = LegP2[40];
    t11 = LegP1[101];
    t12 = LegP1[98];
    t13 = LegP2[38];
    t14 = LegP2[43];
    t15 = LegP1[99];
    t16 = LegP1[103];
    t17 = LegP2[37];
    t18 = LegP1[92];
    t19 = LegP1[96];
    t20 = LegP1[95];
    t21 = LegP2[36];
    t22 = LegP1[91];
    t23 = t7 * t8;
    t24 = t12 * t2;
    t25 = t20 * t4;
    t26 = t12 * t6;
    t27 = t26 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t28 = t3 * t14;
    t29 = t28 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t30 = t5 * t6;
    t31 = t30 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t32 = t12 * t10;
    t33 = t32 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t34 = t9 * t6;
    t35 = t11 * t14;
    t36 = t35 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t37 = t19 * t2;
    t38 = t37 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t39 = t20 * t14;
    t40 = t39 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t41 = t15 * t8;
    t42 = t41 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t43 = t19 * t13;
    t44 = t43 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t45 = t11 * t8;
    t46 = t45 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t47 = t5 * t2;
    t48 = t47 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t49 = t12 * t13;
    t50 = t49 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t51 = t7 * t14;
    t52 = t15 * t4;
    t53 = t52 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t54 = t1 * t6;
    t55 = t54 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6);
    t56 = t16 * t14;
    t57 = t56 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7);
    t58 = LegP1[104] * t2;
    t59 = t58 * (cosP1_13 * cosP2_8 + sinP1_13 * sinP2_8);
    t60 = t18 * t6;
    t61 = t60 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t62 = t15 * t14;
    t63 = t62 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t64 = t19 * t10;
    t65 = t64 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t66 = t3 * t8;
    t67 = t66 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t68 = t19 * t6;
    t69 = t20 * t8;
    t70 = t5 * t10;
    t71 = t9 * t2;
    t72 = t1 * t2;
    t73 = t3 * t4;
    t74 = t9 * t10;
    t75 = -0.29412285438094280632e-9;
    t27 = t75 * ((cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) * t17 * t3 + t23 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5)) + 0.24420456773997693324e-11 * t51 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.27206391236628446218e-15 * t27 - 0.95222369328199561755e-15 * t29 - 0.16160596394557297052e-11 * t31 - 0.32680317153438089596e-11 * t50 - 0.37136724037997829085e-13 * t53 - 0.80971402489965613738e-19 * t55 - 0.13495233748327602289e-20 * t57 - 0.28115070309015838104e-22 * t59 + 0.38785431346937512923e-9 * t61 + 0.22671992697190371846e-17 * t63 + 0.20425198220898805994e-12 * t33 + 0.80971402489965613735e-18 * t36 - 0.51011983568678336652e-16 * t38 - 0.89781091080873872506e-14 * t40 + 0.28680070761945820386e-14 * t42 + 0.12418520518306474046e-8 * t44 - 0.56679981742975929616e-17 * t46 + 0.15609666972015571015e-13 * t48 - 0.93521969875910283865e-17 * t24 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.58824570876188561268e-9 * t25 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.44696214174461018786e-16 * t34 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + 0.44564068845597394904e-11 * t65 + 0.34280052958151842231e-13 * t67;
    t29 = cosP1_4 * t20;
    t31 = t18 * (-0.27953436080364804314e-4 * sinP1_1 * sinP2_2 - 0.93178120267882681037e-5 * cosP1_1 * cosP2_2) + t5 * (0.11647265033485335132e-6 * sinP1_3 * sinP2_2 + 0.38824216778284450441e-7 * cosP1_3 * cosP2_2);
    t33 = cosP1_3 * t5;
    t36 = -0.26471056894284852572e-7 * cosP1_5 * t19 + 0.81001434096511648862e-5 * t33;
    t38 = 0.61765799419997989332e-7 * cosP2_5 * t8 - 0.96354647095196863358e-5 * cosP2_3 * t4;
    t40 = cosP2_4 * t10;
    t42 = -0.10706071899466318150e-6 * t40;
    t44 = (0.12718813416565985964e-2 * t21 + t42) * t18 * cosP1_1;
    t46 = t4 * (-0.11411966749980580886e-6 * cosP1_2 * cosP2_3 - 0.20588599806665996446e-6 * sinP1_2 * sinP2_3) * t7;
    t48 = t69 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t30 = t30 * (cosP1_3 * sinP2_6 - sinP1_3 * cosP2_6);
    t32 = t32 * (cosP1_7 * sinP2_4 - sinP1_7 * cosP2_4);
    t34 = t34 * (cosP1_9 * sinP2_6 - sinP1_9 * cosP2_6);
    t35 = t35 * (-sinP1_10 * cosP2_7 + cosP1_10 * sinP2_7);
    t37 = t37 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t50 = t71 * (cosP1_9 * sinP2_8 - sinP1_9 * cosP2_8);
    t25 = t25 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3);
    t53 = t73 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t23 = (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) * t17 * t3 + t23 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t55 = t60 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t49 = t49 * (cosP1_7 * sinP2_2 - sinP1_7 * cosP2_2);
    t57 = t74 * (cosP1_9 * sinP2_4 - sinP1_9 * cosP2_4);
    t45 = t45 * (-sinP1_10 * cosP2_5 + cosP1_10 * sinP2_5);
    t47 = t47 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t51 = t51 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t52 = t52 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3);
    t54 = t54 * (-sinP1_11 * cosP2_6 + cosP1_11 * sinP2_6);
    t59 = t18 * sinP1_1;
    t60 = sinP1_3 * t5;
    t33 = (0.93178120267882681037e-5 * t59 + 0.38824216778284450441e-7 * t60) * cosP2_2 + (-0.11647265033485335132e-6 * t33 - 0.27953436080364804314e-4 * t18 * cosP1_1) * sinP2_2;
    t61 = t20 * (0.13294353018018614847e-6 * cosP1_4 * sinP2_1 - 0.68236502216378731072e-7 * sinP1_4 * cosP2_1) + t7 * (0.18894452165431765879e-4 * sinP1_2 * cosP2_1 - 0.12941405592761483474e-5 * cosP1_2 * sinP2_1);
    t63 = t7 * t4 * (-0.11411966749980580886e-6 * cosP1_2 * sinP2_3 + 0.20588599806665996446e-6 * sinP1_2 * cosP2_3);
    t23 = t63 + t42 * t18 * sinP1_1 + t33 * t13 + t61 * t17 + 0.12418520518306474046e-8 * t43 * (cosP1_5 * sinP2_2 - sinP1_5 * cosP2_2) + 0.27206391236628446218e-15 * t26 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.28680070761945820386e-14 * t41 * (cosP1_8 * sinP2_5 - sinP1_8 * cosP2_5) + 0.28115070309015838104e-22 * t58 * (-sinP1_13 * cosP2_8 + cosP1_13 * sinP2_8) + 0.18274795700860294767e-19 * t72 * (-sinP1_11 * cosP2_8 + cosP1_11 * sinP2_8) + 0.13495233748327602289e-20 * t56 * (-sinP1_12 * cosP2_7 + cosP1_12 * sinP2_7) + 0.56679981742975929616e-17 * t45 + 0.95222369328199561755e-15 * t28 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + 0.44210385759521225098e-15 * t57 - 0.89781091080873872506e-14 * t39 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.32680317153438089596e-11 * t49 - 0.15597424095959088215e-10 * t53 - 0.38785431346937512923e-9 * t55 + t75 * t23;
    t26 = -0.26471056894284852572e-7 * sinP1_5 * t19 - 0.81001434096511648862e-5 * t60 + 0.12718813416565985964e-2 * t59;
    t28 = -0.21198022360943309939e-2 * sinP2_1 * t17 + 0.96354647095196863358e-5 * sinP2_3 * t4 + 0.61765799419997989332e-7 * sinP2_5 * t8;
    t23 = t23 + t26 * t21 + t28 * t22 + 0.20425198220898805994e-12 * t32 + 0.44696214174461018786e-16 * t34 + 0.80971402489965613735e-18 * t35 - 0.20242850622491403434e-19 * t50 + 0.80971402489965613738e-19 * t54 - 0.22671992697190371846e-17 * t62 * (cosP1_8 * sinP2_7 - sinP1_8 * cosP2_7) - 0.51011983568678336652e-16 * t37 + 0.93521969875910283865e-17 * t24 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.15609666972015571015e-13 * t47 - 0.34280052958151842231e-13 * t66 * (cosP1_6 * sinP2_5 - sinP1_6 * cosP2_5) + 0.10338428669918809563e-12 * t68 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.37136724037997829085e-13 * t52 + 0.16160596394557297052e-11 * t30 - 0.24420456773997693324e-11 * t51 + 0.11723778111687930042e-10 * t48 - 0.44564068845597394904e-11 * t64 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4) - 0.58824570876188561268e-9 * t25 - 0.13636605066752802839e-8 * t70 * (cosP1_3 * sinP2_4 - sinP1_3 * cosP2_4);
    t24 = t18 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t25 = t7 * t6 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t26 = t5 * t14 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t28 = t12 * t14 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7);
    t30 = t3 * t6 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t32 = t20 * t10 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t33 = t7 * t13 * (0.37271248107153072420e-5 * sinP1_2 * sinP2_2 + 0.12423749369051024140e-5 * cosP1_2 * cosP2_2);
    t3 = t33 + 0.30282889087061871339e-3 * t18 * t17 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.13764949585028123337e-5 * t18 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.11000194753847260958e-5 * t5 * t17 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.20000354097904110832e-7 * t5 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.13026420124097700048e-11 * t19 * t8 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.16043064784415062165e-9 * t32 + 0.10882556494651378486e-13 * t30 + 0.95222369328199561751e-16 * t28 + 0.89068542738962175114e-18 * t15 * t2 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) - 0.18364314084724201196e-14 * t20 * t2 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) - 0.30525570967497116654e-12 * t26 - 0.15597424095959088215e-11 * t12 * t4 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.13072126861375235837e-9 * t3 * t13 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.51713908462583350574e-10 * t25 - 0.88236856314282841904e-8 * t24 - 0.11176668466475826641e-7 * t19 * t17 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t1 = t22 * (0.17806338783192380349e-1 * t21 - 0.14988500659252845411e-5 * t40) - 0.14619836560688235813e-20 * t16 * t2 * (cosP1_12 * cosP2_8 + sinP1_12 * sinP2_8) - 0.67476168741638011444e-19 * t1 * t14 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7) - 0.38866273195183494596e-17 * t11 * t6 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) - 0.26072791601768927622e-15 * t9 * t8 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) - 0.19452569734189339043e-13 * t15 * t10 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + t3 - 0.95295804819425469262e-6 * t29 * t21;
    bf[0] = t13 * t31 + t17 * ((-0.21198022360943309939e-2 * t22 + 0.13294353018018614847e-6 * t29 + 0.12941405592761483474e-5 * cosP1_2 * t7) * cosP2_1 + (0.18894452165431765879e-4 * sinP1_2 * t7 + 0.68236502216378731072e-7 * sinP1_4 * t20) * sinP2_1) + t21 * t36 + t22 * t38 - 0.10338428669918809563e-12 * t68 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.11723778111687930042e-10 * t69 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.13636605066752802839e-8 * t70 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.20242850622491403434e-19 * t71 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + 0.18274795700860294767e-19 * t72 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8) + 0.15597424095959088215e-10 * t73 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.44210385759521225098e-15 * t74 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t27 + t44 + t46;
    bf[1] = t23;
    bf[2] = t1;
}

static void idsbf_6_10_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[9];
    t2 = LegP2[57];
    t3 = LegP1[8];
    t4 = LegP2[58];
    t5 = LegP2[55];
    t6 = LegP1[6];
    t7 = LegP1[7];
    t8 = LegP2[60];
    t9 = LegP2[56];
    t10 = LegP2[61];
    t11 = LegP2[62];
    t12 = LegP2[59];
    t13 = t3 * t8;
    t14 = t3 * t11;
    t15 = t1 * LegP2[63];
    t16 = t1 * t12;
    t17 = t1 * t10;
    t18 = 0.11168527039909523594e-7;
    t19 = 0.55842635199547617968e-9;
    t20 = -0.37228423466365078644e-9;
    t21 = 0.31023686221970898870e-10;
    t22 = sinP2_3 * t4;
    t23 = sinP2_1 * t9;
    t24 = cosP2_3 * t4;
    t25 = cosP2_1 * t9;
    t26 = -0.13509450307474559739e-2 * t25 + 0.22337054079819047186e-6 * cosP2_5 * t8 - 0.93815627135239998184e-5 * t24;
    t12 = cosP2_4 * t12;
    t27 = -0.67011162239457141568e-6 * t12;
    t28 = 0.56289376281143998912e-4 * t1;
    t29 = 0.93815627135239998184e-5 * t22 - 0.13509450307474559738e-2 * t23 + 0.22337054079819047186e-6 * sinP2_5 * t8;
    t29 = -t18 * (t7 * t10 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t13 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5)) - t19 * t14 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + t2 * (t1 * (0.62543751423493332126e-6 * cosP2_2 * sinP1_3 - 0.18763125427047999637e-5 * cosP1_3 * sinP2_2) + t7 * (-0.56289376281143998913e-4 * cosP1_1 * sinP2_2 + 0.18763125427047999637e-4 * cosP2_2 * sinP1_1)) + t20 * t17 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - t21 * t15 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + t3 * ((-0.46907813567619999106e-6 * t22 - 0.33773625768686399341e-4 * t23) * cosP1_2 + (0.14072344070285999728e-5 * t24 + 0.10132087730605919804e-3 * t25) * sinP1_2) + t6 * t29 + 0.22337054079819047185e-7 * t16 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + (t27 + 0.33773625768686399349e-2 * t5) * t7 * sinP1_1 - t28 * sinP1_3 * t5;
    t4 = t6 * (0.13509450307474559738e-1 * t5 - 0.26804464895782856624e-5 * t12) + 0.11257875256228799782e-4 * t1 * t9 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.46907813567619999090e-5 * t7 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.11168527039909523592e-6 * t7 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.44674108159638094376e-8 * t3 * t10 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.18614211733182539322e-9 * t1 * t11 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + 0.31271875711746666065e-6 * t1 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.67547251537372798689e-3 * t7 * t9 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t3 * t2 * (0.22515750512457599565e-4 * sinP1_2 * sinP2_2 + 0.75052501708191998550e-5 * cosP1_2 * cosP2_2);
    bf[0] = t2 * (t1 * (0.62543751423493332126e-6 * cosP1_3 * cosP2_2 + 0.18763125427047999637e-5 * sinP1_3 * sinP2_2) + t7 * (-0.56289376281143998914e-4 * sinP1_1 * sinP2_2 - 0.18763125427047999638e-4 * cosP1_1 * cosP2_2)) + t3 * ((-0.46907813567619999106e-6 * t24 + 0.33773625768686399340e-4 * t25) * cosP1_2 + (0.10132087730605919804e-3 * t23 - 0.14072344070285999728e-5 * t22) * sinP1_2) + t6 * t26 + t18 * ((cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) * t10 * t7 - t13 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5)) + t19 * t14 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t21 * t15 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - 0.22337054079819047186e-7 * t16 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + t20 * t17 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + (0.33773625768686399350e-2 * t5 + t27) * t7 * cosP1_1 + t28 * cosP1_3 * t5;
    bf[1] = t29;
    bf[2] = t4;
}

static void idsbf_6_10_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t5, t6, t7, t8, t9;
    t1 = LegP1[15];
    t2 = LegP2[56];
    t3 = LegP1[16];
    t4 = LegP2[55];
    t5 = LegP1[20];
    t6 = LegP2[60];
    t7 = LegP1[18];
    t8 = LegP2[58];
    t9 = LegP2[57];
    t10 = LegP1[17];
    t11 = LegP2[61];
    t12 = LegP2[62];
    t13 = LegP2[63];
    t14 = LegP2[59];
    t15 = LegP1[19];
    t16 = t3 * t11;
    t17 = t10 * t12;
    t18 = t7 * t13;
    t19 = t7 * t14;
    t20 = t15 * t8;
    t21 = t5 * t14;
    t22 = t10 * t6;
    t23 = t7 * t11;
    t24 = t15 * t12;
    t25 = t5 * t13;
    t26 = t15 * t2;
    t27 = 0.39957737071651522280e-8;
    t28 = -0.33298114226376268566e-9;
    t29 = 0.71353101913663432638e-10;
    t30 = -0.11892183652277238773e-10;
    t31 = 0.99101530435643656446e-12;
    t32 = -0.49550765217821828220e-12;
    t33 = 0.71923926728972740098e-6;
    t34 = cosP2_3 * t8;
    t35 = cosP2_1 * t2;
    t36 = 0.19978868535825761137e-6 * cosP2_5 * t6 - 0.12083219690467420337e-2 * t35 - 0.83911247850468196778e-5 * t34;
    t5 = -0.89904908411215925124e-6 * t5;
    t37 = 0.30208049226168550843e-2 * t3;
    t38 = cosP2_2 * t9;
    t39 = 0.17980981682243185027e-5 * t4;
    t36 = t1 * t36 + t4 * (t37 * cosP1_1 + t5 * cosP1_5) + t27 * t16 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t29 * t17 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t31 * t18 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - 0.71353101913663432640e-9 * t19 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.19978868535825761138e-7 * t20 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.35676550956831716320e-9 * t21 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.99894342679128805690e-8 * t22 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + t28 * t23 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t30 * t24 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t32 * t25 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t33 * t26 * (cosP1_4 * cosP2_1 - sinP1_4 * sinP2_1) + (t39 + 0.55940831900312131191e-6 * t38) * t7 * cosP1_3;
    t40 = sinP2_1 * t2;
    t41 = 0.19978868535825761137e-6 * sinP2_5 * t6 - 0.12083219690467420336e-2 * t40;
    t5 = t1 * t41 - t27 * t16 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t28 * t23 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - t29 * t17 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + t30 * t24 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - t31 * t18 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + t32 * t25 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t33 * t26 * (cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t4 * (t37 * sinP1_1 + t5 * sinP1_5) + t7 * (t9 * (0.55940831900312131191e-6 * cosP2_2 * sinP1_3 - 0.16782249570093639357e-5 * cosP1_3 * sinP2_2) - t39 * sinP1_3) + t8 * (t10 * (0.53942945046729555073e-6 * sinP1_2 * cosP2_3 + 0.29968302803738641707e-6 * cosP1_2 * sinP2_3) + 0.83911247850468196778e-5 * sinP2_3 * t1) + 0.71353101913663432638e-9 * t19 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t5 = t3 * (t9 * (0.67128998280374557436e-5 * cosP2_2 * sinP1_1 - 0.20138699484112367228e-4 * cosP1_1 * sinP2_2) - 0.59936605607477283416e-6 * sinP1_1 * t14 * cosP2_4) + 0.19978868535825761139e-7 * t20 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.35676550956831716320e-9 * t21 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.99894342679128805690e-8 * t22 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t5 + (-0.56100662848598737275e-4 * cosP1_2 * sinP2_1 + 0.64731534056075466087e-4 * sinP1_2 * cosP2_1) * t10 * t2;
    t16 = -0.33564499140187278716e-5;
    t17 = 0.29968302803738641706e-5 * t1 * t14 * cosP2_4;
    t18 = -0.10069349742056183614e-4 * t10 * sinP1_2 * t9 * sinP2_2;
    t1 = t31 * t15 * t13 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) + t4 * (-0.15104024613084275421e-1 * t1 + 0.17980981682243185025e-5 * cosP1_4 * t15) - 0.28769570691589096040e-5 * t7 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + t16 * (t38 * t10 * cosP1_2 + t3 * t8 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3)) + 0.79915474143303044556e-7 * t3 * t6 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.19978868535825761139e-8 * t10 * t11 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + 0.47568734609108955094e-10 * t7 * t12 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) - 0.71353101913663432641e-9 * t15 * t14 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.79915474143303044561e-7 * t7 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.48332878761869681348e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t17 + t18;
    bf[0] = t10 * ((0.29968302803738641707e-6 * t34 + 0.56100662848598737280e-4 * t35) * cosP1_2 + (0.64731534056075466092e-4 * t40 - 0.53942945046729555073e-6 * sinP2_3 * t8) * sinP1_2) + t3 * (t9 * (-0.67128998280374557436e-5 * cosP1_1 * cosP2_2 - 0.20138699484112367228e-4 * sinP1_1 * sinP2_2) - 0.59936605607477283416e-6 * cosP1_1 * cosP2_4 * t14) + t36 + 0.16782249570093639357e-5 * t7 * sinP1_3 * t9 * sinP2_2;
    bf[1] = t5;
    bf[2] = t1;
}

static void idsbf_6_10_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t6, t7, t8, t9;
    t1 = LegP1[31];
    t2 = LegP2[63];
    t3 = LegP1[32];
    t4 = LegP2[64];
    t5 = LegP1[33];
    t6 = LegP2[65];
    t7 = LegP2[61];
    t8 = LegP2[60];
    t9 = LegP2[59];
    t10 = LegP2[58];
    t11 = LegP1[34];
    t12 = LegP1[35];
    t13 = LegP2[57];
    t14 = LegP2[56];
    t15 = LegP1[30];
    t16 = LegP1[29];
    t17 = LegP2[62];
    t18 = LegP1[28];
    t19 = LegP2[55];
    t20 = t15 * t8;
    t21 = t1 * t7;
    t22 = t3 * t17;
    t23 = t5 * t2;
    t24 = t11 * t4;
    t25 = t12 * t6;
    t26 = t12 * t13;
    t27 = t11 * t14;
    t28 = t16 * t7;
    t29 = t15 * t17;
    t30 = t1 * t2;
    t31 = t3 * t4;
    t32 = t5 * t6;
    t33 = t5 * t7;
    t34 = t3 * t8;
    t35 = t1 * t9;
    t36 = t3 * t10;
    t37 = t5 * t9;
    t38 = t11 * t8;
    t12 = t12 * t7;
    t39 = t12 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t40 = t5 * t13;
    t41 = t40 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t42 = -0.18846007506833696204e-7;
    t43 = -0.21913962217248483958e-9;
    t44 = -0.12077801045661642395e-15;
    t45 = cosP2_3 * t10;
    t46 = cosP2_1 * t14;
    t47 = sinP2_3 * t10;
    t48 = sinP2_1 * t14;
    t49 = t1 * (-0.94493005080775462824e-6 * cosP1_3 * cosP2_2 + 0.71351860979361063768e-6 * sinP1_3 * sinP2_2) + t16 * (-0.21405558293808319130e-4 * sinP1_1 * sinP2_2 + 0.28347901524232638848e-4 * cosP1_1 * cosP2_2);
    t50 = 0.10729075901564857745e-5 * sinP1_4;
    t51 = 0.12990596802384901289e-5 * cosP1_4;
    t52 = -0.57852860253535997654e-6 * t16;
    t49 = t13 * t49 + t15 * ((0.48210716877946664711e-6 * t45 - 0.44546702395222718190e-4 * t46) * cosP1_2 + (0.2892643012676799882e-5 * t48 - 0.57852860253535997653e-6 * t47) * sinP1_2) + t44 * t25 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) + t43 * t26 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t42 * t27 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) - 0.34436226341390474790e-9 * t28 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - 0.28696855284492062328e-10 * t29 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) - 0.63770789521093471838e-12 * t30 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - 0.72466806273969854356e-14 * t31 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9) + 0.24155602091323284786e-15 * t32 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10) + t52 * cosP1_1 * t9 * cosP2_4 + t3 * t14 * (t51 * cosP2_1 - t50 * sinP2_1);
    t53 = -0.25253232650353014851e-8;
    t46 = 0.10606357713148266237e-6 * cosP2_5 * t8 - 0.22273351197611359096e-4 * t45 + 0.87473524703346428448e-3 * t46;
    t54 = -0.16005958003478292681e-5 * cosP1_5 * t5 + 0.19207149604173951222e-4 * cosP1_3 * t1 - 0.17494704940669285689e-2 * t16 * cosP1_1;
    t39 = t18 * t46 + t19 * t54 + t53 * t20 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + 0.11478742113796824931e-10 * t21 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.14348427642246031162e-11 * t22 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + 0.53142324600911226528e-13 * t23 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + 0.12077801045661642393e-14 * t24 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) - 0.17392033505752765044e-12 * t33 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.19826918196558152151e-10 * t34 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.13774490536556189917e-8 * t35 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.24105358438973332352e-8 * t36 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.11478742113796824930e-9 * t37 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.33044863660930253588e-11 * t38 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.86960167528763825236e-13 * t39 + 0.43827924434496967912e-9 * t41 + t49;
    t37 = t37 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t38 = t38 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t12 = t12 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t41 = t1 * (-0.94493005080775462824e-6 * cosP2_2 * sinP1_3 - 0.71351860979361063768e-6 * cosP1_3 * sinP2_2) + t16 * (-0.21405558293808319130e-4 * cosP1_1 * sinP2_2 - 0.28347901524232638848e-4 * cosP2_2 * sinP1_1);
    t45 = 0.57852860253535997653e-6 * t45 * t15 * sinP1_2;
    t20 = t13 * t41 + t14 * (t15 * (0.2892643012676799882e-5 * sinP1_2 * cosP2_1 + 0.44546702395222718190e-4 * cosP1_2 * sinP2_1) + t3 * (t50 * cosP2_1 + t51 * sinP2_1)) + t42 * t27 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t43 * t26 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t44 * t25 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + t53 * t20 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + 0.11478742113796824931e-10 * t21 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.14348427642246031162e-11 * t22 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.53142324600911226528e-13 * t23 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + 0.12077801045661642393e-14 * t24 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) - 0.43827924434496967912e-9 * t40 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t52 * sinP1_1 * t9 * cosP2_4 + t45;
    t21 = -0.19207149604173951222e-4 * sinP1_3 * t1 - 0.17494704940669285689e-2 * sinP1_1 * t16 - 0.16005958003478292681e-5 * sinP1_5 * t5;
    t22 = 0.10606357713148266237e-6 * t8 * sinP2_5 + 0.87473524703346428448e-3 * t48;
    t23 = t47 * (0.22273351197611359096e-4 * t18 + 0.48210716877946664711e-6 * cosP1_2 * t15);
    t17 = t1 * t17 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t4 = t5 * t4 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9);
    t6 = t11 * t6 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10);
    t24 = t11 * t7 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t25 = t5 * t8 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t26 = t3 * t9 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t27 = 0.12246293458468499982e-1 * t18 + 0.96035748020869756088e-5 * cosP1_4 * t3;
    t40 = (-0.71351860979361063770e-5 * sinP1_2 * sinP2_2 + 0.94493005080775462826e-5 * cosP1_2 * cosP2_2) * t15 * t13;
    t9 = 0.40497002177475198356e-5 * t18 * t9 * cosP2_4;
    t1 = t40 + 0.24992435629527550987e-3 * t16 * t14 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t27 * t19 + 0.75384030027334784802e-7 * t5 * t14 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.30303879180423617821e-7 * t16 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.24155602091323284786e-15 * t6 - 0.48311204182646569564e-14 * t4 - 0.17392033505752765045e-12 * t24 - 0.31885394760546735916e-12 * t3 * t2 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) - 0.11478742113796824931e-10 * t17 - 0.13217945464372101434e-10 * t25 - 0.11478742113796824929e-9 * t15 * t7 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.68872452682780949579e-9 * t26 + 0.43827924434496967912e-9 * t11 * t13 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.19284286751178665885e-7 * t1 * t10 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.63638146278889597416e-5 * t16 * t10 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.94878690815799036148e-5 * t1 * t14 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + t9;
    bf[0] = t39;
    bf[1] = t18 * t22 + t19 * t21 + 0.28696855284492062328e-10 * t29 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + 0.63770789521093471838e-12 * t30 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + 0.72466806273969854356e-14 * t31 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9) - 0.24155602091323284786e-15 * t32 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10) + 0.17392033505752765044e-12 * t33 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.19826918196558152151e-10 * t34 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.13774490536556189917e-8 * t35 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + 0.24105358438973332352e-8 * t36 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + 0.11478742113796824930e-9 * t37 + 0.33044863660930253588e-11 * t38 + 0.86960167528763825236e-13 * t12 + 0.34436226341390474790e-9 * t28 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + t20 + t23;
    bf[2] = t1;
}

static void idsbf_6_10_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t8, t9;
    t1 = LegP1[50];
    t2 = LegP2[61];
    t3 = LegP1[49];
    t4 = LegP2[60];
    t5 = LegP1[48];
    t6 = LegP2[59];
    t7 = LegP2[58];
    t8 = LegP1[51];
    t9 = LegP1[52];
    t10 = LegP1[53];
    t11 = LegP2[62];
    t12 = LegP1[54];
    t13 = LegP2[63];
    t14 = LegP2[57];
    t15 = LegP2[56];
    t16 = LegP1[47];
    t17 = LegP1[46];
    t18 = LegP1[45];
    t19 = LegP2[55];
    t20 = LegP2[64];
    t21 = LegP2[65];
    t22 = t12 * t6;
    t23 = t10 * t7;
    t24 = t9 * t14;
    t25 = t16 * t4;
    t26 = t17 * t2;
    t27 = t16 * t11;
    t28 = t27 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t29 = t5 * t13;
    t30 = t29 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t31 = t3 * t20;
    t32 = t31 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9);
    t33 = t1 * t21;
    t34 = t33 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10);
    t35 = t12 * t21;
    t36 = t35 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t37 = t10 * t20;
    t38 = t37 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t39 = t9 * t13;
    t40 = t8 * t11;
    t41 = t40 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t42 = t1 * t2;
    t43 = t42 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t44 = t3 * t4;
    t45 = t44 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t46 = t5 * t6;
    t47 = t3 * t7;
    t48 = t1 * t6;
    t49 = t8 * t4;
    t50 = t9 * t2;
    t51 = t10 * t11;
    t52 = t12 * t13;
    t53 = t12 * t2;
    t54 = t10 * t4;
    t55 = t9 * t6;
    t56 = t8 * t7;
    t57 = t56 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t58 = t1 * t14;
    t59 = t3 * t11;
    t60 = t59 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t61 = t1 * t13;
    t62 = t61 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t63 = t8 * t20;
    t64 = t63 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t65 = t9 * t21;
    t66 = t65 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t67 = 0.11915430189591596056e-10;
    t68 = 0.89365726421936970356e-10;
    t69 = cosP1_1 * t17;
    t70 = -0.21469222115606137773e-4 * cosP1_3 * t5 + 0.11796275887695680094e-6 * cosP1_5 * t1 - 0.11567091099020449738e-2 * t69;
    t71 = 0.93588282528438184272e-3 * cosP2_1 * t15 - 0.98302299064130667392e-8 * cosP2_5 * t4 + 0.20112650388521134564e-4 * cosP2_3 * t7;
    t28 = 0.85177021146721714345e-15 * t41 - 0.27210717981038500611e-12 * t23 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.47413352729820039244e-14 * t22 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - 0.22246233758320259514e-12 * t43 - 0.78481006230866503323e-16 * t64 + 0.40400320941505170427e-17 * t38 - 0.13531207970839052298e-17 * t66 + t70 * t19 + t71 * t18 - t67 * (t24 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) * t5 * t2) + 0.42448720050420060956e-10 * t28 - 0.23674201465780005900e-10 * t45 - 0.20404202495709682033e-18 * t36 + 0.16481011308481965698e-13 * t32 - 0.47413352729820039250e-14 * t62 + 0.32474899130013725512e-15 * t34 + 0.12355925907086174612e-15 * t39 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.86292301968272471431e-12 * t30 + t68 * (t25 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) * t15 * t8) + 0.15728367850260906794e-8 * t26 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t30 = t17 * (0.30845576264054532634e-4 * sinP1_1 * sinP2_2 - 0.23134182198040899478e-4 * cosP1_1 * cosP2_2) + t5 * (0.17525895604576438998e-6 * cosP1_3 * cosP2_2 - 0.23367860806101918662e-6 * sinP1_3 * sinP2_2);
    t32 = t16 * (-0.37031420780851625767e-4 * sinP1_2 * sinP2_1 + 0.20015369412044683173e-4 * cosP1_2 * cosP2_1) + t3 * (-0.20160907880788980524e-6 * cosP1_4 * cosP2_1 + 0.16407547371067627769e-6 * sinP1_4 * sinP2_1);
    t34 = 0.13175061381062707639e-6 * sinP1_2;
    t36 = -0.23393393870793900656e-6 * cosP1_2;
    t38 = 0.23592551775391360189e-6 * t69 * t6 * cosP2_4;
    t41 = t16 * t7 * (t36 * cosP2_3 + t34 * sinP2_3);
    t28 = t28 + t41 - 0.15465742042000520595e-8 * t46 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) + 0.92692640659667747973e-15 * t50 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.11273429269419050429e-12 * t49 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.27210717981038500610e-12 * t60 - 0.31315081303941806746e-17 * t51 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + t30 * t14 + t32 * t15 + 0.32751065672215362233e-9 * t47 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.74013152908424721658e-10 * t57 + 0.51418590289188398728e-15 * t53 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + t38 - 0.40378842833614949713e-18 * t52 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + 0.14508485935324932011e-11 * t55 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.84976604626376486780e-11 * t48 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.28597032455019830533e-8 * t58 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + 0.26840504130956344134e-13 * t54 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t23 = t23 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t25 = t25 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) * t15 * t8;
    t26 = t26 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t27 = t27 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t30 = t54 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t32 = t55 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t38 = t56 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t41 = t51 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t33 = t33 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10);
    t35 = t35 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t37 = t37 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9);
    t39 = t39 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t40 = t40 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t42 = t42 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t43 = t44 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t44 = t46 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t45 = t47 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t34 = t16 * (-t34 * cosP2_3 + t36 * sinP2_3) - 0.20112650388521134564e-4 * sinP2_3 * t18;
    t36 = t14 * (0.17525895604576438998e-6 * cosP2_2 * sinP1_3 + 0.23367860806101918662e-6 * cosP1_3 * sinP2_2) + 0.21469222115606137773e-4 * sinP1_3 * t19;
    t46 = -0.11567091099020449738e-2 * sinP1_1 * t17 + 0.11796275887695680094e-6 * sinP1_5 * t1;
    t47 = 0.93588282528438184272e-3 * sinP2_1 * t15 - 0.98302299064130667392e-8 * sinP2_5 * t4;
    t22 = -0.27210717981038500611e-12 * t23 - 0.47413352729820039244e-14 * t22 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) - 0.27210717981038500610e-12 * t59 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.78481006230866503323e-16 * t63 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) - 0.13531207970839052298e-17 * t65 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + t34 * t7 + t36 * t5 + t46 * t19 + t47 * t18 + t67 * ((cosP1_3 * sinP2_6 - sinP1_3 * cosP2_6) * t5 * t2 + t24 * (cosP1_7 * sinP2_2 - sinP1_7 * cosP2_2)) - 0.74013152908424721658e-10 * t38 - 0.42448720050420060956e-10 * t27 - 0.51418590289188398728e-15 * t53 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - 0.26840504130956344134e-13 * t30 - 0.47413352729820039250e-14 * t61 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.14508485935324932011e-11 * t32 + t68 * t25 - 0.15728367850260906794e-8 * t26;
    t23 = t16 * (-0.20015369412044683173e-4 * cosP1_2 * sinP2_1 - 0.37031420780851625767e-4 * sinP1_2 * cosP2_1) + t3 * (-0.20160907880788980524e-6 * cosP1_4 * sinP2_1 - 0.16407547371067627769e-6 * sinP1_4 * cosP2_1);
    t24 = t14 * (0.30845576264054532634e-4 * cosP1_1 * sinP2_2 + 0.23134182198040899478e-4 * cosP2_2 * sinP1_1) + 0.23592551775391360189e-6 * cosP2_4 * sinP1_1 * t6;
    t25 = t12 * t4 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5);
    t26 = t10 * t6 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t27 = t16 * t2 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t30 = t5 * t11 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t32 = t1 * t20 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9);
    t34 = -0.11567091099020449739e-1 * t18 + 0.33029572485547904264e-5 * cosP1_4 * t3;
    t18 = 0.23592551775391360190e-5 * t18 * t6 * cosP2_4;
    t2 = -0.28597032455019830530e-9 * t27 + 0.85152770747759941811e-8 * t5 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.29822782367729271262e-14 * t25 - 0.23544301869259950996e-14 * t32 + 0.29661645011093679350e-13 * t8 * t2 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.23793449295385416299e-9 * t3 * t6 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.43299865506684967350e-16 * t8 * t21 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10) - 0.14536383420101381897e-16 * t10 * t13 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) - 0.70747866750700101586e-11 * t30 + t18 - 0.44889245490561300476e-18 * t12 * t20 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9) - 0.18717656505687636853e-3 * t17 * t15 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.10647127643340214294e-15 * t9 * t11 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + t34 * t19 + 0.33820287808257151287e-11 * t1 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.17068806982735214129e-12 * t26 - 0.13275738764349610989e-12 * t3 * t13 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t1 = -0.92516441135530902082e-11 * t9 * t7 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.38129376606693107376e-9 * t8 * t14 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.26809717926581091106e-8 * t1 * t15 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.47538991827413590781e-5 * t5 * t15 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.40225300777042269124e-5 * t17 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.19660459812826133478e-8 * t17 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + t2 + t16 * t14 * (-0.56082865934644604788e-5 * sinP1_2 * sinP2_2 + 0.42062149450983453596e-5 * cosP1_2 * cosP2_2);
    bf[0] = t28;
    bf[1] = t22 - 0.85177021146721714345e-15 * t40 + 0.15465742042000520595e-8 * t44 + 0.92692640659667747973e-15 * t50 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.11273429269419050429e-12 * t49 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.22246233758320259514e-12 * t42 - 0.40400320941505170427e-17 * t37 - 0.31315081303941806746e-17 * t41 + t23 * t15 + t24 * t17 + 0.32751065672215362233e-9 * t45 + 0.23674201465780005900e-10 * t43 - 0.32474899130013725512e-15 * t33 - 0.40378842833614949713e-18 * t52 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + 0.20404202495709682033e-18 * t35 - 0.16481011308481965698e-13 * t31 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9) - 0.12355925907086174612e-15 * t39 - 0.86292301968272471431e-12 * t29 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + 0.84976604626376486780e-11 * t48 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.28597032455019830533e-8 * t58 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    bf[2] = t1;
}

static void idsbf_6_10_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t9;
    t1 = LegP1[72];
    t2 = LegP2[64];
    t3 = LegP1[73];
    t4 = LegP2[65];
    t5 = LegP1[77];
    t6 = LegP2[61];
    t7 = LegP1[76];
    t8 = LegP2[60];
    t9 = LegP1[75];
    t10 = LegP2[59];
    t11 = LegP1[74];
    t12 = LegP2[58];
    t13 = LegP2[57];
    t14 = LegP2[56];
    t15 = LegP1[69];
    t16 = LegP1[68];
    t17 = LegP1[67];
    t18 = LegP2[62];
    t19 = LegP2[63];
    t20 = LegP1[70];
    t21 = LegP1[71];
    t22 = LegP1[66];
    t23 = LegP2[55];
    t24 = t20 * t12;
    t25 = t21 * t10;
    t26 = t1 * t8;
    t27 = t3 * t6;
    t28 = t11 * t18;
    t29 = t9 * t19;
    t30 = t7 * t2;
    t31 = t9 * t6;
    t32 = t11 * t8;
    t33 = t32 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t34 = t3 * t10;
    t35 = t34 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t36 = t1 * t12;
    t37 = t36 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t38 = t21 * t13;
    t39 = t38 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t40 = t16 * t8;
    t41 = t40 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) + (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) * t14 * t1;
    t42 = t15 * t6;
    t43 = t42 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t44 = t20 * t18;
    t45 = t21 * t19;
    t46 = t45 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) * t10 * t9;
    t47 = t7 * t8;
    t48 = (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) * t2 * t1 + t47 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t49 = t5 * t4;
    t50 = t49 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10);
    t5 = t5 * t6;
    t51 = t5 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10) * t4 * t3;
    t52 = t11 * t12;
    t53 = t52 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t54 = t3 * t13;
    t55 = t17 * t6;
    t56 = t16 * t18;
    t57 = t15 * t19;
    t58 = t20 * t2;
    t59 = t21 * t4;
    t60 = t9 * t4;
    t61 = t11 * t2;
    t62 = t3 * t19;
    t63 = t1 * t18;
    t64 = t21 * t6;
    t65 = t20 * t8;
    t66 = t65 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t67 = t15 * t10;
    t68 = t67 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t69 = 0.34082750761629306356e-9;
    t70 = -0.11360916920543102117e-10;
    t71 = 0.51888803242865129873e-11;
    t72 = -0.25944401621432564935e-12;
    t73 = -0.25944401621432564934e-12;
    t74 = 0.54248229670306544648e-13;
    t75 = -0.45206858058588787202e-14;
    t76 = 0.44897222044488864005e-15;
    t77 = -0.74828703407481440014e-16;
    t78 = -0.29857758502492594291e-17;
    t79 = 0.25803001174993600004e-17;
    t80 = -0.12901500587496800001e-17;
    t81 = -0.38499716038879339689e-18;
    t82 = -0.11263214798608317461e-19;
    t83 = 0.51196430902765079365e-21;
    t84 = 0.88378965167378079105e-15;
    t85 = 0.10748793060897333946e-12;
    t86 = 0.85206876904073265822e-10;
    t33 = 0.31226915876382894697e-9 * t24 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + 0.81022013472363903865e-11 * t25 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t85 * t26 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t84 * t27 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t78 * t28 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + t81 * t29 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + t82 * t30 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9) + t79 * t31 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + t76 * t33 + t74 * t35 + t71 * t37 + t69 * t39 + t86 * t41 + t70 * t43 + t73 * t44 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t75 * t46 + t77 * t48 + t83 * t50 + t80 * t51 + t72 * t53;
    t35 = -0.11360916920543102118e-10;
    t37 = cosP1_3 * t15;
    t39 = cosP1_1 * t17;
    t41 = 0.11247307751337671096e-6 * cosP1_5 * t21 - 0.62984923407490958137e-5 * t37 - 0.11028788629311682058e-2 * t39;
    t43 = -0.93727564594480592406e-8 * t8;
    t46 = 0.19176659716030729220e-4 * t12;
    t48 = t46 * cosP2_3 + t43 * cosP2_5;
    t50 = 0.89232926182612700297e-3 * t22;
    t51 = cosP1_4 * t20;
    t53 = (-0.17791195897570497916e-6 * t51 + t50) * t14 * cosP2_1;
    t33 = t33 + t22 * t48 + t41 * t23 + t35 * t54 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.10224825228488791906e-8 * t55 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + 0.18679969167431446754e-10 * t56 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.25315840512809720836e-12 * t57 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + 0.31428055431142204808e-14 * t58 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9) + 0.38704501762490400008e-16 * t59 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10) - 0.10239286180553015874e-20 * t60 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10) + 0.67579288791649904767e-19 * t61 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) + 0.46199659246655207630e-17 * t62 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.59715517004985188580e-16 * t63 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) - 0.26513689550213423731e-13 * t64 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.45144930855768802574e-11 * t66 - 0.45372327544523786162e-9 * t68 + t53;
    t41 = t14 * sinP2_1;
    t48 = sinP1_3 * t15;
    t53 = t63 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t63 = t64 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t64 = t65 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t65 = t67 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t24 = t24 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    t25 = t25 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t40 = (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) * t14 * t1 + t40 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t66 = t20 * (-0.17075458131576282484e-6 * sinP1_4 * cosP2_1 - 0.17791195897570497916e-6 * cosP1_4 * sinP2_1) - 0.20664079648912177335e-4 * sinP1_2 * cosP2_1 * t16;
    t67 = t16 * (-0.19681664957672958618e-6 * cosP1_2 * sinP2_3 - 0.15184989071473821782e-6 * sinP1_2 * cosP2_3) * t12;
    t24 = 0.10239286180553015874e-20 * t60 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) + 0.31226915876382894697e-9 * t24 + 0.81022013472363903865e-11 * t25 + t66 * t14 - 0.31428055431142204808e-14 * t58 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9) - 0.18679969167431446754e-10 * t56 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + 0.26513689550213423731e-13 * t63 - 0.67579288791649904767e-19 * t61 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) + 0.45144930855768802574e-11 * t64 - 0.59715517004985188580e-16 * t53 - 0.38704501762490400008e-16 * t59 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10) - 0.46199659246655207630e-17 * t62 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.10224825228488791906e-8 * t55 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6) + 0.45372327544523786162e-9 * t65 + t67 - 0.25315840512809720836e-12 * t57 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + 0.22280381069316529406e-6 * t37 * t13 * sinP2_2;
    t25 = t10 * cosP2_4;
    t53 = cosP2_2 * t13;
    t55 = (-0.11028788629311682058e-2 * t23 + 0.22494615502675342193e-6 * t25 + 0.15039257221788657353e-4 * t53) * sinP1_1 + 0.20052342962384876468e-4 * cosP1_1 * t13 * sinP2_2;
    t24 = t17 * t55 - t69 * t38 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t70 * t42 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - t71 * t36 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - t74 * t34 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t76 * t32 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + t78 * t28 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) - t79 * t31 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t81 * t29 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + t82 * t30 * (sinP1_10 * cosP2_9 - cosP1_10 * sinP2_9) + t83 * t49 * (-cosP1_11 * sinP2_10 + sinP1_11 * cosP2_10) + t84 * t27 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t85 * t26 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t86 * t40 + t24 + t41 * (-0.44399112520735045527e-5 * cosP1_2 * t16 + t50) + t43 * t22 * sinP2_5;
    t5 = t35 * t54 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t72 * t52 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t73 * t44 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t75 * ((-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) * t10 * t9 + t45 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8)) + t77 * ((-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) * t2 * t1 + t47 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5)) + t80 * (t5 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) + (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) * t4 * t3) + t24 + 0.11247307751337671096e-6 * t21 * sinP1_5 * t23 - t46 * t22 * sinP2_3 + t48 * (0.62984923407490958137e-5 * t23 + 0.16710285801987397057e-6 * t53);
    t24 = t16 * t6 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t26 = t15 * t18 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t27 = t20 * t19 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t28 = t1 * t4 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10);
    t29 = 0.12131667492242850263e-1 * t22 - 0.15746230851872739535e-5 * t51;
    t30 = (0.40104685924769752933e-5 * sinP1_2 * sinP2_2 - 0.30078514443577314703e-5 * cosP1_2 * cosP2_2) * t16 * t13;
    t22 = -0.24744077052942876411e-5 * t25 * t22;
    t22 = 0.63289601282024302089e-13 * t27 + 0.20755521297146051948e-11 * t3 * t12 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + t22 + 0.89794444088977728008e-15 * t21 * t2 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9) + 0.27124114835153272322e-13 * t11 * t10 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.11360916920543102118e-9 * t1 * t13 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.20449650456977583812e-9 * t24 + 0.41511042594292103898e-11 * t26 + t29 * t23 + 0.25803001174993600006e-17 * t7 * t6 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) + 0.12901500587496800002e-16 * t28 + 0.29931481362992576004e-15 * t9 * t8 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + t30 + 0.27893323223317424319e-5 * t15 * t14 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.34866654029146780402e-5 * t17 * t12 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.17041375380814653166e-8 * t17 * t8 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.10224825228488791899e-8 * t21 * t14 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t1 = -0.10239286180553015875e-20 * t7 * t4 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10) + 0.45052859194433269847e-19 * t9 * t2 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9) + 0.23099829623327603815e-17 * t11 * t19 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) + 0.23886206801994075433e-16 * t3 * t18 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.88378965167378079111e-14 * t1 * t6 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.12898551673076800735e-11 * t21 * t8 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.11343081886130946542e-9 * t20 * t10 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.49963065402212631513e-8 * t15 * t12 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.16224168396838672783e-3 * t17 * t14 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t22;
    bf[0] = t13 * ((-0.15039257221788657353e-4 * t39 + 0.16710285801987397057e-6 * t37) * cosP2_2 + (0.20052342962384876468e-4 * sinP1_1 * t17 - 0.22280381069316529406e-6 * t48) * sinP2_2) + t16 * ((-0.19681664957672958618e-6 * t12 * cosP2_3 + 0.44399112520735045527e-5 * t14 * cosP2_1) * cosP1_2 + (0.15184989071473821782e-6 * sinP2_3 * t12 - 0.20664079648912177335e-4 * t41) * sinP1_2) + t33 + 0.22494615502675342193e-6 * t39 * t10 * cosP2_4 + 0.17075458131576282484e-6 * t20 * sinP1_4 * t14 * sinP2_1;
    bf[1] = t5;
    bf[2] = t1;
}

static void idsbf_6_10_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t100, t101, t102, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t9, t90, t91, t92, t93, t94, t95, t96, t97, t98, t99;
    t1 = LegP1[75];
    t2 = LegP2[61];
    t3 = LegP1[74];
    t4 = LegP2[60];
    t5 = LegP1[73];
    t6 = LegP2[59];
    t7 = LegP1[72];
    t8 = LegP2[58];
    t9 = LegP1[71];
    t10 = LegP2[57];
    t11 = LegP1[70];
    t12 = LegP2[56];
    t13 = LegP1[68];
    t14 = LegP1[67];
    t15 = LegP1[69];
    t16 = LegP2[62];
    t17 = LegP2[63];
    t18 = LegP2[64];
    t19 = LegP2[65];
    t20 = LegP1[77];
    t21 = LegP1[76];
    t22 = LegP1[66];
    t23 = LegP2[55];
    t24 = t14 * t2;
    t25 = t13 * t16;
    t26 = t15 * t17;
    t27 = t11 * t18;
    t28 = t9 * t19;
    t29 = t1 * t19;
    t30 = t3 * t18;
    t31 = t5 * t17;
    t32 = t7 * t16;
    t33 = t9 * t2;
    t34 = t33 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t35 = t11 * t4;
    t36 = t35 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t37 = t15 * t6;
    t38 = t37 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4);
    t39 = t11 * t8;
    t40 = t39 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t41 = t9 * t6;
    t42 = t41 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t43 = t7 * t4;
    t44 = t43 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t45 = t5 * t2;
    t46 = t45 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t47 = t3 * t16;
    t48 = t1 * t17;
    t49 = t21 * t18;
    t50 = t20 * t19;
    t51 = t20 * t17;
    t52 = t21 * t16;
    t53 = t1 * t2;
    t54 = t3 * t4;
    t55 = t5 * t6;
    t56 = t55 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t57 = t7 * t8;
    t58 = t57 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t59 = t9 * t10;
    t60 = t59 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t61 = t13 * t4;
    t62 = t61 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t63 = t15 * t2;
    t64 = t11 * t16;
    t65 = t64 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t66 = t9 * t17;
    t67 = t66 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t68 = t7 * t18;
    t69 = t68 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t70 = t5 * t19;
    t71 = t70 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t72 = t20 * t2;
    t73 = t72 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6);
    t74 = t21 * t4;
    t75 = t74 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t76 = t1 * t6;
    t77 = t76 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t78 = t3 * t8;
    t79 = t5 * t10;
    t80 = t7 * t12;
    t81 = 0.63354308659043570550e-9;
    t82 = -0.45946142766243310191e-10;
    t83 = 0.10241962811246783431e-10;
    t84 = -0.26397628607934821062e-11;
    t85 = -0.37654275041348468498e-13;
    t86 = -0.38810327345249517959e-15;
    t87 = -0.27525054854786892171e-17;
    t88 = cosP1_3 * t15;
    t89 = cosP1_1 * t14;
    t90 = 0.53800269634762728192e-7 * cosP1_5 * t9 + 0.10294229291460051363e-2 * t89 - 0.12912064712343054768e-4 * t88;
    t91 = -0.16117227678548565262e-4 * cosP2_3 * t8 + 0.28661736566484214492e-6 * cosP2_5 * t4 - 0.10481397096759325022e-2 * cosP2_1 * t12;
    t34 = 0.32442864655508816903e-14 * t27 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9) + 0.94135687603371171224e-15 * t32 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + t83 * t36 + t87 * t47 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.30442094108165555509e-8 * t24 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) + t86 * t46 + 0.35094444939853287512e-16 * t28 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10) - 0.21026083569628875959e-19 * t29 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10) + t82 * t40 + 0.31046940673566584592e-10 * t25 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.11875960167646352494e-12 * t34 + t90 * t23 + t91 * t22 + t85 * t44 + t84 * t42 + 0.31422602622224716098e-12 * t26 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - 0.29054224568941719513e-17 * t31 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) - 0.45875091424644820278e-18 * t30 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) + t81 * t38;
    t36 = 0.20602516770834319084e-8;
    t38 = -0.18372908055438599033e-8;
    t40 = 0.19241334546129067395e-10;
    t42 = -0.16726425334156898632e-10;
    t44 = -0.14784257463603135520e-12;
    t46 = 0.13597377098264724731e-12;
    t90 = -0.13092751092593631707e-14;
    t91 = 0.55050109709573784519e-16;
    t92 = 0.29772934334594488360e-16;
    t93 = -0.11927523770407653272e-16;
    t94 = 0.11053712505176323361e-17;
    t95 = 0.37683110813101102370e-19;
    t96 = 0.45511003397465099480e-22;
    t97 = 0.10922640815391623875e-20;
    t98 = 0.76458485707741367130e-20;
    t99 = 0.93666872061066887324e-7 * sinP1_2;
    t100 = 0.11296425202288907760e-6 * cosP1_2;
    t101 = t13 * t8;
    t102 = 0.63019463063728505419e-7 * t15 * sinP1_3 * t10 * sinP2_2;
    t34 = t34 + t90 * t67 + t42 * t63 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t94 * t52 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) + t97 * t49 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9) + t98 * t48 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) - t91 * t54 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t92 * t53 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + t96 * t50 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10) - t40 * t58 - t36 * t60 + t38 * t62 + t44 * t65 - t46 * t56 + t102 - 0.64443580810810580870e-19 * t73 + t95 * t51 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8) - 0.42426406871192851464e-26 * t14 * sinP1_1 * t6 * sinP2_4 + t101 * (t100 * cosP2_3 - t99 * sinP2_3) + 0.35782571311222959814e-15 * t77 + t93 * t69 + 0.13107168978469948693e-18 * t75 - 0.11468772856161205069e-18 * t71;
    t56 = cosP1_4 * t11;
    t33 = t33 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t58 = t70 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10);
    t60 = t72 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6);
    t62 = t76 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t65 = t78 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t67 = t79 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t69 = t80 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t24 = t24 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t25 = t25 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t26 = t26 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t27 = t27 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9);
    t70 = t11 * (0.16769409869100942408e-6 * sinP1_4 * cosP2_1 - 0.20197391651138921550e-6 * cosP1_4 * sinP2_1) + t13 * (-0.10318225163934317215e-4 * cosP1_2 * sinP2_1 + 0.31194634216545610183e-5 * sinP1_2 * cosP2_1);
    t71 = t14 * (-0.13549184558701628667e-5 * cosP2_2 * sinP1_1 - 0.11469542277598587986e-4 * cosP1_1 * sinP2_2) + t15 * (-0.63019463063728505419e-7 * cosP1_3 * sinP2_2 - 0.7444606900385510255e-8 * cosP2_2 * sinP1_3);
    t36 = t10 * t71 + t12 * t70 + t36 * t59 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t38 * t61 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t40 * t57 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t42 * t63 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t44 * t64 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t46 * t55 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t90 * t66 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t91 * t54 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + t93 * t68 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) - t94 * t52 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) - t95 * t51 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8) + t101 * (t99 * cosP2_3 + t100 * sinP2_3) + (0.42426406871192851464e-26 * cosP1_1 * sinP2_4 - 0.37422134453914605629e-6 * cosP2_4 * sinP1_1) * t14 * t6;
    t38 = 0.10294229291460051363e-2 * t14 * sinP1_1 + 0.12912064712343054768e-4 * t15 * sinP1_3 + 0.53800269634762728192e-7 * sinP1_5 * t9;
    t40 = -0.10481397096759325022e-2 * sinP2_1 * t12 + 0.28661736566484214492e-6 * sinP2_5 * t4 + 0.16117227678548565262e-4 * sinP2_3 * t8;
    t24 = t36 - 0.32442864655508816903e-14 * t27 - 0.94135687603371171224e-15 * t32 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.30442094108165555509e-8 * t24 + 0.67953679265146808752e-9 * t69 - 0.35094444939853287512e-16 * t28 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10) + 0.21026083569628875959e-19 * t29 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) - 0.31046940673566584592e-10 * t25 - 0.11875960167646352494e-12 * t33 + t38 * t23 + t40 * t22 - 0.64443580810810580870e-19 * t60 + 0.35782571311222959814e-15 * t62 - 0.31422602622224716098e-12 * t26 + 0.29054224568941719513e-17 * t31 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + 0.13107168978469948693e-18 * t74 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) + 0.45875091424644820278e-18 * t30 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) - 0.11468772856161205069e-18 * t58 + 0.56261212123184407586e-13 * t65 + 0.67328486179197121188e-11 * t67;
    t24 = -t81 * t37 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4) + t82 * t39 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t83 * t35 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t84 * t41 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t85 * t43 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t86 * t45 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t87 * t47 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) - t92 * t53 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t96 * t50 * (-cosP1_11 * sinP2_10 + sinP1_11 * cosP2_10) + t97 * t49 * (sinP1_10 * cosP2_9 - cosP1_10 * sinP2_9) + t98 * t48 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + t24;
    t25 = t13 * t2 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6);
    t26 = t15 * t16 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7);
    t27 = t11 * t17 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t28 = t9 * t18 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9);
    t29 = t7 * t19 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10);
    t19 = t21 * t19 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10);
    t30 = 0.12353075149752061635e-1 * t22 + 0.17216086283124073023e-5 * t56;
    t31 = (-0.20844899321079428717e-6 * cosP1_2 * cosP2_2 + 0.17645449657843981516e-5 * sinP1_2 * sinP2_2) * t13 * t10;
    t22 = -0.44906561344697526756e-5 * t22 * t6 * cosP2_4;
    t19 = -0.44352772390809406558e-11 * t26 - 0.28355175556756655581e-17 * t21 * t2 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) - 0.47769560944140357488e-7 * t14 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.40553580819386021126e-15 * t28 + 0.20024841494884643771e-20 * t19 + 0.24238255024510963628e-9 * t7 * t10 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.23104250950149914974e-7 * t9 * t12 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.26862046130914275440e-5 * t14 * t8 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + t30 * t23 + t31 - 0.51419726730569687120e-6 * t15 * t12 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.41896803496299621462e-13 * t27 + 0.55050109709573784511e-17 * t1 * t4 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + 0.14313028524489183927e-13 * t3 * t6 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.41287582282180338244e-17 * t29 + 0.21379260606810074884e-11 * t5 * t8 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + t22 - 0.46833990935639316164e-9 * t25;
    t1 = 0.45875091424644820276e-19 * t1 * t18 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9) + 0.30583394283096546857e-18 * t3 * t17 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) - 0.10459520844819019025e-15 * t5 * t16 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.13971717844289826464e-13 * t7 * t2 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.12802453514058479289e-11 * t9 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.84472411545391427402e-10 * t11 * t6 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4) - 0.10048829550160293965e-18 * t20 * t16 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7) - 0.13783842829872993056e-8 * t15 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.17468995161265541704e-3 * t14 * t12 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t19;
    bf[0] = t10 * (t14 * (0.13549184558701628667e-5 * cosP1_1 * cosP2_2 - 0.11469542277598587986e-4 * sinP1_1 * sinP2_2) - 0.7444606900385510255e-8 * t88 * cosP2_2) + t12 * ((0.10318225163934317215e-4 * cosP1_2 * t13 - 0.20197391651138921550e-6 * t56) * cosP2_1 + (-0.16769409869100942408e-6 * sinP1_4 * t11 + 0.31194634216545610183e-5 * sinP1_2 * t13) * sinP2_1) + 0.56261212123184407586e-13 * t78 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.67328486179197121188e-11 * t79 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.67953679265146808752e-9 * t80 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t34 - 0.37422134453914605629e-6 * t89 * t6 * cosP2_4;
    bf[1] = t24;
    bf[2] = t1;
}

static void idsbf_6_10_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t9;
    t1 = LegP1[99];
    t2 = LegP2[64];
    t3 = LegP1[101];
    t4 = LegP1[100];
    t5 = LegP2[65];
    t6 = LegP1[94];
    t7 = LegP2[59];
    t8 = LegP1[96];
    t9 = LegP1[97];
    t10 = LegP2[60];
    t11 = LegP2[61];
    t12 = LegP2[62];
    t13 = LegP1[98];
    t14 = LegP1[102];
    t15 = LegP2[63];
    t16 = LegP1[95];
    t17 = LegP2[56];
    t18 = LegP1[93];
    t19 = LegP1[92];
    t20 = LegP2[57];
    t21 = LegP2[58];
    t22 = LegP1[91];
    t23 = LegP2[55];
    t24 = LegP1[103];
    t25 = t1 * t2;
    t26 = t3 * t2;
    t27 = t4 * t5;
    t28 = t6 * t7;
    t29 = t8 * t7;
    t30 = t9 * t10;
    t31 = t8 * t11;
    t32 = t9 * t12;
    t33 = t1 * t12;
    t34 = t33 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t35 = t6 * t11;
    t36 = t35 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t37 = t13 * t7;
    t38 = t37 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t39 = t13 * t5;
    t40 = t39 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t41 = t14 * t15;
    t42 = t41 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t43 = t1 * t10;
    t44 = t43 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t45 = t8 * t15;
    t46 = t45 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t47 = t16 * t12;
    t48 = t4 * t11;
    t49 = t8 * t20;
    t50 = t18 * t10;
    t51 = t9 * t21;
    t52 = t9 * t2;
    t53 = t3 * t12;
    t54 = t4 * t7;
    t55 = t9 * t17;
    t56 = t16 * t2;
    t57 = t3 * t10;
    t58 = t8 * t5;
    t59 = t19 * t11;
    t60 = t18 * t12;
    t61 = t1 * t21;
    t62 = t13 * t20;
    t63 = t14 * t11;
    t64 = t6 * t15;
    t65 = t24 * t12;
    t66 = LegP1[104] * t15;
    t67 = t13 * t11;
    t68 = t14 * t5;
    t69 = t68 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10);
    t70 = t13 * t15;
    t71 = t16 * t21;
    t72 = t71 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3);
    t73 = t4 * t15;
    t74 = t73 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t75 = t16 * t10;
    t76 = t75 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t77 = cosP2_3 * t21;
    t78 = cosP2_1 * t17;
    t79 = sinP2_3 * t21;
    t80 = (0.82666808941703258855e-5 * t78 + 0.10411818012501274516e-6 * t77) * cosP1_2 + (0.46438326935379121505e-5 * sinP2_1 * t17 - 0.94406582384389724655e-7 * t79) * sinP1_2;
    t81 = t19 * (0.9441361977405684276e-6 * cosP1_1 * cosP2_2 - 0.79922226971527187846e-5 * sinP1_1 * sinP2_2) + t6 * (-0.7152546952580063846e-8 * cosP1_3 * cosP2_2 + 0.60547141645096354426e-7 * sinP1_3 * sinP2_2);
    t82 = 0.30539712104504644717e-7 * sinP1_4;
    t83 = -0.63474695746617496857e-7 * cosP1_4;
    t84 = -0.35954023809306530250e-6 * t19 * cosP1_1 * t7 * cosP2_4;
    t85 = t16 * t17 * (t83 * cosP2_1 - t82 * sinP2_1);
    t69 = -0.20988267701337027446e-20 * t65 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7) - 0.22037681086403878819e-18 * t70 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.54054024168731433953e-13 * t61 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t80 * t18 + t81 * t20 + 0.21212703139456079980e-8 * t59 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6) - 0.44143626093741002301e-10 * t72 + 0.64687117142196959872e-11 * t62 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.37287756398195362955e-15 * t67 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t84 - 0.65588336566678210756e-22 * t66 * (cosP1_13 * cosP2_8 + sinP1_13 * sinP2_8) + 0.43725557711118807173e-22 * t69 + 0.61705507041930860674e-17 * t58 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10) - 0.61915389718944230962e-19 * t63 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + t85 + 0.15624680629970611834e-10 * t60 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.11321197527707400625e-12 * t64 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t72 = -0.10070200598412425668e-2;
    t80 = 0.98903755877264894965e-3;
    t78 = -0.15484931475733392646e-4 * t77 + t78 * t72 + 0.27537305767433245816e-6 * cosP2_5 * t10;
    t81 = t19 * cosP1_1 * t80 - 0.46520664394484403646e-5 * cosP1_3 * t6 + 0.51689627104982670724e-7 * cosP1_5 * t8;
    t34 = t69 - 0.36177057271440607474e-13 * t30 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.10313634748437015286e-13 * t38 + 0.10494133850668513721e-20 * t26 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9) - 0.14204255118155101668e-12 * t47 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t78 * t22 + t81 * t23 - 0.16070229651103090894e-10 * t36 + 0.26047481235437237383e-11 * t76 - 0.25362021202925731126e-11 * t29 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.20881143582989403257e-13 * t31 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.12579108364119334027e-14 * t46 - 0.52470669253342568609e-21 * t27 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10) + 0.13117667313335642152e-21 * t42 - 0.26445217303684654582e-17 * t34 - 0.25185921241604433014e-17 * t44 - 0.11018840543201939407e-18 * t40 + 0.22825819082633158012e-9 * t28 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.20988267701337027439e-19 * t25 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) + 0.73458936954679596059e-20 * t74 + 0.11106991267547554925e-15 * t32 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t36 = t56 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9);
    t38 = t57 * (-sinP1_10 * cosP2_5 + cosP1_10 * sinP2_5);
    t40 = t58 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10);
    t42 = t59 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t31 = t31 * (cosP1_5 * sinP2_6 - sinP1_5 * cosP2_6);
    t44 = t67 * (cosP1_7 * sinP2_6 - sinP1_7 * cosP2_6);
    t27 = t27 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t46 = t68 * (cosP1_11 * sinP2_10 - sinP1_11 * cosP2_10);
    t58 = t70 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t32 = t32 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t59 = t71 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3);
    t67 = t73 * (cosP1_9 * sinP2_8 - sinP1_9 * cosP2_8);
    t28 = t28 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t29 = t29 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t68 = t75 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t30 = t30 * (cosP1_6 * sinP2_5 - sinP1_6 * cosP2_5);
    t26 = t26 * (-sinP1_10 * cosP2_9 + cosP1_10 * sinP2_9);
    t35 = t35 * (cosP1_3 * sinP2_6 - sinP1_3 * cosP2_6);
    t37 = t37 * (cosP1_7 * sinP2_4 - sinP1_7 * cosP2_4);
    t39 = t39 * (cosP1_7 * sinP2_10 - sinP1_7 * cosP2_10);
    t41 = t41 * (-sinP1_11 * cosP2_8 + cosP1_11 * sinP2_8);
    t43 = t43 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t45 = t45 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t47 = t47 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t69 = t48 * (cosP1_9 * sinP2_6 - sinP1_9 * cosP2_6);
    t70 = t49 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t71 = t50 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t73 = t51 * (cosP1_6 * sinP2_3 - sinP1_6 * cosP2_3);
    t74 = t53 * (-sinP1_10 * cosP2_7 + cosP1_10 * sinP2_7);
    t65 = t65 * (-sinP1_12 * cosP2_7 + cosP1_12 * sinP2_7);
    t66 = t66 * (-sinP1_13 * cosP2_8 + cosP1_13 * sinP2_8);
    t75 = t6 * t20 * (-0.7152546952580063846e-8 * sinP1_3 * cosP2_2 - 0.60547141645096354426e-7 * cosP1_3 * sinP2_2);
    t76 = 0.94406582384389724655e-7 * t77 * t18 * sinP1_2;
    t25 = 0.36177057271440607474e-13 * t30 - 0.10313634748437015286e-13 * t37 - 0.10494133850668513721e-20 * t26 + 0.22037681086403878819e-18 * t58 - 0.54054024168731433953e-13 * t61 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3) + t76 + t75 + 0.44143626093741002301e-10 * t59 + 0.16070229651103090894e-10 * t35 - 0.64687117142196959872e-11 * t62 * (cosP1_7 * sinP2_2 - sinP1_7 * cosP2_2) - 0.26047481235437237383e-11 * t68 - 0.25362021202925731126e-11 * t29 + 0.20881143582989403257e-13 * t31 + 0.37287756398195362955e-15 * t44 + 0.52470669253342568609e-21 * t27 - 0.43725557711118807173e-22 * t46 - 0.26445217303684654582e-17 * t33 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.11018840543201939407e-18 * t39 + 0.61915389718944230962e-19 * t63 * (-sinP1_11 * cosP2_6 + cosP1_11 * sinP2_6) - 0.22825819082633158012e-9 * t28 + 0.20988267701337027439e-19 * t25 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) - 0.73458936954679596059e-20 * t67 - 0.11106991267547554925e-15 * t32;
    t26 = 0.27537305767433245816e-6 * sinP2_5 * t10 + 0.15484931475733392646e-4 * t79;
    t27 = 0.51689627104982670724e-7 * sinP1_5 * t8 + 0.46520664394484403646e-5 * sinP1_3 * t6;
    t25 = t25 + 0.20988267701337027446e-20 * t65 - 0.12592960620802216506e-18 * t38 - 0.14204255118155101668e-12 * t47 - 0.21212703139456079980e-8 * t42 + t26 * t22 + t27 * t23 - 0.22702690150867202263e-11 * t73 - 0.12579108364119334027e-14 * t45 - 0.82509077987496122290e-15 * t36 + 0.65588336566678210756e-22 * t66 + 0.13117667313335642152e-21 * t41 + 0.12592960620802216467e-19 * t74 + 0.74298467662733077154e-18 * t69 - 0.61705507041930860674e-17 * t40 + 0.25185921241604433014e-17 * t43 + 0.15624680629970611834e-10 * t60 * (cosP1_2 * sinP2_7 - sinP1_2 * cosP2_7) + 0.11321197527707400625e-12 * t64 * (cosP1_3 * sinP2_8 - sinP1_3 * cosP2_8) - 0.34378782494790050956e-15 * t54 * (cosP1_9 * sinP2_4 - sinP1_9 * cosP2_4) - 0.11459594164930016984e-16 * t52 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) - 0.17652119081687978088e-8 * t71 - 0.65287783229945931641e-9 * t55 * (cosP1_6 * sinP2_1 - sinP1_6 * cosP2_1) + 0.36224785599630297528e-9 * t70;
    t26 = t7 * cosP2_4;
    t25 = t17 * ((0.46438326935379121505e-5 * t18 * sinP1_2 + t82 * t16) * cosP2_1 + (-0.82666808941703258855e-5 * t18 * cosP1_2 + t83 * t16 + t22 * t72) * sinP2_1) + t19 * ((t23 * t80 - 0.35954023809306530250e-6 * t26 - 0.9441361977405684276e-6 * cosP2_2 * t20) * sinP1_1 - 0.79922226971527187846e-5 * cosP1_1 * sinP2_2 * t20) + t25 + 0.10411818012501274516e-6 * t79 * t18 * cosP1_2;
    t27 = t13 * t12 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7);
    t28 = t9 * t11 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t29 = t8 * t10 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t30 = t16 * t7 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t31 = t6 * t21 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t13 = t13 * t21 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t14 = t14 * t12 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7);
    t32 = t16 * t15 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8);
    t33 = t18 * t20 * (-0.13320371161921197974e-5 * sinP1_2 * sinP2_2 + 0.15735603295676140467e-6 * cosP1_2 * cosP2_2);
    t35 = -0.12857488264044436346e-1 * t22 * t23;
    t1 = -0.34378782494790050952e-14 * t1 * t7 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.64864829002477720750e-12 * t13 - 0.15492616305249885643e-3 * t19 * t17 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.52202858957473508138e-14 * t28 + 0.22642395055414801250e-13 * t32 + t35 - 0.26235334626671284306e-21 * t3 * t5 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10) + 0.15426376760482715170e-17 * t9 * t5 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10) + 0.31734260764421585500e-16 * t27 + 0.83953070805348109776e-20 * t14 - 0.73458936954679596053e-19 * t1 * t15 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8) - 0.90561963999075743822e-10 * t9 * t20 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) + 0.45651638165266316027e-10 * t30 + 0.35354505232426799966e-9 * t18 * t11 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) - 0.83953070805348109772e-20 * t4 * t2 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9) + 0.57883291634304971960e-12 * t29 + 0.28408510236310203334e-11 * t6 * t12 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + t33 + 0.88287252187482004592e-9 * t31;
    t1 = 0.23822971501128296378e-5 * t19 * t21 * (-cosP1_1 * cosP2_3 + sinP1_1 * sinP2_3) + 0.32934983642112852139e-6 * t6 * t17 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.10074368496641773206e-17 * t4 * t10 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) - 0.10446045316791349063e-7 * t8 * t17 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.42365085796051147412e-7 * t19 * t10 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.18335350663888027173e-15 * t8 * t2 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9) + 0.37149233831366538578e-18 * t3 * t11 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) + 0.13117667313335642152e-21 * t24 * t15 * (cosP1_12 * cosP2_8 + sinP1_12 * sinP2_8) + t1 - 0.93041328788968807294e-6 * t16 * cosP1_4 * t23 + 0.46740230952098489322e-5 * t26 * t22;
    bf[0] = 0.74298467662733077154e-18 * t48 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - 0.36224785599630297528e-9 * t49 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - 0.17652119081687978088e-8 * t50 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5) - 0.22702690150867202263e-11 * t51 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.11459594164930016984e-16 * t52 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) + 0.12592960620802216467e-19 * t53 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) + 0.34378782494790050956e-15 * t54 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.65287783229945931641e-9 * t55 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + 0.82509077987496122290e-15 * t56 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9) + 0.12592960620802216506e-18 * t57 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + t34;
    bf[1] = t25;
    bf[2] = t1;
}

static void idsbf_6_10_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t100, t101, t102, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t9, t90, t91, t92, t93, t94, t95, t96, t97, t98, t99;
    t1 = LegP1[98];
    t2 = LegP2[61];
    t3 = LegP1[97];
    t4 = LegP2[62];
    t5 = LegP1[95];
    t6 = LegP2[58];
    t7 = LegP2[63];
    t8 = LegP1[100];
    t9 = LegP1[94];
    t10 = LegP2[59];
    t11 = LegP1[96];
    t12 = LegP2[60];
    t13 = LegP1[99];
    t14 = LegP2[64];
    t15 = LegP1[101];
    t16 = LegP1[104];
    t17 = LegP2[65];
    t18 = LegP1[103];
    t19 = LegP1[102];
    t20 = LegP2[56];
    t21 = LegP1[93];
    t22 = LegP1[92];
    t23 = LegP2[57];
    t24 = LegP1[91];
    t25 = LegP2[55];
    t26 = t1 * t2;
    t27 = t3 * t4;
    t28 = t5 * t6;
    t29 = t1 * t7;
    t30 = t8 * t7;
    t31 = t9 * t10;
    t32 = t11 * t10;
    t33 = t5 * t12;
    t34 = t3 * t12;
    t35 = t13 * t14;
    t36 = t15 * t14;
    t37 = t36 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9);
    t38 = t16 * t17;
    t39 = t38 * (cosP1_13 * cosP2_10 + sinP1_13 * sinP2_10);
    t40 = t18 * t14;
    t41 = t8 * t17;
    t42 = t11 * t2;
    t43 = t13 * t4;
    t44 = t9 * t2;
    t45 = t1 * t10;
    t46 = t1 * t17;
    t47 = t46 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t48 = t19 * t7;
    t49 = t48 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t50 = t13 * t12;
    t51 = t11 * t7;
    t52 = t51 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t53 = t5 * t4;
    t54 = t53 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t55 = t8 * t2;
    t56 = t55 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t57 = t11 * t23;
    t58 = t57 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2);
    t59 = t21 * t12;
    t60 = t59 * (cosP1_2 * cosP2_5 + sinP1_2 * sinP2_5);
    t61 = t3 * t6;
    t62 = t61 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t63 = t3 * t14;
    t64 = t63 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9);
    t65 = t15 * t4;
    t66 = t65 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t67 = t8 * t10;
    t68 = t3 * t20;
    t69 = t68 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    t70 = t5 * t14;
    t71 = t70 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9);
    t72 = t15 * t12;
    t73 = t72 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t74 = t11 * t17;
    t75 = t74 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10);
    t76 = t22 * t2;
    t77 = t76 * (cosP1_1 * cosP2_6 + sinP1_1 * sinP2_6);
    t78 = t21 * t4;
    t79 = t78 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t80 = t13 * t6;
    t81 = t1 * t23;
    t82 = t19 * t2;
    t83 = t9 * t7;
    t84 = t18 * t4;
    t85 = t16 * t7;
    t86 = t19 * t17;
    t87 = 0.12612499710858848449e-2;
    t88 = 0.25104016211061976529e-4 * cosP1_2 * t21;
    t89 = cosP1_4 * t5;
    t90 = 0.16852743692114894034e-6 * t89;
    t91 = 0.18395836937692524027e-6 * t12;
    t92 = -0.25408413071205375535e-4 * t6 * cosP2_3 + t91 * cosP2_5;
    t93 = 0.13092111724529739912e-4 * sinP1_2 * t21;
    t94 = 0.28100495981473512248e-7 * sinP1_4 * t5;
    t95 = cosP1_3 * t9;
    t96 = 0.15114592045518911460e-4 * t95 - 0.49394091652022586476e-7 * cosP1_5 * t11;
    t97 = cosP2_2 * t23;
    t98 = 0.29625375942618705696e-4 * t97;
    t99 = -0.99811148790969304280e-3 * t25;
    t100 = (t98 + t99) * t22 * cosP1_1;
    t101 = t20 * (t94 + t93) * sinP2_1;
    t102 = (t24 * t87 - t88 + t90) * t20 * cosP2_1;
    t37 = -0.64121458019628300469e-15 * t27 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.29975780830211546590e-12 * t32 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.96076220609652392935e-14 * t34 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.13130416816652493698e-15 * t26 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t100 - 0.50615941257743651610e-23 * t40 * (cosP1_12 * cosP2_9 + sinP1_12 * sinP2_9) + 0.27254737600323504710e-23 * t39 + t24 * t92 + t96 * t25 - 0.91725889340447332559e-10 * t31 * (cosP1_3 * cosP2_4 + sinP1_3 * sinP2_4) - 0.90549916400185187304e-10 * t28 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) - 0.79723378049458290099e-17 * t29 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.20246376503097460641e-21 * t37 - 0.32858067448501118382e-11 * t33 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.10244666510567315084e-18 * t35 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9) + 0.17256142434947681840e-19 * t30 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + t101 + t102;
    t39 = -0.30190407420955861266e-6 * t22 * cosP1_1 * t10 * cosP2_4;
    t37 = -0.50368919416816363514e-11 * t44 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.13034340596042841305e-13 * t45 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.41798239363114645552e-15 * t50 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + 0.28212858432993162999e-16 * t67 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - 0.65411370240776411304e-20 * t47 - 0.15184782377323095482e-20 * t49 - 0.17074984087652274407e-15 * t52 - 0.29078598475989057338e-13 * t54 - 0.73073845040410219490e-17 * t56 + 0.54043002194556950553e-9 * t58 - 0.87599223512821542992e-9 * t60 + 0.17732467783854843321e-11 * t62 - 0.14328204909884356763e-20 * t41 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10) - 0.49895583903279476055e-13 * t42 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.15267013814197214399e-17 * t43 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) - 0.10334996498042672986e-17 * t64 - 0.11166655348246830216e-18 * t66 - 0.28746773816172873184e-9 * t69 + 0.35345688023305941613e-15 * t71 + 0.82605216132637639431e-18 * t73 + 0.24856320691495036293e-17 * t75 + 0.12088540660035927243e-8 * t77 + 0.79093787854690235954e-11 * t79 + t37 + t39;
    t39 = t70 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9);
    t47 = t72 * (-sinP1_10 * cosP2_5 + cosP1_10 * sinP2_5);
    t49 = t74 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10);
    t52 = t76 * (-cosP1_1 * sinP2_6 + sinP1_1 * cosP2_6);
    t54 = t78 * (cosP1_2 * sinP2_7 - sinP1_2 * cosP2_7);
    t42 = t42 * (cosP1_5 * sinP2_6 - sinP1_5 * cosP2_6);
    t26 = t26 * (cosP1_7 * sinP2_6 - sinP1_7 * cosP2_6);
    t41 = t41 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10);
    t56 = t86 * (cosP1_11 * sinP2_10 - sinP1_11 * cosP2_10);
    t29 = t29 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t27 = t27 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t28 = t28 * (cosP1_4 * sinP2_3 - sinP1_4 * cosP2_3);
    t30 = t30 * (cosP1_9 * sinP2_8 - sinP1_9 * cosP2_8);
    t31 = t31 * (-cosP1_3 * sinP2_4 + sinP1_3 * cosP2_4);
    t32 = t32 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t33 = t33 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t35 = t35 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9);
    t36 = t36 * (-sinP1_10 * cosP2_9 + cosP1_10 * sinP2_9);
    t38 = t38 * (-cosP1_13 * sinP2_10 + sinP1_13 * cosP2_10);
    t40 = t40 * (sinP1_12 * cosP2_9 - cosP1_12 * sinP2_9);
    t44 = t44 * (cosP1_3 * sinP2_6 - sinP1_3 * cosP2_6);
    t45 = t45 * (cosP1_7 * sinP2_4 - sinP1_7 * cosP2_4);
    t48 = t48 * (-sinP1_11 * cosP2_8 + cosP1_11 * sinP2_8);
    t50 = t50 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t51 = t51 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t53 = t53 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t55 = t55 * (cosP1_9 * sinP2_6 - sinP1_9 * cosP2_6);
    t57 = t57 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2);
    t58 = t59 * (-cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5);
    t59 = t61 * (cosP1_6 * sinP2_3 - sinP1_6 * cosP2_3);
    t60 = t65 * (-sinP1_10 * cosP2_7 + cosP1_10 * sinP2_7);
    t61 = t83 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t62 = t84 * (-sinP1_12 * cosP2_7 + cosP1_12 * sinP2_7);
    t64 = t85 * (-sinP1_13 * cosP2_8 + cosP1_13 * sinP2_8);
    t65 = 0.64720108874893146014e-7 * t95 * t23 * sinP2_2;
    t39 = 0.41798239363114645552e-15 * t50 - 0.35345688023305941613e-15 * t39 + 0.17732467783854843321e-11 * t59 - 0.23361203657420146891e-23 * t64 + 0.65411370240776411304e-20 * t46 * (cosP1_7 * sinP2_10 - sinP1_7 * cosP2_10) - 0.52249451308215959684e-13 * t61 - 0.17074984087652274407e-15 * t51 - 0.54043002194556950553e-9 * t57 + 0.28746773816172873184e-9 * t68 * (cosP1_6 * sinP2_1 - sinP1_6 * cosP2_1) - 0.18611092247078050360e-21 * t62 + 0.79093787854690235954e-11 * t54 - t65 - 0.73073845040410219490e-17 * t55 - 0.24856320691495036293e-17 * t49 - 0.29078598475989057338e-13 * t53 - 0.13034340596042841305e-13 * t45 - 0.15184782377323095482e-20 * t48 + 0.50368919416816363514e-11 * t44 + 0.28212858432993162999e-16 * t67 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) - 0.12088540660035927243e-8 * t52 - 0.87599223512821542992e-9 * t58 - 0.10334996498042672986e-17 * t63 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9) - 0.82605216132637639431e-18 * t47 - 0.11166655348246830216e-18 * t60;
    t44 = t20 * sinP2_1 * t87 + t91 * sinP2_5;
    t45 = sinP1_3 * t9;
    t46 = -0.49394091652022586476e-7 * sinP1_5 * t11 - 0.15114592045518911460e-4 * t45;
    t26 = t39 + 0.64121458019628300469e-15 * t27 + 0.29975780830211546590e-12 * t32 - 0.25956892952689052106e-23 * t56 - 0.96076220609652392935e-14 * t34 * (cosP1_6 * sinP2_5 - sinP1_6 * cosP2_5) + 0.42220161390130579338e-14 * t80 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3) - 0.13238015405871416573e-19 * t82 * (-sinP1_11 * cosP2_6 + cosP1_11 * sinP2_6) - 0.13130416816652493698e-15 * t26 + 0.50615941257743651610e-23 * t40 - 0.27254737600323504710e-23 * t38 + t44 * t24 + t46 * t25 + 0.91725889340447332559e-10 * t31 + 0.90549916400185187304e-10 * t28 + 0.79723378049458290099e-17 * t29 - 0.49895583903279476055e-13 * t42 + 0.14328204909884356763e-20 * t41 - 0.20246376503097460641e-21 * t36 + 0.32858067448501118382e-11 * t33 + 0.14221842682778144882e-11 * t81 * (cosP1_7 * sinP2_2 - sinP1_7 * cosP2_2) + 0.15267013814197214399e-17 * t43 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.10244666510567315084e-18 * t35 - 0.17256142434947681840e-19 * t30;
    t27 = t10 * cosP2_4;
    t26 = t20 * ((-t94 + t93) * cosP2_1 + (t88 + t90) * sinP2_1) + t22 * ((-t98 + t99 - 0.30190407420955861266e-6 * t27) * sinP1_1 - 0.15532826129974355044e-4 * cosP1_1 * sinP2_2 * t23) + t6 * (t21 * (0.14562202045706644493e-6 * cosP1_2 * sinP2_3 + 0.96362865935365703035e-7 * sinP1_2 * cosP2_3) + 0.25408413071205375535e-4 * t24 * sinP2_3) + t26 - 0.12343906642757794040e-6 * t45 * t97;
    t28 = t3 * t17 * (cosP1_6 * cosP2_10 + sinP1_6 * sinP2_10);
    t17 = t15 * t17 * (cosP1_10 * cosP2_10 + sinP1_10 * sinP2_10);
    t29 = t8 * t14 * (cosP1_9 * cosP2_9 + sinP1_9 * sinP2_9);
    t30 = t13 * t7 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8);
    t31 = t3 * t2 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t32 = t11 * t12 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t33 = t5 * t10 * (cosP1_4 * cosP2_4 + sinP1_4 * sinP2_4);
    t34 = -0.13973560830735702599e-1 * t24 - 0.17781872994728131132e-5 * t89;
    t35 = (-0.39500501256824940928e-5 * cosP1_2 * cosP2_2 + 0.20710434839965806724e-5 * sinP1_2 * sinP2_2) * t23 * t21;
    t24 = -0.42266570389338205767e-5 * t27 * t24;
    t2 = 0.36508963831667909311e-12 * t32 - 0.98867234818362794946e-12 * t9 * t4 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) + t35 + t24 - 0.39272986692562157347e-16 * t11 * t14 * (cosP1_5 * cosP2_9 + sinP1_5 * sinP2_9) - 0.16118054213381236325e-9 * t21 * t2 * (cosP1_2 * cosP2_6 + sinP1_2 * sinP2_6) + t34 * t25 + 0.10791281098876156773e-10 * t33 + 0.64121458019628300471e-16 * t1 * t4 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) + 0.12413657710516991719e-14 * t13 * t10 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.52521667266609974794e-14 * t31 - 0.56887370731112579522e-10 * t3 * t23 * (cosP1_6 * cosP2_2 + sinP1_6 * sinP2_2) - 0.10923774050145691810e-7 * t11 * t20 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.93133331914248318948e-20 * t29 + 0.63542473948182799552e-18 * t15 * t2 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) + 0.75927026713769800085e-18 * t30 + 0.37998399421013314136e-16 * t8 * t12 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) - 0.26164548096310564520e-18 * t28 + 0.12459308617290745009e-21 * t17;
    t1 = -0.30786971576062963683e-8 * t9 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.18017856729798354928e-3 * t22 * t20 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.38935339429033578158e-24 * t16 * t14 * (cosP1_13 * cosP2_9 + sinP1_13 * sinP2_9) - 0.17732467783854843321e-12 * t1 * t6 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.93055461235390251801e-20 * t19 * t4 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7) - 0.61469942715548187868e-14 * t5 * t7 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) + 0.12147825901858476385e-21 * t18 * t7 * (cosP1_12 * cosP2_8 + sinP1_12 * sinP2_8) - 0.36297732958864822192e-5 * t22 * t6 * (-cosP1_1 * cosP2_3 + sinP1_1 * sinP2_3) + 0.23872579959744822776e-5 * t9 * t20 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.26279767053846462896e-7 * t22 * t12 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + t2;
    bf[0] = t23 * (t9 * (0.64720108874893146014e-7 * sinP1_3 * sinP2_2 - 0.12343906642757794040e-6 * cosP1_3 * cosP2_2) - 0.15532826129974355044e-4 * t22 * sinP1_1 * sinP2_2) - 0.42220161390130579338e-14 * t80 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.14221842682778144882e-11 * t81 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.13238015405871416573e-19 * t82 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + 0.52249451308215959684e-13 * t83 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + 0.18611092247078050360e-21 * t84 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7) + 0.23361203657420146891e-23 * t85 * (cosP1_13 * cosP2_8 + sinP1_13 * sinP2_8) + 0.25956892952689052106e-23 * t86 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10) + t37 + (-0.96362865935365703035e-7 * sinP1_2 * sinP2_3 + 0.14562202045706644493e-6 * cosP1_2 * cosP2_3) * t21 * t6;
    bf[1] = t26;
    bf[2] = t1;
}

static void idsbf_7_0_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3;
    t1 = -0.32033649090562894974e-5 * LegP1[26];
    t2 = 0.32033649090562894974e-4 * LegP1[24];
    t3 = -0.23064227345205284378e-2 * LegP1[22];
    bf[0] = t3 * sinP1_1 + t2 * sinP1_3 + t1 * sinP1_5;
    bf[1] = t3 * cosP1_1 - t2 * cosP1_3 + t1 * cosP1_5;
    bf[2] = 0.53389415150938158288e-6 * LegP1[27] * sinP1_6 + 0.57660568363013210951e-3 * LegP1[23] * sinP1_2;
}

static void idsbf_7_0_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4;
    t1 = 0.19208163420677725262e-7 * LegP1[43];
    t2 = -0.11524898052406635157e-6 * LegP1[41];
    t3 = 0.29964734936257251410e-4 * LegP1[39];
    t4 = -0.12585188673228045592e-2 * LegP1[37];
    bf[0] = t4 * sinP1_1 + t3 * sinP1_3 + t2 * sinP1_5 + t1 * sinP1_7;
    bf[1] = t4 * cosP1_1 - t3 * cosP1_3 + t2 * cosP1_5 - t1 * cosP1_7;
    bf[2] = -0.76832653682710901042e-7 * LegP1[42] * sinP1_6 - 0.35957681923508701688e-3 * LegP1[38] * sinP1_2;
}

static void idsbf_7_2_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[14];
    t2 = LegP2[4];
    t3 = LegP1[13];
    t4 = LegP2[5];
    t5 = LegP1[12];
    t6 = LegP1[11];
    t7 = LegP2[3];
    t8 = LegP1[10];
    t9 = 0.22627416997969520780e-22 * cosP1_2 * t5;
    t10 = -0.40181824655031195876e-4 * cosP1_4 * t1;
    t11 = -0.67505465420452409072e-2 * t8;
    t5 = sinP1_2 * t5;
    t12 = 0.45003643613634939380e-3 * t5;
    t13 = 0.48218189586037435052e-4 * sinP1_4 * t1;
    t14 = cosP1_3 * t3;
    t15 = -0.40503279252271445446e-2 * t6;
    t1 = t4 * (t1 * (0.20090912327515597938e-4 * cosP1_4 * sinP2_2 + 0.24109094793018717526e-4 * cosP2_2 * sinP1_4) + 0.33752732710226204536e-2 * t8 * sinP2_2) - 0.64290919448049913408e-4 * t3 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.27002186168180963630e-2 * t6 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.13501093084090481814e-2 * t5 * t7;
    bf[0] = t2 * ((t12 - t13) * cosP2_1 + (t10 + t11 + t9) * sinP2_1) - 0.96436379172074870108e-4 * t3 * sinP1_3 * (cosP2_2 * t4 - t7) + (-0.80363649310062391756e-4 * t14 + 0.67505465420452409066e-3 * cosP1_1 * t6) * t4 * sinP2_2 + t15 * sinP1_1 * t7;
    bf[1] = t2 * ((t10 + t11 - t9) * cosP2_1 + (t12 + t13) * sinP2_1) + t4 * (t3 * (0.80363649310062391758e-4 * sinP1_3 * sinP2_2 - 0.96436379172074870110e-4 * cosP1_3 * cosP2_2) + 0.67505465420452409066e-3 * sinP1_1 * sinP2_2 * t6) + t7 * (-0.96436379172074870108e-4 * t14 + t15 * cosP1_1);
    bf[2] = t1;
}

static void idsbf_7_2_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[25];
    t2 = LegP2[4];
    t3 = LegP1[24];
    t4 = LegP2[5];
    t5 = LegP1[26];
    t6 = LegP1[23];
    t7 = LegP1[22];
    t8 = LegP2[3];
    t9 = LegP1[21];
    t10 = LegP1[27] * t2;
    t11 = cosP1_5 * t5;
    t12 = cosP1_3 * t3;
    t13 = sinP1_5 * t5;
    t14 = t3 * sinP1_3;
    t15 = 0.16139560627870405522e-3 * cosP1_2 * t6;
    t16 = 0.27714397037757262008e-5 * cosP1_4 * t1;
    t17 = -0.61623776942777911992e-2 * t9;
    t6 = sinP1_2 * t6;
    t18 = 0.24942957333981535806e-3 * t6;
    t19 = 0.45647242179835490368e-5 * sinP1_4 * t1;
    t20 = 0.88033967061111302846e-4 * t3;
    t21 = -0.17606793412222260570e-2 * t7;
    t1 = t4 * (t1 * (-0.48907759478395168252e-5 * cosP2_2 * sinP1_4 - 0.40756466231995973544e-5 * cosP1_4 * sinP2_2) - 0.36974266165666747196e-2 * t9 * sinP2_2) - 0.89664225710391141790e-6 * t5 * t2 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.22008491765277825712e-4 * t3 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.20541258980925970664e-2 * t7 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.70427173648889042274e-3 * t6 * t8;
    bf[0] = t2 * ((t18 - t19) * cosP2_1 + (t17 + t15 + t16) * sinP2_1) + t4 * ((0.12226939869598792063e-5 * t13 - 0.73361639217592752374e-5 * t14) * cosP2_2 + (0.61623776942777911992e-3 * cosP1_1 * t7 - 0.61134699347993960310e-5 * t12 + 0.10189116557998993385e-5 * t11) * sinP2_2) + t8 * (t21 * sinP1_1 + t20 * sinP1_3) + 0.44832112855195570898e-6 * t10 * (cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    bf[1] = t2 * ((t17 - t15 + t16) * cosP2_1 + (t18 + t19) * sinP2_1) + t4 * ((-0.73361639217592752374e-5 * t12 - 0.12226939869598792063e-5 * t11) * cosP2_2 + (0.10189116557998993385e-5 * t13 + 0.61134699347993960310e-5 * t14 + 0.61623776942777911992e-3 * t7 * sinP1_1) * sinP2_2) + t8 * (t21 * cosP1_1 - t20 * cosP1_3) - 0.44832112855195570898e-6 * t10 * (cosP1_6 * cosP2_1 - sinP1_6 * sinP2_1);
    bf[2] = t1;
}

static void idsbf_7_2_6_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[25];
    t2 = LegP2[4];
    t3 = LegP1[24];
    t4 = LegP2[5];
    t5 = LegP1[27];
    t6 = LegP1[26];
    t7 = LegP1[23];
    t8 = LegP1[22];
    t9 = LegP2[3];
    t10 = t5 * t2;
    t11 = 0.66315953932367941860e-4 * cosP1_2 * t7;
    t12 = -0.95789711235642582698e-5 * cosP1_4 * t1;
    t13 = 0.55705401303189071166e-2 * LegP1[21];
    t7 = sinP1_2 * t7;
    t14 = 0.33157976966183970930e-3 * t7;
    t15 = 0.14736878651637320410e-5 * sinP1_4 * t1;
    t16 = cosP1_5 * t6;
    t17 = cosP1_3 * t3;
    t18 = t6 * sinP1_5;
    t19 = t3 * sinP1_3;
    t20 = -0.16578988483091985468e-5 * t6;
    t21 = 0.49736965449275956402e-4 * t3;
    t22 = 0.13926350325797267791e-2 * cosP2_2 * t4;
    t23 = -0.19894786179710382559e-2 * t9;
    t1 = t9 * (-0.16578988483091985468e-5 * sinP1_6 * t5 - 0.19894786179710382559e-3 * t7) - 0.18421098314546650518e-5 * t6 * t2 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.33157976966183970930e-4 * t3 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.26526381572947176744e-3 * t8 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + t1 * t4 * (0.58947514606549281658e-5 * cosP1_4 * sinP2_2 + 0.22105317977455980622e-5 * sinP1_4 * cosP2_2);
    bf[0] = t2 * ((t14 + t15) * cosP2_1 + (-t11 + t12 + t13) * sinP2_1) + t4 * ((0.27631647471819975778e-6 * t18 + 0.82894942415459927332e-5 * t19) * cosP2_2 + (0.73684393258186602070e-6 * t16 + 0.22105317977455980622e-4 * t17) * sinP2_2) + t9 * (-t21 * sinP1_3 + t20 * sinP1_5) - 0.18421098314546650518e-6 * t10 * (cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + (t23 + t22) * t8 * sinP1_1;
    bf[1] = t2 * ((t11 + t12 + t13) * cosP2_1 + (t14 - t15) * sinP2_1) + t4 * ((0.82894942415459927332e-5 * t17 - 0.27631647471819975778e-6 * t16) * cosP2_2 + (0.73684393258186602070e-6 * t18 - 0.22105317977455980622e-4 * t19) * sinP2_2) + t9 * (t21 * cosP1_3 + t20 * cosP1_5) + 0.18421098314546650518e-6 * t10 * (cosP1_6 * cosP2_1 - sinP1_6 * sinP2_1) + (t23 - t22) * t8 * cosP1_1;
    bf[2] = t1;
}

static void idsbf_7_2_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[25];
    t2 = LegP2[4];
    t3 = LegP1[24];
    t4 = LegP2[5];
    t5 = LegP1[27];
    t6 = LegP1[26];
    t7 = LegP1[23];
    t8 = LegP1[22];
    t9 = LegP2[3];
    t10 = LegP1[21];
    t11 = 0.19702561515406762907e-3 * cosP1_2 * t7;
    t12 = 0.94005685661744685766e-5 * cosP1_4 * t1;
    t13 = 0.54729337542796563634e-6 * cosP1_6 * t5;
    t14 = 0.29206150011073554426e-2 * t10;
    t7 = sinP1_2 * t7;
    t15 = 0.92717936543090648976e-4 * t7;
    t16 = 0.61811957695393765982e-5 * sinP1_4 * t1;
    t5 = sinP1_6 * t5;
    t17 = 0.42924970621801226380e-6 * t5;
    t18 = cosP1_5 * t6;
    t19 = cosP1_3 * t3;
    t20 = cosP1_1 * t8;
    t21 = sinP1_5 * t6;
    t22 = sinP1_3 * t3;
    t23 = sinP1_1 * t8;
    t1 = t4 * (t1 * (-0.14165240305194404704e-5 * cosP1_4 * sinP2_2 + 0.56660961220777618812e-5 * sinP1_4 * cosP2_2) + 0.68147683359171626986e-2 * t10 * sinP2_2) + t9 * (0.55802461808341594288e-6 * t5 - 0.50994865098699856932e-3 * t7) - 0.14165240305194404702e-5 * t6 * t2 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.32193727966350919778e-4 * t3 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.83446142888781584064e-3 * t8 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    bf[0] = t2 * ((t15 + t16 + t17) * cosP2_1 + (t14 - t11 + t12 - t13) * sinP2_1) + t4 * ((-0.28330480610388809406e-4 * t22 + 0.25754982373080735824e-6 * t21) * cosP2_2 + (-0.64387455932701839560e-7 * t18 + 0.97353833370245181414e-3 * t20 + 0.70826201525972023514e-5 * t19) * sinP2_2) + t9 * (-0.33481477085004956574e-5 * t21 - 0.28330480610388809408e-4 * t22 + 0.20397946039479942772e-2 * t23);
    bf[1] = t2 * ((t14 + t11 + t12 + t13) * cosP2_1 + (t15 - t16 + t17) * sinP2_1) + t4 * ((-0.25754982373080735824e-6 * t18 - 0.28330480610388809406e-4 * t19) * cosP2_2 + (-0.70826201525972023514e-5 * t22 + 0.97353833370245181414e-3 * t23 - 0.64387455932701839560e-7 * t21) * sinP2_2) + t9 * (-0.33481477085004956574e-5 * t18 + 0.28330480610388809408e-4 * t19 + 0.20397946039479942772e-2 * t20);
    bf[2] = t1;
}

static void idsbf_7_2_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[42];
    t2 = LegP2[4];
    t3 = LegP1[40];
    t4 = LegP1[39];
    t5 = LegP2[5];
    t6 = LegP1[41];
    t7 = LegP1[38];
    t8 = LegP1[37];
    t9 = LegP2[3];
    t10 = LegP1[36];
    t11 = LegP1[43];
    t12 = LegP1[44] * t2;
    t13 = 0.93957162041408434780e-4 * cosP1_2 * t7;
    t14 = 0.21682422009555792642e-5 * cosP1_4 * t3;
    t15 = 0.60228950026543868448e-7 * cosP1_6 * t1;
    t16 = 0.27319851732040298730e-2 * t10;
    t7 = sinP1_2 * t7;
    t17 = -0.36137370015926321126e-5 * t7;
    t18 = 0.84320530037161415832e-6 * sinP1_4 * t3;
    t1 = sinP1_6 * t1;
    t19 = -0.50190791688786557040e-7 * t1;
    t20 = cosP1_5 * t6;
    t21 = cosP1_3 * t4;
    t22 = cosP1_1 * t8;
    t23 = sinP1_5 * t6;
    t24 = sinP1_3 * t4;
    t25 = sinP1_1 * t8;
    t26 = t2 * ((t16 + t13 + t14 + t15) * cosP2_1 + (t17 + t18 + t19) * sinP2_1) + t5 * ((-0.48183160021235094760e-5 * t21 - 0.24091580010617547381e-6 * t20) * cosP2_2 + (-0.60228950026543868464e-7 * t23 - 0.12045790005308773692e-5 * t24 + 0.91066172440134329084e-3 * t25) * sinP2_2) + t9 * (-0.12045790005308773690e-6 * t20 + 0.26500738011679302118e-4 * t21 - 0.20076316675514622816e-7 * cosP1_7 * t11 + 0.11130309964905306889e-2 * t22) + 0.25095395844393278520e-8 * t12 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1);
    t1 = t5 * (t3 * (0.48183160021235094760e-6 * cosP1_4 * sinP2_2 - 0.19273264008494037903e-5 * cosP2_2 * sinP1_4) - 0.72852937952107463270e-2 * t10 * sinP2_2) + t9 * (-0.80305266702058491256e-7 * t1 + 0.31800885614015162540e-3 * t7) + 0.50190791688786557040e-8 * t11 * t2 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + 0.33125922514599127646e-6 * t6 * t2 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.15057237506635967113e-4 * t4 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.68299629330100746824e-3 * t8 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    bf[0] = t2 * ((t17 - t18 + t19) * cosP2_1 + (t16 - t13 + t14 - t15) * sinP2_1) + t5 * ((0.24091580010617547381e-6 * t23 - 0.48183160021235094760e-5 * t24) * cosP2_2 + (-0.60228950026543868464e-7 * t20 + 0.12045790005308773692e-5 * t21 + 0.91066172440134329084e-3 * t22) * sinP2_2) + t9 * (0.20076316675514622816e-7 * sinP1_7 * t11 - 0.26500738011679302118e-4 * t24 + 0.11130309964905306889e-2 * t25 - 0.12045790005308773690e-6 * t23) - 0.25095395844393278520e-8 * t12 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1);
    bf[1] = t26;
    bf[2] = t1;
}

static void idsbf_7_2_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[43];
    t2 = LegP2[5];
    t3 = LegP1[42];
    t4 = LegP2[4];
    t5 = LegP1[40];
    t6 = LegP1[39];
    t7 = LegP1[44];
    t8 = LegP1[41];
    t9 = LegP1[38];
    t10 = LegP1[37];
    t11 = LegP2[3];
    t12 = t1 * t2;
    t13 = t7 * t4;
    t14 = -0.14727657816477024894e-8;
    t15 = 0.75817982439223724173e-4 * cosP1_2 * t9;
    t16 = -0.22975146193704158836e-6 * cosP1_4 * t5;
    t17 = 0.48601270794374182152e-7 * cosP1_6 * t3;
    t18 = -0.95530657873421892438e-2 * LegP1[36];
    t9 = sinP1_2 * t9;
    t19 = -0.18954495609805931041e-3 * t9;
    t20 = 0.19528874264648535010e-5 * sinP1_4 * t5;
    t3 = sinP1_6 * t3;
    t21 = 0.66274460174146612029e-8 * t3;
    t22 = sinP1_5 * t8;
    t23 = sinP1_3 * t6;
    t24 = 0.14474342102033620068e-2 * t11;
    t25 = 0.86846052612201720394e-3 * cosP2_2 * t2;
    t26 = cosP1_5 * t8;
    t27 = cosP1_3 * t6;
    t26 = t11 * (-0.13254892034829322408e-7 * cosP1_7 * t1 + 0.55670546546283154107e-6 * t26 - 0.20677631574333742954e-4 * t27) + t14 * t12 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t2 * ((0.11487573096852079420e-6 * t26 - 0.68925438581112476506e-5 * t27) * cosP2_2 + (-0.10338815787166871476e-4 * t23 + 0.17231359645278119128e-6 * t22) * sinP2_2) + t4 * ((t15 + t16 + t17 + t18) * cosP2_1 + (t20 + t21 + t19) * sinP2_1) - 0.92047861352981405590e-9 * t13 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + (-t25 + t24) * t10 * cosP1_1;
    t3 = t11 * (0.15905870441795186888e-6 * t3 + 0.82710526297334971820e-4 * t9) + 0.12886700589417396782e-7 * t1 * t4 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.20986912388479760474e-6 * t8 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.51694078935834357376e-5 * t6 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.26536293853728303454e-3 * t10 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.14727657816477024895e-8 * t7 * t2 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + t5 * t2 * (0.13785087716222495301e-5 * cosP1_4 * sinP2_2 - 0.91900584774816635342e-6 * cosP2_2 * sinP1_4);
    bf[0] = t11 * (0.55670546546283154107e-6 * t22 + 0.20677631574333742954e-4 * t23 + 0.13254892034829322408e-7 * sinP1_7 * t1) + t2 * (t6 * (-0.68925438581112476506e-5 * cosP2_2 * sinP1_3 + 0.10338815787166871476e-4 * cosP1_3 * sinP2_2) + t8 * (0.17231359645278119128e-6 * cosP1_5 * sinP2_2 - 0.11487573096852079420e-6 * sinP1_5 * cosP2_2)) + t4 * ((-t20 + t21 + t19) * cosP2_1 + (-t15 + t16 - t17 + t18) * sinP2_1) + t14 * t12 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.92047861352981405590e-9 * t13 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + (t25 + t24) * t10 * sinP1_1;
    bf[1] = t26;
    bf[2] = t3;
}

static void idsbf_7_2_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[43];
    t2 = LegP2[5];
    t3 = LegP1[42];
    t4 = LegP2[4];
    t5 = LegP1[40];
    t6 = LegP1[39];
    t7 = LegP1[44];
    t8 = LegP1[41];
    t9 = LegP1[38];
    t10 = LegP1[37];
    t11 = LegP2[3];
    t12 = LegP1[36];
    t13 = t1 * t2;
    t14 = t7 * t4;
    t15 = -0.73715762316944457350e-8;
    t16 = 0.77115359826149425264e-4 * cosP1_2 * t9;
    t17 = -0.54116041983262754566e-6 * cosP1_4 * t5;
    t18 = 0.49432922965480400810e-7 * cosP1_6 * t3;
    t19 = 0.51139659674183303068e-2 * t12;
    t9 = sinP1_2 * t9;
    t20 = -0.19075904799100120986e-3 * t9;
    t21 = 0.14881911545397257507e-5 * sinP1_4 * t5;
    t3 = sinP1_6 * t3;
    t22 = -0.54636388540794127214e-7 * t3;
    t23 = cosP1_5 * t8;
    t24 = cosP1_3 * t6;
    t25 = cosP1_1 * t10;
    t26 = sinP1_5 * t8;
    t27 = sinP1_3 * t6;
    t28 = sinP1_1 * t10;
    t29 = t11 * (-0.19512995907426474004e-8 * cosP1_7 * t1 - 0.40977291405595595410e-6 * t23 - 0.21308191530909709613e-4 * t24 - 0.23439010684000680572e-2 * t25) + t15 * t13 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t2 * ((-0.71027305103032365368e-5 * t24 - 0.45530323783995106006e-7 * t23) * cosP2_2 + (0.25569829837091651534e-3 * t28 - 0.39025991814852948006e-7 * t26 - 0.60880547231170598884e-5 * t27) * sinP2_2) + t4 * ((t19 - t16 + t17 - t18) * cosP2_1 + (t20 - t21 + t22) * sinP2_1) - 0.21681106563807193340e-9 * t14 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1);
    t3 = t11 * (0.58538987722279422002e-7 * t3 + 0.46878021368001361144e-3 * t9) + t2 * (t5 * (-0.10146757871861766480e-5 * cosP1_4 * sinP2_2 + 0.11837884183838727560e-5 * cosP2_2 * sinP1_4) + 0.23012846853382486380e-2 * t12 * sinP2_2) + 0.69379541004183018682e-8 * t1 * t4 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.72848518054392169616e-7 * t8 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.24352218892468239554e-4 * t6 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.11364368816485178460e-2 * t10 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.92144702896180571672e-9 * t7 * t2 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2);
    bf[0] = t11 * (0.19512995907426474004e-8 * sinP1_7 * t1 - 0.40977291405595595410e-6 * t26 - 0.23439010684000680572e-2 * t28 + 0.21308191530909709613e-4 * t27) + t2 * ((0.45530323783995106006e-7 * t26 - 0.71027305103032365368e-5 * t27) * cosP2_2 + (0.25569829837091651534e-3 * t25 + 0.60880547231170598884e-5 * t24 - 0.39025991814852948006e-7 * t23) * sinP2_2) + t4 * ((t20 + t21 + t22) * cosP2_1 + (t19 + t16 + t17 + t18) * sinP2_1) + t15 * t13 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.21681106563807193340e-9 * t14 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1);
    bf[1] = t29;
    bf[2] = t3;
}

static void idsbf_7_2_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[56];
    t2 = LegP2[3];
    t3 = LegP1[55];
    t4 = LegP2[4];
    t5 = LegP1[60];
    t6 = LegP1[62];
    t7 = LegP2[5];
    t8 = LegP1[61];
    t9 = LegP1[59];
    t10 = LegP1[58];
    t11 = LegP1[63];
    t12 = t6 * t7;
    t13 = LegP1[64] * t7;
    t14 = t11 * t4;
    t15 = -0.37023306624607051226e-7;
    t16 = 0.20568503680337250686e-9;
    t17 = -0.15426377760252938013e-9;
    t18 = 0.25710629600421563354e-10;
    t19 = sinP1_2 * LegP1[57];
    t20 = -0.10781186889085573319e-3 * t19;
    t21 = 0.10366525854889974346e-5 * sinP1_4 * t9;
    t22 = sinP1_6 * t8;
    t23 = -0.49364408832809401646e-8 * t22;
    t24 = -0.88855935899056922960e-6 * cosP1_4 * t9;
    t8 = 0.14142135623730950488e-27 * cosP1_6 * t8;
    t25 = 0.48515341000885079934e-2 * t3;
    t26 = cosP1_3 * t10;
    t27 = cosP1_1 * t1;
    t28 = sinP1_3 * t10;
    t29 = sinP1_1 * t1;
    t30 = t15 * t5 * (sinP1_5 * t7 * sinP2_2 + cosP1_5 * t2) - t16 * t14 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + t17 * t12 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - t18 * t13 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t2 * (-0.18511653312303525614e-8 * cosP1_7 * t6 - 0.20214725417035449973e-4 * t26 - 0.14554602300265523980e-2 * t27) + t4 * ((t24 - t8 + t25) * cosP2_1 + (t20 - t21 + t23) * sinP2_1) + t7 * ((-0.18141420246057455100e-5 * t26 - 0.43193857728708226430e-7 * cosP1_5 * t5) * cosP2_2 + (-0.15549788782334961514e-5 * t28 + 0.24257670500442539966e-3 * t29) * sinP2_2);
    t1 = t2 * (-0.14809322649842820492e-7 * t22 - 0.32343560667256719954e-3 * t19) + t7 * (t9 * (0.44427967949528461472e-6 * cosP1_4 * sinP2_2 - 0.51832629274449871720e-6 * cosP2_2 * sinP1_4) - 0.24257670500442539964e-2 * t3 * sinP2_2) - 0.10284251840168625342e-9 * t11 * t7 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) - 0.12341102208202350410e-8 * t6 * t4 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + 0.24682204416404700818e-7 * t5 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.13476483611356966647e-4 * t10 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.97030682001770159860e-3 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    bf[0] = t2 * (-0.14554602300265523980e-2 * t29 + 0.18511653312303525614e-8 * sinP1_7 * t6 + 0.20214725417035449973e-4 * t28) + t4 * ((t20 + t21 + t23) * cosP2_1 + (t24 + t8 + t25) * sinP2_1) + t7 * ((0.43193857728708226430e-7 * sinP1_5 * t5 - 0.18141420246057455100e-5 * t28) * cosP2_2 + (0.24257670500442539966e-3 * t27 + 0.15549788782334961514e-5 * t26) * sinP2_2) + t17 * t12 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t18 * t13 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t16 * t14 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + t15 * t5 * (cosP1_5 * t7 * sinP2_2 + sinP1_5 * t2);
    bf[1] = t30;
    bf[2] = t1;
}

static void idsbf_7_4_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[5];
    t2 = LegP2[13];
    t3 = LegP1[4];
    t4 = LegP2[14];
    t5 = LegP2[11];
    t6 = LegP2[10];
    t7 = LegP1[3];
    t8 = -0.67505465420452409074e-2 * t6 - 0.40181824655031195872e-4 * cosP2_4 * t4;
    t9 = 0.48218189586037435048e-4 * sinP2_4 * t4;
    t10 = sinP2_2 * LegP2[12];
    t11 = 0.45003643613634939384e-3 * t10;
    t12 = 0.96436379172074870108e-4 * t2;
    t13 = -0.40503279252271445442e-2 * t5;
    t4 = t1 * (t4 * (0.24109094793018717524e-4 * cosP1_2 * sinP2_4 + 0.20090912327515597936e-4 * cosP2_4 * sinP1_2) + 0.33752732710226204538e-2 * sinP1_2 * t6) + 0.27002186168180963628e-2 * t3 * t5 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.64290919448049913412e-4 * t3 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.13501093084090481815e-2 * t10 * t7;
    bf[0] = t1 * (t2 * (-0.80363649310062391750e-4 * cosP2_3 * sinP1_2 - 0.96436379172074870102e-4 * cosP1_2 * sinP2_3) + 0.67505465420452409072e-3 * cosP2_1 * sinP1_2 * t5) + t3 * ((t11 - t9) * cosP1_1 + sinP1_1 * t8) + t7 * (t13 * sinP2_1 + t12 * sinP2_3);
    bf[1] = t1 * (t2 * (-0.96436379172074870102e-4 * cosP1_2 * cosP2_3 + 0.80363649310062391750e-4 * sinP1_2 * sinP2_3) + 0.67505465420452409072e-3 * sinP1_2 * sinP2_1 * t5) + t3 * (cosP1_1 * t8 + (t11 + t9) * sinP1_1) + t7 * (t13 * cosP2_1 - t12 * cosP2_3);
    bf[2] = t4;
}

static void idsbf_7_4_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[12];
    t2 = LegP2[13];
    t3 = LegP1[11];
    t4 = LegP2[14];
    t5 = LegP1[14];
    t6 = LegP1[13];
    t7 = LegP2[11];
    t8 = LegP2[12];
    t9 = LegP1[10];
    t10 = LegP2[10];
    t11 = t5 * t2;
    t5 = t5 * t7;
    t12 = cosP2_3 * t2;
    t13 = cosP2_1 * t7;
    t14 = sinP2_3 * t2;
    t15 = sinP2_1 * t7;
    t16 = 0.38974298632269171972e-3 * t3;
    t17 = t1 * ((-0.12063473386178553229e-4 * t12 - 0.27282009042588420380e-3 * t13) * cosP1_2 + (-0.18559189824890081896e-5 * t14 + 0.31179438905815337576e-3 * t15) * sinP1_2) + t10 * (-0.17538434384521127386e-2 * t3 * cosP1_1 - 0.29230723974201878980e-3 * cosP1_3 * t6) + t4 * (t3 * (0.12527453131800805275e-4 * sinP1_1 * sinP2_4 - 0.10439544276500671063e-4 * cosP1_1 * cosP2_4) + t6 * (-0.17399240460834451772e-5 * cosP1_3 * cosP2_4 + 0.20879088553001342127e-5 * sinP1_3 * sinP2_4)) + t9 * (-0.83516354212005368512e-4 * t12 - 0.35076868769042254770e-2 * t13) - 0.25518886009223862600e-5 * t11 * (cosP1_4 * cosP2_3 - sinP1_4 * sinP2_3) + 0.97435746580672929916e-5 * t5 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) + t16 * sinP1_1 * t8 * sinP2_2;
    t2 = t1 * (t4 * (-0.69596961843337807088e-5 * cosP2_4 * sinP1_2 - 0.83516354212005368504e-5 * cosP1_2 * sinP2_4) - 0.11692289589680751591e-2 * sinP1_2 * t10) + 0.19487149316134585986e-4 * t6 * t7 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.41758177106002684252e-4 * t3 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.51037772018447725200e-5 * t6 * t2 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.17538434384521127385e-2 * t3 * t7 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.15589719452907668788e-2 * t9 * t8 * sinP2_2;
    bf[0] = t1 * ((-0.12063473386178553229e-4 * t14 + 0.27282009042588420380e-3 * t15) * cosP1_2 + (0.31179438905815337576e-3 * t13 + 0.18559189824890081896e-5 * t12) * sinP1_2) + t10 * (0.29230723974201878980e-3 * sinP1_3 * t6 - 0.17538434384521127386e-2 * sinP1_1 * t3) + t4 * (t3 * (-0.10439544276500671063e-4 * cosP2_4 * sinP1_1 - 0.12527453131800805275e-4 * cosP1_1 * sinP2_4) + t6 * (0.20879088553001342127e-5 * cosP1_3 * sinP2_4 + 0.17399240460834451772e-5 * sinP1_3 * cosP2_4)) + t9 * (0.83516354212005368512e-4 * t14 - 0.35076868769042254770e-2 * t15) + 0.25518886009223862600e-5 * t11 * (cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - 0.97435746580672929916e-5 * t5 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t16 * cosP1_1 * t8 * sinP2_2;
    bf[1] = t17;
    bf[2] = t2;
}

static void idsbf_7_4_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[12];
    t2 = LegP2[13];
    t3 = LegP1[11];
    t4 = LegP2[14];
    t5 = LegP1[14];
    t6 = LegP1[13];
    t7 = LegP2[11];
    t8 = LegP2[12];
    t9 = LegP1[10];
    t10 = LegP2[10];
    t11 = cosP2_4 * t4;
    t12 = 0.10761092105699667727e-2 * t10 - 0.89675767547497231070e-5 * t11;
    t13 = -0.10248659148285397837e-4 * cosP2_2 * t8;
    t11 = 0.21351373225594578822e-6 * t11;
    t14 = 0.25621647870713494589e-4 * t10;
    t15 = sinP2_2 * t8;
    t16 = 0.24340565477177819860e-4 * t15;
    t17 = sinP2_4 * t4;
    t18 = 0.96081179515175604710e-6 * t17;
    t19 = cosP1_2 * t1;
    t20 = 0.54801857945692752328e-5 * t19;
    t21 = cosP1_4 * t5;
    t22 = 0.84515852351311874520e-6 * t21;
    t23 = 0.24660836075561738544e-3 * t9;
    t24 = sinP1_2 * t1;
    t25 = 0.21920743178277100928e-4 * t24;
    t26 = sinP1_4 * t5;
    t27 = 0.35585622042657631376e-6 * t26;
    t19 = 0.35571387793840568322e-3 * t19;
    t21 = -0.35283144255295041512e-4 * t21;
    t28 = 0.33628412830311461654e-2 * t9;
    t24 = 0.13152445906966260556e-3 * t24;
    t26 = 0.43983828844724832384e-4 * t26;
    t15 = 0.29891922515832410356e-4 * t15;
    t17 = 0.40354095396373753980e-4 * t17;
    t1 = t1 * (t4 * (0.29891922515832410352e-5 * cosP2_4 * sinP1_2 + 0.13451365132124584660e-4 * cosP1_2 * sinP2_4) - 0.35870307018998892424e-3 * sinP1_2 * t10) + t8 * (t5 * (-0.60851413692944549652e-5 * cosP1_4 * sinP2_2 + 0.25621647870713494592e-5 * cosP2_2 * sinP1_4) + 0.14945961257916205178e-3 * sinP2_2 * t9) - 0.69605476715438326978e-4 * t6 * t7 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.98643344302246954178e-4 * t3 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.39144184246923394516e-5 * t6 * t2 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.13451365132124584660e-2 * t3 * t7 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    bf[0] = t2 * ((t27 + t25) * cosP2_3 + (t20 - t22 + t23) * sinP2_3) + t3 * ((t15 - t17) * cosP1_1 + sinP1_1 * t12) + t6 * ((t16 + t18) * cosP1_3 + (t11 - t14 + t13) * sinP1_3) + t7 * ((t24 - t26) * cosP2_1 + (-t19 + t21 + t28) * sinP2_1);
    bf[1] = t2 * ((t20 + t22 - t23) * cosP2_3 + (t27 - t25) * sinP2_3) + t3 * (cosP1_1 * t12 + (t15 + t17) * sinP1_1) + t6 * ((-t11 + t14 + t13) * cosP1_3 + (-t16 + t18) * sinP1_3) + t7 * ((t19 + t21 + t28) * cosP2_1 + (t24 + t26) * sinP2_1);
    bf[2] = t1;
}

static void idsbf_7_4_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[22];
    t2 = LegP2[10];
    t3 = LegP1[21];
    t4 = LegP2[11];
    t5 = LegP1[24];
    t6 = LegP2[13];
    t7 = LegP1[23];
    t8 = LegP2[12];
    t9 = LegP1[27];
    t10 = LegP1[25];
    t11 = LegP2[14];
    t12 = LegP1[26];
    t13 = t9 * t6;
    t9 = t9 * t4;
    t14 = cosP1_3 * t5;
    t15 = cosP1_1 * t1;
    t16 = cosP1_5 * t12;
    t17 = sinP1_5 * t12;
    t18 = sinP1_3 * t5;
    t19 = cosP1_2 * t7;
    t20 = 0.14998361371067013186e-3 * t19;
    t21 = cosP1_4 * t10;
    t22 = 0.31672952862877058388e-5 * t21;
    t23 = 0.30698400467096225818e-2 * t3;
    t24 = sinP1_2 * t7;
    t25 = -0.54672389403304706930e-4 * t24;
    t26 = sinP1_4 * t10;
    t27 = 0.47753067393260795724e-5 * t26;
    t19 = -0.48240343591151211996e-5 * t19;
    t21 = 0.23551682898036787006e-6 * t21;
    t28 = 0.22512160342537232268e-3 * t3;
    t24 = 0.10184072535909700311e-4 * t24;
    t26 = -0.21115301908584705590e-6 * t26;
    t29 = t11 * (t1 * (0.17541943124054986182e-4 * sinP1_1 * sinP2_4 - 0.38982095831233302628e-5 * cosP1_1 * cosP2_4) + t5 * (-0.19491047915616651310e-6 * cosP1_3 * cosP2_4 + 0.87709715620274930910e-6 * sinP1_3 * sinP2_4)) + t2 * (0.23389257498739981574e-4 * t14 + 0.46778514997479963148e-3 * t15) + t4 * ((t20 + t22 + t23) * cosP2_1 + (t25 + t27) * sinP2_1) + t6 * ((t19 + t21 - t28) * cosP2_3 + (-t24 + t26) * sinP2_3) + t8 * ((-0.12994031943744434208e-6 * t16 - 0.77964191662466605254e-6 * t14) * cosP2_2 + (-0.30860825866393031244e-6 * t17 - 0.18516495519835818748e-5 * t18 + 0.27287467081863311840e-4 * t1 * sinP1_1) * sinP2_2) + 0.60909524736302035358e-8 * t13 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.40200286325959343340e-6 * t9 * (cosP1_6 * cosP2_1 - sinP1_6 * sinP2_1);
    t3 = t7 * (t11 * (-0.15592838332493321050e-5 * cosP2_4 * sinP1_2 - 0.70167772496219944726e-5 * cosP1_2 * sinP2_4) + 0.18711405998991985261e-3 * sinP1_2 * t2) + t8 * (t10 * (-0.51976127774977736836e-6 * cosP2_2 * sinP1_4 + 0.12344330346557212499e-5 * cosP1_4 * sinP2_2) - 0.16372480249117987105e-3 * sinP2_2 * t3) - 0.80400572651918686676e-6 * t12 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.13400095441986447779e-5 * t5 * t6 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.12181904947260407071e-7 * t12 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.23827806076841356230e-4 * t5 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.10232800155698741940e-2 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.75040534475124107554e-4 * t1 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    bf[0] = t11 * (t1 * (-0.38982095831233302628e-5 * cosP2_4 * sinP1_1 - 0.17541943124054986182e-4 * cosP1_1 * sinP2_4) + t5 * (0.19491047915616651310e-6 * sinP1_3 * cosP2_4 + 0.87709715620274930910e-6 * cosP1_3 * sinP2_4)) + t2 * (-0.23389257498739981574e-4 * t18 + 0.46778514997479963148e-3 * t1 * sinP1_1) + t4 * ((t25 - t27) * cosP2_1 + (-t20 + t22 + t23) * sinP2_1) + t6 * ((t24 + t26) * cosP2_3 + (t19 - t21 + t28) * sinP2_3) + t8 * ((-0.77964191662466605254e-6 * t18 + 0.12994031943744434208e-6 * t17) * cosP2_2 + (-0.30860825866393031244e-6 * t16 + 0.18516495519835818748e-5 * t14 + 0.27287467081863311840e-4 * t15) * sinP2_2) - 0.60909524736302035358e-8 * t13 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.40200286325959343340e-6 * t9 * (cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    bf[1] = t29;
    bf[2] = t3;
}

static void idsbf_7_4_6_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[22];
    t2 = LegP2[10];
    t3 = LegP1[21];
    t4 = LegP2[11];
    t5 = LegP1[24];
    t6 = LegP2[13];
    t7 = LegP1[26];
    t8 = LegP1[23];
    t9 = LegP1[27];
    t10 = LegP1[25];
    t11 = LegP2[12];
    t12 = LegP2[14];
    t13 = t9 * t6;
    t14 = t9 * t4;
    t15 = t7 * t12;
    t16 = 0.60870839737330501618e-7;
    t17 = 0.64559981539592956262e-8;
    t18 = -0.18445709011312273218e-8;
    t19 = sinP1_5 * t7;
    t20 = sinP1_3 * t5;
    t21 = sinP1_1 * t1;
    t22 = cosP1_5 * t7;
    t23 = cosP1_3 * t5;
    t24 = cosP1_2 * t8;
    t25 = 0.22710356934727670786e-4 * t24;
    t26 = cosP1_4 * t10;
    t27 = 0.19257320207810013241e-5 * t26;
    t28 = -0.18407341936568743689e-2 * t3;
    t29 = sinP1_2 * t8;
    t30 = -0.64943652287028251546e-4 * t29;
    t31 = sinP1_4 * t10;
    t32 = 0.75258492766154074740e-6 * t31;
    t24 = -0.33866321744769333626e-5 * t24;
    t26 = 0.36522503842398300972e-6 * t26;
    t3 = 0.19522938417572909972e-3 * t3;
    t33 = 0.12683269516178319064e-4 * t29;
    t31 = -0.81161119649774002160e-7 * t31;
    t34 = cosP1_1 * t1;
    t34 = t11 * ((-0.17707880650859782286e-5 * t23 + 0.29749239493444434242e-3 * t34 + 0.59026268836199274286e-7 * t22) * cosP2_2 + (0.22134850813574727860e-6 * t19 - 0.66404552440724183586e-5 * t20) * sinP2_2) + t12 * (t1 * (0.33202276220362091792e-4 * cosP1_1 * cosP2_4 + 0.39842731464434510147e-5 * sinP1_1 * sinP2_4) + t5 * (-0.83005690550905229480e-6 * cosP1_3 * cosP2_4 - 0.9960682866108627540e-7 * sinP1_3 * sinP2_4)) - t16 * t14 * (cosP1_6 * cosP2_1 - sinP1_6 * sinP2_1) - t17 * t13 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t18 * t15 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t2 * (-0.75701189782425569286e-4 * t23 + 0.30280475912970227712e-2 * t34 - 0.24348335894932200648e-5 * t22) + t4 * ((t25 + t27 + t28) * cosP2_1 + (-t32 + t30) * sinP2_1) + t6 * ((-t3 + t24 + t26) * cosP2_3 + (t31 + t33) * sinP2_3);
    t7 = t18 * t9 * t12 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + t2 * (-0.24348335894932200650e-5 * sinP1_6 * t9 + 0.30280475912970227714e-3 * t29) + 0.60870839737330501616e-6 * t7 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.13391584742212710356e-5 * t5 * t6 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.64559981539592956266e-7 * t7 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.35194412793583817298e-5 * t5 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.87654009221755922326e-4 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.92966373417013857004e-5 * t1 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + t8 * (-0.39842731464434510158e-6 * cosP1_2 * sinP2_4 + 0.33202276220362091792e-5 * cosP2_4 * sinP1_2) * t12 + (-0.47221015068959419438e-6 * cosP2_2 * sinP1_4 + 0.17707880650859782291e-5 * cosP1_4 * sinP2_2) * t11 * t10;
    bf[0] = t11 * ((-0.17707880650859782286e-5 * t20 - 0.29749239493444434242e-3 * t21 - 0.59026268836199274286e-7 * t19) * cosP2_2 + (0.22134850813574727860e-6 * t22 + 0.66404552440724183586e-5 * t23) * sinP2_2) + t12 * (t1 * (-0.39842731464434510147e-5 * cosP1_1 * sinP2_4 + 0.33202276220362091792e-4 * cosP2_4 * sinP1_1) + t5 * (-0.9960682866108627540e-7 * cosP1_3 * sinP2_4 + 0.83005690550905229480e-6 * sinP1_3 * cosP2_4)) + t2 * (0.75701189782425569286e-4 * t20 - 0.24348335894932200648e-5 * t19 + 0.30280475912970227712e-2 * t21) + t4 * ((t32 + t30) * cosP2_1 + (-t25 + t27 + t28) * sinP2_1) + t6 * ((t31 - t33) * cosP2_3 + (t3 + t24 - t26) * sinP2_3) + t17 * t13 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t16 * t14 * (cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t18 * t15 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    bf[1] = t34;
    bf[2] = t7;
}

static void idsbf_7_4_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[22];
    t2 = LegP2[10];
    t3 = LegP1[21];
    t4 = LegP2[11];
    t5 = LegP1[24];
    t6 = LegP2[13];
    t7 = LegP1[26];
    t8 = LegP1[23];
    t9 = LegP1[27];
    t10 = LegP1[25];
    t11 = LegP2[12];
    t12 = LegP2[14];
    t13 = t7 * t12;
    t14 = t9 * t6;
    t15 = 0.11416542639275190164e-5 * cosP1_4 * t10;
    t16 = -0.27294318863744070030e-2 * t3;
    t17 = 0.35810864518068331544e-5 * sinP1_4 * t10;
    t18 = sinP2_2 * t11;
    t19 = -0.88170836998709930177e-3 * t2;
    t20 = 0.20930328172004515304e-5 * t2;
    t21 = 0.38908943396675060504e-6 * sinP1_6;
    t22 = 0.42486777272231387904e-6 * cosP1_6;
    t23 = (0.36794768833846321586e-6 * cosP1_3 * sinP2_4 - 0.14433307111619275318e-6 * sinP1_3 * cosP2_4) * t12 * t5;
    t24 = (0.55293796258597787128e-7 * sinP1_5 * cosP2_2 + 0.43096635319201216436e-7 * cosP1_5 * sinP2_2) * t11 * t7;
    t25 = (0.23255920191116128116e-6 * sinP1_4 * cosP2_3 - 0.39356172631119601428e-6 * cosP1_4 * sinP2_3) * t10 * t6;
    t26 = (0.23255920191116128116e-6 * sinP1_4 * sinP2_3 + 0.39356172631119601428e-6 * cosP1_4 * cosP2_3) * t10 * t6;
    t27 = (-0.15851430356839783268e-3 * cosP1_2 * cosP2_1 - 0.61034593340740439718e-4 * sinP1_2 * sinP2_1) * t8 * t4;
    t28 = t18 * (-0.19261756555495064431e-3 * sinP1_1 * t1 + 0.43096635319201216436e-7 * t7 * sinP1_5);
    t26 = t1 * (t12 * (0.10391981120365878228e-4 * cosP1_1 * cosP2_4 + 0.26492233560369351538e-4 * sinP1_1 * sinP2_4) + t19 * cosP1_1) + t4 * ((t22 * t9 + t15 + t16) * cosP2_1 + (t21 * t9 - t17) * sinP2_1) + t5 * (t11 * (-0.60823175884457565838e-5 * cosP1_3 * cosP2_2 + 0.47406298851121338078e-5 * sinP1_3 * sinP2_2) - 0.12245949583154156970e-4 * cosP1_3 * t2) + t6 * (t8 * (0.82696751169108749280e-5 * cosP1_2 * cosP2_3 - 0.62205520790922510520e-5 * sinP1_2 * sinP2_3) + 0.57375445058921468522e-4 * cosP2_3 * t3) + 0.23716701826604443010e-8 * t14 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.13213591017679618247e-7 * t13 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + (t20 - 0.55293796258597787128e-7 * cosP2_2 * t11) * t7 * cosP1_5 + t5 * t12 * (0.36794768833846321586e-6 * sinP1_3 * sinP2_4 + 0.14433307111619275318e-6 * cosP1_3 * cosP2_4) + t27 + t28 + t26;
    t10 = t10 * (0.12164635176891513168e-5 * cosP2_2 * sinP1_4 + 0.94812597702242676163e-6 * cosP1_4 * sinP2_2) - 0.13483229588846545103e-2 * sinP2_2 * t3;
    t10 = t11 * t10 + t8 * (t12 * (0.66230583900923378852e-5 * cosP1_2 * sinP2_4 - 0.25979952800914695572e-5 * cosP2_4 * sinP1_2) + 0.22042709249677482547e-3 * sinP1_2 * t2) - 0.42934006506675928825e-6 * t7 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.16100252440003473312e-5 * t5 * t6 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.56920084383850663218e-7 * t7 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.24394321878793141380e-4 * t5 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.77983768182125914366e-3 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.22022651696132697080e-8 * t9 * t12 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.16392984302548991006e-4 * t1 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.34883880286674192178e-6 * t9 * sinP1_6 * t2;
    bf[0] = t1 * ((-0.19261756555495064431e-3 * t18 - 0.26492233560369351538e-4 * sinP2_4 * t12) * cosP1_1 + (0.10391981120365878228e-4 * cosP2_4 * t12 + t19) * sinP1_1) + t4 * ((t17 - 0.61034593340740439718e-4 * sinP1_2 * t8) * cosP2_1 + (t16 + t15 + 0.15851430356839783268e-3 * cosP1_2 * t8) * sinP2_1) + t5 * (t11 * (-0.47406298851121338078e-5 * cosP1_3 * sinP2_2 - 0.60823175884457565838e-5 * cosP2_2 * sinP1_3) + 0.12245949583154156970e-4 * sinP1_3 * t2) + t6 * (t8 * (0.82696751169108749280e-5 * cosP1_2 * sinP2_3 + 0.62205520790922510520e-5 * cosP2_3 * sinP1_2) - 0.57375445058921468522e-4 * sinP2_3 * t3) + 0.13213591017679618247e-7 * t13 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4) - 0.23716701826604443010e-8 * t14 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t20 * t7 * sinP1_5 + t9 * t4 * (t21 * cosP2_1 - t22 * sinP2_1) + t25 + t24 + t23;
    bf[1] = t26;
    bf[2] = t10;
}

static void idsbf_7_4_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[42];
    t2 = LegP2[11];
    t3 = LegP1[40];
    t4 = LegP1[39];
    t5 = LegP2[12];
    t6 = LegP1[38];
    t7 = LegP2[13];
    t8 = LegP1[37];
    t9 = LegP2[14];
    t10 = LegP1[41];
    t11 = LegP1[43];
    t12 = LegP2[10];
    t13 = LegP1[36];
    t14 = LegP1[44] * t2;
    t15 = t10 * t9;
    t16 = t11 * t9;
    t17 = t1 * t7;
    t18 = -0.94013450492721355367e-6 * cosP1_4 * t3;
    t19 = 0.20917232108008392174e-7 * cosP1_6 * t1;
    t20 = -0.25531497448372832552e-2 * t13;
    t21 = 0.13417453614009746833e-5 * sinP1_4 * t3;
    t22 = sinP1_6 * t1;
    t23 = -0.12550339264805035304e-7 * t22;
    t24 = 0.11455036928967504948e-4 * t4;
    t25 = 0.75302035588830211826e-7 * t10;
    t26 = -0.48111155101663520778e-3 * t8;
    t27 = 0.12550339264805035305e-7 * t11;
    t28 = 0.53669814456038987340e-4 * t13;
    t29 = -0.18017723424527374319e-3 * t8;
    t30 = t10 * (0.40313210971797992189e-7 * cosP1_5 * sinP2_2 + 0.51722610303438933375e-7 * sinP1_5 * cosP2_2) + t29 * cosP1_1 * sinP2_2;
    t31 = (-0.10192396736265907460e-6 * cosP1_4 * sinP2_3 - 0.48680103815001349064e-7 * sinP1_4 * cosP2_3) * t7 * t3;
    t32 = (-0.13501122542441780402e-6 * sinP1_3 * cosP2_4 + 0.34418354650450172578e-6 * cosP1_3 * sinP2_4) * t9 * t4;
    t33 = (0.11363761734314377430e-4 * cosP2_1 * sinP1_2 + 0.79820157724160024540e-4 * cosP1_2 * sinP2_1) * t6 * t2;
    t34 = t3 * (0.10192396736265907460e-6 * cosP1_4 * cosP2_3 - 0.48680103815001349064e-7 * sinP1_4 * sinP2_3) + t6 * (0.32174506115227454144e-5 * cosP1_2 * cosP2_3 - 0.13006715238070672952e-5 * sinP1_2 * sinP2_3);
    t35 = t26 * cosP1_1 - t24 * cosP1_3 + t25 * cosP1_5 + t27 * cosP1_7;
    t36 = t6 * (0.11363761734314377430e-4 * sinP1_2 * sinP2_1 - 0.79820157724160024540e-4 * cosP1_2 * cosP2_1) + t20 * cosP2_1;
    t37 = t28 * t7 * cosP2_3;
    t29 = t12 * t35 + t2 * t36 + t2 * ((t18 + t19) * cosP2_1 + (-t21 + t23) * sinP2_1) + t5 * (t10 * (-0.51722610303438933375e-7 * cosP1_5 * cosP2_2 + 0.40313210971797992189e-7 * sinP1_5 * sinP2_2) + t4 * (-0.10344522060687786676e-5 * cosP1_3 * cosP2_2 + 0.80626421943595984381e-6 * sinP1_3 * sinP2_2)) + t7 * t34 + t9 * ((0.13501122542441780402e-6 * cosP1_3 * t4 + 0.56704714678255477700e-5 * t8 * cosP1_1) * cosP2_4 + (0.14455708953189072483e-4 * t8 * sinP1_1 + 0.34418354650450172578e-6 * t4 * sinP1_3) * sinP2_4) + 0.20917232108008392176e-8 * t14 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) - 0.47539163881837254938e-9 * t15 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.79231939803062091568e-10 * t16 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.22184943144857385640e-8 * t17 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t29 * sinP1_1 * t5 * sinP2_2 + t37;
    t34 = t9 * (-0.41302025580540207092e-5 * cosP1_2 * sinP2_4 + 0.16201347050930136484e-5 * cosP2_4 * sinP1_2) - 0.13746044314761005937e-3 * sinP1_2 * t12;
    t1 = t5 * (t3 * (-0.32250568777438393756e-6 * cosP1_4 * sinP2_2 - 0.41378088242751146704e-6 * cosP2_2 * sinP1_4) + 0.14414178739621899456e-2 * sinP2_2 * t13) + t6 * t34 + 0.41834464216016784350e-8 * t11 * t2 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + 0.10040271411844028244e-6 * t10 * t2 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.75302035588830211836e-6 * t4 * t7 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.31692775921224836624e-9 * t1 * t9 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.13310965886914431384e-7 * t10 * t7 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.11409399331640941187e-4 * t4 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.63828743620932081377e-3 * t8 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.13417453614009746835e-4 * t8 * t7 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.50201357059220141214e-7 * t22 * t12;
    bf[0] = t5 * t30 + t12 * (t26 * sinP1_1 + t24 * sinP1_3 + t25 * sinP1_5 - t27 * sinP1_7) + t2 * ((t21 + t23) * cosP2_1 + (t18 - t19 + t20) * sinP2_1) + t7 * (t6 * (0.32174506115227454144e-5 * cosP1_2 * sinP2_3 + 0.13006715238070672952e-5 * cosP2_3 * sinP1_2) - t28 * sinP2_3) - 0.20917232108008392176e-8 * t14 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) - 0.47539163881837254938e-9 * t15 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.79231939803062091568e-10 * t16 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.22184943144857385640e-8 * t17 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + (-0.80626421943595984381e-6 * cosP1_3 * sinP2_2 - 0.10344522060687786676e-5 * cosP2_2 * sinP1_3) * t5 * t4 + (0.56704714678255477700e-5 * cosP2_4 * sinP1_1 - 0.14455708953189072483e-4 * cosP1_1 * sinP2_4) * t9 * t8 + t31 + t32 + t33;
    bf[1] = t29;
    bf[2] = t1;
}

static void idsbf_7_4_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[40];
    t2 = LegP2[11];
    t3 = LegP1[39];
    t4 = LegP2[12];
    t5 = LegP1[38];
    t6 = LegP2[13];
    t7 = LegP1[37];
    t8 = LegP2[14];
    t9 = LegP1[44];
    t10 = LegP1[43];
    t11 = LegP1[41];
    t12 = LegP1[42];
    t13 = LegP2[10];
    t14 = LegP1[36];
    t15 = t9 * t2;
    t16 = t10 * t4;
    t17 = t11 * t8;
    t18 = t10 * t8;
    t19 = t12 * t6;
    t20 = -0.23153544492485377178e-2 * t13;
    t21 = 0.17474373201875756361e-4 * cosP2_2 * t4;
    t22 = 0.40890033292389269884e-2 * t14;
    t23 = t1 * (-0.10401412620164140691e-5 * cosP1_4 * sinP2_1 - 0.11233525629777271947e-5 * sinP1_4 * cosP2_1) + t22 * sinP2_1;
    t24 = 0.36404944170574492417e-6 * sinP1_5 * t11 + 0.86678438501367839100e-8 * sinP1_7 * t10;
    t23 = t13 * t24 + t2 * t23 + t3 * (t4 * (0.37445085432590906486e-5 * cosP2_2 * sinP1_3 + 0.20802825240328281368e-6 * cosP1_3 * sinP2_2) - 0.33076492132121967402e-4 * sinP1_3 * t13) + t6 * (t5 * (0.13937892911019948526e-5 * cosP2_3 * sinP1_2 - 0.73433973098358833282e-5 * cosP1_2 * sinP2_3) - 0.31453871763376361448e-3 * sinP2_3 * t14) + t7 * ((0.19294620410404480981e-4 * cosP2_4 * t8 + t20 + t21) * sinP1_1 - 0.11285532692878092649e-4 * cosP1_1 * t8 * sinP2_4) - 0.17335687700273567818e-9 * t15 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) - 0.69342750801094271278e-9 * t16 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.30337453475478743681e-8 * t17 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.72232032084473199242e-10 * t18 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.86678438501367839096e-9 * t19 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t24 = sinP1_6 * t12;
    t25 = sinP1_4 * t1;
    t26 = sinP1_2 * t5;
    t27 = cosP1_4 * t1;
    t28 = cosP1_2 * t5;
    t29 = t3 * (-0.27563743443434972832e-6 * cosP1_3 * cosP2_4 - 0.16122189561254418072e-6 * sinP1_3 * sinP2_4) + t7 * (0.11285532692878092649e-4 * sinP1_1 * sinP2_4 + 0.19294620410404480981e-4 * cosP1_1 * cosP2_4);
    t15 = t2 * ((-0.10401412620164140691e-5 * t27 + 0.15602118930246211038e-7 * cosP1_6 * t12) * cosP2_1 + (-0.26003531550410351729e-7 * t24 + 0.11233525629777271947e-5 * t25 + 0.54045739974372875030e-4 * t26) * sinP2_1) + t4 * (t11 * (0.3467137540054713566e-8 * sinP1_5 * sinP2_2 - 0.62408475720984844146e-7 * cosP1_5 * cosP2_2) + t3 * (-0.20802825240328281368e-6 * sinP1_3 * sinP2_2 + 0.37445085432590906486e-5 * cosP1_3 * cosP2_2)) + t6 * ((0.90145576041422552660e-7 * t27 - 0.73433973098358833282e-5 * t28) * cosP2_3 + (0.4e-26 * t25 - 0.13937892911019948526e-5 * t26) * sinP2_3) + t8 * t29 + 0.72232032084473199242e-10 * t18 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.17335687700273567818e-9 * t15 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) - 0.86678438501367839096e-9 * t19 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t14 = t13 * (0.36404944170574492417e-6 * cosP1_5 * t11 + 0.33076492132121967402e-4 * cosP1_3 * t3 - 0.86678438501367839100e-8 * cosP1_7 * t10) - 0.69342750801094271278e-9 * t16 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.30337453475478743681e-8 * t17 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t15 + 0.31453871763376361448e-3 * t14 * t6 * cosP2_3 + (t20 - t21) * t7 * cosP1_1 + (-0.59537685837819541319e-4 * t28 + t22) * t2 * cosP2_1;
    t15 = (0.2773710032043770848e-7 * cosP1_4 * sinP2_2 + 0.49926780576787875316e-6 * cosP2_2 * sinP1_4) * t4 * t1;
    t16 = t5 * (0.11025497377373989133e-5 * cosP2_4 * sinP1_2 - 0.64488758245017672286e-6 * cosP1_2 * sinP2_4) * t8;
    t7 = t13 * (0.10401412620164140692e-6 * t24 - 0.13230596852848786960e-3 * t26) - 0.69342750801094271278e-9 * t9 * t4 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) - 0.24269962780382994946e-8 * t10 * t2 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.20802825240328281384e-6 * t11 * t2 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.27043672812426765794e-6 * t3 * t6 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.86678438501367839100e-9 * t12 * t8 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.24963390288393937671e-6 * t3 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.11358342581219241635e-3 * t7 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.87371866009378781808e-5 * t7 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.86678438501367839100e-8 * t11 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + t15 + t16;
    bf[0] = t2 * (t12 * (-0.26003531550410351729e-7 * sinP1_6 * cosP2_1 - 0.15602118930246211038e-7 * cosP1_6 * sinP2_1) + t5 * (0.54045739974372875030e-4 * cosP2_1 * sinP1_2 + 0.59537685837819541319e-4 * cosP1_2 * sinP2_1)) + t23 + (0.27563743443434972832e-6 * sinP1_3 * cosP2_4 - 0.16122189561254418072e-6 * cosP1_3 * sinP2_4) * t8 * t3 + (-0.90145576041422552660e-7 * cosP1_4 * sinP2_3 + 0.4e-26 * sinP1_4 * cosP2_3) * t6 * t1 + (0.3467137540054713566e-8 * cosP1_5 * sinP2_2 + 0.62408475720984844146e-7 * sinP1_5 * cosP2_2) * t11 * t4;
    bf[1] = t14;
    bf[2] = t7;
}

static void idsbf_7_4_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t5, t6, t7, t8, t9;
    t1 = LegP1[43];
    t2 = LegP2[10];
    t3 = LegP1[37];
    t4 = LegP1[36];
    t5 = LegP2[11];
    t6 = LegP1[41];
    t7 = LegP1[39];
    t8 = LegP2[13];
    t9 = LegP1[42];
    t10 = LegP1[40];
    t11 = LegP2[12];
    t12 = LegP1[38];
    t13 = LegP2[14];
    t14 = LegP1[44];
    t15 = t6 * t13;
    t16 = t1 * t13;
    t17 = t9 * t8;
    t18 = t14 * t5;
    t14 = t14 * t8;
    t19 = t10 * cosP1_4;
    t20 = t19 * t8;
    t21 = t6 * cosP1_5;
    t22 = -0.55620596009269299084e-8;
    t23 = 0.15891598859791228311e-9;
    t24 = 0.26485998099652047182e-10;
    t25 = 0.13507859030822544062e-9;
    t26 = 0.17798590722966175708e-7;
    t27 = 0.76409349973693792307e-4 * cosP1_2 * t12;
    t28 = 0.17086647094047528679e-5 * t19;
    t29 = 0.20023414563336947670e-7 * cosP1_6 * t9;
    t30 = sinP1_2 * t12;
    t31 = 0.53983125662756410918e-4 * t30;
    t10 = sinP1_4 * t10;
    t32 = 0.72084292428013011626e-6 * t10;
    t33 = sinP1_6 * t9;
    t34 = -0.33372357605561579452e-7 * t33;
    t35 = sinP1_5 * t6;
    t36 = sinP1_3 * t7;
    t37 = cosP1_3 * t7;
    t38 = cosP1_1 * t3;
    t39 = sinP1_1 * t3;
    t40 = 0.12334423371015559762e-2 * t39 - 0.93442601295572422456e-6 * t35 - 0.11213112155468690695e-4 * t36 + 0.44496476807415439266e-8 * sinP1_7 * t1;
    t41 = -0.27392031122644944412e-3 * sinP2_3 * t4 - 0.40046829126673895344e-7 * t10 * cosP2_3;
    t42 = t7 * (0.93442601295572422471e-7 * cosP1_3 * sinP2_4 - 0.66744715211123158907e-7 * cosP2_4 * sinP1_3) * t13;
    t40 = t2 * t40 + t8 * t41 + t11 * ((0.6e-25 * t36 - 0.6e-27 * t35) * cosP2_2 + (-0.27765801527827234104e-5 * t37 + 0.17940979448749905111e-3 * t38) * sinP2_2) + t5 * ((t31 + t32 + t34) * cosP2_1 + (t28 + t29 - t27) * sinP2_1) + t22 * t15 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t24 * t16 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t23 * t17 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.11124119201853859817e-9 * t18 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + t25 * t14 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t26 * (t21 * t11 * sinP2_2 + t20 * sinP2_3) + (0.45119427482719255420e-5 * cosP1_2 * sinP2_3 - 0.15751752789825065500e-5 * cosP2_3 * sinP1_2) * t12 * t8 + t3 * t13 * (-0.10278686142512966471e-4 * cosP1_1 * sinP2_4 + 0.73419186732235474788e-5 * sinP1_1 * cosP2_4) + 0.10091800939921821626e-2 * t4 * t5 * sinP2_1 + t42;
    t10 = t11 * ((0.6e-25 * t37 + 0.6e-27 * t21) * cosP2_2 + (0.17940979448749905111e-3 * t39 + 0.27765801527827234104e-5 * t36) * sinP2_2) + t13 * ((0.66744715211123158907e-7 * t37 + 0.73419186732235474788e-5 * t38) * cosP2_4 + (0.93442601295572422471e-7 * t36 + 0.10278686142512966471e-4 * t39) * sinP2_4) + t22 * t15 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t5 * ((t28 - t29 + t27) * cosP2_1 + (t31 - t32 + t34) * sinP2_1) + t8 * (t12 * (0.15751752789825065500e-5 * sinP1_2 * sinP2_3 + 0.45119427482719255420e-5 * cosP1_2 * cosP2_3) - 0.40046829126673895344e-7 * t10 * sinP2_3) + t26 * (t35 * t11 * sinP2_2 - t20 * cosP2_3) - 0.11124119201853859817e-9 * t18 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1);
    t12 = t12 * (-0.14683837346447094958e-5 * cosP2_4 * sinP1_2 + 0.20557372285025932942e-5 * cosP1_2 * sinP2_4) * t13;
    t3 = t2 * (0.13348943042224631780e-6 * t33 - 0.24668846742031119528e-3 * t30) + 0.35597181445932351414e-8 * t1 * t5 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.18688520259114484493e-6 * t6 * t5 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.26697886084449263560e-6 * t7 * t8 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.79457994298956141542e-9 * t9 * t13 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.44496476807415439272e-8 * t6 * t8 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.11853861421495473021e-4 * t7 * t5 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.22426224310937381394e-3 * t3 * t5 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.60871180272544320924e-4 * t3 * t8 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + (0.16146881503874914602e-2 * t4 + 0.46276335879712056836e-6 * t19) * t11 * sinP2_2 + t12;
    bf[0] = t40;
    bf[1] = t2 * (-0.44496476807415439266e-8 * cosP1_7 * t1 - 0.93442601295572422456e-6 * t21 + 0.11213112155468690695e-4 * t37 + 0.12334423371015559762e-2 * t38) - t23 * t17 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - t24 * t16 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t25 * t14 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t4 * (0.10091800939921821626e-2 * cosP2_1 * t5 + 0.27392031122644944412e-3 * cosP2_3 * t8) + t10;
    bf[2] = t3;
}

static void idsbf_7_4_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t5, t6, t7, t8, t9;
    t1 = LegP1[58];
    t2 = LegP2[10];
    t3 = LegP1[60];
    t4 = LegP1[55];
    t5 = LegP2[13];
    t6 = LegP1[56];
    t7 = LegP2[11];
    t8 = LegP1[62];
    t9 = LegP2[14];
    t10 = LegP1[57];
    t11 = LegP2[12];
    t12 = LegP1[61];
    t13 = LegP1[63];
    t14 = LegP1[59];
    t15 = t3 * t9;
    t16 = t8 * t9;
    t17 = t12 * t5;
    t18 = t13 * t5;
    t19 = LegP1[65] * t5;
    t13 = t13 * t7;
    t20 = 0.50253648058675090348e-9;
    t21 = 0.15076094417602527106e-9;
    t22 = 0.10553266092321768975e-9;
    t23 = 0.25126824029337545176e-10;
    t24 = 0.41878040048895908626e-12;
    t25 = 0.83756080097791817248e-12;
    t26 = sinP1_3 * t1;
    t27 = sinP1_1 * t6;
    t28 = 0.95739229989543088134e-3 * t4;
    t29 = cosP1_2 * t10;
    t30 = 0.36877333033009189502e-4 * t29;
    t31 = cosP1_4 * t14;
    t32 = 0.65852380416087838404e-6 * t31;
    t33 = 0.50655677243144491078e-8 * cosP1_6 * t12;
    t34 = sinP1_2 * t10;
    t35 = 0.15601948590888503249e-4 * t34;
    t36 = sinP1_6 * t12;
    t37 = -0.75983515864716736618e-8 * t36;
    t38 = sinP1_4 * t14;
    t39 = 0.27860622483729470096e-6 * t38;
    t40 = cosP1_3 * t1;
    t41 = cosP1_1 * t6;
    t42 = 0.25986362425733123920e-3 * t4 * t5;
    t29 = 0.34783565040292550540e-5 * t29;
    t31 = 0.60304377670410108434e-8 * t31;
    t34 = 0.22963907016892169288e-5 * t34;
    t38 = -0.15076094417602527107e-7 * t38;
    t43 = (-0.63319596553930613842e-7 * t26 + 0.45590109518830041968e-5 * t27) * cosP2_4 + (-0.63826153326362058756e-5 * t41 + 0.88647435175502859382e-7 * t40) * sinP2_4;
    t43 = t5 * ((-t34 + t38) * cosP2_3 + (-t31 + t29) * sinP2_3) + t9 * t43 + t2 * (0.42213064369287075892e-8 * sinP1_7 * t8 - 0.84426128738574151782e-7 * sinP1_5 * t3 - 0.10637692221060343125e-4 * t26 + 0.76591383991634470498e-3 * t27) + t20 * t15 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4) + t23 * t16 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t21 * t17 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t25 * t18 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - t24 * t19 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t22 * t13 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + (t35 - t39 + t37) * t7 * cosP2_1 + (-t33 - t30 + t32 + t28) * t7 * sinP2_1 + (-0.70917948140402287504e-6 * t40 + 0.17020307553696548999e-3 * t41) * t11 * sinP2_2 - t42 * sinP2_3 + (0.16885225747714830358e-7 * cosP1_5 * sinP2_2 + 0.2e-27 * sinP1_5 * cosP2_2) * t11 * t3;
    t26 = t3 * (-0.2e-27 * cosP1_5 * cosP2_2 + 0.16885225747714830358e-7 * sinP1_5 * sinP2_2) + 0.70917948140402287504e-6 * t26 * sinP2_2;
    t39 = t39 * t7 * sinP2_1;
    t44 = (0.63826153326362058756e-5 * sinP1_1 * sinP2_4 + 0.45590109518830041968e-5 * cosP1_1 * cosP2_4) * t9 * t6;
    t4 = t14 * (0.6e-26 * cosP2_2 * sinP1_4 - 0.20262270897257796428e-6 * cosP1_4 * sinP2_2) - 0.17020307553696549000e-2 * sinP2_2 * t4;
    t14 = t9 * (-0.14183589628080457500e-5 * cosP1_2 * sinP2_4 + 0.10131135448628898216e-5 * cosP2_4 * sinP1_2) + 0.17020307553696548999e-3 * sinP1_2 * t2;
    t4 = t10 * t14 + t11 * t4 + 0.19147845997908617626e-3 * t6 * t7 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.51972724851466247844e-4 * t6 * t5 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.83756080097791817250e-12 * LegP1[64] * t5 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) - 0.63319596553930613842e-9 * t8 * t7 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + 0.63319596553930613838e-7 * t3 * t7 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.14774572529250476564e-6 * t1 * t5 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.20101459223470036140e-9 * t12 * t9 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.15076094417602527105e-8 * t3 * t5 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.65599102029872115940e-5 * t1 * t7 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.33770451495429660718e-7 * t36 * t2;
    bf[0] = t43;
    bf[1] = t11 * t26 + t5 * ((t31 + t29) * cosP2_3 + (t34 + t38) * sinP2_3) + t2 * (0.76591383991634470498e-3 * t41 - 0.42213064369287075892e-8 * t8 * cosP1_7 - 0.84426128738574151782e-7 * t3 * cosP1_5 + 0.10637692221060343125e-4 * t40) - t20 * t15 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - t21 * t17 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - t22 * t13 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) - t23 * t16 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t24 * t19 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t25 * t18 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t7 * ((t33 + t30 + t32 + t28) * cosP2_1 + (t35 + t37) * sinP2_1) + t1 * t9 * (0.88647435175502859382e-7 * sinP1_3 * sinP2_4 + 0.63319596553930613842e-7 * cosP1_3 * cosP2_4) + t42 * cosP2_3 + 0.17020307553696548999e-3 * t27 * t11 * sinP2_2 + t39 + t44;
    bf[2] = t4;
}

static void idsbf_7_4_10_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t5, t6, t7, t8, t9;
    t1 = LegP1[56];
    t2 = LegP2[12];
    t3 = LegP1[63];
    t4 = LegP2[13];
    t5 = LegP1[61];
    t6 = LegP2[11];
    t7 = LegP1[59];
    t8 = LegP1[58];
    t9 = LegP1[57];
    t10 = LegP2[14];
    t11 = LegP1[65];
    t12 = LegP1[60];
    t13 = LegP1[62];
    t14 = LegP2[10];
    t15 = LegP1[55];
    t16 = LegP1[64];
    t17 = t3 * t4;
    t18 = t11 * t4;
    t19 = t3 * t6;
    t20 = t12 * t10;
    t21 = t13 * t10;
    t22 = t5 * t4;
    t23 = t16 * t10;
    t24 = t13 * t2;
    t25 = t16 * t2;
    t26 = -0.11412142965041581418e-8;
    t27 = 0.37089464636385139608e-9;
    t28 = 0.78348750740766241654e-10;
    t29 = 0.14265178706301976773e-10;
    t30 = 0.25604166908747137796e-11;
    t31 = -0.18288690649105098426e-12;
    t32 = 0.13826250130723454411e-9;
    t33 = cosP1_5 * t12;
    t34 = sinP1_5 * t12;
    t35 = sinP1_1 * t1;
    t36 = sinP1_2 * t9;
    t37 = t1 * (0.51765480489428613315e-5 * cosP2_4 * sinP1_1 - 0.41412384391542890651e-5 * cosP1_1 * sinP2_4) + t8 * (0.47931000453174641957e-7 * cosP2_4 * sinP1_3 - 0.38344800362539713565e-7 * cosP1_3 * sinP2_4);
    t38 = t5 * (-0.81851400773882850104e-8 * cosP1_6 * sinP2_1 + 0.24702900233559238544e-8 * sinP1_6 * cosP2_1) + t7 * (-0.30749580290728962607e-6 * cosP1_4 * sinP2_1 - 0.20684070195562287796e-6 * sinP1_4 * cosP2_1);
    t37 = t10 * t37 + t2 * ((0.26572946651240021500e-3 * t35 - 0.36870000348595878424e-8 * t34) * cosP2_2 + (0.10692300101092804744e-7 * t33 + 0.10478454099070948650e-5 * cosP1_3 * t8) * sinP2_2) + t4 * ((0.20706192195771445324e-5 * t36 - 0.37528393211963661975e-7 * sinP1_4 * t7) * cosP2_3 + (-0.29333772277342880876e-5 * cosP1_2 * t9 + 0.29232643133529589327e-7 * cosP1_4 * t7) * sinP2_3) + t6 * t38 + t28 * t19 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + t26 * t20 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t29 * t21 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t27 * t22 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t31 * t23 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t32 * t24 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t30 * t25 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2);
    t38 = 0.54866071947315295284e-13;
    t39 = 0.20849107339979812208e-11;
    t40 = -0.36132600341623960860e-6 * cosP2_2 * t2;
    t41 = 0.16104816152266679696e-4 * t14;
    t42 = cosP1_1 * t1;
    t43 = t7 * (-0.37528393211963661975e-7 * sinP1_4 * sinP2_3 - 0.29232643133529589327e-7 * cosP1_4 * cosP2_3) + t9 * (-0.29333772277342880876e-5 * cosP1_2 * cosP2_3 - 0.20706192195771445324e-5 * sinP1_2 * sinP2_3);
    t44 = t5 * (0.81851400773882850104e-8 * cosP1_6 * cosP2_1 + 0.24702900233559238544e-8 * sinP1_6 * sinP2_1) + t7 * (-0.30749580290728962607e-6 * cosP1_4 * cosP2_1 + 0.20684070195562287796e-6 * sinP1_4 * sinP2_1);
    t19 = t2 * ((0.36870000348595878424e-8 * t33 - 0.26572946651240021500e-3 * t42) * cosP2_2 + (-0.10478454099070948650e-5 * t8 * sinP1_3 + 0.10692300101092804744e-7 * t34) * sinP2_2) + t26 * t20 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t27 * t22 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - t28 * t19 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + t29 * t21 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - t30 * t25 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t31 * t23 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t32 * t24 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - t38 * t18 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t39 * t17 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t4 * t43 + t6 * t44 + (0.41412384391542890651e-5 * sinP1_1 * sinP2_4 + 0.51765480489428613315e-5 * cosP1_1 * cosP2_4) * t10 * t1;
    t19 = t14 * (-0.22122000209157527058e-8 * cosP1_7 * t13 + 0.17697600167326021646e-6 * t33 + 0.17393201444448014072e-2 * t42) + t6 * (t9 * (-0.49119689264413373078e-4 * sinP1_2 * sinP2_1 + 0.59587819763386714880e-4 * cosP1_2 * cosP2_1) - 0.59789129965290048374e-2 * t15 * cosP2_1) + t8 * ((-t41 - 0.47931000453174641957e-7 * cosP2_4 * t10 + t40) * cosP1_3 - 0.38344800362539713565e-7 * sinP1_3 * sinP2_4 * t10) + t19 + 0.27521980460212879410e-3 * t15 * t4 * cosP2_3;
    t20 = 0.64419264609066718787e-4 * t36 + 0.26546400250989032468e-7 * sinP1_6 * t5;
    t7 = (-0.29496000278876702742e-7 * cosP2_2 * sinP1_4 + 0.85538400808742437950e-7 * cosP1_4 * sinP2_2) * t7 * t2;
    t21 = t9 * (0.19172400181269856783e-6 * cosP2_4 * sinP1_2 - 0.15337920145015885426e-6 * cosP1_2 * sinP2_4) * t10;
    t1 = t14 * t20 + t31 * t11 * t10 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) - 0.98758929505167531496e-12 * t16 * t4 * (cosP1_9 * sinP2_3 - sinP1_9 * cosP2_3) + 0.10968825103707273832e-8 * t13 * t6 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.28574250270161805782e-7 * t12 * t6 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.24887250235302217940e-7 * t8 * t4 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.17118214447562372127e-9 * t5 * t10 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.37089464636385139608e-8 * t12 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.30196530285500024430e-6 * t8 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.10870750902780008796e-3 * t1 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.50039964473114326198e-5 * t1 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.40966667053995420476e-10 * t3 * t2 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + t7 + t21;
    bf[0] = t14 * (0.17393201444448014072e-2 * t35 + 0.22122000209157527058e-8 * sinP1_7 * t13 + 0.17697600167326021646e-6 * t34) + t15 * (-0.27521980460212879410e-3 * sinP2_3 * t4 - 0.59789129965290048374e-2 * sinP2_1 * t6) + t39 * t17 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t38 * t18 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t37 + (t41 + t40) * t8 * sinP1_3 + t6 * (-0.59587819763386714880e-4 * cosP1_2 * sinP2_1 - 0.49119689264413373078e-4 * cosP2_1 * sinP1_2) * t9;
    bf[1] = t19;
    bf[2] = t1;
}

static void idsbf_7_4_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t6, t7, t8, t9;
    t1 = LegP1[58];
    t2 = LegP2[10];
    t3 = LegP1[60];
    t4 = LegP1[55];
    t5 = LegP2[13];
    t6 = LegP1[56];
    t7 = LegP2[11];
    t8 = LegP1[62];
    t9 = LegP1[64];
    t10 = LegP2[14];
    t11 = LegP2[12];
    t12 = LegP1[63];
    t13 = LegP1[61];
    t14 = LegP1[59];
    t15 = LegP1[57];
    t16 = LegP1[65];
    t17 = t9 * t10;
    t18 = t8 * t11;
    t19 = t9 * t11;
    t20 = t12 * t5;
    t21 = t16 * t5;
    t22 = t12 * t7;
    t23 = t3 * t10;
    t24 = t8 * t10;
    t25 = t13 * t5;
    t26 = -0.73856985813422648012e-9;
    t27 = -0.20001541180693870967e-9;
    t28 = 0.13033585731780467298e-9;
    t29 = 0.14036169249609734013e-10;
    t30 = -0.10582826021531148660e-10;
    t31 = 0.27153303607875973535e-11;
    t32 = -0.73105048175050697985e-12;
    t33 = 0.58484038540040558386e-12;
    t34 = 0.27849542161924075424e-13;
    t35 = -0.20548951781428650597e-6 * cosP1_4 * t14;
    t36 = 0.38739827128922865875e-8 * cosP1_6 * t13;
    t37 = 0.36418132445683418996e-2 * t4;
    t38 = 0.40761035500866667575e-6 * sinP1_4 * t14;
    t39 = sinP1_6 * t13;
    t40 = -0.47161528678688706283e-8 * t39;
    t41 = 0.10116147901578727497e-3 * t6;
    t42 = 0.35090423124024335032e-9 * t8;
    t43 = -0.95445950897346191280e-7 * t3;
    t44 = 0.13794747138516446587e-4 * t1 * sinP1_3 + t43 * sinP1_5 + t42 * sinP1_7 - 0.21519805536085656674e-2 * t6 * sinP1_1;
    t45 = -0.55470940874457668821e-6 * cosP2_3 * sinP1_2 * t15 - 0.86709839156389092846e-4 * sinP2_3 * t4;
    t46 = t1 * sinP1_3;
    t47 = (-0.75795313947892563666e-8 * t46 + 0.11824068975871239931e-5 * t6 * sinP1_1) * cosP2_4 + (-0.13794747138516446587e-5 * t6 * cosP1_1 + 0.88427866272541324278e-8 * cosP1_3 * t1) * sinP2_4;
    t48 = t14 * (0.30719158986288732154e-7 * cosP1_4 * sinP2_3 - 0.31842052526257510874e-7 * sinP1_4 * cosP2_3) + 0.75907603301889441543e-6 * cosP1_2 * sinP2_3 * t15;
    t49 = -0.83381582703921632707e-4 * sinP1_2;
    t50 = 0.28202594149855846353e-4 * cosP1_2;
    t51 = (0.68777229323087696656e-8 * sinP1_5 * cosP2_2 - 0.58951910848360882848e-8 * cosP1_5 * sinP2_2) * t11 * t3;
    t52 = t15 * t7;
    t53 = t52 * (t49 * cosP2_1 + t50 * sinP2_1);
    t54 = (0.55470940874457668821e-6 * sinP1_2 * sinP2_3 + 0.75907603301889441543e-6 * cosP1_2 * cosP2_3) * t15 * t5;
    t46 = (-0.12379901278155785400e-5 * t46 + t41 * sinP1_1) * t11 * sinP2_2;
    t42 = t2 * (t43 * cosP1_5 - t42 * cosP1_7) + t26 * t23 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t27 * t18 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - t28 * t25 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - t29 * t22 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + t30 * t20 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - t31 * t24 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t32 * t17 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - t33 * t19 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - t34 * t21 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t6 * (t10 * (0.11824068975871239931e-5 * cosP1_1 * cosP2_4 + 0.13794747138516446587e-5 * sinP1_1 * sinP2_4) - 0.21519805536085656674e-2 * cosP1_1 * t2) + t7 * ((t35 - t36 + t37) * cosP2_1 + (-t38 + t40) * sinP2_1) + t54 + t46;
    t42 = t1 * ((-0.13794747138516446587e-4 * t2 + 0.75795313947892563666e-8 * cosP2_4 * t10 - 0.14443218157848416300e-5 * cosP2_2 * t11) * cosP1_3 + 0.88427866272541324278e-8 * sinP1_3 * sinP2_4 * t10) + t5 * (t14 * (-0.30719158986288732154e-7 * cosP1_4 * cosP2_3 - 0.31842052526257510874e-7 * sinP1_4 * sinP2_3) + 0.86709839156389092846e-4 * cosP2_3 * t4) + t42 + t3 * t11 * (-0.58951910848360882848e-8 * sinP1_5 * sinP2_2 - 0.68777229323087696656e-8 * cosP1_5 * cosP2_2) + t52 * (-t50 * cosP2_1 + t49 * sinP2_1);
    t43 = t10 * (-0.19706781626452066552e-6 * cosP2_4 * sinP1_2 + 0.22991245230860744312e-6 * cosP1_2 * sinP2_4) + 0.35866342560142761126e-3 * sinP1_2 * t2;
    t4 = t14 * (0.20633168796926308998e-6 * cosP2_2 * sinP1_4 - 0.17685573254508264855e-6 * cosP1_4 * sinP2_2) + 0.11127762691736600247e-2 * sinP2_2 * t4;
    t14 = 0.11930743862168273911e-7 * t39 * t2;
    t3 = t11 * t4 + t15 * t43 - 0.11139816864769630169e-11 * t9 * t5 * (cosP1_9 * sinP2_3 - sinP1_9 * cosP2_3) + 0.50530209298595042442e-9 * t8 * t7 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.13474722479625344651e-7 * t3 * t7 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.15720509559562902094e-7 * t1 * t5 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.92321232266778310026e-10 * t13 * t10 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.41707474341697495348e-8 * t3 * t5 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.85833982195213445435e-5 * t1 * t7 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.66214786264878943620e-3 * t6 * t7 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.15765425301161653243e-4 * t6 * t5 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.73105048175050697988e-13 * t16 * t10 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) + 0.22223934645215412188e-10 * t12 * t11 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + t14;
    bf[0] = t10 * t47 + t5 * t48 + t11 * (t1 * (0.12379901278155785400e-5 * cosP1_3 * sinP2_2 - 0.14443218157848416300e-5 * cosP2_2 * sinP1_3) + t41 * cosP1_1 * sinP2_2) + t2 * t44 + t5 * t45 + t7 * ((t38 + t40) * cosP2_1 + (t35 + t36 + t37) * sinP2_1) + t32 * t17 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t27 * t18 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t33 * t19 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t30 * t20 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t34 * t21 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t29 * t22 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + t26 * t23 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t31 * t24 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t28 * t25 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t51 + t53;
    bf[1] = t42;
    bf[2] = t3;
}

static void idsbf_7_4_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t5, t6, t7, t8, t9;
    t1 = LegP1[84];
    t2 = LegP2[13];
    t3 = LegP1[87];
    t4 = LegP2[14];
    t5 = LegP1[86];
    t6 = LegP1[85];
    t7 = LegP2[12];
    t8 = LegP2[11];
    t9 = LegP1[78];
    t10 = LegP2[10];
    t11 = LegP1[81];
    t12 = LegP1[83];
    t13 = LegP1[79];
    t14 = LegP1[82];
    t15 = LegP1[80];
    t16 = LegP1[88];
    t17 = t6 * t7;
    t18 = LegP1[89] * t4;
    t19 = t16 * t2;
    t20 = t3 * t7;
    t21 = t5 * t8;
    t22 = t12 * t4;
    t23 = t6 * t4;
    t24 = t1 * t2;
    t25 = t3 * t4;
    t26 = t5 * t2;
    t27 = 0.12478708290872848362e-9;
    t28 = -0.10918869754513742317e-9;
    t29 = 0.13438608928632298236e-10;
    t30 = -0.11198840773860248530e-10;
    t31 = 0.25997308939318434086e-11;
    t32 = 0.55994203869301242652e-12;
    t33 = -0.31996687925314995800e-12;
    t34 = 0.26663906604429163168e-13;
    t35 = -0.99989649766609361882e-14;
    t36 = 0.16664941627768226980e-14;
    t37 = sinP1_6 * t1;
    t38 = sinP1_4 * t14;
    t39 = cosP1_4 * t14;
    t40 = t11 * (-0.47411412300214748174e-6 * cosP2_2 * sinP1_3 + 0.40638353400184069862e-6 * cosP1_3 * sinP2_2) + t12 * (0.65849183750298261352e-8 * cosP2_2 * sinP1_5 - 0.56442157500255652588e-8 * cosP1_5 * sinP2_2);
    t41 = t15 * (0.67730589000306783110e-6 * cosP1_2 * sinP2_3 - 0.58054790571691528378e-6 * cosP2_3 * sinP1_2) - 0.75256210000340870117e-8 * t38 * cosP2_3;
    t42 = (-0.93129559875421826764e-6 * cosP1_1 * sinP2_4 + 0.79825337036075851512e-6 * cosP2_4 * sinP1_1) * t13 * t4;
    t38 = t2 * t41 + t7 * t40 + t8 * ((0.31607608200143165452e-6 * t38 - 0.80631653571793789418e-9 * t37) * cosP2_1 + (-0.28284271247461900976e-28 * cosP1_6 * t1 - 0.27092235600122713244e-6 * t39) * sinP2_1) + t30 * t17 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t36 * t18 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) + t34 * t19 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t32 * t20 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t29 * t21 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + t28 * t22 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t31 * t23 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t27 * t24 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t35 * t25 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t33 * t26 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t42;
    t40 = sinP1_1 * t13;
    t41 = 0.83018350517518885586e-4 * t9;
    t42 = t1 * (0.28284271247461900976e-28 * cosP1_6 * cosP2_1 - 0.80631653571793789418e-9 * sinP1_6 * sinP2_1) + t14 * (-0.27092235600122713244e-6 * cosP1_4 * cosP2_1 - 0.31607608200143165452e-6 * sinP1_4 * sinP2_1);
    t43 = t4 * (0.79825337036075851512e-6 * cosP1_1 * cosP2_4 + 0.93129559875421826764e-6 * sinP1_1 * sinP2_4) - 0.14528211340565804975e-2 * cosP1_1 * t10;
    t44 = t7 * (-0.40638353400184069862e-6 * sinP1_3 * sinP2_2 - 0.47411412300214748174e-6 * cosP1_3 * cosP2_2) - 0.13207464855059822705e-4 * cosP1_3 * t10;
    t17 = t11 * t44 + t13 * t43 + t2 * (t15 * (0.67730589000306783110e-6 * cosP1_2 * cosP2_3 + 0.58054790571691528378e-6 * sinP1_2 * sinP2_3) + t41 * cosP2_3) - t27 * t24 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t28 * t22 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - t29 * t21 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + t30 * t17 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - t31 * t23 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - t32 * t20 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t33 * t26 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - t34 * t19 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t35 * t25 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - t36 * t18 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) + t8 * t42;
    t17 = t10 * (-0.33596522321580745590e-9 * cosP1_7 * t6 - 0.14110539375063913148e-7 * cosP1_5 * t12) + t7 * (t12 * (-0.65849183750298261352e-8 * cosP1_5 * cosP2_2 - 0.56442157500255652588e-8 * sinP1_5 * sinP2_2) + 0.96854742270438699842e-4 * t40 * sinP2_2) + t8 * (0.34867707217357931946e-2 * cosP2_1 * t9 - 0.52829859420239290828e-4 * sinP1_2 * sinP2_1 * t15) + t17 + (0.72568488214614410472e-8 * cosP1_3 * cosP2_4 + 0.84663236250383478884e-8 * sinP1_3 * sinP2_4) * t11 * t4 + (-0.64505322857435031529e-8 * cosP1_4 * cosP2_3 - 0.75256210000340870117e-8 * sinP1_4 * sinP2_3) * t14 * t2;
    t14 = t14 * (0.90307452000409044140e-7 * cosP1_4 * sinP2_2 - 0.10535869400047721817e-6 * cosP2_2 * sinP1_4) - 0.11622569072452643981e-2 * sinP2_2 * t9;
    t18 = t4 * (-0.16932647250076695777e-6 * cosP1_2 * sinP2_4 + 0.14513697642922882094e-6 * cosP2_4 * sinP1_2) - 0.26414929710119645411e-3 * sinP1_2 * t10;
    t19 = -0.40315826785896894706e-8 * t37 * t10;
    t1 = t15 * t18 + t7 * t14 + 0.96757984286152547294e-8 * t11 * t2 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.31196770727182120908e-10 * t1 * t4 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.17470191607221987707e-8 * t12 * t2 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.52829859420239290822e-5 * t11 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.58112845362263219912e-3 * t13 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.13836391752919814263e-4 * t13 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.66659766511072907920e-14 * t16 * t4 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) - 0.15998343962657497901e-12 * t3 * t2 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) - 0.44795363095440994117e-11 * t5 * t7 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) - 0.13438608928632298236e-9 * t6 * t8 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + 0.56442157500255652588e-8 * t12 * t8 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + t19;
    bf[0] = t10 * (0.33596522321580745590e-9 * sinP1_7 * t6 - 0.14528211340565804975e-2 * t40 + 0.13207464855059822705e-4 * sinP1_3 * t11 - 0.14110539375063913148e-7 * sinP1_5 * t12) + t8 * (0.34867707217357931946e-2 * sinP2_1 * t9 - 0.52829859420239290828e-4 * cosP2_1 * sinP1_2 * t15) + t38 + (0.64505322857435031529e-8 * t39 - t41) * t2 * sinP2_3 + t11 * (-0.72568488214614410472e-8 * cosP2_4 * sinP1_3 + 0.84663236250383478884e-8 * cosP1_3 * sinP2_4) * t4 + 0.96854742270438699842e-4 * t13 * cosP1_1 * t7 * sinP2_2;
    bf[1] = t17;
    bf[2] = t1;
}

static void idsbf_7_6_1_0_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3;
    t1 = -0.32033649090562894972e-5 * LegP2[26];
    t2 = 0.32033649090562894970e-4 * LegP2[24];
    t3 = -0.23064227345205284380e-2 * LegP2[22];
    bf[0] = t3 * sinP2_1 + t2 * sinP2_3 + t1 * sinP2_5;
    bf[1] = t3 * cosP2_1 - t2 * cosP2_3 + t1 * cosP2_5;
    bf[2] = 0.53389415150938158287e-6 * LegP2[27] * sinP2_6 + 0.57660568363013210952e-3 * LegP2[23] * sinP2_2;
}

static void idsbf_7_6_1_2_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[3];
    t2 = LegP2[26];
    t3 = LegP1[4];
    t4 = LegP2[27];
    t5 = LegP1[5];
    t6 = LegP2[22];
    t7 = LegP2[23];
    t8 = LegP2[24];
    t9 = t5 * t2;
    t10 = t5 * t8;
    t5 = t5 * t6;
    t11 = 0.81544357793114294682e-3;
    t12 = 0.11325605249043652040e-4;
    t13 = 0.11325605249043652040e-5;
    t14 = 0.40772178896557147340e-3 * t7 * sinP2_2 + 0.37752017496812173466e-6 * t4 * sinP2_6;
    t4 = t1 * (-0.81544357793114294676e-3 * t7 * sinP2_2 - 0.75504034993624346926e-6 * t4 * sinP2_6) - 0.22651210498087304080e-5 * t3 * t2 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.16308871558622858937e-2 * t3 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.22651210498087304078e-4 * t3 * t8 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    bf[0] = t1 * (-0.16308871558622858936e-2 * sinP2_1 * t6 + 0.22651210498087304076e-4 * sinP2_3 * t8 - 0.22651210498087304079e-5 * sinP2_5 * t2) + t13 * t9 * (cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t12 * t10 * (-cosP1_2 * sinP2_3 + cosP2_3 * sinP1_2) + t11 * t5 * (cosP1_2 * sinP2_1 + cosP2_1 * sinP1_2) + t3 * cosP1_1 * t14;
    bf[1] = t1 * (-0.22651210498087304079e-5 * cosP2_5 * t2 - 0.16308871558622858936e-2 * cosP2_1 * t6 - 0.22651210498087304076e-4 * cosP2_3 * t8) - t11 * t5 * (cosP1_2 * cosP2_1 - sinP1_2 * sinP2_1) - t12 * t10 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - t13 * t9 * (cosP1_2 * cosP2_5 - sinP1_2 * sinP2_5) + t3 * sinP1_1 * t14;
    bf[2] = t4;
}

static void idsbf_7_6_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[4];
    t2 = LegP2[27];
    t3 = LegP1[5];
    t4 = LegP2[26];
    t5 = LegP2[24];
    t6 = LegP2[22];
    t7 = LegP2[21];
    t8 = LegP2[25];
    t9 = LegP1[3];
    t10 = t9 * t4;
    t11 = 0.52598417124264027532e-6;
    t12 = -0.48199276782961945228e-2 * t7 + 0.13388687995267207009e-4 * cosP2_4 * t8;
    t13 = t4 * sinP2_5;
    t14 = t5 * sinP2_3;
    t15 = t6 * sinP2_1;
    t16 = cosP2_5 * t4;
    t17 = cosP2_3 * t5;
    t18 = cosP2_1 * t6;
    t19 = LegP2[23] * sinP2_2;
    t20 = -0.12049819195740486307e-3 * t19;
    t21 = 0.6375565712032003342e-6 * sinP2_4 * t8;
    t22 = 0.53076584552666427782e-4 * t5;
    t23 = 0.20312552358533962632e-2 * t6;
    t4 = t3 * (t8 * (-0.3187782856016001670e-6 * cosP1_2 * sinP2_4 - 0.66943439976336035042e-5 * cosP2_4 * sinP1_2) + 0.24099638391480972612e-2 * sinP1_2 * t7) + t9 * (-0.36149457587221458920e-3 * t19 + 0.15779525137279208259e-5 * t2 * sinP2_6) + 0.35065611416176018356e-6 * t1 * t4 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.13541701572355975088e-2 * t1 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.35384389701777618520e-4 * t1 * t5 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    bf[0] = t1 * ((t20 + t21) * cosP1_1 + sinP1_1 * t12) + t3 * ((-0.24147455134321212640e-4 * t14 - 0.10730077093349861616e-2 * t15 + 0.34268665702172017934e-6 * t13) * cosP1_2 + (-0.15301357708876808009e-4 * t17 - 0.25502262848128013346e-6 * t16 + 0.73446517002608678444e-3 * t18) * sinP1_2) + t9 * (t23 * sinP2_1 + t22 * sinP2_3) + t11 * (t1 * cosP1_1 * t2 * sinP2_6 - t10 * sinP2_5);
    bf[1] = t1 * (cosP1_1 * t12 + (t20 - t21) * sinP1_1) + t11 * (t1 * sinP1_1 * t2 * sinP2_6 - t10 * cosP2_5) + t3 * ((0.10730077093349861616e-2 * t18 - 0.34268665702172017934e-6 * t16 - 0.24147455134321212640e-4 * t17) * cosP1_2 + (-0.25502262848128013346e-6 * t13 + 0.15301357708876808009e-4 * t14 + 0.73446517002608678444e-3 * t15) * sinP1_2) + t9 * (t23 * cosP2_1 - t22 * cosP2_3);
    bf[2] = t4;
}

static void idsbf_7_6_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[12];
    t2 = LegP2[24];
    t3 = LegP1[11];
    t4 = LegP2[25];
    t5 = LegP1[14];
    t6 = LegP1[13];
    t7 = LegP2[26];
    t8 = LegP2[22];
    t9 = LegP2[21];
    t10 = LegP1[10];
    t11 = t5 * t7;
    t12 = t5 * t8;
    t5 = t5 * t2;
    t13 = 0.26088623836301586002e-4;
    t14 = 0.56939456785578858340e-6;
    t15 = 0.86271904220574027786e-8;
    t16 = -0.12522539441424761280e-2 * t9 + 0.34784831781735448002e-5 * cosP2_4 * t4;
    t17 = cosP2_5 * t7;
    t18 = cosP2_3 * t2;
    t19 = cosP2_1 * t8;
    t20 = sinP2_5 * t7;
    t21 = sinP2_3 * t2;
    t22 = sinP2_1 * t8;
    t23 = sinP2_2 * LegP2[23];
    t24 = -0.10435449534520634401e-3 * t23;
    t25 = 0.16564205610350213340e-6 * sinP2_4 * t4;
    t26 = sinP2_6 * LegP2[27];
    t27 = 0.45551565428463086670e-6 * t26;
    t28 = t1 * ((-0.55214018701167377780e-7 * t17 - 0.49692616831050640002e-5 * t18 + 0.19877046732420256001e-3 * t19) * cosP1_2 + (0.20705257012937766672e-7 * t20 - 0.26916834116819096666e-5 * t21 - 0.94415971978996216006e-4 * t22) * sinP1_2) + t10 * (-0.45965670568721842004e-4 * t18 + 0.17591186358191926562e-2 * t19 - 0.45551565428463086674e-6 * t17) + t13 * t12 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) - t14 * t5 * (cosP1_4 * cosP2_3 - sinP1_4 * sinP2_3) - t15 * t11 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t3 * (cosP1_1 * t16 + (t24 - t25 + t27) * sinP1_1) + t6 * (t4 * (-0.2760700935058368888e-7 * sinP1_3 * sinP2_4 + 0.57974719636225746676e-6 * cosP1_3 * cosP2_4) - 0.20870899069041268802e-3 * cosP1_3 * t9);
    t2 = t1 * (t4 * (0.11042803740233475556e-6 * cosP1_2 * sinP2_4 + 0.23189887854490298670e-5 * cosP2_4 * sinP1_2) - 0.83483596276165075210e-3 * sinP1_2 * t9) + t10 * (-0.18220626171385234667e-5 * t26 + 0.41741798138082537604e-3 * t23) - 0.11387891357115771668e-5 * t6 * t2 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.22775782714231543334e-6 * t3 * t7 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) + 0.52177247672603172010e-4 * t6 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.87955931790959632802e-3 * t3 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.22982835284360921000e-4 * t3 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.17254380844114805557e-7 * t6 * t7 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    bf[0] = t1 * ((0.55214018701167377780e-7 * t20 - 0.49692616831050640002e-5 * t21 - 0.19877046732420256001e-3 * t22) * cosP1_2 + (-0.94415971978996216006e-4 * t19 + 0.20705257012937766672e-7 * t17 + 0.26916834116819096666e-5 * t18) * sinP1_2) + t10 * (0.45965670568721842004e-4 * t21 - 0.45551565428463086674e-6 * t20 + 0.17591186358191926562e-2 * t22) + t3 * ((t24 + t25 + t27) * cosP1_1 + sinP1_1 * t16) + t6 * (t4 * (-0.2760700935058368888e-7 * cosP1_3 * sinP2_4 - 0.57974719636225746676e-6 * cosP2_4 * sinP1_3) + 0.20870899069041268802e-3 * sinP1_3 * t9) + t15 * t11 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t13 * t12 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t14 * t5 * (cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3);
    bf[1] = t28;
    bf[2] = t2;
}

static void idsbf_7_6_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[13];
    t2 = LegP2[23];
    t3 = LegP2[27];
    t4 = LegP2[21];
    t5 = LegP1[10];
    t6 = LegP2[24];
    t7 = LegP1[11];
    t8 = LegP2[22];
    t9 = LegP2[26];
    t10 = LegP1[12];
    t11 = LegP2[25];
    t12 = LegP1[14];
    t13 = t1 * t3;
    t14 = t12 * t9;
    t15 = cosP2_4 * t11;
    t16 = 0.19078090407221067545e-2 * t4 + 0.75706707965162966433e-6 * t15;
    t17 = sinP2_5 * t9;
    t18 = sinP2_3 * t6;
    t19 = sinP2_1 * t8;
    t20 = cosP2_3 * t6;
    t21 = cosP2_1 * t8;
    t22 = cosP2_5 * t9;
    t23 = 0.32445731985069842770e-5 * cosP2_2 * t2;
    t15 = 0.18025406658372134866e-7 * t15;
    t24 = 0.45424024779097779866e-4 * t4;
    t25 = sinP2_2 * t2;
    t26 = 0.17376492018670738012e-4 * t25;
    t27 = sinP2_4 * t11;
    t28 = 0.40056459240826966374e-7 * t27;
    t29 = sinP2_6 * t3;
    t30 = 0.33046578873682247258e-6 * t29;
    t25 = -0.64891463970139685532e-5 * t25;
    t27 = 0.16823712881147325876e-5 * t27;
    t31 = t1 * ((t23 + t15 + t24) * cosP1_3 + (t28 - t26) * sinP1_3) + t10 * ((-0.13619196141881168564e-6 * t22 - 0.15862357859367478678e-5 * t20 - 0.21918894496580515998e-3 * t21) * cosP1_2 + (0.58161978817680755166e-5 * t18 - 0.63449431437469914736e-4 * t19 - 0.31244038207845033764e-6 * t17) * sinP1_2) + t12 * ((-0.22351504256381447234e-4 * t21 + 0.56479607529566022584e-6 * t20) * cosP1_4 + (0.17304390392037249471e-4 * t19 + 0.69698239079038921488e-6 * t18) * sinP1_4) + t5 * (0.26437263098945797800e-5 * t22 + 0.63449431437469914728e-4 * t20 - 0.23360927029250286786e-2 * t21) + t7 * (cosP1_1 * t16 + (t30 + t27 + t25) * sinP1_1) + 0.90127033291860674330e-8 * t13 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.40056459240826966368e-8 * t14 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t32 = t12 * (-0.43441230046676845026e-5 * cosP1_4 * sinP2_2 - 0.81114329962674606892e-6 * cosP2_2 * sinP1_4) - 0.32445731985069842768e-4 * sinP2_2 * t5;
    t2 = t10 * (t11 * (-0.25235569321720988809e-6 * cosP2_4 * sinP1_2 + 0.56079042937157752919e-6 * cosP1_2 * sinP2_4) - 0.63593634690736891816e-3 * sinP1_2 * t4) + t2 * t32 - 0.22531758322965168582e-8 * t12 * t3 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.10574905239578319122e-5 * t1 * t6 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.10574905239578319121e-5 * t7 * t9 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) + 0.40376910914753582105e-4 * t1 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.93443708117001147152e-3 * t7 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.25379772574987965892e-4 * t7 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.64090334785323146192e-7 * t1 * t9 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.16523289436841123628e-5 * t29 * t5;
    bf[0] = t1 * ((t28 + t26) * cosP1_3 + (t23 - t15 - t24) * sinP1_3) + t10 * ((-0.15862357859367478678e-5 * t18 + 0.21918894496580515998e-3 * t19 + 0.13619196141881168564e-6 * t17) * cosP1_2 + (-0.63449431437469914736e-4 * t21 - 0.31244038207845033764e-6 * t22 - 0.58161978817680755166e-5 * t20) * sinP1_2) + t12 * ((-0.56479607529566022584e-6 * t18 - 0.22351504256381447234e-4 * t19) * cosP1_4 + (-0.17304390392037249471e-4 * t21 + 0.69698239079038921488e-6 * t20) * sinP1_4) + t5 * (0.26437263098945797800e-5 * t17 - 0.23360927029250286786e-2 * t19 - 0.63449431437469914728e-4 * t18) + t7 * ((t30 - t27 + t25) * cosP1_1 + sinP1_1 * t16) + 0.90127033291860674330e-8 * t13 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.40056459240826966368e-8 * t14 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    bf[1] = t31;
    bf[2] = t2;
}

static void idsbf_7_6_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[23];
    t2 = LegP2[24];
    t3 = LegP1[25];
    t4 = LegP2[22];
    t5 = LegP1[22];
    t6 = LegP2[25];
    t7 = LegP2[27];
    t8 = LegP1[27];
    t9 = LegP1[26];
    t10 = LegP2[23];
    t11 = LegP1[24];
    t12 = LegP2[26];
    t13 = LegP2[21];
    t14 = LegP1[21];
    t15 = t8 * t4;
    t16 = t3 * t12;
    t17 = t9 * t7;
    t8 = t8 * t2;
    t18 = t11 * t7;
    t19 = 0.20111507441654924762e-6;
    t20 = 0.63991160041629306058e-8;
    t21 = 0.36566377166645317750e-8;
    t22 = 0.11426992864576661796e-9;
    t23 = 0.68561957187459970774e-9;
    t24 = cosP2_5 * t12;
    t25 = cosP2_1 * t4;
    t26 = sinP2_5 * t12;
    t27 = sinP2_3 * t2;
    t28 = t2 * (0.47536290316638913076e-7 * cosP1_4 * sinP2_3 + 0.73132754333290635504e-7 * sinP1_4 * cosP2_3) + t4 * (0.19014516126655565232e-5 * sinP1_4 * cosP2_1 - 0.27059119103317535136e-5 * cosP1_4 * sinP2_1);
    t28 = t1 * ((0.12066904464992954856e-5 * t27 - 0.36566377166645317747e-7 * t26) * cosP1_2 + (-0.12432568236659408034e-6 * t24 + 0.43440856073974637480e-4 * t25) * sinP1_2) + t3 * t28 + t6 * (t11 * (0.36566377166645317750e-7 * cosP1_3 * sinP2_4 - 0.16454869724990392986e-7 * cosP2_4 * sinP1_3) + t5 * (-0.73132754333290635501e-6 * cosP1_1 * sinP2_4 + 0.32909739449980785971e-6 * cosP2_4 * sinP1_1)) + t19 * t15 * (cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t21 * t16 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t22 * t17 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - t20 * t8 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t23 * t18 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.30167261162482387144e-6 * t5 * cosP1_1 * t7 * sinP2_6 + (-0.41137174312475982468e-7 * cosP2_2 * sinP1_5 - 0.22031242242903803942e-6 * cosP1_5 * sinP2_2) * t10 * t9;
    t29 = sinP1_1 * t5;
    t30 = cosP1_2 * t1;
    t31 = t6 * (0.32909739449980785971e-6 * cosP1_1 * cosP2_4 + 0.73132754333290635501e-6 * sinP1_1 * sinP2_4) + 0.30167261162482387144e-6 * sinP1_1 * t7 * sinP2_6;
    t32 = cosP2_3 * t2;
    t33 = t30 * (0.12066904464992954856e-5 * t32 + 0.36566377166645317747e-7 * t24);
    t8 = t11 * (t10 * (0.24682304587485589480e-6 * cosP1_3 * cosP2_2 - 0.13218745345742282366e-5 * sinP1_3 * sinP2_2) + t6 * (0.16454869724990392986e-7 * cosP1_3 * cosP2_4 + 0.36566377166645317750e-7 * sinP1_3 * sinP2_4)) - t19 * t15 * (cosP1_6 * cosP2_1 - sinP1_6 * sinP2_1) + t20 * t8 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - t21 * t16 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t22 * t17 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t23 * t18 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t3 * (t2 * (0.73132754333290635504e-7 * sinP1_4 * sinP2_3 - 0.47536290316638913076e-7 * cosP1_4 * cosP2_3) + t4 * (-0.19014516126655565232e-5 * sinP1_4 * sinP2_1 - 0.27059119103317535136e-5 * cosP1_4 * cosP2_1)) + t5 * t31 + (0.41137174312475982468e-7 * cosP1_5 * cosP2_2 - 0.22031242242903803942e-6 * sinP1_5 * sinP2_2) * t10 * t9 + t33;
    t6 = t6 * (-0.29253101733316254200e-6 * cosP1_2 * sinP2_4 + 0.13163895779992314388e-6 * cosP2_4 * sinP1_2) + 0.33173017365580632262e-3 * sinP1_2 * t13;
    t15 = t3 * (0.16454869724990392990e-6 * cosP2_2 * sinP1_4 + 0.88124968971615215774e-6 * cosP1_4 * sinP2_2) + 0.35542518605979248860e-4 * sinP2_2 * t14;
    t3 = t1 * t6 + t10 * t15 - 0.40223014883309849524e-6 * t9 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.80446029766619699038e-6 * t5 * t12 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) + 0.12798232008325861212e-7 * t9 * t2 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.13822090568991930110e-4 * t11 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.19307047143988727769e-4 * t5 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.21939826299987190648e-7 * t11 * t12 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.45707971458306647186e-9 * t3 * t7 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.36200713394978864568e-6 * t11 * t2 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.71085037211958497698e-3 * t5 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.18100356697489432285e-5 * t14 * t7 * sinP2_6;
    bf[0] = t10 * (t11 * (0.24682304587485589480e-6 * cosP2_2 * sinP1_3 + 0.13218745345742282366e-5 * cosP1_3 * sinP2_2) - 0.59237531009965414764e-5 * cosP1_1 * sinP2_2 * t5) + t13 * (0.82932543413951580660e-3 * t29 - 0.41466271706975790328e-4 * sinP1_3 * t11) + t2 * (-0.26547189822984500684e-5 * cosP2_3 * sinP1_2 * t1 - 0.57921141431966183312e-4 * sinP2_3 * t14) + t28 + 0.24133808929985909710e-5 * t26 * t14 + (-0.21325511163587549310e-2 * t14 + 0.98729218349942357926e-4 * t30) * t4 * sinP2_1;
    bf[1] = t1 * ((-0.12432568236659408034e-6 * t26 + 0.26547189822984500684e-5 * t27 + 0.43440856073974637480e-4 * t4 * sinP2_1) * sinP1_2 - 0.98729218349942357926e-4 * t25 * cosP1_2) + t13 * (0.41466271706975790328e-4 * cosP1_3 * t11 + 0.82932543413951580660e-3 * t5 * cosP1_1) + t14 * (0.57921141431966183312e-4 * t32 - 0.21325511163587549310e-2 * t25 + 0.24133808929985909710e-5 * t24) + t8 - 0.59237531009965414764e-5 * t29 * t10 * sinP2_2;
    bf[2] = t3;
}

static void idsbf_7_6_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t6, t7, t8, t9;
    t1 = LegP1[24];
    t2 = LegP2[23];
    t3 = LegP1[23];
    t4 = LegP2[24];
    t5 = LegP1[27];
    t6 = LegP2[26];
    t7 = LegP1[26];
    t8 = LegP2[25];
    t9 = LegP1[25];
    t10 = LegP2[22];
    t11 = LegP1[22];
    t12 = LegP2[27];
    t13 = LegP2[21];
    t14 = LegP1[21];
    t15 = t1 * t2;
    t16 = t5 * t6;
    t17 = t7 * t8;
    t18 = t7 * t2;
    t19 = t9 * t6;
    t20 = t7 * t12;
    t21 = t5 * t4;
    t22 = t1 * t12;
    t23 = 0.19000446930406853328e-7;
    t24 = -0.41167635015881515550e-8;
    t25 = 0.31667411550678088880e-9;
    t26 = 0.52779019251130148138e-10;
    t27 = 0.17153181256617298146e-9;
    t28 = 0.20900491623447538661e-5;
    t29 = -0.68401608949464671971e-3 * t13 - 0.47881126264625270388e-5 * cosP2_4 * t8;
    t30 = cosP1_4 * t9;
    t31 = -0.16340384360149893863e-5 * t30;
    t32 = 0.20900491623447538662e-6 * cosP1_6 * t5;
    t33 = 0.23940563132312635195e-2 * t14;
    t34 = sinP1_6 * t5;
    t35 = 0.24383906894022128440e-6 * t34;
    t36 = 0.29640697211434691192e-5 * t9 * sinP1_4;
    t37 = 0.2280053631648822404e-6 * sinP2_4 * t8;
    t38 = sinP2_6 * t12;
    t39 = 0.13933661082298359109e-6 * t38;
    t40 = sinP2_5 * t6;
    t41 = sinP2_3 * t4;
    t42 = -0.34834152705745897778e-7 * t9 * sinP1_4 * t4;
    t43 = t10 * ((t35 - t36) * cosP2_1 + (-t32 + t33 + t31) * sinP2_1) + t11 * ((-t37 + t39) * cosP1_1 + sinP1_1 * t29) + t13 * (0.95002234652034266630e-5 * sinP1_3 * t1 + 0.54341278220963600522e-5 * sinP1_5 * t7) + t14 * (0.26600625702569594658e-4 * t41 + 0.29260688272826554128e-5 * t40) + t28 * t15 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + t27 * t16 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t24 * t17 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t23 * t18 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t25 * t19 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t26 * t20 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t42 * cosP2_3 + t4 * (0.10925256984983940666e-5 * cosP1_2 * sinP2_3 + 0.20425480450187367329e-5 * cosP2_3 * sinP1_2) * t3;
    t44 = 0.13194754812782537038e-9;
    t45 = 0.58056921176243162954e-8;
    t46 = sinP2_1 * t10;
    t47 = cosP2_5 * t6;
    t48 = cosP2_1 * t10;
    t49 = t4 * cosP2_3;
    t50 = t2 * sinP2_2;
    t29 = t1 * (t8 * (0.3166741155067808894e-8 * sinP1_3 * sinP2_4 - 0.66501564256423986658e-7 * cosP1_3 * cosP2_4) - 0.95002234652034266630e-5 * cosP1_3 * t13) + t10 * ((t32 + t33 + t31) * cosP2_1 + t36 * sinP2_1) + t11 * (cosP1_1 * t29 + (t37 + 0.68401608949464671980e-4 * t50 + t39) * sinP1_1) + t14 * (0.29260688272826554128e-5 * t47 - 0.26600625702569594658e-4 * t49) + t3 * ((0.23750558663008566668e-7 * t47 + 0.10925256984983940666e-5 * t49 + 0.10260241342419700798e-3 * t48) * cosP1_2 + (-0.80751899454229126648e-7 * t40 + 0.17100402237366167992e-4 * t46 - 0.20425480450187367329e-5 * t41) * sinP1_2) + t42 * sinP2_3 + 0.54341278220963600522e-5 * t7 * cosP1_5 * t13;
    t15 = t23 * t18 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) + t24 * t17 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - t25 * t19 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t26 * t20 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t27 * t16 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t28 * t15 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - t44 * t21 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t45 * t22 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t29 + t46 * t35 - 0.32e-26 * t49 * t30;
    t16 = 0.47881126264625270384e-3 * t50 + 0.97535627576088513760e-6 * t38;
    t17 = 0.17100402237366167994e-3 * sinP1_2 * t3 - 0.90568797034939334200e-6 * t34;
    t18 = t3 * (0.11970281566156317598e-5 * cosP2_4 * sinP1_2 + 0.5700134079122056006e-7 * cosP1_2 * sinP2_4) * t8;
    t4 = t13 * t17 + t14 * t16 - 0.63334823101356177760e-8 * t1 * t6 * (cosP1_3 * sinP2_5 - sinP1_3 * cosP2_5) - 0.11611384235248632591e-8 * t9 * t12 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.68612725026469192580e-9 * t5 * t8 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.34834152705745897772e-6 * t1 * t4 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.68401608949464671989e-3 * t11 * t10 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.41800983246895077324e-6 * t7 * t10 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.41800983246895077323e-6 * t9 * t2 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) - 0.83601966493790154646e-6 * t11 * t6 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) + 0.31667411550678088889e-8 * t7 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.13300312851284797330e-4 * t1 * t10 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.76001787721627413304e-5 * t11 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + t18;
    bf[0] = t3 * ((-0.10260241342419700798e-3 * t46 - 0.23750558663008566668e-7 * t40) * cosP1_2 + (-0.80751899454229126648e-7 * t47 + 0.17100402237366167992e-4 * t48) * sinP1_2) + t44 * t21 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t45 * t22 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t43 + 0.68401608949464671980e-4 * t11 * cosP1_1 * t2 * sinP2_2 + (0.3166741155067808894e-8 * cosP1_3 * sinP2_4 + 0.66501564256423986658e-7 * cosP2_4 * sinP1_3) * t8 * t1 + 0.32e-26 * t41 * t30;
    bf[1] = t15;
    bf[2] = t4;
}

static void idsbf_7_6_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t6, t7, t8, t9;
    t1 = LegP1[37];
    t2 = LegP2[27];
    t3 = LegP1[44];
    t4 = LegP2[22];
    t5 = LegP1[40];
    t6 = LegP2[24];
    t7 = LegP1[39];
    t8 = LegP2[25];
    t9 = LegP1[38];
    t10 = LegP2[26];
    t11 = LegP1[42];
    t12 = LegP1[41];
    t13 = LegP2[23];
    t14 = LegP1[43];
    t15 = LegP2[21];
    t16 = LegP1[36];
    t17 = t3 * t4;
    t18 = t11 * t10;
    t19 = t12 * t8;
    t20 = t7 * t13;
    t21 = t5 * t10;
    t22 = t12 * t2;
    t3 = t3 * t10;
    t23 = t14 * t8;
    t24 = t11 * t6;
    t25 = t12 * t13;
    t26 = t7 * t2;
    t27 = 0.11637273641380858521e-8;
    t28 = 0.49370251811918793732e-10;
    t29 = cosP1_2 * t9;
    t30 = 0.58651859152559526951e-4 * t29;
    t31 = cosP1_4 * t5;
    t32 = 0.42655897565497837773e-6 * t31;
    t33 = 0.13964728369657030227e-7 * cosP1_6 * t11;
    t34 = sinP1_2 * t9;
    t35 = -0.21327948782748918896e-4 * t34;
    t36 = sinP1_4 * t5;
    t37 = 0.81757137000537522409e-6 * t36;
    t38 = sinP1_6 * t11;
    t39 = 0.18619637826209373636e-7 * t38;
    t40 = 0.12441303456603536036e-6 * sinP2_4 * t8;
    t41 = sinP2_6 * t2;
    t42 = 0.13033746478346561545e-6 * t41;
    t43 = sinP2_2 * t13;
    t44 = 0.63983846348246756667e-4 * t43;
    t45 = t6 * (-0.14811075543575638117e-7 * cosP1_4 * sinP2_3 - 0.17773290652290765742e-7 * sinP1_4 * cosP2_3) * t5;
    t46 = (0.62206517283017680100e-7 * cosP2_4 * sinP1_3 + 0.2962215108715127628e-8 * cosP1_3 * sinP2_4) * t8 * t7;
    t45 = t1 * ((-t40 + t42 + t44) * cosP1_1 - 0.26126737258867425641e-5 * sinP1_1 * t8 * cosP2_4) + t4 * ((t35 - t37 + t39) * cosP2_1 + (-t30 + t32 + t33) * sinP2_1) + t9 * (t10 * (-0.39989903967654222924e-7 * cosP1_2 * sinP2_5 - 0.57763194619944988664e-7 * sinP1_2 * cosP2_5) + t6 * (0.93309775924526520138e-6 * cosP2_3 * sinP1_2 + 0.4443322663072691446e-7 * cosP1_2 * sinP2_3)) - t27 * t17 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.17632232789970997759e-11 * t18 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.14811075543575638119e-9 * t19 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.35546581304581531484e-6 * t20 * (-cosP1_3 * sinP2_2 + sinP1_3 * cosP2_2) + 0.29622151087151276234e-9 * t21 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t28 * t22 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t45 + t46;
    t46 = 0.17773290652290765743e-7;
    t47 = 0.12342562952979698436e-9;
    t48 = 0.24685125905959396866e-10;
    t49 = 0.88161163949854988800e-12;
    t50 = 0.98740503623837587470e-9;
    t51 = t8 * (-0.62206517283017680100e-7 * cosP1_3 * cosP2_4 + 0.2962215108715127628e-8 * sinP1_3 * sinP2_4) * t7;
    t18 = t1 * ((t40 + t42 + t44) * sinP1_1 - 0.26126737258867425641e-5 * cosP1_1 * cosP2_4 * t8) + t4 * ((t30 + t32 - t33) * cosP2_1 + (t35 + t37 + t39) * sinP2_1) + t6 * ((-0.24882606913207072036e-4 * t16 + 0.14811075543575638117e-7 * t31 + 0.4443322663072691446e-7 * t29) * cosP2_3 + (-0.93309775924526520138e-6 * t34 - 0.17773290652290765742e-7 * t36) * sinP2_3) + 0.17632232789970997759e-11 * t18 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.14811075543575638119e-9 * t19 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.35546581304581531484e-6 * t20 * (cosP1_3 * cosP2_2 + sinP1_3 * sinP2_2) - 0.29622151087151276234e-9 * t21 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.19550619717519842316e-6 * t12 * cosP1_5 * t15 + (-0.57763194619944988664e-7 * sinP1_2 * sinP2_5 + 0.39989903967654222924e-7 * cosP1_2 * cosP2_5) * t10 * t9 + t51;
    t17 = t15 * (-0.37323910369810608056e-3 * cosP1_1 * t1 + 0.32584366195866403860e-7 * cosP1_7 * t14 - 0.88866453261453828700e-5 * cosP1_3 * t7) + t16 * (0.27370867604527779244e-5 * cosP2_5 * t10 + 0.22394346221886364836e-2 * cosP2_1 * t4) + t27 * t17 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + t28 * t22 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t46 * t25 * (cosP1_5 * cosP2_2 + sinP1_5 * sinP2_2) - t47 * t24 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - t48 * t23 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t49 * t3 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t50 * t26 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t18;
    t18 = t1 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t19 = t7 * t10 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t2 = t5 * t2 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t20 = 0.13033746478346561544e-6 * t38 - 0.10663974391374459443e-3 * t34;
    t21 = -0.51187077078597405335e-3 * t43 - 0.10426997182677249237e-5 * t41;
    t9 = t9 * (-0.74647820739621216120e-6 * cosP2_4 * sinP1_2 - 0.3554658130458153152e-7 * cosP1_2 * sinP2_4) * t8;
    t2 = t15 * t20 + t16 * t21 + 0.23274547282761717042e-8 * t14 * t4 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.97753098587599211590e-7 * t12 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.16292183097933201932e-6 * t7 * t6 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.68427169011319448112e-6 * t1 * t10 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) + 0.17632232789970997761e-11 * t14 * t10 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) - 0.98740503623837587464e-10 * t11 * t8 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.74055377717878190618e-9 * t12 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.14218632521832612593e-6 * t5 * t13 * (-cosP1_4 * sinP2_2 + sinP1_4 * cosP2_2) + 0.62206517283017680095e-5 * t7 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.55985865554715912089e-3 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.62206517283017680088e-5 * t18 - 0.29622151087151276236e-8 * t19 + 0.39496201449535034986e-9 * t2 + t9;
    bf[0] = t15 * (-0.37323910369810608056e-3 * sinP1_1 * t1 + 0.19550619717519842316e-6 * sinP1_5 * t12 - 0.32584366195866403860e-7 * sinP1_7 * t14 + 0.88866453261453828700e-5 * sinP1_3 * t7) + t16 * (0.27370867604527779244e-5 * sinP2_5 * t10 + 0.24882606913207072036e-4 * sinP2_3 * t6 + 0.22394346221886364836e-2 * sinP2_1 * t4) - t49 * t3 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + t48 * t23 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t47 * t24 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - t46 * t25 * (-cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t50 * t26 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t45;
    bf[1] = t17;
    bf[2] = t2;
}

static void idsbf_7_6_8_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t6, t7, t8, t9;
    t1 = LegP1[39];
    t2 = LegP2[21];
    t3 = LegP1[36];
    t4 = LegP2[26];
    t5 = LegP1[43];
    t6 = LegP1[37];
    t7 = LegP2[22];
    t8 = LegP1[41];
    t9 = LegP2[24];
    t10 = LegP2[27];
    t11 = LegP1[44];
    t12 = LegP2[25];
    t13 = LegP1[42];
    t14 = LegP2[23];
    t15 = LegP1[40];
    t16 = LegP1[38];
    t17 = t1 * t10;
    t18 = t5 * t10;
    t19 = t5 * t14;
    t20 = t11 * t7;
    t21 = t13 * t4;
    t22 = t8 * t12;
    t23 = t15 * t4;
    t24 = t8 * t10;
    t25 = t11 * t4;
    t26 = t5 * t12;
    t27 = t13 * t9;
    t28 = 0.45600600327309109352e-9;
    t29 = 0.40179549938747886562e-9;
    t30 = 0.36831254110518896018e-9;
    t31 = -0.28061907893728682680e-9;
    t32 = -0.14732501644207558408e-9;
    t33 = 0.40179549938747886562e-10;
    t34 = 0.35077384867160853353e-11;
    t35 = 0.50490175187580016178e-12;
    t36 = -0.21259021131612638392e-12;
    t37 = 0.15147052556274004855e-10;
    t38 = 0.24107729963248731936e-8;
    t39 = t13 * (0.12206929933771976966e-7 * cosP1_6 * sinP2_1 - 0.15153430262613488647e-7 * sinP1_6 * cosP2_1) + t15 * (0.36536604077634744850e-6 * sinP1_4 * cosP2_1 - 0.51858405787610605590e-6 * cosP1_4 * sinP2_1);
    t40 = 0.10607401183829442053e-6 * cosP2_6 * t10;
    t41 = cosP2_2 * t14;
    t42 = 0.17679001973049070090e-7 * t8;
    t43 = t42 * cosP1_5 * t14 * sinP2_2;
    t39 = t7 * t39 + t38 * t17 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t36 * t18 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t31 * t19 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - t28 * t20 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + t37 * t21 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t32 * t22 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t29 * t23 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t33 * t24 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t35 * t25 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - t34 * t26 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t30 * t27 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + (-0.13259251479786802562e-6 * cosP1_2 * sinP2_3 - 0.27844428107552285389e-5 * cosP2_3 * sinP1_2) * t16 * t9 + (t40 - 0.63644407102976652332e-4 * t41) * t6 * sinP1_1 + t43;
    t43 = cosP2_5 * t4;
    t44 = cosP2_1 * t7;
    t45 = sinP2_5 * t4;
    t46 = sinP2_1 * t7;
    t47 = 0.88395009865245350442e-8 * t5;
    t48 = sinP1_6 * t13;
    t49 = sinP1_4 * t15;
    t50 = sinP1_2 * t16;
    t51 = cosP1_4 * t15;
    t52 = cosP1_2 * t16;
    t53 = t8 * cosP1_5;
    t54 = cosP1_3 * t1;
    t55 = cosP1_1 * t6;
    t56 = sinP1_3 * t1;
    t40 = t12 * ((-0.14732501644207558409e-7 * t54 + 0.10312751150945290885e-5 * t55) * cosP2_4 + (0.50090505590305698584e-7 * t56 - 0.35063353913213989007e-5 * t6 * sinP1_1) * sinP2_4) + t14 * ((0.63644407102976652332e-4 * t55 + 0.35358003946098140166e-6 * t54 - 0.58930006576830233618e-8 * t53) * cosP2_2 + (t42 * sinP1_5 - 0.10607401183829442053e-5 * t56) * sinP2_2) + t7 * ((-0.12206929933771976966e-7 * cosP1_6 * t13 + 0.51269105721842303258e-4 * t52 - 0.51858405787610605590e-6 * t51) * cosP2_1 + (-0.15153430262613488647e-7 * t48 - 0.36536604077634744850e-6 * t49 + 0.70716007892196280296e-5 * t50) * sinP2_1) + t9 * ((0.29465003288415116798e-8 * t51 - 0.13259251479786802562e-6 * t52) * cosP2_3 + (-0.41251004603781163541e-7 * t49 + 0.27844428107552285389e-5 * t50) * sinP2_3) - t55 * t40;
    t42 = -0.30761463433105381948e-5 * t43 - 0.95466610654464978474e-4 * cosP2_3 * t9 - 0.15911101775744163081e-2 * t44;
    t49 = t4 * (-0.16205751808628314246e-7 * sinP1_2 * sinP2_5 + 0.69242757727775524510e-7 * cosP1_2 * cosP2_5) * t16;
    t17 = t2 * (t47 * cosP1_7 - 0.37125904143403047186e-6 * t53 - 0.37125904143403047192e-4 * t54 + 0.25988132900382133032e-2 * t55) + t28 * t20 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) - t29 * t23 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t3 * t42 + t30 * t27 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t31 * t19 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t32 * t22 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - t33 * t24 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t34 * t26 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - t35 * t25 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t36 * t18 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t37 * t21 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t38 * t17 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t40 + t49;
    t18 = t6 * t7 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    t19 = t6 * t9 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t20 = t1 * t4 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t21 = t15 * t10 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t22 = -0.10607401183829442053e-6 * t48 + 0.14850361657361218877e-3 * t50;
    t23 = t16 * (0.20036202236122279434e-6 * cosP1_2 * sinP2_4 + 0.58930006576830233626e-7 * cosP2_4 * sinP1_2) * t12;
    t24 = (0.47144005261464186893e-7 * sinP1_4 * cosP2_2 + 0.14143201578439256072e-6 * cosP1_4 * sinP2_2) * t15 * t14;
    t4 = -0.63840840458232753090e-8 * t5 * t7 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + t36 * t11 * t10 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) + 0.70686245262612022656e-11 * t5 * t4 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) - 0.13259251479786802564e-6 * t1 * t9 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.85448509536403838748e-7 * t6 * t4 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) + 0.26518502959573605130e-5 * t1 * t7 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + t24 - 0.26518502959573605132e-5 * t19 + t23 + t22 * t2 - 0.44197504932622675228e-4 * t18 - 0.28061907893728682678e-9 * t11 * t14 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) - 0.42092861840593024025e-10 * t13 * t12 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.32143639950998309250e-9 * t21 + 0.24107729963248731937e-8 * t20 - 0.36831254110518896020e-8 * t8 * t9 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.14732501644207558404e-7 * t8 * t7 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1);
    bf[0] = t1 * ((0.50090505590305698584e-7 * sinP2_4 * t12 + 0.10607401183829442053e-5 * t14 * sinP2_2) * cosP1_3 + (0.37125904143403047192e-4 * t2 + 0.14732501644207558409e-7 * cosP2_4 * t12 + 0.35358003946098140166e-6 * t41) * sinP1_3) + t16 * ((-0.69242757727775524510e-7 * t45 - 0.51269105721842303258e-4 * t46) * cosP1_2 + (-0.16205751808628314246e-7 * t43 + 0.70716007892196280296e-5 * t44) * sinP1_2) + t3 * (-0.15911101775744163081e-2 * t46 - 0.30761463433105381948e-5 * t45) + t6 * (t12 * (0.10312751150945290885e-5 * cosP2_4 * sinP1_1 + 0.35063353913213989007e-5 * cosP1_1 * sinP2_4) + 0.25988132900382133032e-2 * sinP1_1 * t2) + t9 * (t15 * (-0.29465003288415116798e-8 * cosP1_4 * sinP2_3 - 0.41251004603781163541e-7 * sinP1_4 * cosP2_3) + 0.95466610654464978474e-4 * sinP2_3 * t3) + t39 - t47 * sinP1_7 * t2 + (-0.37125904143403047186e-6 * t2 + 0.58930006576830233618e-8 * t41) * t8 * sinP1_5;
    bf[1] = t17;
    bf[2] = t4;
}

static void idsbf_7_6_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t5, t6, t7, t8, t9;
    t1 = LegP1[37];
    t2 = LegP2[23];
    t3 = LegP1[44];
    t4 = LegP2[22];
    t5 = LegP1[40];
    t6 = LegP2[24];
    t7 = LegP1[39];
    t8 = LegP2[25];
    t9 = LegP1[38];
    t10 = LegP2[26];
    t11 = LegP1[42];
    t12 = LegP1[41];
    t13 = LegP2[27];
    t14 = LegP1[43];
    t15 = LegP2[21];
    t16 = LegP1[36];
    t17 = t12 * t13;
    t18 = t3 * t10;
    t19 = t14 * t8;
    t20 = t11 * t6;
    t21 = t7 * t13;
    t22 = t14 * t13;
    t23 = t14 * t2;
    t24 = t3 * t6;
    t25 = t3 * t4;
    t26 = t11 * t10;
    t27 = t12 * t8;
    t28 = t5 * t10;
    t29 = -0.19299796100637237227e-2;
    t30 = sinP1_6 * t11;
    t31 = sinP1_5 * t12;
    t32 = sinP1_3 * t7;
    t33 = sinP1_1 * t1;
    t34 = 0.12643996397168001327e-8 * sinP1_7 * t14 - 0.26552392434052802790e-6 * t31 + 0.10620956973621121088e-5 * t32 - 0.11683052670983233196e-3 * t33;
    t35 = sinP2_5 * t10;
    t36 = sinP2_3 * t6;
    t37 = 0.37931989191504003980e-7 * t1;
    t38 = t37 * cosP1_1 * t13 * sinP2_6;
    t39 = t12 * t2 * (0.12643996397168001329e-8 * cosP1_5 * sinP2_2 + 0.13065462943740268040e-7 * sinP1_5 * cosP2_2);
    t34 = t15 * t34 + t16 * (0.39600996715930180156e-4 * t36 + 0.14414155892771521514e-5 * t35) + t4 * ((0.10452370354992214432e-5 * sinP1_4 * t5 + 0.54188555987862862844e-8 * t30) * cosP2_1 + (-0.13848186530231620503e-7 * cosP1_6 * t11 + t16 * t29 + 0.48890119402382938464e-6 * cosP1_4 * t5) * sinP2_1) - 0.12923757741213084571e-11 * t22 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.75061184960965595194e-9 * t23 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.38383560491402861176e-10 * t24 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - 0.40139671102120639140e-10 * t25 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.22806631308023090418e-10 * t26 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.52683318321533338870e-9 * t27 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.40230897627352731496e-9 * t28 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t38 + t39;
    t38 = cosP2_1 * t4;
    t39 = cosP2_5 * t10;
    t40 = cosP2_3 * t6;
    t41 = sinP2_1 * t4;
    t42 = cosP1_3 * t7;
    t43 = t1 * cosP1_1;
    t44 = t7 * (-0.19724634379582082072e-6 * cosP1_3 * sinP2_2 - 0.20382122192234818142e-5 * sinP1_3 * cosP2_2) - 0.88305670837821321284e-4 * t1 * cosP1_1 * sinP2_2;
    t34 = t2 * t44 + t8 * ((-0.88086508233603742591e-6 * t33 + 0.80078643848730675091e-8 * t32) * cosP2_4 + (0.18123061502607468570e-7 * t42 - 0.19935367652868215426e-5 * t43) * sinP2_4) + t9 * ((0.58162383426972806112e-4 * t41 - 0.69120513637851740592e-7 * t35 + 0.89519494491949449410e-6 * t36) * cosP1_2 + (-0.15273947647778945613e-4 * t38 + 0.17752170941623873864e-5 * t40 + 0.37089056098359470560e-7 * t39) * sinP1_2) - 0.14368177724054546964e-10 * t17 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.95027630450096210080e-13 * t18 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.25087294438825399462e-11 * t19 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.30104753326590479365e-10 * t20 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.22414357249525093264e-8 * t21 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t34 + (-0.15594262223173868306e-7 * sinP1_4 * cosP2_3 - 0.46361320122949338179e-8 * cosP1_4 * sinP2_3) * t6 * t5;
    t23 = t23 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t22 = t22 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t21 = t21 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t44 = cosP1_5 * t12;
    t43 = -0.11683052670983233196e-3 * t43 - 0.12643996397168001327e-8 * cosP1_7 * t14 - 0.26552392434052802790e-6 * t44 - 0.10620956973621121088e-5 * t42;
    t29 = t38 * t29 + 0.14414155892771521514e-5 * t39 - 0.39600996715930180156e-4 * t40;
    t45 = t4 * (0.13848186530231620503e-7 * cosP1_6 * cosP2_1 + 0.54188555987862862844e-8 * sinP1_6 * sinP2_1) * t11;
    t17 = t15 * t43 + t16 * t29 + 0.40139671102120639140e-10 * t25 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + 0.22806631308023090418e-10 * t26 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.52683318321533338870e-9 * t27 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.14368177724054546964e-10 * t17 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.95027630450096210080e-13 * t18 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + 0.25087294438825399462e-11 * t19 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.30104753326590479365e-10 * t20 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.38383560491402861176e-10 * t24 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.75061184960965595194e-9 * t23 - 0.12923757741213084571e-11 * t22 + 0.22414357249525093264e-8 * t21 + 0.40230897627352731496e-9 * t28 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t45;
    t18 = t7 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    t19 = t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    t20 = t7 * t10 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t21 = t5 * t13 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t22 = t8 * (0.39870735305736430856e-6 * cosP1_2 * sinP2_4 + 0.17617301646720748520e-6 * cosP2_4 * sinP1_2) + 0.23366105341966466393e-4 * sinP1_2 * t15;
    t23 = t5 * (0.33970203653724696902e-6 * sinP1_4 * cosP2_2 + 0.32874390632636803446e-7 * cosP1_4 * sinP2_2) - 0.79475103754039189160e-3 * sinP2_2 * t16;
    t16 = 0.34138790272353603586e-6 * t16 * t13 * sinP2_6;
    t15 = 0.37931989191504003980e-7 * t30 * t15;
    t3 = t22 * t9 + t23 * t2 - 0.30408841744030787226e-11 * t14 * t10 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + t15 - 0.12844694752678604525e-8 * t14 * t4 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + 0.84293309314453342226e-9 * t12 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.37357262082541822104e-9 * t21 + 0.16154697176516355713e-12 * t3 * t13 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) - 0.32031457539492270034e-6 * t1 * t10 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) + 0.66760300977047047024e-5 * t18 - 0.96554154305646555592e-8 * t20 + 0.88002214924289289246e-5 * t1 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.42888435779193860503e-3 * t19 + t16 - 0.93826481201206993986e-10 * t3 * t2 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) - 0.75261883316476198388e-10 * t11 * t8 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.11801063304023467906e-6 * t12 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.24276473082562562550e-6 * t7 * t6 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3);
    bf[0] = t34;
    bf[1] = t2 * ((-0.20382122192234818142e-5 * t42 - 0.13065462943740268040e-7 * t44) * cosP2_2 + (-0.88305670837821321284e-4 * t33 + 0.12643996397168001329e-8 * t31 + 0.19724634379582082072e-6 * t32) * sinP2_2) + t5 * (t4 * (0.48890119402382938464e-6 * cosP1_4 * cosP2_1 - 0.10452370354992214432e-5 * sinP1_4 * sinP2_1) + t6 * (-0.15594262223173868306e-7 * sinP1_4 * sinP2_3 + 0.46361320122949338179e-8 * cosP1_4 * cosP2_3)) + t8 * (t1 * (-0.88086508233603742591e-6 * cosP1_1 * cosP2_4 + 0.19935367652868215426e-5 * sinP1_1 * sinP2_4) + t7 * (0.18123061502607468570e-7 * sinP1_3 * sinP2_4 - 0.80078643848730675091e-8 * cosP1_3 * cosP2_4)) + t9 * ((0.69120513637851740592e-7 * t39 + 0.89519494491949449410e-6 * t40 - 0.58162383426972806112e-4 * t38) * cosP1_2 + (-0.15273947647778945613e-4 * t41 - 0.17752170941623873864e-5 * t36 + 0.37089056098359470560e-7 * t35) * sinP1_2) + t17 + t37 * sinP1_1 * t13 * sinP2_6;
    bf[2] = t3;
}

static void idsbf_7_6_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t7, t8, t9;
    t1 = LegP1[61];
    t2 = LegP2[22];
    t3 = LegP1[59];
    t4 = LegP1[58];
    t5 = LegP2[23];
    t6 = LegP1[57];
    t7 = LegP2[24];
    t8 = LegP1[56];
    t9 = LegP2[25];
    t10 = LegP2[27];
    t11 = LegP1[64];
    t12 = LegP1[63];
    t13 = LegP1[60];
    t14 = LegP2[26];
    t15 = LegP1[62];
    t16 = LegP2[21];
    t17 = LegP1[55];
    t18 = LegP1[65] * t7;
    t19 = t11 * t5;
    t20 = t12 * t2;
    t21 = t15 * t10;
    t22 = t1 * t14;
    t23 = t13 * t9;
    t24 = t3 * t14;
    t25 = t13 * t10;
    t26 = t11 * t10;
    t27 = t12 * t14;
    t28 = t27 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t29 = t15 * t9;
    t30 = t29 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t31 = t1 * t7;
    t32 = t4 * t10;
    t33 = t32 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t34 = t12 * t7;
    t35 = t34 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t36 = t15 * t5;
    t37 = t36 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t38 = -0.18309394216454980146e-2;
    t39 = cosP2_4 * t9;
    t40 = -0.72546656329349921149e-4 * t16 - 0.54697875803874940699e-6 * t39;
    t41 = cosP1_2 * t6;
    t42 = 0.11995148202604153658e-6 * t41;
    t43 = cosP1_4 * t3;
    t44 = 0.87393222618973119530e-8 * t43;
    t45 = 0.37568804170556209260e-4 * t17;
    t46 = sinP1_2 * t6;
    t47 = 0.95481379692729063138e-6 * t46;
    t48 = -0.10452914862269333905e-7 * t3 * sinP1_4;
    t49 = cosP1_3 * t4;
    t50 = sinP1_5 * t13;
    t51 = sinP1_3 * t4;
    t43 = -0.14394177843124984396e-6 * t43;
    t52 = 0.44553407609672570738e-8 * cosP1_6 * t1;
    t53 = 0.38384474248333291716e-6 * t3 * sinP1_4;
    t54 = sinP2_4 * t9;
    t55 = 0.12378992945087486577e-5 * t54;
    t56 = sinP2_6 * t10;
    t57 = 0.35985444607812460980e-7 * t56;
    t39 = 0.75969271949826306528e-8 * t39;
    t58 = 0.10075924490187489049e-5 * t16;
    t50 = t16 * (-0.23990296405208307318e-7 * t50 + 0.11995148202604153658e-8 * sinP1_7 * t15) + t2 * ((t17 * t38 + t43 - t52) * sinP2_1 + t53 * cosP2_1) + t5 * ((0.12394986476024292116e-7 * t50 - 0.52058943199302026882e-6 * t51) * cosP2_2 + (0.11995148202604153662e-8 * cosP1_5 * t13 - 0.5037962245093744538e-7 * t49) * sinP2_2) + t7 * ((t47 + t48) * cosP2_3 + (t42 - t44 + t45) * sinP2_3) + t8 * ((t57 - t55) * cosP1_1 + sinP1_1 * t40) + 0.13674468950968735172e-5 * t17 * t14 * sinP2_5 + t51 * (t58 + t39);
    t51 = t6 * (0.35121793937224961921e-4 * cosP1_2 * sinP2_1 + 0.55657487660083272960e-5 * cosP2_1 * sinP1_2) - 0.35414247074355120330e-8 * sinP1_6 * cosP2_1 * t1;
    t59 = -0.83774115046987409170e-4 * t8;
    t60 = t59 * cosP1_1 * t5 * sinP2_2;
    t49 = 0.17193045757065953580e-7 * t54 * t49;
    t61 = t6 * (-0.36567027550969026009e-7 * cosP1_2 * sinP2_5 + 0.61793187710385033993e-8 * sinP1_2 * cosP2_5) * t14;
    t28 = t50 + t61 + t49 + t60 + 0.10818135103358724441e-11 * t22 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t51 * t2 - 0.13630850230231992795e-10 * t25 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.26179886950128113150e-11 * t19 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) - 0.23799897227389193769e-11 * t30 + 0.15707932170076867888e-10 * t37 + 0.47599794454778387538e-10 * t23 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.38079835563822710034e-10 * t20 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.28559876672867032535e-10 * t31 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.11899948613694596886e-12 * t18 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) - 0.90151125861322703674e-13 * t28 - 0.27045337758396811102e-13 * t21 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.38166380644649579828e-9 * t24 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.57249570966974369736e-9 * t33 + 0.45075562930661351834e-14 * t26 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + 0.23799897227389193770e-12 * t35;
    t30 = t32 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t32 = t34 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t18 = t18 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3);
    t19 = t19 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2);
    t20 = t20 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1);
    t21 = t21 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t22 = t22 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t33 = sinP1_6 * t1;
    t34 = (t43 + t52 - 0.35121793937224961921e-4 * t41) * cosP2_1 + (-t53 - 0.35414247074355120330e-8 * t33 + 0.55657487660083272960e-5 * t46) * sinP2_1;
    t18 = 0.10818135103358724441e-11 * t22 + 0.13630850230231992795e-10 * t25 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.26179886950128113150e-11 * t19 + 0.23799897227389193769e-11 * t29 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.15707932170076867888e-10 * t36 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.47599794454778387538e-10 * t23 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t2 * t34 + 0.38079835563822710034e-10 * t20 - 0.28559876672867032535e-10 * t31 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.11899948613694596886e-12 * t18 + 0.90151125861322703674e-13 * t27 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - 0.27045337758396811102e-13 * t21 + 0.38166380644649579828e-9 * t24 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.57249570966974369736e-9 * t30 + t59 * sinP1_1 * t5 * sinP2_2 - 0.45075562930661351834e-14 * t26 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + 0.23799897227389193770e-12 * t32;
    t19 = t15 * t2 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1);
    t20 = t13 * t2 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1);
    t21 = t4 * t7 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3);
    t22 = t8 * t14 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5);
    t23 = t12 * t10 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6);
    t24 = t15 * t14 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5);
    t25 = t3 * (-0.14394177843124984390e-7 * cosP1_4 * sinP2_2 - 0.14873983771229150540e-6 * sinP1_4 * cosP2_2) + 0.83774115046987409172e-3 * sinP2_2 * t17;
    t26 = t9 * (-0.27508873211305525728e-6 * cosP1_2 * sinP2_4 - 0.12155083511972209044e-6 * cosP2_4 * sinP1_2) - 0.16121479184299982477e-4 * sinP1_2 * t16;
    t27 = -0.95961185620833229280e-8 * t33 * t16;
    t29 = -0.35985444607812460978e-6 * t56 * t17;
    t1 = t27 + t29 + 0.39983827342013845532e-7 * t20 + 0.23799897227389193772e-12 * t11 * t7 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) + 0.54090675516793622204e-12 * t24 - 0.36618788432909960291e-3 * t8 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + t25 * t5 + t26 * t6 + 0.13434565986916652100e-6 * t21 + 0.27348937901937470346e-6 * t22 - 0.36945056464020793280e-5 * t4 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.75137608341112418526e-5 * t8 * t7 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.10471954780051245259e-10 * t12 * t5 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) - 0.19039917781911355016e-10 * t1 * t9 * (cosP1_6 * sinP2_4 - sinP1_6 * cosP2_4) + 0.53432932902509411760e-8 * t4 * t14 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.28559876672867032535e-9 * t13 * t7 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.16357020276278391355e-9 * t3 * t10 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.22847901338293626019e-9 * t19 - 0.18030225172264540734e-13 * t23;
    bf[0] = t28;
    bf[1] = t13 * (t5 * (-0.12394986476024292116e-7 * cosP1_5 * cosP2_2 + 0.11995148202604153662e-8 * sinP1_5 * sinP2_2) - 0.23990296405208307318e-7 * cosP1_5 * t16) + t17 * (cosP2_1 * t2 * t38 + 0.13674468950968735172e-5 * cosP2_5 * t14) + t4 * ((-t58 - t39 - 0.52058943199302026882e-6 * cosP2_2 * t5) * cosP1_3 + (0.5037962245093744538e-7 * t5 * sinP2_2 + 0.17193045757065953580e-7 * t54) * sinP1_3) + t7 * ((t42 + t44 - t45) * cosP2_3 + (-t47 + t48) * sinP2_3) + t8 * (cosP1_1 * t40 + (t57 + t55) * sinP1_1) + t18 - 0.11995148202604153658e-8 * t15 * cosP1_7 * t16 + t14 * (0.36567027550969026009e-7 * cosP1_2 * cosP2_5 + 0.61793187710385033993e-8 * sinP1_2 * sinP2_5) * t6;
    bf[2] = t1;
}

static void idsbf_7_6_10_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t6, t7, t8, t9;
    t1 = LegP1[58];
    t2 = LegP2[23];
    t3 = LegP1[57];
    t4 = LegP2[24];
    t5 = LegP1[56];
    t6 = LegP2[25];
    t7 = LegP1[65];
    t8 = LegP1[64];
    t9 = LegP1[63];
    t10 = LegP2[22];
    t11 = LegP1[60];
    t12 = LegP1[59];
    t13 = LegP2[26];
    t14 = LegP1[62];
    t15 = LegP2[27];
    t16 = LegP1[61];
    t17 = LegP2[21];
    t18 = LegP1[55];
    t19 = t7 * t4;
    t20 = t8 * t2;
    t21 = t9 * t10;
    t22 = t14 * t15;
    t23 = t11 * t6;
    t24 = t12 * t13;
    t25 = t11 * t15;
    t26 = t8 * t15;
    t27 = t14 * t6;
    t28 = t16 * t4;
    t29 = t1 * t15;
    t30 = t29 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t31 = t8 * t6;
    t32 = t9 * t4;
    t33 = t32 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t34 = t14 * t2;
    t35 = cosP2_5 * t13;
    t36 = cosP2_3 * t4;
    t37 = cosP2_1 * t10;
    t38 = sinP2_5 * t13;
    t39 = sinP2_3 * t4;
    t40 = t10 * sinP2_1;
    t41 = sinP1_1 * t5;
    t42 = sinP1_3 * t1;
    t43 = sinP1_5 * t11;
    t44 = cosP1_5 * t11;
    t45 = cosP1_3 * t1;
    t46 = -0.22579266388593028814e-2 * t41 - 0.20906728137586137788e-4 * t42;
    t47 = 0.32961146094199035034e-2 * t18;
    t46 = t17 * t46 + t2 * ((-0.33930591567557830186e-4 * t41 + 0.69071241337792944357e-8 * t43 + 0.67689816511037085460e-6 * t42) * cosP2_2 + (0.41093016998433777025e-8 * t44 + 0.40271156658465101472e-6 * t45) * sinP2_2) + t3 * ((-0.52226018766803779018e-7 * t38 - 0.11424441605238326661e-5 * t39 + 0.47786807171625457804e-4 * t40) * cosP1_2 + (0.32641261729252361886e-7 * t35 + 0.12142549363281878620e-4 * t37 - 0.30029960790912172940e-6 * t36) * sinP1_2) + t4 * (t12 * (0.9326074779786389111e-9 * sinP1_4 * cosP2_3 - 0.14805143712910892714e-7 * cosP1_4 * sinP2_3) - 0.46317950393809101518e-4 * sinP2_3 * t18) + t6 * (t1 * (-0.85683312039287449958e-8 * cosP1_3 * sinP2_4 + 0.25296977840170580464e-7 * cosP2_4 * sinP1_3) + t5 * (0.27320736067384226902e-5 * cosP2_4 * sinP1_1 - 0.92537977002430445954e-6 * cosP1_1 * sinP2_4)) - 0.65573963295373048408e-11 * t34 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t47 * t10 * sinP2_1;
    t48 = t12 * (-0.53858081853266397113e-6 * sinP1_4 * cosP2_1 - 0.19584757037551417130e-6 * cosP1_4 * sinP2_1) + t16 * (-0.60619486068611529218e-8 * cosP1_6 * sinP2_1 - 0.20983668254519375494e-8 * sinP1_6 * cosP2_1);
    t49 = 0.26521025155017544035e-8 * sinP1_7 * t14 + 0.21216820124014035226e-6 * t43;
    t50 = -0.10771616370653279423e-5 * t38 * t18;
    t51 = 0.22440867438860998800e-7 * t41 * t15 * cosP2_6;
    t30 = t46 + t51 + t50 + 0.83303220038196131906e-9 * t30 + 0.14571991843416232986e-9 * t23 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.28109552167083782764e-14 * t26 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - 0.26985170080400431456e-13 * t19 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) - 0.33731462600500539320e-13 * t31 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t10 * t48 + t49 * t17 - 0.15179158170225242694e-12 * t22 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.12143326536180194150e-12 * t20 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + 0.18214989804270291233e-11 * t27 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.10254364630552163954e-11 * t33 + 0.85003285753261359092e-11 * t25 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.29143983686832465976e-10 * t21 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.87431951060497397915e-10 * t28 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.40801577161565452360e-9 * t24 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t31 = t31 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t25 = t25 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t26 = t26 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t27 = t27 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t28 = t28 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t29 = t29 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t33 = cosP1_1 * t5;
    t46 = -0.22579266388593028814e-2 * t33 - 0.26521025155017544035e-8 * cosP1_7 * t14 + 0.21216820124014035226e-6 * t44 + 0.20906728137586137788e-4 * t45;
    t48 = -0.10771616370653279423e-5 * t35 + 0.46317950393809101518e-4 * t36;
    t47 = t37 * (0.60619486068611529218e-8 * cosP1_6 * t16 + t47);
    t18 = t47 + 0.83303220038196131906e-9 * t29 + 0.14571991843416232986e-9 * t23 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.28109552167083782764e-14 * t26 + 0.26985170080400431456e-13 * t19 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) - 0.33731462600500539320e-13 * t31 + t17 * t46 + t18 * t48 - 0.15179158170225242694e-12 * t22 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.12143326536180194150e-12 * t20 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - 0.18214989804270291233e-11 * t27 - 0.10254364630552163954e-11 * t32 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.65573963295373048408e-11 * t34 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - 0.85003285753261359092e-11 * t25 - 0.29143983686832465976e-10 * t21 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) - 0.87431951060497397915e-10 * t28 - 0.40801577161565452360e-9 * t24 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t8 = t8 * t4 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3);
    t19 = t9 * t2 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2);
    t14 = t14 * t10 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1);
    t20 = t11 * t10 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1);
    t7 = t7 * t6 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4);
    t21 = t1 * t4 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3);
    t22 = -0.83626912550344551158e-4 * sinP1_2 * t3 + 0.31825230186021052840e-7 * t16 * sinP1_6;
    t23 = t3 * (-0.34273324815714979982e-7 * cosP1_2 * sinP2_4 + 0.10118791136068232187e-6 * cosP2_4 * sinP1_2) * t6;
    t24 = (0.32874413598747021618e-7 * cosP1_4 * sinP2_2 + 0.55256993070234355486e-7 * sinP1_4 * cosP2_2) * t12 * t2;
    t1 = t23 + t24 + 0.59929356534907336430e-4 * t5 * t10 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.84214455261471093672e-6 * t5 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.24480946296939271418e-8 * t1 * t13 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.87431951060497397914e-9 * t11 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.40801577161565452365e-9 * t14 + 0.68002628602609087272e-10 * t12 * t15 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.21857987765124349478e-10 * t16 * t6 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.33731462600500539320e-13 * t7 + t22 * t17 - 0.44975283467334052430e-13 * t9 * t15 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) - 0.48573306144720776620e-12 * t8 - 0.19429322457888310641e-11 * t19 - 0.19584757037551417133e-7 * t5 * t13 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.40801577161565452356e-7 * t20 - 0.41617608704796761412e-7 * t21 - 0.10281997444714493995e-5 * t1 * t10 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    bf[0] = t30;
    bf[1] = t12 * ((0.14805143712910892714e-7 * t36 - 0.19584757037551417130e-6 * t37) * cosP1_4 + (0.9326074779786389111e-9 * t39 + 0.53858081853266397113e-6 * t40) * sinP1_4) + t2 * ((-0.69071241337792944357e-8 * t44 + 0.67689816511037085460e-6 * t45 + 0.33930591567557830186e-4 * t33) * cosP2_2 + (0.41093016998433777025e-8 * t43 - 0.40271156658465101472e-6 * t42) * sinP2_2) + t3 * ((-0.47786807171625457804e-4 * t37 + 0.52226018766803779018e-7 * t35 - 0.11424441605238326661e-5 * t36) * cosP1_2 + (0.12142549363281878620e-4 * t40 + 0.32641261729252361886e-7 * t38 + 0.30029960790912172940e-6 * t39) * sinP1_2) + t6 * ((-0.25296977840170580464e-7 * t45 + 0.27320736067384226902e-5 * t33) * cosP2_4 + (-0.85683312039287449958e-8 * t42 + 0.92537977002430445954e-6 * t41) * sinP2_4) + t18 - 0.22440867438860998800e-7 * t33 * t15 * cosP2_6 - 0.20983668254519375494e-8 * t40 * t16 * sinP1_6;
    bf[2] = t1;
}

static void idsbf_7_6_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t6, t7, t8, t9;
    t1 = LegP1[64];
    t2 = LegP2[25];
    t3 = LegP1[63];
    t4 = LegP2[24];
    t5 = LegP1[62];
    t6 = LegP2[23];
    t7 = LegP1[61];
    t8 = LegP2[22];
    t9 = LegP1[59];
    t10 = LegP1[58];
    t11 = LegP1[57];
    t12 = LegP1[56];
    t13 = LegP1[65];
    t14 = LegP2[21];
    t15 = LegP1[55];
    t16 = LegP2[26];
    t17 = LegP1[60];
    t18 = LegP2[27];
    t19 = t1 * t2;
    t20 = t3 * t4;
    t21 = t5 * t6;
    t22 = t13 * t4;
    t23 = t1 * t6;
    t24 = t3 * t8;
    t25 = t5 * t18;
    t26 = t17 * t2;
    t27 = t9 * t16;
    t28 = t17 * t18;
    t29 = t28 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t30 = t1 * t18;
    t31 = t30 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t32 = t5 * t2;
    t33 = t32 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t34 = t7 * t4;
    t35 = t34 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t36 = t10 * t18;
    t37 = t36 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t38 = t13 * t16;
    t39 = t38 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5);
    t40 = t7 * t16;
    t41 = t40 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t42 = t3 * t16;
    t43 = 0.57964794775281850650e-3;
    t44 = sinP2_5 * t16;
    t45 = sinP2_3 * t4;
    t46 = sinP2_1 * t8;
    t47 = t46 * t43 + 0.34670751132822680332e-6 * t44 - 0.84443846403163036676e-4 * t45;
    t48 = sinP1_3 * t10;
    t49 = sinP1_1 * t12;
    t50 = 0.10684360903797436158e-8 * sinP1_7 * t5 + 0.84004719170016962048e-3 * t49 - 0.53849178955139078242e-5 * t48;
    t29 = -0.49552963517116085355e-11 * t41 - 0.22259085216244658662e-11 * t29 - 0.83913218077112800514e-12 * t20 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - 0.28830815137231176937e-10 * t26 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.24643987203699443522e-10 * t35 + 0.18019259460769485586e-10 * t24 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.41220528178230849376e-13 * t19 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t47 * t15 + t50 * t14 + 0.26498910971719831743e-12 * t23 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) - 0.25173965423133840154e-12 * t25 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.10599564388687932697e-12 * t33 + 0.16193778927162119397e-13 * t42 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.22082425809766526452e-14 * t22 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + 0.46744078954113783192e-9 * t37 - 0.15581359651371261064e-9 * t27 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.90626275523281824556e-10 * t21 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.73608086032555088170e-15 * t31 + 0.56678226245067417888e-14 * t39;
    t31 = cosP2_5 * t16;
    t33 = cosP2_3 * t4;
    t35 = cosP1_5 * t17;
    t37 = cosP1_3 * t10;
    t39 = cosP1_1 * t12;
    t41 = t17 * sinP1_5;
    t47 = -0.68939566784026314260e-8 * sinP1_6;
    t50 = 0.41338301115882937516e-8 * cosP1_6;
    t51 = -0.29061461658329026348e-6 * t17;
    t52 = t7 * t8 * (t47 * cosP2_1 + t50 * sinP2_1);
    t38 = t38 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t19 = t19 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t28 = t28 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t30 = t30 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t32 = t32 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t34 = t34 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t36 = t36 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t40 = t40 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t20 = t20 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t21 = t21 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t53 = 0.53849178955139078242e-5 * t37 + 0.84004719170016962048e-3 * t39 - 0.10684360903797436158e-8 * cosP1_7 * t5 + t51 * cosP1_5;
    t54 = 0.34670751132822680332e-6 * t31 + 0.84443846403163036676e-4 * t33;
    t19 = -0.49552963517116085355e-11 * t40 + 0.22259085216244658662e-11 * t28 - 0.28830815137231176937e-10 * t26 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.24643987203699443522e-10 * t34 - 0.18019259460769485586e-10 * t24 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + 0.41220528178230849376e-13 * t19 + t53 * t14 - 0.83913218077112800514e-12 * t20 - 0.26498910971719831743e-12 * t23 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - 0.25173965423133840154e-12 * t25 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.10599564388687932697e-12 * t32 - 0.16193778927162119397e-13 * t42 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - 0.22082425809766526452e-14 * t22 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + 0.46744078954113783192e-9 * t36 + 0.15581359651371261064e-9 * t27 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - 0.90626275523281824556e-10 * t21 + t54 * t15 - 0.73608086032555088170e-15 * t30 + 0.56678226245067417888e-14 * t38;
    t20 = t9 * t4 * (0.39112392594258471649e-8 * sinP1_4 * sinP2_3 + 0.79178745983498857249e-8 * cosP1_4 * cosP2_3);
    t19 = t11 * (t16 * (0.25731502509978825414e-7 * sinP1_2 * sinP2_5 + 0.30984646621012564858e-7 * cosP1_2 * cosP2_5) + t4 * (0.10043299249569589989e-5 * cosP1_2 * cosP2_3 + 0.27512229327278398098e-6 * sinP1_2 * sinP2_3)) + t2 * ((0.81913433595780343884e-8 * t37 + 0.12778495640941733645e-5 * t39) * cosP2_4 + (0.12821233084556923390e-7 * t48 + 0.20001123611908800489e-5 * t49) * sinP2_4) + t6 * ((0.80132706778480771179e-9 * t35 + 0.16827868423480961948e-6 * t37) * cosP2_2 + (0.41847080206539958286e-8 * t41 + 0.87878868433733912404e-6 * t48 + 0.61349600309604878416e-4 * t49) * sinP2_2) + t8 * ((0.48613842112278334520e-6 * cosP1_4 * t9 + t15 * t43 - t50 * t7 + 0.32587300756582180283e-4 * cosP1_2 * t11) * cosP2_1 + (-0.17629195491265769661e-6 * sinP1_4 * t9 + t47 * t7 + 0.23804756093660687760e-4 * sinP1_2 * t11) * sinP2_1) + t19 + 0.58763984970885898864e-8 * t49 * t18 * sinP2_6 + t20;
    t20 = t12 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    t21 = t12 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t22 = t10 * t16 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t23 = t9 * t18 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t1 = t1 * t4 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3);
    t24 = t5 * t8 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1);
    t25 = t17 * t8 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1);
    t26 = t9 * (0.12554124061961987487e-6 * cosP1_4 * sinP2_2 - 0.24039812033544231358e-7 * sinP1_4 * cosP2_2) + 0.67484560340565366262e-3 * sinP2_2 * t15;
    t27 = t2 * (0.33335206019848000818e-6 * cosP1_2 * sinP2_4 - 0.21297492734902889410e-6 * cosP2_4 * sinP1_2) - 0.14000786528336160343e-3 * sinP1_2 * t14;
    t15 = 0.64640383467974488750e-7 * t15 * t18 * sinP2_6;
    t28 = 0.36326827072911282940e-7 * t7 * sinP1_6 * t14;
    t1 = -0.78860759051838219261e-9 * t17 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.43627807023839530980e-8 * t22 - 0.63037729332404873332e-7 * t12 * t16 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.43378505269417590800e-5 * t10 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.15353426618756915759e-4 * t21 - 0.10539053595505791027e-3 * t20 + t28 + 0.88329703239066105802e-13 * t1 + 0.58297604137783629829e-12 * t5 * t16 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + t26 * t6 + t27 * t11 - 0.41220528178230849378e-14 * t13 * t2 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) + 0.36038518921538971174e-11 * t7 * t2 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.10069586169253536062e-10 * t3 * t6 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) - 0.66777255648733975988e-10 * t23 - 0.56092894744936539835e-7 * t10 * t4 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.44162025069029402790e-7 * t25 + 0.64869334058770148100e-9 * t24 + t15 + 0.27971072692370933506e-13 * t3 * t18 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6);
    bf[0] = t11 * ((-0.30984646621012564858e-7 * t44 + 0.10043299249569589989e-5 * t45 - 0.32587300756582180283e-4 * t46) * cosP1_2 + (0.25731502509978825414e-7 * t31 + 0.23804756093660687760e-4 * cosP2_1 * t8 - 0.27512229327278398098e-6 * t33) * sinP1_2) + t2 * ((-0.81913433595780343884e-8 * t48 + 0.12778495640941733645e-5 * t49) * cosP2_4 + (0.12821233084556923390e-7 * t37 - 0.20001123611908800489e-5 * t39) * sinP2_4) + t6 * ((0.16827868423480961948e-6 * t48 - 0.80132706778480771179e-9 * t41) * cosP2_2 + (-0.87878868433733912404e-6 * t37 + 0.41847080206539958286e-8 * t35 + 0.61349600309604878416e-4 * t39) * sinP2_2) + t9 * (t4 * (0.39112392594258471649e-8 * sinP1_4 * cosP2_3 - 0.79178745983498857249e-8 * cosP1_4 * sinP2_3) + t8 * (0.48613842112278334520e-6 * cosP1_4 * sinP2_1 + 0.17629195491265769661e-6 * sinP1_4 * cosP2_1)) + t29 + t51 * sinP1_5 * t14 + 0.58763984970885898864e-8 * t39 * t18 * sinP2_6 + t52;
    bf[1] = t19;
    bf[2] = t1;
}

static void idsbf_7_6_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t7, t8, t9;
    t1 = LegP1[79];
    t2 = LegP2[25];
    t3 = LegP2[27];
    t4 = LegP1[81];
    t5 = LegP1[83];
    t6 = LegP2[21];
    t7 = LegP1[78];
    t8 = LegP2[22];
    t9 = LegP2[26];
    t10 = LegP2[24];
    t11 = LegP1[85];
    t12 = LegP1[89];
    t13 = LegP1[88];
    t14 = LegP1[87];
    t15 = LegP2[23];
    t16 = LegP1[86];
    t17 = LegP1[82];
    t18 = LegP1[80];
    t19 = LegP1[84];
    t20 = t4 * t3;
    t21 = LegP1[90] * t9;
    t22 = t12 * t2;
    t23 = t13 * t10;
    t24 = t14 * t15;
    t25 = t16 * t8;
    t26 = t11 * t3;
    t27 = t19 * t9;
    t28 = t5 * t2;
    t29 = t17 * t9;
    t30 = t5 * t3;
    t31 = t14 * t3;
    t32 = t16 * t9;
    t33 = t11 * t2;
    t34 = t33 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t35 = t19 * t10;
    t36 = t13 * t9;
    t37 = t36 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5);
    t38 = t14 * t2;
    t39 = t38 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t40 = t16 * t10;
    t41 = t40 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t42 = t11 * t15;
    t43 = t42 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t44 = sinP2_6 * t3;
    t45 = 0.56262232170912206708e-8 * t44;
    t46 = sinP2_2 * t15;
    t47 = 0.58737770386432343804e-4 * t46;
    t48 = cosP2_5 * t9;
    t49 = sinP2_5 * t9;
    t50 = sinP2_1 * t8;
    t51 = t17 * (-0.59672064423694764712e-9 * sinP1_4 * cosP2_3 - 0.32393406401434300832e-8 * cosP1_4 * sinP2_3) - 0.80848827629600841030e-4 * sinP2_3 * t7;
    t52 = t2 * (-0.78426141813998833582e-8 * cosP2_4 * sinP1_3 + 0.12275396110017208735e-7 * cosP1_3 * sinP2_4) - 0.51556663662072276692e-5 * sinP1_3 * t6;
    t53 = 0.55497065813387800696e-3 * t50 + 0.33194716980838201952e-6 * t49;
    t49 = t1 * ((t45 + t47 - 0.13502935721018929612e-5 * sinP2_4 * t2) * cosP1_1 + (0.56712330028279504360e-3 * t6 + 0.86268755995398716968e-6 * cosP2_4 * t2) * sinP1_1) + t10 * t51 + t18 * ((-0.15940965781758458568e-7 * t49 - 0.17553816437324608493e-4 * t50) * cosP1_2 + (0.10911463208904185544e-7 * t48 + 0.91451701019628205081e-5 * cosP2_1 * t8) * sinP1_2) + t4 * t52 + t5 * (t15 * (-0.76721225687607554602e-9 * sinP1_5 * cosP2_2 + 0.40065528970195056292e-8 * cosP1_5 * sinP2_2) - 0.42963886385060230576e-7 * sinP1_5 * t6) + t7 * t53 + 0.15344245137521510920e-9 * t20 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.11745729486271487758e-16 * t21 * (sinP1_12 * cosP2_5 - cosP1_12 * sinP2_5) - 0.93965835890171902078e-16 * t22 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) + 0.21142313075288677964e-14 * t23 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3);
    t50 = cosP1_4 * t17;
    t51 = 0.22232106288142278043e-6 * t50;
    t52 = 0.80374617387017438147e-9 * cosP1_6 * t19;
    t53 = sinP1_4 * t17;
    t54 = 0.74334343110659764004e-7 * t53;
    t55 = sinP1_6 * t19;
    t56 = -0.18388738220363080546e-8 * t55;
    t57 = (t56 - t54) * cosP2_1 + (t51 - t52) * sinP2_1;
    t58 = (-0.28847180858540440528e-6 * cosP1_3 * sinP2_2 + 0.55239282495077439316e-7 * sinP1_3 * cosP2_2) * t15 * t4;
    t59 = (0.78511387620318397536e-6 * cosP1_2 * sinP2_3 - 0.43986836060894997964e-6 * cosP2_3 * sinP1_2) * t18 * t10;
    t60 = 0.10229496758347673947e-8 * t11;
    t61 = t60 * sinP1_7 * t6;
    t34 = t49 - 0.14094875383525785310e-13 * t26 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t59 - 0.14918016105923691173e-9 * t29 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.23594821392022164611e-10 * t35 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t8 * t57 + 0.23491458972542975516e-16 * t37 + 0.70474376917628926548e-15 * t31 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + 0.56379501534103141246e-15 * t39 - 0.21311451579890987386e-11 * t30 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t58 + t61 - 0.46513088765635091521e-12 * t27 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.25370775690346413562e-12 * t24 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + 0.17252127469435561221e-10 * t25 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) - 0.50741551380692827120e-11 * t43 - 0.42622903159781974784e-11 * t28 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.10148310276138565425e-12 * t34 - 0.25370775690346413556e-13 * t41 + 0.15504362921878363840e-13 * t32 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t33 = t33 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t37 = t42 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t21 = t21 * (cosP1_12 * cosP2_5 + sinP1_12 * sinP2_5);
    t22 = t22 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4);
    t24 = t24 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2);
    t25 = t25 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1);
    t39 = -t60 * cosP1_7 + 0.51556663662072276692e-5 * t4 * cosP1_3 - 0.42963886385060230576e-7 * t5 * cosP1_5 + 0.56712330028279504360e-3 * t1 * cosP1_1;
    t41 = t18 * (0.91451701019628205081e-5 * sinP1_2 * sinP2_1 + 0.17553816437324608493e-4 * cosP1_2 * cosP2_1) + 0.55497065813387800696e-3 * cosP2_1 * t7;
    t42 = 0.80848827629600841030e-4 * cosP2_3 * t10 + 0.33194716980838201952e-6 * t48;
    t21 = t47 * t1 * sinP1_1 - 0.14094875383525785310e-13 * t26 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.14918016105923691173e-9 * t29 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t39 * t6 + t41 * t8 + 0.11745729486271487758e-16 * t21 - 0.21142313075288677964e-14 * t23 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) - 0.70474376917628926548e-15 * t31 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + 0.93965835890171902078e-16 * t22 + 0.21311451579890987386e-11 * t30 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.46513088765635091521e-12 * t27 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.25370775690346413562e-12 * t24 + t42 * t7 - 0.17252127469435561221e-10 * t25 - 0.50741551380692827120e-11 * t37 - 0.42622903159781974784e-11 * t28 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.10148310276138565425e-12 * t33 - 0.15504362921878363840e-13 * t32 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t22 = t4 * cosP1_3;
    t23 = sinP1_3 * t4;
    t24 = (0.86268755995398716968e-6 * t1 * cosP1_1 + 0.78426141813998833582e-8 * t22) * cosP2_4 + (0.13502935721018929612e-5 * t1 * sinP1_1 + 0.12275396110017208735e-7 * t23) * sinP2_4;
    t25 = (0.10911463208904185544e-7 * sinP1_2 * sinP2_5 + 0.15940965781758458568e-7 * cosP1_2 * cosP2_5) * t18 * t9;
    t20 = t10 * ((0.78511387620318397536e-6 * cosP1_2 * t18 + 0.32393406401434300832e-8 * t50) * cosP2_3 + (-0.59672064423694764712e-9 * t53 + 0.43986836060894997964e-6 * sinP1_2 * t18) * sinP2_3) + t15 * ((0.76721225687607554602e-9 * t5 * cosP1_5 + 0.55239282495077439316e-7 * t22) * cosP2_2 + (0.28847180858540440528e-6 * t23 + 0.40065528970195056292e-8 * sinP1_5 * t5) * sinP2_2) + t2 * t24 + t8 * ((t51 + t52) * cosP2_1 + (t56 + t54) * sinP2_1) + 0.23594821392022164611e-10 * t35 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.23491458972542975516e-16 * t36 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + 0.56379501534103141246e-15 * t38 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - 0.25370775690346413556e-13 * t40 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.15344245137521510920e-9 * t20 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t21 + t45 * t1 * sinP1_1 + t25;
    t21 = t4 * t10 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3);
    t22 = t1 * t9 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5);
    t23 = t16 * t3 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6);
    t24 = t11 * t9 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5);
    t19 = t19 * t2 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4);
    t25 = t5 * t10 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t26 = t4 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    t27 = t1 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    t1 = t1 * t10 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t28 = 0.12275396110017208736e-7;
    t29 = t2 * (-0.24550792220034417473e-6 * cosP1_2 * sinP2_4 + 0.15685228362799766719e-6 * cosP2_4 * sinP1_2) + 0.10311332732414455338e-3 * sinP1_2 * t6;
    t30 = t46 * (-0.70485324463718812560e-3 * t7 - 0.64104846352312090064e-7 * t50);
    t7 = -0.67514678605094648040e-7 * t44 * t7;
    t1 = t30 - 0.12685387845173206779e-13 * t14 * t10 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) - 0.56379501534103141238e-14 * t23 + 0.34524551559423399570e-7 * t21 + 0.55324528301397003260e-7 * t22 - 0.17252127469435561221e-9 * t11 * t8 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + t18 * t29 + 0.23491458972542975518e-16 * t12 * t9 * (sinP1_11 * cosP2_5 - cosP1_11 * sinP2_5) + t28 * (t53 * t15 * cosP2_2 - t55 * t6) + 0.18498339971345377053e-7 * t5 * t8 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.37586334356068760834e-15 * t13 * t2 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) + 0.34098322527825579820e-10 * t17 * t3 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.20296620552277130847e-11 * t16 * t15 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) - 0.12177972331366278509e-11 * t19 + t7 + 0.33032749948831030453e-9 * t25 + 0.26852428990662644108e-8 * t4 * t9 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.15504362921878363841e-12 * t24 + 0.92495109688979667830e-4 * t27 + 0.13474804604933473505e-4 * t1 + 0.26698986539287428998e-5 * t26;
    bf[0] = t34;
    bf[1] = t20;
    bf[2] = t1;
}

static void idsbf_7_6_12_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t7, t8, t9;
    t1 = LegP1[86];
    t2 = LegP2[22];
    t3 = LegP1[83];
    t4 = LegP2[23];
    t5 = LegP1[82];
    t6 = LegP2[24];
    t7 = LegP1[81];
    t8 = LegP2[25];
    t9 = LegP1[80];
    t10 = LegP2[26];
    t11 = LegP1[85];
    t12 = LegP2[27];
    t13 = LegP1[84];
    t14 = LegP1[87];
    t15 = LegP1[88];
    t16 = LegP1[79];
    t17 = LegP1[89];
    t18 = LegP1[90];
    t19 = LegP2[21];
    t20 = LegP1[78];
    t21 = t17 * t12;
    t22 = t7 * t12;
    t23 = t18 * t10;
    t24 = t17 * t8;
    t25 = t15 * t6;
    t26 = t14 * t4;
    t27 = t1 * t2;
    t28 = t11 * t12;
    t29 = t28 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t30 = t13 * t10;
    t31 = t30 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t32 = t3 * t8;
    t33 = t32 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t34 = t5 * t10;
    t35 = t34 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t36 = t3 * t12;
    t37 = t36 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t38 = t14 * t12;
    t39 = t1 * t10;
    t40 = t39 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t41 = t11 * t8;
    t42 = t41 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t43 = t13 * t6;
    t44 = t43 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t45 = t15 * t10;
    t46 = t45 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5);
    t47 = t14 * t8;
    t48 = t47 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t49 = t1 * t6;
    t50 = t49 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t51 = t11 * t4;
    t52 = t51 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t53 = 0.23524421059044614932e-8 * cosP2_6 * t12;
    t54 = cosP2_4 * t8;
    t55 = cosP2_2 * t4;
    t56 = (0.13562130335681003131e-5 * t54 + t53 + 0.12110371961196167766e-3 * t55) * sinP1_1 - 0.10589608618271468198e-5 * cosP1_1 * t8 * sinP2_4;
    t57 = -0.84054566014817104880e-6 * t9 * cosP1_2 * t6 * sinP2_3;
    t29 = t57 - 0.24504605269838140552e-10 * t44 + 0.10412213228209612836e-10 * t27 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.19747300950052713998e-12 * t26 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) - 0.29466817303797667812e-13 * t29 - 0.13554735959746927193e-13 * t40 + 0.37400191193281655298e-14 * t25 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t16 * t56 + 0.43882891000117142220e-14 * t48 + 0.31416160602356590450e-12 * t50 - 0.15452398994111497001e-11 * t31 + 0.89107655526684147458e-12 * t37 - 0.62233918145620674426e-12 * t42 + 0.83761196195083098612e-10 * t35 - 0.78414736863482049766e-10 * t33 + 0.37777970902304702318e-18 * t23 * (sinP1_12 * cosP2_5 - cosP1_12 * sinP2_5) + 0.17377866615060163067e-16 * t46 - 0.29466817303797667810e-15 * t38 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + 0.66489228788056276089e-16 * t24 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) - 0.45333565082765642788e-17 * t21 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) + 0.19747300950052713998e-10 * t52 + 0.12831502395842517234e-9 * t22 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t31 = -0.46019413452545437510e-2;
    t33 = cosP1_4 * t5;
    t35 = sinP1_6 * t13;
    t37 = sinP1_4 * t5;
    t40 = sinP1_2 * t9;
    t42 = sinP1_5 * t3;
    t44 = sinP1_1 * t16;
    t46 = 0.68401778156298957260e-7 * t42 + 0.54287125520872188306e-9 * sinP1_7 * t11 + 0.18258714649188068325e-2 * t44;
    t48 = t3 * (0.11460615387739684196e-8 * cosP1_5 * sinP2_2 + 0.36191417013914792202e-9 * sinP1_5 * cosP2_2) * t4;
    t21 = t21 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6);
    t47 = t47 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t49 = t49 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t50 = t51 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t23 = t23 * (cosP1_12 * cosP2_5 + sinP1_12 * sinP2_5);
    t24 = t24 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4);
    t25 = t25 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3);
    t26 = t26 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2);
    t27 = t27 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1);
    t30 = t30 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t32 = t32 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t34 = t34 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t36 = t36 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t38 = t38 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t39 = t39 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t51 = cosP2_5 * t10;
    t52 = cosP2_3 * t6;
    t56 = cosP2_1 * t2;
    t57 = -0.16702338951921676600e-6 * t51 + 0.11101174297763153785e-3 * t52 + t56 * t31;
    t58 = cosP1_1 * t16;
    t59 = 0.18258714649188068325e-2 * t58 - 0.54287125520872188306e-9 * cosP1_7 * t11;
    t21 = 0.24504605269838140552e-10 * t43 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.10412213228209612836e-10 * t27 - 0.19747300950052713998e-12 * t26 - 0.29466817303797667812e-13 * t28 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.13554735959746927193e-13 * t39 - 0.37400191193281655298e-14 * t25 + t57 * t20 + t59 * t19 + 0.43882891000117142220e-14 * t47 + 0.31416160602356590450e-12 * t49 - 0.15452398994111497001e-11 * t30 - 0.89107655526684147458e-12 * t36 + 0.62233918145620674426e-12 * t41 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.83761196195083098612e-10 * t34 - 0.78414736863482049766e-10 * t32 - 0.37777970902304702318e-18 * t23 + 0.17377866615060163067e-16 * t45 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + 0.29466817303797667810e-15 * t38 - 0.66489228788056276089e-16 * t24 - 0.45333565082765642788e-17 * t21 + 0.19747300950052713998e-10 * t50 + 0.12831502395842517234e-9 * t22 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t22 = cosP1_3 * t7;
    t23 = cosP1_5 * t3;
    t24 = sinP1_3 * t7;
    t25 = 0.68401778156298957260e-7 * t23 - 0.11856308213758485925e-4 * t22;
    t26 = t13 * t2 * (0.53856275318325583644e-9 * sinP1_6 * sinP2_1 + 0.18354218628485358902e-8 * cosP1_6 * cosP2_1);
    t21 = t19 * t25 + t4 * ((-0.12110371961196167766e-3 * t58 - 0.36191417013914792202e-9 * t23 + 0.52115640500037300772e-7 * t22) * cosP2_2 + (-0.16503286158345145243e-6 * t24 + 0.11460615387739684196e-8 * t42) * sinP2_2) + t5 * (t2 * (0.17613156280105198878e-7 * sinP1_4 * sinP2_1 - 0.15875968263437288845e-6 * cosP1_4 * cosP2_1) + t6 * (-0.24730801626175108002e-8 * cosP1_4 * cosP2_3 - 0.41921724707784634298e-8 * sinP1_4 * sinP2_3)) + t8 * ((-0.88065781400525994355e-8 * t22 + 0.13562130335681003131e-5 * t58) * cosP2_4 + (-0.68763692326438105179e-8 * t24 + 0.10589608618271468198e-5 * t44) * sinP2_4) + t9 * ((0.40085613484612023838e-4 * t56 + 0.13634842182590777394e-7 * t51 - 0.84054566014817104880e-6 * t52) * cosP1_2 + (-0.58268181392402815440e-6 * t6 * sinP2_3 + 0.11493516675934152190e-7 * sinP2_5 * t10 - 0.18913634531471870405e-4 * sinP2_1 * t2) * sinP1_2) + t21 + t26 - t58 * t53;
    t22 = t1 * t4 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2);
    t23 = t11 * t2 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1);
    t24 = t3 * t2 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1);
    t25 = t7 * t6 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3);
    t26 = t16 * t10 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5);
    t1 = t1 * t12 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6);
    t27 = t13 * t8 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4);
    t3 = t3 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t28 = t7 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    t30 = t16 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    t32 = 0.65144550625046625962e-8 * t35 + 0.47425232855033943699e-4 * t40;
    t34 = t9 * (-0.27505476930575242070e-7 * cosP1_2 * sinP2_4 + 0.35226312560210397742e-7 * cosP2_4 * sinP1_2) * t8;
    t36 = (0.91684923101917473566e-8 * cosP1_4 * sinP2_2 + 0.28953133611131833758e-8 * sinP1_4 * cosP2_2) * t5 * t4;
    t1 = t36 - 0.74680701774744809296e-11 * t27 - 0.21413255066566252050e-8 * t26 - 0.18976630343645698072e-12 * t11 * t10 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) - 0.47146907686076268496e-14 * t1 + t32 * t19 + 0.13297845757611255218e-14 * t15 * t8 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) + 0.67320344147906979542e-13 * t14 * t6 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) + 0.31595681520084342394e-11 * t22 + 0.71286124421347317964e-11 * t5 * t12 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.14232274740721992031e-5 * t16 * t6 * (cosP1_1 * sinP2_3 - sinP1_1 * cosP2_3) + 0.42343957906280306866e-6 * t28 - 0.24504605269838140550e-9 * t3 + t34 + 0.83111535985070345108e-17 * t17 * t10 * (sinP1_11 * cosP2_5 - cosP1_11 * sinP2_5) - 0.45333565082765642788e-17 * t18 * t12 * (sinP1_12 * cosP2_6 - cosP1_12 * sinP2_6) + 0.14577098519493457971e-9 * t23 + 0.50256717717049859162e-9 * t7 * t10 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.58999248016083894238e-4 * t30 - 0.64842955483264002694e-8 * t24 - 0.51572769244828578882e-8 * t25;
    bf[0] = t10 * (t9 * (-0.13634842182590777394e-7 * cosP1_2 * sinP2_5 + 0.11493516675934152190e-7 * sinP1_2 * cosP2_5) - 0.16702338951921676600e-6 * sinP2_5 * t20) + t19 * t46 + t2 * ((-0.17613156280105198878e-7 * t37 + 0.53856275318325583644e-9 * t35 - 0.18913634531471870405e-4 * t40) * cosP2_1 + (-0.18354218628485358902e-8 * cosP1_6 * t13 + t20 * t31 - 0.15875968263437288845e-6 * t33 - 0.40085613484612023838e-4 * t9 * cosP1_2) * sinP2_1) + t6 * ((-0.41921724707784634298e-8 * t37 + 0.58268181392402815440e-6 * t40) * cosP2_3 + (-0.11101174297763153785e-3 * t20 + 0.24730801626175108002e-8 * t33) * sinP2_3) + t7 * ((-0.68763692326438105179e-8 * t8 * sinP2_4 + 0.16503286158345145243e-6 * sinP2_2 * t4) * cosP1_3 + (0.11856308213758485925e-4 * t19 + 0.88065781400525994355e-8 * t54 + 0.52115640500037300772e-7 * t55) * sinP1_3) + t29 + t48;
    bf[1] = t21;
    bf[2] = t1;
}

static void idsbf_7_6_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t7, t8, t9;
    t1 = LegP1[83];
    t2 = LegP2[21];
    t3 = LegP1[81];
    t4 = LegP1[79];
    t5 = LegP1[78];
    t6 = LegP2[22];
    t7 = LegP2[26];
    t8 = LegP2[24];
    t9 = LegP1[85];
    t10 = LegP1[87];
    t11 = LegP2[25];
    t12 = LegP1[86];
    t13 = LegP2[23];
    t14 = LegP1[84];
    t15 = LegP1[82];
    t16 = LegP1[80];
    t17 = LegP1[89];
    t18 = LegP2[27];
    t19 = LegP1[90];
    t20 = LegP1[88];
    t21 = t15 * t7;
    t22 = t1 * t18;
    t23 = t10 * t18;
    t24 = t12 * t7;
    t25 = t9 * t11;
    t26 = t14 * t8;
    t27 = t20 * t7;
    t28 = t10 * t11;
    t29 = t12 * t8;
    t30 = t29 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t31 = t9 * t13;
    t32 = t31 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t33 = t17 * t18;
    t34 = t33 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6);
    t35 = t3 * t18;
    t36 = t35 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t37 = t19 * t7;
    t38 = t17 * t11;
    t39 = t38 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4);
    t40 = t20 * t8;
    t41 = t40 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3);
    t42 = t10 * t13;
    t43 = t42 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2);
    t44 = t12 * t6;
    t45 = t44 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1);
    t46 = t9 * t18;
    t47 = t46 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t48 = t14 * t7;
    t49 = t1 * t11;
    t50 = 0.29300760698265063576e-2;
    t51 = sinP1_5 * t1;
    t52 = sinP1_3 * t3;
    t53 = sinP1_1 * t4;
    t54 = 0.91212795790327658922e-10 * sinP1_7 * t9 + 0.93912694545721357622e-5 * t52 - 0.31194776160292059349e-7 * t51 - 0.19721665854601485102e-2 * t53;
    t55 = sinP2_5 * t7;
    t56 = sinP2_3 * t8;
    t57 = sinP2_1 * t6;
    t58 = 0.28458392286582229584e-7 * t55 + t57 * t50 - 0.40695500969812588302e-4 * t56;
    t30 = -0.36038863175591564544e-15 * t27 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) + 0.42437067145171226362e-16 * t23 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + 0.21544972550625391846e-16 * t39 - 0.16321948901988933219e-16 * t34 + 0.38780950591125705326e-13 * t43 - 0.17823568200971915073e-13 * t47 + t58 * t5 + 0.18821688020226342319e-10 * t26 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.18614856283740338555e-11 * t45 + 0.65287795607955732870e-18 * t37 * (sinP1_12 * cosP2_5 - cosP1_12 * sinP2_5) - 0.16287999248272796236e-10 * t32 - 0.15399562925639734624e-10 * t21 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.34905675964783398480e-10 * t36 + t54 * t2 - 0.39815109273555724136e-12 * t30 + 0.23527110025282927898e-12 * t25 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.12832969104699778853e-12 * t22 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.10901756110616448274e-13 * t28 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.30554688344523282982e-14 * t24 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.86179890202501567388e-15 * t41;
    t32 = cosP2_5 * t7;
    t34 = cosP2_3 * t8;
    t36 = cosP1_3 * t3;
    t39 = cosP1_1 * t4;
    t41 = cosP1_5 * t1;
    t43 = t14 * (-0.81160773397107876100e-9 * sinP1_6 * cosP2_1 + 0.60312134359318696916e-9 * cosP1_6 * sinP2_1) + t15 * (0.15386295609888414234e-6 * sinP1_4 * cosP2_1 - 0.90066120643249254046e-7 * cosP1_4 * sinP2_1);
    t45 = -0.58897405281754431190e-8 * sinP1_4;
    t47 = 0.56291325402030783794e-8 * cosP1_4;
    t54 = t15 * t8;
    t44 = t44 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1);
    t46 = t46 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t58 = t48 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t59 = t49 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t21 = t21 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t22 = t22 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t23 = t23 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t24 = t24 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t25 = t25 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t35 = t35 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t33 = t33 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6);
    t27 = t27 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t28 = t28 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t29 = t29 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t31 = t31 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t60 = 0.42140311655131378426e-6 * t53 * t11 * sinP2_4;
    t61 = t1 * t13 * (-0.16418303242258978607e-8 * cosP1_5 * cosP2_2 - 0.14072831350507695948e-8 * sinP1_5 * sinP2_2);
    t21 = -0.36038863175591564544e-15 * t27 - 0.42437067145171226362e-16 * t23 - 0.21544972550625391846e-16 * t38 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) - 0.16321948901988933219e-16 * t33 + t61 + t54 * (-t47 * cosP2_3 + t45 * sinP2_3) - 0.38780950591125705326e-13 * t42 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - 0.17823568200971915073e-13 * t46 - 0.80462716286467613412e-10 * t59 - 0.18821688020226342319e-10 * t26 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.18614856283740338555e-11 * t44 - 0.11610781570918847532e-11 * t58 - 0.65287795607955732870e-18 * t37 * (cosP1_12 * cosP2_5 + sinP1_12 * sinP2_5) - 0.16287999248272796236e-10 * t31 + 0.15399562925639734624e-10 * t21 + 0.34905675964783398480e-10 * t35 - 0.39815109273555724136e-12 * t29 + t60 - 0.23527110025282927898e-12 * t25 + 0.12832969104699778853e-12 * t22 - 0.10901756110616448274e-13 * t28 - 0.30554688344523282982e-14 * t24 - 0.86179890202501567388e-15 * t40 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3);
    t22 = sinP1_6 * t14;
    t23 = sinP1_2 * t16;
    t24 = cosP2_4 * t11;
    t25 = sinP2_2 * t13;
    t26 = t18 * sinP2_6;
    t27 = (-0.19721665854601485102e-2 * t2 + 0.36120267132969752938e-6 * t24) * cosP1_1 + (0.33879038436407416170e-9 * t26 + 0.52322786961187613536e-4 * t25) * sinP1_1;
    t21 = t16 * (t7 * (0.38522598949369551534e-8 * cosP1_2 * cosP2_5 + 0.35395303093701174658e-8 * sinP1_2 * sinP2_5) + t8 * (0.25487461223697271551e-6 * cosP1_2 * cosP2_3 + 0.19232869512360517795e-6 * sinP1_2 * sinP2_3)) + t2 * (-0.31194776160292059349e-7 * t41 - 0.91212795790327658922e-10 * cosP1_7 * t9) + t3 * ((-0.93912694545721357622e-5 * t2 + 0.17200127206176072824e-8 * t24 - 0.44657784818944421808e-6 * cosP2_2 * t13) * cosP1_3 + (-0.38278101273380932980e-6 * t25 + 0.20066815073872084961e-8 * t11 * sinP2_4) * sinP1_3) + t4 * t27 + t5 * (0.40695500969812588302e-4 * t34 + 0.28458392286582229584e-7 * t32) + t6 * ((-0.60312134359318696916e-9 * cosP1_6 * t14 + t5 * t50 - 0.90066120643249254046e-7 * cosP1_4 * t15 - 0.13172170144075203407e-4 * cosP1_2 * t16) * cosP2_1 + (-0.81160773397107876100e-9 * t22 - 0.45370808274036811736e-4 * t23 - 0.15386295609888414234e-6 * sinP1_4 * t15) * sinP2_1) + t21;
    t24 = t4 * t8 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t27 = t3 * t7 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t28 = t15 * t18 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t19 = t19 * t18 * (sinP1_12 * cosP2_6 - cosP1_12 * sinP2_6);
    t22 = 0.34660862400324510393e-8 * t22 + 0.28173808363716407288e-3 * t23;
    t23 = 0.44042749967329641022e-8 * t26 + 0.68019623049543897596e-3 * t25;
    t1 = -0.45078093381946251662e-3 * t4 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.12221875337809313193e-12 * t9 * t7 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.89403018096075126010e-11 * t14 * t11 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + t22 * t2 + t23 * t5 - 0.43632094955979248100e-11 * t28 - 0.62608463030480905088e-5 * t24 + 0.13601624084990777681e-17 * t19 + 0.74459425134961354222e-10 * t9 * t6 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + 0.17823568200971915074e-14 * t12 * t18 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) - 0.37527550268020522526e-8 * t1 * t6 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.67758076872814832342e-9 * t1 * t8 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.43782141979357276288e-8 * t4 * t7 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.41697278075578358363e-8 * t3 * t8 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.39028652278741343426e-5 * t3 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.49278601362047150794e-9 * t27;
    t1 = 0.31338141891818751778e-16 * t17 * t7 * (sinP1_11 * cosP2_5 - cosP1_11 * sinP2_5) + 0.99106873732876802498e-15 * t20 * t11 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) + 0.37919151689100689652e-13 * t10 * t8 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) + 0.16287999248272796236e-11 * t12 * t13 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + t1 + (-0.51600381618528218480e-7 * cosP2_4 * sinP1_2 + 0.60200445221616254892e-7 * cosP1_2 * sinP2_4) * t16 * t11 + t15 * t13 * (0.55822231023680527260e-7 * sinP1_4 * cosP2_2 - 0.47847626591726166224e-7 * cosP1_4 * sinP2_2);
    bf[0] = t11 * ((-0.17200127206176072824e-8 * t52 + 0.36120267132969752938e-6 * t53) * cosP2_4 + (-0.42140311655131378426e-6 * t39 + 0.20066815073872084961e-8 * t36) * sinP2_4) + t13 * ((-0.44657784818944421808e-6 * t52 + 0.16418303242258978607e-8 * t51) * cosP2_2 + (-0.14072831350507695948e-8 * t41 + 0.38278101273380932980e-6 * t36 + 0.52322786961187613536e-4 * t39) * sinP2_2) + t16 * ((-0.38522598949369551534e-8 * t55 + 0.25487461223697271551e-6 * t56 + 0.13172170144075203407e-4 * t57) * cosP1_2 + (-0.19232869512360517795e-6 * t34 + 0.35395303093701174658e-8 * t32 - 0.45370808274036811736e-4 * cosP2_1 * t6) * sinP1_2) + t6 * t43 - 0.11610781570918847532e-11 * t48 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.80462716286467613412e-10 * t49 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t30 + 0.33879038436407416170e-9 * t39 * t18 * sinP2_6 + t54 * (t45 * cosP2_3 + t47 * sinP2_3);
    bf[1] = t21;
    bf[2] = t1;
}

static void idsbf_7_8_1_2_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[3];
    t2 = LegP2[43];
    t3 = LegP1[4];
    t4 = LegP2[42];
    t5 = LegP1[5];
    t6 = LegP2[41];
    t7 = LegP2[38];
    t8 = LegP2[39];
    t9 = LegP2[37];
    t10 = t5 * t2;
    t11 = t5 * t6;
    t12 = t5 * t8;
    t5 = t5 * t9;
    t13 = 0.44495361266758399946e-3;
    t14 = 0.21188267269884952354e-4;
    t15 = 0.10594133634942476177e-4;
    t16 = 0.40746667826701831450e-7;
    t17 = 0.13582222608900610484e-7;
    t18 = 0.67911113044503052418e-8;
    t19 = -0.25425920723861942826e-3 * t7 * sinP2_2 - 0.54328890435602441932e-7 * t4 * sinP2_6;
    t4 = t1 * (0.50851841447723885644e-3 * t7 * sinP2_2 + 0.10865778087120488386e-6 * t4 * sinP2_6) - t14 * t3 * t8 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - t17 * t3 * t2 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) - 0.81493335653403662898e-7 * t3 * t6 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.88990722533516799886e-3 * t3 * t9 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    bf[0] = t1 * (sinP2_7 * t2 * t17 - 0.81493335653403662900e-7 * sinP2_5 * t6 + sinP2_3 * t8 * t14 - 0.88990722533516799892e-3 * sinP2_1 * t9) + t18 * t10 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + t16 * t11 * (cosP1_2 * sinP2_5 + sinP1_2 * cosP2_5) + t15 * t12 * (-cosP1_2 * sinP2_3 + sinP1_2 * cosP2_3) + t13 * t5 * (cosP1_2 * sinP2_1 + sinP1_2 * cosP2_1) + t3 * cosP1_1 * t19;
    bf[1] = t1 * (-cosP2_7 * t2 * t17 - 0.81493335653403662900e-7 * cosP2_5 * t6 - cosP2_3 * t8 * t14 - 0.88990722533516799892e-3 * cosP2_1 * t9) - t13 * t5 * (cosP1_2 * cosP2_1 - sinP1_2 * sinP2_1) - t15 * t12 * (cosP1_2 * cosP2_3 + sinP1_2 * sinP2_3) - t16 * t11 * (cosP1_2 * cosP2_5 - sinP1_2 * sinP2_5) - t18 * t10 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t3 * sinP1_1 * t19;
    bf[2] = t4;
}

static void idsbf_7_8_3_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[10];
    t2 = LegP2[41];
    t3 = LegP2[43];
    t4 = LegP1[13];
    t5 = LegP2[36];
    t6 = LegP2[39];
    t7 = LegP1[11];
    t8 = LegP2[37];
    t9 = LegP1[12];
    t10 = LegP2[40];
    t11 = LegP2[42];
    t12 = LegP2[44];
    t13 = LegP1[14];
    t14 = t13 * t8;
    t15 = t4 * cosP1_3;
    t16 = t9 * t3;
    t17 = t4 * t12;
    t18 = t13 * t6;
    t19 = t7 * t12;
    t13 = t13 * t2;
    t20 = 0.40775617700501740002e-3;
    t21 = 0.18534371682046245457e-4;
    t22 = 0.73549093976373989904e-7;
    t23 = -0.44129456385824393942e-7;
    t24 = 0.61290911646978324918e-8;
    t25 = 0.40860607764652216614e-9;
    t26 = 0.10215151941163054153e-9;
    t27 = 0.61290911646978324918e-9;
    t28 = cosP2_4 * t10;
    t20 = -t20 * t5 - 0.68645821044615723914e-7 * t28;
    t28 = 0.24465370620301044000e-2 * t5 + 0.41187492626769434346e-6 * t28;
    t29 = sinP2_5 * t2;
    t30 = sinP2_3 * t6;
    t31 = sinP2_1 * t8;
    t32 = cosP2_5 * t2;
    t33 = cosP2_3 * t6;
    t34 = cosP2_1 * t8;
    t35 = sinP2_2 * LegP2[38];
    t36 = 0.75902664983617957588e-4 * t35;
    t37 = t10 * sinP2_4;
    t38 = 0.26477673831494636366e-6 * t37;
    t39 = t1 * (-0.56838739824941819401e-3 * t31 - 0.47071420144879353543e-6 * t29 - 0.24712495576061660611e-4 * t30 + 0.49032729317582659942e-8 * sinP2_7 * t3) + t7 * ((t38 + t36) * cosP1_1 + sinP1_1 * t28) + t9 * ((0.10296873156692358585e-4 * t31 + 0.51484365783461792934e-7 * t29 + 0.19122764433857237377e-5 * t30) * cosP1_2 + (-0.22064728192912196973e-5 * t33 + 0.84434359884877340408e-4 * t34 + 0.26968001124670462966e-7 * t32) * sinP1_2) - t21 * t14 * (-cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t23 * (t7 * cosP1_1 * t11 * sinP2_6 + t15 * t10 * sinP2_4) + t25 * t16 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - t26 * t17 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + t22 * t18 * (cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) + t27 * t19 * (-cosP1_1 * sinP2_8 + sinP1_1 * cosP2_8) + t24 * t13 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t20 * t4 * sinP1_3;
    t35 = -0.30361065993447183034e-3 * t35 + 0.17651782554329757576e-6 * t11 * sinP2_6;
    t2 = t1 * t35 + t9 * (t10 * (0.27458328417846289566e-6 * cosP2_4 * sinP1_2 + 0.17651782554329757578e-6 * cosP1_2 * sinP2_4) + 0.16310247080200696002e-2 * sinP1_2 * t5) - 0.14709818795274797981e-6 * t4 * t6 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.23535710072439676769e-6 * t7 * t2 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.24516364658791329968e-8 * t7 * t3 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) + 0.40860607764652216612e-9 * t9 * t12 * (-cosP1_2 * sinP2_8 + sinP1_2 * cosP2_8) + 0.37068743364092490916e-4 * t4 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.28419369912470909696e-3 * t7 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.12356247788030830304e-4 * t7 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.12258182329395664984e-7 * t4 * t2 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    bf[0] = t39;
    bf[1] = t1 * (0.24712495576061660611e-4 * t33 - 0.56838739824941819401e-3 * t34 - 0.49032729317582659942e-8 * cosP2_7 * t3 - 0.47071420144879353543e-6 * t32) + t21 * t14 * (cosP1_4 * cosP2_1 + sinP1_4 * sinP2_1) - t22 * t18 * (cosP1_4 * cosP2_3 - sinP1_4 * sinP2_3) + t23 * (t7 * sinP1_1 * t11 * sinP2_6 + t37 * t4 * sinP1_3) - t24 * t13 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) - t25 * t16 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t26 * t17 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + t27 * t19 * (cosP1_1 * cosP2_8 + sinP1_1 * sinP2_8) + t7 * (cosP1_1 * t28 + (-t38 + t36) * sinP1_1) + t9 * ((-0.10296873156692358585e-4 * t34 - 0.51484365783461792934e-7 * t32 + 0.19122764433857237377e-5 * t33) * cosP1_2 + (0.26968001124670462966e-7 * t29 + 0.22064728192912196973e-5 * t30 + 0.84434359884877340408e-4 * t31) * sinP1_2) - t15 * t20;
    bf[2] = t2;
}

static void idsbf_7_8_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[10];
    t2 = LegP2[41];
    t3 = LegP2[43];
    t4 = LegP1[13];
    t5 = LegP2[36];
    t6 = LegP2[39];
    t7 = LegP1[11];
    t8 = LegP2[37];
    t9 = LegP1[12];
    t10 = LegP2[40];
    t11 = LegP2[44];
    t12 = LegP1[14];
    t13 = LegP2[38];
    t14 = LegP2[42];
    t15 = t9 * t3;
    t16 = t4 * t11;
    t17 = t7 * t11;
    t18 = t12 * t2;
    t19 = t4 * t14;
    t20 = t12 * t3;
    t21 = 0.10152572355894531466e-3;
    t22 = 0.14649983794251319526e-2;
    t23 = cosP2_4 * t10;
    t24 = sinP2_4 * t10;
    t25 = sinP2_2 * t13;
    t26 = cosP1_4 * t12;
    t27 = cosP1_2 * t9;
    t28 = sinP1_4 * t12;
    t29 = sinP1_2 * t9;
    t30 = 0.27162583934630106115e-4 * t1;
    t24 = t2 * (t9 * (-0.37107355101953696856e-8 * cosP1_2 * sinP2_5 + 0.30922795918294747394e-7 * sinP1_2 * cosP2_5) - 0.40818090612149066565e-6 * t1 * sinP2_5) + t4 * ((-0.44528826122344436248e-7 * t24 - 0.3562306089787554896e-6 * t25) * cosP1_3 + (t21 * t5 - 0.98952946938543191679e-8 * t23 + 0.81933040065113762700e-5 * cosP2_2 * t13) * sinP1_3) + t6 * (t12 * (-0.29314810530543420530e-6 * cosP1_4 * sinP2_3 + 0.37478428652973233842e-6 * sinP1_4 * cosP2_3) + t30 * sinP2_3) + t7 * ((-0.14249224359150219602e-4 * t25 + 0.18702106971384663225e-5 * t24) * cosP1_1 - 0.42640803894757032154e-2 * sinP1_1 * t5) + t8 * ((-0.86237493256940391536e-4 * t29 - 0.54547811999871934412e-5 * t28) * cosP2_1 + (t1 * t22 - 0.67906459836575265288e-5 * t26 - 0.11429065371401738633e-4 * t27) * sinP2_1) - 0.13606030204049688855e-7 * t1 * t3 * sinP2_7;
    t21 = -cosP1_3 * t4 * t21 - 0.42640803894757032154e-2 * cosP1_1 * t7;
    t25 = t2 * (0.37107355101953696856e-8 * cosP1_2 * cosP2_5 + 0.30922795918294747394e-7 * sinP1_2 * sinP2_5) * t9;
    t21 = t1 * (-0.40818090612149066565e-6 * cosP2_5 * t2 + 0.13606030204049688855e-7 * cosP2_7 * t3 + cosP2_1 * t8 * t22) + t10 * (t4 * (-0.44528826122344436248e-7 * sinP1_3 * sinP2_4 + 0.98952946938543191679e-8 * cosP1_3 * cosP2_4) + t7 * (-0.18702106971384663225e-5 * sinP1_1 * sinP2_4 + 0.41560237714188140508e-6 * cosP1_1 * cosP2_4)) + t21 * t5 + t6 * ((-t30 + 0.29314810530543420530e-6 * t26) * cosP2_3 + (0.13803936097926775236e-5 * t29 + 0.37478428652973233842e-6 * t28) * sinP2_3) + 0.32395310009642116320e-10 * t16 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + 0.13606030204049688854e-8 * t17 * (cosP1_1 * cosP2_8 + sinP1_1 * sinP2_8) + 0.21204202915402112500e-8 * t19 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.11043855685105266927e-9 * t20 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + 0.30922795918294747395e-9 * t18 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t25;
    t21 = t13 * (t4 * (0.81933040065113762700e-5 * cosP1_3 * cosP2_2 + 0.3562306089787554896e-6 * sinP1_3 * sinP2_2) - 0.14249224359150219602e-4 * sinP1_1 * sinP2_2 * t7) + t8 * (t12 * (-0.67906459836575265288e-5 * cosP1_4 * cosP2_1 + 0.54547811999871934412e-5 * sinP1_4 * sinP2_1) + t9 * (0.11429065371401738633e-4 * cosP1_2 * cosP2_1 - 0.86237493256940391536e-4 * sinP1_2 * sinP2_1)) + 0.45353434013498962850e-9 * t15 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t21 - 0.31912325387680179312e-5 * t27 * t6 * cosP2_3;
    t1 = t12 * (0.8905765224468887245e-7 * cosP1_4 * sinP2_2 - 0.20483260016278440675e-5 * sinP1_4 * cosP2_2) - 0.71246121795751098009e-4 * sinP2_2 * t1;
    t5 = t10 * (-0.62340356571282210752e-6 * cosP1_2 * sinP2_4 - 0.13853412571396046836e-6 * cosP2_4 * sinP1_2) + 0.14213601298252344051e-2 * sinP1_2 * t5;
    t1 = t13 * t1 + t9 * t5 + 0.65308944979438506504e-6 * t4 * t6 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.16327236244859626627e-6 * t7 * t2 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.54424120816198755424e-8 * t7 * t3 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) - 0.45353434013498962846e-9 * t9 * t11 * (-cosP1_2 * sinP2_8 + sinP1_2 * cosP2_8) + 0.10686918269362664701e-4 * t4 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.58599935177005278107e-3 * t7 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.10865033573852042446e-4 * t7 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.49476473469271595832e-8 * t4 * t2 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.53010507288505281248e-9 * t12 * t14 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    bf[0] = -0.45353434013498962850e-9 * t15 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - 0.32395310009642116320e-10 * t16 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + 0.13606030204049688854e-8 * t17 * (-cosP1_1 * sinP2_8 + sinP1_1 * cosP2_8) - 0.30922795918294747395e-9 * t18 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.21204202915402112500e-8 * t19 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.11043855685105266927e-9 * t20 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t24 + t9 * t6 * (-0.31912325387680179312e-5 * cosP1_2 * sinP2_3 - 0.13803936097926775236e-5 * sinP1_2 * cosP2_3) + 0.41560237714188140508e-6 * t23 * t7 * sinP1_1;
    bf[1] = t21;
    bf[2] = t1;
}

static void idsbf_7_8_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[23];
    t2 = LegP2[39];
    t3 = LegP1[22];
    t4 = LegP2[40];
    t5 = LegP2[43];
    t6 = LegP1[24];
    t7 = LegP2[44];
    t8 = LegP1[27];
    t9 = LegP2[37];
    t10 = LegP1[26];
    t11 = LegP2[38];
    t12 = LegP1[25];
    t13 = LegP2[41];
    t14 = LegP2[42];
    t15 = LegP1[21];
    t16 = LegP2[36];
    t17 = t1 * t5;
    t18 = t6 * t7;
    t19 = t8 * t9;
    t20 = t3 * t7;
    t21 = t12 * t13;
    t22 = t10 * t14;
    t23 = t8 * t5;
    t8 = t8 * t2;
    t24 = t6 * t14;
    t25 = t12 * t5;
    t26 = cosP1_4 * t12;
    t27 = 0.24795933235207232546e-4 * t15;
    t28 = (t27 + 0.30486803158041679360e-7 * t26 - 0.12736708874915190488e-5 * cosP1_2 * t1) * sinP2_3 + 0.44036493450504647964e-7 * t12 * sinP1_4 * cosP2_3;
    t29 = -0.18535976320089341049e-2 * t16;
    t30 = t4 * (0.18066253723283958140e-6 * cosP2_4 * sinP1_1 + 0.81298141754777811620e-6 * cosP1_1 * sinP2_4) + t29 * sinP1_1;
    t31 = sinP2_5 * t13;
    t32 = sinP2_1 * t9;
    t33 = -0.37261648304273163663e-6 * t31 - 0.12420549434757721222e-7 * sinP2_7 * t5 + 0.13373544318660950012e-2 * t32;
    t34 = cosP2_4 * t4;
    t35 = 0.92679881600446705250e-4 * t16;
    t36 = (-0.90331268616419790717e-8 * t34 + t35) * t6 * sinP1_3;
    t37 = (0.4516563430820989531e-8 * cosP1_5 * sinP2_2 - 0.10388095890888275929e-6 * sinP1_5 * cosP2_2) * t11 * t10;
    t28 = t15 * t33 + t2 * t28 + t3 * t30 - 0.41401831449192404066e-9 * t17 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - 0.29572736749423145760e-10 * t18 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + 0.62102747173788606104e-7 * t19 * (cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + 0.59145473498846291524e-9 * t20 * (-cosP1_1 * sinP2_8 + sinP1_1 * cosP2_8) - 0.28228521442631184591e-9 * t21 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.26884306135839223420e-10 * t22 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.11201794223266343092e-11 * t23 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.33874225731157421510e-8 * t8 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.16130583681503534050e-9 * t24 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.22403588446532686184e-11 * t25 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t36 + t37;
    t30 = cosP2_1 * t9;
    t33 = cosP2_5 * t13;
    t36 = 0.48553056881325637496e-6 * sinP1_4;
    t29 = (t29 + 0.18066253723283958140e-6 * t34) * cosP1_1 + (-0.13007702680764449861e-4 * sinP2_2 * t11 - 0.81298141754777811620e-6 * t4 * sinP2_4) * sinP1_1;
    t34 = t11 * (0.62328575345329655579e-6 * cosP1_3 * cosP2_2 + 0.2709938058492593721e-7 * sinP1_3 * sinP2_2) - t35 * cosP1_3;
    t27 = t1 * (-0.12736708874915190488e-5 * cosP1_2 * cosP2_3 - 0.37939132818896312095e-6 * sinP1_2 * sinP2_3) - t27 * cosP2_3;
    t35 = 0.12420549434757721222e-7 * t5 * cosP2_7 - 0.37261648304273163663e-6 * t33;
    t8 = t15 * t35 + t2 * t27 + t3 * t29 + t6 * t34 + t9 * ((0.13373544318660950012e-2 * t15 - 0.73394155750841079936e-6 * t26) * cosP2_1 + (-0.51895313820133169752e-4 * sinP1_2 * t1 - t36 * t12) * sinP2_1) + 0.28228521442631184591e-9 * t21 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.26884306135839223420e-10 * t22 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.11201794223266343092e-11 * t23 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.16130583681503534050e-9 * t24 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - 0.22403588446532686184e-11 * t25 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + 0.41401831449192404066e-9 * t17 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + 0.29572736749423145760e-10 * t18 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + 0.33874225731157421510e-8 * t8 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t8 = t1 * (t13 * (-0.90331268616419790690e-8 * cosP1_2 * cosP2_5 + 0.15807972007873463371e-7 * sinP1_2 * sinP2_5) + 0.37261648304273163662e-4 * t30 * cosP1_2) + 0.59145473498846291524e-9 * t20 * (cosP1_1 * cosP2_8 + sinP1_1 * sinP2_8) - 0.62102747173788606104e-7 * t19 * (cosP1_6 * cosP2_1 - sinP1_6 * sinP2_1) + t8 + (-0.30486803158041679360e-7 * cosP1_4 * cosP2_3 + 0.44036493450504647964e-7 * sinP1_4 * sinP2_3) * t12 * t2 + (0.90331268616419790717e-8 * cosP1_3 * cosP2_4 - 0.40649070877388905812e-7 * sinP1_3 * sinP2_4) * t6 * t4 + (0.10388095890888275929e-6 * cosP1_5 * cosP2_2 + 0.4516563430820989531e-8 * sinP1_5 * sinP2_2) * t11 * t10;
    t17 = t10 * t5 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t15 = t12 * (-0.18066253723283958129e-7 * cosP1_4 * sinP2_2 + 0.41552383563553103719e-6 * sinP1_4 * cosP2_2) + 0.78046216084586699170e-4 * sinP2_2 * t15;
    t16 = t4 * (0.32519256701911124648e-6 * cosP1_2 * sinP2_4 + 0.72265014893135832564e-7 * cosP2_4 * sinP1_2) - 0.74143905280357364196e-3 * sinP1_2 * t16;
    t5 = t1 * t16 + t11 * t15 - 0.12420549434757721220e-6 * t10 * t9 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.22356988982563898198e-6 * t6 * t2 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.12420549434757721221e-6 * t3 * t13 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) + 0.41401831449192404068e-8 * t3 * t5 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) + 0.23658189399538516610e-9 * t1 * t7 * (-cosP1_2 * sinP2_8 + sinP1_2 * cosP2_8) + 0.67748451462314843018e-8 * t10 * t2 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.36584163789650015232e-5 * t6 * t9 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.44578481062203166706e-3 * t3 * t9 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.82653110784024108487e-5 * t3 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.16937112865578710754e-8 * t6 * t13 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.10753722454335689369e-9 * t12 * t14 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.22403588446532686184e-11 * t17;
    bf[0] = t1 * ((-0.37261648304273163662e-4 * t32 + 0.90331268616419790690e-8 * t31) * cosP1_2 + (-0.51895313820133169752e-4 * t30 + 0.15807972007873463371e-7 * t33 + 0.37939132818896312095e-6 * cosP2_3 * t2) * sinP1_2) + t11 * (t6 * (-0.2709938058492593721e-7 * cosP1_3 * sinP2_2 + 0.62328575345329655579e-6 * sinP1_3 * cosP2_2) - 0.13007702680764449861e-4 * cosP1_1 * sinP2_2 * t3) + t28 - 0.40649070877388905812e-7 * t6 * cosP1_3 * t4 * sinP2_4 + t12 * t9 * (-0.73394155750841079936e-6 * cosP1_4 * sinP2_1 + t36 * cosP2_1);
    bf[1] = t8;
    bf[2] = t5;
}

static void idsbf_7_8_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t6, t7, t8, t9;
    t1 = LegP1[23];
    t2 = LegP2[39];
    t3 = LegP1[22];
    t4 = LegP2[40];
    t5 = LegP2[43];
    t6 = LegP1[24];
    t7 = LegP2[44];
    t8 = LegP1[27];
    t9 = LegP2[37];
    t10 = LegP1[26];
    t11 = LegP2[38];
    t12 = LegP1[25];
    t13 = LegP2[41];
    t14 = LegP2[42];
    t15 = LegP1[21];
    t16 = LegP2[36];
    t17 = t1 * t5;
    t18 = t6 * t7;
    t19 = t3 * t7;
    t20 = t12 * t13;
    t21 = t10 * t14;
    t22 = t8 * t5;
    t23 = t8 * t2;
    t24 = t6 * t14;
    t25 = t12 * t5;
    t26 = t10 * t7;
    t27 = t8 * t13;
    t28 = t10 * t4;
    t29 = t28 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t30 = sinP2_5 * t13;
    t31 = cosP2_5 * t13;
    t32 = sinP1_3 * t6;
    t33 = sinP1_1 * t3;
    t34 = cosP1_3 * t6;
    t35 = cosP1_1 * t3;
    t36 = 0.15902230237961775169e-4 * t15;
    t37 = (-0.65312731334485862298e-7 * cosP1_6 * sinP2_1 + 0.10696142957676670203e-6 * sinP1_6 * cosP2_1) * t9 * t8;
    t37 = t1 * ((-0.14198419855323013543e-7 * t30 - 0.39755575594904437922e-6 * sinP2_3 * t2 + 0.39187638800691517388e-4 * sinP2_1 * t9) * cosP1_2 + (0.28396839710646027096e-8 * t31 + 0.28964776504858947631e-4 * cosP2_1 * t9) * sinP1_2) + t11 * (t10 * (-0.25557155739581424380e-7 * cosP1_5 * sinP2_2 - 0.28396839710646027082e-8 * sinP1_5 * cosP2_2) - 0.23853345356942662755e-4 * cosP1_1 * sinP2_2 * t3) + t15 * (0.31804460475923550334e-6 * t30 - 0.18931226473764018058e-7 * sinP2_7 * t5) + t16 * (0.22490297050831653448e-2 * t33 - 0.31236523681710629792e-4 * t32) + t2 * (t12 * (-0.24610594415893223471e-7 * sinP1_4 * cosP2_3 + 0.39755575594904437917e-7 * cosP1_4 * sinP2_3) - t36 * sinP2_3) + t4 * ((0.74967656836105511510e-6 * t33 - 0.10412174560570209933e-7 * t32) * cosP2_4 + (0.85190519131938081270e-8 * t34 - 0.61337173774995418510e-6 * t35) * sinP2_4) + t37;
    t38 = 0.33805761560292889388e-9;
    t39 = -0.32678902841616459742e-9;
    t40 = 0.24381125004090023254e-9;
    t41 = 0.94656132368820090298e-10;
    t42 = -0.20283456936175733630e-10;
    t43 = 0.84514403900732223474e-11;
    t44 = 0.29708093492378599766e-11;
    t45 = 0.15366255254678586085e-12;
    t46 = 0.99880659155410809552e-12;
    t47 = 0.65255363981535062246e-10;
    t48 = 0.11186633825406010668e-9;
    t49 = 0.60850370808527200900e-9;
    t50 = -0.19082676285554130204e-2 * t15;
    t51 = t12 * (-0.26920204045692433676e-5 * sinP1_4 * cosP2_1 - 0.28056077634118274760e-5 * cosP1_4 * sinP2_1) + t50 * sinP2_1;
    t52 = (0.28112871313539566815e-5 * cosP1_3 * sinP2_2 + 0.31236523681710629784e-6 * sinP1_3 * cosP2_2) * t11 * t6;
    t53 = 0.96549255016196492098e-6 * t1 * sinP1_2;
    t30 = t9 * (0.28964776504858947631e-4 * sinP1_2 * sinP2_1 - 0.39187638800691517388e-4 * cosP1_2 * cosP2_1) + 0.28396839710646027096e-8 * t30 * sinP1_2;
    t54 = t14 * sinP2_6;
    t55 = t9 * (0.26920204045692433676e-5 * sinP1_4 * sinP2_1 - 0.28056077634118274760e-5 * cosP1_4 * cosP2_1) * t12;
    t56 = (-0.28112871313539566815e-5 * sinP1_3 * sinP2_2 + 0.31236523681710629784e-6 * cosP1_3 * cosP2_2) * t11 * t6;
    t28 = t1 * t30 + t38 * t17 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t39 * t24 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - t40 * t23 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t41 * t20 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t42 * t25 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t43 * t18 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - t44 * t21 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - t45 * t22 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + t46 * t26 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t47 * t27 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t48 * t28 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t49 * t19 * (cosP1_1 * cosP2_8 + sinP1_1 * sinP2_8) + t55 + t56 + t33 * (-0.23853345356942662755e-4 * sinP2_2 * t11 + 0.24610594415893223472e-7 * t54);
    t30 = cosP1_2 * t1;
    t28 = t10 * (t11 * (0.28396839710646027082e-8 * cosP1_5 * cosP2_2 - 0.25557155739581424380e-7 * sinP1_5 * sinP2_2) + 0.42822434283654208848e-5 * cosP1_5 * t16) + t16 * (0.22490297050831653448e-2 * t35 + 0.31236523681710629792e-4 * t34) + t2 * ((-0.39755575594904437922e-6 * t30 + t36 - 0.39755575594904437917e-7 * cosP1_4 * t12) * cosP2_3 + (t53 - 0.24610594415893223471e-7 * sinP1_4 * t12) * sinP2_3) + t4 * ((0.74967656836105511510e-6 * t35 + 0.10412174560570209933e-7 * t34) * cosP2_4 + (0.85190519131938081270e-8 * t32 + 0.61337173774995418510e-6 * t33) * sinP2_4) + t9 * (t8 * (0.65312731334485862298e-7 * cosP1_6 * cosP2_1 + 0.10696142957676670203e-6 * sinP1_6 * sinP2_1) + t50 * cosP2_1) + t28 + 0.18931226473764018058e-7 * t15 * t5 * cosP2_7 + t31 * (0.31804460475923550334e-6 * t15 + 0.14198419855323013543e-7 * t30);
    t30 = t10 * t5 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t31 = t8 * t4 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4);
    t32 = t8 * t7 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t33 = t6 * t2 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3);
    t34 = t12 * (-0.6247304736342125956e-7 * sinP1_4 * cosP2_2 - 0.56225742627079133632e-6 * cosP1_4 * sinP2_2) - 0.16697341749859863929e-3 * sinP2_2 * t15;
    t4 = t4 * (0.15334293443748854629e-6 * cosP1_2 * sinP2_4 - 0.18741914209026377879e-6 * cosP2_4 * sinP1_2) - 0.56225742627079133624e-3 * sinP1_2 * t16;
    t15 = 0.17227416091125256431e-6 * t54 * t15;
    t8 = -0.71370723806090348082e-6 * t8 * sinP1_6 * t16;
    t1 = t34 * t11 + t4 * t1 + 0.49978437890737007668e-6 * t10 * t9 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.11358735884258410841e-5 * t6 * t9 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.45434943537033643340e-5 * t3 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + t15 + t8 + 0.58514700009816055806e-8 * t10 * t2 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.18931226473764018060e-8 * t6 * t13 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.18644389709010017781e-10 * t31 - 0.54089218496468623016e-8 * t3 * t5 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) - 0.15212592702131800225e-9 * t1 * t7 * (-cosP1_2 * sinP2_8 + sinP1_2 * cosP2_8) + 0.15144981179011214446e-6 * t33 - 0.90869887074067286666e-7 * t3 * t13 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.16646776525901801592e-12 * t32 + 0.65357805683232919486e-10 * t12 * t14 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.36879012611228606602e-11 * t30 + 0.54521932244440372012e-3 * t3 * t9 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    bf[0] = t9 * t51 - t38 * t17 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - t43 * t18 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + t49 * t19 * (-cosP1_1 * sinP2_8 + sinP1_1 * cosP2_8) - t41 * t20 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t44 * t21 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t45 * t22 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + t40 * t23 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t39 * t24 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t42 * t25 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t46 * t26 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t47 * t27 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t48 * t29 + t37 + 0.42822434283654208848e-5 * t10 * sinP1_5 * t16 + t52 + 0.24610594415893223472e-7 * t35 * t14 * sinP2_6 - t53 * t2 * cosP2_3;
    bf[1] = t28;
    bf[2] = t1;
}

static void idsbf_7_8_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t6, t7, t8, t9;
    t1 = LegP1[42];
    t2 = LegP2[43];
    t3 = LegP1[37];
    t4 = LegP2[36];
    t5 = LegP1[36];
    t6 = LegP2[37];
    t7 = LegP2[41];
    t8 = LegP1[39];
    t9 = LegP2[39];
    t10 = LegP1[43];
    t11 = LegP1[41];
    t12 = LegP2[44];
    t13 = LegP1[40];
    t14 = LegP2[38];
    t15 = LegP1[38];
    t16 = LegP2[40];
    t17 = LegP2[42];
    t18 = LegP1[44];
    t19 = t1 * t2;
    t20 = t10 * t12;
    t21 = t15 * t2;
    t22 = t18 * t7;
    t23 = t10 * t16;
    t24 = t1 * t9;
    t25 = t8 * t17;
    t26 = t13 * t2;
    t27 = t11 * t12;
    t28 = t8 * t12;
    t18 = t18 * t6;
    t29 = t3 * t12;
    t30 = t1 * t7;
    t31 = t11 * t16;
    t32 = t13 * t7;
    t33 = t11 * t17;
    t34 = sinP1_6 * t1;
    t35 = (-0.18062711660943630924e-6 * sinP1_4 * t13 + 0.20364821970671740748e-7 * t34) * cosP2_1 + (-0.28687836167381060884e-6 * cosP1_4 * t13 + 0.18593967886265502422e-7 * cosP1_6 * t1) * sinP2_1;
    t36 = sinP1_5 * t11;
    t37 = sinP1_3 * t8;
    t38 = cosP1_3 * t8;
    t39 = t13 * (0.98201908317073216243e-8 * cosP1_4 * sinP2_3 + 0.43466418435425849817e-8 * sinP1_4 * cosP2_3) + t15 * (-0.47813060278968434802e-6 * sinP1_2 * cosP2_3 + 0.5312562253218714980e-7 * cosP1_2 * sinP2_3);
    t40 = t16 * (0.40906729349784105330e-6 * cosP2_4 * sinP1_1 - 0.33469142195277904362e-6 * cosP1_1 * sinP2_4) + 0.23021103097281098234e-7 * cosP1_1 * sinP2_6 * t17;
    t35 = t14 * ((0.5312562253218714977e-7 * t37 - 0.26562811266093574877e-8 * t36) * cosP2_2 + (0.47813060278968434801e-6 * t38 - 0.23906530139484217399e-7 * cosP1_5 * t11) * sinP2_2) + t3 * t40 + t6 * t35 + t9 * t39 + 0.14373815620180505891e-12 * t19 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.59890898417418774548e-14 * t20 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.31622394364397112962e-9 * t21 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - 0.33538903113754513748e-12 * t22 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.67077806227509027484e-12 * t23 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.22806454117353069346e-9 * t24 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.55578753731364622782e-10 * t25 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) - 0.17248578744216607069e-11 * t26 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t39 = t6 * (0.33469142195277904366e-4 * cosP1_2 * sinP2_1 + 0.30281604843346675377e-4 * sinP1_2 * cosP2_1) + t7 * (-0.26562811266093574885e-8 * sinP1_2 * cosP2_5 - 0.79688433798280724665e-8 * cosP1_2 * sinP2_5);
    t40 = 0.25677384223890455726e-7 * t10;
    t41 = sinP2_1 * t6;
    t42 = sinP2_5 * t7;
    t43 = sinP2_3 * t9;
    t44 = -0.17850209170814882328e-2 * t41 + 0.29750348618024803876e-6 * t42 - 0.14875174309012401938e-4 * t43 - 0.17708540844062383259e-7 * sinP2_7 * t2;
    t45 = t8 * t16;
    t46 = t45 * (-0.97396974642343107932e-8 * sinP1_3 * cosP2_4 + 0.79688433798280724676e-8 * cosP1_3 * sinP2_4);
    t47 = t31 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t48 = t32 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t19 = t19 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t22 = t22 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t23 = t23 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t24 = t24 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t25 = t25 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t26 = t26 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t49 = t27 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t50 = t1 * (-0.18593967886265502422e-7 * cosP1_6 * cosP2_1 + 0.20364821970671740748e-7 * sinP1_6 * sinP2_1) + t13 * (0.18062711660943630924e-6 * sinP1_4 * sinP2_1 - 0.28687836167381060884e-6 * cosP1_4 * cosP2_1);
    t51 = (0.5312562253218714977e-7 * cosP1_3 * cosP2_2 - 0.47813060278968434801e-6 * sinP1_3 * sinP2_2) * t14 * t8;
    t19 = 0.5312562253218714980e-7 * t15 * cosP1_2 * t9 * cosP2_3 + 0.31622394364397112962e-9 * t21 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) - 0.22806454117353069346e-9 * t24 + t51 + t6 * t50 + 0.67077806227509027484e-12 * t23 + 0.33538903113754513748e-12 * t22 - 0.14373815620180505891e-12 * t19 + 0.35934539050451264728e-13 * t49 + 0.59890898417418774548e-14 * t20 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) + 0.33203514082616968610e-9 * t29 * (cosP1_1 * cosP2_8 + sinP1_1 * sinP2_8) + 0.79055985910992782400e-11 * t28 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - 0.27789376865682311392e-11 * t33 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.17248578744216607069e-11 * t26 + 0.40246683736505416488e-11 * t47 + 0.67077806227509027488e-12 * t30 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.44271352110155958146e-9 * t18 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + 0.88542704220311916304e-10 * t48 - 0.55578753731364622782e-10 * t25;
    t20 = sinP2_6 * t17;
    t21 = (0.43466418435425849817e-8 * sinP1_4 * sinP2_3 - 0.98201908317073216243e-8 * cosP1_4 * cosP2_3) * t13 * t9;
    t22 = t45 * (0.79688433798280724676e-8 * sinP1_3 * sinP2_4 + 0.97396974642343107932e-8 * cosP1_3 * cosP2_4);
    t19 = t11 * (t14 * (0.26562811266093574877e-8 * cosP1_5 * cosP2_2 - 0.23906530139484217399e-7 * sinP1_5 * sinP2_2) + 0.15406430534334273435e-6 * cosP1_5 * t4) + t15 * ((0.79688433798280724665e-8 * t7 * cosP2_5 - 0.33469142195277904366e-4 * t6 * cosP2_1) * cosP1_2 + (-0.26562811266093574885e-8 * t42 + 0.47813060278968434802e-6 * t43 + 0.30281604843346675377e-4 * t41) * sinP1_2) + t3 * ((0.12272018804935231597e-2 * t4 + 0.40906729349784105330e-6 * cosP2_4 * t16) * cosP1_1 + (0.33469142195277904362e-6 * sinP2_4 * t16 - 0.22312761463518602908e-4 * t14 * sinP2_2 + 0.23021103097281098234e-7 * t20) * sinP1_1) + t4 * (t40 * cosP1_7 + 0.29219092392702932374e-4 * t38) + t5 * (0.14875174309012401938e-4 * t9 * cosP2_3 - 0.17850209170814882328e-2 * t6 * cosP2_1 + 0.29750348618024803876e-6 * t7 * cosP2_5 + 0.17708540844062383259e-7 * t2 * cosP2_7) + t19 + t21 + t22;
    t21 = t1 * t16 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4);
    t22 = t11 * t9 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t23 = t8 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    t24 = t3 * t9 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t17 = t13 * t17 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t25 = t11 * t2 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t1 = t1 * t12 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t13 = t13 * (0.19125224111587373920e-6 * cosP1_4 * sinP2_2 + 0.21250249012874859896e-7 * cosP2_2 * sinP1_4) + 0.17850209170814882327e-3 * sinP2_2 * t5;
    t16 = t16 * (-0.95626120557936869613e-7 * cosP1_2 * sinP2_4 + 0.11687636957081172952e-6 * cosP2_4 * sinP1_2) + 0.35062910871243518848e-3 * sinP1_2 * t4;
    t26 = 0.10270953689556182289e-6 * t34 * t4;
    t20 = -0.18416882477824878587e-6 * t20 * t5;
    t1 = t13 * t14 + t16 * t15 - 0.44625522927037205818e-3 * t3 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.11687636957081172951e-6 * t11 * t6 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.70834163376249533036e-7 * t8 * t9 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.23956359366967509820e-13 * t1 + 0.94867183093191338886e-10 * t15 * t12 * (-cosP1_2 * sinP2_8 + sinP1_2 * cosP2_8) + 0.88542704220311916288e-9 * t10 * t6 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + 0.88542704220311916308e-9 * t8 * t7 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.44271352110155958146e-8 * t3 * t2 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) + t26 + 0.37187935772531004844e-5 * t24 - 0.53125622532187149805e-6 * t23 + 0.74375871545062009682e-7 * t3 * t7 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.86242893721083035342e-12 * t25 + 0.26831122491003610992e-11 * t21 + 0.67077806227509027494e-12 * t10 * t7 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) - 0.22231501492545849114e-10 * t17 - 0.13683872470411841608e-8 * t22 + t20;
    bf[0] = t15 * t39 + t4 * (-0.29219092392702932374e-4 * t37 - t40 * sinP1_7 + 0.12272018804935231597e-2 * t3 * sinP1_1 + 0.15406430534334273435e-6 * t36) + t5 * t44 + 0.35934539050451264728e-13 * t27 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.79055985910992782400e-11 * t28 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - 0.44271352110155958146e-9 * t18 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.33203514082616968610e-9 * t29 * (-cosP1_1 * sinP2_8 + sinP1_1 * cosP2_8) + 0.67077806227509027488e-12 * t30 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.40246683736505416488e-11 * t31 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.88542704220311916304e-10 * t32 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.27789376865682311392e-11 * t33 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t35 - 0.22312761463518602908e-4 * t3 * cosP1_1 * t14 * sinP2_2 + t46;
    bf[1] = t19;
    bf[2] = t1;
}

static void idsbf_7_8_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t6, t7, t8, t9;
    t1 = LegP1[44];
    t2 = LegP2[43];
    t3 = LegP2[39];
    t4 = LegP1[43];
    t5 = LegP2[38];
    t6 = LegP2[42];
    t7 = LegP2[44];
    t8 = LegP1[42];
    t9 = LegP2[37];
    t10 = LegP1[40];
    t11 = LegP1[39];
    t12 = LegP1[38];
    t13 = LegP1[37];
    t14 = LegP2[40];
    t15 = LegP2[41];
    t16 = LegP2[36];
    t17 = LegP1[36];
    t18 = LegP1[41];
    t19 = t11 * t6;
    t20 = t10 * t2;
    t21 = t18 * t7;
    t22 = t12 * t2;
    t23 = t11 * t7;
    t24 = t1 * t9;
    t25 = t13 * t7;
    t26 = t8 * t15;
    t27 = t18 * t14;
    t28 = t10 * t15;
    t29 = t18 * t6;
    t30 = t8 * t2;
    t31 = t1 * t2;
    t32 = t1 * t3;
    t33 = t4 * t5;
    t34 = t4 * t6;
    t35 = t4 * t7;
    t36 = t1 * t15;
    t37 = t4 * t14;
    t38 = t8 * t3;
    t39 = t9 * cosP2_1;
    t40 = sinP1_1 * t13;
    t41 = 0.11962552979646601281e-7 * t2;
    t42 = 0.47720887021509144565e-5 * t3;
    t43 = 0.66925634237482336892e-6 * t15;
    t44 = 0.19798348493557818262e-2 * t9;
    t45 = 0.22093003250698678044e-7 * t8 * sinP1_6;
    t46 = t11 * t14;
    t47 = t12 * ((0.25864979415452110868e-8 * t15 * sinP2_5 - 0.33947785482780895525e-4 * t9 * sinP2_1) * cosP1_2 + (-0.17458861105430174840e-7 * cosP2_5 * t15 - 0.10048544502903145062e-4 * t39) * sinP1_2) + t16 * (-0.38797469123178166314e-8 * sinP1_7 * t4 + 0.81474685158674149268e-6 * sinP1_5 * t18 + 0.97769622190408979124e-5 * sinP1_3 * t11 - 0.10754658440944987703e-2 * t40) + t17 * (t44 * sinP2_1 - t42 * sinP2_3 + t43 * sinP2_5 - t41 * sinP2_7) + t5 * (t18 * (-0.28020394366739786784e-8 * sinP1_5 * cosP2_2 + 0.40952884074465842220e-8 * cosP1_5 * sinP2_2) + 0.43297975541466833614e-4 * cosP1_1 * sinP2_2 * t13) + t45 * t9 * cosP2_1 + t46 * (0.20770362257863058740e-8 * cosP1_3 * sinP2_4 + 0.82689555403945384768e-8 * sinP1_3 * cosP2_4) + (-0.11570659352139751116e-7 * cosP1_4 * sinP2_3 + 0.57510389836630261685e-8 * sinP1_4 * cosP2_3) * t10 * t3;
    t48 = t10 * (-0.38474156880485014938e-6 * sinP1_4 * cosP2_1 - 0.20368671289668537314e-6 * cosP1_4 * sinP2_1) - 0.18859880823767164184e-7 * cosP1_6 * sinP2_1 * t8;
    t49 = t14 * (-0.22847398483649364610e-6 * cosP1_1 * sinP2_4 - 0.90958510944339923238e-6 * cosP2_4 * sinP1_1) + 0.19398734561589083159e-7 * cosP1_1 * sinP2_6 * t6;
    t50 = (0.43711815212114067383e-6 * sinP1_3 * cosP2_2 - 0.63886499156166713863e-6 * cosP1_3 * sinP2_2) * t11 * t5;
    t51 = (0.43711815212114067382e-6 * cosP1_2 * sinP2_3 + 0.33107173651778701922e-6 * sinP1_2 * cosP2_3) * t12 * t3;
    t47 = t13 * t49 + t9 * t48 + 0.13291725532940668090e-9 * t22 * (cosP1_2 * sinP2_7 - sinP1_2 * cosP2_7) - 0.17961791260730632553e-11 * t23 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - 0.85318508488470504638e-10 * t24 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.19757970386803695808e-9 * t25 * (-cosP1_1 * sinP2_8 + sinP1_1 * cosP2_8) - 0.43154953029028143146e-11 * t26 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.97973406876712541263e-11 * t27 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.75929390329452219420e-10 * t28 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.81644505730593784331e-12 * t29 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.13607417621765630722e-13 * t30 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - 0.74354817718933625018e-14 * t31 * (cosP1_8 * sinP2_7 - sinP1_8 * cosP2_7) + t47 + t50 + t51;
    t29 = t29 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t30 = t30 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t48 = t36 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t49 = t37 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t50 = t38 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t51 = t19 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t52 = t20 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t31 = t31 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t53 = t33 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t54 = t34 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t55 = t35 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t22 = t22 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t23 = t23 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t56 = t10 * t3 * (0.11570659352139751116e-7 * cosP1_4 * cosP2_3 + 0.57510389836630261685e-8 * sinP1_4 * sinP2_3);
    t40 = t12 * (t15 * (-0.17458861105430174840e-7 * sinP1_2 * sinP2_5 - 0.25864979415452110868e-8 * cosP1_2 * cosP2_5) + t9 * (0.33947785482780895525e-4 * cosP1_2 * cosP2_1 - 0.10048544502903145062e-4 * sinP1_2 * sinP2_1)) + t16 * (-0.97769622190408979124e-5 * t11 * cosP1_3 - 0.10754658440944987703e-2 * t13 * cosP1_1 + 0.81474685158674149268e-6 * t18 * cosP1_5 + 0.38797469123178166314e-8 * t4 * cosP1_7) + t17 * (t44 * cosP2_1 + t42 * cosP2_3 + t43 * cosP2_5 + t41 * cosP2_7) + t5 * (t18 * (0.40952884074465842220e-8 * sinP1_5 * sinP2_2 + 0.28020394366739786784e-8 * cosP1_5 * cosP2_2) + 0.43297975541466833614e-4 * t40 * sinP2_2) + 0.28575577005707824514e-12 * t21 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t46 * (-0.82689555403945384768e-8 * cosP1_3 * cosP2_4 + 0.20770362257863058740e-8 * sinP1_3 * sinP2_4) + t56;
    t39 = 0.18859880823767164184e-7 * t39 * t8 * cosP1_6;
    t22 = t40 + 0.13607417621765630722e-14 * t55 + 0.97973406876712541263e-11 * t27 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.98148359388992385026e-11 * t32 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.13218634261143755559e-12 * t54 + 0.46654003274625019650e-13 * t49 + 0.13291725532940668090e-9 * t22 + 0.19757970386803695808e-9 * t25 * (cosP1_1 * cosP2_8 + sinP1_1 * sinP2_8) + 0.45366352784245369078e-9 * t53 - 0.17981230428761726312e-13 * t48 + 0.13607417621765630722e-13 * t30 + 0.74354817718933625018e-14 * t31 + 0.24765500071613447914e-11 * t52 + 0.17961791260730632553e-11 * t23 - 0.81644505730593784331e-12 * t29 - 0.12736542893972630355e-9 * t51 + 0.85318508488470504638e-10 * t24 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) - 0.75929390329452219420e-10 * t28 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.47587083340117520008e-10 * t50 - 0.43154953029028143146e-11 * t26 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t39;
    t22 = t13 * (t14 * (0.22847398483649364610e-6 * sinP1_1 * sinP2_4 - 0.90958510944339923238e-6 * cosP1_1 * cosP2_4) + 0.19398734561589083159e-7 * sinP1_1 * sinP2_6 * t6) + t9 * (t10 * (0.38474156880485014938e-6 * sinP1_4 * sinP2_1 - 0.20368671289668537314e-6 * cosP1_4 * cosP2_1) + t45 * sinP2_1) + t22 + (0.43711815212114067382e-6 * cosP1_2 * cosP2_3 - 0.33107173651778701922e-6 * sinP1_2 * sinP2_3) * t12 * t3 + (0.43711815212114067383e-6 * cosP1_3 * cosP2_2 + 0.63886499156166713863e-6 * sinP1_3 * sinP2_2) * t11 * t5;
    t23 = t8 * t14 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4);
    t24 = t18 * t3 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t25 = t1 * t5 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2);
    t1 = t1 * t6 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6);
    t26 = -0.11639240736953449893e-6 * t8 * sinP1_6 + 0.21509316881889975406e-3 * sinP1_2 * t12;
    t27 = 0.38968177987320150255e-3 * sinP2_2 * t5 + 0.17458861105430174842e-6 * sinP2_6 * t6;
    t1 = t26 * t16 + t27 * t17 + 0.16523292826429694448e-13 * t1 - 0.27301922716310561484e-8 * t4 * t9 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.26583451065881336180e-8 * t13 * t2 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) - 0.40822252865296892168e-13 * t8 * t7 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8) + 0.45263713977041194042e-7 * t18 * t9 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.69835444421720699370e-7 * t11 * t3 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.38100769340943766024e-12 * t18 * t2 * (cosP1_5 * sinP2_7 - sinP1_5 * cosP2_7) + 0.57539937372037524196e-12 * t4 * t15 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) - 0.13996200982387505894e-11 * t23 - 0.13324383335232905603e-8 * t24 - 0.14872363163884963755e-6 * t13 * t15 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.56707940980306711340e-10 * t25 - 0.39515940773607391618e-10 * t12 * t7 * (-cosP1_2 * sinP2_8 + sinP1_2 * cosP2_8) - 0.43996329985684040589e-3 * t13 * t9 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    t1 = -0.21726582708979773148e-5 * t11 * t9 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.10604641560335365459e-5 * t13 * t3 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.18223053679068532661e-8 * t11 * t15 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.21227571489954383926e-10 * t10 * t6 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + t1 + t12 * t14 * (0.45694796967298729227e-7 * cosP1_2 * sinP2_4 + 0.18191702188867984649e-6 * sinP1_2 * cosP2_4) + (-0.72853025353523445644e-7 * cosP2_2 * sinP1_4 + 0.10647749859361118978e-6 * cosP1_4 * sinP2_2) * t10 * t5;
    bf[0] = 0.12736542893972630355e-9 * t19 * (cosP1_3 * sinP2_6 - sinP1_3 * cosP2_6) + 0.24765500071613447914e-11 * t20 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.28575577005707824514e-12 * t21 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + 0.98148359388992385026e-11 * t32 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + 0.45366352784245369078e-9 * t33 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.13218634261143755559e-12 * t34 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.13607417621765630722e-14 * t35 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + 0.17981230428761726312e-13 * t36 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - 0.46654003274625019650e-13 * t37 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.47587083340117520008e-10 * t38 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t47;
    bf[1] = t22;
    bf[2] = t1;
}

static void idsbf_7_8_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t7, t8, t9;
    t1 = LegP1[63];
    t2 = LegP2[39];
    t3 = LegP1[62];
    t4 = LegP2[38];
    t5 = LegP1[61];
    t6 = LegP2[37];
    t7 = LegP1[59];
    t8 = LegP1[58];
    t9 = LegP1[57];
    t10 = LegP1[56];
    t11 = LegP2[40];
    t12 = LegP2[42];
    t13 = LegP2[43];
    t14 = LegP2[44];
    t15 = LegP1[65];
    t16 = LegP1[64];
    t17 = LegP1[60];
    t18 = LegP2[41];
    t19 = LegP1[55];
    t20 = LegP2[36];
    t21 = t1 * t2;
    t22 = t3 * t4;
    t23 = t9 * t13;
    t24 = t8 * t14;
    t25 = t15 * t2;
    t26 = t16 * t4;
    t27 = t1 * t6;
    t28 = t10 * t14;
    t29 = t28 * (-cosP1_1 * sinP2_8 + sinP1_1 * cosP2_8);
    t30 = t1 * t13;
    t31 = t30 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7);
    t32 = t3 * t12;
    t33 = t32 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t34 = t5 * t18;
    t35 = t34 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t36 = t17 * t11;
    t37 = t36 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4);
    t38 = t7 * t18;
    t39 = t38 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t40 = t17 * t12;
    t41 = t40 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t42 = t5 * t13;
    t43 = t42 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t44 = t3 * t14;
    t15 = t15 * t13;
    t45 = t15 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7);
    t46 = t16 * t12;
    t47 = t46 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t48 = t1 * t18;
    t49 = t48 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t50 = t3 * t11;
    t51 = t50 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t52 = t5 * t2;
    t53 = t52 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t54 = t8 * t12;
    t55 = t54 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t56 = t7 * t13;
    t57 = t17 * t14;
    t29 = 0.60857326329017259660e-13 * t21 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + 0.94937429073266925064e-11 * t22 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.12609638015372376202e-9 * t23 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - 0.17040051372124832706e-11 * t24 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - 0.30428663164508629832e-13 * t25 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) - 0.15822904845544487510e-11 * t26 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) - 0.80940244017592955356e-10 * t27 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.12268836987929879547e-9 * t29 + 0.46104035097740348226e-16 * t31 - 0.27662421058644208938e-14 * t33 - 0.20470191583396714614e-12 * t35 + 0.88519747387661468648e-12 * t37 + 0.72032944436709520064e-10 * t39 + 0.77454778964203785016e-12 * t41 - 0.12909129827367297505e-13 * t43 - 0.12909129827367297502e-14 * t44 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.23052017548870174114e-16 * t45 + 0.46104035097740348226e-15 * t47 + 0.17058492986163928844e-13 * t49 - 0.44259873693830734323e-13 * t51 - 0.45145071167707348983e-10 * t53 - 0.32531007164965589708e-10 * t55;
    t31 = 0.73613021927579277280e-7;
    t33 = cosP1_4 * t7;
    t35 = 0.39873720210772108574e-7 * t33;
    t37 = 0.56232169528011947940e-9 * cosP1_6 * t5;
    t39 = sinP1_4 * t7;
    t41 = 0.13188999762024620518e-6 * t39;
    t43 = sinP1_6 * t5;
    t45 = 0.25048875517023504080e-8 * t43;
    t47 = sinP2_6 * t12;
    t49 = 0.18403255481894819322e-7 * t47;
    t51 = sinP2_5 * t18;
    t53 = 0.36806510963789638640e-8 * t3;
    t55 = (-0.26582480140514739018e-8 * cosP2_2 * t4 + t20 * t31) * t17 * sinP1_5;
    t29 = t10 * ((t49 - 0.14187236953315278896e-6 * sinP2_4 * t11) * cosP1_1 + (-0.66781733492699920358e-3 * t20 - 0.56481264097160827292e-6 * cosP2_4 * t11) * sinP1_1) + t19 * (-0.11348674213835138581e-7 * sinP2_7 * t13 + 0.63491231412537126656e-6 * t51) + t2 * (t9 * (0.10428511439740397615e-6 * sinP1_2 * cosP2_3 + 0.20488957769842898845e-6 * cosP1_2 * sinP2_3) - 0.45272008485461255526e-5 * sinP2_3 * t19) + t6 * ((-t41 + t45) * cosP2_1 + (0.18782362544821852591e-2 * t19 + t35 + t37) * sinP2_1) + t8 * (t4 * (0.11164641659016190389e-6 * sinP1_3 * cosP2_2 - 0.16317553193946739797e-6 * cosP1_3 * sinP2_2) + 0.92752407628749889388e-5 * sinP1_3 * t20) + 0.38727389482101892508e-12 * t56 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.25818259654734595004e-13 * t57 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t29 - t53 * sinP1_7 * t20 + t55;
    t55 = cosP2_5 * t18;
    t58 = cosP2_1 * t6;
    t59 = cosP1_5 * t17;
    t60 = cosP1_1 * t10;
    t42 = t42 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t44 = t44 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t15 = t15 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t46 = t46 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t48 = t48 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t50 = t50 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t61 = 0.11348674213835138581e-7 * cosP2_7 * t13 + 0.45272008485461255526e-5 * cosP2_3 * t2 + 0.18782362544821852591e-2 * t58 + 0.63491231412537126656e-6 * t55;
    t31 = -0.92752407628749889388e-5 * cosP1_3 * t8 + t53 * cosP1_7 + t59 * t31 - 0.66781733492699920358e-3 * t60;
    t15 = 0.12909129827367297505e-13 * t42 - 0.27662421058644208938e-14 * t32 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.46104035097740348226e-16 * t30 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.12268836987929879547e-9 * t28 * (cosP1_1 * cosP2_8 + sinP1_1 * sinP2_8) - 0.72032944436709520064e-10 * t38 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + 0.60857326329017259660e-13 * t21 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.44259873693830734323e-13 * t50 - 0.17058492986163928844e-13 * t48 + 0.88519747387661468648e-12 * t36 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t61 * t19 + t20 * t31 + 0.12909129827367297502e-14 * t44 - 0.46104035097740348226e-15 * t46 + 0.23052017548870174114e-16 * t15 - 0.77454778964203785016e-12 * t40 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.20470191583396714614e-12 * t34 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t21 = sinP1_2 * t9;
    t28 = cosP1_2 * t9;
    t30 = t11 * (0.19704495768493442914e-8 * sinP1_3 * sinP2_4 - 0.78446200134945593466e-8 * cosP1_3 * cosP2_4) + t4 * (0.11164641659016190389e-6 * cosP1_3 * cosP2_2 + 0.16317553193946739797e-6 * sinP1_3 * sinP2_2);
    t31 = t9 * (0.30207363796039476164e-8 * cosP1_2 * cosP2_5 - 0.11088426156515413864e-7 * sinP1_2 * sinP2_5) * t18;
    t15 = t2 * (-0.14061361872530024288e-8 * t39 * sinP2_3 + 0.20488957769842898845e-6 * t28 * cosP2_3) + t6 * ((t35 - t37 + 0.25678675815737237889e-4 * t28) * cosP2_1 + (-0.16059907617200212319e-4 * t21 + t41 + t45) * sinP2_1) + t8 * t30 + 0.45145071167707348983e-10 * t52 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - 0.32531007164965589708e-10 * t54 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + 0.38727389482101892508e-12 * t56 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + 0.25818259654734595004e-13 * t57 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + 0.94937429073266925064e-11 * t22 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.17040051372124832706e-11 * t24 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + 0.12609638015372376202e-9 * t23 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) + t15 + 0.41076066235589236730e-4 * t10 * sinP1_1 * t4 * sinP2_2 + t31;
    t15 = t10 * (t11 * (0.14187236953315278896e-6 * sinP1_1 * sinP2_4 - 0.56481264097160827292e-6 * cosP1_1 * cosP2_4) + t49 * sinP1_1) + t2 * (-0.10428511439740397615e-6 * t21 * sinP2_3 + 0.41148404573154433675e-8 * t33 * cosP2_3) + 0.30428663164508629832e-13 * t25 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + 0.15822904845544487510e-11 * t26 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + 0.80940244017592955356e-10 * t27 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + t15 + (0.38851317128444618566e-8 * sinP1_5 * sinP2_2 + 0.26582480140514739018e-8 * cosP1_5 * cosP2_2) * t17 * t4;
    t21 = t11 * (-0.31527193229589508656e-7 * cosP1_2 * sinP2_4 - 0.12551392021591294954e-6 * cosP2_4 * sinP1_2) - 0.14840385220599982302e-3 * sinP1_2 * t20;
    t22 = t7 * (0.31898976168617686822e-7 * cosP2_2 * sinP1_4 - 0.46621580554133542278e-7 * cosP1_4 * sinP2_2) - 0.41076066235589236731e-3 * sinP2_2 * t19;
    t19 = -0.18403255481894819321e-6 * t47 * t19;
    t20 = 0.29445208771031710914e-7 * t43 * t20;
    t1 = t4 * t22 + t9 * t21 + 0.60857326329017259658e-13 * t16 * t2 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) + 0.63291619382177950046e-11 * t1 * t4 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.48564146410555773208e-9 * t3 * t6 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.15336046234912349436e-7 * t17 * t6 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.38646836511979120576e-7 * t8 * t2 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.12698246282507425332e-6 * t10 * t18 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) + 0.22697348427670277162e-8 * t10 * t13 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) + 0.27264082195399732328e-10 * t9 * t14 * (-cosP1_2 * sinP2_8 + sinP1_2 * cosP2_8) - 0.18441614039096139293e-14 * t1 * t12 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) - 0.10235095791698357306e-12 * t3 * t18 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.46104035097740348226e-16 * t16 * t13 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7) + t19 + t20;
    t1 = 0.35407898955064587460e-12 * t5 * t11 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.45145071167707348978e-9 * t17 * t2 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.12023460248171281964e-5 * t8 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.37564725089643705185e-3 * t10 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.90544016970922511059e-6 * t10 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.10084612221139332809e-8 * t8 * t18 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.92945734757044542022e-11 * t7 * t12 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + 0.12909129827367297503e-12 * t17 * t13 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7) + 0.10327303861893838003e-13 * t5 * t14 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8) + t1;
    bf[0] = t9 * ((-0.30207363796039476164e-8 * t51 - 0.25678675815737237889e-4 * sinP2_1 * t6) * cosP1_2 + (-0.11088426156515413864e-7 * t55 - 0.16059907617200212319e-4 * t58) * sinP1_2) + t29 + (-0.14061361872530024288e-8 * sinP1_4 * cosP2_3 - 0.41148404573154433675e-8 * cosP1_4 * sinP2_3) * t7 * t2 + (0.19704495768493442914e-8 * cosP1_3 * sinP2_4 + 0.78446200134945593466e-8 * cosP2_4 * sinP1_3) * t11 * t8 + (0.41076066235589236730e-4 * t60 + 0.38851317128444618566e-8 * t59) * t4 * sinP2_2;
    bf[1] = t15;
    bf[2] = t1;
}

static void idsbf_7_8_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t7, t8, t9;
    t1 = LegP1[55];
    t2 = LegP2[41];
    t3 = LegP1[56];
    t4 = LegP2[36];
    t5 = LegP2[37];
    t6 = LegP1[60];
    t7 = LegP1[62];
    t8 = LegP1[58];
    t9 = LegP2[39];
    t10 = LegP2[43];
    t11 = LegP1[63];
    t12 = LegP2[40];
    t13 = LegP1[61];
    t14 = LegP1[65];
    t15 = LegP1[64];
    t16 = LegP2[42];
    t17 = LegP1[59];
    t18 = LegP2[44];
    t19 = LegP2[38];
    t20 = LegP1[57];
    t21 = t14 * t9;
    t22 = t15 * t19;
    t23 = t11 * t5;
    t24 = t3 * t18;
    t25 = t11 * t10;
    t26 = t7 * t16;
    t27 = t13 * t2;
    t28 = t6 * t12;
    t29 = t17 * t2;
    t30 = t6 * t16;
    t31 = t13 * t10;
    t32 = t31 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t33 = t7 * t18;
    t34 = t33 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t35 = t14 * t10;
    t36 = t35 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7);
    t37 = t15 * t16;
    t38 = t37 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t39 = t11 * t2;
    t40 = t39 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t41 = t7 * t12;
    t42 = t13 * t9;
    t43 = t42 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t44 = t14 * t2;
    t45 = t44 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5);
    t46 = t15 * t12;
    t47 = t46 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t48 = t8 * t16;
    t49 = t48 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t50 = t17 * t10;
    t51 = t50 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t52 = t6 * t18;
    t53 = t52 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t54 = t15 * t18;
    t55 = t54 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t56 = t11 * t9;
    t57 = t56 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t58 = t7 * t19;
    t59 = t20 * t10;
    t60 = t59 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t61 = t8 * t18;
    t62 = t61 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t32 = -0.10925223494880876028e-13 * t32 - 0.21010045182463223128e-15 * t34 - 0.83373195168504853688e-18 * t36 - 0.65031092231433785880e-16 * t38 - 0.18808992830014694992e-14 * t40 + 0.60869102328622023592e-13 * t41 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.14889518877309079616e-10 * t43 + 0.84740515569268333296e-15 * t45 + 0.29273996287565424226e-13 * t47 + 0.10694953399681079103e-9 * t49 + 0.26220536387714102464e-11 * t51 + 0.57147322896299966910e-13 * t53 - 0.29180618308976698794e-16 * t55 + 0.10036798727165288308e-11 * t57 + 0.24841076849734088564e-10 * t58 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.32170581183387687258e-10 * t60 - 0.27733259640851454532e-12 * t62 - 0.26412628229382337649e-14 * t21 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) - 0.72634727630801428544e-13 * t22 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + 0.20337723736624399993e-11 * t23 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.43263885039728269066e-10 * t24 * (-cosP1_1 * sinP2_8 + sinP1_1 * cosP2_8) + 0.31681814164031844406e-15 * t25 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.22240633543150354770e-13 * t26 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t34 = 0.42523739806433225454e-6 * t2;
    t36 = 0.42465167162071747180e-8 * t10;
    t38 = sinP1_1 * t3;
    t40 = t6 * (0.30684078466638049293e-8 * cosP2_2 * sinP1_5 + 0.29951920412119570900e-9 * cosP1_5 * sinP2_2) - 0.45915095914962817386e-4 * cosP1_1 * sinP2_2 * t3;
    t43 = t8 * t12;
    t45 = t43 * (0.18201086181748620053e-8 * cosP1_3 * sinP2_4 + 0.35978609852618781527e-8 * sinP1_3 * cosP2_4);
    t47 = (0.13770103669987439087e-8 * cosP1_4 * sinP2_3 - 0.57699586941096143063e-8 * sinP1_4 * cosP2_3) * t17 * t9;
    t32 = t1 * (0.27785797527915083528e-4 * t9 * sinP2_3 + t34 * sinP2_5 - t36 * sinP2_7 - 0.15638544608648529748e-2 * t5 * sinP2_1) + t19 * t40 + t20 * (t2 * (-0.58094623813486868719e-8 * cosP1_2 * sinP2_5 - 0.6335284984139230453e-9 * sinP1_2 * cosP2_5) + t5 * (0.25075747769026504756e-4 * cosP1_2 * sinP2_1 - 0.13809832104681263523e-5 * sinP1_2 * cosP2_1)) + t4 * (-0.13082998836013828551e-5 * sinP1_3 * t8 + 0.65894224906663055983e-9 * sinP1_7 * t7 + 0.20409478184181572538e-3 * t38 - 0.17923229174612351226e-6 * sinP1_5 * t6) + 0.57555518059844966673e-12 * t27 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.16556395833385190418e-10 * t28 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.14219598579491109412e-10 * t29 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.50928349522290852868e-12 * t30 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t32 + t45 + t47;
    t40 = t59 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t45 = t61 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t21 = t21 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3);
    t27 = t27 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t28 = t28 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t44 = t44 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t46 = t46 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t47 = t54 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t49 = t56 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t29 = t29 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t30 = t30 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t33 = t33 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t35 = t35 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t37 = t37 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t39 = t39 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t41 = t41 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t42 = t42 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t48 = t48 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t50 = t50 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t21 = 0.22240633543150354770e-13 * t26 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.57555518059844966673e-12 * t27 - 0.16556395833385190418e-10 * t28 + 0.84740515569268333296e-15 * t44 + 0.29273996287565424226e-13 * t46 - 0.29180618308976698794e-16 * t47 + 0.10036798727165288308e-11 * t49 + 0.14219598579491109412e-10 * t29 + 0.50928349522290852868e-12 * t30 + 0.10925223494880876028e-13 * t31 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.21010045182463223128e-15 * t33 + 0.83373195168504853688e-18 * t35 + 0.65031092231433785880e-16 * t37 + 0.18808992830014694992e-14 * t39 - 0.60869102328622023592e-13 * t41 - 0.14889518877309079616e-10 * t42 + 0.10694953399681079103e-9 * t48 + 0.26220536387714102464e-11 * t50 + 0.57147322896299966910e-13 * t52 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + 0.24841076849734088564e-10 * t58 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.32170581183387687258e-10 * t40 + 0.27733259640851454532e-12 * t45 + 0.26412628229382337649e-14 * t21;
    t26 = sinP1_6 * t13;
    t27 = sinP2_6 * t16;
    t28 = t19 * (0.6289903286545109888e-7 * sinP1_3 * sinP2_2 - 0.64436564779939903520e-6 * cosP1_3 * cosP2_2) + 0.13082998836013828551e-5 * cosP1_3 * t4;
    t29 = t20 * (0.18925983164652039163e-6 * cosP1_2 * cosP2_3 - 0.61025676388765802083e-6 * sinP1_2 * sinP2_3) - 0.27785797527915083528e-4 * cosP2_3 * t1;
    t30 = -0.65894224906663055983e-9 * cosP1_7 * t7 - 0.17923229174612351226e-6 * cosP1_5 * t6;
    t31 = t2 * (0.58094623813486868719e-8 * cosP1_2 * cosP2_5 - 0.6335284984139230453e-9 * sinP1_2 * sinP2_5) + t5 * (-0.25075747769026504756e-4 * cosP1_2 * cosP2_1 - 0.13809832104681263523e-5 * sinP1_2 * sinP2_1);
    t33 = t6 * (0.29951920412119570900e-9 * sinP1_5 * sinP2_2 - 0.30684078466638049293e-8 * cosP1_5 * cosP2_2) - 0.45915095914962817386e-4 * t38 * sinP2_2;
    t35 = t43 * (-0.35978609852618781527e-8 * cosP1_3 * cosP2_4 + 0.18201086181748620053e-8 * sinP1_3 * sinP2_4);
    t37 = (-0.13770103669987439087e-8 * cosP1_4 * cosP2_3 - 0.57699586941096143063e-8 * sinP1_4 * sinP2_3) * t17 * t9;
    t21 = t19 * t33 + t20 * t31 + t1 * (t34 * cosP2_5 + t36 * cosP2_7) + t3 * ((0.20409478184181572538e-3 * t4 - 0.56126631370085299176e-6 * cosP2_4 * t12) * cosP1_1 + (0.28393694443527847280e-6 * sinP2_4 * t12 + 0.74680121560884796754e-8 * t27) * sinP1_1) + t4 * t30 + t5 * ((-0.15638544608648529748e-2 * t1 + 0.54911854088885879972e-9 * cosP1_6 * t13 + 0.20846536606835221341e-6 * cosP1_4 * t17) * cosP2_1 + (-0.35383201980183919751e-6 * sinP1_4 * t17 - 0.17937872335702720794e-8 * t26) * sinP2_1) + t8 * t28 + t9 * t29 + 0.72634727630801428544e-13 * t22 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + 0.43263885039728269066e-10 * t24 * (cosP1_1 * cosP2_8 + sinP1_1 * sinP2_8) + 0.31681814164031844406e-15 * t25 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) - 0.20337723736624399993e-11 * t23 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + t21 + t35 + t37;
    t22 = t20 * t18 * (-cosP1_2 * sinP2_8 + sinP1_2 * cosP2_8);
    t23 = t7 * t2 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5);
    t24 = t13 * t12 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4);
    t25 = t6 * t9 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t28 = t3 * t5 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    t29 = t3 * t9 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t30 = t8 * t2 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t31 = t17 * t16 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t33 = t6 * t10 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t34 = t13 * t18 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t35 = t14 * t12 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4);
    t14 = t14 * t18 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8);
    t2 = -0.67712374188052901968e-13 * t23 + 0.20695494791731488025e-11 * t24 + 0.47646460407389054768e-9 * t25 + 0.20351331522688177777e-5 * t8 * t5 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.28433717470270054086e-3 * t28 + 0.50519631868936515506e-5 * t29 - 0.39814876022575106360e-9 * t30 - 0.15278504856687255861e-10 * t31 - 0.34960715183618803286e-12 * t33 - 0.71434153620374958644e-14 * t34 - 0.29273996287565424228e-14 * t35 + 0.29180618308976698794e-17 * t14 - 0.10565051291752935060e-12 * t15 * t9 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) - 0.27601196499704542848e-11 * t11 * t19 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.73215805451847839974e-10 * t7 * t5 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.37486492391346094064e-7 * t6 * t5 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.61501276579552185574e-7 * t8 * t9 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.77315890557151319002e-7 * t3 * t2 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.77209394840130449419e-9 * t3 * t10 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) - 0.72106475066213781784e-11 * t22;
    t1 = t19 * (t17 * (0.8985576123635871268e-8 * cosP1_4 * sinP2_2 + 0.92052235399914147880e-7 * cosP2_2 * sinP1_4) - 0.50506605506459099127e-3 * sinP2_2 * t1) + t20 * (t12 * (0.93544385616808831968e-7 * cosP2_4 * sinP1_2 + 0.47322824072546412132e-7 * cosP1_2 * sinP2_4) - 0.34015796973635954234e-4 * sinP1_2 * t4) - 0.33349278067401941476e-16 * t15 * t10 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7) - 0.24711815047944838636e-14 * t11 * t16 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) + t2 + 0.82148133716973276430e-7 * t27 * t1 + 0.22404036468265439034e-7 * t26 * t4;
    bf[0] = t3 * (t12 * (-0.56126631370085299176e-6 * cosP2_4 * sinP1_1 - 0.28393694443527847280e-6 * cosP1_1 * sinP2_4) + 0.74680121560884796754e-8 * cosP1_1 * sinP2_6 * t16) + t5 * (t13 * (-0.54911854088885879972e-9 * cosP1_6 * sinP2_1 - 0.17937872335702720794e-8 * sinP1_6 * cosP2_1) + t17 * (0.35383201980183919751e-6 * sinP1_4 * cosP2_1 + 0.20846536606835221341e-6 * cosP1_4 * sinP2_1)) + t32 + (-0.64436564779939903520e-6 * sinP1_3 * cosP2_2 - 0.6289903286545109888e-7 * cosP1_3 * sinP2_2) * t19 * t8 + (0.18925983164652039163e-6 * cosP1_2 * sinP2_3 + 0.61025676388765802083e-6 * sinP1_2 * cosP2_3) * t20 * t9;
    bf[1] = t21;
    bf[2] = t1;
}

static void idsbf_7_8_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t9;
    t1 = LegP1[81];
    t2 = LegP2[36];
    t3 = LegP1[85];
    t4 = LegP1[78];
    t5 = LegP2[39];
    t6 = LegP1[79];
    t7 = LegP2[37];
    t8 = LegP2[43];
    t9 = LegP1[83];
    t10 = LegP2[41];
    t11 = LegP2[42];
    t12 = LegP1[82];
    t13 = LegP2[44];
    t14 = LegP1[88];
    t15 = LegP1[87];
    t16 = LegP2[40];
    t17 = LegP1[86];
    t18 = LegP2[38];
    t19 = LegP1[84];
    t20 = LegP1[80];
    t21 = LegP1[89];
    t22 = t17 * t8;
    t23 = t3 * t11;
    t24 = t19 * t10;
    t25 = t9 * t16;
    t26 = t12 * t10;
    t27 = t9 * t11;
    t28 = t27 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t29 = t19 * t8;
    t30 = t29 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t31 = t3 * t13;
    t32 = t31 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t33 = t21 * t13;
    t34 = t33 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8);
    t35 = t14 * t8;
    t36 = t35 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7);
    t37 = t15 * t11;
    t38 = t17 * t10;
    t39 = t38 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t40 = t3 * t16;
    t41 = t40 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t42 = t19 * t5;
    t43 = t42 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t44 = t6 * t13;
    t45 = t44 * (-cosP1_1 * sinP2_8 + sinP1_1 * cosP2_8);
    t46 = t15 * t13;
    t47 = t46 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8);
    t48 = t1 * t11;
    t49 = t12 * t8;
    t50 = t9 * t13;
    t51 = t14 * t10;
    t52 = t15 * t16;
    t53 = t17 * t5;
    t54 = t3 * t18;
    t55 = t54 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t56 = t20 * t8;
    t57 = t56 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t58 = t1 * t13;
    t59 = LegP1[90] * t10;
    t60 = t59 * (sinP1_12 * cosP2_5 - cosP1_12 * sinP2_5);
    t61 = t21 * t16;
    t62 = t61 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4);
    t63 = t14 * t5;
    t64 = t63 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3);
    t65 = t15 * t18;
    t66 = t65 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2);
    t67 = t17 * t7;
    t68 = t67 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1);
    t69 = cosP2_5 * t10;
    t70 = cosP2_3 * t5;
    t71 = cosP2_1 * t7;
    t72 = sinP2_5 * t10;
    t73 = sinP2_3 * t5;
    t74 = sinP2_1 * t7;
    t75 = cosP1_5 * t9;
    t76 = cosP1_3 * t1;
    t77 = sinP1_5 * t9;
    t78 = sinP1_3 * t1;
    t79 = t1 * (0.34446896372286490142e-8 * cosP2_4 * sinP1_3 + 0.17426213301015432618e-8 * cosP1_3 * sinP2_4) + t6 * (-0.19168834631116975881e-6 * cosP1_1 * sinP2_4 - 0.37891586009515139160e-6 * cosP2_4 * sinP1_1);
    t80 = -0.29012791293711863881e-8 * sinP1_4;
    t81 = 0.13046486819776181603e-8 * cosP1_4;
    t82 = t12 * t5;
    t83 = 0.71500772792929677322e-8 * t6 * cosP1_1 * t11 * sinP2_6;
    t79 = t16 * t79 + t18 * ((-0.21151993320346897052e-6 * t78 + 0.29377768500481801464e-8 * t77) * cosP2_2 + (-0.20647281982985040504e-7 * t76 - 0.43960357484217705125e-4 * t6 * cosP1_1 + 0.28676780531923667376e-9 * t75) * sinP2_2) + t20 * ((0.17606013818306095839e-4 * t74 - 0.43096276843834376076e-8 * t72 - 0.12270186094265520701e-7 * t73) * cosP1_2 + (0.39080368911565793002e-6 * t70 - 0.18590664389281423960e-8 * t69 + 0.50799960819618379271e-5 * t71) * sinP1_2) + t7 * (t12 * (-0.6780465441325951598e-8 * cosP1_4 * sinP2_1 + 0.13239750940694358076e-6 * cosP2_1 * sinP1_4) + t19 * (-0.10631650856465033720e-8 * cosP1_6 * sinP2_1 - 0.11799964137395257205e-8 * sinP1_6 * cosP2_1)) + 0.40039596568676490306e-15 * t52 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.30345799504681129492e-13 * t53 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t82 * (t80 * cosP2_3 - t81 * sinP2_3) + t83;
    t28 = -0.62262530549377317462e-16 * t37 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - 0.48760182385930814892e-12 * t28 - 0.10460105132295389334e-13 * t30 - 0.20115586792875748718e-15 * t32 + 0.66519797595488587032e-19 * t34 - 0.79823757114586304436e-18 * t36 - 0.18008239605050670279e-14 * t39 + 0.58277728594217169161e-13 * t41 - 0.30800986497251346437e-10 * t57 - 0.17561226565208986978e-17 * t60 - 0.66732660947794150506e-16 * t62 - 0.25288166253900941246e-14 * t64 - 0.69542457198227588442e-13 * t66 + 0.19471888015503724762e-11 * t68 - 0.95788508537503565324e-17 * t22 * (cosP1_8 * sinP2_7 - sinP1_8 * cosP2_7) + 0.12452506109875463492e-14 * t23 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.54024718815152010837e-13 * t24 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.24476646009571211045e-11 * t25 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.13614229141418306732e-10 * t26 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.26552574566595988308e-12 * t58 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) + t79 + 0.14255628994585430607e-10 * t43 + 0.29207832023255587138e-10 * t45 - 0.39911878557293152224e-18 * t47 + 0.13908491439645517686e-11 * t55;
    t30 = sinP1_1 * t6;
    t32 = t65 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2);
    t34 = t67 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1);
    t36 = t44 * (cosP1_1 * cosP2_8 + sinP1_1 * sinP2_8);
    t39 = t46 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t23 = t23 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t38 = t38 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t40 = t40 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t41 = t42 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t42 = t48 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t43 = t49 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t44 = t50 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t45 = t51 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t46 = t52 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t47 = t54 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t52 = t56 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t54 = t58 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t55 = t9 * t18 * (-0.29377768500481801464e-8 * cosP1_5 * cosP2_2 + 0.28676780531923667376e-9 * sinP1_5 * sinP2_2);
    t22 = 0.35107331317870186726e-10 * t42 + 0.25288166253900941246e-14 * t63 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + 0.18008239605050670279e-14 * t38 + 0.95788508537503565324e-17 * t22 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.17561226565208986978e-17 * t59 * (cosP1_12 * cosP2_5 + sinP1_12 * sinP2_5) + 0.66732660947794150506e-16 * t61 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) - 0.39911878557293152224e-18 * t39 + 0.30345799504681129492e-13 * t53 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.40039596568676490306e-15 * t46 + 0.30800986497251346437e-10 * t52 + 0.26552574566595988308e-12 * t54 + 0.69542457198227588442e-13 * t32 - 0.58277728594217169161e-13 * t40 + 0.84485464530078144622e-14 * t44 + 0.29207832023255587138e-10 * t36 - 0.19471888015503724762e-11 * t34 + 0.12452506109875463492e-14 * t23 + t55 + t81 * t82 * cosP2_3 + 0.35122453130417973952e-17 * t45 + 0.58576588740854180263e-12 * t43 + 0.13908491439645517686e-11 * t47 - 0.14255628994585430607e-10 * t41;
    t23 = sinP1_6 * t19;
    t32 = sinP1_2 * t20;
    t34 = (0.10631650856465033720e-8 * cosP1_6 * t19 - 0.17606013818306095839e-4 * cosP1_2 * t20 - 0.6780465441325951598e-8 * cosP1_4 * t12) * cosP2_1 + (-0.11799964137395257205e-8 * t23 + 0.50799960819618379271e-5 * t32 - 0.13239750940694358076e-6 * sinP1_4 * t12) * sinP2_1;
    t36 = t16 * (0.17426213301015432618e-8 * sinP1_3 * sinP2_4 - 0.34446896372286490142e-8 * cosP1_3 * cosP2_4) + t18 * (0.20647281982985040504e-7 * sinP1_3 * sinP2_2 - 0.21151993320346897052e-6 * cosP1_3 * cosP2_2);
    t38 = t20 * (0.43096276843834376076e-8 * cosP1_2 * cosP2_5 - 0.18590664389281423960e-8 * sinP1_2 * sinP2_5) * t10;
    t39 = -0.43960357484217705125e-4 * t30 * t18 * sinP2_2;
    t22 = t1 * t36 + t5 * (-0.12270186094265520701e-7 * cosP1_2 * cosP2_3 * t20 + t80 * sinP2_3 * t12) + t7 * t34 + 0.54024718815152010837e-13 * t24 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) - 0.24476646009571211045e-11 * t25 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.48760182385930814892e-12 * t27 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + 0.10460105132295389334e-13 * t29 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + 0.20115586792875748718e-15 * t31 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8) - 0.66519797595488587032e-19 * t33 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8) + 0.79823757114586304436e-18 * t35 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) + 0.62262530549377317462e-16 * t37 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + 0.13614229141418306732e-10 * t26 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5) + t22 + t38 + t39;
    t24 = t11 * sinP2_6;
    t22 = t2 * (-0.26497345211497468660e-7 * t75 + 0.12526017736344257893e-5 * t76 - 0.63088917170232068236e-9 * cosP1_7 * t3) + t4 * (0.40657302176371777296e-8 * t8 * cosP2_7 - 0.26602875763854947746e-4 * t70 + 0.40713381213856428024e-6 * t69 - 0.14972766534176836288e-2 * t71) + t6 * ((0.13778619509978683682e-3 * t2 - 0.37891586009515139160e-6 * cosP2_4 * t16) * cosP1_1 + (0.71500772792929677322e-8 * t24 + 0.19168834631116975881e-6 * sinP2_4 * t16) * sinP1_1) + t22 - 0.39080368911565793002e-6 * t32 * t73;
    t25 = t9 * t5 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t26 = t1 * t7 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    t27 = t6 * t7 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    t29 = t6 * t5 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t31 = t12 * t11 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t33 = t9 * t8 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t34 = t19 * t13 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t21 = t21 * t10 * (sinP1_11 * cosP2_5 - cosP1_11 * sinP2_5);
    t12 = t12 * t18 * (-0.47004429600770882338e-7 * sinP1_4 * cosP2_2 - 0.4588284885107786782e-8 * cosP1_4 * sinP2_2);
    t35 = (-0.68893792744572980282e-7 * cosP2_4 * sinP1_2 - 0.34852426602030865234e-7 * cosP1_2 * sinP2_4) * t20 * t16;
    t6 = 0.24505612454552952115e-9 * t1 * t10 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.24954610890294727144e-3 * t27 - 0.44338126273091579578e-5 * t29 - 0.12526017736344257911e-5 * t26 - 0.26607919038195434812e-18 * t14 * t13 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8) + 0.14644147185213545066e-12 * t33 + 0.47894254268751782660e-17 * t15 * t8 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7) - 0.19957880592419602849e-9 * t25 + 0.67762170293952962167e-9 * t6 * t8 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) + t35 + 0.67855635356427380046e-7 * t6 * t10 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) + 0.18008239605050670280e-13 * t3 * t10 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.53105149133191976614e-11 * t20 * t13 * (-cosP1_2 * sinP2_8 + sinP1_2 * cosP2_8) + 0.78016291817489303830e-11 * t31 - 0.69933274313060602990e-12 * t19 * t16 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.49810024439501853968e-15 * t17 * t11 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) + 0.24138704151450898462e-14 * t34 + t12 + 0.35122453130417973956e-17 * t21;
    t1 = t2 * (-0.75706700604278481880e-8 * t23 + 0.25052035472688515786e-4 * t32) + t4 * (0.52752428981061246150e-3 * t18 * sinP2_2 - 0.85800927351515612772e-7 * t24) + 0.26693064379117660202e-15 * t14 * t16 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) + 0.15172899752340564748e-13 * t15 * t5 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) + 0.55633965758582070748e-12 * t17 * t18 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) - 0.19471888015503724762e-10 * t3 * t7 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + 0.15702130495702203646e-7 * t9 * t7 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.37853350302139240932e-7 * t1 * t5 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + t6;
    bf[0] = t2 * (0.63088917170232068236e-9 * sinP1_7 * t3 - 0.26497345211497468660e-7 * t77 - 0.12526017736344257893e-5 * t78 + 0.13778619509978683682e-3 * t30) + t4 * (0.26602875763854947746e-4 * t73 - 0.14972766534176836288e-2 * t74 - 0.40657302176371777296e-8 * sinP2_7 * t8 + 0.40713381213856428024e-6 * t72) + 0.35107331317870186726e-10 * t48 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.58576588740854180263e-12 * t49 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + 0.84485464530078144622e-14 * t50 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + 0.35122453130417973952e-17 * t51 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) + t28;
    bf[1] = t22;
    bf[2] = t1;
}

static void idsbf_7_8_12_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t9;
    t1 = LegP1[87];
    t2 = LegP2[40];
    t3 = LegP1[85];
    t4 = LegP2[38];
    t5 = LegP1[84];
    t6 = LegP2[37];
    t7 = LegP1[82];
    t8 = LegP1[81];
    t9 = LegP1[80];
    t10 = LegP2[39];
    t11 = LegP1[79];
    t12 = LegP2[43];
    t13 = LegP2[44];
    t14 = LegP1[90];
    t15 = LegP2[41];
    t16 = LegP1[89];
    t17 = LegP1[86];
    t18 = LegP1[83];
    t19 = LegP2[42];
    t20 = LegP1[88];
    t21 = LegP2[36];
    t22 = LegP1[78];
    t23 = t11 * t13;
    t24 = t1 * t13;
    t25 = t17 * t12;
    t26 = t3 * t19;
    t27 = t5 * t15;
    t28 = t18 * t2;
    t29 = t7 * t15;
    t30 = t18 * t19;
    t31 = t30 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t32 = t5 * t12;
    t33 = t32 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7);
    t34 = t3 * t13;
    t35 = t16 * t13;
    t36 = t35 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8);
    t37 = t20 * t12;
    t38 = t37 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7);
    t39 = t1 * t19;
    t40 = t39 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t41 = t17 * t15;
    t42 = t41 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t43 = t3 * t2;
    t44 = t43 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t45 = t5 * t10;
    t46 = t45 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    t47 = t16 * t19;
    t48 = t47 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6);
    t49 = t8 * t19;
    t50 = t49 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t51 = t7 * t12;
    t52 = t18 * t13;
    t53 = t20 * t15;
    t54 = t1 * t2;
    t55 = t3 * t4;
    t56 = t9 * t12;
    t57 = t8 * t13;
    t58 = t14 * t15;
    t59 = t16 * t2;
    t60 = t1 * t4;
    t61 = t17 * t6;
    t62 = 0.33182628387420040964e-4 * cosP1_2 * t9;
    t63 = cosP1_4 * t7;
    t64 = -0.51445935484372156538e-7 * t63;
    t65 = 0.20037819074529010246e-8 * cosP1_6 * t5;
    t66 = 0.28211608951747489628e-2 * t22;
    t67 = sinP1_2 * t9;
    t68 = 0.29861010378972534338e-5 * t67;
    t69 = sinP1_4 * t7;
    t70 = 0.25275611781452407340e-6 * t69;
    t71 = sinP1_6 * t5;
    t72 = -0.23299789621545360750e-9 * t71;
    t73 = 0.50327545582537979214e-8 * cosP2_6 * t19;
    t74 = cosP2_4 * t2;
    t75 = 0.63412707433997853808e-6 * t74;
    t76 = -0.21391219974401942687e-2 * t21;
    t77 = sinP2_5 * t15;
    t78 = sinP2_3 * t10;
    t79 = t11 * ((t73 + t75 + t76) * sinP1_1 - 0.3131491725135696484e-7 * cosP1_1 * sinP2_4 * t2) + t21 * (0.10568784572332975635e-6 * sinP1_5 * t18 + 0.83879242637563298702e-9 * sinP1_7 * t3) + t22 * (-0.52340647405839498383e-5 * t78 - 0.34893764937226332258e-6 * t77 - 0.27959747545854432898e-8 * sinP2_7 * t12) + t4 * (t18 * (0.16775848527512659739e-8 * cosP1_5 * sinP2_2 + 0.11183899018341773160e-8 * cosP2_2 * sinP1_5) + t8 * (0.24157221879618230022e-6 * cosP1_3 * sinP2_2 + 0.16104814586412153349e-6 * sinP1_3 * cosP2_2)) + t6 * ((t68 - t70 + t72) * cosP2_1 + (-t65 + t66 + t62 + t64) * sinP2_1) + t9 * (t10 * (-0.21808603085766457658e-6 * sinP1_2 * cosP2_3 - 0.28518942496771521554e-6 * cosP1_2 * sinP2_3) + t15 * (-0.80731327004778289114e-8 * cosP1_2 * sinP2_5 + 0.35995730931411196474e-8 * sinP1_2 * cosP2_5));
    t80 = 0.63544880786032802042e-11;
    t81 = 0.15634057971166800503e-12;
    t82 = 0.21983373491301539168e-14;
    t83 = 0.10024418312033501861e-11;
    t84 = 0.80108447513996517034e-10;
    t85 = 0.28787356073211724112e-4 * t11 * sinP1_1 * t4 * cosP2_2;
    t86 = t7 * t10 * (-0.25417952314413120818e-8 * cosP1_4 * sinP2_3 - 0.81337447406121986614e-9 * sinP1_4 * cosP2_3);
    t87 = (0.41177082749349255716e-8 * cosP2_4 * sinP1_3 - 0.20334361851530496634e-9 * cosP1_3 * sinP2_4) * t8 * t2;
    t31 = t79 + 0.55630866329164247937e-12 * t31 + t81 * t44 + t86 + 0.25061045780083754652e-12 * t27 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.38486298129029305262e-18 * t38 - 0.32071915107524421050e-19 * t36 + 0.38909019312063161863e-10 * t29 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - 0.46183557754835166318e-18 * t48 + t80 * t46 + 0.73708958176716925442e-14 * t33 + 0.16164245214192308212e-14 * t26 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.16164245214192308212e-16 * t40 + t87 + t83 * t51 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - 0.21167463970966117894e-17 * t24 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) - t85 + t84 * t50 + 0.96985471285153849272e-16 * t34 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) - 0.32328490428384616420e-16 * t25 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + 0.19698913043670168633e-10 * t28 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.19715206602846074480e-10 * t23 * (-cosP1_1 * sinP2_8 + sinP1_1 * cosP2_8) + t82 * t42;
    t33 = 0.17922915093496431345e-10;
    t36 = 0.12802082209640308102e-12;
    t38 = -0.92459482625180002964e-15;
    t40 = -0.24785175995094872590e-16;
    t42 = 0.12220169381929385008e-13;
    t44 = 0.55475689575108001782e-11;
    t46 = 0.13890402580780482264e-4 * t21;
    t28 = t28 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t29 = t29 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t30 = t30 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t32 = t32 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t34 = t34 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t35 = t35 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t37 = t37 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t39 = t39 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t48 = t59 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4);
    t50 = t60 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2);
    t79 = t61 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1);
    t47 = t47 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6);
    t85 = t4 * cosP2_2;
    t86 = sinP2_4 * t2;
    t87 = cosP2_5 * t15;
    t88 = cosP2_3 * t10;
    t22 = t21 * (-0.83879242637563298702e-9 * cosP1_7 * t3 + 0.10568784572332975635e-6 * cosP1_5 * t18) + t22 * (0.27959747545854432898e-8 * cosP2_7 * t12 - 0.34893764937226332258e-6 * t87 + 0.52340647405839498383e-5 * t88) + t6 * ((t65 + t66 - t62 + t64) * cosP2_1 + (t68 + t70 + t72) * sinP2_1) + t8 * ((t46 - 0.41177082749349255716e-8 * t74 + 0.16104814586412153349e-6 * t85) * cosP1_3 + (-0.24157221879618230022e-6 * sinP2_2 * t4 - 0.20334361851530496634e-9 * t86) * sinP1_3) + t9 * ((0.80731327004778289114e-8 * t87 - 0.28518942496771521554e-6 * t88) * cosP1_2 + (0.21808603085766457658e-6 * t78 + 0.35995730931411196474e-8 * t77) * sinP1_2) - 0.81337447406121986614e-9 * t78 * t69 + (t75 + t76) * t11 * cosP1_1;
    t62 = (0.28787356073211724112e-4 * t85 - t73) * cosP1_1 + 0.3131491725135696484e-7 * t86 * sinP1_1;
    t64 = t4 * (-0.11183899018341773160e-8 * cosP1_5 * cosP2_2 + 0.16775848527512659739e-8 * sinP1_5 * sinP2_2) * t18;
    t22 = t22 - 0.55630866329164247937e-12 * t30 + 0.25061045780083754652e-12 * t27 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.38486298129029305262e-18 * t37 + 0.32071915107524421050e-19 * t35 - 0.38909019312063161863e-10 * t29 + 0.53880817380641027368e-18 * t58 * (cosP1_12 * cosP2_5 + sinP1_12 * sinP2_5) - 0.46183557754835166318e-18 * t47 - 0.77665965405151202488e-11 * t79 - 0.55475689575108001782e-13 * t50 - 0.73708958176716925442e-14 * t32 + 0.16164245214192308212e-14 * t26 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t64 - 0.16164245214192308212e-16 * t39 + 0.14009012518966667116e-16 * t48 + t62 * t11 - 0.21167463970966117894e-17 * t24 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) - 0.96985471285153849272e-16 * t34 - 0.32328490428384616420e-16 * t25 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + 0.19698913043670168633e-10 * t28 + 0.19715206602846074480e-10 * t23 * (cosP1_1 * cosP2_8 + sinP1_1 * sinP2_8) + 0.25417952314413120818e-8 * t88 * t63;
    t22 = -t33 * t56 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) - t36 * t57 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + t38 * t54 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t40 * t53 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + t42 * t52 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t44 * t55 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - t80 * t45 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - t81 * t43 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - t82 * t41 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t83 * t51 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t84 * t49 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) + t22;
    t23 = t18 * t10 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t24 = t11 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    t25 = t11 * t10 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t26 = t8 * t15 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t27 = t7 * t19 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t28 = t18 * t12 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t29 = t5 * t13 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t30 = 0.10065509116507595844e-7 * t71 - 0.55561610323121929057e-4 * t67;
    t32 = t9 * (0.16470833099739702286e-7 * cosP2_4 * sinP1_2 - 0.8133744740612198658e-9 * cosP1_2 * sinP2_4) * t2;
    t1 = 0.18760869565400160603e-11 * t5 * t2 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.44504693063331398351e-11 * t27 + 0.30776722887822154836e-13 * t3 * t15 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.73708958176716925432e-13 * t28 + 0.25862792342707693136e-15 * t17 * t19 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) + 0.23345411587237897116e-9 * t26 + t32 + 0.11638256554218461913e-14 * t29 + 0.36168729425317294394e-4 * t24 + 0.67103394110050638948e-7 * t25 + 0.51208328838561232410e-12 * t9 * t13 * (-cosP1_2 * sinP2_8 + sinP1_2 * cosP2_8) - 0.44735596073367092636e-8 * t11 * t15 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) + t30 * t21 - 0.69275336632252749477e-17 * t1 * t12 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7) - 0.64143830215048842106e-18 * t20 * t13 * (sinP1_10 * cosP2_8 - cosP1_10 * sinP2_8) + 0.63544880786032802040e-10 * t23 + 0.35845830186992862688e-10 * t11 * t12 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) - 0.60393054699045575058e-6 * t8 * t6 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    t1 = -0.46183557754835166320e-18 * t14 * t19 * (sinP1_12 * cosP2_6 - cosP1_12 * sinP2_6) - 0.11853779823741026021e-16 * t16 * t15 * (sinP1_11 * cosP2_5 - cosP1_11 * sinP2_5) - 0.28018025037933334234e-15 * t20 * t2 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) + 0.88761103320172802842e-12 * t17 * t4 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.10873235156721168349e-9 * t3 * t6 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.11183899018341773159e-7 * t18 * t6 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.10065509116507595842e-7 * t8 * t10 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + t1 + t7 * t4 * (0.89471192146734185272e-8 * sinP1_4 * cosP2_2 + 0.13420678822010127790e-7 * cosP1_4 * sinP2_2);
    bf[0] = t42 * t52 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t40 * t53 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) + t38 * t54 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t44 * t55 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t33 * t56 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) + t36 * t57 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8) - 0.53880817380641027368e-18 * t58 * (sinP1_12 * cosP2_5 - cosP1_12 * sinP2_5) - 0.14009012518966667116e-16 * t59 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) + 0.55475689575108001782e-13 * t60 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + 0.77665965405151202488e-11 * t61 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + t31 - t46 * t8 * sinP1_3;
    bf[1] = t22;
    bf[2] = t1;
}

static void idsbf_7_8_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t9;
    t1 = LegP1[79];
    t2 = LegP2[44];
    t3 = LegP1[87];
    t4 = LegP1[86];
    t5 = LegP2[43];
    t6 = LegP1[85];
    t7 = LegP2[42];
    t8 = LegP1[84];
    t9 = LegP2[41];
    t10 = LegP1[83];
    t11 = LegP2[40];
    t12 = LegP1[80];
    t13 = LegP2[37];
    t14 = LegP1[82];
    t15 = LegP1[89];
    t16 = LegP1[88];
    t17 = LegP2[39];
    t18 = LegP1[90];
    t19 = LegP2[38];
    t20 = LegP1[81];
    t21 = LegP2[36];
    t22 = LegP1[78];
    t23 = t1 * t2;
    t24 = t3 * t2;
    t25 = t4 * t5;
    t26 = t6 * t7;
    t27 = t8 * t9;
    t28 = t10 * t11;
    t29 = t14 * t9;
    t30 = t10 * t7;
    t31 = t8 * t5;
    t32 = t6 * t2;
    t33 = t15 * t2;
    t34 = t16 * t5;
    t35 = t3 * t7;
    t36 = t4 * t9;
    t37 = t6 * t11;
    t38 = t8 * t17;
    t39 = t18 * t5;
    t40 = t4 * t17;
    t41 = t16 * t17;
    t42 = t15 * t7;
    t43 = t20 * t7;
    t44 = t14 * t5;
    t45 = t10 * t2;
    t46 = t16 * t9;
    t47 = t3 * t11;
    t48 = t47 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t49 = t6 * t19;
    t50 = t12 * t5;
    t51 = t50 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t52 = t20 * t2;
    t53 = t52 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t54 = t18 * t9;
    t55 = t54 * (sinP1_12 * cosP2_5 - cosP1_12 * sinP2_5);
    t56 = t15 * t11;
    t57 = t56 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4);
    t58 = t3 * t19;
    t59 = t58 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2);
    t60 = t4 * t13;
    t61 = t60 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1);
    t62 = 0.43842726272262970942e-11;
    t63 = 0.36051398410625876710e-11;
    t64 = 0.38149627947752250486e-13;
    t65 = 0.26411280886905404182e-13;
    t66 = -0.37571603281877216388e-15;
    t67 = 0.28901233293751704916e-17;
    t68 = 0.92632157992793925998e-20;
    t69 = 0.10586532342033591544e-17;
    t70 = 0.68429227752436729016e-14;
    t71 = 0.62450674169855414799e-12;
    t72 = 0.57819255980875287746e-10;
    t73 = sinP2_6 * t7;
    t74 = 0.14612833489107022026e-8 * t73;
    t75 = sinP2_2 * t19;
    t76 = (t74 + 0.27715161453340033984e-4 * t75) * cosP1_1 + 0.60760161647706997589e-3 * sinP1_1 * t21;
    t77 = t12 * (0.11666809348053103717e-4 * sinP1_2 * cosP2_1 - 0.16159102001204372962e-4 * cosP1_2 * sinP2_1) + 0.40879863143676550128e-3 * sinP2_1 * t22;
    t78 = sinP1_3 * t20;
    t79 = 0.35378823521877240349e-4 * t22 * t17 * sinP2_3;
    t48 = t70 * t45 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) + t76 * t1 + t77 * t13 - t68 * t55 + t69 * t42 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) + 0.51132951212022247150e-17 * t46 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) + t64 * t59 - t65 * t53 - 0.16022843738055945205e-10 * t49 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.14624024046638362687e-14 * t48 - 0.17358080716227273972e-12 * t40 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t72 * t43 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + (-0.28933410308431903613e-5 * t78 + 0.32686601225634128216e-9 * sinP1_7 * t6) * t21 - 0.71679646065852442742e-19 * t39 * (-sinP1_12 * cosP2_7 + cosP1_12 * sinP2_7) - t79 + t63 * t61 + t71 * t44 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) + t66 * t41 * (-sinP1_10 * cosP2_3 + cosP1_10 * sinP2_3) + t67 * t57 - t62 * t51;
    t51 = 0.14175846841705496250e-8 * sinP1_4 * t14;
    t53 = 0.24750923708822420085e-8 * cosP1_4 * t14;
    t55 = t14 * (0.17858420716687634287e-6 * cosP1_4 * sinP2_1 + 0.62642909878303523376e-7 * cosP2_1 * sinP1_4) + t8 * (0.97579118364760706296e-9 * cosP1_6 * sinP2_1 - 0.17641150955599595670e-8 * sinP1_6 * cosP2_1);
    t57 = 0.12072892299750393591e-6 * sinP2_5 * t9 - 0.79793761815518607118e-9 * sinP2_7 * t5;
    t59 = t9 * (-0.59354215598674625214e-8 * cosP1_2 * sinP2_5 + 0.46087300983564302586e-8 * sinP1_2 * cosP2_5) * t12;
    t61 = (-0.58143695356657413953e-6 * cosP1_1 * sinP2_4 + 0.33109604300318805169e-6 * cosP2_4 * sinP1_1) * t11 * t1;
    t48 = t10 * (t19 * (-0.23072894982800561092e-9 * cosP2_2 * sinP1_5 + 0.11536447491400280547e-8 * cosP1_5 * sinP2_2) - 0.11178817619166871850e-6 * sinP1_5 * t21) + t13 * t55 + t17 * ((-0.67488217824691641190e-7 * sinP1_2 * t12 + t51) * cosP2_3 + (-t53 + 0.32129006263549781323e-6 * cosP1_2 * t12) * sinP2_3) + t20 * ((0.27687473979360673312e-8 * sinP2_4 * t11 - 0.31379137176608763085e-6 * t75) * cosP1_3 + (0.62758274353217526170e-7 * cosP2_2 * t19 - 0.15766478238247050080e-8 * cosP2_4 * t11) * sinP1_3) + t22 * t57 - 0.55463689862501348782e-11 * t23 * (cosP1_1 * sinP2_8 - sinP1_1 * cosP2_8) - 0.33479908531681233257e-17 * t24 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) - 0.11616072612296358321e-15 * t25 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) - 0.35126114310867456742e-14 * t26 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t48 + t59 + t61;
    t55 = 0.63605834232888752182e-11;
    t57 = 0.21257079404733561668e-12;
    t59 = 0.41270961143477434620e-13;
    t61 = 0.20408717048972357778e-14;
    t75 = 0.23343303814184069434e-16;
    t76 = 0.20008546126443488018e-16;
    t77 = 0.83633605502065373199e-17;
    t79 = 0.25143014312329779916e-18;
    t80 = 0.66165827137709947148e-20;
    t81 = t28 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t82 = t29 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t83 = cosP1_5 * t10;
    t84 = cosP1_3 * t20;
    t78 = (0.23072894982800561092e-9 * t83 + 0.62758274353217526170e-7 * t84) * cosP2_2 + (0.11536447491400280547e-8 * sinP1_5 * t10 + 0.31379137176608763085e-6 * t78 + 0.27715161453340033984e-4 * sinP1_1 * t1) * sinP2_2;
    t85 = t14 * (-0.62642909878303523376e-7 * sinP1_4 * sinP2_1 + 0.17858420716687634287e-6 * cosP1_4 * cosP2_1) + t8 * (-0.17641150955599595670e-8 * sinP1_6 * sinP2_1 - 0.97579118364760706296e-9 * cosP1_6 * cosP2_1);
    t74 = t11 * (0.33109604300318805169e-6 * cosP1_1 * cosP2_4 + 0.58143695356657413953e-6 * sinP1_1 * sinP2_4) + t74 * sinP1_1;
    t42 = t1 * t74 + t13 * t85 + t17 * (t12 * (0.67488217824691641190e-7 * sinP1_2 * sinP2_3 + 0.32129006263549781323e-6 * cosP1_2 * cosP2_3) + t53 * cosP2_3) + t19 * t78 + t57 * t30 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t61 * t31 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + t62 * t50 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7) - t63 * t60 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) - t64 * t58 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t65 * t52 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) - t67 * t56 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) + t68 * t54 * (cosP1_12 * cosP2_5 + sinP1_12 * sinP2_5) + t69 * t42 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + t76 * t32 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t50 = t13 * (0.16159102001204372962e-4 * cosP1_2 * cosP2_1 + 0.11666809348053103717e-4 * sinP1_2 * sinP2_1) + t9 * (0.46087300983564302586e-8 * sinP1_2 * sinP2_5 + 0.59354215598674625214e-8 * cosP1_2 * cosP2_5);
    t52 = 0.35378823521877240349e-4 * cosP2_3 * t17 + 0.79793761815518607118e-9 * cosP2_7 * t5 + 0.40879863143676550128e-3 * cosP2_1 * t13 + 0.12072892299750393591e-6 * cosP2_5 * t9;
    t53 = (0.15766478238247050080e-8 * cosP1_3 * cosP2_4 + 0.27687473979360673312e-8 * sinP1_3 * sinP2_4) * t20 * t11;
    t41 = t12 * t50 + t21 * (-0.11178817619166871850e-6 * t83 + 0.28933410308431903613e-5 * t84 + 0.60760161647706997589e-3 * t1 * cosP1_1 - 0.32686601225634128216e-9 * t6 * cosP1_7) + t22 * t52 + t55 * t38 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t59 * t37 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t66 * t41 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t70 * t45 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) + t71 * t44 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7) + t72 * t43 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6) - t75 * t36 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - t77 * t35 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - t79 * t34 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) - t80 * t33 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8) + t42 + t53 + t51 * t17 * sinP2_3;
    t23 = 0.51132951212022247150e-17 * t46 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) - 0.14624024046638362687e-14 * t47 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.71679646065852442742e-19 * t39 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7) - 0.17358080716227273972e-12 * t40 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.55463689862501348782e-11 * t23 * (cosP1_1 * cosP2_8 + sinP1_1 * sinP2_8) - 0.33479908531681233257e-17 * t24 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) - 0.11616072612296358321e-15 * t25 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) - 0.35126114310867456742e-14 * t26 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) - 0.88704554493899463840e-14 * t27 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + 0.14114668711069282640e-10 * t81 + 0.21966982621299776624e-10 * t82 - 0.16022843738055945205e-10 * t49 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t41;
    t24 = t20 * t9 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t25 = t14 * t7 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t26 = t10 * t5 * (-cosP1_5 * sinP2_7 + sinP1_5 * cosP2_7);
    t39 = t8 * t2 * (-cosP1_6 * sinP2_8 + sinP1_6 * cosP2_8);
    t18 = t18 * t7 * (sinP1_12 * cosP2_6 - cosP1_12 * sinP2_6);
    t40 = t11 * (-0.47299434714741150243e-7 * cosP2_4 * sinP1_2 + 0.83062421938082019935e-7 * cosP1_2 * sinP2_4) - 0.86800230925295710844e-4 * sinP1_2 * t21;
    t14 = t14 * (-0.78447842941521907702e-8 * cosP2_2 * sinP1_4 + 0.39223921470760953858e-7 * cosP1_4 * sinP2_2) + 0.36029709889342044177e-3 * sinP2_2 * t22;
    t22 = 0.18996683535839128634e-7 * t73 * t22;
    t21 = 0.12420908465740968723e-7 * t8 * sinP1_6 * t21;
    t7 = 0.35126114310867456743e-15 * t4 * t7 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) + 0.93373215256736277730e-15 * t6 * t9 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + t40 * t12 + t14 * t19 + t21 + t22 - 0.70294344388159285192e-9 * t24 + 0.11062926297425103163e-16 * t3 * t5 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7) - 0.18550607566171651119e-5 * t20 * t13 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.72274069976094109674e-11 * t25 - 0.76032475280485254466e-15 * t39 - 0.73471381376300487998e-13 * t26 - 0.54428959264426523618e-5 * t1 * t17 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.62892097144117769433e-4 * t1 * t13 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.22898100323839950784e-9 * t10 * t17 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.88221102850279929524e-19 * t18 - 0.15682965234521425156e-11 * t8 * t11 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.30436280483346575686e-18 * t16 * t2 * (-sinP1_10 * cosP2_8 + cosP1_10 * sinP2_8);
    t1 = 0.16531505444025975211e-13 * t3 * t17 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) - 0.44463435836541084480e-18 * t15 * t9 * (sinP1_11 * cosP2_5 - cosP1_11 * sinP2_5) + 0.13294567315125784260e-15 * t16 * t11 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) + 0.16022843738055945204e-11 * t4 * t19 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.14420559364250350684e-9 * t6 * t13 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.14189830414422345073e-7 * t10 * t13 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.16920122987387078135e-7 * t20 * t17 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.18573680461154451681e-7 * t1 * t9 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.12275963356233631865e-9 * t1 * t5 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) - 0.79233842660716212544e-12 * t12 * t2 * (-cosP1_2 * sinP2_8 + sinP1_2 * cosP2_8) + t7;
    bf[0] = -0.88704554493899463840e-14 * t27 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.14114668711069282640e-10 * t28 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.21966982621299776624e-10 * t29 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) - t57 * t30 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - t61 * t31 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) - t76 * t32 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + t80 * t33 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8) + t79 * t34 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) + t77 * t35 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t75 * t36 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - t59 * t37 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t55 * t38 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t48;
    bf[1] = t23;
    bf[2] = t1;
}

static void idsbf_7_10_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t100, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t9, t90, t91, t92, t93, t94, t95, t96, t97, t98, t99;
    t1 = LegP1[81];
    t2 = LegP2[55];
    t3 = LegP1[79];
    t4 = LegP1[78];
    t5 = LegP2[62];
    t6 = LegP2[58];
    t7 = LegP1[85];
    t8 = LegP1[83];
    t9 = LegP2[63];
    t10 = LegP1[80];
    t11 = LegP2[60];
    t12 = LegP1[82];
    t13 = LegP1[89];
    t14 = LegP2[65];
    t15 = LegP1[88];
    t16 = LegP2[64];
    t17 = LegP2[56];
    t18 = LegP2[57];
    t19 = LegP2[59];
    t20 = LegP1[87];
    t21 = LegP1[84];
    t22 = LegP1[86];
    t23 = LegP2[61];
    t24 = LegP1[90];
    t25 = t21 * t5;
    t26 = t7 * t9;
    t27 = t22 * t16;
    t28 = t22 * t5;
    t29 = t8 * t23;
    t30 = t21 * t11;
    t31 = t7 * t23;
    t32 = t13 * t14;
    t33 = t20 * t23;
    t34 = t7 * t14;
    t35 = t12 * t5;
    t36 = t35 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7);
    t37 = t8 * t9;
    t38 = t37 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8);
    t39 = t21 * t16;
    t40 = t39 * (-cosP1_6 * sinP2_9 + sinP1_6 * cosP2_9);
    t41 = t22 * t11;
    t42 = t41 * (cosP1_8 * sinP2_5 - sinP1_8 * cosP2_5);
    t43 = t1 * t9;
    t44 = t12 * t16;
    t45 = t22 * t6;
    t46 = t7 * t18;
    t47 = t13 * t23;
    t48 = t47 * (-sinP1_11 * cosP2_6 + cosP1_11 * sinP2_6);
    t49 = t24 * t5;
    t50 = t49 * (-sinP1_12 * cosP2_7 + cosP1_12 * sinP2_7);
    t51 = t15 * t11;
    t52 = t20 * t19;
    t53 = t52 * (cosP1_9 * sinP2_4 - sinP1_9 * cosP2_4);
    t54 = t8 * t14;
    t55 = t54 * (-cosP1_5 * sinP2_10 + sinP1_5 * cosP2_10);
    t56 = t10 * t5;
    t57 = t56 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7);
    t58 = t10 * t16;
    t59 = t58 * (-cosP1_2 * sinP2_9 + sinP1_2 * cosP2_9);
    t60 = t22 * t17;
    t61 = t60 * (cosP1_8 * sinP2_1 - sinP1_8 * cosP2_1);
    t62 = t13 * t19;
    t63 = t62 * (-sinP1_11 * cosP2_4 + cosP1_11 * sinP2_4);
    t64 = t15 * t6;
    t65 = t64 * (-sinP1_10 * cosP2_3 + cosP1_10 * sinP2_3);
    t66 = t24 * t11;
    t67 = t66 * (-sinP1_12 * cosP2_5 + cosP1_12 * sinP2_5);
    t68 = t20 * t18;
    t69 = t1 * t14;
    t70 = t69 * (-cosP1_3 * sinP2_10 + sinP1_3 * cosP2_10);
    t71 = t1 * t23;
    t72 = t71 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6);
    t73 = t21 * t6;
    t74 = t73 * (cosP1_6 * sinP2_3 - sinP1_6 * cosP2_3);
    t75 = t7 * t19;
    t76 = t75 * (cosP1_7 * sinP2_4 - sinP1_7 * cosP2_4);
    t77 = t13 * t9;
    t78 = t77 * (-sinP1_11 * cosP2_8 + cosP1_11 * sinP2_8);
    t79 = t15 * t5;
    t80 = t79 * (-sinP1_10 * cosP2_7 + cosP1_10 * sinP2_7);
    t81 = t24 * t16;
    t82 = t81 * (-sinP1_12 * cosP2_9 + cosP1_12 * sinP2_9);
    t83 = t3 * t9;
    t84 = t12 * t11;
    t85 = t84 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5);
    t86 = t15 * t16;
    t87 = t8 * t19;
    t88 = t20 * t9;
    t89 = t20 * t14;
    t90 = cosP1_4 * t12;
    t91 = 0.10014950553127666598e-6 * t90;
    t92 = 0.10146950174755869048e-9 * cosP1_6 * t21;
    t93 = sinP1_4 * t12;
    t94 = 0.14223822167550450005e-6 * t93;
    t95 = sinP1_6 * t21;
    t96 = -0.89358625732527491933e-9 * t95;
    t97 = (t94 + t96) * cosP2_1 + (t91 + t92) * sinP2_1;
    t98 = t19 * (-0.26649718296443807632e-6 * cosP2_4 * sinP1_1 - 0.58630739893142721206e-7 * cosP1_1 * sinP2_4) + 0.20523025030877193202e-8 * cosP1_1 * sinP2_6 * t23;
    t99 = (0.59151935596908097159e-7 * cosP1_2 * sinP2_3 + 0.25193391750270409453e-6 * sinP1_2 * cosP2_3) * t10 * t6;
    t100 = (-0.44758465028917266826e-7 * cosP1_3 * sinP2_2 - 0.23925139715276571558e-6 * sinP1_3 * cosP2_2) * t18 * t1;
    t36 = 0.28907176095553687574e-13 * t30 * (cosP1_6 * sinP2_5 - sinP1_6 * cosP2_5) - 0.76071516040930756776e-16 * t42 + 0.48878787545702523556e-15 * t25 * (cosP1_6 * sinP2_7 - sinP1_6 * cosP2_7) + 0.23621908824351707378e-14 * t38 - 0.44412897549269772664e-15 * t31 * (cosP1_7 * sinP2_6 - sinP1_7 * cosP2_6) - 0.13842366662671852878e-16 * t28 * (cosP1_8 * sinP2_7 - sinP1_8 * cosP2_7) - 0.69069908843133647302e-17 * t26 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8) + 0.14956908988984972209e-12 * t36 - 0.89885497809557486212e-19 * t27 * (-cosP1_8 * sinP2_9 + sinP1_8 * cosP2_9) + t100 + 0.34156489167631844760e-16 * t40 - 0.24446206147422091395e-13 * t29 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t97 * t17 + t98 * t3 + t99 + 0.49673564578965979224e-18 * t34 * (-cosP1_7 * sinP2_10 + sinP1_7 * cosP2_10) + 0.10574499416492803014e-17 * t33 * (cosP1_9 * sinP2_6 - sinP1_9 * cosP2_6) + 0.23466347590214464866e-21 * t32 * (cosP1_11 * sinP2_10 - sinP1_11 * cosP2_10);
    t36 = -0.13092838935168863288e-11 * t61 + 0.19328761183107850421e-17 * t63 + 0.87425473658980123446e-16 * t65 + 0.33040617407021966530e-19 * t67 + 0.42463801491504631388e-15 * t70 + 0.66493680720988088591e-11 * t72 - 0.34194487079126916647e-11 * t74 - 0.23286967074619251059e-13 * t76 + 0.45055387373211772544e-21 * t78 + 0.29961832603185828740e-19 * t80 + 0.15644231726809643240e-23 * t82 + 0.78860048031923681209e-12 * t85 - 0.33453625124609741112e-18 * t48 - 0.67113754108013369515e-20 * t50 - 0.97803531586525723124e-15 * t53 - 0.15611691724817879186e-17 * t55 - 0.63306034411805492814e-11 * t57 + 0.58450173817718139672e-13 * t59 + 0.39016739958664843660e-13 * t43 * (cosP1_3 * sinP2_8 - sinP1_3 * cosP2_8) + t36 - 0.24354239090715891530e-15 * t44 * (-cosP1_4 * sinP2_9 + sinP1_4 * cosP2_9) - 0.40390568830448817030e-13 * t45 * (cosP1_8 * sinP2_3 - sinP1_8 * cosP2_3) + 0.63645744823737529868e-12 * t46 * (cosP1_7 * sinP2_2 - sinP1_7 * cosP2_2) - 0.18238420808676125524e-16 * t51 * (-sinP1_10 * cosP2_5 + cosP1_10 * sinP2_5) - 0.15153748767556554729e-14 * t68 * (cosP1_9 * sinP2_2 - sinP1_9 * cosP2_2) + 0.81935153913196171682e-11 * t83 * (-cosP1_1 * sinP2_8 + sinP1_1 * cosP2_8);
    t38 = 0.17543160353427435760e-4;
    t40 = -0.13472421284441704903e-2 * t17;
    t42 = 0.11521698262948599691e-8 * t5;
    t48 = sinP1_5 * t8;
    t50 = sinP1_3 * t1;
    t53 = sinP1_1 * t3;
    t55 = t8 * (0.16455318025337230446e-9 * cosP1_5 * sinP2_2 + 0.87960072482634454258e-9 * cosP2_2 * sinP1_5) - 0.26879074620344269574e-4 * cosP1_1 * sinP2_2 * t3;
    t57 = t1 * t19 * (0.12690342045925622681e-8 * sinP1_3 * cosP2_4 + 0.27919399949115581525e-9 * cosP1_3 * sinP2_4);
    t59 = (0.39825577733042491669e-9 * cosP1_4 * sinP2_3 - 0.16944468319121423820e-8 * sinP1_4 * cosP2_3) * t12 * t6;
    t61 = t84 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t26 = t26 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t63 = t88 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8);
    t65 = t86 * (cosP1_10 * cosP2_9 + sinP1_10 * sinP2_9);
    t67 = t89 * (cosP1_9 * cosP2_10 + sinP1_9 * sinP2_10);
    t25 = t25 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7);
    t27 = t27 * (cosP1_8 * cosP2_9 + sinP1_8 * sinP2_9);
    t28 = t28 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7);
    t30 = t30 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t31 = t31 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t49 = t49 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7);
    t64 = t64 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3);
    t69 = t69 * (cosP1_3 * cosP2_10 + sinP1_3 * sinP2_10);
    t70 = t83 * (cosP1_1 * cosP2_8 + sinP1_1 * sinP2_8);
    t58 = t58 * (cosP1_2 * cosP2_9 + sinP1_2 * sinP2_9);
    t72 = t87 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t34 = t34 * (cosP1_7 * cosP2_10 + sinP1_7 * sinP2_10);
    t74 = t77 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8);
    t76 = t79 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7);
    t77 = t81 * (cosP1_12 * cosP2_9 + sinP1_12 * sinP2_9);
    t37 = t37 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8);
    t33 = t33 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t35 = t35 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t41 = t41 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t71 = t71 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t73 = t73 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t43 = t43 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8);
    t52 = t52 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t56 = t56 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t44 = t44 * (cosP1_4 * cosP2_9 + sinP1_4 * sinP2_9);
    t45 = t45 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t46 = t46 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t47 = t47 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6);
    t51 = t51 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t25 = -0.78860048031923681209e-12 * t61 + 0.22798026010845156905e-18 * t63 + 0.87425473658980123446e-16 * t64 + 0.86356159131989230694e-21 * t65 + 0.11827039185468090291e-20 * t67 + 0.42463801491504631388e-15 * t69 + 0.81935153913196171682e-11 * t70 + 0.48878787545702523556e-15 * t25 + 0.69069908843133647302e-17 * t26 + 0.89885497809557486212e-19 * t27 + 0.13842366662671852878e-16 * t28 - 0.28907176095553687574e-13 * t30 + 0.15611691724817879186e-17 * t54 * (cosP1_5 * cosP2_10 + sinP1_5 * sinP2_10) + 0.40390568830448817030e-13 * t45 - 0.63645744823737529868e-12 * t46 + 0.33453625124609741112e-18 * t47 + 0.67113754108013369515e-20 * t49 + 0.18238420808676125524e-16 * t51 + 0.97803531586525723124e-15 * t52 + 0.63306034411805492814e-11 * t56 + 0.58450173817718139672e-13 * t58 + 0.44412897549269772664e-15 * t31 + 0.24354239090715891530e-15 * t44 - 0.15153748767556554729e-14 * t68 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + 0.24446206147422091395e-13 * t29 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t26 = cosP1_3 * t1;
    t27 = cosP1_5 * t8;
    t28 = 0.17239341025936842289e-5 * t26 - 0.92353612638947369396e-7 * t27 - 0.27003980303785780528e-9 * cosP1_7 * t7;
    t29 = t40 * cosP2_1 + t42 * cosP2_7;
    t30 = t17 * (-0.12453075214473112014e-4 * cosP1_2 * cosP2_1 + 0.23517833398584318363e-5 * sinP1_2 * sinP2_1) * t10;
    t25 = t25 + 0.29961832603185828740e-19 * t76 + 0.33040617407021966530e-19 * t66 * (cosP1_12 * cosP2_5 + sinP1_12 * sinP2_5) - 0.79641427395197838627e-11 * t72 - 0.76071516040930756776e-16 * t41 + 0.23621908824351707378e-14 * t37 + 0.14956908988984972209e-12 * t35 + t28 * t2 + t29 * t4 + 0.45055387373211772544e-21 * t74 + 0.39016739958664843660e-13 * t43 + t30 + 0.19328761183107850421e-17 * t62 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) + 0.34156489167631844760e-16 * t39 * (cosP1_6 * cosP2_9 + sinP1_6 * sinP2_9) - 0.34194487079126916647e-11 * t73 - 0.13092838935168863288e-11 * t60 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) - 0.23286967074619251059e-13 * t75 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.66493680720988088591e-11 * t71 + 0.49673564578965979224e-18 * t34 + 0.10574499416492803014e-17 * t33 - 0.23466347590214464866e-21 * t32 * (cosP1_11 * cosP2_10 + sinP1_11 * sinP2_10) + 0.15644231726809643240e-23 * t77;
    t28 = sinP1_2 * t10;
    t29 = 0.36202616154467368805e-3 * cosP1_1 * t2 + 0.20523025030877193202e-8 * sinP1_1 * sinP2_6 * t23;
    t25 = t11 * (t10 * (-0.10893967920694761859e-8 * sinP1_2 * sinP2_5 + 0.71086856151624251608e-9 * cosP1_2 * cosP2_5) + 0.16382414717630040186e-6 * t4 * cosP2_5) + t17 * ((t91 - t92) * cosP2_1 + (-t94 + t96) * sinP2_1) + t18 * ((-0.87960072482634454258e-9 * t27 - 0.23925139715276571558e-6 * t26) * cosP2_2 + (0.44758465028917266826e-7 * t50 - 0.26879074620344269574e-4 * t53 + 0.16455318025337230446e-9 * t48) * sinP2_2) + t19 * (t1 * (0.27919399949115581525e-9 * sinP1_3 * sinP2_4 - 0.12690342045925622681e-8 * cosP1_3 * cosP2_4) + t3 * (-0.26649718296443807632e-6 * cosP1_1 * cosP2_4 + 0.58630739893142721206e-7 * sinP1_1 * sinP2_4)) + t3 * t29 + t6 * ((-t38 * t4 - 0.39825577733042491669e-9 * t90 + 0.59151935596908097159e-7 * cosP1_2 * t10) * cosP2_3 + (-0.16944468319121423820e-8 * t93 - 0.25193391750270409453e-6 * t28) * sinP2_3) + t25;
    t26 = t7 * t11 * (cosP1_7 * sinP2_5 - sinP1_7 * cosP2_5);
    t27 = t22 * t14 * (cosP1_8 * sinP2_10 - sinP1_8 * cosP2_10);
    t29 = t13 * t16 * (-sinP1_11 * cosP2_9 + cosP1_11 * sinP2_9);
    t30 = t15 * t9 * (-sinP1_10 * cosP2_8 + cosP1_10 * sinP2_8);
    t31 = t3 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    t32 = t1 * t17 * (cosP1_3 * sinP2_1 - sinP1_3 * cosP2_1);
    t33 = t22 * t18 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2);
    t34 = t3 * t11 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5);
    t35 = t1 * t16 * (-cosP1_3 * sinP2_9 + sinP1_3 * cosP2_9);
    t37 = t7 * t17 * (cosP1_7 * sinP2_1 - sinP1_7 * cosP2_1);
    t13 = t13 * t11 * (-sinP1_11 * cosP2_5 + cosP1_11 * sinP2_5);
    t39 = t1 * t6 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3);
    t28 = 0.10261512515438596600e-7 * t95 - 0.51718023077810526866e-4 * t28;
    t41 = 0.26679932540140351160e-7 * sinP2_6 * t23 - 0.34942797006447550444e-3 * sinP2_2 * t18;
    t1 = -0.30428606416372302709e-14 * t26 + 0.44412897549269772660e-16 * t22 * t23 * (cosP1_8 * sinP2_6 - sinP1_8 * cosP2_6) + 0.27878020937174784256e-19 * t24 * t23 * (-sinP1_12 * cosP2_6 + cosP1_12 * sinP2_6) + 0.26989477466811439631e-5 * t31 - 0.88490474883553154031e-12 * t21 * t19 * (cosP1_6 * sinP2_4 - sinP1_6 * cosP2_4) - 0.83117100901235110737e-12 * t12 * t23 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) - 0.35954199123822994486e-17 * t7 * t16 * (-cosP1_7 * sinP2_9 + sinP1_7 * cosP2_9) - 0.13183206345401764645e-17 * t20 * t5 * (-cosP1_9 * sinP2_7 + sinP1_9 * cosP2_7) + 0.25235215370215577987e-10 * t1 * t11 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) - 0.14258101600398892118e-7 * t8 * t17 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + t28 * t2 + t41 * t4 + 0.75092312288686287558e-22 * t29 + 0.20725478191677415368e-19 * t30 + 0.17596363516452908478e-13 * t8 * t5 * (cosP1_5 * sinP2_7 - sinP1_5 * cosP2_7) + 0.49673564578965979216e-19 * t27 - 0.67341945830764534516e-6 * t32;
    t16 = (0.29906424644095714446e-7 * cosP2_2 * sinP1_4 + 0.55948081286146583524e-8 * cosP1_4 * sinP2_2) * t18 * t12;
    t22 = t10 * t19 * (0.83758199847346744590e-8 * cosP1_2 * sinP2_4 + 0.38071026137776868047e-7 * sinP1_2 * cosP2_4);
    t1 = t1 + 0.26246565360390785976e-15 * t21 * t9 * (cosP1_6 * sinP2_8 - sinP1_6 * cosP2_8) - 0.52371355740675453152e-10 * t37 - 0.17725689635305537987e-9 * t3 * t5 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) - 0.12310015348485689992e-9 * t8 * t6 * (cosP1_5 * sinP2_3 - sinP1_5 * cosP2_3) - 0.88912301442296111930e-16 * t15 * t19 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) - 0.53079751864380789232e-16 * t12 * t14 * (-cosP1_4 * sinP2_10 + sinP1_4 * cosP2_10) + 0.63645744823737529862e-13 * t33 - 0.25203714950200061826e-7 * t34 - 0.20739056873307479445e-7 * t39 + t22 + t16 + 0.38467208409951254314e-14 * t20 * t6 * (cosP1_9 * sinP2_3 - sinP1_9 * cosP2_3) + 0.15859496355370543934e-17 * t13 - 0.77933565090290852893e-14 * t35 + 0.11705021987599453098e-11 * t10 * t9 * (cosP1_2 * sinP2_8 - sinP1_2 * cosP2_8) + 0.20726801976064161390e-3 * t3 * t17 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.19555289658512054053e-22 * t24 * t14 * (cosP1_12 * sinP2_10 - sinP1_12 * cosP2_10);
    bf[0] = t10 * (t11 * (-0.71086856151624251608e-9 * cosP1_2 * sinP2_5 - 0.10893967920694761859e-8 * sinP1_2 * cosP2_5) + t17 * (0.23517833398584318363e-5 * sinP1_2 * cosP2_1 + 0.12453075214473112014e-4 * cosP1_2 * sinP2_1)) + t18 * t55 + t2 * (-0.92353612638947369396e-7 * t48 - 0.17239341025936842289e-5 * t50 + 0.36202616154467368805e-3 * t53 + 0.27003980303785780528e-9 * sinP1_7 * t7) + t4 * (t40 * sinP2_1 + 0.16382414717630040186e-6 * t11 * sinP2_5 - t42 * sinP2_7 + t38 * t6 * sinP2_3) - 0.86356159131989230694e-21 * t86 * (-sinP1_10 * cosP2_9 + cosP1_10 * sinP2_9) + 0.79641427395197838627e-11 * t87 * (cosP1_5 * sinP2_4 - sinP1_5 * cosP2_4) - 0.22798026010845156905e-18 * t88 * (cosP1_9 * sinP2_8 - sinP1_9 * cosP2_8) - 0.11827039185468090291e-20 * t89 * (-cosP1_9 * sinP2_10 + sinP1_9 * cosP2_10) + t36 + t57 + t59;
    bf[1] = t25;
    bf[2] = t1;
}

static void idsbf_8_0_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4;
    t1 = 0.68350671763063283328e-7 * LegP1[35];
    t2 = -0.19138188093657719333e-6 * LegP1[33];
    t3 = 0.25262408283628189522e-4 * LegP1[31];
    t4 = -0.22736167455265370570e-2 * LegP1[29];
    bf[0] = t4 * cosP1_1 + t3 * cosP1_3 + t2 * cosP1_5 + t1 * cosP1_7;
    bf[1] = t4 * sinP1_1 - t3 * sinP1_3 + t2 * sinP1_5 - t1 * sinP1_7;
    bf[2] = -0.45931651424778526399e-5 * LegP1[32] * cosP1_4 - 0.18188933964212296456e-1 * LegP1[28];
}

static void idsbf_8_0_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5;
    t1 = -0.26850679723509956436e-9 * LegP1[54];
    t2 = 0.53701359447019912866e-9 * LegP1[52];
    t3 = -0.18043656774198690726e-6 * LegP1[50];
    t4 = 0.54130970322596072179e-5 * LegP1[48];
    t5 = -0.21435864247748044583e-2 * LegP1[46];
    bf[0] = t5 * cosP1_1 + t4 * cosP1_3 + t3 * cosP1_5 + t2 * cosP1_7 + t1 * cosP1_9;
    bf[1] = t5 * sinP1_1 - t4 * sinP1_3 + t3 * sinP1_5 - t2 * sinP1_7 + t1 * sinP1_9;
    bf[2] = 0.53701359447019912869e-9 * LegP1[53] * cosP1_8 + 0.18043656774198690725e-5 * LegP1[49] * cosP1_4 + 0.19292277822973240125e-1 * LegP1[45];
}

static void idsbf_8_2_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[16];
    t2 = LegP2[3];
    t3 = LegP1[18];
    t4 = LegP1[20];
    t5 = LegP2[5];
    t6 = LegP2[4];
    t7 = LegP1[17];
    t8 = LegP1[15];
    t9 = sinP1_3 * t3;
    t10 = sinP1_1 * t1;
    t11 = sinP1_5 * t4;
    t12 = cosP1_5 * t4;
    t13 = cosP1_3 * t3;
    t14 = cosP1_1 * t1;
    t15 = cosP1_4 * LegP1[19];
    t16 = -0.50965016782574016466e-5 * t15;
    t17 = -0.77059105375251912901e-2 * t8;
    t18 = cosP1_2 * t7;
    t1 = t2 * (-0.23117731612575573871e-1 * t8 - 0.15289505034772204942e-4 * t15) + 0.50965016782574016468e-6 * t4 * t6 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.45868515104316614820e-4 * t3 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.25686368458417304301e-2 * t1 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t7 * t5 * (-0.4e-23 * sinP1_2 * sinP2_2 - 0.18347406041726645930e-3 * cosP1_2 * cosP2_2);
    bf[0] = t2 * (-0.38529552687625956453e-2 * t14 - 0.76447525173861024704e-6 * t12 + 0.68802772656474922236e-4 * t13) + t5 * ((-0.11467128776079153706e-4 * t13 + 0.42046138845623563586e-5 * t12 + 0.64215921146043260753e-3 * t14) * cosP2_2 + (-0.3e-22 * t10 + 0.4e-24 * t9 - 0.40772013426059213174e-5 * t11) * sinP2_2) + t6 * ((t17 + 0.36694812083453291857e-3 * t18 + t16) * cosP2_1 + 0.18e-22 * sinP1_2 * sinP2_1 * t7);
    bf[1] = t2 * (-0.76447525173861024704e-6 * t11 - 0.68802772656474922236e-4 * t9 - 0.38529552687625956451e-2 * t10) + t5 * ((-0.42046138845623563586e-5 * t11 - 0.11467128776079153706e-4 * t9 - 0.64215921146043260752e-3 * t10) * cosP2_2 + (-0.4e-22 * t14 - 0.40772013426059213174e-5 * t12 - 0.5e-24 * t13) * sinP2_2) + t6 * ((t17 - 0.36694812083453291855e-3 * t18 + t16) * sinP2_1 + 0.1e-22 * sinP1_2 * cosP2_1 * t7);
    bf[2] = t1;
}

static void idsbf_8_2_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[33];
    t2 = LegP2[5];
    t3 = LegP1[35];
    t4 = LegP1[32];
    t5 = LegP2[4];
    t6 = LegP1[30];
    t7 = LegP1[29];
    t8 = LegP1[34];
    t9 = LegP1[31];
    t10 = LegP2[3];
    t11 = LegP1[28];
    t12 = t8 * t5;
    t13 = cosP1_7 * t3;
    t14 = cosP1_5 * t1;
    t15 = cosP1_3 * t9;
    t16 = cosP1_1 * t7;
    t3 = sinP1_7 * t3;
    t17 = sinP1_5 * t1;
    t18 = sinP1_3 * t9;
    t19 = sinP1_1 * t7;
    t20 = cosP1_2 * t6;
    t21 = 0.21704840984374120380e-3 * t20;
    t22 = cosP1_4 * t4;
    t23 = -0.24879066740982193318e-5 * t22;
    t24 = -0.71342868626899282639e-2 * t11;
    t6 = 0.12267953599863633258e-3 * sinP1_2 * t6;
    t4 = 0.22305370181570242286e-5 * sinP1_4 * t4;
    t25 = t10 * (-0.70776655383828653410e-6 * t17 - 0.84931986460594384106e-5 * t18 - 0.35671434313449641320e-2 * t19) + t2 * ((-0.31849494922722894037e-3 * t19 - 0.29490273076595272256e-7 * t3 - 0.58980546153190544508e-7 * t17 - 0.10616498307574298012e-4 * t18) * cosP2_2 + (-0.28596628437910567036e-7 * t13 - 0.57193256875821134068e-7 * t14 + 0.6e-24 * t15 - 0.1e-22 * t16) * sinP2_2) + t5 * ((t6 - t4) * cosP2_1 + (t24 - t21 + t23) * sinP2_1) + 0.21447471328432925276e-7 * t12 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t1 = t10 * (0.24970004019414748924e-1 * t11 + 0.42465993230297192044e-5 * t22) + t2 * (t8 * (0.58980546153190544504e-7 * cosP1_6 * cosP2_2 - 0.57193256875821134064e-7 * sinP1_6 * sinP2_2) + 0.10616498307574298012e-3 * t20 * cosP2_2) - 0.85789885313731701098e-7 * t1 * t5 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.18873774769020974244e-4 * t9 * t5 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.20383676750542652182e-2 * t7 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = t10 * (-0.35671434313449641319e-2 * t16 - 0.70776655383828653410e-6 * t14 + 0.84931986460594384106e-5 * t15) + t2 * ((-0.10616498307574298012e-4 * t15 + 0.58980546153190544508e-7 * t14 - 0.29490273076595272256e-7 * t13 + 0.31849494922722894036e-3 * t16) * cosP2_2 + (0.28596628437910567036e-7 * t3 - 0.6e-24 * t18 - 0.57193256875821134068e-7 * t17 - 0.6e-23 * t19) * sinP2_2) + t5 * ((t24 + t21 + t23) * cosP2_1 + (t6 + t4) * sinP2_1) + 0.21447471328432925276e-7 * t12 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1);
    bf[1] = t25;
    bf[2] = t1;
}

static void idsbf_8_2_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[35];
    t2 = LegP2[3];
    t3 = LegP1[33];
    t4 = LegP2[5];
    t5 = LegP1[32];
    t6 = LegP2[4];
    t7 = LegP1[30];
    t8 = LegP1[29];
    t9 = LegP1[34];
    t10 = LegP1[31];
    t11 = LegP1[28];
    t12 = -0.12776623109008208837e-2;
    t13 = cosP1_7 * t1;
    t14 = cosP1_5 * t3;
    t15 = cosP1_3 * t10;
    t16 = cosP1_1 * t8;
    t17 = sinP1_7 * t1;
    t18 = sinP1_5 * t3;
    t19 = sinP1_3 * t10;
    t20 = sinP1_1 * t8;
    t21 = 0.51264228523798368800e-4 * cosP1_2 * t7;
    t22 = cosP1_4 * t5;
    t23 = -0.14698135450879252591e-5 * t22;
    t24 = cosP1_6 * t9;
    t25 = 0.86754848271043393348e-4 * sinP1_2 * t7;
    t5 = 0.27245324250410321876e-5 * sinP1_4 * t5;
    t26 = 0.12547188799531069285e-6 * sinP1_6 * t9;
    t27 = t2 * (-0.12803253877072519679e-6 * t17 + 0.71698221711606110206e-7 * t18 + 0.94641652659320065476e-5 * t19 + 0.25553246218016417677e-2 * t20) + t4 * ((-0.11830206582415008184e-4 * t19 - 0.10647185924173507366e-2 * t20 - 0.12803253877072519679e-8 * t17 - 0.23301922056271985817e-6 * t18) * cosP2_2 + (0.53235929620867536830e-3 * t16 + 0.38836536760453309694e-7 * t14 + 0.59151032912075040920e-5 * t15 + 0.21338756461787532802e-9 * t13) * sinP2_2) + t6 * ((t25 + t5 + t26) * cosP2_1 + (-0.12776623109008208838e-2 * t11 + t21 + t23 + 0.98585054853458401527e-7 * t24) * sinP2_1);
    t1 = t2 * (0.20442596974413134141e-1 * t11 + 0.17207573210785466448e-5 * t22) + t4 * (t7 * (-0.11830206582415008184e-3 * sinP1_2 * sinP2_2 - 0.23660413164830016368e-3 * cosP1_2 * cosP2_2) + t9 * (-0.35849110855803055102e-7 * cosP1_6 * cosP2_2 - 0.5974851809300509182e-8 * sinP1_6 * sinP2_2)) + 0.16004067346340649599e-7 * t1 * t6 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) + 0.34952883084407978722e-6 * t3 * t6 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.13801907679484176215e-4 * t10 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.31941557772520522096e-3 * t8 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = t2 * (0.71698221711606110206e-7 * t14 - 0.94641652659320065476e-5 * t15 + 0.25553246218016417677e-2 * t16 + 0.12803253877072519679e-6 * t13) + t4 * ((-0.12803253877072519679e-8 * t13 + 0.23301922056271985816e-6 * t14 - 0.11830206582415008184e-4 * t15 + 0.10647185924173507366e-2 * t16) * cosP2_2 + (0.53235929620867536827e-3 * t20 + 0.38836536760453309692e-7 * t18 - 0.59151032912075040919e-5 * t19 - 0.21338756461787532802e-9 * t17) * sinP2_2) + t6 * ((t11 * t12 - t21 + t23 - 0.98585054853458401530e-7 * t24) * cosP2_1 + (t25 - t5 + t26) * sinP2_1);
    bf[1] = t27;
    bf[2] = t1;
}

static void idsbf_8_2_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[50];
    t2 = LegP2[3];
    t3 = LegP1[46];
    t4 = LegP1[54];
    t5 = LegP1[52];
    t6 = LegP1[51];
    t7 = LegP2[4];
    t8 = LegP2[5];
    t9 = LegP1[53];
    t10 = LegP1[49];
    t11 = LegP1[47];
    t12 = LegP1[48];
    t13 = LegP1[45];
    t14 = t9 * t7;
    t15 = cosP1_3 * t12;
    t16 = cosP1_1 * t3;
    t17 = cosP1_7 * t5;
    t18 = cosP1_5 * t1;
    t19 = sinP1_7 * t5;
    t20 = sinP1_5 * t1;
    t21 = sinP1_3 * t12;
    t22 = sinP1_1 * t3;
    t23 = 0.8111727803406917231e-5 * cosP1_2 * t11;
    t24 = cosP1_4 * t10;
    t25 = 0.33798865847528821792e-6 * t24;
    t26 = -0.12045915788059272086e-2 * t13;
    t27 = cosP1_6 * t6;
    t28 = 0.41572604992460450805e-4 * sinP1_2 * t11;
    t10 = 0.84497164618822054480e-6 * sinP1_4 * t10;
    t29 = 0.15692330572066952974e-7 * sinP1_6 * t6;
    t30 = t2 * (0.20279319508517293078e-5 * t21 + 0.24091831576118544174e-2 * t22 - 0.50295931320727413382e-9 * sinP1_9 * t4 - 0.10059186264145482676e-8 * t19 + 0.67597731695057643592e-7 * t20) + t7 * ((t10 + t29 + t28) * cosP2_1 + (t25 + t26 - 0.96568188135796633684e-8 * t27 + t23) * sinP2_1) + t8 * ((-0.14485228220369495055e-7 * t20 - 0.11153625729684511192e-4 * t21 - 0.62460304086233262674e-3 * t22 - 0.12071023516974579211e-8 * t19) * cosP2_2 + (0.31230152043116631338e-3 * t16 + 0.24142047033949158424e-8 * t18 + 0.55768128648422555956e-5 * t15 + 0.20118372528290965350e-9 * t17) * sinP2_2) + 0.50295931320727413378e-9 * t14 * (cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1);
    t1 = t2 * (-0.21682648418506689757e-1 * t13 + 0.10059186264145482676e-8 * cosP1_8 * t9 - 0.67597731695057643586e-6 * t24) + t8 * (t11 * (0.78075380107791578342e-4 * sinP1_2 * sinP2_2 + 0.15615076021558315668e-3 * cosP1_2 * cosP2_2) + t6 * (0.72426141101847475270e-8 * cosP1_6 * cosP2_2 + 0.12071023516974579210e-8 * sinP1_6 * sinP2_2)) - 0.20118372528290965352e-8 * t5 * t7 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) - 0.10139659754258646539e-6 * t1 * t7 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.70977618279810525766e-5 * t12 * t7 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.26768701751242826860e-3 * t3 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = t2 * (-0.50295931320727413382e-9 * cosP1_9 * t4 + 0.10059186264145482676e-8 * t17 + 0.24091831576118544174e-2 * t16 + 0.67597731695057643592e-7 * t18 - 0.20279319508517293078e-5 * t15) + t7 * ((t25 + t26 + 0.96568188135796633687e-8 * t27 - t23) * cosP2_1 + (-t10 + t29 + t28) * sinP2_1) + t8 * ((-0.12071023516974579211e-8 * t17 - 0.11153625729684511192e-4 * t15 + 0.14485228220369495055e-7 * t18 + 0.62460304086233262674e-3 * t16) * cosP2_2 + (0.31230152043116631338e-3 * t22 - 0.20118372528290965350e-9 * t19 - 0.55768128648422555956e-5 * t21 + 0.24142047033949158424e-8 * t20) * sinP2_2) + 0.50295931320727413378e-9 * t14 * (cosP1_8 * cosP2_1 - sinP1_8 * sinP2_1);
    bf[1] = t30;
    bf[2] = t1;
}

static void idsbf_8_2_9_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[50];
    t2 = LegP2[3];
    t3 = LegP1[54];
    t4 = LegP1[52];
    t5 = LegP1[51];
    t6 = LegP2[4];
    t7 = LegP2[5];
    t8 = LegP1[53];
    t9 = LegP1[49];
    t10 = LegP1[47];
    t11 = LegP1[46];
    t12 = LegP1[48];
    t13 = t5 * t6;
    t14 = t9 * t6;
    t15 = cosP1_7 * t4;
    t16 = cosP1_5 * t1;
    t17 = cosP1_3 * t12;
    t18 = cosP1_1 * t11;
    t19 = sinP1_7 * t4;
    t1 = sinP1_5 * t1;
    t20 = sinP1_3 * t12;
    t21 = sinP1_1 * t11;
    t22 = 0.18579885530005902254e-3 * cosP1_2 * t10;
    t23 = cosP1_8 * t8;
    t24 = -0.19608963958550639827e-9 * t23;
    t25 = 0.11740906388110112702e-1 * LegP1[45];
    t26 = 0.75110175546832370819e-4 * sinP1_2 * t10;
    t8 = 0.39217927917101279660e-9 * sinP1_8 * t8;
    t27 = t2 * (0.12847793185642379219e-4 * t20 - 0.98044819792753199166e-10 * sinP1_9 * t3 + 0.33335238729536087716e-8 * t19 - 0.16471529725182537459e-6 * t1) + t6 * ((t26 + t8) * cosP2_1 + (-t22 + t24 + t25) * sinP2_1) + t7 * ((-0.35296135125391151698e-7 * t1 + 0.64238965928211896092e-5 * t20 - 0.56530290016826468559e-3 * t21 + 0.58826891875651919501e-9 * t19) * cosP2_2 + (0.47061513500521535598e-7 * t16 - 0.98829178351095224760e-5 * t17 - 0.78435855834202559331e-9 * t15 + 0.86969676948963797787e-3 * t18) * sinP2_2) + 0.65886118900730149838e-6 * t14 * (cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) - 0.47061513500521535596e-8 * t13 * (cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1);
    t4 = t2 * (-0.15687171166840511866e-8 * t23 - 0.13177223780146029969e-5 * cosP1_4 * t9) + t7 * (t10 * (0.25695586371284758440e-4 * cosP1_2 * cosP2_2 + 0.39531671340438089908e-4 * sinP1_2 * sinP2_2) + t5 * (0.94123027001043071199e-8 * sinP1_6 * sinP2_2 + 0.70592270250782303401e-8 * cosP1_6 * cosP2_2)) - 0.29413445937825959746e-9 * t3 * t6 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) + 0.13726274770985447883e-8 * t4 * t6 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) + 0.39531671340438089902e-5 * t12 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.26090903084689139339e-3 * t11 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = t2 * (-0.12847793185642379219e-4 * t17 - 0.16471529725182537459e-6 * t16 - 0.98044819792753199166e-10 * cosP1_9 * t3 - 0.33335238729536087716e-8 * t15) + t6 * ((t22 + t24 + t25) * cosP2_1 + (t26 - t8) * sinP2_1) + t7 * ((0.56530290016826468557e-3 * t18 + 0.35296135125391151698e-7 * t16 + 0.64238965928211896092e-5 * t17 + 0.58826891875651919502e-9 * t15) * cosP2_2 + (0.98829178351095224760e-5 * t20 + 0.78435855834202559330e-9 * t19 + 0.86969676948963797785e-3 * t21 + 0.47061513500521535598e-7 * t1) * sinP2_2) + 0.47061513500521535596e-8 * t13 * (cosP1_6 * cosP2_1 - sinP1_6 * sinP2_1) + 0.65886118900730149838e-6 * t14 * (cosP1_4 * cosP2_1 - sinP1_4 * sinP2_1);
    bf[1] = t27;
    bf[2] = t4;
}

static void idsbf_8_2_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[50];
    t2 = LegP2[3];
    t3 = LegP1[54];
    t4 = LegP2[5];
    t5 = LegP1[52];
    t6 = LegP1[46];
    t7 = LegP1[51];
    t8 = LegP2[4];
    t9 = LegP1[53];
    t10 = LegP1[49];
    t11 = LegP1[47];
    t12 = LegP1[48];
    t13 = LegP1[45];
    t14 = t3 * t4;
    t15 = 0.11518123023646427510e-3 * cosP1_2 * t11;
    t16 = cosP1_4 * t10;
    t17 = 0.10390059428547035125e-5 * t16;
    t18 = 0.61256586200050547224e-8 * cosP1_6 * t7;
    t19 = cosP1_8 * t9;
    t20 = 0.42702908649073698780e-9 * t19;
    t21 = 0.96983783294466182158e-2 * t13;
    t22 = -0.21204202915402112504e-8 * sinP1_6 * t7;
    t9 = 0.41230394557726329856e-9 * sinP1_8 * t9;
    t23 = -0.61152921208019692446e-4 * sinP1_2 * t11;
    t10 = 0.69267062856980234163e-6 * sinP1_4 * t10;
    t24 = sinP1_7 * t5;
    t25 = sinP1_5 * t1;
    t26 = sinP1_3 * t12;
    t27 = sinP1_1 * t6;
    t28 = cosP1_1 * t6;
    t29 = cosP1_7 * t5;
    t30 = cosP1_5 * t1;
    t31 = cosP1_3 * t12;
    t32 = t2 * (-0.73625704567368446182e-11 * sinP1_9 * t3 - 0.22529465597614744534e-8 * t24 - 0.26450122716672595133e-2 * t27 - 0.74214710203907393750e-7 * t25 - 0.13507077257111145664e-4 * t26) + t4 * ((-0.27954207510138451647e-5 * t26 - 0.36899553913382756180e-3 * t27 - 0.21351454324536849396e-9 * t24 - 0.51243490378888438549e-7 * t25) * cosP2_2 + (0.19878940233189480472e-9 * t29 + 0.47709456559654753133e-7 * t30 + 0.21027501224440428231e-5 * t31 + 0.27756301616261365268e-3 * t28) * sinP2_2) + t8 * ((t22 - t9 + t23 - t10) * cosP2_1 + (t17 + t18 + t20 + t21 + t15) * sinP2_1) - 0.11657403223166670644e-9 * t14 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2);
    t1 = t2 * (-0.26450122716672595134e-1 * t13 - 0.26505253644252640624e-9 * t19 - 0.20780118857094070251e-5 * t16) + t4 * (t11 * (-0.50466002938657027756e-4 * sinP1_2 * sinP2_2 - 0.67090098024332283956e-4 * cosP1_2 * cosP2_2) + t7 * (-0.63612608746206337502e-8 * sinP1_6 * sinP2_2 - 0.68324653838517918058e-8 * cosP1_6 * cosP2_2)) - 0.12369118367317898959e-6 * t1 * t8 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.46629612892666682584e-10 * t3 * t8 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) + 0.25032739552905271704e-9 * t5 * t8 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) + 0.45023590857037152208e-5 * t12 * t8 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.19396756658893236431e-2 * t6 * t8 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = t2 * (0.13507077257111145664e-4 * t31 - 0.73625704567368446182e-11 * cosP1_9 * t3 + 0.22529465597614744534e-8 * t29 - 0.74214710203907393750e-7 * t30 - 0.26450122716672595133e-2 * t28) + t4 * ((0.36899553913382756180e-3 * t28 - 0.27954207510138451647e-5 * t31 + 0.51243490378888438549e-7 * t30 - 0.21351454324536849396e-9 * t29) * cosP2_2 + (-0.21027501224440428231e-5 * t26 + 0.47709456559654753133e-7 * t25 - 0.19878940233189480472e-9 * t24 + 0.27756301616261365268e-3 * t27) * sinP2_2) + t8 * ((t17 - t18 + t20 + t21 - t15) * cosP2_1 + (t22 + t9 + t23 + t10) * sinP2_1) + 0.11657403223166670644e-9 * t14 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2);
    bf[1] = t32;
    bf[2] = t1;
}

static void idsbf_8_2_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[69];
    t2 = LegP2[5];
    t3 = LegP1[75];
    t4 = LegP2[4];
    t5 = LegP1[72];
    t6 = LegP1[66];
    t7 = LegP1[67];
    t8 = LegP2[3];
    t9 = LegP1[71];
    t10 = LegP1[73];
    t11 = LegP1[76];
    t12 = LegP1[68];
    t13 = t3 * t2;
    t14 = LegP1[77] * t2;
    t15 = t11 * t4;
    t16 = -0.11699892485305691812e-11;
    t17 = -0.72176168746151400556e-4 * sinP1_2 * t12 - 0.37907651652390441474e-8 * sinP1_6 * t5;
    t18 = sinP1_7 * t10;
    t19 = sinP1_5 * t9;
    t20 = sinP1_3 * t1;
    t21 = sinP1_1 * t7;
    t22 = cosP1_7 * t10;
    t23 = cosP1_5 * t9;
    t24 = cosP1_3 * t1;
    t25 = cosP1_1 * t7;
    t26 = 0.95951847862530685448e-4 * cosP1_2 * t12;
    t27 = cosP1_4 * LegP1[70];
    t28 = 0.33021776550526784572e-6 * t27;
    t29 = 0.40715625848863807510e-8 * cosP1_6 * t5;
    t30 = cosP1_8 * LegP1[74];
    t31 = 0.14039870982366830174e-10 * t30;
    t32 = 0.92470409134775147302e-2 * t6;
    t33 = t16 * t15 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) + t2 * ((-0.20357812924431903755e-9 * t18 - 0.61073438773295711266e-8 * t19 - 0.26653291072925190405e-5 * t20 - 0.23987961965632671367e-3 * t21) * cosP2_2 + (0.18953825826195220738e-9 * t22 + 0.56861477478585662214e-8 * t23 + 0.20048935762819833491e-5 * t24 + 0.18044042186537850143e-3 * t25) * sinP2_2) + t4 * (cosP2_1 * t17 + (t26 + t32 + t28 + t29 + t31) * sinP2_1) + t8 * (-0.70199354911834150875e-11 * sinP1_9 * t3 - 0.84239225894200981056e-10 * t18 - 0.70760949751128824082e-7 * t19 - 0.39626131860632141486e-5 * t20 - 0.25219202491302312905e-2 * t21) - 0.29249731213264229530e-12 * t14 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) - 0.58499462426528459058e-12 * t13 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2);
    t1 = t2 * (t12 * (0.47975923931265342733e-4 * cosP1_2 * cosP2_2 + 0.36088084373075700287e-4 * sinP1_2 * sinP2_2) + t5 * (0.18953825826195220737e-8 * sinP1_6 * sinP2_2 + 0.20357812924431903753e-8 * cosP1_6 * cosP2_2)) + t8 * (0.27741122740432544194e-1 * t6 + 0.42119612947100490526e-10 * t30 + 0.99065329651580353720e-6 * t27) + 0.58499462426528459064e-12 * t11 * t2 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) + 0.46799569941222767250e-11 * t3 * t4 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) - 0.56159483929467320706e-10 * t10 * t4 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) + 0.47173966500752549388e-7 * t9 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.26417421240421427658e-5 * t1 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.16812801660868208603e-2 * t7 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = t2 * ((-0.26653291072925190405e-5 * t24 + 0.23987961965632671367e-3 * t25 - 0.20357812924431903755e-9 * t22 + 0.61073438773295711266e-8 * t23) * cosP2_2 + (0.18044042186537850143e-3 * t21 - 0.20048935762819833491e-5 * t20 - 0.18953825826195220738e-9 * t18 + 0.56861477478585662214e-8 * t19) * sinP2_2) + t4 * ((-t26 + t32 + t28 - t29 + t31) * cosP2_1 + sinP2_1 * t17) + t8 * (-0.25219202491302312905e-2 * t25 + 0.84239225894200981053e-10 * t22 - 0.70760949751128824082e-7 * t23 - 0.70199354911834150875e-11 * cosP1_9 * t3 + 0.39626131860632141486e-5 * t24) + 0.58499462426528459058e-12 * t13 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - 0.29249731213264229530e-12 * t14 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) + t16 * t15 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1);
    bf[1] = t33;
    bf[2] = t1;
}

static void idsbf_8_4_4_3_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[9];
    t2 = LegP2[10];
    t3 = LegP1[6];
    t4 = LegP2[13];
    t5 = LegP2[14];
    t6 = LegP1[8];
    t7 = LegP2[11];
    t8 = LegP1[7];
    t9 = LegP2[12];
    t10 = cosP2_2 * t9;
    t11 = -0.13226647047680018821e-4 * t10;
    t12 = cosP2_4 * t5;
    t13 = 0.77942741530971539480e-5 * t12;
    t14 = 0.19839970571520028231e-3 * t2;
    t15 = sinP2_2 * t9;
    t16 = 0.7e-24 * t15;
    t5 = -0.75580840272457250404e-5 * sinP2_4 * t5;
    t17 = sinP2_3 * t4;
    t18 = sinP2_1 * t7;
    t19 = cosP2_3 * t4;
    t20 = cosP2_1 * t7;
    t21 = -0.70857037755428672264e-5 * t12;
    t4 = t3 * (-0.23807964685824033876e-1 * t2 - 0.28342815102171468904e-4 * t12) - 0.79359882286080112928e-4 * t1 * t7 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.56685630204342937806e-4 * t8 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.18895210068114312602e-5 * t1 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.23807964685824033878e-2 * t8 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t6 * t9 * (-0.15871976457216022585e-3 * cosP1_2 * cosP2_2 + 0.2e-23 * sinP1_2 * sinP2_2);
    bf[0] = t1 * ((t14 + t11 + t13) * cosP1_3 + (t5 + t16) * sinP1_3) + t3 * (0.11337126040868587561e-3 * t19 - 0.47615929371648067756e-2 * t20) + t6 * ((0.47615929371648067758e-3 * t20 - 0.11337126040868587561e-4 * t19) * cosP1_2 + (-0.5e-24 * t17 - 0.2e-22 * t18) * sinP1_2) + t8 * ((-0.59519911714560084697e-2 * t2 + t21 + 0.39679941143040056467e-3 * t10) * cosP1_1 - 0.4e-23 * t15 * sinP1_1);
    bf[1] = t1 * ((t5 - t16) * cosP1_3 + (-t14 + t11 - t13) * sinP1_3) + t3 * (-0.47615929371648067755e-2 * t18 - 0.11337126040868587561e-3 * t17) + t6 * ((-0.11337126040868587561e-4 * t17 - 0.47615929371648067757e-3 * t18) * cosP1_2 + (-0.3e-22 * t20 + 0.5e-24 * t19) * sinP1_2) + (-0.59519911714560084696e-2 * t2 + t21 - 0.39679941143040056466e-3 * t10) * t8 * sinP1_1;
    bf[2] = t4;
}

static void idsbf_8_4_4_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[15];
    t2 = LegP2[13];
    t3 = LegP1[20];
    t4 = LegP2[10];
    t5 = LegP1[18];
    t6 = LegP2[14];
    t7 = LegP1[17];
    t8 = LegP2[11];
    t9 = LegP1[16];
    t10 = LegP2[12];
    t11 = LegP1[19];
    t12 = t11 * t8;
    t13 = t11 * t2;
    t14 = t3 * sinP1_5;
    t15 = 0.12071706903269152710e-6;
    t16 = cosP2_4 * t6;
    t17 = -0.31688230621081525864e-5 * t4 - 0.12448947743996313732e-6 * t16;
    t18 = cosP2_2 * t10;
    t19 = -0.11830272765203769656e-4 * t18;
    t20 = 0.24897895487992627466e-6 * t16;
    t21 = 0.63376461242163051732e-5 * t4;
    t22 = t6 * sinP2_4;
    t23 = -0.24143413806538305422e-6 * t22;
    t24 = sinP2_2 * t10;
    t25 = t2 * cosP2_3;
    t26 = t8 * cosP2_1;
    t27 = sinP2_3 * t2;
    t28 = sinP2_1 * t8;
    t18 = 0.14196327318244523587e-3 * t18;
    t29 = -0.63376461242163051730e-5 * t16;
    t30 = -0.53236227443416963456e-2 * t4;
    t31 = 0.10140233798746088277e-3 * t2;
    t22 = t1 * (-t31 * sinP2_3 - 0.42588981954733570762e-2 * t28) + t5 * ((t23 - 0.4e-24 * t24) * cosP1_3 + (t19 - t20 - t21) * sinP1_3) + t7 * ((-0.57944193135691933008e-5 * t27 - 0.24336561116990611864e-3 * t28) * cosP1_2 + (-0.43458144851768949756e-5 * t25 + 0.18252420837742958898e-3 * t26) * sinP1_2) + t9 * ((-t18 + t29 + t30) * sinP1_1 - 0.1e-23 * t24 * cosP1_1) + t15 * (t13 * (-cosP1_4 * sinP2_3 + sinP1_4 * cosP2_3) - t22 * t3 * cosP1_5) - 0.50701168993730441382e-5 * t12 * (cosP1_4 * sinP2_1 + sinP1_4 * cosP2_1) + t14 * t17;
    t2 = t1 * (0.26618113721708481725e-1 * t4 + 0.31688230621081525866e-4 * t16) + t11 * (t6 * (0.24897895487992627462e-6 * cosP1_4 * cosP2_4 - 0.24143413806538305418e-6 * sinP1_4 * sinP2_4) + 0.63376461242163051734e-5 * cosP1_4 * t4) + 0.20280467597492176554e-4 * t5 * t8 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.40560935194984353112e-4 * t9 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.48286827613076610844e-6 * t5 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.17035592781893428306e-2 * t9 * t8 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + (0.1e-23 * sinP1_2 * sinP2_2 + 0.70981636591222617937e-4 * cosP1_2 * cosP2_2) * t10 * t7;
    bf[0] = t1 * (-0.42588981954733570761e-2 * t8 * cosP2_1 + t31 * cosP2_3) + t5 * ((t19 + t20 + t21) * cosP1_3 + (t23 + 0.5e-24 * t24) * sinP1_3) + t7 * ((-0.57944193135691933008e-5 * t25 + 0.24336561116990611863e-3 * t26) * cosP1_2 + (0.43458144851768949756e-5 * t27 + 0.18252420837742958899e-3 * t28) * sinP1_2) - 0.50701168993730441382e-5 * t12 * (cosP1_4 * cosP2_1 - sinP1_4 * sinP2_1) + t15 * (t13 * (cosP1_4 * cosP2_3 + sinP1_4 * sinP2_3) + t14 * t6 * sinP2_4) + (t18 + t29 + t30) * t9 * cosP1_1 + t17 * t3 * cosP1_5;
    bf[1] = t22;
    bf[2] = t2;
}

static void idsbf_8_4_6_5_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[15];
    t2 = LegP2[13];
    t3 = LegP1[20];
    t4 = LegP2[10];
    t5 = LegP2[12];
    t6 = LegP1[16];
    t7 = LegP1[18];
    t8 = LegP2[14];
    t9 = LegP1[17];
    t10 = LegP2[11];
    t11 = LegP1[19];
    t12 = sinP1_5 * t3;
    t13 = sinP1_3 * t7;
    t14 = sinP1_1 * t6;
    t15 = t3 * cosP1_5;
    t16 = t7 * cosP1_3;
    t17 = t6 * cosP1_1;
    t18 = cosP1_2 * t9;
    t19 = -0.16003650514239688549e-4 * t18;
    t20 = cosP1_4 * t11;
    t21 = 0.54633438281996859920e-6 * t20;
    t22 = 0.78522584298839593354e-4 * t1;
    t23 = sinP1_2 * t9;
    t24 = 0.12264479833342565057e-4 * t23;
    t25 = sinP1_4 * t11;
    t26 = 0.93894730431416656596e-6 * t25;
    t18 = 0.78073883817131938523e-4 * t18;
    t20 = -0.50229526146718025583e-5 * t20;
    t27 = 0.84804391042746760765e-3 * t1;
    t23 = 0.37690840463443004825e-4 * t23;
    t25 = 0.66307960074575656602e-5 * t25;
    t28 = -0.72290633164011054188e-6 * t3;
    t29 = 0.65061569847609948772e-4 * t7;
    t30 = cosP2_4 * t8;
    t31 = t10 * ((t23 + t25) * cosP2_1 + (t18 + t20 + t27) * sinP2_1) + t2 * ((t24 + t26) * cosP2_3 + (t19 + t21 - t22) * sinP2_3) + t4 * (-t29 * sinP1_3 + t28 * sinP1_5 + 0.33921756417098704331e-2 * t14) + t5 * ((-0.10968233997298228912e-5 * t12 - 0.29913365447176987946e-5 * t13 - 0.16751484650419113250e-3 * t14) * cosP2_2 + (-0.68551462483113930700e-6 * t15 + 0.57583228485815701796e-5 * t16 + 0.32246607952056793006e-3 * t17) * sinP2_2) + t8 * ((-0.11425243747185655117e-7 * t12 - 0.10282719372467089605e-5 * t13 - 0.15704516859767918671e-4 * t14) * cosP2_4 + (-0.20773170449428463845e-8 * t15 - 0.18695853404485617459e-6 * t16) * sinP2_4);
    t1 = t1 * (0.20353053850259222599e-1 * t4 - 0.94227101158607512022e-4 * t30) + t11 * (t8 * (0.41546340898856927680e-7 * sinP1_4 * sinP2_4 - 0.22850487494371310232e-6 * cosP1_4 * cosP2_4) - 0.14458126632802210838e-4 * cosP1_4 * t4) + 0.14470590535071867918e-4 * t7 * t10 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.26174194766279864452e-4 * t6 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.35335162934477817007e-5 * t7 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.28268130347582253588e-3 * t6 * t10 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.11653748622129368218e-5 * t3 * t10 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.14852816871341351652e-6 * t3 * t2 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) + (-0.92133165577305122865e-4 * sinP1_2 * sinP2_2 - 0.47861384715483180707e-4 * cosP1_2 * cosP2_2) * t9 * t5;
    bf[0] = t10 * ((-t18 + t20 + t27) * cosP2_1 + (t23 - t25) * sinP2_1) + t2 * ((t19 - t21 + t22) * cosP2_3 + (-t24 + t26) * sinP2_3) + t4 * (t29 * cosP1_3 + t28 * cosP1_5) + t5 * ((0.16751484650419113250e-3 * t17 + 0.10968233997298228912e-5 * t15 - 0.29913365447176987946e-5 * t16) * cosP2_2 + (-0.68551462483113930700e-6 * t12 - 0.57583228485815701796e-5 * t13 + 0.32246607952056793006e-3 * t14) * sinP2_2) + t8 * ((0.10282719372467089605e-5 * t16 - 0.11425243747185655117e-7 * t15) * cosP2_4 + (0.20773170449428463845e-8 * t12 - 0.18695853404485617459e-6 * t13) * sinP2_4) + (0.33921756417098704331e-2 * t4 - 0.15704516859767918671e-4 * t30) * t6 * cosP1_1;
    bf[1] = t31;
    bf[2] = t1;
}

static void idsbf_8_4_6_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[28];
    t2 = LegP2[11];
    t3 = LegP1[33];
    t4 = LegP2[10];
    t5 = LegP1[29];
    t6 = LegP1[31];
    t7 = LegP2[13];
    t8 = LegP2[12];
    t9 = LegP1[32];
    t10 = LegP2[14];
    t11 = LegP1[35];
    t12 = LegP1[34];
    t13 = LegP1[30];
    t14 = t12 * t7;
    t15 = t12 * t2;
    t16 = sinP1_5 * t3;
    t17 = sinP1_7 * t11;
    t18 = sinP1_1 * t5;
    t19 = cosP1_5 * t3;
    t20 = cosP1_1 * t5;
    t11 = cosP1_7 * t11;
    t21 = cosP1_3 * t6;
    t22 = sinP1_3 * t6;
    t23 = t10 * ((0.12693264367134171536e-6 * t21 - 0.10577720305945142946e-7 * t19 - 0.14539557365990051033e-4 * t20) * cosP2_4 + (0.19232218738082078079e-8 * t16 - 0.23078662485698493697e-7 * t22) * sinP2_4) + t2 * (t13 * (-0.38079793101402514481e-5 * sinP1_2 * sinP2_1 - 0.33579453916691308328e-4 * cosP1_2 * cosP2_1) + t9 * (0.45003391847112062717e-6 * cosP1_4 * cosP2_1 - 0.10385398118564322166e-5 * sinP1_4 * sinP2_1)) + t8 * ((-0.76928874952328312354e-8 * t11 + 0.15385774990465662468e-7 * t19 + 0.83083184948514577328e-4 * t20) * cosP2_2 + (0.48080546845205195222e-8 * t17 - 0.96161093690410390422e-8 * t16 + 0.15993513102589056137e-3 * t18) * sinP2_2) + 0.62504710898766753776e-8 * t14 * (cosP1_6 * cosP2_3 - sinP1_6 * sinP2_3) + 0.49042157782109299116e-7 * t15 * (cosP1_6 * cosP2_1 + sinP1_6 * sinP2_1) + t9 * (0.21924729361413569016e-6 * sinP1_4 * sinP2_3 + 0.14424164053561558564e-6 * cosP1_4 * cosP2_3) * t7;
    t24 = 0.78513609776346275529e-3 * t1 * t2;
    t11 = t10 * ((-0.10577720305945142946e-7 * t16 - 0.12693264367134171536e-6 * t22 - 0.14539557365990051033e-4 * t18) * cosP2_4 + (-0.19232218738082078079e-8 * t19 - 0.23078662485698493697e-7 * t21) * sinP2_4) + t2 * (t13 * (-0.38079793101402514481e-5 * sinP1_2 * cosP2_1 + 0.33579453916691308328e-4 * cosP1_2 * sinP2_1) + t9 * (0.45003391847112062717e-6 * cosP1_4 * sinP2_1 + 0.10385398118564322166e-5 * sinP1_4 * cosP2_1)) + t8 * ((-0.83083184948514577328e-4 * t18 - 0.76928874952328312354e-8 * t17 - 0.15385774990465662467e-7 * t16) * cosP2_2 + (-0.48080546845205195222e-8 * t11 - 0.96161093690410390426e-8 * t19 + 0.15993513102589056137e-3 * t20) * sinP2_2) + 0.49042157782109299116e-7 * t15 * (-cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + 0.62504710898766753776e-8 * t14 * (cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t9 * (-0.14424164053561558563e-6 * cosP1_4 * sinP2_3 + 0.21924729361413569017e-6 * sinP1_4 * cosP2_3) * t7;
    t14 = -0.21983810737376957166e-1 * t1 + 0.40156872725115379040e-5 * t9 * cosP1_4;
    t2 = t10 * (t9 * (-0.11539331242849246848e-7 * sinP1_4 * sinP2_4 + 0.63466321835670857676e-7 * cosP1_4 * cosP2_4) + 0.10177690156193035724e-3 * cosP2_4 * t1) + t4 * t14 + t8 * ((0.15385774990465662468e-7 * cosP1_6 * t12 + 0.27694394982838192449e-4 * cosP1_2 * t13) * cosP2_2 + (-0.96161093690410390435e-8 * sinP1_6 * t12 + 0.53311710341963520463e-4 * sinP1_2 * t13) * sinP2_2) - 0.25001884359506701510e-7 * t3 * t7 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) - 0.19616863112843719646e-6 * t3 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.59542949213102113763e-5 * t6 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.20770796237128644334e-4 * t5 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.14539557365990051033e-5 * t6 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.22432459936098935865e-3 * t5 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = t4 * (-0.66928121208525631728e-6 * t19 + 0.31405443910538510236e-2 * t20) + t6 * (t8 * (-0.27694394982838192448e-5 * cosP1_3 * cosP2_2 - 0.53311710341963520460e-5 * sinP1_3 * sinP2_2) + 0.80313745450230758088e-5 * cosP1_3 * t4) + t7 * (t13 * (-0.53657890279248997857e-5 * cosP1_2 * cosP2_3 - 0.19039896550701257305e-5 * sinP1_2 * sinP2_3) + 0.72697786829950255168e-4 * cosP2_3 * t1) + t23 + t24 * cosP2_1;
    bf[1] = t4 * (0.31405443910538510236e-2 * t18 - 0.66928121208525631728e-6 * t16) + t6 * (t8 * (-0.27694394982838192448e-5 * sinP1_3 * cosP2_2 + 0.53311710341963520460e-5 * cosP1_3 * sinP2_2) - 0.80313745450230758088e-5 * sinP1_3 * t4) + t7 * (t13 * (0.19039896550701257305e-5 * cosP2_3 * sinP1_2 - 0.53657890279248997857e-5 * cosP1_2 * sinP2_3) - 0.72697786829950255168e-4 * sinP2_3 * t1) + t11 + t24 * sinP2_1;
    bf[2] = t2;
}

static void idsbf_8_4_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t5, t6, t7, t8, t9;
    t1 = LegP1[28];
    t2 = LegP2[11];
    t3 = LegP1[33];
    t4 = LegP2[10];
    t5 = LegP1[35];
    t6 = LegP1[29];
    t7 = LegP1[31];
    t8 = LegP2[13];
    t9 = LegP2[12];
    t10 = LegP1[34];
    t11 = LegP2[14];
    t12 = LegP1[32];
    t13 = LegP1[30];
    t14 = t5 * t11;
    t15 = sinP1_7 * t5;
    t16 = sinP1_5 * t3;
    t17 = sinP1_3 * t7;
    t18 = sinP1_1 * t6;
    t19 = cosP1_5 * t3;
    t20 = cosP1_3 * t7;
    t21 = cosP1_1 * t6;
    t22 = sinP1_6 * t10;
    t23 = 0.94374365430931120066e-7 * t22;
    t24 = sinP1_2 * t13;
    t25 = -0.60277820501046328305e-4 * t24;
    t26 = sinP1_4 * t12;
    t27 = 0.10959603727462968782e-5 * t26;
    t28 = cosP1_2 * t13;
    t29 = 0.24111128200418531323e-4 * t28;
    t30 = cosP1_4 * t12;
    t31 = 0.32878811182388906345e-6 * t30;
    t10 = cosP1_6 * t10;
    t32 = 0.10350736853715026072e-6 * t10;
    t30 = 0.30443343687397135495e-7 * t30;
    t33 = -0.23194928523731150866e-8 * t10;
    t34 = 0.32617868236496930902e-8 * t22;
    t35 = 0.14612804969950625044e-6;
    t36 = t11 * (0.41142004468968128844e-6 * sinP1_3 * sinP2_4 + 0.53580284889818958492e-6 * cosP1_3 * cosP2_4) - 0.19288902560334825059e-4 * cosP1_3 * t4;
    t37 = cosP2_2 * t9;
    t38 = 0.13020009228226006913e-2 * t1 * t2;
    t39 = (0.11307527655318936045e-6 * t4 - 0.72484151636659846440e-9 * t37) * t5 * cosP1_7;
    t40 = -0.11307527655318936045e-6 * t15 + 0.19288902560334825059e-4 * t17 - 0.26040018456452013825e-2 * t18;
    t37 = t16 * (t35 * t4 - 0.13192115597872092052e-6 * t37);
    t41 = 0.17413592589191161509e-5 * t20 * t9 * sinP2_2;
    t13 = t4 * t40 + t8 * (t13 * (-0.30617305651325119144e-5 * cosP1_2 * sinP2_3 + 0.64104983707461968204e-5 * cosP2_3 * sinP1_2) + 0.12055564100209265661e-3 * sinP2_3 * t1) + t11 * ((-0.40591124916529514009e-8 * t16 - 0.53580284889818958492e-6 * t17 - 0.12055564100209265662e-4 * t18) * cosP2_4 + (0.31168185203763733973e-8 * t19 + 0.41142004468968128844e-6 * t20) * sinP2_4) + t2 * ((t25 + t23 - t27) * cosP2_1 + (-t29 + t31 + t32) * sinP2_1) + t8 * ((0.11655451583174903308e-6 * t26 + t34) * cosP2_3 + (t30 + t33) * sinP2_3) + t9 * ((-0.72484151636659846440e-9 * t15 + 0.18753099711436635473e-5 * t17 + 0.16877789740292971927e-3 * t18) * cosP2_2 + (-0.39576346793616276154e-7 * t19 - 0.15672233330272045359e-3 * t21 - 0.21745245490997953928e-9 * t5 * cosP1_7) * sinP2_2) - 0.72484151636659846446e-10 * t14 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t38 * sinP2_1 + t37 - t41;
    t37 = t11 * (-0.74803644489032961530e-7 * sinP1_4 * sinP2_4 - 0.97418699799670833618e-7 * cosP1_4 * cosP2_4) + 0.35070731927881500104e-5 * cosP1_4 * t4;
    t40 = -0.20832014765161611060e-1 * t4 - 0.96444512801674125292e-4 * t11 * cosP2_4;
    t5 = t1 * t40 + t12 * t37 + t9 * ((-0.20295562458264757004e-7 * t10 + 0.37506199422873270946e-4 * t28) * cosP2_2 + (0.60886687374794271006e-8 * t22 + 0.34827185178382323020e-4 * t24) * sinP2_2) - 0.11872904038084882848e-6 * t3 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.84388948701464859630e-5 * t7 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.30138910250523164154e-4 * t6 * t8 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.94722289358787087349e-6 * t7 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.32550023070565017284e-3 * t6 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.14134409569148670057e-7 * t5 * t2 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) + 0.39866283400162915550e-9 * t5 * t8 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.12249821626595514048e-7 * t3 * t8 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3);
    bf[0] = t4 * (t19 * t35 - 0.26040018456452013825e-2 * t21) + t7 * t36 + t8 * (-0.12055564100209265661e-3 * cosP2_3 * t1 + 0.11655451583174903308e-6 * t26 * sinP2_3) + t11 * (t3 * (-0.31168185203763733973e-8 * sinP1_5 * sinP2_4 - 0.40591124916529514009e-8 * cosP1_5 * cosP2_4) - 0.12055564100209265662e-4 * cosP1_1 * cosP2_4 * t6) + t2 * ((t29 + t31 - t32) * cosP2_1 + (t25 + t23 + t27) * sinP2_1) + t8 * ((-t30 - 0.30617305651325119144e-5 * t28 + t33) * cosP2_3 + (-0.64104983707461968204e-5 * t24 - t34) * sinP2_3) + t9 * ((-0.16877789740292971927e-3 * t21 + 0.13192115597872092052e-6 * t19 + 0.18753099711436635473e-5 * t20) * cosP2_2 + (-0.39576346793616276154e-7 * t16 + 0.17413592589191161509e-5 * t17 + 0.21745245490997953928e-9 * t15 - 0.15672233330272045359e-3 * t18) * sinP2_2) + 0.72484151636659846446e-10 * t14 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t38 * cosP2_1 + t39;
    bf[1] = t13;
    bf[2] = t5;
}

static void idsbf_8_4_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t5, t6, t7, t8, t9;
    t1 = LegP1[45];
    t2 = LegP2[11];
    t3 = LegP1[46];
    t4 = LegP2[10];
    t5 = LegP1[52];
    t6 = LegP1[48];
    t7 = LegP1[54];
    t8 = LegP2[13];
    t9 = LegP1[50];
    t10 = LegP1[47];
    t11 = LegP2[12];
    t12 = LegP2[14];
    t13 = LegP1[53];
    t14 = LegP1[51];
    t15 = LegP1[49];
    t16 = t7 * t12;
    t17 = t13 * t8;
    t18 = t13 * t2;
    t19 = t5 * t12;
    t20 = 0.13777084648544761062e-6;
    t21 = cosP1_5 * t9;
    t22 = cosP1_3 * t6;
    t23 = cosP1_1 * t3;
    t24 = sinP1_3 * t6;
    t25 = sinP1_1 * t3;
    t26 = cosP1_4 * t15;
    t27 = 0.31709163079983973877e-7 * t26;
    t28 = 0.11366094835049427874e-3 * t1;
    t29 = cosP1_2 * t10;
    t30 = sinP1_4 * t15;
    t31 = 0.49477228598940510957e-7 * t30;
    t32 = sinP1_2 * t10;
    t33 = cosP1_6 * t14;
    t34 = 0.69705487805137183932e-8 * t33;
    t35 = 0.12275382421853382104e-2 * t1;
    t36 = -0.32238378077594740880e-4 * t32;
    t37 = sinP1_6 * t14;
    t38 = -0.16401291248267572692e-8 * t37;
    t39 = cosP2_4 * t12;
    t40 = -0.11366094835049427875e-4 * t39;
    t41 = t6 * t12;
    t21 = t11 * ((0.82006456241337863454e-8 * t21 + 0.17680591965632443362e-5 * t22 - 0.99011315007541682824e-4 * t23) * cosP2_2 + (-0.24601936872401359034e-8 * sinP1_5 * t9 - 0.91939078221288705478e-4 * t25 + 0.16417692539515840266e-5 * t24) * sinP2_2) + t2 * ((-t34 + t35 - 0.18599064275535427421e-5 * t29) * cosP2_1 + (t36 + t38) * sinP2_1) + t4 * (t21 * t20 + 0.88840327594782685404e-9 * cosP1_7 * t5 - 0.41331253945634283184e-5 * t22 - 0.44420163797391342708e-9 * cosP1_9 * t7) + t8 * ((t27 - 0.12628994261166030994e-6 * t29 - t28) * cosP2_3 + (-0.32835385079031680528e-5 * t32 + t31) * sinP2_3) + t23 * (-0.24550764843706764205e-2 * t4 + t40) + t41 * (0.11480903873787300884e-6 * cosP1_3 * cosP2_4 + 0.88156940459438203208e-7 * sinP1_3 * sinP2_4);
    t7 = t2 * ((-0.44775525107770473445e-6 * t30 + t36 + t38) * cosP2_1 + (t34 + t35 - 0.27554169297089522119e-6 * t26) * sinP2_1) + t4 * (0.41331253945634283184e-5 * t24 - 0.88840327594782685404e-9 * t5 * sinP1_7 - 0.44420163797391342708e-9 * t7 * sinP1_9 - 0.24550764843706764205e-2 * t25) + t8 * ((0.51937422286180646854e-9 * t37 + t31) * cosP2_3 + (-t27 + 0.36902905308602038554e-9 * t33 + t28) * sinP2_3) + t9 * ((-0.24601936872401359034e-8 * sinP2_2 * t11 + 0.29385646819812734406e-8 * sinP2_4 * t12) * cosP1_5 + (t20 * t4 - 0.38269679579291002946e-8 * t39 - 0.82006456241337863454e-8 * cosP2_2 * t11) * sinP1_5) + t41 * (-0.11480903873787300884e-6 * sinP1_3 * cosP2_4 + 0.88156940459438203208e-7 * cosP1_3 * sinP2_4) + (-0.68338713534448219548e-9 * sinP1_7 * cosP2_2 - 0.20501614060334465860e-9 * cosP1_7 * sinP2_2) * t11 * t5;
    t7 = t10 * (t8 * (-0.12628994261166030994e-6 * cosP1_2 * sinP2_3 + 0.32835385079031680528e-5 * cosP2_3 * sinP1_2) + 0.18599064275535427421e-5 * cosP1_2 * sinP2_1 * t2) + t11 * (t3 * (-0.91939078221288705478e-4 * cosP1_1 * sinP2_2 + 0.99011315007541682824e-4 * cosP2_2 * sinP1_1) + t6 * (-0.16417692539515840266e-5 * cosP1_3 * sinP2_2 + 0.17680591965632443362e-5 * sinP1_3 * cosP2_2)) + 0.44420163797391342704e-9 * t18 * (cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) - 0.28474463972686758144e-12 * t16 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.12528764147982173584e-10 * t17 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - 0.56948927945373516288e-12 * t19 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t7 + t40 * t25;
    t10 = (0.41003228120668931724e-8 * t33 - 0.24752828751885420706e-4 * t29) * cosP2_2 + (-0.12300968436200679516e-8 * t37 - 0.22984769555322176370e-4 * t32) * sinP2_2;
    t20 = t15 * (0.29385646819812734405e-7 * sinP1_4 * sinP2_4 + 0.38269679579291002945e-7 * cosP1_4 * cosP2_4) + 0.10229485351544485088e-3 * cosP2_4 * t1;
    t1 = t11 * t10 + t12 * t20 + t4 * (0.22095688359336087786e-1 * t1 + 0.88840327594782685406e-9 * cosP1_8 * t13 - 0.13777084648544761061e-5 * t26) + 0.17768065518956537082e-8 * t5 * t2 * (-cosP1_7 * cosP2_1 + sinP1_7 * sinP2_1) - 0.35536131037913074164e-8 * t9 * t8 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) - 0.50115056591928694336e-10 * t5 * t8 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.34442711621361902652e-7 * t9 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.43397816642915997339e-5 * t6 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.25257988522332061946e-4 * t3 * t8 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.48711835007354690896e-6 * t6 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.27278627604118626901e-3 * t3 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.56948927945373516288e-12 * t13 * t12 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    bf[0] = -0.28474463972686758144e-12 * t16 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.12528764147982173584e-10 * t17 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.44420163797391342704e-9 * t18 * (cosP1_8 * cosP2_1 - sinP1_8 * sinP2_1) + 0.56948927945373516288e-12 * t19 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t21 + t14 * t8 * (-0.51937422286180646854e-9 * sinP1_6 * sinP2_3 + 0.36902905308602038554e-9 * cosP1_6 * cosP2_3) + (0.44775525107770473445e-6 * sinP1_4 * sinP2_1 - 0.27554169297089522119e-6 * cosP1_4 * cosP2_1) * t15 * t2 + (-0.38269679579291002946e-8 * cosP1_5 * cosP2_4 - 0.29385646819812734406e-8 * sinP1_5 * sinP2_4) * t12 * t9 + (-0.68338713534448219548e-9 * cosP1_7 * cosP2_2 + 0.20501614060334465860e-9 * sinP1_7 * sinP2_2) * t11 * t5;
    bf[1] = t7;
    bf[2] = t1;
}

static void idsbf_8_4_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t5, t6, t7, t8, t9;
    t1 = LegP1[50];
    t2 = LegP2[14];
    t3 = LegP1[52];
    t4 = LegP1[49];
    t5 = LegP2[11];
    t6 = LegP1[47];
    t7 = LegP1[46];
    t8 = LegP2[12];
    t9 = LegP1[54];
    t10 = LegP1[53];
    t11 = LegP2[13];
    t12 = LegP1[48];
    t13 = LegP1[51];
    t14 = LegP1[45];
    t15 = LegP2[10];
    t16 = t3 * t2;
    t17 = t9 * t2;
    t18 = t10 * t11;
    t19 = t9 * t8;
    t20 = 0.31353690697892316138e-10;
    t21 = 0.27811396977588889196e-10;
    t22 = -0.10246304149638011811e-12;
    t23 = 0.61477824897828070864e-12;
    t24 = cosP1_2 * t6;
    t25 = 0.4881437661407385354e-5 * t24;
    t26 = cosP1_4 * t4;
    t27 = -0.99151435995217112706e-7 * t26;
    t28 = cosP1_6 * t13;
    t29 = -0.33549658930338767525e-2 * t14;
    t30 = sinP1_2 * t6;
    t31 = 0.56117942211935828330e-4 * t30;
    t32 = sinP1_4 * t4;
    t33 = 0.42759056772937379840e-6 * t32;
    t34 = cosP2_4 * t2;
    t35 = t5 * ((-0.59124102458882653282e-8 * t28 + t29 + t25 + t27) * cosP2_1 + (t31 - t33) * sinP2_1) + t8 * (t12 * (-0.79911335915192839621e-6 * cosP1_3 * cosP2_2 + 0.17587576146770654511e-6 * sinP1_3 * sinP2_2) + t7 * (-0.23215600513737263958e-4 * sinP1_1 * sinP2_2 + 0.10548296340805454831e-3 * cosP1_1 * cosP2_2)) + t20 * t16 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t22 * t17 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t23 * t18 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t21 * t19 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + (0.23137695814026736227e-2 * t15 - 0.40899967348027058982e-5 * t34) * t7 * cosP1_1 + t6 * t11 * (0.38589384777067088763e-5 * sinP1_2 * sinP2_3 + 0.60154822106026810773e-5 * cosP1_2 * cosP2_3) - 0.11909132937350694870e-8 * t1 * sinP1_5 * t2 * sinP2_4;
    t28 = -0.14087204448016603667e-9 * t28;
    t36 = 0.11860990530927847106e-3 * t14;
    t37 = 0.19356732296401866883e-9 * sinP1_6 * t13;
    t38 = t3 * cosP1_7;
    t39 = cosP1_5 * t1;
    t40 = sinP1_7 * t3;
    t41 = t1 * sinP1_5;
    t42 = -0.26347639241926316082e-10 * t9;
    t43 = 0.80623776080294527214e-8 * t3;
    t16 = t11 * (t4 * (-0.26115780016597364499e-7 * sinP1_4 * cosP2_3 + 0.37181788498206417253e-7 * cosP1_4 * sinP2_3) + t36 * sinP2_3) + t15 * (-0.32224216698445561622e-5 * t12 * sinP1_3 - t43 * sinP1_7 - 0.17705613570574484405e-7 * t41 + 0.23137695814026736227e-2 * t7 * sinP1_1 + t42 * sinP1_9) - t20 * t16 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t21 * t19 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t22 * t17 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t23 * t18 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t5 * (t13 * (0.84207055017196506194e-8 * sinP1_6 * cosP2_1 + 0.59124102458882653282e-8 * cosP1_6 * sinP2_1) + t29 * sinP2_1) + (-0.19307550036483604425e-7 * cosP1_5 * sinP2_2 + 0.66606832003589727048e-8 * cosP2_2 * sinP1_5) * t8 * t1 + (0.21674621945978264664e-6 * cosP1_3 * sinP2_4 - 0.22633676014384382568e-6 * cosP2_4 * sinP1_3) * t12 * t2;
    t17 = t7 * sinP1_1;
    t18 = cosP1_8 * t10;
    t16 = t11 * ((-0.38589384777067088763e-5 * t30 + t37) * cosP2_3 + (t28 + 0.60154822106026810773e-5 * t24) * sinP2_3) + t2 * (t1 * (0.11909132937350694870e-8 * cosP1_5 * sinP2_4 - 0.12436085722189221190e-8 * sinP1_5 * cosP2_4) - 0.40899967348027058982e-5 * t17 * cosP2_4) + t5 * ((t31 + t33 - 0.42419699179501368890e-9 * sinP1_8 * t10) * cosP2_1 + (0.47689227027886632106e-9 * t18 - t25 + t27) * sinP2_1) + t8 * ((-0.79911335915192839621e-6 * t12 * sinP1_3 + 0.27752846668162386273e-10 * t40 - 0.10548296340805454831e-3 * t17) * cosP2_2 + (-0.80448125152015018441e-10 * t38 - 0.23215600513737263958e-4 * t7 * cosP1_1 - 0.17587576146770654511e-6 * cosP1_3 * t12) * sinP2_2) + t16;
    t6 = t13 * (0.25743400048644805898e-8 * sinP1_6 * sinP2_2 + 0.88809109338119636059e-9 * cosP1_6 * cosP2_2) + t6 * (-0.19178720619646281510e-4 * cosP1_2 * cosP2_2 + 0.42210182752249570822e-5 * sinP1_2 * sinP2_2);
    t17 = t2 * (-0.34821040022129819337e-7 * cosP1_4 * cosP2_4 - 0.33345572224581945637e-7 * sinP1_4 * sinP2_4) - 0.49575717997608556337e-6 * cosP1_4 * t15;
    t18 = 0.23137695814026736227e-1 * t14 - 0.94851501270934737894e-9 * t18;
    t14 = -0.40899967348027058982e-4 * t34 * t14;
    t1 = t15 * t18 + t4 * t17 + t8 * t6 - 0.79042917725778948244e-9 * t1 * t11 * (-cosP1_5 * cosP2_3 + sinP1_5 * sinP2_3) - 0.36886694938696842516e-11 * t10 * t2 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.20902460465261544094e-10 * t3 * t11 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.37624428837470779366e-7 * t1 * t5 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.42697087125440369144e-5 * t12 * t5 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.23721981061855694210e-4 * t7 * t11 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.82286839069244916280e-6 * t12 * t11 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.67099317860677535054e-3 * t7 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.50060514559660000554e-10 * t9 * t5 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) + 0.89581973422549474674e-9 * t3 * t5 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) + t14;
    bf[0] = t11 * ((t28 - t36 - 0.37181788498206417253e-7 * t26) * cosP2_3 + (-t37 - 0.26115780016597364499e-7 * t32) * sinP2_3) + t12 * (t2 * (0.22633676014384382568e-6 * cosP1_3 * cosP2_4 + 0.21674621945978264664e-6 * sinP1_3 * sinP2_4) + 0.32224216698445561622e-5 * cosP1_3 * t15) + t15 * (t43 * cosP1_7 + t42 * cosP1_9) + t5 * (t10 * (0.47689227027886632106e-9 * cosP1_8 * cosP2_1 + 0.42419699179501368890e-9 * sinP1_8 * sinP2_1) + 0.84207055017196506194e-8 * sinP1_6 * sinP2_1 * t13) + t8 * ((0.27752846668162386273e-10 * t38 - 0.66606832003589727048e-8 * t39) * cosP2_2 + (-0.19307550036483604425e-7 * t41 + 0.80448125152015018441e-10 * t40) * sinP2_2) + t35 + t39 * (-0.17705613570574484405e-7 * t15 - 0.12436085722189221190e-8 * t34);
    bf[1] = t16;
    bf[2] = t1;
}

static void idsbf_8_4_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t6, t7, t8, t9;
    t1 = LegP1[75];
    t2 = LegP2[12];
    t3 = LegP1[74];
    t4 = LegP2[11];
    t5 = LegP1[72];
    t6 = LegP1[71];
    t7 = LegP1[70];
    t8 = LegP2[13];
    t9 = LegP1[69];
    t10 = LegP2[14];
    t11 = LegP1[76];
    t12 = LegP1[73];
    t13 = LegP1[68];
    t14 = LegP1[67];
    t15 = LegP2[10];
    t16 = LegP1[66];
    t17 = t1 * t2;
    t18 = LegP1[77] * t2;
    t19 = t11 * t4;
    t20 = t12 * t10;
    t21 = t1 * t10;
    t22 = t3 * t8;
    t23 = -0.12560744166057920203e-11;
    t24 = 0.13956382406731022448e-12;
    t25 = -0.69781912033655112234e-13;
    t26 = cosP1_6 * t5;
    t27 = 0.69335307796639719528e-9 * t26;
    t28 = cosP1_8 * t3;
    t29 = 0.32657934831750592528e-10 * t28;
    t30 = -0.31988344672027310347e-2 * t16;
    t31 = sinP1_6 * t5;
    t32 = 0.16982126112510308116e-8 * t31;
    t33 = 0.17585041832481088284e-10 * sinP1_8 * t3;
    t34 = 0.30145785998539008488e-9 * t12;
    t35 = 0.22060927360018834730e-2 * t14;
    t36 = 0.94537184891418330616e-6 * t9;
    t37 = -0.25121488332115840407e-10 * t1;
    t38 = 0.11309010742635917800e-3 * t16;
    t39 = t15 * (t35 * cosP1_1 - 0.16881640159181844753e-7 * t6 * cosP1_5 + t34 * cosP1_7 + t36 * cosP1_3 + t37 * cosP1_9) + t4 * ((t27 + t29 + t30) * cosP2_1 + (t32 - t33) * sinP2_1) + t8 * (t7 * (-0.29120829274588682197e-7 * sinP1_4 * sinP2_3 - 0.31231034294486412793e-7 * cosP1_4 * cosP2_3) - t38 * cosP2_3) + t24 * t17 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t25 * t18 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) + t23 * t19 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) + (0.66401117959448589359e-7 * cosP1_3 * cosP2_4 + 0.63587511266251615235e-7 * sinP1_3 * sinP2_4) * t10 * t9 + (-0.23011283312218109814e-8 * sinP1_5 * sinP2_2 - 0.79383903129486055689e-9 * cosP1_5 * cosP2_2) * t6 * t2;
    t40 = 0.11723361221654058858e-11;
    t41 = -0.97694676847117157148e-13;
    t42 = 0.58616806108270294288e-12;
    t43 = sinP1_1 * t14;
    t44 = t14 * cosP1_1;
    t45 = sinP1_2 * t13;
    t46 = 0.40353872636508281697e-4 * t45;
    t47 = sinP1_4 * t7;
    t48 = 0.20680009194997759824e-6 * t47;
    t49 = cosP1_2 * t13;
    t50 = 0.17806754039905009845e-4 * t49;
    t51 = cosP1_4 * t7;
    t52 = 0.10635433300284562194e-6 * t51;
    t26 = 0.13398127110461781551e-10 * t26;
    t31 = 0.36844849553769899266e-10 * t31;
    t53 = cosP2_4 * t10;
    t27 = t15 * (t35 * sinP1_1 - t36 * sinP1_3 - t34 * sinP1_7 + t37 * sinP1_9) + t6 * ((0.11354912726116359864e-8 * sinP2_4 * t10 - 0.23011283312218109814e-8 * sinP2_2 * t2) * cosP1_5 + (-0.16881640159181844753e-7 * t15 - 0.11857342492758676672e-8 * t53 + 0.79383903129486055689e-9 * cosP2_2 * t2) * sinP1_5) + t8 * ((-0.29120829274588682197e-7 * t47 + t31) * cosP2_3 + (t26 + t38 + 0.31231034294486412793e-7 * t51) * sinP2_3) + (-t27 + t30) * t4 * sinP2_1 + t12 * t2 * (0.26461301043162018562e-10 * sinP1_7 * cosP2_2 - 0.76704277707393699378e-10 * cosP1_7 * sinP2_2) + t9 * (0.63587511266251615235e-7 * cosP1_3 * sinP2_4 - 0.66401117959448589359e-7 * cosP2_4 * sinP1_3) * t10;
    t17 = t2 * (t14 * (-0.15092186302308569211e-4 * cosP1_1 * sinP2_2 - 0.68573222326596653393e-4 * cosP2_2 * sinP1_1) + t9 * (-0.76192469251774059328e-6 * sinP1_3 * cosP2_2 - 0.16769095891453965788e-6 * cosP1_3 * sinP2_2)) + t23 * t19 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) - t24 * t17 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t25 * t18 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) + t4 * ((t32 + t33 + t46 + t48) * cosP2_1 + (t29 - t50 + t52) * sinP2_1) - t40 * t20 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t41 * t21 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t42 * t22 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t27 + t13 * t8 * (-0.11445752027925290742e-5 * sinP1_2 * cosP2_3 + 0.32007589741808777652e-5 * cosP1_2 * sinP2_3) - 0.38996588767710061388e-5 * t53 * t43;
    t5 = t13 * (-0.30184372604617138423e-5 * sinP1_2 * sinP2_2 + 0.13714644465319330678e-4 * cosP1_2 * cosP2_2) + t5 * (-0.26461301043162018560e-9 * cosP1_6 * cosP2_2 - 0.76704277707393699372e-9 * sinP1_6 * sinP2_2);
    t7 = t7 * (0.15896877816562903811e-7 * sinP1_4 * sinP2_4 + 0.16600279489862147343e-7 * cosP1_4 * cosP2_4) + 0.42896247644481067520e-4 * cosP2_4 * t16;
    t13 = -0.24267020096020718200e-1 * t16 + 0.15072892999269504245e-9 * t28 + 0.23634296222854582654e-6 * t51;
    t1 = t10 * t7 + t15 * t13 + t2 * t5 + 0.58616806108270294284e-12 * t3 * t10 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.46893444886616235430e-11 * t12 * t8 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.14349394135304568041e-7 * t6 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.25052353996225857612e-5 * t9 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.20561837713883486910e-4 * t14 * t8 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.48281490855260075994e-6 * t9 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.58160626676413291549e-3 * t14 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t24 * t11 * t2 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) + 0.50242976664231680818e-11 * t1 * t4 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) - 0.20097190665692672326e-9 * t12 * t4 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) + 0.30145785998539008488e-9 * t6 * t8 * (-cosP1_5 * cosP2_3 + sinP1_5 * sinP2_3);
    bf[0] = t10 * (t6 * (-0.11354912726116359864e-8 * sinP1_5 * sinP2_4 - 0.11857342492758676672e-8 * cosP1_5 * cosP2_4) - 0.38996588767710061388e-5 * t44 * cosP2_4) + t2 * ((0.68573222326596653393e-4 * t44 + 0.26461301043162018562e-10 * t12 * cosP1_7 - 0.76192469251774059328e-6 * t9 * cosP1_3) * cosP2_2 + (0.16769095891453965788e-6 * sinP1_3 * t9 - 0.15092186302308569211e-4 * t43 + 0.76704277707393699378e-10 * sinP1_7 * t12) * sinP2_2) + t4 * ((t50 + t52) * cosP2_1 + (t46 - t48) * sinP2_1) + t8 * ((t26 + 0.32007589741808777652e-5 * t49) * cosP2_3 + (0.11445752027925290742e-5 * t45 - t31) * sinP2_3) + t40 * t20 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t41 * t21 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t42 * t22 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t39;
    bf[1] = t17;
    bf[2] = t1;
}

static void idsbf_8_4_11_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t6, t7, t8, t9;
    t1 = LegP1[75];
    t2 = LegP2[10];
    t3 = LegP1[69];
    t4 = LegP1[66];
    t5 = LegP2[13];
    t6 = LegP1[71];
    t7 = LegP2[11];
    t8 = LegP1[73];
    t9 = LegP1[76];
    t10 = LegP2[12];
    t11 = LegP1[74];
    t12 = LegP1[72];
    t13 = LegP1[70];
    t14 = LegP2[14];
    t15 = LegP1[77];
    t16 = LegP1[68];
    t17 = LegP1[67];
    t18 = t9 * t5;
    t19 = t1 * t10;
    t20 = t6 * t10;
    t21 = t15 * t10;
    t22 = t9 * t7;
    t23 = t8 * t10;
    t24 = t8 * t14;
    t25 = t1 * t14;
    t26 = t11 * t5;
    t27 = 0.69957068109739038616e-9;
    t28 = 0.80016254373884521290e-12;
    t29 = 0.29938054357575841298e-13;
    t30 = 0.54206621046266724397e-2;
    t31 = cosP1_6 * t12;
    t32 = 0.89160969159471323726e-10 * t31;
    t33 = cosP1_4 * t13;
    t34 = 0.91256937788327818844e-4 * t4;
    t35 = sinP1_6 * t12;
    t36 = 0.75443896981091120078e-10 * t35;
    t37 = sinP1_4 * t13;
    t31 = 0.53496581495682794246e-9 * t31;
    t38 = cosP1_8 * t11;
    t39 = -0.13717072178380203649e-10 * t38;
    t35 = -0.17695023110110462709e-8 * t35;
    t40 = 0.27434144356760407298e-10 * sinP1_8 * t11;
    t41 = cosP1_5 * t6;
    t42 = cosP1_3 * t3;
    t30 = t2 * (-0.52124874277844773866e-9 * cosP1_7 * t8 - 0.80656384408875597460e-7 * t41 - 0.96787661290650716952e-5 * t42 - 0.68585360891901018250e-11 * cosP1_9 * t1) + t5 * ((t34 + 0.33359919537820655278e-7 * t33 + t32) * cosP2_3 + (0.31823607453842072470e-7 * t37 + t36) * sinP2_3) + t7 * ((t30 * t4 - t31 + t39) * cosP2_1 + (t35 - t40) * sinP2_1) - t29 * t18 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) - t28 * t19 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - t27 * t20 * (cosP1_5 * cosP2_2 - sinP1_5 * sinP2_2) + t3 * (0.80656384408875597462e-7 * cosP1_3 * cosP2_4 + 0.82302433070281221898e-7 * sinP1_3 * sinP2_4) * t14;
    t43 = -0.68585360891901018248e-11;
    t44 = 0.43437395231537311558e-11;
    t45 = -0.34292680445950509120e-12;
    t46 = -0.19051489136639171734e-13;
    t47 = 0.57154467409917515210e-13;
    t48 = 0.91447147855868024328e-12;
    t49 = 0.64525107527100477968e-7 * t33;
    t50 = cosP1_2 * t16;
    t51 = 0.32262553763550238986e-6 * t37;
    t52 = sinP1_2 * t16;
    t53 = 0.22814234447081954712e-5 * t17;
    t54 = (0.34152217626843895838e-5 * sinP1_2 * sinP2_3 + 0.47979026382651141118e-5 * cosP1_2 * cosP2_3) * t16 * t5;
    t55 = sinP1_5 * t6;
    t56 = sinP1_3 * t3;
    t4 = t2 * (0.52124874277844773866e-9 * sinP1_7 * t8 - 0.80656384408875597460e-7 * t55 - 0.68585360891901018250e-11 * sinP1_9 * t1 + 0.96787661290650716952e-5 * t56) + t27 * t20 * (cosP1_5 * sinP2_2 + sinP1_5 * cosP2_2) + t28 * t19 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t29 * t18 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t43 * t23 * (cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - t44 * t24 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t45 * t22 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) + t46 * t21 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) + t47 * t25 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t48 * t26 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - t34 * t5 * sinP2_3 + t7 * (t35 + t40) * cosP2_1 + (t31 + t39 + 0.54206621046266724398e-2 * t4) * t7 * sinP2_1;
    t4 = t10 * (t17 * (0.22828061255837761957e-3 * cosP1_1 * sinP2_2 - 0.12762144481610087393e-3 * cosP2_2 * sinP1_1) + t3 * (0.98170342166231441487e-6 * sinP1_3 * cosP2_2 - 0.17560047119875201505e-5 * cosP1_3 * sinP2_2)) + t14 * ((-0.80656384408875597465e-7 * t56 + 0.67213653674062997888e-9 * t55) * cosP2_4 + (-0.68585360891901018252e-9 * t41 + 0.82302433070281221901e-7 * t42 - t53 * cosP1_1) * sinP2_4) + t5 * ((-t36 + 0.31823607453842072469e-7 * t37 - 0.34152217626843895837e-5 * t52) * cosP2_3 + (-0.33359919537820655277e-7 * t33 + 0.47979026382651141117e-5 * t50 + t32) * sinP2_3) + t7 * ((0.16675131359503537806e-4 * t52 + t51) * cosP2_1 + (-0.65456112649991499154e-4 * t50 + t49) * sinP2_1) + t4;
    t18 = t6 * t7 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t19 = t3 * t7 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t20 = t17 * t5 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t27 = -0.10973657742704162919e-9 * t38 - 0.64525107527100477970e-6 * t33;
    t13 = t13 * (0.54868288713520814597e-8 * sinP1_4 * sinP2_4 + 0.53770922939250398305e-8 * cosP1_4 * cosP2_4) * t14;
    t16 = (0.39268136866492576594e-5 * cosP1_2 * cosP2_2 + 0.70240188479500806022e-5 * sinP1_2 * sinP2_2) * t16 * t10;
    t1 = t2 * t27 + 0.19555058097498818323e-6 * t3 * t5 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.82131244009495036962e-4 * t17 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.29938054357575841300e-13 * t15 * t5 * (cosP1_11 * cosP2_3 + sinP1_11 * sinP2_3) - 0.38102978273278343470e-12 * t9 * t10 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) - 0.61726824802710916422e-11 * t1 * t7 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) + 0.96019505248661425549e-10 * t8 * t7 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) - 0.82302433070281221898e-10 * t12 * t10 * (cosP1_6 * cosP2_2 - sinP1_6 * sinP2_2) + 0.68585360891901018244e-10 * t6 * t5 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) + 0.91447147855868024336e-12 * t11 * t14 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.12802600699821523408e-10 * t8 * t5 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.11522340629839371065e-7 * t18 + 0.11614519354878086036e-5 * t19 + 0.13826808755807245279e-5 * t20 + t13 + t16;
    bf[0] = t10 * (t17 * (0.22828061255837761957e-3 * sinP1_1 * sinP2_2 + 0.12762144481610087393e-3 * cosP1_1 * cosP2_2) + t3 * (0.98170342166231441487e-6 * cosP1_3 * cosP2_2 + 0.17560047119875201505e-5 * sinP1_3 * sinP2_2)) + t14 * (t6 * (0.68585360891901018253e-9 * sinP1_5 * sinP2_4 + 0.67213653674062997889e-9 * cosP1_5 * cosP2_4) + t53 * sinP1_1 * sinP2_4) + t7 * ((0.65456112649991499155e-4 * t50 + t49) * cosP2_1 + (-t51 + 0.16675131359503537807e-4 * t52) * sinP2_1) + t46 * t21 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) + t45 * t22 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) + t43 * t23 * (cosP1_7 * cosP2_2 - sinP1_7 * sinP2_2) + t44 * t24 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t47 * t25 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t48 * t26 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t30 + t54;
    bf[1] = t4;
    bf[2] = t1;
}

static void idsbf_8_4_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t7, t8, t9;
    t1 = LegP1[67];
    t2 = LegP2[10];
    t3 = LegP1[75];
    t4 = LegP1[69];
    t5 = LegP1[66];
    t6 = LegP2[13];
    t7 = LegP1[71];
    t8 = LegP2[11];
    t9 = LegP1[73];
    t10 = LegP1[77];
    t11 = LegP2[14];
    t12 = LegP2[12];
    t13 = LegP1[74];
    t14 = LegP1[72];
    t15 = LegP1[70];
    t16 = LegP1[76];
    t17 = LegP1[68];
    t18 = t10 * t11;
    t19 = t3 * t12;
    t20 = t10 * t12;
    t21 = t16 * t8;
    t22 = t9 * t11;
    t23 = t3 * t11;
    t24 = t13 * t6;
    t25 = t16 * t6;
    t26 = 0.68919657608516260653e-2 * t5;
    t27 = cosP1_6 * t14;
    t28 = 0.10182410985335870374e-8 * t27;
    t29 = cosP1_8 * t13;
    t30 = 0.14757117370051986048e-10 * t29;
    t14 = sinP1_6 * t14;
    t31 = -0.55942890393742528936e-9 * t14;
    t32 = 0.13415561245501805498e-10 * sinP1_8 * t13;
    t33 = sinP1_5 * t7;
    t34 = t7 * cosP1_5;
    t35 = cosP1_4 * t15;
    t36 = 0.97450636887325115148e-8 * t35;
    t37 = 0.15360817626099567298e-9 * t27;
    t38 = 0.23205271922059347024e-4 * t5;
    t39 = 0.25489566366453430448e-9 * t9;
    t40 = -0.31553400049420246534e-7 * t7;
    t41 = 0.75728160118608591685e-5 * t4;
    t42 = -0.67077806227509027486e-12 * t3;
    t43 = cosP2_4 * t11;
    t44 = -0.44625522927037205814e-6 * t43;
    t45 = t12 * ((-0.19452563805977617972e-10 * t9 * cosP1_7 + 0.59524845246291510997e-8 * t34) * cosP2_2 + (-0.18111007681427437423e-10 * sinP1_7 * t9 + 0.55419683505167958515e-8 * t33) * sinP2_2) + t2 * (t41 * cosP1_3 + t40 * cosP1_5 + t39 * cosP1_7 + t42 * cosP1_9) + t6 * ((-t36 + t37 - t38) * cosP2_3 - 0.93801604228548624052e-8 * sinP1_4 * sinP2_3 * t15) + t8 * ((-t28 + t30 + t26) * cosP2_1 + (t31 + t32) * sinP2_1) + (-0.26507560618660100250e-2 * t2 + t44) * t1 * cosP1_1 + t4 * t11 * (0.32036360254258311532e-7 * cosP1_3 * cosP2_4 + 0.31714386784366268200e-7 * sinP1_3 * sinP2_4);
    t46 = 0.42482610610755717414e-11;
    t47 = 0.86083184658636585282e-12;
    t48 = -0.44718537485006018330e-12;
    t49 = 0.67343987998253110934e-13;
    t50 = -0.33538903113754513744e-13;
    t51 = -0.11179634371251504582e-13;
    t52 = 0.91832710906708787638e-14;
    t53 = -0.18632723952085840969e-14;
    t54 = cosP1_2 * t17;
    t55 = 0.56106452916447686942e-4 * t54;
    t35 = 0.27135924042501412020e-6 * t35;
    t56 = sinP1_2 * t17;
    t57 = -0.32252082479085980562e-4 * t56;
    t58 = sinP1_4 * t15;
    t59 = 0.15776700024710123268e-6 * t58;
    t60 = sinP1_3 * t4;
    t61 = sinP1_1 * t1;
    t62 = t4 * cosP1_3;
    t63 = t1 * cosP1_1;
    t64 = 0.15226662013644549243e-9 * t14;
    t65 = (-0.13348483439274296471e-9 * cosP1_5 * cosP2_4 - 0.13214327826819278415e-9 * sinP1_5 * sinP2_4) * t11 * t7;
    t45 = t12 * ((0.13905583401779502646e-3 * t63 - 0.76404304405381882675e-6 * t62) * cosP2_2 + (0.10459952116382811726e-3 * t61 - 0.57472264375729734755e-6 * t60) * sinP2_2) + t6 * (t17 * (0.21569002748067982808e-5 * cosP1_2 * cosP2_3 + 0.18593967886265502420e-5 * sinP1_2 * sinP2_3) + t64 * sinP2_3) + t8 * ((-t55 + t35) * cosP2_1 + (t57 + t59) * sinP2_1) + t52 * t18 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) + t47 * t19 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t53 * t20 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) + t50 * t21 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) + t46 * t22 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t51 * t23 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t48 * t24 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t49 * t25 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t45 + t65;
    t26 = t11 * (t4 * (-0.32036360254258311532e-7 * cosP2_4 * sinP1_3 + 0.31714386784366268200e-7 * cosP1_3 * sinP2_4) + t7 * (-0.13348483439274296471e-9 * sinP1_5 * cosP2_4 + 0.13214327826819278415e-9 * cosP1_5 * sinP2_4)) + t12 * (t9 * (-0.19452563805977617972e-10 * sinP1_7 * cosP2_2 + 0.18111007681427437423e-10 * cosP1_7 * sinP2_2) + 0.55419683505167958515e-8 * t34 * sinP2_2) + t2 * (-t41 * sinP1_3 - t39 * sinP1_7 - 0.26507560618660100250e-2 * t61 + t40 * sinP1_5 + t42 * sinP1_9) + t6 * ((-0.93801604228548624052e-8 * t58 - t64) * cosP2_3 + (t36 + t37 + t38) * sinP2_3) + t8 * ((t57 - t59) * cosP2_1 + (t35 + t26) * sinP2_1);
    t17 = t17 * t6 * (-0.18593967886265502420e-5 * sinP1_2 * cosP2_3 + 0.21569002748067982808e-5 * cosP1_2 * sinP2_3);
    t13 = t13 * t11 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4);
    t34 = t9 * t6 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t14 = (-0.70029229701519424700e-9 * t27 - 0.21393205233506927148e-4 * t54) * cosP2_2 + (-0.65199627653138774720e-9 * t14 - 0.16092234025204325732e-4 * t56) * sinP2_2;
    t11 = t11 * (-0.42285849045821690932e-8 * sinP1_4 * sinP2_4 - 0.42715147005677748708e-8 * cosP1_4 * cosP2_4) - 0.10097088015814478891e-5 * cosP1_4 * t2;
    t27 = -0.31809072742392120301e-1 * t2 - 0.53550627512444646976e-5 * t43;
    t2 = -0.26831122491003610998e-10 * t29 * t2;
    t1 = t12 * t14 + t15 * t11 + t48 * t13 + t5 * t27 - 0.26820390042007209556e-7 * t7 * t8 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.17038836026686933128e-5 * t4 * t8 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.38675453203432245040e-5 * t1 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.28687836167381060877e-6 * t4 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.11486609601419376776e-2 * t1 * t8 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.61221807271139191762e-14 * t10 * t6 * (cosP1_11 * cosP2_3 + sinP1_11 * sinP2_3) - 0.81983985389177700270e-13 * t16 * t12 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) - 0.14086339307776895772e-11 * t3 * t8 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) + 0.25489566366453430448e-10 * t9 * t8 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) + 0.22806454117353069346e-10 * t7 * t6 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) - 0.16993044244302286966e-10 * t34 + t2;
    bf[0] = t45;
    bf[1] = t12 * ((-0.76404304405381882675e-6 * t60 - 0.13905583401779502646e-3 * t61 - 0.59524845246291510997e-8 * t33) * cosP2_2 + (0.57472264375729734755e-6 * t62 + 0.10459952116382811726e-3 * t63) * sinP2_2) - t46 * t22 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t47 * t19 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t48 * t24 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - t49 * t25 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t50 * t21 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) + t51 * t23 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) - t52 * t18 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) + t53 * t20 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) + t8 * ((t31 - t32) * cosP2_1 + (t55 + t28 + t30) * sinP2_1) + t26 + t17 + t61 * t44;
    bf[2] = t1;
}

static void idsbf_8_4_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t6, t7, t8, t9;
    t1 = LegP1[95];
    t2 = LegP2[11];
    t3 = LegP1[93];
    t4 = LegP1[92];
    t5 = LegP2[12];
    t6 = LegP2[14];
    t7 = LegP1[100];
    t8 = LegP1[99];
    t9 = LegP2[13];
    t10 = LegP1[94];
    t11 = LegP1[102];
    t12 = LegP1[101];
    t13 = LegP1[97];
    t14 = LegP1[96];
    t15 = LegP1[103];
    t16 = LegP1[98];
    t17 = LegP2[10];
    t18 = LegP1[91];
    t19 = t16 * t6;
    t20 = t7 * t6;
    t21 = t8 * t9;
    t22 = t11 * t6;
    t23 = t12 * t9;
    t24 = t7 * t5;
    t25 = LegP1[104] * t6;
    t26 = t15 * t9;
    t27 = t11 * t5;
    t28 = t12 * t2;
    t29 = sinP1_7 * t16;
    t30 = sinP1_5 * t14;
    t31 = sinP1_3 * t10;
    t32 = sinP1_1 * t4;
    t33 = cosP1_7 * t16;
    t34 = cosP1_5 * t14;
    t35 = cosP1_3 * t10;
    t36 = cosP1_1 * t4;
    t37 = 0.48448541620494918745e-4 * cosP1_2 * t3;
    t38 = cosP1_4 * t1;
    t39 = 0.10913589423763939863e-6 * t38;
    t40 = 0.78495558851476750008e-9 * cosP1_6 * t13;
    t41 = cosP1_8 * t8;
    t42 = 0.12889254327007676518e-11 * t41;
    t43 = -0.36443593254354584897e-4 * sinP1_2 * t3;
    t44 = -0.73082072034133525872e-9 * sinP1_6 * t13;
    t45 = 0.28284271247461900976e-31 * sinP1_8 * t8;
    t46 = t2 * ((-t37 + t39 - t40 + t42) * cosP2_1 + (t43 + t44 - t45) * sinP2_1) + t5 * ((-0.73406881243174119315e-6 * t35 - 0.18689418774161130953e-10 * t33 + 0.10466074513530233334e-8 * t34 + 0.96897083240989837491e-4 * t36) * cosP2_2 + (0.72887186508709169793e-4 * t32 - 0.55217565536900886211e-6 * t31 - 0.17400493341460363301e-10 * t29 + 0.97442762712178034488e-9 * t30) * sinP2_2) + t6 * (t14 * (-0.12695915512102561372e-9 * sinP1_5 * sinP2_4 - 0.12824808055372638136e-9 * cosP1_5 * cosP2_4) - 0.42874815593358335174e-6 * t36 * cosP2_4) + t9 * (t13 * (0.18689418774161130954e-10 * cosP1_6 * cosP2_3 + 0.17400493341460363302e-10 * sinP1_6 * sinP2_3) + t3 * (0.86770460129415678324e-6 * sinP1_2 * sinP2_3 + 0.11535367052498790177e-5 * cosP1_2 * cosP2_3));
    t47 = -0.42964181090025588398e-12;
    t48 = 0.32223135817519191298e-12;
    t49 = -0.32223135817519191292e-13;
    t50 = 0.21482090545012794198e-13;
    t51 = -0.17901742120843995167e-14;
    t52 = 0.76721751946474264998e-15;
    t53 = -0.12786958657745710833e-15;
    t54 = 0.31967396644364277082e-16;
    t55 = -0.15983698322182138540e-16;
    t56 = t1 * (-0.91410591687138441872e-8 * sinP1_4 * sinP2_3 - 0.92338617998682994580e-8 * cosP1_4 * cosP2_3) - 0.22294904108546334292e-4 * t18 * cosP2_3;
    t57 = t10 * t6 * (0.11542327249835374322e-7 * cosP1_3 * cosP2_4 + 0.11426323960892305234e-7 * sinP1_3 * sinP2_4);
    t58 = 0.66215865202382612838e-2 * t18 * t2 * cosP2_1;
    t37 = t2 * ((t43 + t44 + t45) * cosP2_1 + (t37 + t39 + t40 + t42) * sinP2_1) + t47 * t21 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t5 * ((-0.10466074513530233334e-8 * t30 - 0.96897083240989837491e-4 * t32 - 0.18689418774161130953e-10 * t29) * cosP2_2 + (0.17400493341460363301e-10 * t33 + 0.97442762712178034488e-9 * t34) * sinP2_2) + t6 * (t10 * (-0.11542327249835374322e-7 * cosP2_4 * sinP1_3 + 0.11426323960892305234e-7 * cosP1_3 * sinP2_4) + t14 * (0.12695915512102561372e-9 * cosP1_5 * sinP2_4 - 0.12824808055372638136e-9 * sinP1_5 * cosP2_4)) + t9 * (t1 * (-0.91410591687138441872e-8 * sinP1_4 * cosP2_3 + 0.92338617998682994580e-8 * cosP1_4 * sinP2_3) + t13 * (-0.17400493341460363302e-10 * sinP1_6 * cosP2_3 + 0.18689418774161130954e-10 * cosP1_6 * sinP2_3)) - 0.10741045272506397099e-13 * t20 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t39 = 0.66215865202382612838e-2 * sinP2_1 * t2 + 0.22294904108546334292e-4 * sinP2_3 * t9;
    t40 = t9 * (-0.86770460129415678324e-6 * cosP2_3 * sinP1_2 + 0.11535367052498790177e-5 * cosP1_2 * sinP2_3) * t3;
    t42 = -0.42874815593358335174e-6 * t32 * t6 * cosP2_4;
    t29 = t17 * (-0.64446271635038382600e-12 * t7 * sinP1_9 - 0.19333881490511514780e-10 * t29 - 0.25467640462454851089e-2 * t32 - 0.30315526177122055174e-7 * t30 - 0.27283973559409849656e-5 * t31) + t18 * t39 - t48 * t19 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t49 * t28 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) + t5 * (t10 * (-0.73406881243174119315e-6 * sinP1_3 * cosP2_2 + 0.55217565536900886211e-6 * cosP1_3 * sinP2_2) + 0.72887186508709169793e-4 * t36 * sinP2_2) - t50 * t24 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t51 * t27 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) - t52 * t23 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t53 * t26 * (sinP1_12 * cosP2_3 - cosP1_12 * sinP2_3) - t54 * t22 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) + t55 * t25 * (sinP1_13 * cosP2_4 - cosP1_13 * sinP2_4) + t37 + t40 + t42;
    t30 = t4 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t15 = t15 * t6 * (cosP1_12 * cosP2_4 + sinP1_12 * sinP2_4);
    t11 = t11 * t9 * (cosP1_11 * cosP2_3 + sinP1_11 * sinP2_3);
    t3 = t13 * (0.26165186283825583334e-9 * cosP1_6 * cosP2_2 + 0.24360690678044508622e-9 * sinP1_6 * sinP2_2) + t3 * (0.12147864418118194965e-4 * sinP1_2 * sinP2_2 + 0.16149513873498306249e-4 * cosP1_2 * cosP2_2);
    t1 = t1 * (0.22852647921784610469e-8 * sinP1_4 * sinP2_4 + 0.23084654499670748645e-8 * cosP1_4 * cosP2_4) + 0.55737260271365835726e-5 * cosP2_4 * t18;
    t13 = 0.33107932601191306419e-1 * t18 + 0.64446271635038382596e-11 * t41 + 0.54567947118819699313e-6 * t38;
    t1 = 0.18374920968582143646e-6 * t10 * t9 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + t3 * t5 + t1 * t6 + t13 * t17 + 0.31967396644364277080e-16 * t15 + 0.51147834630982843334e-15 * t11 - 0.10913589423763939862e-5 * t10 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.10741045272506397099e-12 * t8 * t6 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.25778508654015353037e-12 * t7 * t2 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) + 0.12126210470848822070e-7 * t14 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.34299852474686668140e-5 * t4 * t9 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.10187056184981940437e-2 * t30 + 0.51557017308030706082e-11 * t16 * t9 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.10741045272506397099e-13 * t12 * t5 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) - 0.10311403461606141215e-10 * t14 * t9 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) - 0.77335525962046059116e-11 * t16 * t2 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1);
    bf[0] = t17 * (0.19333881490511514780e-10 * t33 - 0.30315526177122055174e-7 * t34 - 0.64446271635038382600e-12 * cosP1_9 * t7 + 0.27283973559409849656e-5 * t35 - 0.25467640462454851089e-2 * t36) + t9 * t56 + t48 * t19 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.10741045272506397099e-13 * t20 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t47 * t21 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t54 * t22 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) + t52 * t23 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t50 * t24 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t55 * t25 * (cosP1_13 * cosP2_4 + sinP1_13 * sinP2_4) + t53 * t26 * (cosP1_12 * cosP2_3 + sinP1_12 * sinP2_3) + t51 * t27 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) + t49 * t28 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) + t46 + t57 + t58;
    bf[1] = t29;
    bf[2] = t1;
}

static void idsbf_8_6_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t6, t7, t8, t9;
    t1 = LegP1[51];
    t2 = LegP2[24];
    t3 = LegP1[50];
    t4 = LegP2[25];
    t5 = LegP1[49];
    t6 = LegP2[26];
    t7 = LegP1[48];
    t8 = LegP2[27];
    t9 = LegP1[54];
    t10 = LegP1[53];
    t11 = LegP1[52];
    t12 = LegP2[22];
    t13 = LegP1[47];
    t14 = LegP1[46];
    t15 = LegP2[23];
    t16 = LegP2[21];
    t17 = LegP1[45];
    t18 = t9 * t8;
    t19 = t10 * t6;
    t20 = t11 * t4;
    t21 = t9 * t4;
    t22 = t10 * t2;
    t23 = t3 * t8;
    t24 = t9 * t15;
    t25 = t1 * t6;
    t26 = t11 * t8;
    t27 = 0.40987307627690345849e-10;
    t28 = 0.85217718720871341968e-11;
    t29 = -0.13662435875896781951e-11;
    t30 = 0.70382245421286452484e-12;
    t31 = -0.51751651045063567997e-12;
    t32 = 0.19665627397124155837e-12;
    t33 = -0.17078044844870977438e-12;
    t34 = 0.54626742769789321776e-14;
    t35 = -0.23000733797806030222e-14;
    t36 = cosP1_5 * t3;
    t37 = cosP1_3 * t7;
    t38 = cosP1_1 * t14;
    t39 = cosP2_3 * t2;
    t40 = cosP2_1 * t12;
    t41 = cosP1_4 * t5;
    t42 = (0.17673727049060077133e-5 * t17 + 0.32458635535463869848e-9 * t41) * t6 * cosP2_5;
    t43 = t3 * (0.16063712484387731507e-9 * sinP1_5 * sinP2_4 + 0.85286720922264760069e-10 * cosP1_5 * cosP2_4) * t4;
    t42 = t16 * (-0.37675201960806277502e-10 * cosP1_9 * t9 - 0.14051343323302309258e-4 * t37 + 0.77205183095067633266e-7 * t36 - 0.22905150255581859965e-2 * t38 + 0.11528611800006720916e-7 * cosP1_7 * t11) + t17 * (-0.21346189812501132120e-4 * t39 + 0.21814428814839866633e-2 * t40) + t34 * t18 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - t32 * t19 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t30 * t20 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t35 * t21 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t31 * t22 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t27 * t23 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t28 * t24 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t29 * t25 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t33 * t26 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t42 + t43 + 0.10308928888176662745e-9 * t1 * sinP1_6 * t2 * sinP2_3;
    t43 = 0.10621922873697207204e-7 * t1 * sinP1_6;
    t44 = 0.26910858543433055354e-9 * sinP1_8 * t10;
    t45 = sinP1_4 * t5;
    t46 = cosP1_6 * t1;
    t47 = 0.98733869929814077564e-8 * t46;
    t48 = cosP1_8 * t10;
    t49 = 0.34445898935594310854e-9 * t48;
    t41 = -0.19196964445260060166e-6 * t41;
    t50 = sinP1_5 * t3;
    t51 = sinP1_3 * t7;
    t52 = sinP1_1 * t14;
    t46 = 0.16519127013584290905e-7 * t45 * sinP2_3 + 0.17843969280337918245e-9 * t46 * cosP2_3;
    t53 = (-0.21944356095940394863e-7 * cosP1_2 * cosP2_5 - 0.10189693084168836283e-7 * sinP1_2 * sinP2_5) * t13 * t6;
    t54 = (-0.15522183207852186334e-7 * cosP1_3 * cosP2_4 - 0.29235956721585671346e-7 * sinP1_3 * sinP2_4) * t7 * t4;
    t55 = (0.32899145589159450939e-7 * sinP1_1 * sinP2_6 + 0.42845398906812308199e-7 * cosP1_1 * cosP2_6) * t14 * t8;
    t56 = t11 * t15 * (-0.53614710482685856448e-10 * cosP1_7 * cosP2_2 + 0.21735693438926698560e-10 * sinP1_7 * sinP2_2);
    t57 = (0.21814428814839866633e-2 * t17 + t47 + t49) * t12 * sinP2_1;
    t18 = t16 * (-0.37675201960806277502e-10 * sinP1_9 * t9 + 0.14051343323302309258e-4 * t51 - 0.22905150255581859965e-2 * t52 - 0.11528611800006720916e-7 * sinP1_7 * t11 + 0.77205183095067633266e-7 * t50) + t17 * (0.21346189812501132120e-4 * t2 * sinP2_3 + 0.17673727049060077133e-5 * sinP2_5 * t6) - t27 * t23 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - t28 * t24 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t29 * t25 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - t30 * t20 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t31 * t22 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t32 * t19 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + t33 * t26 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - t34 * t18 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t35 * t21 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t40 * (t43 - t44) + t57;
    t19 = t3 * (0.85286720922264760069e-10 * sinP1_5 * cosP2_4 - 0.16063712484387731507e-9 * cosP1_5 * sinP2_4) + t7 * (-0.29235956721585671346e-7 * cosP1_3 * sinP2_4 + 0.15522183207852186334e-7 * cosP2_4 * sinP1_3);
    t18 = t15 * (t11 * (-0.53614710482685856448e-10 * sinP1_7 * cosP2_2 - 0.21735693438926698560e-10 * cosP1_7 * sinP2_2) + t3 * (-0.52165664253424076539e-8 * cosP1_5 * sinP2_2 - 0.12867530515844605546e-7 * sinP1_5 * cosP2_2)) + t4 * t19 + t5 * ((-0.6955421900456543538e-9 * t2 * sinP2_3 + 0.32458635535463869848e-9 * sinP2_5 * t6) * cosP1_4 + (-0.24923595143302614348e-9 * t6 * cosP2_5 + 0.16519127013584290905e-7 * t39 - 0.34777109502282717657e-7 * t40) * sinP1_4) + t8 * (t14 * (-0.42845398906812308199e-7 * cosP2_6 * sinP1_1 + 0.32899145589159450939e-7 * cosP1_1 * sinP2_6) + t7 * (0.24923595143302614344e-9 * cosP1_3 * sinP2_6 - 0.32458635535463869844e-9 * sinP1_3 * cosP2_6)) + t18 + (-0.10189693084168836283e-7 * cosP2_5 * sinP1_2 + 0.21944356095940394863e-7 * cosP1_2 * sinP2_5) * t13 * t6 + (0.17843969280337918245e-9 * cosP1_6 * sinP2_3 - 0.10308928888176662745e-9 * sinP1_6 * cosP2_3) * t2 * t1;
    t18 = t13 * (t12 * (-0.37517545731062595845e-4 * cosP2_1 * sinP1_2 + 0.21450521141007980288e-5 * cosP1_2 * sinP2_1) + t2 * (0.15368004689058732950e-5 * cosP2_3 * sinP1_2 - 0.11486879268603981654e-5 * cosP1_2 * sinP2_3)) + t15 * (t14 * (-0.15516155175538457332e-4 * cosP1_1 * sinP2_2 + 0.29930571522044598156e-4 * cosP2_2 * sinP1_1) + t7 * (0.22674675395488331936e-6 * sinP1_3 * cosP2_2 - 0.11754663011771558584e-6 * cosP1_3 * sinP2_2)) + t18 + t41 * t12 * sinP2_1 - 0.15057097330108325453e-5 * t52 * t4 * cosP2_4;
    t19 = t1 * t8 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t20 = t7 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t21 = t14 * t12 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t22 = t9 * t12 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1);
    t23 = t11 * t12 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1);
    t1 = t1 * t15 * (0.69554219004565435390e-9 * sinP1_6 * sinP2_2 - 0.17156707354459474062e-8 * cosP1_6 * cosP2_2);
    t24 = -0.22905150255581859967e-1 * t17 * t16;
    t1 = -0.17595561355321613119e-10 * t11 * t2 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.54649743503587127805e-11 * t19 + t1 + 0.11228038210736991714e-7 * t3 * t12 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.21850697107915728708e-13 * t9 * t6 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + 0.22379069964718928838e-6 * t20 - 0.82802641672101708798e-13 * t10 * t4 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.35347454098120154264e-6 * t14 * t6 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.11302560588241883251e-8 * t3 * t2 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) + 0.12809568666674134350e-8 * t23 - 0.34087087488348536788e-10 * t22 + t24 - 0.43628857629679733264e-3 * t21 - 0.40987307627690345857e-10 * t3 * t6 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.29477078014134831512e-5 * t7 * t12 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.97955525098096321502e-9 * t7 * t6 * (cosP1_3 * cosP2_5 - sinP1_3 * sinP2_5) + 0.42692379625002264238e-5 * t14 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t1 = t13 * (t15 * (0.28211191228251740601e-5 * sinP1_2 * sinP2_2 + 0.54419220949171996645e-5 * cosP1_2 * cosP2_2) + t8 * (-0.59816628343926274435e-8 * sinP1_2 * sinP2_6 - 0.77900725285113287635e-8 * cosP1_2 * cosP2_6)) + t5 * (t4 * (0.23880281858234132822e-8 * cosP1_4 * cosP2_4 + 0.44978394956285648224e-8 * sinP1_4 * sinP2_4) + 0.21617451266618937317e-5 * cosP1_4 * t16) + t1 - 0.13563072705890259900e-8 * t48 * t16 - 0.15057097330108325453e-4 * t17 * t4 * cosP2_4;
    bf[0] = t2 * t46 + t12 * ((t41 - t47 + t49 - 0.21450521141007980288e-5 * cosP1_2 * t13) * cosP2_1 + (0.34777109502282717657e-7 * t45 - 0.37517545731062595845e-4 * sinP1_2 * t13 + t43 + t44) * sinP2_1) + t15 * ((0.12867530515844605546e-7 * t36 + 0.22674675395488331936e-6 * t37 - 0.29930571522044598156e-4 * t38) * cosP2_2 + (-0.15516155175538457332e-4 * t52 - 0.52165664253424076539e-8 * t50 + 0.11754663011771558584e-6 * t51) * sinP2_2) + t5 * (0.6955421900456543538e-9 * t39 * cosP1_4 + 0.24923595143302614348e-9 * sinP1_4 * sinP2_5 * t6) + t42 + t2 * (-0.15368004689058732950e-5 * sinP1_2 * sinP2_3 - 0.11486879268603981654e-5 * cosP1_2 * cosP2_3) * t13 + (-0.32458635535463869844e-9 * cosP1_3 * cosP2_6 - 0.24923595143302614344e-9 * sinP1_3 * sinP2_6) * t8 * t7 - 0.15057097330108325453e-5 * t38 * t4 * cosP2_4 + t53 + t54 + t55 + t56;
    bf[1] = t18;
    bf[2] = t1;
}

static void idsbf_8_6_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t7, t8, t9;
    t1 = LegP1[75];
    t2 = LegP2[25];
    t3 = LegP1[74];
    t4 = LegP2[24];
    t5 = LegP1[69];
    t6 = LegP2[23];
    t7 = LegP1[68];
    t8 = LegP1[71];
    t9 = LegP2[27];
    t10 = LegP1[72];
    t11 = LegP2[26];
    t12 = LegP1[73];
    t13 = LegP2[22];
    t14 = LegP1[70];
    t15 = LegP1[67];
    t16 = LegP1[77];
    t17 = LegP1[76];
    t18 = LegP2[21];
    t19 = LegP1[66];
    t20 = t1 * t2;
    t21 = t3 * t4;
    t22 = t8 * t9;
    t23 = t10 * t11;
    t24 = t12 * t9;
    t25 = t16 * t6;
    t26 = t17 * t13;
    t27 = t1 * t9;
    t28 = t3 * t11;
    t29 = t12 * t2;
    t16 = t16 * t9;
    t30 = t17 * t11;
    t31 = t1 * t6;
    t32 = 0.48849830571129066290e-11;
    t33 = -0.13026621485634417677e-11;
    t34 = -0.49343263203160673024e-12;
    t35 = -0.16283276857043022095e-12;
    t36 = cosP2_4 * t2;
    t37 = sinP2_4 * t2;
    t38 = t10 * (-0.36158743275276141180e-9 * cosP1_6 * cosP2_1 + 0.10752883917232773865e-8 * sinP1_6 * sinP2_1) - 0.30790196238772259963e-10 * sinP1_8 * sinP2_1 * t3;
    t39 = t6 * (0.15335886203542337174e-8 * cosP1_5 * cosP2_2 - 0.62172511635982448006e-9 * sinP1_5 * sinP2_2) + 0.73612253777003218436e-7 * cosP1_5 * t18;
    t40 = (0.97154911516495238755e-8 * sinP1_4 * sinP2_3 + 0.66980519202498423987e-8 * cosP1_4 * cosP2_3) * t14 * t4;
    t38 = t13 * t38 + t5 * ((-0.45537910744932921921e-8 * t36 + 0.21619454712885629918e-6 * cosP2_2 * t6) * cosP1_3 + (0.11207631430913102630e-6 * sinP2_2 * t6 - 0.85770433830262008275e-8 * t37) * sinP1_3) + t7 * (t11 * (-0.17905683351162945024e-7 * cosP1_2 * cosP2_5 - 0.12732930383049205352e-7 * sinP1_2 * sinP2_5) + t4 * (-0.40586215595969342064e-6 * cosP1_2 * cosP2_3 - 0.77591294521706095116e-6 * sinP1_2 * sinP2_3)) + t8 * t39 - 0.21930339201404743565e-14 * t20 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t34 * t21 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t32 * t22 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t33 * t23 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t35 * t24 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + (0.27853285212920136707e-7 * cosP1_1 * cosP2_6 + 0.21387344002777962115e-7 * sinP1_1 * sinP2_6) * t15 * t9 + t40;
    t39 = -0.85528322885478499900e-12;
    t40 = 0.26316407041685692280e-13;
    t41 = -0.21382080721369624972e-13;
    t42 = 0.32895508802107115346e-14;
    t43 = 0.27412924001755929458e-16;
    t44 = -0.13706462000877964727e-16;
    t45 = sinP1_7 * t12;
    t46 = sinP1_1 * t15;
    t47 = cosP1_7 * t12;
    t48 = t15 * cosP1_1;
    t49 = t8 * (0.81317697758808789134e-10 * cosP1_5 * cosP2_4 + 0.15316148898261072905e-9 * sinP1_5 * sinP2_4) - 0.14356379006887979036e-5 * t15 * cosP1_1 * cosP2_4;
    t50 = (-0.23763715558642180128e-9 * sinP1_3 * sinP2_6 - 0.30948094681022374120e-9 * cosP1_3 * cosP2_6) * t9 * t5;
    t51 = (0.45790548252533104564e-10 * cosP1_6 * cosP2_3 - 0.26053242971268835356e-10 * sinP1_6 * sinP2_3) * t10 * t4;
    t52 = (-0.26691405315466896716e-4 * sinP1_2 * sinP2_1 - 0.11125397922189243176e-4 * cosP1_2 * cosP2_1) * t13 * t7;
    t38 = t14 * (t11 * (0.18789914627763584288e-10 * sinP1_4 * sinP2_5 + 0.90633705851565524208e-10 * cosP1_4 * cosP2_5) + t13 * (0.93109553426047314120e-7 * sinP1_4 * sinP2_1 - 0.12308499370280898506e-6 * cosP1_4 * cosP2_1)) + t2 * t49 + t6 * ((-0.19457509241597066928e-4 * t48 - 0.51119620678474457250e-10 * t47) * cosP2_2 + (0.20724170545327482670e-10 * t45 - 0.10086868287821792368e-4 * t46) * sinP2_2) + t41 * t25 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) + t39 * t26 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) + t43 * t27 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - t42 * t28 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + t40 * t29 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t44 * t16 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + t38 + t50 + t51 + t52;
    t49 = 0.42764161442739249952e-13;
    t50 = cosP1_3 * t5;
    t51 = 0.16851237553816682706e-5 * t11;
    t52 = 0.20352793409155214176e-4 * t4;
    t53 = cosP1_8 * t3;
    t54 = cosP1_4 * t14;
    t55 = cosP1_5 * t8;
    t56 = sinP1_5 * t8;
    t57 = sinP1_3 * t5;
    t58 = (-0.12732930383049205352e-7 * cosP2_5 * sinP1_2 + 0.17905683351162945024e-7 * cosP1_2 * sinP2_5) * t11 * t7;
    t59 = (-0.27853285212920136707e-7 * cosP2_6 * sinP1_1 + 0.21387344002777962115e-7 * cosP1_1 * sinP2_6) * t15 * t9;
    t58 = t13 * (t10 * (0.36158743275276141180e-9 * cosP1_6 * sinP2_1 + 0.10752883917232773865e-8 * sinP1_6 * cosP2_1) + t3 * (0.30790196238772259963e-10 * sinP1_8 * cosP2_1 + 0.41053594985029679950e-10 * cosP1_8 * sinP2_1)) + t2 * (t5 * (0.45537910744932921921e-8 * cosP2_4 * sinP1_3 - 0.85770433830262008275e-8 * cosP1_3 * sinP2_4) + 0.81317697758808789134e-10 * t56 * cosP2_4) + t4 * ((0.77591294521706095116e-6 * sinP1_2 * t7 + 0.26053242971268835356e-10 * sinP1_6 * t10 + 0.97154911516495238755e-8 * sinP1_4 * t14) * cosP2_3 + (0.45790548252533104564e-10 * cosP1_6 * t10 - 0.40586215595969342064e-6 * cosP1_2 * t7 - 0.66980519202498423987e-8 * t54) * sinP2_3) + t6 * ((0.21619454712885629918e-6 * t57 - 0.15335886203542337174e-8 * t56 - 0.51119620678474457250e-10 * t45) * cosP2_2 + (-0.20724170545327482670e-10 * t47 - 0.62172511635982448006e-9 * t55 - 0.11207631430913102630e-6 * t50) * sinP2_2) + t58 + t59;
    t59 = sinP2_1 * t13;
    t60 = (-0.12308499370280898506e-6 * t59 + 0.90633705851565524208e-10 * sinP2_5 * t11) * cosP1_4 + (-0.93109553426047314120e-7 * t13 * cosP2_1 - 0.18789914627763584288e-10 * t11 * cosP2_5) * sinP1_4;
    t61 = t6 * (0.19457509241597066928e-4 * cosP2_2 * sinP1_1 - 0.10086868287821792368e-4 * cosP1_1 * sinP2_2) - 0.14356379006887979036e-5 * t36 * sinP1_1;
    t62 = (-0.30948094681022374120e-9 * sinP1_3 * cosP2_6 + 0.23763715558642180128e-9 * cosP1_3 * sinP2_6) * t9 * t5;
    t16 = t14 * t60 + t15 * t61 - t32 * t22 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t33 * t23 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t34 * t21 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t35 * t24 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t39 * t26 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) - t40 * t29 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t41 * t25 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) + t42 * t28 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - t43 * t27 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t44 * t16 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) - t49 * t31 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t58 + t7 * t13 * (-0.26691405315466896716e-4 * sinP1_2 * cosP2_1 + 0.11125397922189243176e-4 * cosP1_2 * sinP2_1) + t62 - 0.15316148898261072905e-9 * t55 * t37;
    t21 = t10 * (-0.20724170545327482668e-9 * sinP1_6 * sinP2_2 + 0.51119620678474457248e-9 * cosP1_6 * cosP2_2) + t7 * (-0.20173736575643584737e-5 * sinP1_2 * sinP2_2 - 0.38915018483194133857e-5 * cosP1_2 * cosP2_2);
    t22 = 0.24023124256721062870e-1 * t19 * t18;
    t7 = t7 * (0.42774688005555924230e-8 * sinP1_2 * sinP2_6 + 0.55706570425840273414e-8 * cosP1_2 * cosP2_6) * t9;
    t14 = (-0.11384477686233230483e-8 * cosP1_4 * cosP2_4 - 0.21442608457565502071e-8 * sinP1_4 * sinP2_4) * t14 * t2;
    t2 = t6 * t21 - 0.37005078925736753054e-5 * t15 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.30638613734212150380e-6 * t15 * t11 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.28737516489520775969e-9 * t12 * t13 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) - 0.43106274734281163952e-9 * t8 * t4 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) - 0.57475032979041551938e-9 * t5 * t11 * (cosP1_3 * cosP2_5 - sinP1_3 * sinP2_5) + 0.27412924001755929456e-16 * t17 * t9 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) - 0.21930339201404743566e-14 * t1 * t11 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + 0.13158203520842846139e-13 * t3 * t2 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.39474610562528538419e-11 * t12 * t4 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.42822057538230958479e-8 * t8 * t13 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.17295563770308503933e-5 * t5 * t13 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + t22 + t7 + t14;
    t2 = t18 * (0.21553137367140581976e-9 * t53 - 0.10305715528780450581e-5 * t54) + t49 * t17 * t6 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) + 0.16283276857043022097e-11 * t10 * t9 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.15631945782761301214e-10 * t8 * t11 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) - 0.13130834457519493021e-6 * t5 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.37816803237656139897e-3 * t15 * t13 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.34211329154191399960e-11 * t1 * t13 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) + t2 + 0.15792016907576776937e-4 * t36 * t19;
    bf[0] = t18 * (-0.35921895611900969958e-10 * cosP1_9 * t1 - 0.41222862115121802324e-5 * t50 + 0.43106274734281163949e-9 * t47 - 0.21839203869746420793e-2 * t48) + t19 * (-t52 * cosP2_3 + t51 * cosP2_5) + 0.54825848003511858910e-15 * t30 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + t49 * t31 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t38 + (0.20799241780710876939e-2 * t19 + 0.41053594985029679950e-10 * t53) * t13 * cosP2_1;
    bf[1] = t18 * (0.73612253777003218436e-7 * t56 + 0.41222862115121802324e-5 * t57 - 0.21839203869746420793e-2 * t46 - 0.35921895611900969958e-10 * sinP1_9 * t1 - 0.43106274734281163949e-9 * t45) + t19 * (t52 * sinP2_3 + t51 * sinP2_5 + 0.20799241780710876939e-2 * t59) + 0.54825848003511858910e-15 * t30 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) - 0.21930339201404743565e-14 * t20 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t16;
    bf[2] = t2;
}

static void idsbf_8_6_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t6, t7, t8, t9;
    t1 = LegP1[68];
    t2 = LegP2[24];
    t3 = LegP1[71];
    t4 = LegP2[27];
    t5 = LegP1[72];
    t6 = LegP2[26];
    t7 = LegP1[73];
    t8 = LegP1[77];
    t9 = LegP2[25];
    t10 = LegP1[76];
    t11 = LegP1[74];
    t12 = LegP2[22];
    t13 = LegP2[23];
    t14 = LegP1[70];
    t15 = LegP1[69];
    t16 = LegP1[67];
    t17 = LegP1[75];
    t18 = LegP2[21];
    t19 = LegP1[66];
    t20 = t3 * t4;
    t21 = t5 * t6;
    t22 = t7 * t4;
    t23 = t8 * t9;
    t24 = t10 * t2;
    t25 = t8 * t13;
    t26 = t10 * t12;
    t27 = t17 * t4;
    t28 = t11 * t6;
    t29 = t7 * t9;
    t30 = t8 * t4;
    t31 = t10 * t6;
    t32 = t17 * t9;
    t33 = t32 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t34 = t17 * t13;
    t35 = t34 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2);
    t36 = t11 * t2;
    t37 = t36 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t38 = -0.17849298515549600086e-7;
    t39 = cosP1_6 * t5;
    t40 = cosP1_4 * t14;
    t41 = cosP1_2 * t1;
    t42 = sinP1_6 * t5;
    t43 = sinP1_4 * t14;
    t44 = sinP1_2 * t1;
    t45 = cosP2_4 * t9;
    t46 = cosP2_2 * t13;
    t47 = sinP2_2 * t13;
    t48 = (0.17272535468278439541e-7 * sinP1_3 * sinP2_4 + 0.18790332961097283085e-7 * cosP1_3 * cosP2_4) * t15 * t9;
    t49 = (0.94381707428451754412e-8 * cosP1_1 * cosP2_6 + 0.82871743107908857532e-8 * sinP1_1 * sinP2_6) * t16 * t4;
    t50 = (0.85376108971059949394e-11 * sinP1_7 * sinP2_2 + 0.22134546770274801702e-11 * cosP1_7 * cosP2_2) * t13 * t7;
    t48 = t12 * (t5 * (0.11611150820064153117e-8 * sinP1_6 * sinP2_1 - 0.10017463452604367395e-8 * cosP1_6 * cosP2_1) + 0.28458702990353316464e-10 * t11 * sinP1_8 * sinP2_1) + t2 * ((0.78303172654524138466e-6 * t41 - 0.32392328159242152649e-8 * t40 - 0.35889586548945571320e-10 * t39) * cosP2_3 + (-0.15190623240628592475e-8 * t43 - 0.42213742769024086092e-10 * t42 + 0.21621025285204426290e-6 * t44) * sinP2_3) + t3 * ((t18 * t38 - 0.78293054004572012849e-10 * t45 - 0.67731713117040893219e-9 * t46) * cosP1_5 + (-0.71968897784493498081e-10 * sinP2_4 * t9 - 0.26125089345144344514e-8 * t47) * sinP1_5) + 0.88696290986601169643e-11 * t20 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) - 0.15652286644694324055e-11 * t21 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + (-0.56310286983579095508e-8 * cosP1_2 * cosP2_5 - 0.43029558921414214492e-8 * sinP1_2 * sinP2_5) * t6 * t1 + t48 + t49 + t50;
    t49 = -0.32489038168024588515e-2;
    t50 = cosP1_3 * t15;
    t51 = cosP1_1 * t16;
    t52 = 0.12015896818149178062e-8 * cosP1_7 * t7 + 0.21659358778683059008e-2 * t51 + 0.42838316437319040210e-5 * t50 - 0.31620781100392573846e-11 * cosP1_9 * t17;
    t53 = 0.77485079805894781802e-6 * t19;
    t54 = t14 * (0.42258011862564635695e-9 * sinP1_4 * sinP2_5 + 0.42890427484572487171e-9 * cosP1_4 * cosP2_5) + t53 * cosP2_5;
    t55 = cosP2_1 * t12 * t49 - 0.44212074948069375498e-4 * cosP2_3 * t2;
    t56 = t15 * t4;
    t57 = t56 * (-0.45533924784565306340e-10 * sinP1_3 * sinP2_6 - 0.51858081004643821108e-10 * cosP1_3 * cosP2_6);
    t33 = t48 + t55 * t19 + t52 * t18 + t54 * t6 + t57 + 0.86957148026079578081e-12 * t35 - 0.53403985858440791390e-12 * t29 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.14639250509441006412e-16 * t31 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) - 0.24398750849068344018e-17 * t30 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + 0.14053680489063366155e-14 * t33 + 0.26455216992061247300e-13 * t24 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + 0.61484852139652226934e-14 * t28 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) + 0.11418615397363985001e-12 * t37 - 0.18821893512138436813e-14 * t25 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) + 0.11272222892269574936e-14 * t27 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + 0.96200789062040899270e-15 * t23 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) - 0.75287574048553747253e-13 * t26 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) - 0.28985716008693192693e-13 * t22 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t35 = 0.73054628924356577497e-5 * t41;
    t37 = 0.42710821447922257355e-7 * t40;
    t40 = cosP1_8 * t11;
    t41 = 0.34347150143493301880e-4 * t44;
    t43 = 0.86059117842828428982e-7 * t43;
    t44 = sinP1_3 * t15;
    t48 = sinP1_1 * t16;
    t23 = t23 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4);
    t24 = t24 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3);
    t21 = t21 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t22 = t22 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6);
    t34 = t34 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2);
    t52 = (-0.78293054004572012849e-10 * cosP2_4 * sinP1_5 + 0.71968897784493498081e-10 * cosP1_5 * sinP2_4) * t9 * t3;
    t54 = t56 * (-0.51858081004643821108e-10 * sinP1_3 * cosP2_6 + 0.45533924784565306340e-10 * cosP1_3 * sinP2_6);
    t25 = t12 * ((t41 + t43) * cosP2_1 + (t19 * t49 - t35 + t37) * sinP2_1) + t18 * (-0.31620781100392573846e-11 * t17 * sinP1_9 + 0.21659358778683059008e-2 * t48 + t38 * t3 * sinP1_5 - 0.42838316437319040210e-5 * t44 - 0.12015896818149178062e-8 * t7 * sinP1_7) + t2 * (t5 * (-0.35889586548945571320e-10 * cosP1_6 * sinP2_3 + 0.42213742769024086092e-10 * sinP1_6 * cosP2_3) + 0.44212074948069375498e-4 * sinP2_3 * t19) + t6 * (t14 * (-0.42258011862564635695e-9 * cosP2_5 * sinP1_4 + 0.42890427484572487171e-9 * cosP1_4 * sinP2_5) + t53 * sinP2_5) - 0.18821893512138436813e-14 * t25 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) - 0.75287574048553747253e-13 * t26 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) + (-0.39281206233148798477e-4 * cosP1_1 * sinP2_2 - 0.14668298530099867785e-4 * cosP2_2 * sinP1_1) * t16 * t13 + t52 + t54;
    t26 = t11 * (-0.28458702990353316464e-10 * sinP1_8 * cosP2_1 + 0.34782859210431831232e-10 * cosP1_8 * sinP2_1) + t5 * (0.10017463452604367395e-8 * cosP1_6 * sinP2_1 + 0.11611150820064153117e-8 * sinP1_6 * cosP2_1);
    t38 = t15 * (-0.21583080347883955208e-6 * cosP1_3 * sinP2_2 - 0.80595046868680592228e-7 * cosP2_2 * sinP1_3) + t3 * (-0.26125089345144344514e-8 * cosP1_5 * sinP2_2 + 0.67731713117040893219e-9 * cosP2_2 * sinP1_5);
    t49 = (0.78303172654524138466e-6 * cosP1_2 * sinP2_3 - 0.21621025285204426290e-6 * cosP2_3 * sinP1_2) * t2 * t1;
    t20 = t25 - 0.88696290986601169643e-11 * t20 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.97236178579946392854e-6 * t48 * t45 + t26 * t12 + t38 * t13 - 0.15652286644694324055e-11 * t21 - 0.86957148026079578081e-12 * t34 + 0.53403985858440791390e-12 * t29 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.14639250509441006412e-16 * t31 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) - 0.24398750849068344018e-17 * t30 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) + 0.14053680489063366155e-14 * t32 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) - 0.26455216992061247300e-13 * t24 - 0.61484852139652226934e-14 * t28 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.11418615397363985001e-12 * t36 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t49 - 0.11272222892269574936e-14 * t27 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - 0.96200789062040899270e-15 * t23 - 0.28985716008693192693e-13 * t22;
    t21 = t7 * t2 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t22 = t3 * t12 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t23 = t15 * t12 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t24 = t16 * t2 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t25 = t16 * t6 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t5 = t5 * t4 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t26 = t3 * t6 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t27 = t15 * t2 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t28 = t10 * t13 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2);
    t29 = 0.79684368372989286128e-10 * t39 * t46;
    t30 = 0.25991230534419670810e-1 * t19 * t18;
    t3 = -0.31620781100392573848e-11 * t17 * t12 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) + 0.94862343301177721540e-10 * t15 * t6 * (cosP1_3 * cosP2_5 - sinP1_3 * sinP2_5) + 0.73686791580115625832e-5 * t24 - 0.10434857763129549370e-11 * t5 - 0.61484852139652226930e-15 * t17 * t6 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) - 0.10735450373590071368e-15 * t10 * t4 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) + 0.56214721956253464623e-13 * t11 * t9 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + t29 - 0.24050197265510224818e-14 * t8 * t2 * (cosP1_11 * cosP2_3 + sinP1_11 * sinP2_3) + 0.43390738509983143004e-11 * t21 + 0.27092685246816357265e-8 * t22 - 0.71374427099806117689e-7 * t27 + 0.19315490893612602950e-5 * t23 - 0.53217774591960701788e-10 * t26 + t30 + 0.54148396946707647526e-3 * t16 * t12 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.10751065574133475108e-9 * t3 * t2 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) + 0.12015896818149178063e-9 * t7 * t12 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) - 0.82816331453409121984e-13 * t28 - 0.12914179967649130300e-6 * t25;
    t3 = t1 * ((-0.22566613123230565818e-5 * t46 - 0.14520262681300269909e-8 * cosP2_6 * t4) * cosP1_2 + (-0.12749498939678285773e-8 * sinP2_6 * t4 + 0.60432624974075074578e-5 * t47) * sinP1_2) + t14 * (t9 * (-0.25053777281463044116e-8 * cosP1_4 * cosP2_4 - 0.23030047291037919388e-8 * sinP1_4 * sinP2_4) - 0.57117755249758720276e-6 * cosP1_4 * t18) + t3 - 0.11668341429593567143e-4 * t45 * t19 - 0.12648312440157029539e-9 * t40 * t18 + 0.30735399229581581781e-9 * t42 * t47;
    bf[0] = t12 * ((0.34782859210431831232e-10 * t40 + t35 + t37) * cosP2_1 + (t41 - t43) * sinP2_1) + t13 * ((0.14668298530099867785e-4 * t51 - 0.80595046868680592228e-7 * t50) * cosP2_2 + (0.21583080347883955208e-6 * t44 - 0.39281206233148798477e-4 * t48) * sinP2_2) + t33 - 0.97236178579946392854e-6 * t51 * t45;
    bf[1] = t20 + (0.22134546770274801702e-11 * cosP2_2 * sinP1_7 - 0.85376108971059949394e-11 * cosP1_7 * sinP2_2) * t13 * t7 + (-0.94381707428451754412e-8 * cosP2_6 * sinP1_1 + 0.82871743107908857532e-8 * cosP1_1 * sinP2_6) * t16 * t4 + (-0.15190623240628592475e-8 * cosP2_3 * sinP1_4 + 0.32392328159242152649e-8 * cosP1_4 * sinP2_3) * t14 * t2 + t15 * t9 * (0.17272535468278439541e-7 * cosP1_3 * sinP2_4 - 0.18790332961097283085e-7 * sinP1_3 * cosP2_4) + (-0.43029558921414214492e-8 * cosP2_5 * sinP1_2 + 0.56310286983579095508e-8 * cosP1_2 * sinP2_5) * t6 * t1;
    bf[2] = t3;
}

static void idsbf_8_6_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t8, t9;
    t1 = LegP1[92];
    t2 = LegP2[25];
    t3 = LegP1[102];
    t4 = LegP2[27];
    t5 = LegP1[101];
    t6 = LegP2[26];
    t7 = LegP1[100];
    t8 = LegP1[99];
    t9 = LegP2[24];
    t10 = LegP1[94];
    t11 = LegP2[23];
    t12 = LegP2[21];
    t13 = LegP1[91];
    t14 = LegP2[22];
    t15 = LegP1[98];
    t16 = LegP1[96];
    t17 = LegP1[93];
    t18 = LegP1[97];
    t19 = LegP1[95];
    t20 = LegP1[103];
    t21 = t18 * t6;
    t22 = t15 * t4;
    t23 = t3 * t2;
    t24 = t5 * t9;
    t25 = t7 * t11;
    t26 = LegP1[104] * t2;
    t27 = t20 * t9;
    t28 = t3 * t11;
    t29 = t5 * t14;
    t30 = t7 * t4;
    t31 = t8 * t6;
    t32 = t31 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t33 = t15 * t2;
    t34 = t33 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t35 = t3 * t4;
    t36 = t35 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6);
    t37 = t5 * t6;
    t38 = t7 * t2;
    t39 = t8 * t9;
    t40 = t16 * t4;
    t41 = cosP1_4 * t19;
    t42 = cosP1_2 * t17;
    t43 = sinP1_4 * t19;
    t44 = sinP1_2 * t17;
    t45 = cosP2_4 * t2;
    t46 = t11 * (-0.11909063408378499247e-9 * cosP1_5 * cosP2_2 - 0.45934958860888497079e-9 * sinP1_5 * sinP2_2) + t2 * (-0.69145480401707817037e-10 * sinP1_5 * sinP2_4 - 0.75221533161084602365e-10 * cosP1_5 * cosP2_4);
    t47 = (0.21266184657818748661e-11 * cosP1_7 * cosP2_2 + 0.82026712251586601925e-11 * sinP1_7 * sinP2_2) * t15 * t11;
    t48 = t4 * (0.57746805425116967748e-8 * sinP1_1 * sinP2_6 + 0.65767195067494324380e-8 * cosP1_1 * cosP2_6) * t1;
    t46 = t10 * ((0.67699379844976142120e-8 * t45 - 0.49823632626889639686e-10 * cosP2_6 * t4) * cosP1_3 + (0.62230932361537035324e-8 * sinP2_4 * t2 - 0.43747579867512854358e-10 * sinP2_6 * t4) * sinP1_3) + t14 * (t18 * (-0.51038843178764996761e-10 * cosP1_6 * cosP2_1 + 0.20415537271505998697e-9 * sinP1_6 * sinP2_1) + t8 * (0.44847056081114367890e-11 * cosP1_8 * cosP2_1 - 0.15913471512653485381e-11 * sinP1_8 * sinP2_1)) + t16 * t46 + t6 * ((-0.51063147389802503894e-8 * t42 + 0.11131328655178270720e-9 * t41) * cosP2_5 + (-0.44379489354488040034e-8 * t44 + 0.10523723379240592188e-9 * t43) * sinP2_5) + t9 * (t18 * (-0.15696469628390028761e-11 * cosP1_6 * cosP2_3 - 0.76456997222157882035e-11 * sinP1_6 * sinP2_3) + t19 * (-0.25045489474151109121e-8 * cosP1_4 * cosP2_3 - 0.20670731487399823685e-8 * sinP1_4 * sinP2_3)) + t47 + t48;
    t47 = -0.15038230579457543686e-11;
    t48 = -0.72333961421152206273e-13;
    t49 = 0.40507018395845235520e-13;
    t50 = -0.27848575147143599415e-13;
    t51 = 0.21700188426345661884e-13;
    t52 = -0.18083490355288051570e-14;
    t53 = 0.30139150592146752618e-15;
    t54 = 0.28129873886003635776e-15;
    t55 = -0.50231917653577921030e-16;
    t56 = 0.28129873886003635776e-16;
    t57 = 0.33487945102385280686e-17;
    t58 = -0.23441561571669696480e-17;
    t59 = -0.16743972551192640342e-17;
    t60 = cosP1_7 * t15;
    t61 = cosP1_3 * t10;
    t62 = cosP1_1 * t1;
    t63 = -0.17149051308065038909e-7 * cosP1_5 * t16 - 0.30380263796883926636e-11 * cosP1_9 * t7 + 0.15434146177258535018e-5 * t61 + 0.91140791390651779910e-10 * t60 + 0.20809638802995150499e-2 * t62;
    t64 = cosP2_1 * t14;
    t65 = t14 * (0.56346882869356556420e-7 * cosP1_4 * cosP2_1 - 0.67371272995969795714e-7 * sinP1_4 * sinP2_1) * t19;
    t32 = t46 + t51 * t25 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t52 * t28 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) + t47 * t21 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5) + t56 * t30 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + t57 * t23 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) + t65 + t58 * t36 + t59 * t26 * (cosP1_13 * cosP2_4 + sinP1_13 * sinP2_4) + t48 * t29 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) - t49 * t34 + t50 * t22 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + t63 * t12 + (0.74445256660546624256e-6 * cosP2_5 * t6 - 0.31214458204492725751e-2 * t64 - 0.42477587623958956194e-4 * cosP2_3 * t9) * t13 + t53 * t24 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t54 * t32 + t55 * t27 * (cosP1_12 * cosP2_3 + sinP1_12 * sinP2_3) + 0.13204769507210079959e-4 * t64 * t42;
    t34 = 0.15595202082400415675e-11;
    t36 = 0.14064936943001817889e-16;
    t46 = 0.13502339465281745174e-14;
    t63 = 0.10970650815541417953e-12;
    t64 = cosP1_8 * t8;
    t65 = sinP1_7 * t15;
    t66 = sinP1_3 * t10;
    t67 = sinP1_1 * t1;
    t68 = (-0.49823632626889639686e-10 * sinP1_3 * cosP2_6 + 0.43747579867512854358e-10 * cosP1_3 * sinP2_6) * t10 * t4;
    t69 = (-0.10523723379240592188e-9 * cosP2_5 * sinP1_4 + 0.11131328655178270720e-9 * cosP1_4 * sinP2_5) * t19 * t6;
    t42 = t11 * ((-0.77433216365497752218e-7 * t66 + 0.21266184657818748661e-11 * t65 - 0.10221184560245703292e-4 * t67) * cosP2_2 + (-0.82026712251586601925e-11 * t60 - 0.20736352857201092967e-6 * t61 - 0.27371985771505442716e-4 * t62) * sinP2_2) + t14 * ((0.26813766652395978695e-4 * t44 + 0.20415537271505998697e-9 * sinP1_6 * t18 + 0.67371272995969795714e-7 * t43 + 0.15913471512653485381e-11 * sinP1_8 * t8) * cosP2_1 + (0.44847056081114367890e-11 * t64 + 0.56346882869356556420e-7 * t41 - 0.13204769507210079959e-4 * t42) * sinP2_1) + t2 * (t16 * (0.69145480401707817037e-10 * cosP1_5 * sinP2_4 - 0.75221533161084602365e-10 * cosP2_4 * sinP1_5) - 0.93421498554411450056e-6 * cosP2_4 * sinP1_1 * t1) + t9 * (t17 * (0.52373144364724138809e-6 * cosP1_2 * sinP2_3 + 0.2085301307018112725e-7 * cosP2_3 * sinP1_2) + t18 * (0.76456997222157882035e-11 * sinP1_6 * cosP2_3 - 0.15696469628390028761e-11 * cosP1_6 * sinP2_3)) + t68 + t69;
    t43 = (-0.31214458204492725751e-2 * t13 + 0.51038843178764996761e-10 * cosP1_6 * t18) * t14 * sinP2_1;
    t44 = (0.57746805425116967748e-8 * cosP1_1 * sinP2_6 - 0.65767195067494324380e-8 * cosP2_6 * sinP1_1) * t4 * t1;
    t60 = (0.11909063408378499247e-9 * cosP2_2 * sinP1_5 - 0.45934958860888497079e-9 * cosP1_5 * sinP2_2) * t16 * t11;
    t61 = (-0.67699379844976142120e-8 * cosP2_4 * sinP1_3 + 0.62230932361537035324e-8 * cosP1_3 * sinP2_4) * t10 * t2;
    t21 = t12 * (-0.30380263796883926636e-11 * t7 * sinP1_9 - 0.17149051308065038909e-7 * t16 * sinP1_5 - 0.15434146177258535018e-5 * t66 + 0.20809638802995150499e-2 * t67 - 0.91140791390651779910e-10 * t65) + t47 * t21 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + t49 * t33 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t50 * t22 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - t54 * t31 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - t56 * t30 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t6 * (t17 * (0.51063147389802503894e-8 * cosP1_2 * sinP2_5 - 0.44379489354488040034e-8 * cosP2_5 * sinP1_2) + 0.74445256660546624256e-6 * t13 * sinP2_5) + t9 * (t19 * (-0.20670731487399823685e-8 * cosP2_3 * sinP1_4 + 0.25045489474151109121e-8 * cosP1_4 * sinP2_3) + 0.42477587623958956194e-4 * t13 * sinP2_3) + t42 + t43 + t44 + t60 + t61;
    t21 = -t34 * t40 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - t36 * t37 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) + t46 * t38 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t48 * t29 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) - t51 * t25 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t52 * t28 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) - t53 * t24 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t55 * t27 * (sinP1_12 * cosP2_3 - cosP1_12 * sinP2_3) - t57 * t23 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) + t58 * t35 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) + t59 * t26 * (sinP1_13 * cosP2_4 - cosP1_13 * sinP2_4) + t63 * t39 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t21;
    t22 = t15 * t9 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t23 = t16 * t14 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t24 = t10 * t14 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t25 = t17 * (0.17035307600409505485e-5 * cosP1_2 * cosP2_2 - 0.45619976285842404527e-5 * sinP1_2 * sinP2_2) + t18 * (-0.11483739715222124270e-9 * sinP1_6 * sinP2_2 - 0.29772658520946248120e-10 * cosP1_6 * cosP2_2);
    t26 = t17 * (0.96244675708528279588e-9 * sinP1_2 * sinP2_6 + 0.10961199177915720731e-8 * cosP1_2 * cosP2_6) * t4;
    t19 = (0.12446186472307407067e-8 * sinP1_4 * sinP2_4 + 0.13539875968995228427e-8 * cosP1_4 * cosP2_4) * t19 * t2;
    t2 = t11 * t25 + t36 * t5 * t4 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) + t57 * t20 * t2 * (cosP1_12 * cosP2_4 + sinP1_12 * sinP2_4) + 0.20092767061431168412e-15 * t3 * t9 * (cosP1_11 * cosP2_3 + sinP1_11 * sinP2_3) + 0.10850094213172830942e-13 * t5 * t11 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) + 0.57867169136921765022e-12 * t7 * t14 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) - 0.36456316556260711964e-10 * t15 * t14 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) - 0.48608422075014282620e-10 * t16 * t9 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) - 0.60760527593767853274e-10 * t10 * t6 * (cosP1_3 * cosP2_5 - sinP1_3 * sinP2_5) + 0.11251949554401454311e-15 * t7 * t6 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) - 0.13502339465281745173e-13 * t8 * t2 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.13164780978649701543e-11 * t22 - 0.12249322362903599217e-8 * t23 - 0.12371815586532635213e-5 * t24 + t26 + t19;
    t2 = t12 * (-0.27052530443893695650e-1 * t13 + 0.30380263796883926638e-10 * t64 + 0.30868292354517070038e-6 * t41) - 0.65350134806090701842e-5 * t1 * t9 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.11453116409314865271e-6 * t1 * t6 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.38988005206001039186e-12 * t18 * t4 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.24061168927132069896e-10 * t16 * t6 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.45716220961550932804e-7 * t10 * t9 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.48022243391527270388e-3 * t1 * t14 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + t2 + 0.12144794812073488508e-4 * t45 * t13;
    bf[0] = t11 * (t1 * (0.10221184560245703292e-4 * cosP1_1 * cosP2_2 - 0.27371985771505442716e-4 * sinP1_1 * sinP2_2) + t10 * (-0.77433216365497752218e-7 * cosP1_3 * cosP2_2 + 0.20736352857201092967e-6 * sinP1_3 * sinP2_2)) + t17 * (t9 * (0.52373144364724138809e-6 * cosP1_2 * cosP2_3 - 0.2085301307018112725e-7 * sinP1_2 * sinP2_3) + 0.26813766652395978695e-4 * sinP1_2 * sinP2_1 * t14) - t36 * t37 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + t46 * t38 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t63 * t39 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t34 * t40 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6) + t32 - 0.93421498554411450056e-6 * t62 * t45;
    bf[1] = t21;
    bf[2] = t2;
}

static void idsbf_8_6_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t7, t8, t9;
    t1 = LegP1[100];
    t2 = LegP2[21];
    t3 = LegP1[91];
    t4 = LegP2[22];
    t5 = LegP1[92];
    t6 = LegP1[98];
    t7 = LegP2[24];
    t8 = LegP1[96];
    t9 = LegP2[26];
    t10 = LegP1[94];
    t11 = LegP2[25];
    t12 = LegP1[102];
    t13 = LegP2[27];
    t14 = LegP1[101];
    t15 = LegP1[99];
    t16 = LegP2[23];
    t17 = LegP1[93];
    t18 = LegP1[97];
    t19 = LegP1[104];
    t20 = LegP1[103];
    t21 = LegP1[95];
    t22 = t12 * t13;
    t23 = t14 * t9;
    t24 = t1 * t13;
    t25 = t15 * t9;
    t26 = t6 * t11;
    t27 = t1 * t11;
    t28 = t15 * t7;
    t29 = t8 * t13;
    t30 = t29 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t31 = t18 * t9;
    t32 = t31 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t33 = t6 * t13;
    t34 = t12 * t11;
    t35 = t34 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4);
    t36 = t14 * t7;
    t37 = t36 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3);
    t38 = t1 * t16;
    t39 = t38 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2);
    t40 = t19 * t13;
    t41 = t40 * (cosP1_13 * cosP2_6 + sinP1_13 * sinP2_6);
    t42 = t20 * t9;
    t43 = t42 * (cosP1_12 * cosP2_5 + sinP1_12 * sinP2_5);
    t44 = t19 * t11;
    t45 = t44 * (cosP1_13 * cosP2_4 + sinP1_13 * sinP2_4);
    t46 = t20 * t7;
    t47 = t46 * (cosP1_12 * cosP2_3 + sinP1_12 * sinP2_3);
    t48 = t12 * t16;
    t49 = t48 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2);
    t50 = t14 * t4;
    t51 = sinP1_2 * t17;
    t52 = -0.19859870702373265316e-4 * t51;
    t53 = sinP1_4 * t21;
    t54 = 0.50395996782171603596e-7 * t53;
    t55 = cosP1_2 * t17;
    t56 = 0.32858562286188561692e-4 * t55;
    t57 = cosP1_4 * t21;
    t58 = 0.98185304075610193216e-7 * t57;
    t59 = (-t56 + t58) * cosP2_1 + (t52 + t54) * sinP2_1;
    t60 = -0.14496089879009705518e-6 * t5;
    t61 = t60 * cosP1_1 * t11 * cosP2_4;
    t62 = 0.29092516615323816732e-11 * t10 * sinP1_3 * t13 * sinP2_6;
    t30 = 0.18949550865761264309e-17 * t43 + 0.83442808598634216846e-16 * t24 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) - 0.59386056844266070470e-19 * t45 + 0.45893544729248819262e-14 * t25 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5) - 0.25654776556722942443e-14 * t50 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) + t61 + t4 * t59 - 0.41902801709314139331e-13 * t28 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.35403591648277660568e-13 * t39 - 0.17815817053279821142e-17 * t47 + 0.17006007187221647452e-18 * t41 - 0.15116450833085908849e-18 * t22 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) - 0.17958343589706059712e-14 * t33 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.10689490231967892685e-14 * t37 - 0.59861145299020199042e-15 * t27 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - t62 - 0.64136941391807356106e-16 * t49 + 0.38600936948772945812e-16 * t35 - 0.90698704998515453094e-17 * t23 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + 0.68241705640883026904e-12 * t30 + 0.27655849128147331958e-12 * t26 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.19395011076882544489e-12 * t32;
    t32 = sinP1_7 * t6;
    t35 = sinP1_5 * t8;
    t37 = t10 * sinP1_3;
    t39 = sinP1_1 * t5;
    t41 = cosP1_7 * t6;
    t43 = cosP1_5 * t8;
    t45 = cosP1_3 * t10;
    t47 = t5 * cosP1_1;
    t49 = 0.69010035413025010969e-6 * t55;
    t55 = cosP1_6 * t18;
    t59 = 0.17706926779450174875e-10 * t55;
    t51 = 0.58655685499446649885e-6 * t51;
    t61 = sinP1_6 * t18;
    t62 = 0.17491426656373702159e-10 * t61;
    t63 = (0.74994042830612505356e-9 * cosP1_1 * cosP2_6 + 0.69822039876777160160e-9 * sinP1_1 * sinP2_6) * t13 * t5;
    t30 = t11 * (t10 * (0.64953892096479641491e-8 * sinP1_3 * sinP2_4 + 0.65613322473093648003e-8 * cosP1_3 * cosP2_4) - 0.21442262246109035297e-10 * cosP1_5 * cosP2_4 * t8) + t16 * ((0.69431036453467208062e-4 * t47 - 0.28929598522278003360e-6 * t45 - 0.31247517846088543897e-11 * t41 + 0.11874056781513646682e-8 * t43) * cosP2_2 + (-0.29092516615323816733e-11 * t32 - 0.21761202428262214916e-6 * t37 + 0.11055156313823050358e-8 * t35 + 0.52226885827829315800e-4 * t39) * sinP2_2) + t4 * (t15 * (0.14058817553084172460e-11 * cosP1_8 * cosP2_1 + 0.11903816322319445295e-11 * sinP1_8 * sinP2_1) + t18 * (-0.26247914990714376876e-9 * cosP1_6 * cosP2_1 - 0.17196909821502522780e-9 * sinP1_6 * sinP2_1)) + t7 * ((-0.23836468613488647177e-8 * t57 + t49 + t59) * cosP2_3 + (-0.23099458192567110485e-8 * t53 + t51 + t62) * sinP2_3) + t30 + t63 + (-0.44134425206061612349e-9 * sinP1_2 * sinP2_5 - 0.49996028553741670239e-9 * cosP1_2 * cosP2_5) * t17 * t9;
    t53 = -0.10775006153823635826e-12 * t1;
    t57 = 0.46529407373884299526e-5 * t2;
    t24 = t24 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6);
    t25 = t25 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5);
    t26 = t26 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4);
    t31 = t31 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5);
    t40 = t40 * (sinP1_13 * cosP2_6 - cosP1_13 * sinP2_6);
    t42 = t42 * (sinP1_12 * cosP2_5 - cosP1_12 * sinP2_5);
    t22 = t22 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6);
    t23 = t23 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5);
    t27 = t27 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4);
    t28 = t28 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3);
    t29 = t29 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6);
    t34 = t34 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4);
    t38 = t38 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2);
    t63 = t53 * sinP1_9 - 0.49780528430665197518e-10 * t32 - 0.15205688684275914880e-7 * t35 - 0.25832032164395295233e-2 * t39;
    t64 = 0.98836976447793446708e-7 * sinP2_5 * t9 + 0.55354354637989918358e-2 * sinP2_1 * t4;
    t22 = -0.18949550865761264309e-17 * t42 - 0.83442808598634216846e-16 * t24 + 0.59386056844266070470e-19 * t44 * (-sinP1_13 * cosP2_4 + cosP1_13 * sinP2_4) + t64 * t3 - 0.45893544729248819262e-14 * t25 - 0.25654776556722942443e-14 * t50 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) + t63 * t2 - 0.41902801709314139331e-13 * t28 - 0.35403591648277660568e-13 * t38 - 0.17815817053279821142e-17 * t46 * (sinP1_12 * cosP2_3 - cosP1_12 * sinP2_3) - 0.17006007187221647452e-18 * t40 - 0.15116450833085908849e-18 * t22 - 0.17958343589706059712e-14 * t33 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.10689490231967892685e-14 * t36 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) - 0.59861145299020199042e-15 * t27 - 0.64136941391807356106e-16 * t48 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) - 0.38600936948772945812e-16 * t34 - 0.90698704998515453094e-17 * t23 - 0.68241705640883026904e-12 * t29 - 0.27655849128147331958e-12 * t26 - 0.19395011076882544489e-12 * t31;
    t23 = cosP1_8 * t15;
    t22 = t10 * (t13 * (-0.31247517846088543896e-11 * cosP2_6 * sinP1_3 + 0.29092516615323816732e-11 * cosP1_3 * sinP2_6) - t57 * sinP1_3) + t11 * (t8 * (-0.21442262246109035297e-10 * cosP2_4 * sinP1_5 + 0.21226762123032562581e-10 * cosP1_5 * sinP2_4) + t60 * cosP2_4 * sinP1_1) + t16 * ((-0.31247517846088543897e-11 * t32 - 0.28929598522278003360e-6 * t37 - 0.69431036453467208062e-4 * t39) * cosP2_2 + (0.29092516615323816733e-11 * t41 + 0.21761202428262214916e-6 * t45 + 0.52226885827829315800e-4 * t47) * sinP2_2) + t4 * ((-0.11903816322319445295e-11 * sinP1_8 * t15 + t52 - t54) * cosP2_1 + (0.14058817553084172460e-11 * t23 + t56 + t58) * sinP2_1) + t7 * ((-t51 - t62) * cosP2_3 + (0.10872067409257279139e-4 * t3 + t49 + t59) * sinP2_3) + t22 + (-0.66223187821400065795e-10 * cosP2_5 * sinP1_4 + 0.66438687944476538511e-10 * cosP1_4 * sinP2_5) * t21 * t9;
    t22 = t22 + (-0.44134425206061612349e-9 * cosP2_5 * sinP1_2 + 0.49996028553741670239e-9 * cosP1_2 * sinP2_5) * t17 * t9 + (-0.74994042830612505356e-9 * cosP2_6 * sinP1_1 + 0.69822039876777160160e-9 * cosP1_1 * sinP2_6) * t13 * t5 + (0.23836468613488647177e-8 * cosP1_4 * sinP2_3 - 0.23099458192567110485e-8 * cosP2_3 * sinP1_4) * t21 * t7 + t10 * t11 * (0.64953892096479641491e-8 * cosP1_3 * sinP2_4 - 0.65613322473093648003e-8 * sinP1_3 * cosP2_4) + (0.11055156313823050358e-8 * cosP1_5 * sinP2_2 - 0.11874056781513646682e-8 * cosP2_2 * sinP1_5) * t16 * t8 + (-0.17196909821502522780e-9 * cosP2_1 * sinP1_6 + 0.26247914990714376876e-9 * cosP1_6 * sinP2_1) * t18 * t4;
    t24 = t8 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t25 = t10 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t26 = t5 * t7 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    t27 = t5 * t9 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5);
    t18 = t18 * t13 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6);
    t28 = t8 * t9 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5);
    t29 = t10 * t7 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t5 = t5 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t19 = t19 * t9 * (cosP1_13 * cosP2_5 + sinP1_13 * sinP2_5);
    t12 = t12 * t7 * (cosP1_11 * cosP2_3 + sinP1_11 * sinP2_3);
    t31 = t14 * t16 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2);
    t32 = t1 * t4 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1);
    t33 = -0.12499007138435417558e-9 * t55 * t16 * cosP2_2;
    t34 = -0.36164845030153413327e-1 * t3 * t2;
    t1 = -0.73701042092153669059e-11 * t28 - 0.45255025846059270472e-11 * t6 * t4 * (-cosP1_7 * cosP2_1 + sinP1_7 * sinP2_1) - 0.72558963998812362474e-17 * t14 * t13 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) - 0.30880749559018356646e-17 * t20 * t11 * (cosP1_12 * cosP2_4 + sinP1_12 * sinP2_4) - 0.41721404299317108420e-15 * t1 * t9 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) - 0.89079085266399105714e-16 * t12 - 0.14576577589047126390e-18 * t19 - 0.30785731868067530932e-14 * t31 + 0.36635020923000361812e-11 * t10 * t9 * (cosP1_3 * cosP2_5 - sinP1_3 * sinP2_5) + 0.40945023384529816142e-11 * t8 * t7 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) - 0.79077649482842740515e-3 * t5 - 0.11801197216092553524e-12 * t32 - 0.71833374358824238844e-13 * t18 + t34 - 0.17599176717911938518e-11 * t6 * t7 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.26338903931568887578e-13 * t15 * t11 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.81241822398845602352e-6 * t25 + 0.15531524870367541628e-5 * t26 - 0.14119568063970492388e-7 * t27 - 0.82545167143212109342e-8 * t24 + t33 - 0.79791075570294788034e-7 * t29;
    t1 = t17 * (t13 * (-0.99992057107483340482e-10 * cosP1_2 * cosP2_6 - 0.93096053169036213554e-10 * sinP1_2 * sinP2_6) + t16 * (-0.69635847770439087737e-5 * sinP1_2 * sinP2_2 - 0.92574715271289610753e-5 * cosP1_2 * cosP2_2)) + t21 * (t11 * (-0.76416343642917225295e-9 * sinP1_4 * sinP2_4 - 0.77192144085992527075e-9 * cosP1_4 * cosP2_4) - 0.54740479263393293570e-6 * cosP1_4 * t2) + t1 - 0.47410027076823997638e-11 * t23 * t2 - 0.20294525830613587724e-5 * t3 * t11 * cosP2_4 - 0.11637006646129526692e-9 * t61 * t16 * sinP2_2;
    bf[0] = t2 * (-0.15205688684275914880e-7 * t43 + 0.49780528430665197518e-10 * t41 - 0.25832032164395295233e-2 * t47 + t53 * cosP1_9) + t3 * (-0.10872067409257279139e-4 * cosP2_3 * t7 + 0.55354354637989918358e-2 * cosP2_1 * t4) + t9 * (t21 * (0.66438687944476538511e-10 * cosP1_4 * cosP2_5 + 0.66223187821400065795e-10 * sinP1_4 * sinP2_5) + 0.98836976447793446708e-7 * cosP2_5 * t3) + t30 + t45 * (-0.31247517846088543896e-11 * cosP2_6 * t13 + t57) - 0.21226762123032562581e-10 * t35 * t11 * sinP2_4;
    bf[1] = t22;
    bf[2] = t1;
}

static void idsbf_8_8_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t8, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t9, t90, t91, t92, t93, t94;
    t1 = LegP1[98];
    t2 = LegP2[36];
    t3 = LegP1[91];
    t4 = LegP2[37];
    t5 = LegP1[92];
    t6 = LegP1[94];
    t7 = LegP1[96];
    t8 = LegP2[39];
    t9 = LegP1[100];
    t10 = LegP2[41];
    t11 = LegP2[43];
    t12 = LegP1[101];
    t13 = LegP2[38];
    t14 = LegP1[99];
    t15 = LegP1[97];
    t16 = LegP1[95];
    t17 = LegP2[40];
    t18 = LegP1[103];
    t19 = LegP1[102];
    t20 = LegP2[42];
    t21 = LegP1[93];
    t22 = LegP2[44];
    t23 = LegP1[104];
    t24 = t12 * t8;
    t25 = t9 * t13;
    t26 = t18 * t11;
    t27 = t19 * t20;
    t28 = t12 * t10;
    t29 = t9 * t17;
    t30 = t14 * t8;
    t31 = t23 * t17;
    t32 = t18 * t8;
    t33 = t19 * t13;
    t34 = t12 * t4;
    t35 = t7 * t20;
    t36 = t35 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t37 = t15 * t10;
    t38 = t37 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t39 = t1 * t20;
    t40 = t14 * t11;
    t41 = t9 * t22;
    t42 = t19 * t22;
    t43 = t12 * t11;
    t44 = t9 * t20;
    t45 = t23 * t20;
    t46 = t18 * t10;
    t47 = t19 * t17;
    t48 = t6 * t22;
    t49 = t1 * t22;
    t50 = t49 * (cosP1_7 * cosP2_8 + sinP1_7 * sinP2_8);
    t51 = t14 * t10;
    t52 = t51 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t53 = t1 * t17;
    t54 = t53 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t55 = t16 * t11;
    t56 = t55 * (cosP1_4 * cosP2_7 + sinP1_4 * sinP2_7);
    t57 = t7 * t22;
    t58 = t23 * t22;
    t59 = t15 * t11;
    t60 = -0.29823249557939132706e-2;
    t61 = 0.58180057178922786345e-12;
    t62 = -0.11712564142598929356e-12;
    t63 = 0.65397883821420725994e-13;
    t64 = 0.10770402473883518775e-14;
    t65 = cosP1_3 * t6;
    t66 = 0.20450228268301119565e-2 * cosP1_1 * t5 + 0.27586533427627125376e-9 * cosP1_7 * t1 - 0.59711111315210228084e-12 * cosP1_9 * t9 + 0.36835545725907928862e-5 * t65 - 0.12037760041146381982e-7 * cosP1_5 * t7;
    t67 = cosP2_7 * t11;
    t68 = cosP2_5 * t10;
    t69 = cosP2_3 * t8;
    t70 = -0.12539333376194147898e-9 * t67 - 0.21634864233950335018e-4 * t69 + cosP2_1 * t4 * t60 + 0.24752644084607247952e-6 * t68;
    t36 = t2 * t66 + t3 * t70 + t64 * t24 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t63 * t25 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - 0.34520520749626662740e-21 * t26 * (cosP1_12 * cosP2_7 + sinP1_12 * sinP2_7) + 0.46027360999502216984e-20 * t27 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + 0.14498618714843198353e-17 * t28 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + 0.15078563463436926284e-15 * t29 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.11610493866846433239e-13 * t30 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.29917784649676441040e-19 * t31 * (cosP1_13 * cosP2_4 + sinP1_13 * sinP2_4) - 0.17950670789805864624e-17 * t32 * (cosP1_12 * cosP2_3 + sinP1_12 * sinP2_3) - 0.11847442721271870653e-15 * t33 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) - 0.82932099048903094570e-14 * t34 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) + t61 * t36 + t62 * t38;
    t38 = 0.69662963201078599444e-13;
    t66 = -0.55883475974491623722e-13;
    t70 = -0.15310541362874417459e-14;
    t71 = -0.73363010697106583662e-15;
    t72 = 0.19446560022289686677e-16;
    t73 = -0.18682505829697949877e-16;
    t74 = 0.25407103271725223775e-17;
    t75 = 0.40389009277063195408e-18;
    t76 = -0.22783543694753597408e-18;
    t77 = 0.20712312449775997644e-18;
    t78 = 0.12465743604031850434e-19;
    t79 = 0.10356156224887998822e-19;
    t80 = t14 * (0.35992530987223943043e-11 * sinP1_8 * sinP2_1 + 0.47934753250265988661e-11 * cosP1_8 * cosP2_1) + t15 * (-0.27586533427627125374e-9 * cosP1_6 * cosP2_1 + 0.22570800077149466214e-9 * sinP1_6 * sinP2_1);
    t81 = (-0.43867763112907780905e-9 * sinP1_5 * sinP2_2 + 0.1512681486651992443e-10 * cosP1_5 * cosP2_2) * t13 * t7;
    t36 = t36 + t66 * t56 + t78 * t42 * (cosP1_11 * cosP2_8 + sinP1_11 * sinP2_8) + 0.11712564142598929355e-12 * t48 * (cosP1_3 * cosP2_8 + sinP1_3 * sinP2_8) + t81 + (-0.32244000110213523162e-9 * cosP1_4 * cosP2_3 + 0.8598400029390272850e-10 * sinP1_4 * sinP2_3) * t16 * t8 + t71 * t52 + t70 * t39 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.10525997186976162002e-15 * t50 + t72 * t47 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) + t75 * t46 * (cosP1_12 * cosP2_5 + sinP1_12 * sinP2_5) + t76 * t41 * (cosP1_9 * cosP2_8 + sinP1_9 * sinP2_8) + t73 * t40 * (cosP1_8 * cosP2_7 + sinP1_8 * sinP2_7) + t77 * t43 * (cosP1_10 * cosP2_7 + sinP1_10 * sinP2_7) - t38 * t54 - t74 * t44 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + t79 * t45 * (cosP1_13 * cosP2_6 + sinP1_13 * sinP2_6) + t4 * t80;
    t50 = sinP2_2 * t13;
    t52 = 0.12201129641704797166e-6 * t50;
    t54 = 0.20098760068699762771e-8 * sinP2_4 * t17;
    t56 = 0.75787179746228366428e-11 * sinP2_6 * t20;
    t80 = -0.87729402009270412044e-11 * cosP2_6 * t20;
    t81 = cosP2_2 * t13;
    t82 = 0.2837472009698790041e-8 * t81;
    t83 = cosP2_4 * t17;
    t84 = 0.23753080081190628731e-8 * t83;
    t85 = sinP2_7 * t11;
    t36 = t21 * ((-0.13411115601396217230e-8 * t68 + 0.13518117912873073956e-6 * t69 + 0.15797416578213823934e-10 * t67) * cosP1_2 + (0.14603194351909619373e-10 * t85 - 0.10162831145848780822e-8 * sinP2_5 * t10) * sinP1_2) + t5 * (t20 * (0.21055056482224898889e-8 * cosP1_1 * cosP2_6 + 0.18188923139094807941e-8 * sinP1_1 * sinP2_6) - 0.11942222263042045618e-11 * cosP1_1 * t22 * cosP2_8) + t6 * ((t80 + t82 + t84) * cosP1_3 + (-t56 + t52 + t54) * sinP1_3) + t36 + (0.40654080480840440677e-10 * cosP1_4 * cosP2_5 + 0.39459858254536236117e-10 * sinP1_4 * sinP2_5) * t16 * t10 + (-0.77624444709773296512e-11 * cosP1_5 * cosP2_4 - 0.65682222446731250896e-11 * sinP1_5 * sinP2_4) * t17 * t7 + (-0.3980740754347348538e-13 * cosP1_7 * cosP2_2 + 0.11544148187607310764e-11 * sinP1_7 * sinP2_2) * t13 * t1 + (-0.54735185372276042411e-11 * sinP1_6 * sinP2_3 - 0.42792963109233996793e-11 * cosP1_6 * cosP2_3) * t15 * t8;
    t67 = 0.78466524484731389474e-14;
    t68 = cosP1_2 * t21;
    t86 = 0.59476566069964082315e-5 * t68;
    t87 = cosP1_4 * t16;
    t88 = 0.38922090799706635079e-7 * t87;
    t89 = t21 * sinP1_2;
    t90 = 0.22455438210088480058e-4 * t89;
    t91 = sinP1_4 * t16;
    t92 = 0.21768282741073040754e-7 * t91;
    t32 = t32 * (sinP1_12 * cosP2_3 - cosP1_12 * sinP2_3);
    t33 = t33 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2);
    t34 = t34 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1);
    t48 = t48 * (-cosP1_3 * sinP2_8 + sinP1_3 * cosP2_8);
    t49 = t49 * (-cosP1_7 * sinP2_8 + sinP1_7 * cosP2_8);
    t93 = cosP1_6 * t15;
    t50 = t10 * (t16 * (0.40654080480840440677e-10 * cosP1_4 * sinP2_5 - 0.39459858254536236117e-10 * cosP2_5 * sinP1_4) + 0.24752644084607247952e-6 * sinP2_5 * t3) + t2 * (-0.59711111315210228084e-12 * sinP1_9 * t9 - 0.27586533427627125376e-9 * sinP1_7 * t1) + t4 * ((t90 + t92) * cosP2_1 + (t3 * t60 - t86 + t88) * sinP2_1) + t5 * ((0.20450228268301119565e-2 * t2 - 0.32863084912329622814e-6 * t83 + 0.6809932823277096090e-6 * t81) * sinP1_1 - 0.29282711140091513199e-4 * t50 * cosP1_1) + t7 * (t17 * (0.65682222446731250896e-11 * cosP1_5 * sinP2_4 - 0.77624444709773296512e-11 * cosP2_4 * sinP1_5) - 0.12037760041146381982e-7 * sinP1_5 * t2) + (0.21634864233950335018e-4 * t3 - 0.42792963109233996793e-11 * t93) * t8 * sinP2_3 + (-0.36835545725907928862e-5 * t2 + t80) * t6 * sinP1_3 + 0.12539333376194147898e-9 * t85 * t3;
    t60 = sinP1_6 * t15;
    t80 = cosP1_8 * t14;
    t81 = (0.22570800077149466214e-9 * t60 - 0.35992530987223943043e-11 * sinP1_8 * t14) * cosP2_1 + (0.47934753250265988661e-11 * t80 + 0.27586533427627125374e-9 * t93) * sinP2_1;
    t85 = (-0.14603194351909619373e-10 * cosP2_7 * sinP1_2 + 0.15797416578213823934e-10 * cosP1_2 * sinP2_7) * t21 * t11;
    t94 = (-0.43867763112907780905e-9 * cosP1_5 * sinP2_2 - 0.1512681486651992443e-10 * cosP2_2 * sinP1_5) * t13 * t7;
    t26 = t50 + t4 * t81 - 0.38276353407186043648e-15 * t57 * (-cosP1_5 * sinP2_8 + sinP1_5 * cosP2_8) - 0.19178067083125923745e-22 * t58 * (sinP1_13 * cosP2_8 - cosP1_13 * sinP2_8) - 0.34520520749626662740e-21 * t26 * (sinP1_12 * cosP2_7 - cosP1_12 * sinP2_7) + 0.46027360999502216984e-20 * t27 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) + 0.14498618714843198353e-17 * t28 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) + 0.15078563463436926284e-15 * t29 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.11610493866846433239e-13 * t30 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - 0.29917784649676441040e-19 * t31 * (sinP1_13 * cosP2_4 - cosP1_13 * sinP2_4) - 0.17950670789805864624e-17 * t32 - 0.11847442721271870653e-15 * t33 - 0.82932099048903094570e-14 * t34 - 0.11712564142598929355e-12 * t48 - 0.10525997186976162002e-15 * t49 + t85 + t94 + t56 * t65;
    t27 = t20 * (-0.21055056482224898889e-8 * cosP2_6 * sinP1_1 + 0.18188923139094807941e-8 * cosP1_1 * sinP2_6) - 0.11942222263042045618e-11 * sinP1_1 * t22 * cosP2_8;
    t28 = (-0.3980740754347348538e-13 * cosP2_2 * sinP1_7 - 0.11544148187607310764e-11 * cosP1_7 * sinP2_2) * t13 * t1;
    t26 = t21 * (t10 * (0.13411115601396217230e-8 * cosP1_2 * sinP2_5 - 0.10162831145848780822e-8 * cosP2_5 * sinP1_2) + t8 * (0.70865146908891498711e-7 * cosP2_3 * sinP1_2 + 0.13518117912873073956e-6 * cosP1_2 * sinP2_3)) + t5 * t27 + t6 * ((-t52 + t54) * cosP1_3 + (t82 - t84) * sinP1_3) - t61 * t35 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + t62 * t37 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - t67 * t59 * (-cosP1_6 * sinP2_7 + sinP1_6 * cosP2_7) + t70 * t39 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + t71 * t51 * (cosP1_8 * sinP2_5 - sinP1_8 * cosP2_5) + t73 * t40 * (-cosP1_8 * sinP2_7 + sinP1_8 * cosP2_7) + t76 * t41 * (-cosP1_9 * sinP2_8 + sinP1_9 * cosP2_8) + t8 * (0.32244000110213523162e-9 * t87 * sinP2_3 + 0.54735185372276042411e-11 * t60 * cosP2_3) + t26 + t28;
    t24 = t38 * t53 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t63 * t25 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) - t64 * t24 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t66 * t55 * (-cosP1_4 * sinP2_7 + sinP1_4 * cosP2_7) - t72 * t47 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) + t74 * t44 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - t75 * t46 * (sinP1_12 * cosP2_5 - cosP1_12 * sinP2_5) - t77 * t43 * (sinP1_10 * cosP2_7 - cosP1_10 * sinP2_7) - t78 * t42 * (sinP1_11 * cosP2_8 - cosP1_11 * sinP2_8) - t79 * t45 * (sinP1_13 * cosP2_6 - cosP1_13 * sinP2_6) + t26 + 0.8598400029390272850e-10 * t91 * t69;
    t25 = t12 * t13 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2);
    t26 = t9 * t4 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1);
    t27 = t1 * t4 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1);
    t28 = t6 * t10 * (cosP1_3 * cosP2_5 - sinP1_3 * sinP2_5);
    t29 = t5 * t11 * (cosP1_1 * cosP2_7 - sinP1_1 * sinP2_7);
    t30 = t18 * t22 * (cosP1_12 * cosP2_8 + sinP1_12 * sinP2_8);
    t31 = t19 * t11 * (cosP1_11 * cosP2_7 + sinP1_11 * sinP2_7);
    t32 = -0.16719111168258863865e-10 * t22 * cosP2_8 - 0.46008318877261471938e-5 * t83;
    t33 = -0.26272888978692500360e-10 * t80 - 0.43335936148126975138e-6 * t87;
    t15 = -0.17260260374813331371e-19 * t31 - 0.44507743741875931558e-11 * t7 * t10 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + t32 * t3 + t33 * t2 - 0.61242165451497669834e-13 * t15 * t20 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) - 0.78466524484731389482e-15 * t1 * t11 * (cosP1_7 * cosP2_7 + sinP1_7 * sinP2_7) - 0.40197520137399525534e-8 * t6 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.56867725062104979136e-14 * t25 - 0.89753353949029323126e-16 * t19 * t8 * (cosP1_11 * cosP2_3 + sinP1_11 * sinP2_3) - 0.15557248017831749343e-17 * t18 * t17 * (cosP1_12 * cosP2_4 + sinP1_12 * sinP2_4) - 0.38148765562495423502e-12 * t26 + 0.25078666752388295798e-10 * t27 + 0.42604642225627332438e-3 * t5 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.17913333394563068427e-10 * t29 + 0.20301777847171477552e-10 * t28 + 0.22690222299779886673e-10 * t7 * t8 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) - 0.99725948832254803477e-21 * t30 - 0.10024759225691582861e-16 * t14 * t22 * (cosP1_8 * cosP2_8 + sinP1_8 * sinP2_8);
    t18 = (-0.1592296301738939414e-11 * t93 + 0.9079910431036128130e-7 * t68) * cosP2_2 + (0.39043614853455350937e-5 * t89 + 0.46176592750429243054e-10 * t60) * sinP2_2;
    t19 = (-0.23645600080823250324e-9 * sinP1_4 * sinP2_4 - 0.27944800095518386748e-9 * cosP1_4 * cosP2_4) * t17 * t16;
    t25 = t21 * (-0.24251897518793077258e-9 * sinP1_2 * sinP2_6 - 0.28073408642966531854e-9 * cosP1_2 * cosP2_6) * t20;
    t2 = 0.28630319575621567391e-1 * t3 * t2;
    t1 = t13 * t18 + 0.66345679239122475661e-14 * t14 * t17 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.48764074240755019606e-12 * t1 * t8 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.95298933659075524037e-9 * t7 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.10317363501932544893e-5 * t6 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.30906948905643335742e-5 * t5 * t8 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.35360920120867497078e-7 * t5 * t10 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) - 0.19000381831327152068e-11 * t6 * t11 * (cosP1_3 * cosP2_7 + sinP1_3 * sinP2_7) - 0.31068468674663996470e-19 * t23 * t10 * (cosP1_13 * cosP2_5 + sinP1_13 * sinP2_5) - 0.13779487226586975713e-13 * t16 * t22 * (cosP1_4 * cosP2_8 + sinP1_4 * sinP2_8) + 0.22093133279761064153e-18 * t12 * t20 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) + 0.66693646088278712416e-16 * t9 * t10 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + t15 + t19 + t25 + t2;
    bf[0] = t4 * ((t86 + t88) * cosP2_1 + (t90 - t92) * sinP2_1) + t5 * (t13 * (-0.29282711140091513199e-4 * sinP1_1 * sinP2_2 - 0.6809932823277096090e-6 * cosP1_1 * cosP2_2) - 0.32863084912329622814e-6 * t83 * cosP1_1) - 0.38276353407186043648e-15 * t57 * (cosP1_5 * cosP2_8 + sinP1_5 * sinP2_8) - 0.19178067083125923745e-22 * t58 * (cosP1_13 * cosP2_8 + sinP1_13 * sinP2_8) + t67 * t59 * (cosP1_6 * cosP2_7 + sinP1_6 * sinP2_7) + t36 - 0.70865146908891498711e-7 * t21 * sinP1_2 * t8 * sinP2_3;
    bf[1] = t24;
    bf[2] = t1;
}

static void idsbf_9_0_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4;
    t1 = 0.11297692439509283865e-2 * LegP1[37];
    t2 = 0.40756466231995973540e-8 * LegP1[43];
    t3 = -0.85588579087191544438e-6 * LegP1[41];
    t4 = 0.10270629490462985332e-4 * LegP1[39];
    bf[0] = t1 * sinP1_1 - t4 * sinP1_3 + t3 * sinP1_5 + t2 * sinP1_7;
    bf[1] = t1 * cosP1_1 + t4 * cosP1_3 + t3 * cosP1_5 - t2 * cosP1_7;
    bf[2] = 0.12226939869598792061e-6 * LegP1[42] * sinP1_6 - 0.22595384879018567730e-3 * LegP1[38] * sinP1_2;
}

static void idsbf_9_0_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4;
    t1 = 0.70153737538084509542e-3 * LegP1[56];
    t2 = 0.38664978801854337266e-8 * LegP1[62];
    t3 = -0.77329957603708674530e-7 * LegP1[60];
    t4 = 0.97435746580672929926e-5 * LegP1[58];
    bf[0] = t1 * sinP1_1 - t4 * sinP1_3 + t3 * sinP1_5 + t2 * sinP1_7;
    bf[1] = t1 * cosP1_1 + t4 * cosP1_3 + t3 * cosP1_5 - t2 * cosP1_7;
    bf[2] = -0.30931983041483469815e-7 * LegP1[61] * sinP1_6 + 0.15589719452907668787e-3 * LegP1[57] * sinP1_2;
}

static void idsbf_9_2_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[22];
    t2 = LegP2[3];
    t3 = LegP1[21];
    t4 = LegP2[4];
    t5 = LegP1[25];
    t6 = LegP1[24];
    t7 = LegP2[5];
    t8 = LegP1[26];
    t9 = LegP1[27];
    t10 = sinP1_2 * LegP1[23];
    t11 = -0.15534866518777719709e-3 * t10;
    t12 = 0.10356577679185146473e-4 * sinP1_4 * t5;
    t13 = sinP1_6 * t9;
    t14 = 0.16999433059268548505e-6 * t13;
    t15 = -0.12082673959049337552e-4 * cosP1_4 * t5;
    t9 = 0.84852813742385702928e-26 * cosP1_6 * t9;
    t16 = 0.43497626252577615187e-2 * t3;
    t17 = cosP1_5 * t8;
    t18 = cosP1_3 * t6;
    t19 = cosP1_1 * t1;
    t20 = sinP1_5 * t8;
    t21 = sinP1_3 * t6;
    t22 = sinP1_1 * t1;
    t1 = t2 * (0.50998299177805645510e-6 * t13 - 0.46604599556333159130e-3 * t10) + t7 * (t5 * (0.60413369795246687759e-5 * cosP1_4 * sinP2_2 + 0.51782888395925732365e-5 * cosP2_2 * sinP1_4) - 0.21748813126288807594e-2 * t3 * sinP2_2) + 0.17260962798641910787e-4 * t6 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.12427893215022175767e-2 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.20399319671122258202e-5 * t8 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1);
    bf[0] = t2 * (-0.30598979506683387306e-5 * t20 - 0.25891444197962866183e-4 * t21 + 0.18641839822533263651e-2 * t22) + t4 * ((t14 + t11 - t12) * cosP2_1 + (t15 + t9 + t16) * sinP2_1) + t7 * ((-0.25891444197962866182e-4 * t21 + 0.23537676543602605622e-6 * t20) * cosP2_2 + (-0.31069733037555439418e-3 * t19 + 0.27460622634203039890e-6 * t17 - 0.30206684897623343878e-4 * t18) * sinP2_2);
    bf[1] = t2 * (-0.30598979506683387306e-5 * t17 + 0.25891444197962866183e-4 * t18 + 0.18641839822533263651e-2 * t19) + t4 * ((t15 - t9 + t16) * cosP2_1 + (t14 + t11 + t12) * sinP2_1) + t7 * ((-0.23537676543602605622e-6 * t17 - 0.25891444197962866182e-4 * t18) * cosP2_2 + (0.30206684897623343878e-4 * t21 - 0.31069733037555439418e-3 * t22 + 0.27460622634203039890e-6 * t20) * sinP2_2);
    bf[2] = t1;
}

static void idsbf_9_2_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[37];
    t2 = LegP2[3];
    t3 = LegP1[36];
    t4 = LegP2[4];
    t5 = LegP1[43];
    t6 = LegP1[42];
    t7 = LegP1[40];
    t8 = LegP1[39];
    t9 = LegP2[5];
    t10 = LegP1[41];
    t11 = LegP1[38];
    t12 = LegP1[44] * t4;
    t13 = 0.48438456718776532303e-4 * cosP1_2 * t11;
    t14 = -0.17613984261373284473e-5 * cosP1_4 * t7;
    t15 = 0.78633858309702162826e-7 * cosP1_6 * t6;
    t16 = 0.40688303643772287135e-2 * t3;
    t11 = sinP1_2 * t11;
    t17 = -0.96876913437553064598e-4 * t11;
    t18 = 0.14678320217811070394e-6 * sinP1_4 * t7;
    t6 = sinP1_6 * t6;
    t19 = 0.80381277383251099776e-7 * t6;
    t20 = cosP1_5 * t10;
    t21 = cosP1_3 * t8;
    t22 = cosP1_1 * t1;
    t23 = sinP1_5 * t10;
    t24 = sinP1_3 * t8;
    t25 = sinP1_1 * t1;
    t26 = t2 * (-0.18347900272263837992e-7 * cosP1_7 * t5 - 0.11008740163358302795e-6 * t20 + 0.24219228359388266153e-4 * t21 + 0.10172075910943071784e-2 * t22) + t4 * ((t13 + t14 - t15 + t16) * cosP2_1 + (t17 + t18 + t19) * sinP2_1) + t9 * ((-0.22017480326716605590e-6 * t20 - 0.44034960653433211184e-5 * t21) * cosP2_2 + (-0.29063074031265919384e-3 * t25 + 0.25687060381169373190e-6 * t23 + 0.51374120762338746380e-5 * t24) * sinP2_2) + 0.43685476838723423790e-9 * t12 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1);
    t1 = t2 * (0.29063074031265919379e-3 * t11 - 0.73391601089055351962e-7 * t6) + t9 * (t7 * (-0.17613984261373284473e-5 * cosP2_2 * sinP1_4 - 0.20549648304935498552e-5 * cosP1_4 * sinP2_2) + 0.23250459225012735504e-2 * t3 * sinP2_2) + 0.87370953677446847582e-9 * t5 * t4 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.47704540707885978784e-6 * t10 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.80730761197960887174e-5 * t8 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.10172075910943071784e-2 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    bf[0] = t2 * (-0.11008740163358302795e-6 * t23 + 0.10172075910943071784e-2 * t25 - 0.24219228359388266153e-4 * t24 + 0.18347900272263837992e-7 * sinP1_7 * t5) + t4 * ((t17 - t18 + t19) * cosP2_1 + (-t13 + t14 + t15 + t16) * sinP2_1) + t9 * ((0.22017480326716605590e-6 * t23 - 0.44034960653433211184e-5 * t24) * cosP2_2 + (-0.51374120762338746380e-5 * t21 - 0.29063074031265919384e-3 * t22 + 0.25687060381169373190e-6 * t20) * sinP2_2) - 0.43685476838723423790e-9 * t12 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1);
    bf[1] = t26;
    bf[2] = t1;
}

static void idsbf_9_2_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[37];
    t2 = LegP2[3];
    t3 = LegP1[36];
    t4 = LegP2[4];
    t5 = LegP1[43];
    t6 = LegP1[42];
    t7 = LegP1[40];
    t8 = LegP1[39];
    t9 = LegP2[5];
    t10 = LegP1[44];
    t11 = LegP1[41];
    t12 = LegP1[38];
    t13 = t10 * t4;
    t14 = t5 * t9;
    t15 = 0.59192771856169532026e-4 * cosP1_2 * t12;
    t16 = 0.27332881665186508300e-5 * cosP1_4 * t7;
    t17 = 0.96092162104171318236e-7 * cosP1_6 * t6;
    t18 = -0.15220998477300736808e-2 * t3;
    t12 = sinP1_2 * t12;
    t19 = -0.25368330795501228012e-4 * t12;
    t20 = 0.33739025805464596180e-5 * sinP1_4 * t7;
    t6 = sinP1_6 * t6;
    t21 = 0.62536168988428953136e-7 * t6;
    t22 = cosP1_5 * t11;
    t23 = cosP1_3 * t8;
    t24 = cosP1_1 * t1;
    t25 = sinP1_5 * t11;
    t26 = sinP1_3 * t8;
    t27 = sinP1_1 * t1;
    t28 = t2 * (-0.91516344861115541177e-9 * cosP1_7 * t5 - 0.10992943344717198805e-2 * t24 - 0.19218432420834263648e-6 * t22 - 0.99935848588338170967e-5 * t23) + t4 * ((-t15 + t16 + t17 + t18) * cosP2_1 + (t19 - t20 + t21) * sinP2_1) + t9 * ((-0.21353813800926959608e-7 * t22 - 0.33311949529446056992e-5 * t23) * cosP2_2 + (0.85415255203707838436e-7 * t25 + 0.13324779811778422796e-4 * t26 - 0.50736661591002456030e-3 * t27) * sinP2_2) + 0.33047568977625056537e-9 * t13 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) - 0.34572841391976982224e-8 * t14 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    t1 = t2 * (0.21985886689434397614e-3 * t12 + 0.27454903458334662350e-7 * t6) + t9 * (t7 * (0.22207966352964037991e-5 * cosP1_4 * sinP2_2 + 0.55519915882410094978e-6 * cosP2_2 * sinP1_4) - 0.45662995431902210430e-2 * t3 * sinP2_2) + 0.43216051739971227778e-9 * t10 * t9 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) - 0.10575222072840018092e-7 * t5 * t4 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.46978390362039311138e-6 * t11 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.76873729683337054582e-5 * t8 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.33824441060668304020e-3 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1);
    bf[0] = t2 * (-0.10992943344717198805e-2 * t27 + 0.91516344861115541177e-9 * sinP1_7 * t5 - 0.19218432420834263648e-6 * t25 + 0.99935848588338170967e-5 * t26) + t4 * ((t19 + t20 + t21) * cosP2_1 + (t15 + t16 - t17 + t18) * sinP2_1) + t9 * ((0.21353813800926959608e-7 * t25 - 0.33311949529446056992e-5 * t26) * cosP2_2 + (0.85415255203707838436e-7 * t22 - 0.50736661591002456030e-3 * t24 - 0.13324779811778422796e-4 * t23) * sinP2_2) - 0.33047568977625056537e-9 * t13 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) - 0.34572841391976982224e-8 * t14 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    bf[1] = t28;
    bf[2] = t1;
}

static void idsbf_9_2_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[57];
    t2 = LegP2[4];
    t3 = LegP1[56];
    t4 = LegP2[5];
    t5 = LegP1[62];
    t6 = LegP1[61];
    t7 = LegP1[59];
    t8 = LegP1[58];
    t9 = LegP1[63];
    t10 = LegP1[60];
    t11 = LegP2[3];
    t12 = LegP1[55];
    t13 = t5 * t4;
    t14 = LegP1[64] * t4;
    t15 = t9 * t2;
    t16 = 0.33061066612275784138e-4 * cosP1_2 * t1;
    t17 = 0.17364005573674256374e-6 * cosP1_4 * t7;
    t18 = 0.19679206316830823891e-7 * cosP1_6 * t6;
    t19 = -0.14439907035067511599e-2 * t12;
    t1 = sinP1_2 * t1;
    t20 = -0.97238431212575835728e-6 * t1;
    t21 = 0.78138025081534153682e-6 * sinP1_4 * t7;
    t6 = sinP1_6 * t6;
    t22 = -0.12154803901571979461e-7 * t6;
    t23 = cosP1_5 * t10;
    t24 = cosP1_3 * t8;
    t25 = cosP1_1 * t3;
    t26 = sinP1_5 * t10;
    t27 = sinP1_3 * t8;
    t28 = sinP1_1 * t3;
    t29 = t11 * (-0.86820027868371281860e-9 * cosP1_7 * t5 - 0.94807470432261439804e-5 * t24 - 0.68261378711228236652e-3 * t25 - 0.17364005573674256372e-7 * t23) + t2 * ((-t16 + t17 + t18 + t19) * cosP2_1 + (-t21 + t22 + t20) * sinP2_1) + t4 * ((-0.85083627311003856244e-6 * t24 - 0.20258006502619965768e-7 * t23) * cosP2_2 + (0.81032026010479863074e-7 * t26 + 0.34033450924401542493e-5 * t27 - 0.48133023450225038672e-3 * t28) * sinP2_2) - 0.12058337203940455815e-10 * t14 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - 0.72350023223642734894e-10 * t13 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.31351676730245185122e-9 * t15 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1);
    t1 = t11 * (-0.69456022294697025492e-8 * t6 - 0.15169195269161830368e-3 * t1) + t4 * (t7 * (-0.24309607803143958922e-6 * cosP2_2 * sinP1_4 - 0.97238431212575835694e-6 * cosP1_4 * sinP2_2) + 0.48133023450225038668e-2 * t12 * sinP2_2) + 0.42541813655501928114e-5 * t8 * t2 * (cosP1_3 * sinP2_1 - sinP1_3 * cosP2_1) - 0.28879814070135023196e-3 * t3 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.48233348815761823262e-10 * t9 * t4 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.18811006038147111071e-8 * t5 * t2 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + 0.15917005109201401674e-6 * t10 * t2 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1);
    bf[0] = t11 * (-0.17364005573674256372e-7 * t26 - 0.68261378711228236652e-3 * t28 + 0.86820027868371281860e-9 * sinP1_7 * t5 + 0.94807470432261439804e-5 * t27) + t2 * ((t21 + t22 + t20) * cosP2_1 + (t16 + t17 - t18 + t19) * sinP2_1) + t4 * ((0.20258006502619965768e-7 * t26 - 0.85083627311003856244e-6 * t27) * cosP2_2 + (0.81032026010479863074e-7 * t23 - 0.48133023450225038672e-3 * t25 - 0.34033450924401542493e-5 * t24) * sinP2_2) - 0.72350023223642734894e-10 * t13 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + 0.12058337203940455815e-10 * t14 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) - 0.31351676730245185122e-9 * t15 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1);
    bf[1] = t29;
    bf[2] = t1;
}

static void idsbf_9_2_10_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[57];
    t2 = LegP2[4];
    t3 = LegP1[62];
    t4 = LegP2[5];
    t5 = LegP1[61];
    t6 = LegP1[59];
    t7 = LegP1[58];
    t8 = LegP1[63];
    t9 = LegP1[60];
    t10 = LegP2[3];
    t11 = LegP1[56];
    t12 = LegP1[64] * t4;
    t13 = t8 * t2;
    t14 = t3 * t4;
    t15 = -0.64574637940957646108e-9;
    t16 = 0.25072179424542488730e-4 * cosP1_2 * t1;
    t17 = -0.12053932415645427273e-5 * cosP1_4 * t6;
    t18 = 0.14923916324132433766e-7 * cosP1_6 * t5;
    t19 = 0.62053644075742659604e-2 * LegP1[55];
    t1 = sinP1_2 * t1;
    t20 = 0.87752627985898710548e-4 * t1;
    t21 = 0.60269662078227136360e-6 * sinP1_4 * t6;
    t5 = sinP1_6 * t5;
    t22 = -0.51659710352766116882e-8 * t5;
    t23 = cosP1_5 * t9;
    t24 = cosP1_3 * t7;
    t25 = sinP1_5 * t9;
    t26 = sinP1_3 * t7;
    t27 = 0.47733572365955892008e-3 * cosP2_2 * t4;
    t28 = -0.62487585642705894982e-3 * t10;
    t29 = t10 * (-0.34439806901844077922e-8 * cosP1_7 * t3 + 0.27551845521475262338e-6 * t23 + 0.57858875595098050906e-5 * t24) + t15 * t14 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t2 * ((-t16 + t17 + t18 + t19) * cosP2_1 + (t21 + t22 + t20) * sinP2_1) + t4 * (t7 * (0.50626516145710794546e-5 * cosP1_3 * cosP2_2 + 0.8437752690951799090e-6 * sinP1_3 * sinP2_2) + t9 * (-0.8609951725461019482e-8 * sinP1_5 * sinP2_2 - 0.51659710352766116890e-7 * cosP1_5 * cosP2_2)) + 0.11958266285362527056e-10 * t12 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - 0.71749597712175162340e-10 * t13 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + (t28 + t27) * t11 * cosP1_1;
    t1 = t10 * (0.41327768282212893504e-7 * t5 - 0.23143550238039220362e-4 * t1) - 0.10044943679704522728e-6 * t9 * t2 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.18080898623468140909e-5 * t7 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.11282480741044119927e-3 * t11 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.19133226056580043292e-9 * t8 * t4 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.10044943679704522728e-8 * t3 * t2 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + t6 * t4 * (-0.68879613803688155843e-7 * cosP1_4 * sinP2_2 + 0.41327768282212893508e-6 * sinP1_4 * cosP2_2);
    bf[0] = t10 * (0.34439806901844077922e-8 * sinP1_7 * t3 - 0.57858875595098050906e-5 * t26 + 0.27551845521475262338e-6 * t25) + t2 * ((-t21 + t22 + t20) * cosP2_1 + (t16 + t17 - t18 + t19) * sinP2_1) + t4 * ((0.51659710352766116890e-7 * t25 + 0.50626516145710794546e-5 * t26) * cosP2_2 + (-0.8437752690951799090e-6 * t24 - 0.8609951725461019482e-8 * t23) * sinP2_2) - 0.11958266285362527056e-10 * t12 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + 0.71749597712175162340e-10 * t13 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + t15 * t14 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + (t28 - t27) * t11 * sinP1_1;
    bf[1] = t29;
    bf[2] = t1;
}

static void idsbf_9_2_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[57];
    t2 = LegP2[4];
    t3 = LegP1[56];
    t4 = LegP2[5];
    t5 = LegP1[62];
    t6 = LegP1[61];
    t7 = LegP1[59];
    t8 = LegP1[58];
    t9 = LegP1[63];
    t10 = LegP1[60];
    t11 = LegP2[3];
    t12 = LegP1[55];
    t13 = t5 * t4;
    t14 = LegP1[64] * t4;
    t15 = t9 * t2;
    t16 = -0.12483231300417316721e-8;
    t17 = 0.58401082107215516826e-10;
    t18 = 0.36500676317009698015e-11;
    t19 = 0.27079413751473690841e-4 * cosP1_2 * t1;
    t20 = 0.71482924499231792590e-6 * cosP1_4 * t7;
    t21 = 0.16118698661591482645e-7 * cosP1_6 * t6;
    t22 = -0.34967764713859505130e-2 * t12;
    t1 = sinP1_2 * t1;
    t23 = 0.80060875439139607707e-4 * t1;
    t24 = 0.12614633735158551630e-6 * sinP1_4 * t7;
    t6 = sinP1_6 * t6;
    t25 = -0.19622763588024413655e-7 * t6;
    t26 = cosP1_5 * t10;
    t27 = cosP1_3 * t8;
    t28 = cosP1_1 * t3;
    t29 = sinP1_5 * t10;
    t30 = sinP1_3 * t8;
    t31 = sinP1_1 * t3;
    t32 = t11 * (0.79472192531498875292e-5 * t27 + 0.12397662034913824545e-2 * t28 - 0.87601623160823275232e-9 * cosP1_7 * t5 - 0.23827641499743930862e-6 * t26) + t16 * t13 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - t17 * t15 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) - t18 * t14 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t2 * ((t20 - t21 + t22 + t19) * cosP2_1 + (-t24 + t25 + t23) * sinP2_1) + t4 * ((0.61321136212576292660e-8 * t26 + 0.12877438604641021459e-5 * t27) * cosP2_2 + (-0.14569901964108127136e-3 * t31 + 0.12264227242515258533e-7 * t29 + 0.25754877209282042919e-5 * t30) * sinP2_2);
    t1 = t11 * (0.29784551874679913580e-7 * t6 - 0.20662770058189707574e-3 * t1) + t4 * (t7 * (0.36792681727545775600e-6 * cosP1_4 * sinP2_2 - 0.18396340863772887800e-6 * cosP2_2 * sinP1_4) - 0.16026892160518939849e-2 * t12 * sinP2_2) - 0.56065038822926896144e-7 * t10 * t2 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.82415607069702537338e-5 * t8 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.63577754025199100230e-3 * t3 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.13870257000463685246e-9 * t9 * t4 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.21024389558597586056e-8 * t5 * t2 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1);
    bf[0] = t11 * (0.87601623160823275232e-9 * sinP1_7 * t5 - 0.23827641499743930862e-6 * t29 - 0.79472192531498875292e-5 * t30 + 0.12397662034913824545e-2 * t31) + t2 * ((t24 + t25 + t23) * cosP2_1 + (t20 + t21 + t22 - t19) * sinP2_1) + t4 * ((0.12877438604641021459e-5 * t30 - 0.61321136212576292660e-8 * t29) * cosP2_2 + (-0.25754877209282042919e-5 * t27 + 0.12264227242515258533e-7 * t26 - 0.14569901964108127136e-3 * t28) * sinP2_2) + t16 * t13 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t18 * t14 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t17 * t15 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1);
    bf[1] = t32;
    bf[2] = t1;
}

static void idsbf_9_2_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[85];
    t2 = LegP2[3];
    t3 = LegP1[79];
    t4 = LegP1[78];
    t5 = LegP2[4];
    t6 = LegP1[83];
    t7 = LegP2[5];
    t8 = LegP1[81];
    t9 = LegP1[84];
    t10 = LegP1[82];
    t11 = LegP1[86];
    t12 = t1 * t7;
    t13 = LegP1[87] * t7;
    t14 = t11 * t5;
    t15 = -0.69893473914689725202e-10;
    t16 = 0.55914779131751780160e-10;
    t17 = 0.34946736957344862602e-11;
    t18 = sinP1_2 * LegP1[80];
    t19 = 0.50725887628325214964e-4 * t18;
    t20 = 0.18787365788268598136e-6 * sinP1_4 * t10;
    t21 = sinP1_6 * t9;
    t22 = -0.33548867479051068098e-8 * t21;
    t23 = 0.37574731576537196268e-6 * cosP1_4 * t10;
    t9 = 0.98994949366116653416e-28 * cosP1_6 * t9;
    t24 = -0.33479085834694641872e-2 * t4;
    t25 = cosP1_5 * t6;
    t26 = cosP1_3 * t8;
    t27 = cosP1_1 * t3;
    t28 = sinP1_5 * t6;
    t29 = sinP1_3 * t8;
    t30 = sinP1_1 * t3;
    t31 = t15 * t12 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) - t16 * t14 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) - t17 * t13 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t2 * (-0.83872168697627670243e-9 * cosP1_7 * t1 - 0.35226310853003621503e-7 * t25 + 0.76088831442487822432e-5 * t26 + 0.83697714586736604680e-3 * t27) + t5 * ((t23 + t9 + t24) * cosP2_1 + (t19 + t20 + t22) * sinP2_1) + t7 * ((0.58710518088339369170e-8 * t25 + 0.42271573023604345804e-6 * t26) * cosP2_2 + (-0.13949619097789434115e-3 * t30 + 0.11742103617667873833e-7 * t28 + 0.84543146047208691604e-6 * t29) * sinP2_2);
    t3 = t2 * (-0.10064660243715320429e-7 * t21 + 0.15217766288497564488e-3 * t18) + t7 * (t10 * (0.93936828941342990672e-7 * cosP2_2 * sinP1_4 - 0.18787365788268598135e-6 * cosP1_4 * sinP2_2) + 0.16739542917347320935e-2 * t4 * sinP2_2) + 0.50725887628325214960e-5 * t8 * t5 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.55798476391157736460e-3 * t3 * t5 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.27957389565875890080e-10 * t11 * t7 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) - 0.55914779131751780161e-9 * t1 * t5 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + 0.23484207235335747666e-7 * t6 * t5 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1);
    bf[0] = t2 * (0.83697714586736604680e-3 * t30 - 0.35226310853003621503e-7 * t28 + 0.83872168697627670243e-9 * sinP1_7 * t1 - 0.76088831442487822432e-5 * t29) + t5 * ((t19 - t20 + t22) * cosP2_1 + (t23 - t9 + t24) * sinP2_1) + t7 * ((-0.58710518088339369170e-8 * t28 + 0.42271573023604345804e-6 * t29) * cosP2_2 + (-0.84543146047208691604e-6 * t26 + 0.11742103617667873833e-7 * t25 - 0.13949619097789434115e-3 * t27) * sinP2_2) + t15 * t12 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t17 * t13 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t16 * t14 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1);
    bf[1] = t31;
    bf[2] = t3;
}

static void idsbf_9_4_5_4_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[11];
    t2 = LegP2[10];
    t3 = LegP1[10];
    t4 = LegP2[11];
    t5 = LegP2[13];
    t6 = LegP1[14];
    t7 = LegP1[13];
    t8 = LegP2[12];
    t9 = LegP1[12];
    t10 = LegP2[14];
    t11 = t9 * cosP1_2;
    t12 = t11 * t5;
    t13 = t7 * sinP1_3;
    t14 = t13 * t8;
    t9 = t9 * sinP1_2;
    t15 = t9 * t5;
    t16 = t7 * cosP1_3;
    t17 = t16 * t8;
    t18 = t1 * cosP1_1;
    t19 = t9 * t4;
    t20 = t3 * t4;
    t21 = t1 * sinP1_1;
    t22 = -0.18259875369741619354e-3;
    t23 = 0.30433125616236032256e-4;
    t24 = -0.26085536242488027648e-4;
    t25 = 0.27389813054612429032e-2;
    t26 = 0.65213840606220069132e-4 * t3 * t5;
    t16 = t10 * (t1 * (-0.22824844212177024193e-4 * cosP1_1 * cosP2_4 + 0.19564152181866020737e-4 * sinP1_1 * sinP2_4) + t7 * (0.46581314718728620801e-6 * sinP1_3 * sinP2_4 - 0.54344867171850057601e-6 * cosP1_3 * cosP2_4)) + t22 * (t21 * t8 * sinP2_2 + t19 * sinP2_1) + t23 * (t14 * sinP2_2 + t15 * sinP2_3) + t24 * (t17 * cosP2_2 + t12 * cosP2_3) + t25 * (t20 * cosP2_1 + t18 * t2) + t6 * (t4 * (0.19564152181866020736e-4 * sinP1_4 * sinP2_1 - 0.22824844212177024192e-4 * cosP1_4 * cosP2_1) + t5 * (0.46581314718728620802e-6 * sinP1_4 * sinP2_3 - 0.54344867171850057602e-6 * cosP1_4 * cosP2_3)) + 0.65213840606220069128e-4 * t16 * t2 + t26 * cosP2_3;
    t27 = -0.91299376848708096770e-3;
    t28 = 0.65213840606220069116e-5;
    t29 = 0.76082814040590080636e-5;
    t3 = 0.80740945512462942720e-5 * t7 * t5 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.10955925221844971613e-2 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + t28 * (t6 * sinP1_4 * t8 * cosP2_2 + t11 * t10 * sinP2_4) + t29 * (t6 * cosP1_4 * t8 * sinP2_2 + t9 * t10 * cosP2_4) + 0.26085536242488027650e-4 * t7 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.26085536242488027652e-4 * t1 * t5 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + t27 * (t3 * t8 * sinP2_2 + t9 * t2);
    bf[0] = t10 * (t1 * (-0.19564152181866020737e-4 * cosP1_1 * sinP2_4 - 0.22824844212177024193e-4 * cosP2_4 * sinP1_1) + t7 * (0.54344867171850057601e-6 * cosP2_4 * sinP1_3 + 0.46581314718728620801e-6 * cosP1_3 * sinP2_4)) + t6 * ((-0.22824844212177024192e-4 * t4 * sinP2_1 + 0.54344867171850057602e-6 * t5 * sinP2_3) * cosP1_4 + (-0.19564152181866020736e-4 * t4 * cosP2_1 + 0.46581314718728620802e-6 * t5 * cosP2_3) * sinP1_4) + t24 * (t14 * cosP2_2 + t12 * sinP2_3) - t23 * (t15 * cosP2_3 + t17 * sinP2_2) + t22 * (t18 * t8 * sinP2_2 + t19 * cosP2_1) + t25 * (t20 * sinP2_1 + t21 * t2) - 0.65213840606220069128e-4 * t13 * t2 - t26 * sinP2_3;
    bf[1] = t16;
    bf[2] = t3;
}

static void idsbf_9_4_5_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[24];
    t2 = LegP2[12];
    t3 = LegP1[23];
    t4 = LegP2[13];
    t5 = LegP1[22];
    t6 = LegP2[14];
    t7 = LegP1[27];
    t8 = LegP2[11];
    t9 = LegP1[26];
    t10 = LegP1[25];
    t11 = LegP2[10];
    t12 = LegP1[21];
    t13 = t7 * t8;
    t7 = t7 * t4;
    t14 = 0.21497601402798630276e-6;
    t15 = 0.39372896342122033468e-9;
    t16 = cosP1_5 * t9;
    t17 = cosP1_3 * t1;
    t18 = cosP1_1 * t5;
    t19 = sinP1_3 * t1;
    t20 = sinP1_5 * t9;
    t21 = cosP1_2 * t3;
    t22 = 0.65485001196217366064e-4 * t21;
    t23 = cosP1_4 * t10;
    t24 = -0.19182475097881854706e-5 * t23;
    t25 = 0.25003364093101176134e-2 * t12;
    t26 = sinP1_2 * t3;
    t27 = -0.10120409275779047482e-3 * t26;
    t28 = sinP1_4 * t10;
    t29 = 0.10583434536762402598e-5 * t28;
    t21 = -0.35435606707909830124e-5 * t21;
    t23 = 0.46145034512967023226e-6 * t23;
    t30 = 0.59531819269288514610e-4 * t12;
    t26 = 0.75123486220768839864e-5 * t26;
    t28 = 0.45987542927598535094e-6 * t28;
    t31 = sinP1_1 * t5;
    t32 = t11 * (0.11906363853857702922e-2 * t18 + 0.59531819269288514608e-4 * t17) - t14 * t13 * (cosP1_6 * cosP2_1 - sinP1_6 * sinP2_1) - t15 * t7 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t2 * ((-0.19843939756429504868e-5 * t17 - 0.33073232927382508114e-6 * t16) * cosP2_2 + (0.38585438415279592798e-6 * t20 + 0.23151263049167755680e-5 * t19 - 0.16668909395400784090e-3 * t31) * sinP2_2) + t4 * ((-t23 + t30 + t21) * cosP2_3 + (t26 + t28) * sinP2_3) + t6 * (t1 * (0.42522728049491796147e-6 * sinP1_3 * sinP2_4 - 0.49609849391073762171e-6 * cosP1_3 * cosP2_4) + t5 * (0.85045456098983592294e-5 * sinP1_1 * sinP2_4 - 0.99219698782147524342e-5 * cosP1_1 * cosP2_4)) + t8 * ((t24 + t25 + t22) * cosP2_1 + (t27 - t29) * sinP2_1);
    t1 = t2 * (t10 * (-0.15434175366111837121e-5 * cosP1_4 * sinP2_2 - 0.13229293170953003246e-5 * cosP2_2 * sinP1_4) + 0.10001345637240470454e-2 * sinP2_2 * t12) + t3 * (t6 * (-0.34018182439593436917e-5 * cosP1_2 * sinP2_4 - 0.39687879512859009737e-5 * cosP2_4 * sinP1_2) + 0.47625455415430811684e-3 * sinP1_2 * t11) + 0.83344546977003920444e-3 * t5 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.19843939756429504869e-4 * t5 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.42995202805597260544e-6 * t9 * t8 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.27639773232169667492e-5 * t1 * t4 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.78745792684244066934e-9 * t9 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.89297728903932771900e-5 * t1 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    bf[0] = t11 * (-0.59531819269288514608e-4 * t19 + 0.11906363853857702922e-2 * t31) + t2 * ((0.33073232927382508114e-6 * t20 - 0.19843939756429504868e-5 * t19) * cosP2_2 + (-0.16668909395400784090e-3 * t18 - 0.23151263049167755680e-5 * t17 + 0.38585438415279592798e-6 * t16) * sinP2_2) + t4 * ((-t26 + t28) * cosP2_3 + (t23 - t30 + t21) * sinP2_3) + t6 * ((0.49609849391073762171e-6 * t19 - 0.99219698782147524342e-5 * t31) * cosP2_4 + (0.42522728049491796147e-6 * t17 - 0.85045456098983592294e-5 * t18) * sinP2_4) + t8 * ((t27 + t29) * cosP2_1 + (t24 + t25 - t22) * sinP2_1) + t14 * t13 * (cosP1_6 * sinP2_1 + sinP1_6 * cosP2_1) + t15 * t7 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3);
    bf[1] = t32;
    bf[2] = t1;
}

static void idsbf_9_4_7_6_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[25];
    t2 = LegP2[11];
    t3 = LegP1[24];
    t4 = LegP2[12];
    t5 = LegP1[23];
    t6 = LegP2[13];
    t7 = LegP1[22];
    t8 = LegP2[14];
    t9 = LegP1[27];
    t10 = LegP1[26];
    t11 = LegP2[10];
    t12 = LegP1[21];
    t13 = t9 * t6;
    t14 = t10 * t8;
    t15 = -0.69776408933265084906e-5;
    t16 = 0.28178934376895515058e-6 * cosP1_6 * t9;
    t17 = -0.17258307061600476623e-5 * cosP1_4 * t1;
    t18 = -0.20600968639847305780e-2 * t12;
    t19 = 0.63583236542738598080e-6 * sinP1_4 * t1;
    t20 = sinP1_6 * t9;
    t21 = 0.29968073067492055698e-6 * t20;
    t22 = cosP1_5 * t10;
    t23 = cosP1_1 * t7;
    t24 = -0.11462284138656958157e-6 * sinP1_4;
    t25 = 0.86507804820052514395e-7 * cosP1_4;
    t26 = (0.85837369332697107414e-4 * cosP1_2 * sinP2_1 - 0.12262481333242443911e-4 * cosP2_1 * sinP1_2) * t5 * t2;
    t27 = (0.25411667665890426106e-6 * cosP1_3 * sinP2_4 + 0.44875923750402241846e-6 * cosP2_4 * sinP1_3) * t8 * t3;
    t28 = t1 * t6 * (t24 * cosP2_3 + t25 * sinP2_3);
    t29 = cosP1_3 * t3;
    t24 = t2 * ((-0.85837369332697107414e-4 * cosP1_2 * t5 + t16) * cosP2_1 + (-0.12262481333242443911e-4 * sinP1_2 * t5 + t19 + t21) * sinP2_1) + t4 * ((0.10294428773586249213e-4 * t29 + 0.93585716123511356490e-7 * t22) * cosP2_2 + (-0.31653992218246488230e-7 * t10 * sinP1_5 - 0.32699950221979850446e-4 * sinP1_1 * t7 - 0.34819391440071137052e-5 * sinP1_3 * t3) * sinP2_2) + t6 * (t1 * (-t25 * cosP2_3 + t24 * sinP2_3) + t5 * (0.16544617671835043378e-5 * sinP1_2 * sinP2_3 + 0.41848150581700403842e-5 * cosP1_2 * cosP2_3)) + t8 * (t3 * (-0.44875923750402241846e-6 * cosP1_3 * cosP2_4 + 0.25411667665890426106e-6 * sinP1_3 * sinP2_4) + t7 * (0.18296400719441106794e-4 * sinP1_1 * sinP2_4 - 0.32310665100289614126e-4 * cosP1_1 * cosP2_4));
    t24 = t11 * (t22 * t15 - 0.13624979259158271017e-4 * t29 - 0.98099850665939551310e-3 * t23) + 0.19169343113534363986e-8 * t14 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) - 0.76185850835841703022e-9 * t13 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t24 + 0.16349975110989925222e-3 * t12 * t6 * cosP2_3 + (t17 + t18) * t2 * cosP2_1;
    t25 = t8 * (0.80776662750724035320e-5 * cosP2_4 * sinP1_2 + 0.45741001798602766984e-5 * cosP1_2 * sinP2_4) + 0.24524962666484887828e-3 * sinP1_2 * t11;
    t1 = t4 * (t1 * (-0.69638782880142274102e-6 * cosP1_4 * sinP2_2 - 0.20588857547172498427e-5 * cosP2_2 * sinP1_4) - 0.22889965155385895313e-3 * sinP2_2 * t12) + t5 * t25 - 0.31948905189223939976e-9 * t9 * t8 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.21469664287158487661e-6 * t10 * t2 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.28115036566517067180e-6 * t3 * t6 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.18284604200602008723e-7 * t10 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.10899983407326616814e-4 * t3 * t2 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.58859910399563730794e-3 * t7 * t2 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.46714214602828357773e-4 * t7 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.11629401488877514152e-5 * t20 * t11;
    bf[0] = t2 * ((-t19 + t21) * cosP2_1 + (t17 + t18 - t16) * sinP2_1) + t3 * (t4 * (0.10294428773586249213e-4 * cosP2_2 * sinP1_3 + 0.34819391440071137052e-5 * cosP1_3 * sinP2_2) + 0.13624979259158271017e-4 * sinP1_3 * t11) + t6 * (t5 * (0.41848150581700403842e-5 * cosP1_2 * sinP2_3 - 0.16544617671835043378e-5 * cosP2_3 * sinP1_2) - 0.16349975110989925222e-3 * sinP2_3 * t12) + t7 * (t8 * (-0.32310665100289614126e-4 * cosP2_4 * sinP1_1 - 0.18296400719441106794e-4 * cosP1_1 * sinP2_4) - 0.98099850665939551310e-3 * sinP1_1 * t11) + 0.76185850835841703022e-9 * t13 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.19169343113534363986e-8 * t14 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + (-0.93585716123511356490e-7 * cosP2_2 * t4 + t11 * t15) * t10 * sinP1_5 + (-0.32699950221979850446e-4 * t23 - 0.31653992218246488230e-7 * t22) * t4 * sinP2_2 + t26 + t28 + t27;
    bf[1] = t24;
    bf[2] = t1;
}

static void idsbf_9_4_7_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[37];
    t2 = LegP2[10];
    t3 = LegP1[36];
    t4 = LegP2[11];
    t5 = LegP1[41];
    t6 = LegP1[39];
    t7 = LegP2[13];
    t8 = LegP1[43];
    t9 = LegP2[12];
    t10 = LegP1[40];
    t11 = LegP2[14];
    t12 = LegP1[38];
    t13 = LegP1[42];
    t14 = LegP1[44] * t4;
    t15 = t5 * t11;
    t16 = t8 * t11;
    t17 = t13 * t7;
    t18 = 0.53793835695270028156e-8 * cosP1_6 * t13;
    t19 = cosP1_2 * t12;
    t20 = 0.49705504182429506018e-4 * t19;
    t21 = cosP1_4 * t10;
    t22 = -0.61021520286121693480e-6 * t21;
    t23 = sinP1_2 * t12;
    t24 = 0.19117501608626733087e-4 * t23;
    t25 = sinP1_4 * t10;
    t26 = 0.40938488293220882968e-6 * t25;
    t27 = sinP1_6 * t13;
    t28 = 0.11356476424557005944e-7 * t27;
    t29 = 0.41839649985210021902e-7 * t8;
    t30 = 0.12745001072417822055e-4 * t6;
    t31 = -0.25103789991126013140e-6 * t5;
    t32 = -0.53529004504154852630e-3 * t1;
    t33 = t2 * (t32 * sinP1_1 + t30 * sinP1_3 + t31 * sinP1_5 + t29 * sinP1_7) + t4 * ((t24 + t26 + t28) * cosP2_1 + (-0.19270441621495746951e-2 * t3 + t18 + t20 + t22) * sinP2_1) + t7 * (t10 * (-0.45977637346384639444e-8 * cosP1_4 * sinP2_3 - 0.21701444827493549820e-7 * cosP2_3 * sinP1_4) - 0.15294001286901386468e-3 * t3 * sinP2_3) + (0.23770438508080858594e-6 * cosP1_3 * sinP2_4 + 0.41977582897249175818e-6 * cosP2_4 * sinP1_3) * t11 * t6 + (-0.87541421507516353516e-7 * cosP2_2 * sinP1_5 - 0.29609598451071707812e-7 * cosP1_5 * sinP2_2) * t9 * t5 + (-0.30588002573802772938e-4 * sinP2_2 * t9 - 0.99835841733939606098e-5 * sinP2_4 * t11) * t1 * cosP1_1;
    t18 = t11 * (t1 * (-0.17630584816844653843e-4 * cosP1_1 * cosP2_4 + 0.99835841733939606098e-5 * sinP1_1 * sinP2_4) + t6 * (-0.41977582897249175818e-6 * cosP1_3 * cosP2_4 + 0.23770438508080858594e-6 * sinP1_3 * sinP2_4)) + t4 * ((-t18 - t20 + t22) * cosP2_1 + (t24 - t26 + t28) * sinP2_1) + t7 * ((0.31255597868072277899e-5 * t19 + 0.45977637346384639444e-8 * t21) * cosP2_3 + (-0.21701444827493549820e-7 * t25 + 0.23365835299432673771e-5 * t23) * sinP2_3) + t9 * ((0.17508284301503270702e-5 * cosP1_3 * t6 + 0.87541421507516353516e-7 * cosP1_5 * t5) * cosP2_2 + (-0.59219196902143415614e-6 * t6 * sinP1_3 - 0.30588002573802772938e-4 * t1 * sinP1_1 - 0.29609598451071707812e-7 * t5 * sinP1_5) * sinP2_2) + 0.11494409336596159863e-10 * t16 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t18 = t2 * (t32 * cosP1_1 - t30 * cosP1_3 + t31 * cosP1_5 - t29 * cosP1_7) + t3 * (-0.19270441621495746951e-2 * cosP2_1 * t4 + 0.15294001286901386468e-3 * cosP2_3 * t7) - 0.71265337886896191149e-9 * t17 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + 0.68966456019576959178e-10 * t15 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.14942732137575007820e-8 * t14 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + t18;
    t3 = t10 * (0.70033137206013082810e-6 * cosP2_2 * sinP1_4 + 0.23687678760857366250e-6 * cosP1_4 * sinP2_2) + 0.24470402059042218351e-3 * sinP2_2 * t3;
    t2 = t12 * (t11 * (-0.50373099476699010978e-5 * cosP2_4 * sinP1_2 - 0.28524526209697030314e-5 * cosP1_2 * sinP2_4) - 0.15294001286901386465e-3 * sinP1_2 * t2) + t9 * t3 + 0.29885464275150015642e-8 * t8 * t4 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.50207579982252026276e-7 * t5 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.13149604281066006882e-6 * t6 * t7 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.45977637346384639446e-10 * t13 * t11 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.42759202732137714687e-8 * t5 * t7 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.50980004289671288220e-5 * t6 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.48176104053739367372e-3 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.38235003217253466168e-4 * t1 * t7 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.16735859994084008758e-6 * t27 * t2;
    bf[0] = -0.14942732137575007820e-8 * t14 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.68966456019576959178e-10 * t15 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.11494409336596159863e-10 * t16 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.71265337886896191149e-9 * t17 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t33 - 0.17630584816844653843e-4 * t1 * sinP1_1 * t11 * cosP2_4 + t12 * t7 * (0.31255597868072277899e-5 * cosP1_2 * sinP2_3 - 0.23365835299432673771e-5 * sinP1_2 * cosP2_3) + (0.59219196902143415614e-6 * cosP1_3 * sinP2_2 + 0.17508284301503270702e-5 * cosP2_2 * sinP1_3) * t9 * t6;
    bf[1] = t18;
    bf[2] = t2;
}

static void idsbf_9_4_9_8_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[39];
    t2 = LegP2[14];
    t3 = LegP1[41];
    t4 = LegP1[38];
    t5 = LegP2[11];
    t6 = LegP1[37];
    t7 = LegP2[12];
    t8 = LegP1[43];
    t9 = LegP1[42];
    t10 = LegP2[13];
    t11 = LegP2[10];
    t12 = LegP1[36];
    t13 = LegP1[44];
    t14 = LegP1[40];
    t15 = t3 * t2;
    t16 = t8 * t2;
    t17 = t9 * t10;
    t18 = t13 * t10;
    t19 = t8 * t7;
    t20 = t13 * t5;
    t21 = -0.22627645618473910620e-8;
    t22 = cosP1_4 * t14;
    t23 = cosP1_2 * t4;
    t24 = 0.14650030351808489328e-2 * t12;
    t25 = sinP1_6 * t9;
    t26 = sinP1_4 * t14;
    t27 = sinP1_2 * t4;
    t28 = sinP1_3 * t1;
    t29 = sinP1_1 * t6;
    t30 = 0.10548021853302112316e-3 * cosP1_1 * sinP2_2 * t6 - 0.21802402072388391527e-5 * t28 * cosP2_2;
    t31 = 0.29300060703616978652e-4 * t12;
    t32 = 0.30829188450775440502e-7 * t1 * cosP1_3 * t2 * sinP2_4;
    t30 = t11 * (-0.53202370926481045902e-8 * sinP1_7 * t8 + 0.73901264219122823926e-3 * t29 - 0.67182967471929839939e-5 * t28 + 0.11172497894561019640e-5 * sinP1_5 * t3) + t5 * ((0.19858930032451507758e-4 * t27 + 0.12648775604375295019e-7 * t25 - 0.90859784202125378270e-6 * t26) * cosP2_1 + (-0.36107145513548195934e-6 * t22 + t24 - 0.56725706749426810522e-8 * cosP1_6 * t9 - 0.52414553036470372930e-4 * t23) * sinP2_1) + t7 * t30 + 0.21580431915542808356e-8 * t15 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.10276396150258480169e-10 * t16 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.28773909220723744474e-9 * t17 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.74870886237597498376e-10 * t18 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t21 * t19 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) - 0.38169471415245783484e-10 * t20 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + t31 * t10 * sinP2_3 + t32;
    t24 = t4 * (0.19858930032451507758e-4 * sinP1_2 * sinP2_1 + 0.52414553036470372930e-4 * cosP1_2 * cosP2_1) + t24 * cosP2_1;
    t32 = t3 * t7 * (0.98653403042481409633e-8 * sinP1_5 * sinP2_2 - 0.13975898764351533031e-7 * cosP1_5 * cosP2_2);
    t15 = t10 * ((0.60227902557434900570e-5 * t23 - 0.4274980798507527752e-8 * t22 - t31) * cosP2_3 + (-0.10046204876492690214e-6 * t26 - 0.66739027158238673602e-5 * t27) * sinP2_3) + t11 * (0.67182967471929839939e-5 * t1 * cosP1_3 + 0.53202370926481045902e-8 * cosP1_7 * t8 + 0.11172497894561019640e-5 * cosP1_5 * t3 + 0.73901264219122823926e-3 * cosP1_1 * t6) + t2 * (t1 * (-0.19360730347086976638e-6 * cosP1_3 * cosP2_4 + 0.30829188450775440502e-7 * sinP1_3 * sinP2_4) + t6 * (0.33912107295852984560e-5 * sinP1_1 * sinP2_4 - 0.21296803381795674302e-4 * cosP1_1 * cosP2_4)) + t5 * t24 + 0.21580431915542808356e-8 * t15 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.10276396150258480169e-10 * t16 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.38169471415245783484e-10 * t20 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + t32;
    t15 = t21 * t19 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t5 * (t14 * (0.90859784202125378270e-6 * sinP1_4 * sinP2_1 - 0.36107145513548195934e-6 * cosP1_4 * cosP2_1) + t9 * (0.12648775604375295019e-7 * sinP1_6 * sinP2_1 + 0.56725706749426810522e-8 * cosP1_6 * cosP2_1)) + t7 * (t1 * (-0.21802402072388391527e-5 * cosP1_3 * cosP2_2 + 0.15389930874627099902e-5 * sinP1_3 * sinP2_2) + 0.10548021853302112316e-3 * t29 * sinP2_2) + 0.74870886237597498376e-10 * t18 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.28773909220723744474e-9 * t17 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t15;
    t12 = t14 * (0.36337336787313985877e-6 * cosP2_2 * sinP1_4 + 0.25649884791045166503e-6 * cosP1_4 * sinP2_2) + 0.94932196679719010856e-3 * sinP2_2 * t12;
    t16 = t2 * (0.42593606763591348604e-5 * cosP2_4 * sinP1_2 + 0.67824214591705969156e-6 * cosP1_2 * sinP2_4) - 0.14780252843824564787e-3 * sinP1_2 * t11;
    t5 = t4 * t16 + t7 * t12 - 0.12214230852878650714e-8 * t8 * t5 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + 0.97666869012056595548e-7 * t3 * t5 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.11542448155970324925e-5 * t1 * t10 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.30829188450775440508e-9 * t9 * t2 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.80566945818026484530e-8 * t3 * t10 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.65703166426292618804e-5 * t1 * t5 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.32555623004018865174e-3 * t6 * t5 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.65111246008037730340e-5 * t6 * t10 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.28284557023092388272e-9 * t13 * t7 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) - 0.15960711277944313769e-6 * t25 * t11;
    bf[0] = t10 * (t14 * (0.4274980798507527752e-8 * cosP1_4 * sinP2_3 - 0.10046204876492690214e-6 * cosP2_3 * sinP1_4) + t4 * (0.66739027158238673602e-5 * cosP2_3 * sinP1_2 + 0.60227902557434900570e-5 * cosP1_2 * sinP2_3)) + t2 * (t6 * (-0.33912107295852984560e-5 * cosP1_1 * sinP2_4 - 0.21296803381795674302e-4 * cosP2_4 * sinP1_1) + 0.19360730347086976638e-6 * t28 * cosP2_4) + t7 * (t3 * (0.13975898764351533031e-7 * cosP2_2 * sinP1_5 + 0.98653403042481409633e-8 * cosP1_5 * sinP2_2) - 0.15389930874627099902e-5 * t1 * cosP1_3 * sinP2_2) + t30;
    bf[1] = t15;
    bf[2] = t5;
}

static void idsbf_9_4_9_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t5, t6, t7, t8, t9;
    t1 = LegP1[60];
    t2 = LegP2[10];
    t3 = LegP1[58];
    t4 = LegP1[62];
    t5 = LegP1[55];
    t6 = LegP2[13];
    t7 = LegP1[56];
    t8 = LegP2[11];
    t9 = LegP1[63];
    t10 = LegP2[12];
    t11 = LegP1[61];
    t12 = LegP1[59];
    t13 = LegP1[57];
    t14 = LegP2[14];
    t15 = LegP1[64];
    t16 = LegP1[65] * t6;
    t17 = t15 * t10;
    t18 = t9 * t8;
    t19 = t1 * t14;
    t20 = t4 * t14;
    t21 = t11 * t6;
    t22 = t9 * t6;
    t23 = t4 * t10;
    t24 = cosP1_4 * t12;
    t25 = 0.16044143273528203888e-6 * t24;
    t26 = 0.28745756698404698639e-8 * cosP1_6 * t11;
    t27 = 0.13898239110693806618e-2 * t5;
    t28 = sinP1_2 * t13;
    t29 = -0.89847202331757941847e-6 * t28;
    t30 = sinP1_4 * t12;
    t31 = 0.35898770574519356204e-6 * t30;
    t32 = cosP1_2 * t13;
    t33 = 0.22461800582939485446e-5 * t32;
    t24 = 0.37436334304899142406e-7 * t24;
    t34 = 0.27796478221387613230e-4 * t5;
    t30 = -0.53814730563292517210e-7 * t30;
    t28 = 0.28638795743247843942e-5 * t28;
    t35 = sinP2_2 * t10;
    t36 = sinP1_5 * t1;
    t37 = t2 * (0.10094440142928161612e-6 * t36 - 0.50472200714640808058e-8 * sinP1_7 * t4) + t3 * ((-0.39308151020144099527e-6 * t35 + 0.29247136175702455000e-7 * sinP2_4 * t14) * cosP1_3 + (-0.63735359154090789938e-5 * t2 + 0.18367201518341141744e-6 * cosP2_4 * t14 - 0.55686547278537474329e-6 * cosP2_2 * t10) * sinP1_3) + t6 * ((t28 + t30) * cosP2_3 + (t33 - t24 + t34) * sinP2_3) + t7 * (t14 * (-0.21057938046505767600e-5 * cosP1_1 * sinP2_4 - 0.13224385093205622055e-4 * cosP2_4 * sinP1_1) + 0.45889458590945368754e-3 * sinP1_1 * t2) + t8 * ((t29 - t31) * cosP2_1 + (t27 + t25 + t26) * sinP2_1) + t1 * (0.93590835762247856017e-8 * cosP1_5 * sinP2_2 + 0.13258701732985112935e-7 * cosP2_2 * sinP1_5) * t10;
    t38 = 0.27297327097322291340e-9;
    t39 = -0.47352506189232546198e-10;
    t40 = 0.36210740027060182388e-10;
    t41 = 0.97490453919008183352e-11;
    t42 = 0.78920843648720910332e-11;
    t43 = 0.23212012837859091274e-12;
    t44 = 0.46424025675718182546e-12;
    t45 = 0.19498090783801636669e-9;
    t46 = sinP1_6 * t11;
    t24 = t10 * ((-0.13258701732985112935e-7 * t1 * cosP1_5 - 0.55686547278537474329e-6 * t3 * cosP1_3) * cosP2_2 + (0.93590835762247856017e-8 * t36 + 0.10006732159699540765e-3 * sinP1_1 * t7 + 0.39308151020144099527e-6 * sinP1_3 * t3) * sinP2_2) + t2 * (0.45889458590945368754e-3 * t7 * cosP1_1 + 0.10094440142928161612e-6 * t1 * cosP1_5 + 0.63735359154090789938e-5 * t3 * cosP1_3 + 0.50472200714640808058e-8 * t4 * cosP1_7) + t6 * ((t33 + t24 - t34) * cosP2_3 - t28 * sinP2_3) + t8 * ((0.29986503778224213067e-4 * t32 + t27 + t25 - t26) * cosP2_1 + (t29 + t31 + 0.37436334304899142411e-8 * t46) * sinP2_1) + t7 * t14 * (0.21057938046505767600e-5 * sinP1_1 * sinP2_4 - 0.13224385093205622055e-4 * cosP1_1 * cosP2_4);
    t24 = -t38 * t21 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t39 * t23 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t40 * t18 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + t41 * t20 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - t42 * t17 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t43 * t16 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t44 * t22 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t45 * t19 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t24 + t3 * t14 * (-0.18367201518341141744e-6 * cosP1_3 * cosP2_4 + 0.29247136175702455000e-7 * sinP1_3 * sinP2_4) + t30 * t6 * sinP2_3;
    t5 = t12 * (-0.11230900291469742722e-6 * cosP1_4 * sinP2_2 - 0.15910442079582135522e-6 * cosP2_2 * sinP1_4) - 0.10006732159699540765e-2 * sinP2_2 * t5;
    t12 = t14 * (-0.29387522429345826788e-5 * cosP2_4 * sinP1_2 - 0.46795417881123928002e-6 * cosP1_2 * sinP2_4) + 0.10197657464654526390e-3 * sinP1_2 * t2;
    t2 = 0.40377760571712646450e-7 * t46 * t2;
    t1 = t10 * t5 + t13 * t12 + 0.46424025675718182542e-12 * t15 * t6 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) - 0.31568337459488364132e-10 * t9 * t10 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.21726444016236109430e-9 * t4 * t8 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.33091045501651920521e-7 * t1 * t8 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + 0.63875745407734161730e-6 * t3 * t6 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.77992363135206546682e-10 * t11 * t14 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.27297327097322291340e-8 * t1 * t6 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.36360039693633292060e-5 * t3 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.27796478221387613234e-3 * t7 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.55592956442775226464e-5 * t7 * t6 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + t2;
    bf[0] = t8 * (0.37436334304899142411e-8 * sinP1_6 * cosP2_1 * t11 - 0.29986503778224213067e-4 * t32 * sinP2_1) - t43 * t16 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t42 * t17 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) - t40 * t18 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + t45 * t19 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t41 * t20 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t38 * t21 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t44 * t22 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t39 * t23 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t37 + 0.10006732159699540765e-3 * t35 * t7 * cosP1_1;
    bf[1] = t24;
    bf[2] = t1;
}

static void idsbf_9_4_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t5, t6, t7, t8, t9;
    t1 = LegP1[64];
    t2 = LegP2[14];
    t3 = LegP1[63];
    t4 = LegP2[13];
    t5 = LegP1[62];
    t6 = LegP2[12];
    t7 = LegP1[61];
    t8 = LegP2[11];
    t9 = LegP1[60];
    t10 = LegP2[10];
    t11 = LegP1[58];
    t12 = LegP1[55];
    t13 = LegP1[56];
    t14 = LegP1[59];
    t15 = LegP1[57];
    t16 = LegP1[65];
    t17 = t16 * t4;
    t18 = t1 * t6;
    t19 = t3 * t8;
    t20 = t9 * t2;
    t21 = t5 * t2;
    t22 = t7 * t4;
    t23 = t1 * t2;
    t24 = t3 * t4;
    t25 = t5 * t6;
    t26 = cosP1_2 * t15;
    t27 = 0.28591009534808394909e-4 * t26;
    t28 = cosP1_4 * t14;
    t29 = 0.59124800348868082566e-6 * t28;
    t30 = 0.27408003611484773082e-8 * cosP1_6 * t7;
    t31 = sinP1_2 * t15;
    t32 = -0.24029297901164808307e-4 * t31;
    t33 = sinP1_4 * t14;
    t34 = 0.88037057181820392026e-6 * t33;
    t35 = sinP1_6 * t7;
    t36 = -0.33909437026302091331e-8 * t35;
    t37 = cosP1_5 * t9;
    t38 = cosP1_1 * t13;
    t39 = sinP1_5 * t9;
    t40 = sinP1_3 * t11;
    t41 = (-0.16490694638054280210e-5 * t40 + 0.78527117324068001000e-8 * t39) * cosP2_2 + (-0.90463239157326337146e-4 * t38 + 0.51161606741438243076e-8 * t37) * sinP2_2;
    t42 = (-0.10708243271463818320e-7 * cosP1_3 * sinP2_4 + 0.48187094721587182432e-7 * cosP2_4 * sinP1_3) * t11 * t2;
    t43 = t14 * t4 * (-0.24093547360793591214e-7 * cosP1_4 * sinP2_3 + 0.8923536059553181934e-9 * sinP1_4 * cosP2_3);
    t41 = t6 * t41 + t8 * ((t32 + t34 + t36) * cosP2_1 + (t27 + t29 - t30) * sinP2_1) + 0.26558143034384470036e-13 * t17 * (-sinP1_10 * cosP2_3 + cosP1_10 * sinP2_3) - 0.70821714758358586756e-12 * t18 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + 0.10623257213753787988e-11 * t19 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.10113340867493606188e-8 * t20 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - 0.37181400248138258044e-11 * t21 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - 0.52053960347393561269e-10 * t22 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.61969000413563763416e-12 * t23 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.10092094353066098614e-10 * t24 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + 0.24221026447358636670e-9 * t25 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t42 + t43;
    t42 = sinP1_1 * t13;
    t43 = t11 * cosP1_3;
    t26 = (0.24093547360793591214e-7 * t28 + 0.75671585785010982772e-6 * t26) * cosP2_3 + (0.8923536059553181934e-9 * t33 - 0.34659014055304558625e-5 * t31) * sinP2_3;
    t20 = t2 * ((-0.75171867765676004594e-5 * t38 - 0.48187094721587182432e-7 * t43) * cosP2_4 + (-0.10708243271463818320e-7 * t40 - 0.16704859503483556582e-5 * t42) * sinP2_4) + t4 * t26 + t6 * ((-0.78527117324068001000e-8 * t37 - 0.16490694638054280210e-5 * t43) * cosP2_2 + (0.10743937415702031046e-5 * t40 - 0.90463239157326337146e-4 * t42 + 0.51161606741438243076e-8 * t39) * sinP2_2) + t8 * ((-t27 + t29 + t30) * cosP2_1 + (t32 - t34 + t36) * sinP2_1) + 0.10113340867493606188e-8 * t20 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + 0.37181400248138258044e-11 * t21 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.61969000413563763416e-12 * t23 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.52053960347393561269e-10 * t22 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t17 = t10 * (-0.27739449236553891262e-6 * t37 - 0.51399567703026327926e-5 * t43 - 0.80183325616721071558e-3 * t38 - 0.10198326925203636494e-8 * cosP1_7 * t5) + t12 * (-0.30107296782047671586e-3 * cosP2_1 * t8 - 0.17880624614690283830e-3 * cosP2_3 * t4) + 0.10092094353066098614e-10 * t24 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.24221026447358636670e-9 * t25 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.26558143034384470036e-13 * t17 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + 0.70821714758358586756e-12 * t18 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - 0.10623257213753787988e-11 * t19 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + t20;
    t18 = t2 * (0.12528644627612667431e-5 * cosP2_4 * sinP1_2 - 0.27841432505805927632e-6 * cosP1_2 * sinP2_4) + 0.13363887602786845260e-3 * sinP1_2 * t10;
    t14 = t14 * (0.23558135197220400298e-6 * cosP2_2 * sinP1_4 + 0.15348482022431472922e-6 * cosP1_4 * sinP2_2) - 0.99509563073058970856e-3 * sinP2_2 * t12;
    t19 = 0.34674311545692364080e-7 * t35 * t10;
    t1 = t15 * t18 + t6 * t14 + 0.61969000413563763414e-13 * t16 * t2 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) - 0.10623257213753788014e-11 * t1 * t4 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) - 0.26912251608176262968e-10 * t3 * t6 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.38243725969513636756e-10 * t5 * t8 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.98107905020458983056e-7 * t9 * t8 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.32481671256773582229e-6 * t11 * t4 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.12641676084367007736e-9 * t7 * t2 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.16657267311165939604e-8 * t9 * t4 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.40477159566133233243e-5 * t11 * t8 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.54740539603723039242e-4 * t13 * t8 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.32510226572164152418e-4 * t13 * t4 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + t19;
    bf[0] = t10 * (-0.80183325616721071558e-3 * t42 - 0.27739449236553891262e-6 * t39 + 0.51399567703026327926e-5 * t40 + 0.10198326925203636494e-8 * sinP1_7 * t5) + t4 * (t15 * (0.75671585785010982772e-6 * cosP1_2 * sinP2_3 + 0.34659014055304558625e-5 * cosP2_3 * sinP1_2) + 0.17880624614690283830e-3 * t12 * sinP2_3) + t41 - 0.10743937415702031046e-5 * t11 * cosP1_3 * t6 * sinP2_2 + t13 * t2 * (0.16704859503483556582e-5 * cosP1_1 * sinP2_4 - 0.75171867765676004594e-5 * sinP1_1 * cosP2_4) - 0.30107296782047671586e-3 * t12 * t8 * sinP2_1;
    bf[1] = t17;
    bf[2] = t1;
}

static void idsbf_9_4_11_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t6, t7, t8, t9;
    t1 = LegP1[85];
    t2 = LegP2[12];
    t3 = LegP1[84];
    t4 = LegP2[11];
    t5 = LegP1[82];
    t6 = LegP1[81];
    t7 = LegP1[80];
    t8 = LegP2[13];
    t9 = LegP1[79];
    t10 = LegP2[14];
    t11 = LegP1[88];
    t12 = LegP1[87];
    t13 = LegP1[86];
    t14 = LegP1[83];
    t15 = LegP1[78];
    t16 = LegP2[10];
    t17 = t1 * t2;
    t18 = LegP1[89] * t10;
    t19 = t11 * t8;
    t20 = t12 * t2;
    t21 = t13 * t4;
    t22 = t14 * t10;
    t23 = t1 * t10;
    t24 = t3 * t8;
    t25 = t12 * t10;
    t26 = t13 * t8;
    t27 = cosP1_2 * t7;
    t28 = 0.14640373485135788796e-4 * t27;
    t29 = cosP1_4 * t5;
    t30 = 0.25972651374190474962e-7 * t29;
    t31 = 0.29048360089555136502e-8 * cosP1_6 * t3;
    t32 = -0.28825542080397607685e-3 * t15;
    t33 = sinP1_2 * t7;
    t34 = -0.10272867109317969449e-4 * t33;
    t35 = sinP1_4 * t5;
    t36 = 0.30278643575701001104e-6 * t35;
    t37 = sinP1_6 * t3;
    t38 = -0.29658619755302093146e-8 * t37;
    t39 = cosP1_3 * t6;
    t40 = cosP1_1 * t9;
    t41 = cosP1_5 * t14;
    t42 = sinP1_5 * t14;
    t43 = sinP1_3 * t6;
    t27 = -0.29731850915191727964e-6 * t27;
    t29 = 0.13897646787944026090e-7 * t29;
    t44 = 0.17119394709719705974e-3 * t15;
    t33 = 0.22965291741389472620e-5 * t33;
    t35 = -0.83158050452451959393e-8 * t35;
    t45 = sinP1_1 * t9;
    t46 = t10 * ((0.46135630730469922672e-7 * t43 - 0.50749193803516914942e-5 * t45) * cosP2_4 + (0.11277598623003758878e-5 * t40 - 0.10252362384548871704e-7 * t39) * sinP2_4) + t16 * (0.49211339445834584182e-5 * t43 + 0.97641546519513063864e-9 * sinP1_7 * t1 - 0.41009449538195486826e-7 * t42) + t2 * ((0.75183990820025059172e-8 * t42 - 0.54132473390418042604e-6 * t43) * cosP2_2 + (0.48983509170622387036e-8 * t41 - 0.35268126602848118664e-6 * t39 - 0.86611957424668868170e-4 * t40) * sinP2_2) + t4 * ((t34 + t36 + t38) * cosP2_1 + (t32 + t28 + t30 - t31) * sinP2_1) + t8 * ((t33 + t35) * cosP2_3 + (t27 - t29 + t44) * sinP2_3);
    t47 = 0.49837872702668126340e-10;
    t48 = 0.35598480501905804532e-11;
    t49 = 0.10170994429115944127e-11;
    t50 = 0.67806629527439627682e-12;
    t51 = 0.25427486072789860380e-13;
    t52 = -0.84758286909299534602e-14;
    t53 = 0.14126381151549922433e-14;
    t54 = 0.14951361810800437902e-9;
    t27 = t10 * ((-0.46135630730469922672e-7 * t39 - 0.50749193803516914942e-5 * t40) * cosP2_4 + (-0.10252362384548871704e-7 * t43 - 0.11277598623003758878e-5 * t45) * sinP2_4) + t16 * (-0.97641546519513063864e-9 * t1 * cosP1_7 - 0.54132473390418042598e-3 * t40) + t2 * ((-0.75183990820025059172e-8 * t41 - 0.54132473390418042604e-6 * t39) * cosP2_2 + (-0.86611957424668868170e-4 * t45 + 0.48983509170622387036e-8 * t42 + 0.35268126602848118664e-6 * t43) * sinP2_2) + t4 * ((t32 - t28 + t30 + t31) * cosP2_1 + (t34 - t36 + t38) * sinP2_1) + t8 * ((t27 + t29) * cosP2_3 + (-t33 + t35) * sinP2_3) + 0.13561325905487925536e-10 * t17 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + 0.30512983287347832454e-12 * t26 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t27 = t16 * (-0.41009449538195486826e-7 * t41 - 0.49211339445834584182e-5 * t39) + t47 * t24 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) + t48 * t23 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - t49 * t21 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + t50 * t20 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t51 * t19 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t52 * t25 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - t53 * t18 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) + t54 * t22 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t27 - t44 * t8 * cosP2_3;
    t28 = t10 * (-0.92271261460939845339e-6 * cosP2_4 * sinP1_2 + 0.20504724769097743413e-6 * cosP1_2 * sinP2_4) - 0.98422678891669168357e-4 * sinP1_2 * t16;
    t5 = t5 * (-0.78373614672995819248e-7 * cosP1_4 * sinP2_2 - 0.12029438531204009467e-6 * cosP2_2 * sinP1_4) + 0.10393434890960264179e-2 * sinP2_2 * t15;
    t15 = -0.11716985582341567663e-7 * t37 * t16;
    t1 = t2 * t5 + t7 * t28 + 0.19992106649870299822e-6 * t6 * t8 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) + 0.42718176602286965434e-10 * t3 * t10 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.69773021783735376876e-9 * t14 * t8 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.24913240594453758242e-5 * t6 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.48042570133996012810e-4 * t9 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.28532324516199509956e-4 * t9 * t8 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.56505524606199689732e-14 * t11 * t10 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) + 0.15256491643673916227e-12 * t12 * t8 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) + 0.54245303621951702136e-11 * t13 * t2 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) - 0.10170994429115944126e-10 * t1 * t4 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) + 0.41094885891400060744e-7 * t14 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + t15;
    bf[0] = 0.13561325905487925536e-10 * t17 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t53 * t18 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) - t51 * t19 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) - t50 * t20 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t49 * t21 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + t54 * t22 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) - t48 * t23 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t47 * t24 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t52 * t25 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.30512983287347832454e-12 * t26 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t46 - 0.54132473390418042598e-3 * t45 * t16;
    bf[1] = t27;
    bf[2] = t1;
}

static void idsbf_9_4_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t6, t7, t8, t9;
    t1 = LegP1[78];
    t2 = LegP2[13];
    t3 = LegP1[79];
    t4 = LegP2[10];
    t5 = LegP2[11];
    t6 = LegP1[85];
    t7 = LegP1[81];
    t8 = LegP1[83];
    t9 = LegP2[14];
    t10 = LegP1[84];
    t11 = LegP1[87];
    t12 = LegP1[86];
    t13 = LegP2[12];
    t14 = LegP1[82];
    t15 = LegP1[80];
    t16 = LegP1[88];
    t17 = t6 * t9;
    t18 = t10 * t2;
    t19 = t11 * t9;
    t20 = t12 * t2;
    t21 = t6 * t13;
    t22 = LegP1[89] * t9;
    t23 = t16 * t2;
    t24 = t11 * t13;
    t25 = t12 * t5;
    t26 = t8 * t9;
    t27 = -0.24801653867308447344e-2 * t1;
    t28 = cosP1_2 * t15;
    t29 = 0.11149594645643158148e-4 * t28;
    t30 = cosP1_4 * t14;
    t31 = 0.22023890658060559304e-6 * t30;
    t32 = 0.22122211598498329658e-8 * cosP1_6 * t10;
    t33 = sinP1_4 * t14;
    t34 = 0.13764931661287849564e-7 * t33;
    t35 = sinP1_6 * t10;
    t36 = -0.29769395854769357194e-8 * t35;
    t37 = sinP1_2 * t15;
    t38 = 0.38404159334993100284e-4 * t37;
    t39 = cosP1_5 * t8;
    t40 = cosP1_3 * t7;
    t41 = cosP1_1 * t3;
    t42 = t8 * sinP1_5;
    t43 = t7 * sinP1_3;
    t28 = -0.12781722256910146024e-6 * t28;
    t30 = 0.91766211075252330436e-8 * t30;
    t44 = 0.59051556826924874632e-4 * t1;
    t37 = 0.52110098432018287640e-6 * t37;
    t33 = 0.75379387668957271432e-8 * t33;
    t45 = 0.23897450800846961048e-9 * t6;
    t46 = -0.81729281738896606784e-7 * t8;
    t47 = t13 * ((0.31200511765585792350e-6 * t43 - 0.11470776384406541303e-8 * t42) * cosP2_2 + (0.22941552768813082608e-8 * t39 - 0.59051556826924874634e-4 * t41 - 0.62401023531171584698e-6 * t40) * sinP2_2) + t2 * ((t37 + t33) * cosP2_3 + (t28 - t30 + t44) * sinP2_3) + t3 * (t9 * (-0.94633905171353965752e-6 * cosP2_4 * sinP1_1 + 0.47316952585676982876e-6 * cosP1_1 * sinP2_4) + 0.11923872051590599685e-2 * sinP1_1 * t4) + t4 * (t46 * sinP1_5 + t45 * sinP1_7) + t5 * ((t34 + t36 + t38) * cosP2_1 + (t31 + t32 + t27 - t29) * sinP2_1) + (-0.56780343102812379456e-5 * t4 + 0.45063764367311412266e-8 * cosP2_4 * t9) * t7 * sinP1_3;
    t48 = -0.79658169336156536830e-10;
    t49 = 0.27311372343825098343e-10;
    t50 = 0.68278430859562745860e-11;
    t51 = -0.25035424648506340146e-11;
    t52 = 0.42674019287226716160e-12;
    t53 = 0.18966230794322984959e-12;
    t54 = -0.85686721267209199908e-13;
    t55 = 0.54189230840922814168e-14;
    t56 = 0.16934134637788379430e-15;
    t57 = 0.14594514596231536925e-9;
    t58 = sinP1_1 * t3;
    t27 = t13 * ((0.31200511765585792350e-6 * t40 + 0.11470776384406541303e-8 * t39) * cosP2_2 + (-0.59051556826924874634e-4 * t58 + 0.22941552768813082608e-8 * t42 + 0.62401023531171584698e-6 * t43) * sinP2_2) + t2 * ((t28 + t30 - t44) * cosP2_3 + (-t37 + t33) * sinP2_3) + t4 * (t46 * cosP1_5 - t45 * cosP1_7 + 0.56780343102812379456e-5 * t40 + 0.11923872051590599685e-2 * t41) + t5 * ((t31 - t32 + t27 + t29) * cosP2_1 + (-t34 + t36) * sinP2_1) + t9 * ((-0.45063764367311412266e-8 * t40 - 0.94633905171353965752e-6 * t41) * cosP2_4 + (-0.47316952585676982876e-6 * t58 - 0.22531882183655706134e-8 * t43) * sinP2_4);
    t27 = t48 * t21 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2) + t49 * t18 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3) - t50 * t25 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + t51 * t20 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t52 * t17 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - t53 * t24 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t54 * t19 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) - t55 * t23 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) - t56 * t22 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) + t57 * t26 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4) + t27 + t38 * t5 * sinP2_1;
    t1 = t14 * (-0.39000639706982240432e-7 * cosP2_2 * sinP1_4 + 0.78001279413964480864e-7 * cosP1_4 * sinP2_2) - 0.76767023875002337024e-3 * sinP2_2 * t1;
    t14 = t9 * (0.13519129310193423679e-6 * cosP2_4 * sinP1_2 - 0.67595646550967118390e-7 * cosP1_2 * sinP2_4) - 0.17034102930843713836e-3 * sinP1_2 * t4;
    t4 = 0.90810313043218451980e-8 * t35 * t4;
    t1 = t13 * t1 + t15 * t14 - 0.26218917450072094407e-7 * t7 * t2 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.16216127329146152140e-10 * t10 * t9 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) - 0.98320940437770354032e-9 * t8 * t2 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) - 0.33035835987090838955e-5 * t7 * t5 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) + 0.38156390565089918992e-3 * t3 * t5 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.90848548964499807126e-5 * t3 * t2 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.77897019333826545368e-14 * t16 * t9 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) + 0.23843261570006038234e-12 * t11 * t2 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) + 0.79658169336156536830e-11 * t12 * t13 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.27311372343825098342e-9 * t6 * t5 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.13764931661287849564e-7 * t8 * t5 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) + t4;
    bf[0] = -t52 * t17 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) - t49 * t18 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + t54 * t19 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t51 * t20 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t48 * t21 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t56 * t22 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) + t55 * t23 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t53 * t24 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t50 * t25 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + t57 * t26 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + t47 - 0.22531882183655706134e-8 * t40 * t9 * sinP2_4;
    bf[1] = t27;
    bf[2] = t1;
}

static void idsbf_9_6_11_10_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t6, t7, t8, t9;
    t1 = LegP1[56];
    t2 = LegP2[21];
    t3 = LegP1[55];
    t4 = LegP2[22];
    t5 = LegP1[62];
    t6 = LegP1[58];
    t7 = LegP2[26];
    t8 = LegP1[60];
    t9 = LegP2[24];
    t10 = LegP1[65];
    t11 = LegP1[64];
    t12 = LegP2[25];
    t13 = LegP1[63];
    t14 = LegP2[23];
    t15 = LegP1[61];
    t16 = LegP1[59];
    t17 = LegP1[57];
    t18 = LegP2[27];
    t19 = t10 * t9;
    t20 = t11 * t14;
    t21 = t13 * t4;
    t22 = t5 * t18;
    t23 = t15 * t7;
    t24 = t8 * t12;
    t25 = t16 * t7;
    t26 = t8 * t18;
    t27 = t11 * t18;
    t28 = t13 * t7;
    t29 = t5 * t12;
    t30 = t15 * t9;
    t31 = t6 * t18;
    t32 = t10 * t7;
    t33 = t11 * t12;
    t34 = t13 * t9;
    t35 = t5 * t14;
    t36 = cosP2_5 * t7;
    t37 = cosP2_1 * t4;
    t38 = sinP2_5 * t7;
    t39 = sinP2_3 * t9;
    t40 = sinP2_1 * t4;
    t41 = cosP1_5 * t8;
    t42 = cosP1_3 * t6;
    t43 = (0.32874510080324982528e-8 * t41 - 0.69036471168682463312e-6 * t42 + 0.47072815043228784258e-4 * cosP1_1 * t1) * sinP2_2 + 0.11974159300780622776e-8 * t8 * sinP1_5 * cosP2_2;
    t44 = t12 * (-0.23457160358241953100e-5 * cosP2_4 * sinP1_1 - 0.18226847575660977072e-5 * cosP1_1 * sinP2_4) + 0.72643233091402444846e-7 * cosP1_1 * sinP2_6 * t18;
    t45 = t12 * (0.15036641255283303269e-7 * cosP2_4 * sinP1_3 + 0.11683876651064728891e-7 * cosP1_3 * sinP2_4) * t6;
    t43 = t1 * t44 + t14 * t43 + t17 * ((-0.24725114972200977592e-4 * t40 + 0.14132410801418293815e-5 * t39 - 0.1320786056207317179e-8 * t38) * cosP1_2 + (0.97738168159341471238e-6 * cosP2_3 * t9 + 0.10460625565161952059e-4 * t37 - 0.44906725911048784089e-7 * t36) * sinP1_2) + 0.58795675579029432826e-14 * t19 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) - 0.15118888006036139868e-12 * t20 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) - 0.20561687688209150225e-10 * t21 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.14362943605734332874e-12 * t22 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) - 0.15421265766156862669e-11 * t23 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) - 0.12337012612925490133e-9 * t24 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + (-0.50436610388136562613e-8 * cosP1_4 * sinP2_3 - 0.80916288608305420571e-8 * cosP2_3 * sinP1_4) * t16 * t9 + t45;
    t44 = sinP1_1 * t1;
    t45 = 0.26647947243919058684e-6 * t8 * sinP1_5 + 0.39369990763427710468e-3 * t44 - 0.97970394279114186338e-9 * sinP1_7 * t5;
    t46 = 0.94145630086457568512e-3 * t3;
    t47 = cosP1_4 * t16;
    t48 = 0.70538683880962214192e-7 * t47;
    t49 = 0.61830204389485397618e-8 * cosP1_6 * t15;
    t50 = sinP1_6 * t15;
    t51 = 0.64007324262354601758e-8 * t50;
    t52 = sinP1_4 * t16;
    t53 = 0.12278956082982311356e-6 * t52;
    t39 = 0.30510157898389026834e-5 * t38 - 0.28766720304195368158e-4 * t39;
    t54 = 0.25237173566299814404e-5 * t2;
    t55 = t37 * (t51 - t53);
    t56 = t40 * (t48 + t46 - t49);
    t57 = (-t54 - 0.25145734531639307828e-6 * cosP2_2 * t14) * t6 * sinP1_3;
    t39 = t2 * t45 + t3 * t39 + 0.11974159300780622777e-9 * t25 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + 0.33261553613279507711e-11 * t26 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.41996911127878166301e-15 * t27 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + 0.50396293353453799570e-14 * t28 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.45356664018108419609e-12 * t29 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.63499329625351787410e-11 * t30 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) - 0.69849262587886966196e-9 * t31 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + 0.46196602240665982930e-14 * t32 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) - 0.10919196893248323239e-12 * t33 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) - 0.22342356720031184474e-11 * t34 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + 0.51706596980643598350e-10 * t35 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2) + t43 + t55 + t56 + t57;
    t20 = t20 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2);
    t21 = t21 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1);
    t23 = t23 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t24 = t24 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t25 = t25 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t26 = t26 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t27 = t27 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t28 = t28 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t29 = t29 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t30 = t30 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t31 = t31 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t43 = sinP2_6 * t18;
    t45 = sinP2_4 * t12;
    t55 = cosP2_4 * t12;
    t41 = t1 * ((0.39369990763427710468e-3 * t2 - 0.23457160358241953100e-5 * t55) * cosP1_1 + (0.72643233091402444846e-7 * t43 + 0.18226847575660977072e-5 * t45) * sinP1_1) + t14 * (t6 * (-0.25145734531639307828e-6 * cosP1_3 * cosP2_2 + 0.69036471168682463312e-6 * sinP1_3 * sinP2_2) + t8 * (-0.11974159300780622776e-8 * cosP1_5 * cosP2_2 + 0.32874510080324982528e-8 * sinP1_5 * sinP2_2)) + t2 * (0.97970394279114186338e-9 * t5 * cosP1_7 + 0.26647947243919058684e-6 * t41) + t4 * ((t48 + t46 + t49) * cosP2_1 + (t51 + t53) * sinP2_1) + t9 * ((0.28766720304195368158e-4 * t3 + 0.50436610388136562613e-8 * t47 + 0.14132410801418293815e-5 * cosP1_2 * t17) * cosP2_3 + (-0.97738168159341471238e-6 * sinP1_2 * t17 - 0.80916288608305420571e-8 * t52) * sinP2_3) + 0.30510157898389026834e-5 * t36 * t3 + t42 * (t54 - 0.15036641255283303269e-7 * t55);
    t36 = (0.1320786056207317179e-8 * t36 + 0.24725114972200977592e-4 * t37) * cosP1_2 + (-0.44906725911048784089e-7 * t38 + 0.10460625565161952059e-4 * t40) * sinP1_2;
    t37 = 0.11683876651064728891e-7 * t45 * t6 * sinP1_3;
    t38 = t6 * t7 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5);
    t40 = t16 * t18 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6);
    t10 = t10 * t12 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4);
    t11 = t11 * t9 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3);
    t42 = t5 * t4 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1);
    t45 = t8 * t4 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1);
    t46 = t6 * t9 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3);
    t16 = t16 * (0.35922477902341868333e-7 * cosP2_2 * sinP1_4 + 0.98623530240974947589e-7 * cosP1_4 * sinP2_2) + 0.51780096547551662684e-3 * sinP2_2 * t3;
    t47 = t12 * (0.39095267263736588501e-6 * cosP2_4 * sinP1_2 + 0.30378079292768295119e-6 * cosP1_2 * sinP2_4) - 0.65616651272379517450e-4 * sinP1_2 * t2;
    t3 = 0.79907556400542689328e-6 * t43 * t3;
    t2 = -0.33309934054898823358e-7 * t50 * t2;
    t1 = -0.52303127825809760287e-5 * t1 * t9 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) - 0.27065954259509945883e-5 * t6 * t4 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1) - 0.15958826228593703194e-13 * t13 * t18 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) - 0.74022075677552940802e-9 * t42 + 0.34833917965907266244e-8 * t45 + 0.18142665607243367843e-12 * t5 * t7 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5) + 0.23518270231611773130e-12 * t11 + t2 - 0.17117387288446830638e-3 * t1 * t4 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + t16 * t14 + t47 * t17 - 0.57451774422937331498e-11 * t13 * t14 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.10919196893248323239e-13 * t10 + t3 + 0.15421265766156862666e-10 * t15 * t12 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4) + 0.99784660839838523135e-10 * t40 - 0.18389405859501877644e-6 * t46 + 0.20319785480112571970e-9 * t8 * t9 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3) + 0.33527646042185743772e-8 * t38 - 0.55473014360707321512e-6 * t1 * t7 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5);
    bf[0] = t39;
    bf[1] = t41 + t37 - 0.58795675579029432826e-14 * t19 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) - 0.50396293353453799570e-14 * t28 - 0.33261553613279507711e-11 * t26 - 0.22342356720031184474e-11 * t34 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.15421265766156862669e-11 * t23 + 0.14362943605734332874e-12 * t22 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6) + 0.47072815043228784258e-4 * t44 * t14 * sinP2_2 + t17 * t36 - 0.69849262587886966196e-9 * t31 - 0.12337012612925490133e-9 * t24 - 0.11974159300780622777e-9 * t25 + 0.20561687688209150225e-10 * t21 - 0.63499329625351787410e-11 * t30 + 0.41996911127878166301e-15 * t27 + 0.46196602240665982930e-14 * t32 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) - 0.45356664018108419609e-12 * t29 + 0.15118888006036139868e-12 * t20 - 0.10919196893248323239e-12 * t33 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.51706596980643598350e-10 * t35 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    bf[2] = t1;
}

static void idsbf_9_6_13_12_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t6, t7, t8, t9;
    t1 = LegP1[89];
    t2 = LegP2[27];
    t3 = LegP1[88];
    t4 = LegP2[26];
    t5 = LegP1[87];
    t6 = LegP2[25];
    t7 = LegP1[86];
    t8 = LegP2[24];
    t9 = LegP1[85];
    t10 = LegP2[23];
    t11 = LegP1[84];
    t12 = LegP2[22];
    t13 = LegP1[82];
    t14 = LegP1[81];
    t15 = LegP1[80];
    t16 = LegP1[79];
    t17 = LegP1[90];
    t18 = LegP1[83];
    t19 = LegP2[21];
    t20 = LegP1[78];
    t21 = t3 * t8;
    t22 = t5 * t10;
    t23 = t7 * t12;
    t24 = t9 * t2;
    t25 = t11 * t4;
    t26 = t18 * t6;
    t27 = t13 * t4;
    t28 = t18 * t2;
    t29 = t5 * t2;
    t30 = t7 * t4;
    t31 = t9 * t6;
    t32 = t11 * t8;
    t33 = t14 * t2;
    t34 = t1 * t2;
    t35 = t3 * t4;
    t36 = t5 * t6;
    t37 = t7 * t8;
    t38 = t9 * t10;
    t39 = t38 * (-cosP1_7 * sinP2_2 + sinP1_7 * cosP2_2);
    t40 = t17 * t4;
    t41 = t40 * (sinP1_12 * cosP2_5 - cosP1_12 * sinP2_5);
    t42 = t1 * t6;
    t43 = cosP2_5 * t4;
    t44 = cosP2_1 * t12;
    t45 = sinP2_5 * t4;
    t46 = (0.76530529280236542678e-8 * t45 + 0.13973480743593527280e-4 * sinP2_1 * t12) * cosP1_2 + (-0.13238787662503256470e-4 * t44 - 0.17419806188549079712e-7 * t43) * sinP1_2;
    t47 = t18 * (0.85873217270291393332e-9 * cosP1_5 * sinP2_2 + 0.21070743126506684476e-8 * cosP2_2 * sinP1_5) - 0.29608131167937913622e-4 * cosP1_1 * sinP2_2 * t16;
    t48 = (0.76579120092477962686e-8 * cosP2_4 * sinP1_3 - 0.7288621836213004066e-9 * cosP1_3 * sinP2_4) * t14 * t6;
    t49 = (-0.32321724833679121654e-8 * cosP2_3 * sinP1_4 - 0.14524235513617186277e-8 * cosP1_4 * sinP2_3) * t13 * t8;
    t50 = -0.14276422371185944141e-6 * t18;
    t51 = t50 * sinP1_5 * t19;
    t39 = -0.18259534422130541685e-16 * t34 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) - 0.30432557370217569478e-18 * t41 + 0.16798771668360098350e-15 * t35 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) - 0.76690044572948275082e-16 * t29 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) - 0.25563348190982758362e-16 * t42 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) + t48 - 0.16520876162082809212e-9 * t33 * (-cosP1_3 * sinP2_6 + sinP1_3 * cosP2_6) + t51 - 0.29142216937720344532e-14 * t30 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) + 0.12935054184637275730e-13 * t36 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t49 + t46 * t15 + t47 * t10 + 0.29080864902061985912e-11 * t32 * (-cosP1_6 * sinP2_3 + sinP1_6 * cosP2_3) + 0.60738515301775033866e-12 * t28 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) - 0.70554841007112413088e-13 * t31 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + 0.41504652122879606476e-12 * t37 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + 0.55216832092522758238e-12 * t39;
    t41 = 0.20418742773158175746e-6 * cosP1_4 * t13;
    t46 = 0.44836067659128479542e-9 * cosP1_6 * t11;
    t47 = 0.31757187942365168974e-6 * sinP1_4 * t13;
    t48 = sinP1_6 * t11;
    t49 = -0.21534564516083875642e-8 * t48;
    t51 = sinP2_6 * t2;
    t52 = 0.13265291741907667395e-7 * t51;
    t53 = t15 * (0.26958624366196571209e-6 * cosP1_2 * sinP2_3 + 0.85471680467314567831e-6 * cosP2_3 * sinP1_2) + 0.53246881052017376922e-4 * sinP2_3 * t20;
    t54 = t10 * (-0.23357515097519258986e-6 * cosP1_3 * sinP2_2 - 0.57312421304098181770e-6 * cosP2_2 * sinP1_3) + 0.30122416324701103197e-5 * sinP1_3 * t19;
    t45 = 0.88877454670781371542e-6 * t45 * t20;
    t55 = 0.41743925061947205086e-9 * t9;
    t39 = t12 * ((t47 + t49) * cosP2_1 + (-0.66857070379214643754e-4 * t20 + t41 + t46) * sinP2_1) + t14 * t54 + t16 * ((t52 + 0.15306105856047308537e-6 * sinP2_4 * t6) * cosP1_1 + (-0.63257074281872316713e-3 * t19 - 0.16081615219420372166e-5 * cosP2_4 * t6) * sinP1_1) + t8 * t53 + 0.89836909356882265098e-15 * t21 * (-sinP1_10 * cosP2_3 + cosP1_10 * sinP2_3) - 0.13146864783933990056e-14 * t22 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + 0.34234435897364109996e-11 * t23 * (-cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1) + 0.32209818720638275534e-13 * t24 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.11074042436333730922e-11 * t25 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.24129755624432445274e-10 * t26 * (-cosP1_5 * sinP2_4 + sinP1_5 * cosP2_4) + 0.52235123159526529122e-10 * t27 * (-cosP1_4 * sinP2_5 + sinP1_4 * cosP2_5) + t39 + t45 + t55 * sinP1_7 * t19;
    t24 = t24 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t25 = t25 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t26 = t26 * (cosP1_5 * cosP2_4 + sinP1_5 * sinP2_4);
    t27 = t27 * (cosP1_4 * cosP2_5 + sinP1_4 * sinP2_5);
    t28 = t28 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t29 = t29 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6);
    t30 = t30 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t32 = t32 * (cosP1_6 * cosP2_3 + sinP1_6 * sinP2_3);
    t33 = t33 * (cosP1_3 * cosP2_6 + sinP1_3 * sinP2_6);
    t45 = sinP1_2 * t15;
    t53 = t14 * (0.23357515097519258986e-6 * sinP1_3 * sinP2_2 - 0.57312421304098181770e-6 * cosP1_3 * cosP2_2) + t18 * (0.85873217270291393332e-9 * sinP1_5 * sinP2_2 - 0.21070743126506684476e-8 * cosP1_5 * cosP2_2);
    t54 = t4 * (-0.76530529280236542678e-8 * cosP1_2 * cosP2_5 - 0.17419806188549079712e-7 * sinP1_2 * sinP2_5) + t8 * (0.26958624366196571209e-6 * cosP1_2 * cosP2_3 - 0.85471680467314567831e-6 * sinP1_2 * sinP2_3);
    t34 = t10 * t53 + t12 * ((-0.13973480743593527280e-4 * cosP1_2 * t15 + t41 - t46) * cosP2_1 + (-0.13238787662503256470e-4 * t45 - t47 + t49) * sinP2_1) + t15 * t54 + t6 * (t14 * (-0.7288621836213004066e-9 * sinP1_3 * sinP2_4 - 0.76579120092477962686e-8 * cosP1_3 * cosP2_4) + t16 * (-0.16081615219420372166e-5 * cosP1_1 * cosP2_4 - 0.15306105856047308537e-6 * sinP1_1 * sinP2_4)) + 0.16798771668360098350e-15 * t35 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5) + 0.12935054184637275730e-13 * t36 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.41504652122879606476e-12 * t37 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) - 0.18259534422130541685e-16 * t34 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) + t52 * t16 * sinP1_1 + t13 * t8 * (0.14524235513617186277e-8 * cosP1_4 * cosP2_3 - 0.32321724833679121654e-8 * sinP1_4 * sinP2_3);
    t35 = -0.30122416324701103197e-5 * cosP1_3 * t14 + t50 * cosP1_5 - t55 * cosP1_7 - 0.63257074281872316713e-3 * cosP1_1 * t16;
    t36 = 0.88877454670781371542e-6 * t43 - 0.53246881052017376922e-4 * cosP2_3 * t8 - 0.66857070379214643754e-4 * t44;
    t37 = -0.29608131167937913622e-4 * t16 * sinP1_1 * t10 * sinP2_2;
    t41 = t9 * t4 * (-cosP1_7 * sinP2_5 + sinP1_7 * cosP2_5);
    t11 = t11 * t6 * (-cosP1_6 * sinP2_4 + sinP1_6 * cosP2_4);
    t43 = t18 * t8 * (-cosP1_5 * sinP2_3 + sinP1_5 * cosP2_3);
    t44 = t14 * t12 * (-cosP1_3 * sinP2_1 + sinP1_3 * cosP2_1);
    t15 = (-0.21865865508639012205e-7 * cosP1_2 * sinP2_4 + 0.22973736027743388808e-6 * cosP2_4 * sinP1_2) * t15 * t6;
    t46 = t13 * t10 * (0.71640526630122727210e-7 * sinP1_4 * cosP2_2 + 0.29196893871899073730e-7 * cosP1_4 * sinP2_2);
    t1 = 0.15216278685108784736e-17 * t17 * t2 * (sinP1_12 * cosP2_6 - cosP1_12 * sinP2_6) - 0.14607627537704433350e-16 * t1 * t4 * (sinP1_11 * cosP2_5 - cosP1_11 * sinP2_5) - 0.11759140167852068847e-14 * t3 * t6 * (sinP1_10 * cosP2_4 - cosP1_10 * sinP2_4) - 0.39528240117028196642e-13 * t5 * t8 * (-cosP1_9 * sinP2_3 + sinP1_9 * cosP2_3) - 0.55216832092522758237e-13 * t7 * t10 * (-cosP1_8 * sinP2_2 + sinP1_8 * cosP2_2) + 0.13693774358945643999e-9 * t9 * t12 * (-cosP1_7 * sinP2_1 + sinP1_7 * cosP2_1) - 0.30691723950307849836e-7 * t18 * t12 * (cosP1_5 * sinP2_1 + sinP1_5 * cosP2_1) - 0.74953536555674092693e-7 * t14 * t8 * (cosP1_3 * sinP2_3 + sinP1_3 * cosP2_3) - 0.13673454564735595623e-6 * t16 * t4 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) - 0.32209818720638275534e-14 * t7 * t2 * (-cosP1_8 * sinP2_6 + sinP1_8 * cosP2_6) - 0.11656886775088137813e-12 * t41 - 0.26810839582702716972e-11 * t11 + 0.10469111364742314929e-9 * t43 + 0.18141512270731189167e-5 * t44 + t15 + t46;
    t1 = t19 * (0.90367248974103309596e-4 * t45 + 0.15862691523539937934e-7 * t48) + t20 * (-0.38490570518319287712e-3 * t10 * sinP2_2 + 0.17244879264479967614e-6 * t51) + 0.10285703135263791348e-4 * t16 * t12 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) + 0.81918278541565195276e-5 * t16 * t8 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3) + 0.16715239411048489320e-8 * t14 * t4 * (-cosP1_3 * sinP2_5 + sinP1_3 * cosP2_5) + 0.20651095202603511514e-10 * t13 * t2 * (-cosP1_4 * sinP2_6 + sinP1_4 * cosP2_6) + t1;
    bf[0] = t39;
    bf[1] = t34 + 0.11074042436333730922e-11 * t25 + 0.24129755624432445274e-10 * t26 + 0.30432557370217569478e-18 * t40 * (cosP1_12 * cosP2_5 + sinP1_12 * sinP2_5) + 0.76690044572948275082e-16 * t29 + 0.25563348190982758362e-16 * t42 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) - 0.16520876162082809212e-9 * t33 - 0.52235123159526529122e-10 * t27 + 0.29142216937720344532e-14 * t30 + 0.13146864783933990056e-14 * t22 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t37 - 0.34234435897364109996e-11 * t23 * (cosP1_8 * cosP2_1 + sinP1_8 * sinP2_1) + 0.89836909356882265098e-15 * t21 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t35 * t19 + t36 * t20 - 0.29080864902061985912e-11 * t32 - 0.60738515301775033866e-12 * t28 + 0.70554841007112413088e-13 * t31 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + 0.32209818720638275534e-13 * t24 + 0.55216832092522758238e-12 * t38 * (cosP1_7 * cosP2_2 + sinP1_7 * sinP2_2);
    bf[2] = t1;
}

static void idsbf_9_10_1_0_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4;
    t1 = 0.97435746580672929928e-5 * LegP2[58];
    t2 = 0.70153737538084509546e-3 * LegP2[56];
    t3 = 0.38664978801854337270e-8 * LegP2[62];
    t4 = -0.77329957603708674536e-7 * LegP2[60];
    bf[0] = t2 * sinP2_1 - t1 * sinP2_3 + t4 * sinP2_5 + t3 * sinP2_7;
    bf[1] = t2 * cosP2_1 + t1 * cosP2_3 + t4 * cosP2_5 - t3 * cosP2_7;
    bf[2] = -0.30931983041483469816e-7 * LegP2[61] * sinP2_6 + 0.15589719452907668787e-3 * LegP2[57] * sinP2_2;
}

static void idsbf_9_12_3_2_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[3];
    t2 = LegP2[83];
    t3 = LegP2[81];
    t4 = LegP1[4];
    t5 = LegP2[78];
    t6 = LegP2[79];
    t7 = LegP1[5];
    t8 = LegP2[82];
    t9 = LegP2[85];
    t10 = LegP2[86];
    t11 = t7 * t9;
    t12 = t4 * t10;
    t13 = t7 * LegP2[87];
    t14 = -0.33479085834694641876e-2 * t5 + 0.37574731576537196266e-6 * cosP2_4 * t8;
    t15 = cosP2_5 * t2;
    t16 = cosP2_3 * t3;
    t17 = cosP2_1 * t6;
    t18 = sinP2_5 * t2;
    t19 = sinP2_3 * t3;
    t20 = sinP2_2 * LegP2[80];
    t21 = 0.50725887628325214964e-4 * t20;
    t22 = 0.18787365788268598134e-6 * sinP2_4 * t8;
    t23 = sinP2_6 * LegP2[84];
    t24 = -0.33548867479051068096e-8 * t23;
    t25 = sinP2_1 * t6;
    t26 = t1 * (-0.83872168697627670244e-9 * cosP2_7 * t9 - 0.35226310853003621500e-7 * t15 + 0.76088831442487822436e-5 * t16 + 0.83697714586736604680e-3 * t17) + t4 * (cosP1_1 * t14 + (t24 + t21 + t22) * sinP1_1) + t7 * ((0.58710518088339369172e-8 * t15 + 0.42271573023604345798e-6 * t16) * cosP1_2 + (0.11742103617667873833e-7 * t18 + 0.84543146047208691594e-6 * t19 - 0.13949619097789434113e-3 * t25) * sinP1_2) - 0.55914779131751780160e-10 * t12 * (cosP1_1 * cosP2_8 + sinP1_1 * sinP2_8) - 0.34946736957344862596e-11 * t13 * (cosP1_2 * cosP2_9 + sinP1_2 * sinP2_9) - 0.69893473914689725202e-10 * t11 * (cosP1_2 * cosP2_7 + sinP1_2 * sinP2_7);
    t2 = t1 * (-0.10064660243715320428e-7 * t23 + 0.15217766288497564489e-3 * t20) + t7 * (t8 * (0.93936828941342990674e-7 * cosP1_2 * sinP2_4 - 0.18787365788268598134e-6 * cosP2_4 * sinP1_2) + 0.16739542917347320937e-2 * sinP1_2 * t5) + 0.23484207235335747666e-7 * t4 * t2 * (cosP1_1 * sinP2_5 + sinP1_1 * cosP2_5) + 0.55914779131751780164e-9 * t4 * t9 * (-cosP1_1 * sinP2_7 + sinP1_1 * cosP2_7) + 0.27957389565875890078e-10 * t7 * t10 * (-cosP1_2 * sinP2_8 + sinP1_2 * cosP2_8) - 0.55798476391157736454e-3 * t4 * t6 * (cosP1_1 * sinP2_1 + sinP1_1 * cosP2_1) - 0.50725887628325214956e-5 * t4 * t3 * (-cosP1_1 * sinP2_3 + sinP1_1 * cosP2_3);
    bf[0] = t1 * (0.83697714586736604680e-3 * t25 - 0.76088831442487822436e-5 * t19 - 0.35226310853003621500e-7 * t18 + 0.83872168697627670244e-9 * sinP2_7 * t9) + t4 * ((t24 + t21 - t22) * cosP1_1 + sinP1_1 * t14) + t7 * ((-0.58710518088339369172e-8 * t18 + 0.42271573023604345798e-6 * t19) * cosP1_2 + (0.11742103617667873833e-7 * t15 - 0.84543146047208691594e-6 * t16 - 0.13949619097789434113e-3 * t17) * sinP1_2) + 0.69893473914689725202e-10 * t11 * (-cosP1_2 * sinP2_7 + sinP1_2 * cosP2_7) - 0.55914779131751780160e-10 * t12 * (-cosP1_1 * sinP2_8 + sinP1_1 * cosP2_8) - 0.34946736957344862596e-11 * t13 * (-cosP1_2 * sinP2_9 + sinP1_2 * cosP2_9);
    bf[1] = t26;
    bf[2] = t2;
}

static void idsbf_10_0_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5;
    t1 = 0.11651620633104373723e-2 * LegP1[46];
    t2 = -0.24699033020249062464e-10 * LegP1[54];
    t3 = 0.75579041041962131145e-8 * LegP1[52];
    t4 = -0.10669982264747594984e-6 * LegP1[50];
    t5 = 0.19419367721840622872e-4 * LegP1[48];
    bf[0] = t1 * cosP1_1 + t5 * cosP1_3 + t4 * cosP1_5 + t3 * cosP1_7 + t2 * cosP1_9;
    bf[1] = t1 * sinP1_1 - t5 * sinP1_3 + t4 * sinP1_5 - t3 * sinP1_7 + t2 * sinP1_9;
    bf[2] = -0.88916518872896624872e-9 * LegP1[53] * cosP1_8 - 0.29875950341293265957e-5 * LegP1[49] * cosP1_4 + 0.11651620633104373722e-1 * LegP1[45];
}

static void idsbf_10_0_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t2, t3, t4, t5;
    t1 = 0.11109384377747063768e-2 * LegP1[67];
    t2 = -0.23549603975349053231e-10 * LegP1[75];
    t3 = 0.28259524770418863878e-9 * LegP1[73];
    t4 = -0.10173428917350790996e-6 * LegP1[71];
    t5 = 0.56971201937164429574e-5 * LegP1[69];
    bf[0] = t1 * cosP1_1 + t5 * cosP1_3 + t4 * cosP1_5 + t3 * cosP1_7 + t2 * cosP1_9;
    bf[1] = t1 * sinP1_1 - t5 * sinP1_3 + t4 * sinP1_5 - t3 * sinP1_7 + t2 * sinP1_9;
    bf[2] = 0.14129762385209431939e-9 * LegP1[74] * cosP1_8 + 0.14242800484291107394e-5 * LegP1[70] * cosP1_4 - 0.12220322815521770144e-1 * LegP1[66];
}

static void idsbf_10_2_8_7_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t3, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[35];
    t2 = LegP2[3];
    t3 = LegP1[31];
    t4 = LegP1[28];
    t5 = LegP2[4];
    t6 = LegP1[29];
    t7 = LegP2[5];
    t8 = LegP1[33];
    t9 = LegP1[34];
    t10 = LegP1[32];
    t11 = LegP1[30];
    t12 = sinP1_7 * t1;
    t13 = sinP1_5 * t8;
    t14 = sinP1_3 * t3;
    t15 = sinP1_1 * t6;
    t16 = cosP1_7 * t1;
    t17 = cosP1_5 * t8;
    t18 = cosP1_3 * t3;
    t19 = cosP1_1 * t6;
    t20 = cosP1_4 * t10;
    t21 = -0.27898971603717344828e-5 * t20;
    t22 = 0.16095560540606160479e-6 * cosP1_6 * t9;
    t23 = 0.50218148886691220699e-2 * t4;
    t24 = cosP1_2 * t11;
    t25 = -0.22319177282973875865e-3 * sinP1_2 * t11;
    t10 = 0.11313708498984760390e-24 * sinP1_4 * t10;
    t26 = -0.14307164924983253759e-6 * sinP1_6 * t9;
    t27 = t2 * (-0.46033303146133618974e-4 * t14 + 0.18831805832509207761e-2 * t15 - 0.32574348713131515260e-7 * t12 - 0.34873714504646681034e-6 * t13) + t5 * ((t26 + t25 + t10) * cosP2_1 + (-0.83696914811152034487e-4 * t24 + t21 - t22 + t23) * sinP2_1) + t7 * ((-0.18831805832509207762e-3 * t15 - 0.52310571756970021558e-6 * t13 - 0.20924228702788008625e-5 * t14 - 0.28742072393939572285e-8 * t12) * cosP2_2 + (-0.25548508794612953143e-8 * t16 - 0.46498286006195574718e-6 * t17 - 0.55797943207434689663e-5 * t18 - 0.50218148886691220698e-3 * t19) * sinP2_2);
    t1 = t2 * (0.15065444666007366209e-1 * t4 - 0.83696914811152034490e-5 * t20) + t7 * (t11 * (-0.41848457405576017251e-4 * cosP1_2 * cosP2_2 + 0.11159588641486937933e-3 * sinP1_2 * sinP2_2) + t9 * (0.71535824624916268792e-7 * sinP1_6 * sinP2_2 - 0.80477802703030802392e-7 * cosP1_6 * cosP2_2)) - 0.21716232475421010172e-7 * t1 * t5 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) + 0.23249143003097787358e-6 * t8 * t5 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.30688868764089079316e-4 * t3 * t5 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.12554537221672805175e-2 * t6 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = t2 * (0.46033303146133618974e-4 * t18 + 0.18831805832509207761e-2 * t19 + 0.32574348713131515260e-7 * t16 - 0.34873714504646681034e-6 * t17) + t5 * ((0.83696914811152034485e-4 * t24 + t21 + t22 + t23) * cosP2_1 + (t26 + t25 - t10) * sinP2_1) + t7 * ((0.18831805832509207762e-3 * t19 - 0.28742072393939572286e-8 * t16 + 0.52310571756970021558e-6 * t17 - 0.20924228702788008625e-5 * t18) * cosP2_2 + (0.55797943207434689663e-5 * t14 + 0.25548508794612953142e-8 * t12 - 0.46498286006195574718e-6 * t13 - 0.50218148886691220698e-3 * t15) * sinP2_2);
    bf[1] = t27;
    bf[2] = t1;
}

static void idsbf_10_2_8_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[51];
    t2 = LegP2[4];
    t3 = LegP1[50];
    t4 = LegP2[5];
    t5 = LegP1[48];
    t6 = LegP2[3];
    t7 = LegP1[53];
    t8 = LegP1[52];
    t9 = LegP1[49];
    t10 = LegP1[47];
    t11 = LegP1[46];
    t12 = LegP1[45];
    t13 = LegP1[54];
    t14 = t7 * t2;
    t15 = sinP1_7 * t8;
    t16 = sinP1_5 * t3;
    t17 = sinP1_3 * t5;
    t18 = sinP1_1 * t11;
    t19 = cosP1_7 * t8;
    t20 = cosP1_5 * t3;
    t21 = cosP1_3 * t5;
    t22 = cosP1_1 * t11;
    t23 = 0.10521361071530380490e-4 * cosP1_2 * t10;
    t24 = cosP1_4 * t9;
    t25 = -0.14837816895747972488e-5 * t24;
    t26 = 0.12525429847059976776e-7 * cosP1_6 * t1;
    t27 = 0.47346124821886712214e-2 * t12;
    t28 = -0.12099565232259937566e-3 * sinP1_2 * t10;
    t9 = 0.11465585783077978741e-5 * sinP1_4 * t9;
    t29 = 0.43357257162899919608e-8 * sinP1_6 * t1;
    t30 = t2 * ((t28 - t9 + t29) * cosP2_1 + (t25 - t26 + t27 + t23) * sinP2_1) + t4 * ((-0.32517942872174939710e-7 * t16 - 0.19727552009119463425e-5 * t17 - 0.11047429125106899518e-3 * t18 - 0.27098285726812449756e-8 * t15) * cosP2_2 + (-0.28904838108599946410e-7 * t20 - 0.52606805357651902463e-5 * t21 - 0.24087365090499955340e-8 * t19 - 0.29459811000285065378e-3 * t22) * sinP2_2) + t6 * (-0.98637760045597317112e-5 * t17 + 0.17754796808207517080e-2 * t18 - 0.25592825408656202550e-9 * t15 - 0.32879253348532439038e-6 * t16 - 0.12796412704328101276e-9 * sinP1_9 * t13) - 0.68247534423083206796e-9 * t14 * (cosP1_8 * sinP2_1 + sinP1_8 * cosP2_1);
    t1 = t4 * (t1 * (0.16258971436087469854e-7 * cosP1_6 * cosP2_2 - 0.14452419054299973204e-7 * sinP1_6 * sinP2_2) + t10 * (-0.73649527500712663443e-4 * sinP1_2 * sinP2_2 + 0.27618572812767248793e-4 * cosP1_2 * cosP2_2)) + t6 * (-0.15979317127386765372e-1 * t12 + 0.25592825408656202548e-9 * cosP1_8 * t7 + 0.32879253348532439038e-5 * t24) + 0.27299013769233282718e-8 * t8 * t2 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) - 0.67444622253399874952e-7 * t3 * t2 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.15782041607295570737e-4 * t5 * t2 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.10521361071530380494e-2 * t11 * t2 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = t2 * ((t25 + t26 + t27 - t23) * cosP2_1 + (t28 + t9 + t29) * sinP2_1) + t4 * ((0.11047429125106899518e-3 * t22 + 0.32517942872174939710e-7 * t20 - 0.19727552009119463425e-5 * t21 - 0.27098285726812449756e-8 * t19) * cosP2_2 + (0.52606805357651902463e-5 * t17 - 0.28904838108599946410e-7 * t16 + 0.24087365090499955340e-8 * t15 - 0.29459811000285065378e-3 * t18) * sinP2_2) + t6 * (-0.12796412704328101276e-9 * cosP1_9 * t13 + 0.98637760045597317112e-5 * t21 + 0.17754796808207517080e-2 * t22 + 0.25592825408656202550e-9 * t19 - 0.32879253348532439038e-6 * t20) - 0.68247534423083206796e-9 * t14 * (cosP1_8 * cosP2_1 - sinP1_8 * sinP2_1);
    bf[1] = t30;
    bf[2] = t1;
}

static void idsbf_10_2_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[54];
    t2 = LegP2[5];
    t3 = LegP1[51];
    t4 = LegP2[4];
    t5 = LegP1[50];
    t6 = LegP1[48];
    t7 = LegP2[3];
    t8 = LegP1[53];
    t9 = LegP1[52];
    t10 = LegP1[49];
    t11 = LegP1[47];
    t12 = LegP1[46];
    t13 = LegP1[45];
    t14 = t1 * t2;
    t15 = 0.64169408614793229751e-4 * cosP1_2 * t11;
    t16 = cosP1_4 * t10;
    t17 = -0.65510080019850638166e-6 * t16;
    t18 = 0.22852353495296734243e-7 * cosP1_6 * t3;
    t19 = cosP1_8 * t8;
    t20 = -0.63025339996949326578e-9 * t19;
    t21 = 0.65357730996548659934e-3 * t13;
    t22 = 0.52286184797238927945e-4 * sinP1_2 * t11;
    t10 = 0.14016110143781997002e-5 * sinP1_4 * t10;
    t23 = 0.32646219278995334633e-7 * sinP1_6 * t3;
    t8 = 0.83429227046321410724e-9 * sinP1_8 * t8;
    t24 = cosP1_7 * t9;
    t25 = cosP1_5 * t5;
    t26 = cosP1_3 * t6;
    t27 = cosP1_1 * t12;
    t28 = sinP1_7 * t9;
    t29 = sinP1_5 * t5;
    t30 = sinP1_3 * t6;
    t31 = sinP1_1 * t12;
    t32 = t2 * ((0.1980537302925716965e-6 * t30 + 0.2614309239861946396e-4 * t31 - 0.50329588055117807562e-9 * t28 - 0.12079101133228273814e-6 * t29) * cosP2_2 + (-0.57435581784845792061e-5 * t26 - 0.75814967955996445530e-3 * t27 + 0.4080777409874416830e-10 * t24 + 0.9793865783698600392e-8 * t25) * sinP2_2) + t4 * ((t8 + t22 + t10 + t23) * cosP2_1 + (t15 + t17 + t18 + t20 + t21) * sinP2_1) + t7 * (-0.63206707881832634006e-8 * t28 + 0.67468853176590358238e-7 * t29 + 0.12279331278139445202e-4 * t30 - 0.13071546199309731987e-2 * t31 - 0.20655786889487788890e-10 * sinP1_9 * t1) - 0.23930484810991950542e-10 * t14 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2);
    t3 = t2 * (t11 * (0.13784539628362990094e-3 * sinP1_2 * sinP2_2 + 0.4753289527021720717e-5 * cosP1_2 * cosP2_2) + t3 * (-0.16105468177637698418e-7 * cosP1_6 * cosP2_2 - 0.13058487711598133850e-8 * sinP1_6 * sinP2_2)) + t7 * (-0.13071546199309731987e-1 * t13 - 0.74360832802156039992e-9 * t19 + 0.18891278889445300309e-5 * t16) + 0.81363648357372631838e-10 * t1 * t4 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) + 0.14690798675547900585e-6 * t5 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.97046327843360131412e-5 * t6 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.13071546199309731986e-3 * t12 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.34686607983932543048e-8 * t9 * t4 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1);
    bf[0] = t2 * ((0.1980537302925716965e-6 * t26 - 0.2614309239861946396e-4 * t27 - 0.50329588055117807562e-9 * t24 + 0.12079101133228273814e-6 * t25) * cosP2_2 + (-0.75814967955996445530e-3 * t31 - 0.4080777409874416830e-10 * t28 + 0.9793865783698600392e-8 * t29 + 0.57435581784845792061e-5 * t30) * sinP2_2) + t4 * ((-t15 + t17 - t18 + t20 + t21) * cosP2_1 + (-t8 + t22 - t10 + t23) * sinP2_1) + t7 * (-0.20655786889487788890e-10 * cosP1_9 * t1 + 0.63206707881832634006e-8 * t24 + 0.67468853176590358238e-7 * t25 - 0.12279331278139445202e-4 * t26 - 0.13071546199309731987e-2 * t27) + 0.23930484810991950542e-10 * t14 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2);
    bf[1] = t32;
    bf[2] = t3;
}

static void idsbf_10_2_10_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[69];
    t2 = LegP2[5];
    t3 = LegP1[75];
    t4 = LegP1[74];
    t5 = LegP2[4];
    t6 = LegP1[72];
    t7 = LegP1[71];
    t8 = LegP1[76];
    t9 = LegP1[73];
    t10 = LegP1[70];
    t11 = LegP1[68];
    t12 = LegP1[67];
    t13 = LegP2[3];
    t14 = LegP1[66];
    t15 = t3 * t2;
    t16 = LegP1[77] * t2;
    t17 = t8 * t5;
    t18 = 0.31288808896396983040e-4 * cosP1_2 * t11;
    t19 = cosP1_4 * t10;
    t20 = 0.15978500364919536369e-6 * t19;
    t21 = 0.27236080167476482457e-8 * cosP1_6 * t6;
    t22 = cosP1_8 * t4;
    t23 = 0.85022684120693781212e-10 * t22;
    t24 = 0.62316151423186191846e-3 * t14;
    t25 = 0.19958599546726766340e-4 * sinP1_2 * t11;
    t10 = 0.55198455806085671105e-6 * sinP1_4 * t10;
    t26 = 0.66144766121014314533e-8 * sinP1_6 * t6;
    t4 = 0.10952074564699537918e-9 * sinP1_8 * t4;
    t27 = sinP1_7 * t9;
    t28 = sinP1_5 * t7;
    t29 = sinP1_3 * t1;
    t30 = sinP1_1 * t12;
    t31 = cosP1_7 * t9;
    t32 = cosP1_5 * t7;
    t33 = cosP1_3 * t1;
    t34 = cosP1_1 * t12;
    t35 = t13 * (-0.19694520050556186607e-10 * sinP1_9 * t3 - 0.23633424060667423930e-9 * t27 + 0.64329027443182549037e-7 * t28 + 0.36024255368182227461e-5 * t29 - 0.12463230284637238372e-2 * t30) + t2 * ((0.1888368224945036115e-6 * t29 + 0.1699531402450532504e-4 * t30 - 0.47987379342696659564e-9 * t27 - 0.14396213802808997868e-7 * t28) * cosP2_2 + (0.3890868595353783204e-10 * t31 + 0.11672605786061349624e-8 * t32 - 0.54762678523406047387e-5 * t33 - 0.49286410671065442650e-3 * t34) * sinP2_2) + t5 * ((t25 + t10 + t26 + t4) * cosP2_1 + (t18 + t20 - t21 + t23 + t24) * sinP2_1) - 0.60044268446817642090e-13 * t16 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) + 0.20415051271917998312e-11 * t17 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) - 0.12008853689363528419e-12 * t15 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2);
    t1 = t13 * (0.13709553313100962208e-1 * t14 + 0.11816712030333711965e-9 * t22 - 0.90060638420455568660e-6 * t19) + t2 * (t11 * (-0.3399062804901065008e-5 * cosP1_2 * cosP2_2 - 0.98572821342130885298e-4 * sinP1_2 * sinP2_2) + t6 * (0.3890868595353783210e-9 * sinP1_6 * sinP2_2 + 0.47987379342696659562e-8 * cosP1_6 * cosP2_2)) + 0.12008853689363528420e-12 * t8 * t2 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) - 0.81660205087671993252e-11 * t3 * t5 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) - 0.77817371907075664158e-9 * t9 * t5 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) - 0.56028507773094478192e-7 * t7 * t5 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.56941564936804165982e-5 * t1 * t5 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.11330209349670216700e-3 * t12 * t5 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = t13 * (0.23633424060667423930e-9 * t31 + 0.64329027443182549037e-7 * t32 - 0.12463230284637238372e-2 * t34 - 0.36024255368182227461e-5 * t33 - 0.19694520050556186607e-10 * cosP1_9 * t3) + t2 * ((0.14396213802808997868e-7 * t32 + 0.1888368224945036115e-6 * t33 - 0.1699531402450532504e-4 * t34 - 0.47987379342696659564e-9 * t31) * cosP2_2 + (0.11672605786061349624e-8 * t28 - 0.49286410671065442650e-3 * t30 + 0.54762678523406047387e-5 * t29 - 0.3890868595353783204e-10 * t27) * sinP2_2) + t5 * ((-t18 + t20 + t21 + t23 + t24) * cosP2_1 + (t25 - t10 + t26 - t4) * sinP2_1) + 0.12008853689363528419e-12 * t15 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - 0.60044268446817642090e-13 * t16 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) + 0.20415051271917998312e-11 * t17 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1);
    bf[1] = t35;
    bf[2] = t1;
}

static void idsbf_10_2_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[69];
    t2 = LegP2[3];
    t3 = LegP1[75];
    t4 = LegP1[71];
    t5 = LegP1[66];
    t6 = LegP2[4];
    t7 = LegP1[67];
    t8 = LegP1[73];
    t9 = LegP2[5];
    t10 = LegP1[74];
    t11 = LegP1[72];
    t12 = LegP1[76];
    t13 = LegP1[70];
    t14 = LegP1[68];
    t15 = LegP1[77] * t9;
    t16 = t12 * t6;
    t17 = t3 * t9;
    t18 = 0.4608820256344662407e-5 * cosP1_2 * t14;
    t19 = cosP1_4 * t13;
    t20 = 0.77717361185419797437e-6 * t19;
    t21 = 0.37922715694712733384e-8 * cosP1_6 * t11;
    t22 = cosP1_8 * t10;
    t23 = 0.98616991168283703844e-10 * t22;
    t24 = -0.60478566046198075856e-2 * t5;
    t25 = 0.72927802879806716895e-4 * sinP1_2 * t14;
    t13 = 0.45184512317104533395e-6 * sinP1_4 * t13;
    t26 = -0.72617966223918000079e-9 * sinP1_6 * t11;
    t10 = 0.89651810152985185314e-10 * sinP1_8 * t10;
    t27 = cosP1_7 * t8;
    t28 = cosP1_5 * t4;
    t29 = cosP1_3 * t1;
    t30 = cosP1_1 * t7;
    t31 = sinP1_7 * t8;
    t32 = sinP1_5 * t4;
    t33 = sinP1_3 * t1;
    t34 = sinP1_1 * t7;
    t35 = t2 * (0.13956592164507248274e-2 * t34 - 0.26895543045895555592e-11 * sinP1_9 * t3 - 0.10220306357440311125e-8 * t31 - 0.54221414780525440070e-7 * t32 - 0.13013139547326105618e-4 * t33) + t6 * ((t25 - t13 + t26 - t10) * cosP2_1 + (t23 + t24 - t18 + t20 + t21) * sinP2_1) + t9 * ((-0.87410514899160555668e-10 * t31 + 0.86347603037986763309e-4 * t34 - 0.26747617559143130032e-7 * t32 + 0.47443737932959760065e-6 * t33) * cosP2_2 + (-0.23437206538882121471e-3 * t30 + 0.73962743376212777872e-10 * t27 + 0.22632599473121110028e-7 * t28 - 0.12877586010374792019e-5 * t29) * sinP2_2) - 0.18677460448538580273e-13 * t15 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) - 0.22412952538246296327e-12 * t16 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) - 0.86289867272248240860e-11 * t17 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2);
    t1 = t2 * (0.16747910597408697929e-1 * t5 - 0.10758217218358222237e-9 * t22 - 0.17350852729768140823e-5 * t19) + t9 * (t11 * (-0.31467785363697800042e-8 * cosP1_6 * cosP2_2 - 0.26626587615436600034e-8 * sinP1_6 * sinP2_2) + t14 * (0.36057240829049417647e-4 * sinP1_2 * sinP2_2 + 0.13284246621228732817e-4 * cosP1_2 * cosP2_2)) - 0.82180825973569753198e-12 * t12 * t9 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) - 0.94134400660634444572e-11 * t3 * t6 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) + 0.17033843929067185211e-9 * t8 * t6 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) - 0.76813670939077706766e-7 * t4 * t6 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.48799273302472896064e-5 * t1 * t6 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.10079761007699679309e-2 * t7 * t6 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    bf[0] = t2 * (-0.26895543045895555592e-11 * cosP1_9 * t3 + 0.10220306357440311125e-8 * t27 - 0.54221414780525440070e-7 * t28 + 0.13013139547326105618e-4 * t29 + 0.13956592164507248274e-2 * t30) + t6 * ((t23 + t24 + t18 + t20 - t21) * cosP2_1 + (t25 + t13 + t26 + t10) * sinP2_1) + t9 * ((0.47443737932959760065e-6 * t29 + 0.26747617559143130032e-7 * t28 - 0.86347603037986763309e-4 * t30 - 0.87410514899160555668e-10 * t27) * cosP2_2 + (0.22632599473121110028e-7 * t32 - 0.23437206538882121471e-3 * t34 - 0.73962743376212777872e-10 * t31 + 0.12877586010374792019e-5 * t33) * sinP2_2) - 0.18677460448538580273e-13 * t15 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) - 0.22412952538246296327e-12 * t16 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) + 0.86289867272248240860e-11 * t17 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2);
    bf[1] = t35;
    bf[2] = t1;
}

static void idsbf_10_2_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t4, t5, t6, t7, t8, t9;
    t1 = LegP1[100];
    t2 = LegP2[3];
    t3 = LegP1[92];
    t4 = LegP2[5];
    t5 = LegP1[94];
    t6 = LegP1[99];
    t7 = LegP2[4];
    t8 = LegP1[97];
    t9 = LegP1[96];
    t10 = LegP1[101];
    t11 = LegP1[98];
    t12 = LegP1[93];
    t13 = LegP1[91];
    t14 = t1 * t4;
    t15 = LegP1[102] * t4;
    t16 = t10 * t7;
    t17 = sinP1_7 * t11;
    t18 = sinP1_5 * t9;
    t19 = sinP1_3 * t5;
    t20 = sinP1_1 * t3;
    t21 = cosP1_7 * t11;
    t22 = cosP1_5 * t9;
    t23 = cosP1_3 * t5;
    t24 = cosP1_1 * t3;
    t25 = 0.20056286355117479744e-4 * cosP1_2 * t12;
    t26 = cosP1_4 * LegP1[95];
    t27 = 0.31256550163819448958e-6 * t26;
    t28 = 0.23514765748243798402e-8 * cosP1_6 * t8;
    t29 = cosP1_8 * t6;
    t30 = 0.86134673070490104043e-11 * t29;
    t31 = -0.58105926754540355608e-2 * t13;
    t32 = 0.54438491535318873596e-4 * sinP1_2 * t12;
    t33 = -0.19897109479283214034e-8 * sinP1_6 * t8;
    t6 = 0.70710678118654752440e-30 * sinP1_8 * t6;
    t34 = t2 * (-0.46884825245729173430e-5 * t19 + 0.13409060020278543599e-2 * t20 - 0.25840401921147031214e-11 * sinP1_9 * t1 - 0.77521205763441093642e-10 * t17 - 0.52094250273032414930e-7 * t18) + t4 * ((0.60168859065352439244e-4 * t20 - 0.47029531496487596806e-8 * t18 + 0.45582468988903363059e-6 * t19 - 0.83981306243727851448e-10 * t17) * cosP2_2 + (0.71061105283154335840e-10 * t21 + 0.39794218958566428066e-8 * t22 - 0.12372384439845198545e-5 * t23 - 0.16331547460595662080e-3 * t24) * sinP2_2) + t7 * ((t32 + t33 + t6) * cosP2_1 + (t31 + t27 + t28 + t30 - t25) * sinP2_1) - 0.17944723556352105011e-13 * t15 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) - 0.21533668267622526010e-12 * t16 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) - 0.21533668267622526012e-12 * t14 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2);
    t3 = t2 * (-0.17431778026362106681e-1 * t13 + 0.25840401921147031212e-10 * t29 + 0.93769650491458346868e-6 * t26) + t4 * (t12 * (-0.10028143177558739873e-4 * cosP1_2 * cosP2_2 - 0.27219245767659436801e-4 * sinP1_2 * sinP2_2) + t8 * (0.99485547396416070168e-9 * sinP1_6 * sinP2_2 + 0.11757382874121899201e-8 * cosP1_6 * cosP2_2)) + 0.34729500182021609948e-7 * t9 * t7 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.31256550163819448956e-5 * t5 * t7 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) - 0.89393733468523624008e-3 * t3 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.10766834133811263007e-12 * t10 * t4 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) + 0.17226934614098020809e-11 * t1 * t7 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) - 0.51680803842294062436e-10 * t11 * t7 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1);
    bf[0] = t2 * (0.46884825245729173430e-5 * t23 + 0.13409060020278543599e-2 * t24 - 0.25840401921147031214e-11 * cosP1_9 * t1 + 0.77521205763441093642e-10 * t21 - 0.52094250273032414930e-7 * t22) + t4 * ((0.47029531496487596806e-8 * t22 + 0.45582468988903363059e-6 * t23 - 0.60168859065352439244e-4 * t24 - 0.83981306243727851448e-10 * t21) * cosP2_2 + (-0.16331547460595662080e-3 * t20 + 0.39794218958566428066e-8 * t18 - 0.71061105283154335840e-10 * t17 + 0.12372384439845198545e-5 * t19) * sinP2_2) + t7 * ((t31 + t27 - t28 + t30 + t25) * cosP2_1 + (t32 + t33 - t6) * sinP2_1) + 0.21533668267622526012e-12 * t14 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - 0.17944723556352105011e-13 * t15 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) - 0.21533668267622526010e-12 * t16 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1);
    bf[1] = t34;
    bf[2] = t3;
}

static void idsbf_10_4_10_9_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t5, t6, t7, t8, t9;
    t1 = LegP1[52];
    t2 = LegP2[10];
    t3 = LegP1[45];
    t4 = LegP2[11];
    t5 = LegP1[46];
    t6 = LegP2[13];
    t7 = LegP1[48];
    t8 = LegP1[50];
    t9 = LegP1[54];
    t10 = LegP2[14];
    t11 = LegP1[49];
    t12 = LegP1[47];
    t13 = LegP2[12];
    t14 = LegP1[53];
    t15 = LegP1[51];
    t16 = t1 * t10;
    t17 = t9 * t10;
    t18 = t14 * t6;
    t19 = t9 * t13;
    t20 = sinP1_2 * t12;
    t21 = -0.37728726493537319710e-4 * t20;
    t22 = sinP1_4 * t11;
    t23 = 0.87295263090038556458e-6 * t22;
    t24 = 0.43443192989773286292e-9 * sinP1_8 * t14;
    t12 = cosP1_2 * t12;
    t25 = 0.49784059219282972164e-4 * t12;
    t26 = cosP1_4 * t11;
    t27 = 0.31197323530538369366e-6 * t26;
    t28 = cosP1_8 * t14;
    t29 = -0.39098873690795957664e-9 * t28;
    t30 = cosP1_7 * t1;
    t31 = cosP1_3 * t7;
    t32 = cosP1_1 * t5;
    t33 = sinP1_1 * t5;
    t34 = sinP1_7 * t1;
    t35 = sinP1_3 * t7;
    t36 = 0.30138331814364131133e-5 * t12;
    t37 = cosP1_6 * t15;
    t38 = 0.11162345116431159674e-6 * t20;
    t39 = sinP1_6 * t15;
    t40 = t10 * (t8 * (0.12095947852054522850e-8 * sinP1_5 * sinP2_4 + 0.34073092540998655918e-9 * cosP1_5 * cosP2_4) - 0.17190011479303985904e-4 * t32 * cosP2_4) + t13 * ((-0.36587686770524356721e-6 * t31 - 0.15148329058852319111e-9 * t30 + 0.48295746537092150869e-4 * t32) * cosP2_2 + (0.75386717246959526226e-10 * t34 - 0.88678630647203101885e-6 * t35 + 0.11705579245430809450e-3 * t33) * sinP2_2) + t4 * ((t25 + t27 + t29) * cosP2_1 + (t21 + t23 - t24) * sinP2_1) + t6 * ((-0.59855065897020972223e-9 * t37 + t36) * cosP2_3 + (-0.11005608890742565860e-8 * t39 - t38) * sinP2_3);
    t41 = 0.24135107216540714608e-10 * t9;
    t42 = 0.26577012181978951614e-7 * t8;
    t43 = (-0.62013028424617553761e-7 * cosP1_3 * cosP2_4 - 0.22014625090739231588e-6 * sinP1_3 * sinP2_4) * t10 * t7;
    t30 = t2 * (t42 * cosP1_5 + t41 * cosP1_9 - 0.48370162171201691940e-5 * t31 + 0.13260865998320217696e-2 * t32 - 0.73853428082614586708e-8 * t30) + t4 * (t15 * (-0.87295263090038556461e-8 * cosP1_6 * cosP2_1 + 0.30870221842144782259e-8 * sinP1_6 * sinP2_1) - 0.66304329991601088497e-3 * t3 * cosP2_1) + t6 * (t11 * (0.43409119897232287642e-7 * sinP1_4 * sinP2_3 - 0.62013028424617553770e-7 * cosP1_4 * cosP2_3) - 0.17190011479303985906e-3 * t3 * cosP2_3) + 0.21721596494886643146e-10 * t16 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - 0.70985609460413866490e-13 * t17 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + 0.31233668162582101259e-11 * t18 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + 0.22928351855713678878e-10 * t19 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t40 + (0.36355989741245565863e-7 * cosP1_5 * cosP2_2 - 0.18092812139270286291e-7 * sinP1_5 * sinP2_2) * t13 * t8 + t43;
    t21 = t13 * ((-0.36355989741245565863e-7 * sinP1_5 * t8 - 0.36587686770524356721e-6 * t35 - 0.48295746537092150869e-4 * t33) * cosP2_2 + (-0.18092812139270286291e-7 * t8 * cosP1_5 + 0.88678630647203101885e-6 * t31 + 0.11705579245430809450e-3 * t32) * sinP2_2) + t4 * ((0.30870221842144782259e-8 * t39 + t21 - t23 + t24) * cosP2_1 + (0.87295263090038556461e-8 * t37 - t25 + t27 + t29) * sinP2_1) + t6 * ((0.43409119897232287642e-7 * t22 + t38) * cosP2_3 + (0.62013028424617553770e-7 * t26 + t36) * sinP2_3) - 0.17190011479303985904e-4 * t33 * t10 * cosP2_4;
    t22 = (-0.75386717246959526226e-10 * cosP1_7 * sinP2_2 - 0.15148329058852319111e-9 * sinP1_7 * cosP2_2) * t13 * t1;
    t12 = (-0.87810448249258456109e-5 * t12 - 0.48474652988327421148e-8 * t37) * cosP2_2 + (0.24123749519027048388e-8 * t39 - 0.21282871355328744451e-4 * t20) * sinP2_2;
    t20 = t10 * (0.95404659114796236570e-8 * cosP1_4 * cosP2_4 + 0.33868653985752663981e-7 * sinP1_4 * sinP2_4) + 0.74415634109541064525e-6 * cosP1_4 * t2;
    t23 = 0.13260865998320217696e-1 * t2 - 0.17190011479303985905e-3 * t10 * cosP2_4;
    t24 = 0.86886385979546572592e-9 * t28 * t2;
    t1 = t11 * t20 + t13 * t12 + t3 * t23 - 0.73853428082614586702e-9 * t1 * t4 * (-cosP1_7 * cosP2_1 + sinP1_7 * sinP2_1) + 0.75301534515607029574e-8 * t8 * t6 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) - 0.25554819405748991936e-11 * t14 * t10 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.10619447175277914427e-9 * t1 * t6 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.84637561871840661302e-7 * t8 * t4 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) - 0.72927321427350243226e-5 * t7 * t4 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.34380022958607971810e-4 * t5 * t6 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.24185081085600845967e-6 * t7 * t6 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + 0.13260865998320217699e-3 * t5 * t4 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.45856703711427357752e-10 * t9 * t4 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) + t24;
    bf[0] = t30;
    bf[1] = t10 * (t7 * (0.62013028424617553761e-7 * cosP2_4 * sinP1_3 - 0.22014625090739231588e-6 * cosP1_3 * sinP2_4) + t8 * (0.34073092540998655918e-9 * sinP1_5 * cosP2_4 - 0.12095947852054522850e-8 * cosP1_5 * sinP2_4)) + t2 * (0.13260865998320217696e-2 * t33 + t42 * sinP1_5 + 0.48370162171201691940e-5 * t35 + 0.73853428082614586708e-8 * t34 + t41 * sinP1_9) + t3 * (0.17190011479303985906e-3 * sinP2_3 * t6 - 0.66304329991601088497e-3 * sinP2_1 * t4) + 0.21721596494886643146e-10 * t16 * (cosP1_7 * sinP2_4 - sinP1_7 * cosP2_4) - 0.70985609460413866490e-13 * t17 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + 0.31233668162582101259e-11 * t18 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - 0.22928351855713678878e-10 * t19 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t21 + t6 * (0.11005608890742565860e-8 * sinP1_6 * cosP2_3 - 0.59855065897020972223e-9 * cosP1_6 * sinP2_3) * t15 + t22;
    bf[2] = t1;
}

static void idsbf_10_4_12_11_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t6, t7, t8, t9;
    t1 = LegP1[77];
    t2 = LegP2[14];
    t3 = LegP1[76];
    t4 = LegP2[13];
    t5 = LegP1[75];
    t6 = LegP2[12];
    t7 = LegP1[74];
    t8 = LegP2[11];
    t9 = LegP1[72];
    t10 = LegP1[71];
    t11 = LegP1[70];
    t12 = LegP1[69];
    t13 = LegP1[73];
    t14 = LegP1[68];
    t15 = LegP1[67];
    t16 = LegP1[66];
    t17 = LegP2[10];
    t18 = t1 * t2;
    t19 = t3 * t4;
    t20 = t5 * t6;
    t21 = t1 * t6;
    t22 = t3 * t8;
    t23 = t13 * t2;
    t24 = t5 * t2;
    t25 = t7 * t4;
    t26 = cosP1_6 * t9;
    t27 = cosP1_4 * t11;
    t28 = 0.21623283204644620718e-3 * t16;
    t29 = sinP1_6 * t9;
    t30 = sinP1_4 * t11;
    t31 = 0.29549378111647306947e-8 * t26;
    t32 = cosP1_8 * t7;
    t33 = 0.20078762975741433519e-2 * t16;
    t34 = 0.48369024893154673689e-8 * t29;
    t35 = sinP1_7 * t13;
    t36 = sinP1_5 * t10;
    t37 = cosP1_7 * t13;
    t38 = cosP1_5 * t10;
    t39 = cosP1_3 * t12;
    t40 = cosP1_1 * t15;
    t41 = t17 * (-0.57363772683453556326e-11 * cosP1_9 * t5 - 0.12168947258025111227e-2 * t40 + 0.65459640979156058243e-8 * t38 - 0.15710313834997453979e-5 * t39 + 0.21798233619712351404e-8 * t37) + t4 * ((-t28 + 0.46351010663564123576e-10 * t26 + 0.24729197703236733110e-8 * t27) * cosP2_3 + (-0.93351422527318287442e-11 * t29 + 0.17619553363556172343e-7 * t30) * sinP2_3) + t6 * ((-0.4857520977421501150e-9 * t38 + 0.15874251560200984152e-11 * t37) * cosP2_2 + (0.39108383389222424563e-10 * t35 - 0.11967165317102061917e-7 * t36) * sinP2_2) + t8 * ((t33 + 0.49083907381030543006e-10 * t32 - t31) * cosP2_1 + (t34 + 0.26300748607696630542e-10 * sinP1_8 * t7) * sinP2_1) + t12 * t2 * (-0.61641161922038621508e-7 * cosP1_3 * cosP2_4 - 0.80188060199466171344e-7 * sinP1_3 * sinP2_4);
    t42 = 0.10282185669675637455e-10;
    t43 = 0.55559880460703444486e-12;
    t44 = 0.95080152574120477930e-13;
    t45 = -0.89743638081818063752e-13;
    t46 = -0.54116766682503355016e-13;
    t47 = 0.27058383341251677512e-13;
    t48 = 0.34574600936043810156e-14;
    t49 = 0.12025948151667412227e-14;
    t50 = sinP1_2 * t14;
    t51 = 0.9467100576610444924e-5 * t50;
    t30 = 0.36231911281962878233e-6 * t30;
    t52 = cosP1_2 * t14;
    t53 = 0.35209104391663564820e-4 * t52;
    t27 = -0.14957527963737159307e-6 * t27;
    t54 = t10 * (0.33411691749777571391e-9 * sinP1_5 * sinP2_4 + 0.25683817467516092295e-9 * cosP1_5 * cosP2_4) - 0.65525100620135214302e-5 * t40 * cosP2_4;
    t55 = (-0.34958175767910133266e-5 * sinP1_2 * sinP2_3 - 0.72360178132375426015e-6 * cosP1_2 * cosP2_3) * t14 * t4;
    t33 = t7 * (-0.26300748607696630542e-10 * sinP1_8 * cosP2_1 + 0.49083907381030543006e-10 * cosP1_8 * sinP2_1) + t33 * sinP2_1;
    t56 = (-0.61968460126934401797e-6 * cosP1_3 * sinP2_2 - 0.33602615702633443227e-6 * cosP2_2 * sinP1_3) * t12 * t6;
    t14 = t17 * (-0.21798233619712351404e-8 * t35 + 0.15710313834997453979e-5 * t12 * sinP1_3 - 0.12168947258025111227e-2 * t15 * sinP1_1 + 0.65459640979156058243e-8 * t36 - 0.57363772683453556326e-11 * t5 * sinP1_9) + t4 * (t14 * (0.34958175767910133266e-5 * cosP2_3 * sinP1_2 - 0.72360178132375426015e-6 * cosP1_2 * sinP2_3) + t28 * sinP2_3) - t42 * t23 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t43 * t20 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t44 * t19 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t45 * t22 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) + t46 * t25 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t47 * t24 * (cosP1_9 * sinP2_4 - sinP1_9 * cosP2_4) - t48 * t18 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) + t49 * t21 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) + t8 * t33 + t56;
    t28 = t15 * sinP1_1;
    t9 = t2 * ((-0.65525100620135214302e-5 * t28 + 0.61641161922038621508e-7 * t12 * sinP1_3 + 0.25683817467516092295e-9 * t36) * cosP2_4 + (-0.33411691749777571391e-9 * t38 - 0.80188060199466171344e-7 * t39) * sinP2_4) + t4 * (t11 * (0.17619553363556172343e-7 * cosP2_3 * sinP1_4 - 0.24729197703236733110e-8 * cosP1_4 * sinP2_3) + t9 * (0.93351422527318287442e-11 * sinP1_6 * cosP2_3 + 0.46351010663564123576e-10 * cosP1_6 * sinP2_3)) + t6 * ((0.15874251560200984152e-11 * t35 + 0.4857520977421501150e-9 * t36 - 0.61156760578792866675e-4 * t28) * cosP2_2 + (-0.11278259743102061127e-3 * t40 - 0.39108383389222424563e-10 * t37 - 0.11967165317102061917e-7 * t38) * sinP2_2) + t8 * ((t34 + t51 + t30) * cosP2_1 + (t27 + t31 + t53) * sinP2_1) + t14;
    t5 = t5 * t8 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1);
    t14 = t13 * t8 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1);
    t26 = (0.5714730561672354296e-10 * t26 - 0.94087323967373641038e-5 * t52) * cosP2_2 + (0.14079018020120072843e-8 * t29 + 0.17351168835541632503e-4 * t50) * sinP2_2;
    t28 = t2 * (0.82188215896051495341e-8 * cosP1_4 * cosP2_4 + 0.10691741359928822846e-7 * sinP1_4 * sinP2_4) + 0.20947085113329938639e-6 * cosP1_4 * t17;
    t29 = -0.14602736709630133473e-1 * t16 - 0.22945509073381422534e-9 * t32;
    t16 = -0.78630120744162257160e-4 * t16 * t2 * cosP2_4;
    t1 = t11 * t28 + t17 * t29 + t6 * t26 - 0.94666459957703118946e-9 * t10 * t4 * (-cosP1_5 * cosP2_3 + sinP1_5 * sinP2_3) - 0.10823353336500671006e-11 * t7 * t2 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.20564371339351274907e-11 * t13 * t4 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.31993399528562523464e-7 * t10 * t8 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.31911574977338578392e-5 * t12 * t8 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + 0.36038805341074367866e-4 * t15 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.30138709700819768478e-6 * t12 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.33464604959569055868e-3 * t15 * t8 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.86436502340109525396e-14 * t1 * t4 * (cosP1_11 * cosP2_3 + sinP1_11 * sinP2_3) + 0.52914171867336613796e-13 * t3 * t6 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) - 0.37692327994363586774e-11 * t5 + 0.43288001669334433686e-9 * t14 + t16;
    bf[0] = t2 * t54 + t6 * (t12 * (0.61968460126934401797e-6 * sinP1_3 * sinP2_2 - 0.33602615702633443227e-6 * cosP1_3 * cosP2_2) + t15 * (-0.11278259743102061127e-3 * sinP1_1 * sinP2_2 + 0.61156760578792866675e-4 * cosP1_1 * cosP2_2)) + t8 * ((t27 - t53) * cosP2_1 + (t51 - t30) * sinP2_1) + t48 * t18 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) - t44 * t19 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) - t43 * t20 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t49 * t21 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) + t45 * t22 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) + t42 * t23 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) - t47 * t24 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t46 * t25 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t41 + t55;
    bf[1] = t9;
    bf[2] = t1;
}

static void idsbf_10_4_12_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t7, t8, t9;
    t1 = LegP1[98];
    t2 = LegP2[10];
    t3 = LegP1[94];
    t4 = LegP1[91];
    t5 = LegP2[13];
    t6 = LegP1[96];
    t7 = LegP2[11];
    t8 = LegP1[92];
    t9 = LegP1[100];
    t10 = LegP1[99];
    t11 = LegP1[97];
    t12 = LegP2[12];
    t13 = LegP1[95];
    t14 = LegP2[14];
    t15 = LegP1[103];
    t16 = LegP1[102];
    t17 = LegP1[101];
    t18 = LegP1[93];
    t19 = LegP1[104] * t14;
    t20 = t15 * t5;
    t21 = t16 * t12;
    t22 = t17 * t7;
    t23 = t1 * t14;
    t24 = t9 * t14;
    t25 = t10 * t5;
    t26 = t16 * t14;
    t27 = t17 * t5;
    t28 = t9 * t12;
    t29 = sinP1_2 * t18;
    t30 = -0.11241871489494452026e-5 * t29;
    t31 = sinP1_4 * t13;
    t32 = 0.16729162608142792968e-6 * t31;
    t33 = sinP1_6 * t11;
    t34 = cosP1_2 * t18;
    t35 = 0.23607930127938349283e-4 * t34;
    t36 = cosP1_4 * t13;
    t37 = 0.37106037363925743806e-7 * t36;
    t38 = cosP1_6 * t11;
    t39 = cosP1_5 * t6;
    t40 = cosP1_1 * t8;
    t41 = cosP1_7 * t1;
    t42 = sinP1_7 * t1;
    t43 = sinP1_5 * t6;
    t44 = sinP1_1 * t8;
    t45 = cosP1_3 * t3;
    t46 = sinP1_3 * t3;
    t47 = 0.24567026856412701140e-10 * t33;
    t48 = 0.28934498297552736896e-10 * t38;
    t31 = t12 * ((0.15251487572235045534e-11 * t41 - 0.8540833040451625480e-10 * t39 + 0.42615340538637430509e-4 * t40) * cosP2_2 + (0.37574119382506339378e-10 * t42 - 0.21041506854203550052e-8 * t43 - 0.78589329305019677039e-4 * t44) * sinP2_2) + t14 * ((-0.22208592278197081827e-7 * t45 - 0.62954480341168931426e-5 * t40 + 0.24676213642441202032e-9 * t39) * cosP2_4 + (-0.28890823583141336537e-7 * t46 + 0.32100915092379262822e-9 * t43) * sinP2_4) + t5 * ((0.77260569793767232564e-8 * t36 + t48) * cosP2_3 + (0.11578166790462234795e-7 * t31 - t47) * sinP2_3) + t7 * ((-t35 + t37 + 0.44439021913599863830e-9 * t38) * cosP2_1 + (t30 - t32 - 0.92202174868511866004e-11 * sinP1_8 * t10 + 0.13637429574959761654e-8 * t33) * sinP2_1);
    t33 = 0.77990561448929209968e-12;
    t38 = -0.86222898490760626568e-13;
    t49 = -0.51993707632619473300e-13;
    t50 = -0.25996853816309736654e-13;
    t51 = 0.13864988702031859548e-13;
    t52 = 0.10832022423462390274e-14;
    t53 = 0.12035580470513766969e-16;
    t54 = -0.60177902352568834846e-17;
    t55 = 0.18053370705770650456e-15;
    t56 = 0.11554157251693216291e-14;
    t57 = -0.55113330090576641708e-11 * t9;
    t58 = 0.20774978512585747372e-3 * t4;
    t59 = t18 * (-0.23934616991735623961e-5 * sinP1_2 * sinP2_3 + 0.26999708449127701072e-6 * cosP1_2 * cosP2_3) - t58 * cosP2_3;
    t60 = 0.19291051475972479698e-2 * t4;
    t61 = cosP1_8 * t10;
    t62 = t3 * t12 * (-0.32284348892907144326e-6 * cosP1_3 * cosP2_2 + 0.59537370685620967454e-6 * sinP1_3 * sinP2_2);
    t63 = t10 * (0.92202174868511866004e-11 * sinP1_8 * cosP2_1 + 0.12669133426481611663e-10 * cosP1_8 * sinP2_1) + t11 * (0.13637429574959761654e-8 * cosP2_1 * sinP1_6 - 0.44439021913599863830e-9 * cosP1_6 * sinP2_1);
    t64 = t12 * (0.8540833040451625480e-10 * cosP2_2 * sinP1_5 - 0.21041506854203550052e-8 * cosP1_5 * sinP2_2) + t14 * (-0.32100915092379262822e-9 * cosP1_5 * sinP2_4 + 0.24676213642441202032e-9 * sinP1_5 * cosP2_4);
    t63 = -t33 * t23 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t38 * t22 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) + t49 * t25 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + t50 * t24 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t51 * t28 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t52 * t27 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) - t53 * t26 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) + t54 * t19 * (sinP1_13 * cosP2_4 - cosP1_13 * sinP2_4) + t55 * t20 * (sinP1_12 * cosP2_3 - cosP1_12 * sinP2_3) + t56 * t21 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) + t6 * t64 + t7 * t63 + t3 * t14 * (0.22208592278197081827e-7 * sinP1_3 * cosP2_4 - 0.28890823583141336537e-7 * cosP1_3 * sinP2_4) + (-0.77260569793767232564e-8 * cosP1_4 * sinP2_3 + 0.11578166790462234795e-7 * cosP2_3 * sinP1_4) * t13 * t5;
    t29 = t12 * ((0.15251487572235045534e-11 * t42 - 0.32284348892907144326e-6 * t46 - 0.42615340538637430509e-4 * t44) * cosP2_2 + (-0.59537370685620967454e-6 * t45 - 0.78589329305019677039e-4 * t40 - 0.37574119382506339378e-10 * t41) * sinP2_2) + t2 * (t57 * sinP1_9 - 0.16533999027172992513e-9 * t42 + 0.62891588752416514923e-8 * t43 + 0.56602429877174863427e-6 * t46) + t5 * ((0.23934616991735623961e-5 * t29 + t47) * cosP2_3 + (0.26999708449127701072e-6 * t34 + t58 + t48) * sinP2_3) + t7 * ((t30 + t32) * cosP2_1 + (t35 + t37 + t60) * sinP2_1) + t63 + t44 * (-0.11691546349074230122e-2 * t2 - 0.62954480341168931426e-5 * cosP2_4 * t14);
    t30 = t1 * t5 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3);
    t32 = t6 * t7 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1);
    t34 = t3 * t7 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t11 = t11 * (-0.52603767135508875130e-9 * sinP1_6 * sinP2_2 - 0.2135208260112906374e-10 * cosP1_6 * cosP2_2) + t18 * (-0.13098221550836612839e-4 * sinP1_2 * sinP2_2 + 0.71025567564395717515e-5 * cosP1_2 * cosP2_2);
    t13 = t13 * (-0.57781647166282673080e-8 * sinP1_4 * sinP2_4 - 0.44417184556394163660e-8 * cosP1_4 * cosP2_4) + 0.81840824443519610860e-4 * cosP2_4 * t4;
    t4 = 0.15199010253796499161e-1 * t4 + 0.55113330090576641708e-10 * t61 - 0.11320485975434972686e-6 * t36;
    t1 = 0.12035580470513766968e-16 * t15 * t14 * (cosP1_12 * cosP2_4 + sinP1_12 * sinP2_4) - 0.69324943510159297736e-14 * t17 * t12 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) - 0.14465065413055798431e-7 * t32 + t13 * t14 + t4 * t2 - 0.19304223769838958049e-6 * t3 * t5 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) + t11 * t12 - 0.42801220123172350426e-9 * t6 * t5 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) - 0.72213482823082601822e-15 * t16 * t5 * (cosP1_11 * cosP2_3 + sinP1_11 * sinP2_3) + 0.25996853816309736656e-12 * t10 * t14 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.62392449159143367960e-12 * t30 + 0.68978318792608501254e-12 * t9 * t7 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) - 0.13133610547999678959e-9 * t1 * t7 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) + 0.29678540732265353382e-3 * t8 * t7 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) - 0.20439766344535367347e-5 * t34 - 0.31961505403978072881e-4 * t8 * t5 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3);
    bf[0] = t2 * (0.62891588752416514923e-8 * t39 + 0.16533999027172992513e-9 * t41 - 0.56602429877174863427e-6 * t45 - 0.11691546349074230122e-2 * t40 + t57 * cosP1_9) + t5 * t59 + t54 * t19 * (cosP1_13 * cosP2_4 + sinP1_13 * sinP2_4) + t55 * t20 * (cosP1_12 * cosP2_3 + sinP1_12 * sinP2_3) + t56 * t21 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) + t38 * t22 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) + t33 * t23 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t50 * t24 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t49 * t25 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t53 * t26 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) - t52 * t27 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) - t51 * t28 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t31 + (0.12669133426481611663e-10 * t61 + t60) * t7 * cosP2_1 + t62;
    bf[1] = t29;
    bf[2] = t1;
}

static void idsbf_10_4_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t7, t8, t9;
    t1 = LegP1[102];
    t2 = LegP2[14];
    t3 = LegP1[101];
    t4 = LegP2[13];
    t5 = LegP1[100];
    t6 = LegP2[12];
    t7 = LegP1[99];
    t8 = LegP2[11];
    t9 = LegP1[97];
    t10 = LegP1[96];
    t11 = LegP1[95];
    t12 = LegP1[94];
    t13 = LegP1[103];
    t14 = LegP1[98];
    t15 = LegP1[93];
    t16 = LegP1[92];
    t17 = LegP2[10];
    t18 = LegP1[91];
    t19 = t5 * t2;
    t20 = t7 * t4;
    t21 = t1 * t2;
    t22 = t3 * t4;
    t23 = t5 * t6;
    t24 = LegP1[104] * t2;
    t25 = t13 * t4;
    t26 = t1 * t6;
    t27 = t3 * t8;
    t28 = t14 * t2;
    t29 = 0.27809156899001652064e-12;
    t30 = -0.18136406673261946999e-12;
    t31 = 0.10795480162655920833e-13;
    t32 = -0.32386440487967762494e-14;
    t33 = 0.48729597956432975983e-15;
    t34 = cosP1_3 * t12;
    t35 = t16 * cosP1_1;
    t36 = sinP1_3 * t12;
    t37 = sinP1_1 * t16;
    t38 = sinP2_1 * t8;
    t39 = -0.45341016683154867500e-12 * t5;
    t40 = 0.20947549707617548785e-9 * t14;
    t41 = -0.27422246889972063864e-7 * t10;
    t42 = -0.42821483853504776043e-2 * cosP2_1 * t18 + 0.12723922556947037630e-6 * sinP1_4 * sinP2_1 * t11;
    t43 = 0.47056575663192061586e-4 * t18;
    t42 = t15 * ((0.39817102484239436711e-5 * cosP2_1 * t8 - 0.62244147702635002099e-6 * t4 * cosP2_3) * cosP1_2 + (-0.10705993404853220361e-5 * sinP2_3 * t4 + 0.36800655326342509703e-4 * t38) * sinP1_2) + t17 * (t39 * cosP1_9 + t40 * cosP1_7 + t41 * cosP1_5 + 0.14273827951168258679e-2 * t35 + 0.83912075483314515408e-5 * t34) + t6 * ((0.14076753403518992781e-6 * t34 - 0.33784208168445582670e-4 * t35) * cosP2_2 + (-0.91699993600066581550e-4 * t37 + 0.38208330666694408981e-6 * t36) * sinP2_2) + t8 * t42 + t32 * t19 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4) + t30 * t20 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3) + t33 * t21 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) + t31 * t22 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t29 * t23 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) - t43 * t4 * cosP2_3 - 0.78427626105320102648e-6 * t16 * cosP1_1 * t2 * cosP2_4;
    t44 = 0.14962535505441106275e-11;
    t45 = -0.15113672227718289166e-13;
    t46 = -0.50378907425727630550e-15;
    t47 = -0.17992466937759868055e-16;
    t48 = -0.74968612240666116891e-18;
    t49 = 0.24789711188534745730e-6 * cosP1_4 * t11;
    t50 = 0.81505011589639189805e-9 * cosP1_6 * t9;
    t51 = cosP1_8 * t7;
    t52 = 0.82822923807896224631e-11 * t51;
    t53 = -0.28183975970249065633e-9 * sinP1_6 * t9;
    t54 = 0.70127439136612861733e-11 * sinP1_8 * t7;
    t55 = sinP1_7 * t14;
    t56 = sinP1_5 * t10;
    t57 = t14 * cosP1_7;
    t58 = t10 * cosP1_5;
    t59 = t11 * (0.34843664500670852572e-8 * sinP1_4 * sinP2_3 + 0.27400483201964149524e-8 * cosP1_4 * cosP2_3) + t9 * (0.75084723627304460572e-10 * sinP1_6 * sinP2_3 + 0.77261092428095894212e-10 * cosP1_6 * cosP2_3);
    t35 = t2 * (t10 * (-0.36726223513355442669e-10 * cosP1_5 * sinP2_4 + 0.34005762512366150617e-10 * cosP2_4 * sinP1_5) + t12 * (0.10405763328784042088e-7 * cosP2_4 * sinP1_3 - 0.11238224395086765456e-7 * cosP1_3 * sinP2_4)) + t4 * (t11 * (-0.27400483201964149524e-8 * cosP1_4 * sinP2_3 + 0.34843664500670852572e-8 * cosP2_3 * sinP1_4) + t9 * (0.77261092428095894212e-10 * cosP1_6 * sinP2_3 - 0.75084723627304460572e-10 * sinP1_6 * cosP2_3)) + t6 * ((-0.11002753381778914513e-10 * t55 - 0.41810462850759875148e-8 * t56 + 0.33784208168445582670e-4 * t37) * cosP2_2 + (0.93100220922744661265e-11 * t57 + 0.35378083950642971280e-8 * t58 - 0.91699993600066581550e-4 * t35) * sinP2_2) + t8 * ((-0.12723922556947037630e-6 * sinP1_4 * t11 + t53 - t54 + 0.36800655326342509703e-4 * sinP1_2 * t15) * cosP2_1 + (-0.39817102484239436711e-5 * cosP1_2 * t15 + t49 + t50 + t52) * sinP2_1);
    t43 = t15 * (-0.62244147702635002099e-6 * cosP1_2 * sinP2_3 + 0.10705993404853220361e-5 * cosP2_3 * sinP1_2) + t43 * sinP2_3;
    t60 = t2 * cosP2_4;
    t61 = t12 * t6 * (0.14076753403518992781e-6 * sinP1_3 * cosP2_2 - 0.38208330666694408981e-6 * cosP1_3 * sinP2_2);
    t19 = t17 * (t41 * sinP1_5 - t40 * sinP1_7 + t39 * sinP1_9 - 0.83912075483314515408e-5 * t36) - t29 * t23 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + t30 * t20 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) - t31 * t22 * (sinP1_10 * cosP2_3 - cosP1_10 * sinP2_3) + t32 * t19 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) - t33 * t21 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) + t43 * t4 - t44 * t28 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t45 * t27 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) + t46 * t26 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) + t47 * t25 * (sinP1_12 * cosP2_3 - cosP1_12 * sinP2_3) + t48 * t24 * (sinP1_13 * cosP2_4 - cosP1_13 * sinP2_4) + t35 - 0.42821483853504776043e-2 * t38 * t18 + t37 * (0.14273827951168258679e-2 * t17 - 0.78427626105320102648e-6 * t60) + t61;
    t20 = t12 * t8 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1);
    t12 = t12 * t4 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3);
    t21 = t16 * t8 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1);
    t9 = t15 * (0.12226665813342210874e-4 * sinP1_2 * sinP2_2 + 0.45045610891260776901e-5 * cosP1_2 * cosP2_2) + t9 * (-0.37240088369097864504e-9 * sinP1_6 * sinP2_2 - 0.44011013527115658050e-9 * cosP1_6 * cosP2_2);
    t15 = t2 * (0.13221440464807959360e-8 * sinP1_4 * sinP2_4 + 0.12242074504451814224e-8 * cosP1_4 * cosP2_4) - 0.98720088803899429910e-6 * cosP1_4 * t17;
    t22 = 0.19983359131635562152e-1 * t17 - 0.10979867654744814370e-4 * t60;
    t17 = -0.19950047340588141699e-10 * t51 * t17;
    t1 = -0.76172908027700177394e-11 * t14 * t4 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) - 0.14250033814705815499e-12 * t7 * t2 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) - 0.24181875564349262664e-13 * t3 * t6 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) - 0.38983678365146380784e-16 * t13 * t2 * (cosP1_12 * cosP2_4 + sinP1_12 * sinP2_4) - 0.89962334688799340276e-15 * t1 * t4 * (cosP1_11 * cosP2_3 + sinP1_11 * sinP2_3) - 0.20840907636378768534e-7 * t10 * t8 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.61173548362149680061e-3 * t21 - 0.69522892247504130160e-12 * t5 * t8 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) + t22 * t18 + t17 + 0.20511840673699103770e-5 * t20 + t9 * t6 + t15 * t11 + 0.67223679518845802266e-5 * t16 * t4 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) + 0.10581505109447950357e-6 * t12 + 0.26660517809695062086e-10 * t14 * t8 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) + 0.41351007215037239156e-10 * t10 * t4 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3);
    bf[0] = t2 * ((0.34005762512366150617e-10 * t58 - 0.10405763328784042088e-7 * t34) * cosP2_4 + (0.36726223513355442669e-10 * t56 - 0.11238224395086765456e-7 * t36) * sinP2_4) + t4 * t59 + t6 * ((-0.11002753381778914513e-10 * t57 + 0.41810462850759875148e-8 * t58) * cosP2_2 + (0.35378083950642971280e-8 * t56 - 0.93100220922744661265e-11 * t55) * sinP2_2) + t8 * ((t49 - t50 + t52) * cosP2_1 + (t53 + t54) * sinP2_1) + t48 * t24 * (cosP1_13 * cosP2_4 + sinP1_13 * sinP2_4) + t47 * t25 * (cosP1_12 * cosP2_3 + sinP1_12 * sinP2_3) + t46 * t26 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) + t45 * t27 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) + t44 * t28 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4) + t42;
    bf[1] = t19;
    bf[2] = t1;
}

static void idsbf_10_6_14_13_0(Eigen::Ref<Eigen::Vector3cd> bf) {
    double t1, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t2, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t3, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t4, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t5, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t6, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t7, t70, t71, t72, t73, t74, t75, t76, t77, t8, t9;
    t1 = LegP1[104];
    t2 = LegP2[27];
    t3 = LegP1[103];
    t4 = LegP2[26];
    t5 = LegP1[102];
    t6 = LegP2[25];
    t7 = LegP1[101];
    t8 = LegP2[24];
    t9 = LegP1[100];
    t10 = LegP2[23];
    t11 = LegP1[99];
    t12 = LegP2[22];
    t13 = LegP1[97];
    t14 = LegP1[96];
    t15 = LegP1[95];
    t16 = LegP1[94];
    t17 = LegP1[93];
    t18 = LegP1[92];
    t19 = LegP1[98];
    t20 = LegP2[21];
    t21 = LegP1[91];
    t22 = t1 * t2;
    t23 = t3 * t4;
    t24 = t5 * t6;
    t25 = t7 * t8;
    t26 = t9 * t10;
    t27 = t1 * t6;
    t28 = t3 * t8;
    t29 = t5 * t10;
    t30 = t7 * t12;
    t31 = t9 * t2;
    t32 = t11 * t4;
    t33 = t19 * t6;
    t34 = t33 * (cosP1_7 * cosP2_4 + sinP1_7 * sinP2_4);
    t35 = t5 * t2;
    t36 = t7 * t4;
    t37 = t36 * (cosP1_10 * cosP2_5 + sinP1_10 * sinP2_5);
    t38 = t9 * t6;
    t39 = t38 * (cosP1_9 * cosP2_4 + sinP1_9 * sinP2_4);
    t40 = t11 * t8;
    t41 = t40 * (cosP1_8 * cosP2_3 + sinP1_8 * sinP2_3);
    t42 = t14 * t2;
    t43 = t42 * (cosP1_5 * cosP2_6 + sinP1_5 * sinP2_6);
    t44 = t13 * t4;
    t45 = t44 * (cosP1_6 * cosP2_5 + sinP1_6 * sinP2_5);
    t46 = t19 * t2;
    t47 = t46 * (cosP1_7 * cosP2_6 + sinP1_7 * sinP2_6);
    t48 = 0.20619153321616254322e-17;
    t49 = 0.85404777071783301904e-19;
    t50 = 0.19634695574218606802e-2;
    t51 = cosP1_6 * t13;
    t52 = 0.71935145574951584085e-9 * t51;
    t53 = cosP1_8 * t11;
    t54 = 0.11223300409470746819e-10 * t53;
    t55 = sinP1_6 * t13;
    t56 = 0.10664583333921735564e-8 * t55;
    t57 = 0.69713723400857720640e-11 * sinP1_8 * t11;
    t58 = 0.62954443820070122566e-9 * t19;
    t59 = -0.38677623508753288294e-8 * t14;
    t60 = 0.11835352793678506217e-5 * t16;
    t61 = -0.11614890339678612474e-2 * t18;
    t62 = -0.13626502991357169386e-11 * t9;
    t63 = (-0.53423467471465479452e-8 * cosP1_3 * cosP2_4 - 0.86168987215880217776e-8 * sinP1_3 * sinP2_4) * t16 * t6;
    t64 = (-0.25609954719496542908e-9 * cosP1_5 * cosP2_2 - 0.25703421707523902544e-8 * sinP1_5 * sinP2_2) * t14 * t10;
    t63 = t12 * ((t21 * t50 - t52 + t54) * cosP2_1 + (t56 + t57) * sinP2_1) + t20 * (t61 * cosP1_1 + t60 * cosP1_3 + t59 * cosP1_5 + t58 * cosP1_7 + t62 * cosP1_9) + t4 * (t17 * (-0.51402514417707590528e-8 * sinP1_2 * sinP2_5 - 0.88051805899963987820e-8 * cosP1_2 * cosP2_5) + 0.14642703633355515727e-5 * cosP2_5 * t21) + t8 * (t15 * (0.23586886360220140040e-8 * sinP1_4 * sinP2_3 - 0.45934105300287931125e-9 * cosP1_4 * cosP2_3) - 0.77538965729173154710e-4 * cosP2_3 * t21) + t49 * t22 * (cosP1_13 * cosP2_6 + sinP1_13 * sinP2_6) - t48 * t23 * (cosP1_12 * cosP2_5 + sinP1_12 * sinP2_5) - 0.47582661511422125354e-16 * t24 * (cosP1_11 * cosP2_4 + sinP1_11 * sinP2_4) + (0.12194785507384393004e-7 * sinP1_1 * sinP2_6 + 0.16168805065701351747e-7 * cosP1_1 * cosP2_6) * t18 * t2 + t63 + t64;
    t64 = 0.66738708994974343439e-13;
    t65 = -0.17978925641854267672e-13;
    t66 = 0.54327198763605240964e-14;
    t67 = 0.26939106824928218658e-15;
    t68 = -0.18057010009462755262e-15;
    t69 = -0.10736600546167043669e-16;
    t70 = -0.48802729755304743946e-18;
    t71 = 0.14445608007570204208e-15;
    t72 = t19 * t10 * (0.67640583440852375111e-11 * sinP1_7 * sinP2_2 + 0.6739461768288563923e-12 * cosP1_7 * cosP2_2);
    t73 = -0.67370021107088965612e-10 * t16 * cosP1_3 * t2 * cosP2_6;
    t74 = (0.17458649500478914856e-10 * cosP1_5 * cosP2_4 + 0.28159799743751705160e-10 * sinP1_5 * sinP2_4) * t14 * t6;
    t75 = (-0.13431944076805481280e-9 * sinP1_4 * sinP2_5 - 0.12084543654663701968e-9 * cosP1_4 * cosP2_5) * t15 * t4;
    t76 = (-0.22542761717651346104e-10 * sinP1_6 * sinP2_3 - 0.14302908825765693136e-10 * cosP1_6 * cosP2_3) * t13 * t8;
    t34 = t63 + 0.73204094632957115922e-19 * t27 * (cosP1_13 * cosP2_4 + sinP1_13 * sinP2_4) - 0.20251180739261256548e-11 * t43 + t75 - t64 * t34 + t65 * t30 * (cosP1_10 * cosP2_1 + sinP1_10 * sinP2_1) + 0.73204094632957115940e-16 * t25 * (cosP1_10 * cosP2_3 + sinP1_10 * sinP2_3) + t74 + 0.99674695252234409041e-13 * t26 * (cosP1_9 * cosP2_2 + sinP1_9 * sinP2_2) + t72 + t70 * t35 * (cosP1_11 * cosP2_6 + sinP1_11 * sinP2_6) - 0.12200682438826185990e-18 * t28 * (cosP1_12 * cosP2_3 + sinP1_12 * sinP2_3) + t71 * t39 + 0.53292580892792780384e-14 * t47 + t73 + t76 + t67 * t31 * (cosP1_9 * cosP2_6 + sinP1_9 * sinP2_6) + t68 * t29 * (cosP1_11 * cosP2_2 + sinP1_11 * sinP2_2) + 0.43863893504067903859e-13 * t41 + 0.37304806624954946270e-12 * t45 + t69 * t37 + t66 * t32 * (cosP1_8 * cosP2_5 + sinP1_8 * sinP2_5);
    t37 = sinP1_2 * t17;
    t39 = 0.31762546124728602425e-5 * t37;
    t41 = sinP1_4 * t15;
    t43 = 0.10540714978209687360e-6 * t41;
    t45 = cosP1_2 * t17;
    t47 = 0.21875964683157247673e-4 * t45;
    t63 = cosP1_4 * t15;
    t72 = -0.13303402371692065092e-7 * t63;
    t73 = 0.62754444142952210256e-6 * sinP1_2;
    t74 = 0.11092189884831746612e-6 * cosP1_2;
    t75 = -0.15458156862331730889e-5 * t18;
    t76 = t17 * t8;
    t77 = (0.17458649500478914856e-10 * cosP2_4 * sinP1_5 - 0.28159799743751705160e-10 * cosP1_5 * sinP2_4) * t14 * t6;
    t41 = t10 * (t14 * (0.25609954719496542908e-9 * cosP2_2 * sinP1_5 - 0.25703421707523902544e-8 * cosP1_5 * sinP2_2) + t19 * (0.6739461768288563923e-12 * sinP1_7 * cosP2_2 - 0.67640583440852375111e-11 * cosP1_7 * sinP2_2)) + t12 * ((t39 + t43 + t56 - t57) * cosP2_1 + (t52 + t54 + t72 + t47) * sinP2_1) + t2 * (t16 * (-0.67370021107088965612e-10 * sinP1_3 * cosP2_6 + 0.50811606280768304184e-10 * cosP1_3 * sinP2_6) + t18 * (-0.16168805065701351747e-7 * cosP2_6 * sinP1_1 + 0.12194785507384393004e-7 * cosP1_1 * sinP2_6)) + t4 * ((0.13431944076805481280e-9 * t41 - 0.51402514417707590528e-8 * t37) * cosP2_5 + (0.88051805899963987820e-8 * t45 - 0.12084543654663701968e-9 * t63) * sinP2_5) + t8 * (t13 * (0.22542761717651346104e-10 * sinP1_6 * cosP2_3 - 0.14302908825765693136e-10 * cosP1_6 * sinP2_3) + 0.23586886360220140040e-8 * t41 * cosP2_3) + t77;
    t52 = t16 * (-0.16897375318059460849e-6 * cosP2_2 * sinP1_3 - 0.13351926496423742755e-6 * cosP1_3 * sinP2_2) + t18 * (-0.32044623591416982612e-4 * cosP1_1 * sinP2_2 - 0.40553700763342706038e-4 * cosP2_2 * sinP1_1);
    t54 = sinP2_3 * t8;
    t50 = 0.14642703633355515727e-5 * sinP2_5 * t4 + sinP2_1 * t12 * t50 + 0.77538965729173154710e-4 * t54;
    t22 = t10 * t52 + t20 * (t61 * sinP1_1 - t60 * sinP1_3 + t59 * sinP1_5 - t58 * sinP1_7 + t62 * sinP1_9) + t21 * t50 + t48 * t23 * (sinP1_12 * cosP2_5 - cosP1_12 * sinP2_5) - t49 * t22 * (sinP1_13 * cosP2_6 - cosP1_13 * sinP2_6) + t64 * t33 * (-cosP1_7 * sinP2_4 + sinP1_7 * cosP2_4) + t65 * t30 * (sinP1_10 * cosP2_1 - cosP1_10 * sinP2_1) - t66 * t32 * (-cosP1_8 * sinP2_5 + sinP1_8 * cosP2_5) - t67 * t31 * (-cosP1_9 * sinP2_6 + sinP1_9 * cosP2_6) + t68 * t29 * (sinP1_11 * cosP2_2 - cosP1_11 * sinP2_2) + t69 * t36 * (sinP1_10 * cosP2_5 - cosP1_10 * sinP2_5) + t70 * t35 * (sinP1_11 * cosP2_6 - cosP1_11 * sinP2_6) + t71 * t38 * (-cosP1_9 * sinP2_4 + sinP1_9 * cosP2_4) + t41 + t75 * sinP1_1 * t6 * cosP2_4 + t76 * (t73 * cosP2_3 + t74 * sinP2_3);
    t22 = 0.73204094632957115940e-16 * t25 * (-sinP1_10 * cosP2_3 + cosP1_10 * sinP2_3) - 0.99674695252234409041e-13 * t26 * (-cosP1_9 * sinP2_2 + sinP1_9 * cosP2_2) + 0.73204094632957115922e-19 * t27 * (sinP1_13 * cosP2_4 - cosP1_13 * sinP2_4) - 0.12200682438826185990e-18 * t28 * (sinP1_12 * cosP2_3 - cosP1_12 * sinP2_3) + 0.43863893504067903859e-13 * t40 * (-cosP1_8 * sinP2_3 + sinP1_8 * cosP2_3) + 0.20251180739261256548e-11 * t42 * (-cosP1_5 * sinP2_6 + sinP1_5 * cosP2_6) + 0.37304806624954946270e-12 * t44 * (-cosP1_6 * sinP2_5 + sinP1_6 * cosP2_5) + 0.53292580892792780384e-14 * t46 * (-cosP1_7 * sinP2_6 + sinP1_7 * cosP2_6) + 0.47582661511422125354e-16 * t24 * (sinP1_11 * cosP2_4 - cosP1_11 * sinP2_4) + t22 + t16 * t6 * (0.53423467471465479452e-8 * sinP1_3 * cosP2_4 - 0.86168987215880217776e-8 * cosP1_3 * sinP2_4) + 0.45934105300287931125e-9 * t54 * t63;
    t23 = (-0.54071601017790274721e-5 * t45 + 0.26957847073154255690e-10 * t51) * cosP2_2 + (0.42726164788555976819e-5 * t37 + 0.27056233376340950044e-9 * t55) * sinP2_2;
    t24 = t6 * (0.10137527907750613857e-8 * sinP1_4 * sinP2_4 + 0.62851138201724093481e-9 * cosP1_4 * cosP2_4) - 0.13923944463151183787e-6 * cosP1_4 * t20;
    t25 = -0.16260846475550057465e-1 * t20 - 0.21641419607264423245e-4 * t6 * cosP2_4;
    t17 = (-0.16259714009845857340e-8 * sinP1_2 * sinP2_6 - 0.21558406754268468997e-8 * cosP1_2 * cosP2_6) * t17 * t2;
    t20 = -0.59956613161971545299e-10 * t53 * t20;
    t9 = t10 * t23 + t15 * t24 + t21 * t25 - 0.82703057952529631284e-12 * t9 * t12 * (cosP1_9 * cosP2_1 + sinP1_9 * sinP2_1) + 0.89290489457084469860e-10 * t19 * t12 * (cosP1_7 * cosP2_1 - sinP1_7 * sinP2_1) + 0.15655720494582740640e-9 * t14 * t8 * (cosP1_5 * cosP2_3 - sinP1_5 * sinP2_3) + 0.22905807176410248310e-9 * t16 * t4 * (cosP1_3 * cosP2_5 - sinP1_3 * sinP2_5) - 0.23425310282546277096e-16 * t7 * t2 * (cosP1_10 * cosP2_6 + sinP1_10 * sinP2_6) - 0.49388362512368400874e-15 * t9 * t4 * (cosP1_9 * cosP2_5 + sinP1_9 * sinP2_5) + 0.63560675233308898520e-14 * t11 * t6 * (cosP1_8 * cosP2_4 + sinP1_8 * sinP2_4) + 0.18422835271708519620e-11 * t19 * t8 * (cosP1_7 * cosP2_3 + sinP1_7 * sinP2_3) + 0.65950306752104965938e-8 * t14 * t12 * (cosP1_5 * cosP2_1 + sinP1_5 * sinP2_1) + 0.15657637059768817447e-5 * t16 * t12 * (cosP1_3 * cosP2_1 - sinP1_3 * sinP2_1) + t17 + t20;
    t1 = 0.11076995104167593531e-4 * t18 * t8 * (cosP1_1 * cosP2_3 - sinP1_1 * sinP2_3) - 0.20918148047650736752e-6 * t18 * t4 * (cosP1_1 * cosP2_5 + sinP1_1 * sinP2_5) + 0.21317032357117112154e-12 * t13 * t2 * (cosP1_6 * cosP2_6 + sinP1_6 * sinP2_6) + 0.14175826517482879582e-10 * t14 * t4 * (cosP1_5 * cosP2_5 + sinP1_5 * sinP2_5) + 0.32288908911325289777e-7 * t16 * t8 * (cosP1_3 * cosP2_3 + sinP1_3 * sinP2_3) - 0.28049565106026581145e-3 * t18 * t12 * (cosP1_1 * cosP2_1 + sinP1_1 * sinP2_1) + 0.15860887170474041784e-18 * t1 * t4 * (cosP1_13 * cosP2_5 + sinP1_13 * sinP2_5) + 0.38066129209137700282e-17 * t3 * t6 * (cosP1_12 * cosP2_4 + sinP1_12 * sinP2_4) - 0.61003412194130929951e-17 * t5 * t8 * (cosP1_11 * cosP2_3 + sinP1_11 * sinP2_3) - 0.86673648045421225254e-14 * t7 * t10 * (cosP1_10 * cosP2_2 + sinP1_10 * sinP2_2) + t9;
    bf[0] = t10 * (t16 * (0.13351926496423742755e-6 * sinP1_3 * sinP2_2 - 0.16897375318059460849e-6 * cosP1_3 * cosP2_2) + t18 * (-0.32044623591416982612e-4 * sinP1_1 * sinP2_2 + 0.40553700763342706038e-4 * cosP1_1 * cosP2_2)) + t12 * ((t72 - t47) * cosP2_1 + (t39 - t43) * sinP2_1) + t34 + t75 * cosP1_1 * t6 * cosP2_4 + t76 * (t74 * cosP2_3 - t73 * sinP2_3) - 0.50811606280768304184e-10 * t16 * sinP1_3 * t2 * sinP2_6;
    bf[1] = t22;
    bf[2] = t1;
}


static double radcoeff_0_0_0_1_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.149047209600000006e2 + pow(R - 0.475e1, 2) * (-0.622301180414678967e0) + pow(R - 0.475e1, 3) * (-0.190137322383412837e2) : (R < 0.525e1 ? 0.339498644944816519e2 + R * (-0.387622538489633062e1) + pow(R - 0.50e1, 2) * (-0.148826003591706417e2) + pow(R - 0.50e1, 3) * 0.228481688750238625e2 : (R < 0.55e1 ? 0.499523643171770644e2 + R * (-0.703349390041467792e1) + pow(R - 0.525e1, 2) * 0.225352629709725427e1 + pow(R - 0.525e1, 3) * (-0.608756534175416419e1) : (R < 0.575e1 ? 0.500786959439472597e2 + R * (-0.704814925344495613e1) + pow(R - 0.55e1, 2) * (-0.231214770921836887e1) + pow(R - 0.55e1, 3) * 0.267493607599277627e1 : (R < 0.60e1 ? 0.537394917953815963e2 + R * (-0.770267259380549429e1) + pow(R - 0.575e1, 2) * (-0.305945652223786280e0) + pow(R - 0.575e1, 3) * 0.194848740578305724e1 : (R < 0.625e1 ? 0.524766039329983869e2 + R * (-0.749030403133306422e1) + pow(R - 0.60e1, 2) * 0.115541990211350676e1 + pow(R - 0.60e1, 3) * 0.164876754887500532e1 : (R < 0.65e1 ? 0.470317430043890425e2 + R * (-0.660345016486224701e1) + pow(R - 0.625e1, 2) * 0.239199556376976075e1 + pow(R - 0.625e1, 3) * 0.306488478716909540e0 : (R < 0.675e1 ? 0.390385131939166499e2 + R * (-0.534998579321794665e1) + pow(R - 0.65e1, 2) * 0.262186192280744290e1 + pow(R - 0.65e1, 3) * (-0.357709303742617835e0) : (R < 0.70e1 ? 0.308007322042952723e2 + R * (-0.410612532626596582e1) + pow(R - 0.675e1, 2) * 0.235357994500047951e1 + pow(R - 0.675e1, 3) * (-0.637051391746468298e0) : (R < 0.725e1 ? 0.235364771670273250e2 + R * (-0.304878248971818921e1) + pow(R - 0.70e1, 2) * 0.187579140119062826e1 + pow(R - 0.70e1, 3) * (-0.590876681271488735e0) : (R < 0.75e1 ? 0.176479608407442718e2 + R * (-0.222167616686127900e1) + pow(R - 0.725e1, 2) * 0.143263389023701171e1 + pow(R - 0.725e1, 3) * (-0.484835483167584180e0) : (R < 0.775e1 ? 0.130393477142752143e2 + R * (-0.159626587483669535e1) + pow(R - 0.75e1, 2) * 0.106900727786132355e1 + pow(R - 0.75e1, 3) * (-0.378444995658169081e0) : (R < 0.80e1 ? 0.950777214868753617e1 + R * (-0.113272067259194009e1) + pow(R - 0.775e1, 2) * 0.785173531117696721e0 + pow(R - 0.775e1, 3) * (-0.287995842999743790e0) : (R < 0.825e1 ? 0.684364519936435123e1 + R * (-0.794133127595543886e0) + pow(R - 0.80e1, 2) * 0.569176648867888879e0 + pow(R - 0.80e1, 3) * (-0.215350441942853493e0) : (R < 0.85e1 ? 0.486112042756354690e1 + R * (-0.549923011025884478e0) + pow(R - 0.825e1, 2) * 0.407663817410748752e0 + pow(R - 0.825e1, 3) * (-0.158941326828843321e0) : (R < 0.875e1 ? 0.340485747355780477e1 + R * (-0.375892601100918211e0) + pow(R - 0.85e1, 2) * 0.288457822289116261e0 + pow(R - 0.85e1, 3) * (-0.115952609141773327e0) : (R < 0.90e1 ? 0.234930610479137281e1 + R * (-0.253404804170442588e0) + pow(R - 0.875e1, 2) * 0.201493365432786259e0 + pow(R - 0.875e1, 3) * (-0.834641015640635864e-1) : (R < 0.925e1 ? 0.159472084048580243e1 + R * (-0.168307640497311367e0) + pow(R - 0.90e1, 2) * 0.138895289259738569e0 + pow(R - 0.90e1, 3) * (-0.586174486019723356e-1) : (R < 0.95e1 ? 0.106175982302288507e1 + R * (-0.109850767480311903e0) + pow(R - 0.925e1, 2) * 0.949322028082593139e-1 + pow(R - 0.925e1, 3) * (-0.435102614680466376e-1) : (R < 0.100e2 ? 0.693587927763689382e0 + R * (-0.705428401014409900e-1) + pow(R - 0.95e1, 2) * 0.622995067072243322e-1 + pow(R - 0.95e1, 3) * (-0.240634045286846968e-1) : (R < 0.105e2 ? 0.263635345771301821e0 + R * (-0.262908867907301821e-1) + pow(R - 0.100e2, 2) * 0.262043999141972871e-1 + pow(R - 0.100e2, 3) * (-0.101223196414738491e-1) : (R < 0.110e2 ? 0.734882238722019548e-1 + R * (-0.767822660763828237e-2) + pow(R - 0.105e2, 2) * 0.110209204519865125e-1 + pow(R - 0.105e2, 3) * (-0.491168922541989489e-2) : (R < 0.120e2 ? -0.507919603011639745e-2 + R * (-0.341073074716691065e-3) + pow(R - 0.110e2, 2) * 0.365338661385667058e-2 + pow(R - 0.110e2, 3) * (-0.133789988013997938e-2) : (R < 0.140e2 ? -0.422805923439205367e-1 + R * 0.295200051257671087e-2 + pow(R - 0.120e2, 2) * (-0.360313026563268150e-3) + pow(R - 0.120e2, 3) * (-0.811840073754369995e-5) : (R < 0.160e2 ? -0.222453708446235972e-1 + R * 0.141332759747311420e-2 + pow(R - 0.140e2, 2) * (-0.409023430988530350e-3) + pow(R - 0.140e2, 3) * 0.554721937509866292e-4 : (R < 0.180e2 ? -0.791084863529331779e-2 + R * 0.442900198530832376e-3 + pow(R - 0.160e2, 2) * (-0.761902684826105476e-4) + pow(R - 0.160e2, 3) * 0.117245032109718591e-5 : (R < 0.200e2 ? -0.297378004526401485e-2 + R * 0.152208528453556390e-3 + pow(R - 0.180e2, 2) * (-0.691555665560274321e-4) + pow(R - 0.180e2, 3) * 0.117871971396246160e-4 : (R < 0.250e2 ? -0.452586723398841527e-3 + R * 0.170326279049420766e-4 + pow(R - 0.200e2, 2) * 0.156761628172027289e-5 + pow(R - 0.200e2, 3) * (-0.287149417021737648e-6) : -0.302788906997862031e-3 + R * 0.111725844455144800e-4 + pow(R - 0.250e2, 2) * (-0.273962497360579230e-5) + pow(R - 0.250e2, 3) * 0.236406022500579246e-6)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3581893290e5 * (R - 0.300e2) * (R - 0.250e2) - 0.3820686176e6 * R - 0.2244653126e8 + 0.1910343088e5 * R * R + 0.75000e3 * (-0.700459132e2 * R + 0.2897353683e4) * R) * pow(R, -6));
}

static double radcoeff_0_2_2_1_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.675571938100000047e1 + pow(R - 0.475e1, 2) * (-0.149797047641542832e3) + pow(R - 0.475e1, 3) * 0.286290404198171245e3 : (R < 0.525e1 ? 0.107962056637071512e3 + R * (-0.212190730336143005e2) + pow(R - 0.50e1, 2) * 0.649207555070856159e2 + pow(R - 0.50e1, 3) * (-0.959323154425136408e2) : (R < 0.55e1 ? 0.345370512354997032e2 + R * (-0.674600442554280111e1) + pow(R - 0.525e1, 2) * (-0.702848107479961737e1) + pow(R - 0.525e1, 3) * 0.252716274918832937e2 : (R < 0.575e1 ? 0.277595974521797153e2 + R * (-0.552181480821449355e1) + pow(R - 0.55e1, 2) * 0.119252395441128520e2 + pow(R - 0.55e1, 3) * (-0.882544834901951525e1) : (R < 0.60e1 ? 0.359690010519555292e1 + R * (-0.121396660159922654e1) + pow(R - 0.575e1, 2) * 0.530615328234821515e1 + pow(R - 0.575e1, 3) * (-0.245593975980523638e1) : (R < 0.625e1 ? -0.926536699066839731e1 + R * 0.978621334611399440e0 + pow(R - 0.60e1, 2) * 0.346419846249428787e1 + pow(R - 0.60e1, 3) * (-0.362286345975954216e1) : (R < 0.65e1 ? -0.156855389067101818e2 + R * 0.203143366715362905e1 + pow(R - 0.625e1, 2) * 0.747050867674630914e0 + pow(R - 0.625e1, 3) * (-0.139997920115659014e1) : (R < 0.675e1 ? -0.163824135710315488e2 + R * 0.214246300077408414e1 + pow(R - 0.65e1, 2) * (-0.302933533192811688e0) + pow(R - 0.65e1, 3) * (-0.539176279614096643e0) : (R < 0.70e1 ? -0.147049758928127368e2 + R * 0.188990068175003501e1 + pow(R - 0.675e1, 2) * (-0.707315742903384170e0) + pow(R - 0.675e1, 3) * 0.273252156129775159e-1 : (R < 0.725e1 ? -0.123090154155804328e2 + R * 0.154136628822577615e1 + pow(R - 0.70e1, 2) * (-0.686821831193651033e0) + pow(R - 0.70e1, 3) * 0.131032409162186309e0 : (R < 0.75e1 ? -0.100382874417647390e2 + R * 0.122252394934686048e1 + pow(R - 0.725e1, 2) * (-0.588547524322011295e0) + pow(R - 0.725e1, 3) * 0.144517333338275572e0 : (R < 0.775e1 ? -0.806898786250086175e1 + R * 0.955347187186781466e0 + pow(R - 0.75e1, 2) * (-0.480159524318304609e0) + pow(R - 0.75e1, 3) * 0.129489451084714491e0 : (R < 0.80e1 ? -0.642452076197160160e1 + R * 0.739546697106013173e0 + pow(R - 0.775e1, 2) * (-0.383042436004768727e0) + pow(R - 0.775e1, 3) * 0.108662014322864778e0 : (R < 0.825e1 ? -0.507758634771332673e1 + R * 0.568399606789165901e0 + pow(R - 0.80e1, 2) * (-0.301545925262620140e0) + pow(R - 0.80e1, 3) * 0.890162068238250781e-1 : (R < 0.85e1 ? -0.398886209303291617e1 + R * 0.434317182937323132e0 + pow(R - 0.825e1, 2) * (-0.234783770144751325e0) + pow(R - 0.825e1, 3) * 0.711255167818344303e-1 : (R < 0.875e1 ? -0.311795001172310204e1 + R * 0.330261332261541418e0 + pow(R - 0.85e1, 2) * (-0.181439632558375502e0) + pow(R - 0.85e1, 3) * 0.568254572488390980e-1 : (R < 0.90e1 ? -0.242783296434447182e1 + R * 0.250196289216511047e0 + pow(R - 0.875e1, 2) * (-0.138820539621746175e0) + pow(R - 0.875e1, 3) * 0.448022798228084884e-1 : (R < 0.925e1 ? -0.188672063135173063e1 + R * 0.189186446872414510e0 + pow(R - 0.90e1, 2) * (-0.105218829754639809e0) + pow(R - 0.90e1, 3) * 0.342780058599271992e-1 : (R < 0.95e1 ? -0.146557504316793641e1 + R * 0.143004158093830963e0 + pow(R - 0.925e1, 2) * (-0.795103253596944060e-1) + pow(R - 0.925e1, 3) * 0.277536903374824735e-1 : (R < 0.100e2 ? -0.114187300254648605e1 + R * 0.108452812352261702e0 + pow(R - 0.95e1, 2) * (-0.586950576065825499e-1) + pow(R - 0.95e1, 3) * 0.176807988441182902e-1 : (R < 0.105e2 ? -0.699992082357678846e0 + R * 0.630183538787678910e-1 + pow(R - 0.100e2, 2) * (-0.321738593404051129e-1) + pow(R - 0.100e2, 3) * 0.919697332573869882e-2 : (R < 0.110e2 ? -0.441486567393001350e0 + R * 0.377422245326667904e-1 + pow(R - 0.105e2, 2) * (-0.183783993517970638e-1) + pow(R - 0.105e2, 3) * 0.537601217292695086e-2 : (R < 0.120e2 ? -0.287598873266214416e0 + R * 0.233958343105649461e-1 + pow(R - 0.110e2, 2) * (-0.103143810924066371e-1) + pow(R - 0.110e2, 3) * 0.234841409184169099e-2 : (R < 0.140e2 ? -0.132562601355320941e0 + R * 0.981231440127674527e-2 + pow(R - 0.120e2, 2) * (-0.326913881688156412e-2) + pow(R - 0.120e2, 3) * 0.458232128121595730e-3 : (R < 0.160e2 ? -0.358845233739349331e-1 + R * 0.223454467120963798e-2 + pow(R - 0.140e2, 2) * (-0.519746048151989632e-3) + pow(R - 0.140e2, 3) * 0.572672526485853539e-4 : (R < 0.180e2 ? -0.152369349721552597e-1 + R * 0.842767510384703701e-3 + pow(R - 0.160e2, 2) * (-0.176142532260477509e-3) + pow(R - 0.160e2, 3) * 0.138475607840628272e-4 : (R < 0.200e2 ? -0.613953542152785841e-2 + R * 0.304368110751547646e-3 + pow(R - 0.180e2, 2) * (-0.930571675561005457e-4) + pow(R - 0.180e2, 3) * 0.135363682651633631e-4 : (R < 0.250e2 ? -0.220762812478211574e-2 + R * 0.945758597091057933e-4 + pow(R - 0.200e2, 2) * (-0.118389579651203621e-4) + pow(R - 0.200e2, 3) * 0.583298513459840523e-6 : -0.564634981214755445e-3 + R * 0.199336685673902182e-4 + pow(R - 0.250e2, 2) * (-0.308948026322275389e-5) + pow(R - 0.250e2, 3) * 0.202885572908942046e-6)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1011554978e6 * (R - 0.300e2) * (R - 0.250e2) - 0.1078991980e7 * R - 0.6339077854e8 + 0.5394959900e5 * R * R + 0.75000e3 * (-0.1978151957e3 * R + 0.818235582e4) * R) * pow(R, -6));
}

static double radcoeff_0_2_2_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.191713354000000002e2 + pow(R - 0.475e1, 2) * 0.309696519556643572e2 + pow(R - 0.475e1, 3) * (-0.793407787026574312e2) : (R < 0.525e1 ? 0.168250891245804475e2 + R * 0.608429971083910281e0 + pow(R - 0.50e1, 2) * (-0.285359320713287161e2) + pow(R - 0.50e1, 3) * 0.435279002679722922e2 : (R < 0.55e1 ? 0.477807616727621252e2 + R * (-0.549805476433564255e1) + pow(R - 0.525e1, 2) * 0.410999312965050212e1 + pow(R - 0.525e1, 3) * (-0.133146726092317209e2) : (R < 0.575e1 ? 0.502578695055773750e2 + R * (-0.593955931374133961e1) + pow(R - 0.55e1, 2) * (-0.587601132727328945e1) + pow(R - 0.55e1, 3) * 0.439804456895458173e1 : (R < 0.60e1 ? 0.621112290090192545e2 + R * (-0.805293162069900070e1) + pow(R - 0.575e1, 2) * (-0.257747790055735271e1) + pow(R - 0.575e1, 3) * 0.273581081341340848e1 : (R < 0.625e1 ? 0.666475302207759768e2 + R * (-0.882870604346266141e1) + pow(R - 0.60e1, 2) * (-0.525619790497296568e0) + pow(R - 0.60e1, 3) * 0.296159025739179294e1 : (R < 0.65e1 ? 0.648329020940646785e2 + R * (-0.853621776545034905e1) + pow(R - 0.625e1, 2) * 0.169557290254654847e1 + pow(R - 0.625e1, 3) * 0.111084281301940280e1 : (R < 0.675e1 ? 0.580917807077835846e2 + R * (-0.748014828673593613e1) + pow(R - 0.65e1, 2) * 0.252870501231110056e1 + pow(R - 0.65e1, 3) * 0.700646025305798476e-1 : (R < 0.70e1 ? 0.496278646013398443e2 + R * (-0.620265866760590256e1) + pow(R - 0.675e1, 2) * 0.258125346420903545e1 + pow(R - 0.675e1, 3) * (-0.488542887141693527e0) : (R < 0.725e1 ? 0.413883848748831653e2 + R * (-0.500363372684045249e1) + pow(R - 0.70e1, 2) * 0.221484629885276529e1 + pow(R - 0.70e1, 3) * (-0.546242365963812149e0) : (R < 0.75e1 ? 0.342320081144840671e2 + R * (-0.399863102103228485e1) + pow(R - 0.725e1, 2) * 0.180516452437990615e1 + pow(R - 0.725e1, 3) * (-0.485996065003060806e0) : (R < 0.775e1 ? 0.282513022087280419e2 + R * (-0.318717302103040545e1) + pow(R - 0.75e1, 2) * 0.144066747562761055e1 + pow(R - 0.75e1, 3) * (-0.404417534023949643e0) : (R < 0.80e1 ? 0.233401076630572071e2 + R * (-0.254266757084609107e1) + pow(R - 0.775e1, 2) * 0.113735432510964829e1 + pow(R - 0.775e1, 3) * (-0.325666534901135840e0) : (R < 0.825e1 ? 0.193451862706818360e2 + R * (-0.203505288358522973e1) + pow(R - 0.80e1, 2) * 0.893104423933796410e0 + pow(R - 0.80e1, 3) * (-0.258848230371512500e0) : (R < 0.85e1 ? 0.161133109012071678e2 + R * (-0.163703471481299001e1) + pow(R - 0.825e1, 2) * 0.698968251155162035e0 + pow(R - 0.825e1, 3) * (-0.202964159612805034e0) : (R < 0.875e1 ? 0.135066841638838842e2 + R * (-0.132560636916280994e1) + pow(R - 0.85e1, 2) * 0.546745131445558252e0 + pow(R - 0.85e1, 3) * (-0.158800411177274725e0) : (R < 0.90e1 ? 0.114068964526879864e2 + R * (-0.108200888053576993e1) + pow(R - 0.875e1, 2) * 0.427644823062602208e0 + pow(R - 0.875e1, 3) * (-0.123404243678090136e0) : (R < 0.925e1 ? 0.971553902024699667e1 + R * (-0.891324764694110816e0) + pow(R - 0.90e1, 2) * 0.335091640304034599e0 + pow(R - 0.90e1, 3) * (-0.941712221103652852e-1) : (R < 0.95e1 ? 0.834854019936202896e1 + R * (-0.741436048687786897e0) + pow(R - 0.925e1, 2) * 0.264463223721260632e0 + pow(R - 0.925e1, 3) * (-0.759947078804512205e-1) : (R < 0.100e2 ? 0.724304699427004195e1 + R * (-0.623453444554741276e0) + pow(R - 0.95e1, 2) * 0.207467192810922213e0 + pow(R - 0.95e1, 3) * (-0.496232954028796094e-1) : (R < 0.105e2 ? 0.558621366795978780e1 + R * (-0.453203723295978744e0) + pow(R - 0.100e2, 2) * 0.133032249706602795e0 + pow(R - 0.100e2, 3) * (-0.281379006292905923e-1) : (R < 0.110e2 ? 0.444070183834411125e1 + R * (-0.341274899061343895e0) + pow(R - 0.105e2, 2) * 0.908253987626669035e-1 + pow(R - 0.105e2, 3) * (-0.181791796799581143e-1) : (R < 0.120e2 ? 0.361203463654510148e1 + R * (-0.264083885058645607e0) + pow(R - 0.110e2, 2) * 0.635566292427297286e-1 + pow(R - 0.110e2, 3) * (-0.100878785840841177e-1) : (R < 0.140e2 ? 0.250330791440526168e1 + R * (-0.167234262325438476e0) + pow(R - 0.120e2, 2) * 0.332929934904773739e-1 + pow(R - 0.120e2, 3) * (-0.347224247637906722e-2) : (R < 0.160e2 ? 0.132763104912108920e1 + R * (-0.757291980800778031e-1) + pow(R - 0.140e2, 2) * 0.124595386322029714e-1 + pow(R - 0.140e2, 3) * (-0.113704952108203538e-2) : (R < 0.180e2 ? 0.789275843068005578e0 + R * (-0.395356378042503454e-1) + pow(R - 0.160e2, 2) * 0.563724150571075829e-2 + pow(R - 0.160e2, 3) * (-0.406746126792792775e-3) : (R < 0.200e2 ? 0.490546615052574797e0 + R * (-0.218676253029208220e-1) + pow(R - 0.180e2, 2) * 0.319676474495400164e-2 + pow(R - 0.180e2, 3) * (-0.301668011746795755e-3) : (R < 0.250e2 ? 0.317579473161327230e0 + R * (-0.127005824640663637e-1) + pow(R - 0.200e2, 2) * 0.138675667447322689e-2 + pow(R - 0.200e2, 3) * (-0.696900000919908598e-4) : 0.127516721565835267e0 + R * (-0.405976572623341012e-2) + pow(R - 0.250e2, 2) * 0.341406673093364076e-3 + pow(R - 0.250e2, 3) * (-0.137008252493364074e-4))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2034170364e8 * (R - 0.300e2) * (R - 0.250e2) - 0.1117237579e10 * R + 0.1525335510e11 + 0.5586187896e8 * R * R + 0.75000e3 * (-0.507486745e5 * R - 0.1916849e4) * R) * pow(R, -6));
}

static double radcoeff_0_4_4_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.118034710000000160e2 + R * (-0.355271367880050093e-14) + pow(R - 0.475e1, 2) * (-0.149808216116289316e3) + pow(R - 0.475e1, 3) * 0.280906817105157245e3 : (R < 0.525e1 ? 0.118000025764638337e3 + R * (-0.222340798509276674e2) + pow(R - 0.50e1, 2) * 0.608718967125786321e2 + pow(R - 0.50e1, 3) * (-0.915225561474718177e2) : (R < 0.55e1 ? 0.506782667065189329e2 + R * (-0.895861077228932068e1) + pow(R - 0.525e1, 2) * (-0.777002039802523825e1) + pow(R - 0.525e1, 3) * 0.251920659167300869e2 : (R < 0.575e1 ? 0.459745045795327769e2 + R * (-0.812010861191505029e1) + pow(R - 0.55e1, 2) * 0.111240290395223269e2 + pow(R - 0.55e1, 3) * (-0.709175174344850490e1) : (R < 0.60e1 ? 0.222231591332902632e2 + R * (-0.388779754405048061e1) + pow(R - 0.575e1, 2) * 0.580521523193594824e1 + pow(R - 0.575e1, 3) * (-0.218154280213609875e1) : (R < 0.625e1 ? 0.759048843559814834e1 + R * (-0.139422920348302481e1) + pow(R - 0.60e1, 2) * 0.416905813033387407e1 + pow(R - 0.60e1, 3) * (-0.344490541280709950e1) : (R < 0.65e1 ? -0.119408020499113210e1 + R * 0.443800967825811465e-1 + pow(R - 0.625e1, 2) * 0.158537907072854933e1 + pow(R - 0.625e1, 3) * (-0.153314535783549566e1) : (R < 0.675e1 ? -0.440291048429255305e1 + R * 0.549604877552700377e0 + pow(R - 0.65e1, 2) * 0.435520052351927534e0 + pow(R - 0.65e1, 3) * (-0.728598237450915343e0) : (R < 0.70e1 ? -0.493482286089466804e1 + R * 0.630752734206617482e0 + pow(R - 0.675e1, 2) * (-0.110928625736259043e0) + pow(R - 0.675e1, 3) * (-0.130424431560843712e0) : (R < 0.725e1 ? -0.438436152524580791e1 + R * 0.550833840420829723e0 + pow(R - 0.70e1, 2) * (-0.208746949406891841e0) + pow(R - 0.70e1, 3) * 0.305733329429092038e-2 : (R < 0.75e1 ? -0.364480880959795961e1 + R * 0.447033615710063392e0 + pow(R - 0.725e1, 2) * (-0.206453949436173650e0) + pow(R - 0.725e1, 3) * 0.386680263836799015e-1 : (R < 0.775e1 ? -0.293728259524187418e1 + R * 0.351056895938916536e0 + pow(R - 0.75e1, 2) * (-0.177452929648413721e0) + pow(R - 0.75e1, 3) * 0.436537931709897187e-1 : (R < 0.80e1 ? -0.232349562864059411e1 + R * 0.270515517334270261e0 + pow(R - 0.775e1, 2) * (-0.144712584770171432e0) + pow(R - 0.775e1, 3) * 0.403799497323618223e-1 : (R < 0.825e1 ? -0.181362881399201892e1 + R * 0.205730465524002371e0 + pow(R - 0.80e1, 2) * (-0.114427622470900062e0) + pow(R - 0.80e1, 3) * 0.333559438995620142e-1 : (R < 0.85e1 ? -0.139984288680019198e1 + R * 0.154770893769720225e0 + pow(R - 0.825e1, 2) * (-0.894106645462285493e-1) + pow(R - 0.825e1, 3) * 0.275341044293903048e-1 : (R < 0.875e1 ? -0.106888798756549153e1 + R * 0.115228206077116646e0 + pow(R - 0.85e1, 2) * (-0.687600862241858207e-1) + pow(R - 0.85e1, 3) * 0.214640307028770294e-1 : (R < 0.90e1 ? -0.807239165615865284e0 + R * 0.848726687218131770e-1 + pow(R - 0.875e1, 2) * (-0.526620631970280487e-1) + pow(R - 0.875e1, 3) * 0.172317292391013302e-1 : (R < 0.925e1 ? -0.602360557500675853e0 + R * 0.617725863556306543e-1 + pow(R - 0.90e1, 2) * (-0.397382662677020493e-1) + pow(R - 0.90e1, 3) * 0.134928974607177350e-1 : (R < 0.95e1 ? -0.444245635164893904e0 + R * 0.444333714956642034e-1 + pow(R - 0.925e1, 2) * (-0.296185931721637472e-1) + pow(R - 0.925e1, 3) * 0.109613017180276943e-1 : (R < 0.100e2 ? -0.324762028016269022e0 + R * 0.316793189817125287e-1 + pow(R - 0.95e1, 2) * (-0.213976168836429760e-1) + pow(R - 0.95e1, 3) * 0.714309616043584759e-2 : (R < 0.105e2 ? -0.168815597583964361e0 + R * 0.156390242183964343e-1 + pow(R - 0.100e2, 2) * (-0.106829726429892042e-1) + pow(R - 0.100e2, 3) * 0.366994091639266402e-2 : (R < 0.110e2 ? -0.877571700953681672e-1 + R * 0.770850726270173002e-2 + pow(R - 0.105e2, 2) * (-0.517806126840020774e-2) + pow(R - 0.105e2, 3) * 0.188791286199349552e-2 : (R < 0.120e2 ? -0.474323034637630855e-1 + R * 0.394638064079664425e-2 + pow(R - 0.110e2, 2) * (-0.234619197540996425e-2) + pow(R - 0.110e2, 3) * 0.642593285613320001e-3 : (R < 0.140e2 ? -0.159606530258001068e-1 + R * 0.118177654681667554e-2 + pow(R - 0.120e2, 2) * (-0.418412118570003918e-3) + pow(R - 0.120e2, 3) * 0.627317877058330487e-4 : (R < 0.160e2 ? -0.424030889349319082e-2 + R * 0.260909525006656508e-3 + pow(R - 0.140e2, 2) * (-0.420213923350056391e-4) + pow(R - 0.140e2, 3) * 0.226456511583869102e-5 : (R < 0.180e2 ? -0.213570533470717203e-2 + R * 0.119998737056698252e-3 + pow(R - 0.160e2, 2) * (-0.284340016399734921e-4) + pow(R - 0.160e2, 3) * 0.250974609331218342e-5 : (R < 0.200e2 ? -0.724220410597908567e-3 + R * 0.363796836165504781e-4 + pow(R - 0.180e2, 2) * (-0.133755250801003899e-4) + pow(R - 0.180e2, 3) * 0.211770992841257501e-5 : (R < 0.250e2 ? -0.198989207901996483e-3 + R * 0.829010243709982526e-5 + pow(R - 0.200e2, 2) * (-0.669265509624939239e-6) + pow(R - 0.200e2, 3) * 0.120674639609947834e-7 : -0.695225301691260921e-4 + R * 0.250250713792504354e-5 + pow(R - 0.250e2, 2) * (-0.488253550210017486e-6) + pow(R - 0.250e2, 3) * 0.376903032290017524e-7)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1061989093e5 * (R - 0.300e2) * (R - 0.250e2) - 0.1132788364e6 * R - 0.6655131652e7 + 0.5663941820e4 * R * R + 0.75000e3 * (-0.2076778670e2 * R + 0.859031177e3) * R) * pow(R, -6));
}

static double radcoeff_0_4_4_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.473997235299999176e1 + R * (-0.177635683940025046e-14) + pow(R - 0.475e1, 2) * 0.972885060288970749e2 + pow(R - 0.475e1, 3) * (-0.187756097651588249e3) : (R < 0.525e1 ? -0.687930532758786626e2 + R * 0.134399847047757337e2 + pow(R - 0.50e1, 2) * (-0.435285672097941330e2) + pow(R - 0.50e1, 3) * 0.683044100747647889e2 : (R < 0.55e1 ? -0.234209970603096025e2 + R * 0.448277798889706691e1 + pow(R - 0.525e1, 2) * 0.769974034627946136e1 + pow(R - 0.525e1, 3) * (-0.207542703914709143e2) : (R < 0.575e1 ? -0.230354933749980013e2 + R * 0.444122246363600048e1 + pow(R - 0.55e1, 2) * (-0.786596244732372618e1) + pow(R - 0.55e1, 3) * 0.498756153911890721e1 : (R < 0.60e1 ? -0.621175812721385689e1 + R * 0.144340902855893161e1 + pow(R - 0.575e1, 2) * (-0.412529129298454578e1) + pow(R - 0.575e1, 3) * 0.144120100299527465e1 : (R < 0.625e1 ? 0.430745268323036257e1 + R * (-0.349011429871727064e0) + pow(R - 0.60e1, 2) * (-0.304439054073808979e1) + pow(R - 0.60e1, 3) * 0.278729748889998996e1 : (R < 0.65e1 ? 0.104080859927001477e2 + R * (-0.134858842107202359e1) + pow(R - 0.625e1, 2) * (-0.953917424063097208e0) + pow(R - 0.625e1, 3) * 0.142267534540476692e1 : (R < 0.675e1 ? 0.117370415069611589e2 + R * (-0.155879550584017834e1) + pow(R - 0.65e1, 2) * 0.113089084990477998e0 + pow(R - 0.65e1, 3) * 0.600874793480941749e0 : (R < 0.70e1 ? 0.106113404210790243e2 + R * (-0.138958693956726287e1) + pow(R - 0.675e1, 2) * 0.563745180101184351e0 + pow(R - 0.675e1, 3) * 0.730927587146886371e-2 : (R < 0.725e1 ? 0.866398714733539244e1 + R * (-0.110634386029077048e1) + pow(R - 0.70e1, 2) * 0.569227137004785999e0 + pow(R - 0.70e1, 3) * (-0.123972735366818368e0) : (R < 0.75e1 ? 0.680270383490500485e1 + R * (-0.844975179669655851e0) + pow(R - 0.725e1, 2) * 0.476247585479672220e0 + pow(R - 0.725e1, 3) * (-0.135907467204195914e0) : (R < 0.775e1 ? 0.523553718502954801e1 + R * (-0.632334037030606422e0) + pow(R - 0.75e1, 2) * 0.374316985076525277e0 + pow(R - 0.75e1, 3) * (-0.117564295016398049e0) : (R < 0.80e1 ? 0.397745235351136683e1 + R * (-0.467218849807918335e0) + pow(R - 0.775e1, 2) * 0.286143763814226737e0 + pow(R - 0.775e1, 3) * (-0.946321079302133994e-1) : (R < 0.825e1 ? 0.299123081870176044e1 + R * (-0.341890488137720050e0) + pow(R - 0.80e1, 2) * 0.215169682866566681e0 + pow(R - 0.80e1, 3) * (-0.729164892627459232e-1) : (R < 0.85e1 ? 0.222875735623991256e1 + R * (-0.247977488441201543e0) + pow(R - 0.825e1, 2) * 0.160482315919507235e0 + pow(R - 0.825e1, 3) * (-0.558251542188041433e-1) : (R < 0.875e1 ? 0.164483672982852647e1 + R * (-0.178203546897473697e0) + pow(R - 0.85e1, 2) * 0.118613450255404124e0 + pow(R - 0.85e1, 3) * (-0.423088676220373383e-1) : (R < 0.90e1 ? 0.120206813548790681e1 + R * (-0.126829734448903636e0) + pow(R - 0.875e1, 2) * 0.868817995388761199e-1 + pow(R - 0.875e1, 3) * (-0.318705157730460598e-1) : (R < 0.925e1 ? 0.869813668592205547e0 + R * (-0.893645563869117227e-1) + pow(R - 0.90e1, 2) * 0.629789127090915751e-1 + pow(R - 0.90e1, 3) * (-0.237669028857788248e-1) : (R < 0.95e1 ? 0.623321743691907626e0 + R * (-0.623313943234494669e-1) + pow(R - 0.925e1, 2) * 0.451537355447574548e-1 + pow(R - 0.925e1, 3) * (-0.187946099638383532e-1) : (R < 0.100e2 ? 0.444847841543259070e0 + R * (-0.432785159192904251e-1) + pow(R - 0.95e1, 2) * 0.310577780718786882e-1 + pow(R - 0.95e1, 3) * (-0.111585153465956575e-1) : (R < 0.105e2 ? 0.224328556023584813e0 + R * (-0.205896243573584839e-1) + pow(R - 0.100e2, 2) * 0.143200050519851994e-1 + pow(R - 0.100e2, 3) * (-0.516095027453645355e-2) : (R < 0.110e2 ? 0.117545868868394077e0 + R * (-0.101403320112756264e-1) + pow(R - 0.105e2, 2) * 0.657857964018051904e-2 + pow(R - 0.105e2, 3) * (-0.245919264325852914e-2) : (R < 0.120e2 ? 0.668070779629290484e-1 + R * (-0.540614685353900479e-2) + pow(R - 0.110e2, 2) * 0.288979067529272510e-2 + pow(R - 0.110e2, 3) * (-0.783495023753720066e-3) : (R < 0.140e2 ? 0.277642182625765788e-1 + R * (-0.197705057421471500e-2) + pow(R - 0.120e2, 2) * 0.539305604031564906e-3 + pow(R - 0.120e2, 3) * (-0.697691279621036841e-4) : (R < 0.160e2 ? 0.108833873268717948e-1 + R * (-0.657057693633699693e-3) + pow(R - 0.140e2, 2) * 0.120690836258942775e-3 + pow(R - 0.140e2, 3) * (-0.122143278835464605e-4) : (R < 0.180e2 ? 0.588937348190777740e-2 + R * (-0.320866283200486066e-3) + pow(R - 0.160e2, 2) * 0.474048689576640186e-4 + pow(R - 0.160e2, 3) * (-0.222969491210488029e-6) : (R < 0.200e2 ? 0.271222004695840548e-2 + R * (-0.133922441264355862e-3) + pow(R - 0.180e2, 2) * 0.460670520104010904e-4 + pow(R - 0.180e2, 3) * (-0.721909518911157400e-5) : (R < 0.250e2 ? 0.885954178041808288e-3 + R * (-0.362833754920904151e-4) + pow(R - 0.200e2, 2) * 0.275248087573164598e-5 + pow(R - 0.200e2, 3) * (-0.453259658627124904e-7) : 0.345966421271934940e-3 + R * (-0.121580141744773974e-4) + pow(R - 0.250e2, 2) * 0.207259138779095858e-5 + pow(R - 0.250e2, 3) * (-0.151761268659095869e-6))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.5129173382e5 * (R - 0.300e2) * (R - 0.250e2) + 0.1381160000e3 * R + 0.3590326410e8 - 0.6905800e1 * R * R + 0.75000e3 * (0.683970352e2 * R - 0.3761491643e4) * R) * pow(R, -6));
}

static double radcoeff_0_6_6_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.291681592700000447e1 + R * (-0.888178419700125232e-15) + pow(R - 0.475e1, 2) * (-0.369823713290137732e2) + pow(R - 0.475e1, 3) * 0.704646504360550949e2 : (R < 0.525e1 ? 0.281017464207327805e2 + R * (-0.527906370774655631e1) + pow(R - 0.50e1, 2) * 0.158661164980275480e2 + pow(R - 0.50e1, 3) * (-0.269536466425652925e2) : (R < 0.55e1 ? 0.135561680795223136e2 + R * (-0.239981420421377400e1) + pow(R - 0.525e1, 2) * (-0.434911848389642053e1) + pow(R - 0.525e1, 3) * 0.944849781740606076e1 : (R < 0.575e1 ? 0.156482934091909129e2 + R * (-0.280278010539834765e1) + pow(R - 0.55e1, 2) * 0.273725487915812504e1 + pow(R - 0.55e1, 3) * (-0.155641267058935995e0) : (R < 0.60e1 ? 0.811513290780880681e1 + R * (-0.146333540339283585e1) + pow(R - 0.575e1, 2) * 0.262052392886392305e1 + pow(R - 0.575e1, 3) * (-0.115629249957031721e1) : (R < 0.625e1 ? 0.170010585848185314e1 + R * (-0.369878282630308863e0) + pow(R - 0.60e1, 2) * 0.175330455418618514e1 + pow(R - 0.60e1, 3) * (-0.141984937465979866e1) : (R < 0.65e1 ? -0.202768849926294648e1 + R * 0.240552236714071416e0 + pow(R - 0.625e1, 2) * 0.688417523191336089e0 + pow(R - 0.625e1, 3) * (-0.795314155390486777e0) : (R < 0.675e1 ? -0.326515701123115010e1 + R * 0.435639594174023148e0 + pow(R - 0.65e1, 2) * 0.919319066484709235e-1 + pow(R - 0.65e1, 3) * (-0.365962880578254324e0) : (R < 0.70e1 ? -0.311222785128139279e1 + R * 0.412987507389835917e0 + pow(R - 0.675e1, 2) * (-0.182540253785219847e0) + pow(R - 0.675e1, 3) * (-0.134400566964961721e-1) : (R < 0.725e1 ? -0.246731565536643105e1 + R * 0.319197369866632996e0 + pow(R - 0.70e1, 2) * (-0.192620296307591976e0) + pow(R - 0.70e1, 3) * 0.533252001642395071e-1 : (R < 0.75e1 ? -0.185276158749133146e1 + R * 0.232885696743631909e0 + pow(R - 0.725e1, 2) * (-0.152626396184412344e0) + pow(R - 0.725e1, 3) * 0.517698736395386244e-1 : (R < 0.775e1 ? -0.136194423209129445e1 + R * 0.166279349958839251e0 + pow(R - 0.75e1, 2) * (-0.113798990954758372e0) + pow(R - 0.75e1, 3) * 0.420872905576054196e-1 : (R < 0.80e1 ? -0.988586059252835825e0 + R * 0.117271221461011071e0 + pow(R - 0.775e1, 2) * (-0.822335230365543041e-1) + pow(R - 0.775e1, 3) * 0.314591881300402137e-1 : (R < 0.825e1 ? -0.711488794676931713e0 + R * 0.820530577171164621e-1 + pow(R - 0.80e1, 2) * (-0.586391319390241403e-1) + pow(R - 0.80e1, 3) * 0.232230186822331153e-1 : (R < 0.85e1 ? -0.508827568531815655e0 + R * 0.570878077505231063e-1 + pow(R - 0.825e1, 2) * (-0.412218679273493038e-1) + pow(R - 0.825e1, 3) * 0.166045726610275987e-1 : (R < 0.875e1 ? -0.362415087816724490e0 + R * 0.395902311607911200e-1 + pow(R - 0.85e1, 2) * (-0.287684384315786031e-1) + pow(R - 0.85e1, 3) * 0.116099489136564371e-1 : (R < 0.90e1 ? -0.257217364065233545e0 + R * 0.273828773663124039e-1 + pow(R - 0.875e1, 2) * (-0.200609767463362752e-1) + pow(R - 0.875e1, 3) * 0.828948960434664102e-2 : (R < 0.925e1 ? -0.182055770185633348e0 + R * 0.189066682939592612e-1 + pow(R - 0.90e1, 2) * (-0.138438595430762940e-1) + pow(R - 0.90e1, 3) * 0.544752639695700747e-2 : (R < 0.95e1 ? -0.128256097015117615e0 + R * 0.130061497218505531e-1 + pow(R - 0.925e1, 2) * (-0.975821474535853821e-2) + pow(R - 0.925e1, 3) * 0.407055943182528177e-2 : (R < 0.100e2 ? -0.897015468930659893e-1 + R * 0.889027224263852500e-2 + pow(R - 0.95e1, 2) * (-0.670529517148957688e-2) + pow(R - 0.95e1, 3) * 0.235305426042505764e-2 : (R < 0.105e2 ? -0.416786941416774012e-1 + R * 0.394976776646773983e-2 + pow(R - 0.100e2, 2) * (-0.317571378085198999e-2) + pow(R - 0.100e2, 3) * 0.114854337583301935e-2 : (R < 0.110e2 ? -0.180288390506504088e-1 + R * 0.163546151749051523e-2 + pow(R - 0.105e2, 2) * (-0.145289871710246074e-2) + pow(R - 0.105e2, 3) * 0.629121002642861037e-3 : (R < 0.120e2 ? -0.752178598827220411e-2 + R * 0.654403552370200377e-3 + pow(R - 0.110e2, 2) * (-0.509217213138169074e-3) + pow(R - 0.110e2, 3) * 0.151042029967968694e-3 : (R < 0.140e2 ? -0.109626113493321983e-2 + R * 0.890952159977683367e-4 + pow(R - 0.120e2, 2) * (-0.560911232342629860e-4) + pow(R - 0.120e2, 3) * 0.102120492226894059e-4 : (R < 0.160e2 ? 0.186549397616150121e-3 + R * (-0.127246862670107232e-4) + pow(R - 0.140e2, 2) * 0.518117210187344678e-5 + pow(R - 0.140e2, 3) * (-0.678040545434042360e-6) : (R < 0.180e2 ? 0.438531865607133932e-6 + R * (-0.136484404725445870e-6) + pow(R - 0.160e2, 2) * 0.111292882926919219e-5 + pow(R - 0.160e2, 3) * (-0.294537575328234618e-6) : (R < 0.200e2 ? -0.139768128564251239e-4 + R * 0.780780008412506855e-6 + pow(R - 0.180e2, 2) * (-0.654296622700215619e-6) + pow(R - 0.180e2, 3) * 0.126917093809481029e-6 : (R < 0.250e2 ? 0.630496470499165669e-5 + R * (-0.313401356674582845e-6) + pow(R - 0.200e2, 2) * 0.107205940156670663e-6 + pow(R - 0.200e2, 3) * (-0.913866338035081776e-8) : -0.182371091464530951e-5 + R * 0.732582913658123839e-7 + pow(R - 0.250e2, 2) * (-0.298740105485916184e-7) + pow(R - 0.250e2, 3) * 0.299979445508582922e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1182002288e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1260802500e3 * R + 0.7407213774e4 - 0.6304012500e1 * R * R + 0.75000e3 * (0.2311471080e-1 * R - 0.956108469e0) * R) * pow(R, -6));
}

static double radcoeff_0_6_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.295783650399999987e1 + pow(R - 0.475e1, 2) * 0.386915416942084676e2 + pow(R - 0.475e1, 3) * (-0.755423495608338555e2) : (R < 0.525e1 ? -0.276278658822394192e2 + R * 0.518158030444788409e1 + pow(R - 0.50e1, 2) * (-0.179652204764169277e2) + pow(R - 0.50e1, 3) * 0.310291280425015614e2 : (R < 0.55e1 ? -0.116514562025944350e2 + R * 0.201693157420846392e1 + pow(R - 0.525e1, 2) * 0.530662555545924608e1 + pow(R - 0.525e1, 3) * (-0.106090702443724041e2) : (R < 0.575e1 ? -0.151381754159504354e2 + R * 0.268104368111826075e1 + pow(R - 0.55e1, 2) * (-0.265017712782005788e1) + pow(R - 0.55e1, 3) * 0.898455859788056643e0 : (R < 0.60e1 ? -0.863916159498133318e1 + R * 0.152441559091849266e1 + pow(R - 0.575e1, 2) * (-0.197633523297901537e1) + pow(R - 0.575e1, 3) * 0.360815227620179535e0 : (R < 0.625e1 ? -0.323395624124661163e1 + R * 0.603900829607768586e0 + pow(R - 0.60e1, 2) * (-0.170572381226388070e1) + pow(R - 0.60e1, 3) * 0.109815095453122424e1 : (R < 0.65e1 ? 0.720085892634794833e0 + R * (-0.430577725495671637e-1) + pow(R - 0.625e1, 2) * (-0.882110596365462518e0) + pow(R - 0.625e1, 3) * 0.844160199054924676e0 : (R < 0.675e1 ? 0.251618317906175060e1 + R * (-0.325833033409500095e0) + pow(R - 0.65e1, 2) * (-0.248990447074269011e0) + pow(R - 0.65e1, 3) * 0.461314623649076605e0 : (R < 0.70e1 ? 0.276432075543392042e1 + R * (-0.363831765012432640e0) + pow(R - 0.675e1, 2) * 0.969955206625384703e-1 + pow(R - 0.675e1, 3) * 0.830911815487682948e-1 : (R < 0.725e1 ? 0.232313977708538566e1 + R * (-0.299754408140769368e0) + pow(R - 0.70e1, 2) * 0.159313906824114698e0 + pow(R - 0.70e1, 3) * (-0.254429722441488933e-1) : (R < 0.75e1 ? 0.178977297797755175e1 + R * (-0.224868012024489916e0) + pow(R - 0.725e1, 2) * 0.140231677641003027e0 + pow(R - 0.725e1, 3) * (-0.417223069721729400e-1) : (R < 0.775e1 ? 0.133068874980953145e1 + R * (-0.162575105761270849e0) + pow(R - 0.75e1, 2) * 0.108939947411873322e0 + pow(R - 0.75e1, 3) * (-0.382849909071593664e-1) : (R < 0.80e1 ? 0.970389874730806179e0 + R * (-0.115283567850426594e0) + pow(R - 0.775e1, 2) * 0.802262042315037976e-1 + pow(R - 0.775e1, 3) * (-0.302137005991897634e-1) : (R < 0.825e1 ? 0.699347657396181988e0 + R * (-0.808355345970227512e-1) + pow(R - 0.80e1, 2) * 0.575659287821114751e-1 + pow(R - 0.80e1, 3) * (-0.225205836560816719e-1) : (R < 0.85e1 ? 0.499970715442229263e0 + R * (-0.562751796414823341e-1) + pow(R - 0.825e1, 2) * 0.406754910400502212e-1 + pow(R - 0.825e1, 3) * (-0.160513074964835113e-1) : (R < 0.875e1 ? 0.354973066354907107e0 + R * (-0.389470542770478934e-1) + pow(R - 0.85e1, 2) * 0.286370104176875868e-1 + pow(R - 0.85e1, 3) * (-0.115196999579840614e-1) : (R < 0.90e1 ? 0.250195471360353472e0 + R * (-0.267884928103261089e-1) + pow(R - 0.875e1, 2) * 0.199972354491995408e-1 + pow(R - 0.875e1, 3) * (-0.803346387158041658e-2) : (R < 0.925e1 ? 0.174888686464828996e0 + R * (-0.182961495616476670e-1) + pow(R - 0.90e1, 2) * 0.139721375455142283e-1 + pow(R - 0.90e1, 3) * (-0.546237281169423966e-2) : (R < 0.95e1 ? 0.120529262183519809e0 + R * (-0.123342756910832223e-1) + pow(R - 0.925e1, 2) * 0.987535793674354859e-2 + pow(R - 0.925e1, 3) * (-0.419236884964264717e-2) : (R < 0.100e2 ? 0.816406731051847190e-1 + R * (-0.818266588201944402e-2) + pow(R - 0.95e1, 2) * 0.673108129951156299e-2 + pow(R - 0.95e1, 3) * (-0.242769518294534779e-2) : (R < 0.105e2 ? 0.339168824091689303e-1 + R * (-0.327235596971689295e-2) + pow(R - 0.100e2, 2) * 0.308953852509354131e-2 + pow(R - 0.100e2, 3) * (-0.125377381931951037e-2) : (R < 0.110e2 ? 0.119658596263863375e-1 + R * (-0.112314780911298463e-2) + pow(R - 0.105e2, 2) * 0.120887779611427576e-2 + pow(R - 0.105e2, 3) * (-0.553261120576612917e-3) : (R < 0.120e2 ? 0.346566992284285400e-2 + R * (-0.329215853431168561e-3) + pow(R - 0.110e2, 2) * 0.378986115249356275e-3 + pow(R - 0.110e2, 3) * (-0.121523446618187673e-3) : (R < 0.140e2 ? -0.997690096255770577e-3 + R * 0.641860372129808777e-4 + pow(R - 0.120e2, 2) * 0.144157753947932137e-4 + pow(R - 0.120e2, 3) * (-0.567093410064182717e-5) : (R < 0.160e2 ? -0.839960960712324962e-3 + R * 0.537979295844517863e-4 + pow(R - 0.140e2, 2) * (-0.196098292090577560e-4) + pow(R - 0.140e2, 3) * 0.348634812966593177e-5 : (R < 0.180e2 ? -0.304859264027391140e-3 + R * 0.171947903042119468e-4 + pow(R - 0.160e2, 2) * 0.130825956893783563e-5 + pow(R - 0.160e2, 3) * (-0.124050779552190425e-5) : (R < 0.200e2 ? -0.135795293245307889e-3 + R * 0.754173503370043829e-5 + pow(R - 0.180e2, 2) * (-0.613478720419359009e-5) + pow(R - 0.180e2, 3) * 0.118483329409668557e-5 : (R < 0.250e2 ? 0.555672100429739315e-4 + R * (-0.277941425391369651e-5) + pow(R - 0.200e2, 2) * 0.974212560386523536e-6 + pow(R - 0.200e2, 3) * (-0.835326996911568796e-7) : -0.174483915844693482e-4 + R * 0.697758873114773822e-6 + pow(R - 0.250e2, 2) * (-0.278777934980829513e-6) + pow(R - 0.250e2, 3) * 0.278707223403749514e-7)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.6744011296e1 * (R - 0.300e2) * (R - 0.250e2) - 0.7193612880e2 * R - 0.4226248284e4 + 0.3596806440e1 * R * R + 0.75000e3 * (-0.1318829165e-1 * R + 0.5455157185e0) * R) * pow(R, -6));
}

static double radcoeff_0_8_8_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.354390961000000004e0 + pow(R - 0.475e1, 2) * (-0.127039640761280159e1) + pow(R - 0.475e1, 3) * 0.303428672485120643e1 : (R < 0.525e1 ? 0.653749130083998264e0 + R * (-0.662694428967996602e-1) + pow(R - 0.50e1, 2) * 0.100531863602560301e1 + pow(R - 0.50e1, 3) * (-0.383927301295361767e1) : (R < 0.55e1 ? 0.179691585656720809e1 + R * (-0.283473814812801539e0) + pow(R - 0.525e1, 2) * (-0.187413612368961013e1) + pow(R - 0.525e1, 3) * 0.225529788376326534e1 : (R < 0.575e1 ? 0.454311977578596871e1 + R * (-0.797673523451994271e0) + pow(R - 0.55e1, 2) * (-0.182662710867161016e0) + pow(R - 0.55e1, 3) * 0.151960837710055241e1 : (R < 0.60e1 ? 0.344227474944052148e1 + R * (-0.604078308179221146e0) + pow(R - 0.575e1, 2) * 0.957043571958253292e0 + pow(R - 0.575e1, 3) * (-0.489959156005473795e0) : (R < 0.625e1 ? 0.117450769550672574e1 + R * (-0.217423863951120927e0) + pow(R - 0.60e1, 2) * 0.589574204954147918e0 + pow(R - 0.60e1, 3) * (-0.325788500598656772e0) : (R < 0.65e1 ? -0.254370353348155609e0 + R * 0.162778946637048977e-1 + pow(R - 0.625e1, 2) * 0.345232829505155325e0 + pow(R - 0.625e1, 3) * (-0.333323783039899624e0) : (R < 0.675e1 ? -0.953769820925958856e0 + R * 0.126396100096301367e0 + pow(R - 0.65e1, 2) * 0.952399922252305936e-1 + pow(R - 0.65e1, 3) * (-0.201293688201744009e0) : (R < 0.70e1 ? -0.101763518491985527e1 + R * 0.136273529671089660e0 + pow(R - 0.675e1, 2) * (-0.557302739260774130e-1) + pow(R - 0.675e1, 3) * (-0.225109502331249274e-1) : (R < 0.725e1 ? -0.796868479715380329e0 + R * 0.104187589539340042e0 + pow(R - 0.70e1, 2) * (-0.726134866009211094e-1) + pow(R - 0.70e1, 3) * 0.241514763342438113e-1 : (R < 0.75e1 ? -0.570636480023738901e0 + R * 0.724092480515501902e-1 + pow(R - 0.725e1, 2) * (-0.544998793502382492e-1) + pow(R - 0.725e1, 3) * 0.215347031361498853e-1 : (R < 0.775e1 ? -0.399614871468443766e0 + R * 0.491970652144591708e-1 + pow(R - 0.75e1, 2) * (-0.383488519981258352e-1) + pow(R - 0.75e1, 3) * 0.165703088811565841e-1 : (R < 0.80e1 ? -0.277229692242251635e0 + R * 0.331295721306131136e-1 + pow(R - 0.775e1, 2) * (-0.259211203372583972e-1) + pow(R - 0.775e1, 3) * 0.112336274192237524e-1 : (R < 0.825e1 ? -0.191840196614706970e0 + R * 0.222753171030883705e-1 + pow(R - 0.80e1, 2) * (-0.174958997728405820e-1) + pow(R - 0.80e1, 3) * 0.757436166594838839e-2 : (R < 0.85e1 ? -0.132361345088525567e0 + R * 0.149475600290334010e-1 + pow(R - 0.825e1, 2) * (-0.118151285233792907e-1) + pow(R - 0.825e1, 3) * 0.511896175698274038e-2 : (R < 0.875e1 ? -0.909638559196131735e-1 + R * 0.999980109677802050e-2 + pow(R - 0.85e1, 2) * (-0.797590720564223497e-2) + pow(R - 0.85e1, 3) * 0.341666535412059888e-2 : (R < 0.90e1 ? -0.621198372957270095e-1 + R * 0.665247224785451511e-2 + pow(R - 0.875e1, 2) * (-0.541340819005178570e-2) + pow(R - 0.875e1, 3) * 0.230262514653490355e-2 : (R < 0.925e1 ? -0.419475398692352452e-1 + R * 0.437751036780391692e-2 + pow(R - 0.90e1, 2) * (-0.368643933015060793e-2) + pow(R - 0.90e1, 3) * 0.172701178773976109e-2 : (R < 0.95e1 ? -0.280964619356008187e-1 + R * 0.285810541292981848e-2 + pow(R - 0.925e1, 2) * (-0.239118048934578711e-2) + pow(R - 0.925e1, 3) * 0.116140079050605595e-2 : (R < 0.100e2 ? -0.189384016625296948e-1 + R * 0.188027781647681007e-2 + pow(R - 0.95e1, 2) * (-0.152012989646624504e-2) + pow(R - 0.95e1, 3) * 0.604929600625249983e-3 : (R < 0.105e2 ? -0.857849097659502645e-2 + R * 0.813845120479502566e-3 + pow(R - 0.100e2, 2) * (-0.612735495528370067e-3) + pow(R - 0.100e2, 3) * 0.185384517938729610e-3 : (R < 0.110e2 ? -0.373468216145438721e-2 + R * 0.340148013405179713e-3 + pow(R - 0.105e2, 2) * (-0.334658718620275638e-3) + pow(R - 0.105e2, 3) * 0.157131026019832580e-3 : (R < 0.120e2 ? -0.141379052266756336e-2 + R * 0.123337564299778483e-3 + pow(R - 0.110e2, 2) * (-0.989621795905267409e-4) + pow(R - 0.110e2, 3) * 0.295863692207482451e-4 : (R < 0.140e2 ? -0.173183314812637125e-3 + R * 0.141723127809697604e-4 + pow(R - 0.120e2, 2) * (-0.102030719282820006e-4) + pow(R - 0.120e2, 3) * 0.199698458264855987e-5 : (R < 0.160e2 ? 0.378588922337572638e-4 + R * (-0.267615994037551877e-5) + pow(R - 0.140e2, 2) * 0.177883556760936034e-5 + pow(R - 0.140e2, 3) * (-0.328738758523300355e-6) : (R < 0.180e2 ? -0.838331025451708395e-5 + R * 0.494317227782317719e-6 + pow(R - 0.160e2, 2) * (-0.193596983530441811e-6) + pow(R - 0.160e2, 3) * 0.273464209571414769e-7 : (R < 0.200e2 ? -0.906770933532467101e-6 + R * 0.480863451462481714e-7 + pow(R - 0.180e2, 2) * (-0.295184577875929529e-7) + pow(R - 0.180e2, 3) * 0.542549928223443365e-8 : (R < 0.250e2 ? 0.779160248462086539e-7 + R * (-0.488149461731043234e-8) + pow(R - 0.200e2, 2) * 0.303453790581365189e-8 + pow(R - 0.200e2, 3) * (-0.287011278870313015e-9) : -0.102585265938815211e-6 + R * 0.393803852555260848e-8 + pow(R - 0.250e2, 2) * (-0.127063127724104360e-8) + pow(R - 0.250e2, 3) * 0.120448670426104363e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.6308437600e1 * (R - 0.300e2) * (R - 0.250e2) - 0.6729000772e2 * R - 0.3953291986e4 + 0.3364500386e1 * R * R + 0.75000e3 * (-0.1233650909e-1 * R + 0.5102829808e0) * R) * pow(R, -6));
}

static double radcoeff_0_8_8_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.749351709500000518e0 + R * 0.111022302462515654e-15 + pow(R - 0.475e1, 2) * 0.787858919733185914e1 + pow(R - 0.475e1, 3) * (-0.169174435797274363e2) : (R < 0.525e1 ? -0.435764457793517490e1 + R * 0.767273927467035044e0 + pow(R - 0.50e1, 2) * (-0.480949348746371896e1) + pow(R - 0.50e1, 3) * 0.975217329278231304e1 : (R < 0.55e1 ? -0.148073539369226381e1 + R * 0.191059676131859757e0 + pow(R - 0.525e1, 2) * 0.250463648212301715e1 + pow(R - 0.525e1, 3) * (-0.350102631460182323e1) : (R < 0.575e1 ? -0.465621608863039516e1 + R * 0.786935483205526309e0 + pow(R - 0.55e1, 2) * (-0.121133253828350315e0) + pow(R - 0.55e1, 3) * (-0.494024783175019577e0) : (R < 0.60e1 ? -0.379062748011470152e1 + R * 0.633739209446035012e0 + pow(R - 0.575e1, 2) * (-0.491651841209615026e0) + pow(R - 0.575e1, 3) * 0.168534025018993727e-1 : (R < 0.625e1 ? -0.236509694000200188e1 + R * 0.391073301810333618e0 + pow(R - 0.60e1, 2) * (-0.479011789333190496e0) + pow(R - 0.60e1, 3) * 0.675411046874242749e-1 : (R < 0.65e1 ? -0.976217737463940138e0 + R * 0.164231364272630409e0 + pow(R - 0.625e1, 2) * (-0.428355960817622283e0) + pow(R - 0.625e1, 3) * 0.285880511548402216e0 : (R < 0.675e1 ? 0.452168971855594765e-1 + R * 0.365597977914469685e-2 + pow(R - 0.65e1, 2) * (-0.213945577156320621e0) + pow(R - 0.65e1, 3) * 0.240576875358967268e0 : (R < 0.70e1 ? 0.453190527317162362e0 + R * (-0.582086446692092405e-1) + pow(R - 0.675e1, 2) * (-0.335129206370951491e-1) + pow(R - 0.675e1, 3) * 0.770842026957284238e-1 : (R < 0.725e1 ? 0.468422616636154143e0 + R * (-0.605118169823077312e-1) + pow(R - 0.70e1, 2) * 0.243002313847011688e-1 + pow(R - 0.70e1, 3) * 0.668546969811899695e-2 : (R < 0.75e1 ? 0.372869442421308817e0 + R * (-0.471081757215598348e-1) + pow(R - 0.725e1, 2) * 0.293143336582904167e-1 + pow(R - 0.725e1, 3) * (-0.688393364820422994e-2) : (R < 0.775e1 ? 0.274345807285896914e0 + R * (-0.337417464514529197e-1) + pow(R - 0.75e1, 2) * 0.241513834221372438e-1 + pow(R - 0.75e1, 3) * (-0.886444358530222645e-2) : (R < 0.80e1 ? 0.195011295642870619e0 + R * (-0.233281379126284646e-1) + pow(R - 0.775e1, 2) * 0.175030507331605731e-1 + pow(R - 0.775e1, 3) * (-0.676821879458682375e-2) : (R < 0.825e1 ? 0.136139608154265679e0 + R * (-0.158456535700332093e-1) + pow(R - 0.80e1, 2) * 0.124268866372204551e-1 + pow(R - 0.80e1, 3) * (-0.527434312435047254e-2) : (R < 0.85e1 ? 0.937317190997192379e-1 + R * (-0.106211495872386950e-1) + pow(R - 0.825e1, 2) * 0.847112929395760043e-2 + pow(R - 0.825e1, 3) * (-0.340614765201127656e-2) : (R < 0.875e1 ? 0.636341919446020698e-1 + R * (-0.702423762501200918e-2) + pow(R - 0.85e1, 2) * 0.591651855494914301e-2 + pow(R - 0.85e1, 3) * (-0.278468969160442469e-2) : (R < 0.90e1 ? 0.426443264252410886e-1 + R * (-0.458810766471326719e-2) + pow(R - 0.875e1, 2) * 0.382800128624582450e-2 + pow(R - 0.875e1, 3) * (-0.148993665357102551e-2) : (R < 0.925e1 ? 0.281485585602143026e-1 + R * (-0.295347014413492245e-2) + pow(R - 0.90e1, 2) * 0.271054879606755532e-2 + pow(R - 0.90e1, 3) * (-0.153767512451146544e-2) : (R < 0.95e1 ? 0.184245587984101615e-1 + R * (-0.188650983194704443e-2) + pow(R - 0.925e1, 2) * 0.155729245268395613e-2 + pow(R - 0.925e1, 3) * (-0.690438310783113144e-3) : (R < 0.100e2 ? 0.123438055689305548e-1 + R * (-0.123732078887690052e-2) + pow(R - 0.95e1, 2) * 0.103946371959662124e-2 + pow(R - 0.95e1, 3) * (-0.412614684485640860e-3) : (R < 0.105e2 ? 0.525206760094509839e-2 + R * (-0.507318082644509817e-3) + pow(R - 0.100e2, 2) * 0.420541692868159952e-3 + pow(R - 0.100e2, 3) * (-0.126972712758280853e-3) : (R < 0.110e2 ? 0.192555377295313486e-2 + R * (-0.182005924345060458e-3) + pow(R - 0.105e2, 2) * 0.230082623730738659e-3 + pow(R - 0.105e2, 3) * (-0.108070959521235416e-3) : (R < 0.120e2 ? 0.330242113957732208e-3 + R * (-0.329765202552483844e-4) + pow(R - 0.110e2, 2) * 0.679761844488855282e-4 + pow(R - 0.110e2, 3) * (-0.264513647236371405e-4) : (R < 0.140e2 ? -0.307412363039334939e-3 + R * 0.236217544716112472e-4 + pow(R - 0.120e2, 2) * (-0.113779097220258966e-4) + pow(R - 0.120e2, 3) * 0.199655528561013644e-5 : (R < 0.160e2 ? -0.352099031966101889e-4 + R * 0.206877901082929892e-5 + pow(R - 0.140e2, 2) * 0.601421991634922997e-6 + pow(R - 0.140e2, 3) * (-0.223266616899786153e-6) : (R < 0.180e2 ? -0.302141651851449059e-4 + R * 0.179526757457155655e-5 + pow(R - 0.160e2, 2) * (-0.738177709763794077e-6) + pow(R - 0.160e2, 3) * 0.106554389239007919e-6 : (R < 0.200e2 ? -0.218139388342055221e-5 + R * 0.121209406384475138e-6 + pow(R - 0.180e2, 2) * (-0.988513743297465610e-7) + pow(R - 0.180e2, 3) * 0.190988177937544912e-7 : (R < 0.250e2 ? 0.900384837489143253e-6 + R * (-0.450102774094571657e-7) + pow(R - 0.200e2, 2) * 0.157415324327804061e-7 + pow(R - 0.200e2, 3) * (-0.134902929737779489e-8) : -0.280658689475307333e-6 + R * 0.112278496150122922e-7 + pow(R - 0.250e2, 2) * (-0.449390702788651636e-8) + pow(R - 0.250e2, 3) * 0.449450827376811661e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.5737257600e-1 * (R - 0.300e2) * (R - 0.250e2) + 0.6120743580e0 * R + 0.3591241544e2 - 0.3060371790e-1 * R * R + 0.75000e3 * (0.1121241978e-3 * R - 0.4636644980e-2) * R) * pow(R, -6));
}

static double radcoeff_0_10_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.267618862499998666e-1 + R * 0.277555756156289135e-16 + pow(R - 0.475e1, 2) * 0.158889439747755024e1 + pow(R - 0.475e1, 3) * (-0.274356985743020099e1) : (R < 0.525e1 ? -0.131693974528306179e1 + R * 0.280027850470612349e0 + pow(R - 0.50e1, 2) * (-0.468782995595100782e0) + pow(R - 0.50e1, 3) * (-0.797463976293950605e-1) : (R < 0.55e1 ? -0.384289963671395202e-1 + R * 0.306839031175503846e-1 + pow(R - 0.525e1, 2) * (-0.528592793817147077e0) + pow(R - 0.525e1, 3) * 0.221760539787782207e0 : (R < 0.575e1 ? 0.115693858879447675e1 + R * (-0.192032392580813976e0) + pow(R - 0.55e1, 2) * (-0.362272388976310422e0) + pow(R - 0.55e1, 3) * 0.849635625358265423e0 : (R < 0.60e1 ? 0.127309183084719302e1 + R * (-0.213861907314294442e0) + pow(R - 0.575e1, 2) * 0.274954330042388617e0 + pow(R - 0.575e1, 3) * (-0.209627137220843807e0) : (R < 0.625e1 ? 0.697968591698049923e0 + R * (-0.115689830522008319e0) + pow(R - 0.60e1, 2) * 0.117733977126755776e0 + pow(R - 0.60e1, 3) * 0.247137452851100732e-1 : (R < 0.65e1 ? 0.308833018765451939e0 + R * (-0.521890147176723093e-1) + pow(R - 0.625e1, 2) * 0.136269286090588332e0 + pow(R - 0.625e1, 3) * (-0.786529447195963849e-1) : (R < 0.675e1 ? -0.308960065325340205e-1 + R * 0.119820119269754138e-2 + pow(R - 0.65e1, 2) * 0.772795775508910432e-1 + pow(R - 0.65e1, 3) * (-0.910748976067247973e-1) : (R < 0.70e1 ? -0.173040985161454580e0 + R * 0.227614466668821583e-1 + pow(R - 0.675e1, 2) * 0.897340434584743829e-2 + pow(R - 0.675e1, 3) * (-0.297901138135042882e-1) : (R < 0.725e1 ? -0.165253008748416780e0 + R * 0.216625024997738266e-1 + pow(R - 0.70e1, 2) * (-0.133691810142807788e-1) + pow(R - 0.70e1, 3) * 0.239641218874189071e-2 : (R < 0.75e1 ? -0.120845480263663416e0 + R * 0.154272392780225413e-1 + pow(R - 0.725e1, 2) * (-0.115718718727243607e-1) + pow(R - 0.725e1, 3) * 0.339622147453677798e-2 : (R < 0.775e1 ? -0.828970732210200512e-1 + R * 0.102780948681360056e-1 + pow(R - 0.75e1, 2) * (-0.902470576682177714e-2) + pow(R - 0.75e1, 3) * 0.451185461711102118e-2 : (R < 0.80e1 ? -0.549761734971091071e-1 + R * 0.661171472543343325e-2 + pow(R - 0.775e1, 2) * (-0.564081480398851125e-2) + pow(R - 0.775e1, 3) * 0.236018476101909841e-2 : (R < 0.825e1 ? -0.362688644610420774e-1 + R * 0.423384196613025947e-2 + pow(R - 0.80e1, 2) * (-0.387067623322418734e-2) + pow(R - 0.80e1, 3) * 0.207417043481259670e-2 : (R < 0.85e1 ? -0.237203157418756048e-1 + R * 0.268741080604552795e-2 + pow(R - 0.825e1, 2) * (-0.231504840711473960e-2) + pow(R - 0.825e1, 3) * 0.114089740373050702e-2 : (R < 0.875e1 ? -0.158265292523448384e-1 + R * 0.174380486568762819e-2 + pow(R - 0.85e1, 2) * (-0.145937535431685922e-2) + pow(R - 0.85e1, 3) * 0.694063860665386370e-3 : (R < 0.90e1 ? -0.106608268104346378e-1 + R * 0.114425416240395870e-2 + pow(R - 0.875e1, 2) * (-0.938827458817819392e-3) + pow(R - 0.875e1, 3) * 0.450031422407939235e-3 : (R < 0.925e1 ? -0.724717624626883966e-2 + R * 0.759221324696537697e-3 + pow(R - 0.90e1, 2) * (-0.601303892011864952e-3) + pow(R - 0.90e1, 3) * 0.197528843302856999e-3 : (R < 0.95e1 ? -0.484322993839149049e-2 + R * 0.495606036809890854e-3 + pow(R - 0.925e1, 2) * (-0.453157259534722203e-3) + pow(R - 0.925e1, 3) * 0.224169005980634934e-3 : (R < 0.100e2 ? -0.311485368550703861e-2 + R * 0.311059095663898818e-3 + pow(R - 0.95e1, 2) * (-0.285030505049245996e-3) + pow(R - 0.95e1, 3) * 0.114933133522896765e-3 : (R < 0.105e2 ? -0.118343812100825396e-2 + R * 0.112228440756825389e-3 + pow(R - 0.100e2, 2) * (-0.112630804764900821e-3) + pow(R - 0.100e2, 3) * 0.617962244225000497e-4 : (R < 0.110e2 ? -0.507893111442395931e-3 + R * 0.459448043087996085e-4 + pow(R - 0.105e2, 2) * (-0.199364681311507432e-4) + pow(R - 0.105e2, 3) * (-0.248991753289696865e-5) : (R < 0.120e2 ? -0.273345499079737531e-3 + R * 0.241408980279761421e-4 + pow(R - 0.110e2, 2) * (-0.236713444304961964e-4) + pow(R - 0.110e2, 3) * 0.788340012352005314e-5 : (R < 0.140e2 ? -0.482358150142694398e-5 + R * 0.448409537543912034e-6 + pow(R - 0.120e2, 2) * (-0.211440599360348146e-7) + pow(R - 0.120e2, 3) * (-0.624750206679606018e-7) : (R < 0.160e2 ? 0.627191292212056340e-5 + R * (-0.385866950215754539e-6) + pow(R - 0.140e2, 2) * (-0.395994183943798435e-6) + pow(R - 0.140e2, 3) * 0.140239886650837830e-6 : (R < 0.180e2 ? 0.422742481479430851e-5 + R * (-0.286965046180894272e-6) + pow(R - 0.160e2, 2) * 0.445445135961228595e-6 + pow(R - 0.160e2, 3) * (-0.105434785110390739e-6) : (R < 0.200e2 ? -0.413240912760796149e-5 + R * 0.229598076339331219e-6 + pow(R - 0.180e2, 2) * (-0.187163574701115863e-6) + pow(R - 0.180e2, 3) * 0.361590005532251167e-7 : (R < 0.250e2 ? 0.170313442132861519e-5 + R * (-0.851482158264307650e-7) + pow(R - 0.200e2, 2) * 0.297904286182348674e-7 + pow(R - 0.200e2, 3) * (-0.255323293378974277e-8) : -0.531554383642179865e-6 + R * 0.212636003216871943e-7 + pow(R - 0.250e2, 2) * (-0.850806538861127656e-8) + pow(R - 0.250e2, 3) * 0.850863581654767702e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.5443353600e-1 * (R - 0.300e2) * (R - 0.250e2) + 0.5807329124e0 * R + 0.3407035220e2 - 0.2903664562e-1 * R * R + 0.75000e3 * (0.1063768312e-3 * R - 0.4398893440e-2) * R) * pow(R, -6));
}

static double radcoeff_0_10_10_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.118167282000000123e0 + R * 0.277555756156289135e-16 + pow(R - 0.475e1, 2) * 0.145338813566588643e1 + pow(R - 0.475e1, 3) * (-0.370697108794354557e1) : (R < 0.525e1 ? -0.243436890987641680e0 + R * 0.316369888435283353e-1 + pow(R - 0.50e1, 2) * (-0.132684018029177286e1) + pow(R - 0.50e1, 3) * 0.277848981295063746e1 : (R < 0.55e1 ? 0.464929064714096119e0 + R * (-0.110816261374113545e0) + pow(R - 0.525e1, 2) * 0.757027179421205232e0 + pow(R - 0.525e1, 3) * (-0.805062180499003910e0) : (R < 0.575e1 ? -0.751940202911092093e0 + R * 0.116748169492925824e0 + pow(R - 0.55e1, 2) * 0.153230544046952299e0 + pow(R - 0.55e1, 3) * (-0.294400429194622282e0) : (R < 0.60e1 ? -0.870100652023859222e0 + R * 0.138163361042410310e0 + pow(R - 0.575e1, 2) * (-0.675697778490143980e-1) + pow(R - 0.575e1, 3) * 0.834405551974929660e-1 : (R < 0.625e1 ? -0.764181295514598236e0 + R * 0.120023576217433037e0 + pow(R - 0.60e1, 2) * (-0.498936145089467174e-2) + pow(R - 0.60e1, 3) * (-0.134143366635349759e0) : (R < 0.65e1 ? -0.593798108399110069e0 + R * 0.923770142478576167e-1 + pow(R - 0.625e1, 2) * (-0.105596886427407000e0) + pow(R - 0.625e1, 3) * 0.117368633439061121e-1 : (R < 0.675e1 ? -0.271328946620187306e0 + R * 0.417792329111365060e-1 + pow(R - 0.65e1, 2) * (-0.967942389194774155e-1) + pow(R - 0.65e1, 3) * 0.753765759157255105e-1 : (R < 0.70e1 ? -0.449187500942752546e-1 + R * 0.751522143559633406e-2 + pow(R - 0.675e1, 2) * (-0.402618069826832792e-1) + pow(R - 0.675e1, 3) * 0.439359328971917623e-1 : (R < 0.725e1 ? 0.365017984326529363e-1 + R * (-0.437769463752184836e-2) + pow(R - 0.70e1, 2) * (-0.730985730978945310e-2) + pow(R - 0.70e1, 3) * 0.111173164315073840e-1 : (R < 0.75e1 ? 0.476042711439398150e-1 + R * (-0.594812646150894020e-2) + pow(R - 0.725e1, 2) * 0.102813001384108641e-2 + pow(R - 0.725e1, 3) * 0.291595337677869482e-2 : (R < 0.775e1 ? 0.397580440533179397e-1 + R * (-0.488732019644239155e-2) + pow(R - 0.75e1, 2) * 0.321509504642510753e-2 + pow(R - 0.75e1, 3) * (-0.759172562622175751e-3) : (R < 0.80e1 ? 0.285918047475915912e-1 + R * (-0.342211752872149597e-2) + pow(R - 0.775e1, 2) * 0.264571562445847569e-2 + pow(R - 0.775e1, 3) * (-0.104966875828996654e-2) : (R < 0.825e1 ? 0.197324015393730151e-1 + R * (-0.229607260867162669e-2) + pow(R - 0.80e1, 2) * 0.185846405574100078e-2 + pow(R - 0.80e1, 3) * (-0.679434279417979016e-3) : (R < 0.85e1 ? 0.132227750532839788e-1 + R * (-0.149423450819199726e-2) + pow(R - 0.825e1, 2) * 0.134888834617751647e-2 + pow(R - 0.825e1, 3) * (-0.867407788038108887e-3) : (R < 0.875e1 ? 0.894318301916326858e-2 + R * (-0.982429295360384529e-3) + pow(R - 0.85e1, 2) * 0.698332505148934802e-3 + pow(R - 0.85e1, 3) * (-0.227038043629588376e-3) : (R < 0.90e1 ? 0.630056091160656733e-2 + R * (-0.675832675966464894e-3) + pow(R - 0.875e1, 2) * 0.528053972426743520e-3 + pow(R - 0.875e1, 3) * (-0.286101266243535333e-3) : (R < 0.925e1 ? 0.443564696346380408e-2 + R * (-0.465449677173756030e-3) + pow(R - 0.90e1, 2) * 0.313478022744091993e-3 + pow(R - 0.90e1, 3) * 0.237269742037282769e-4 : (R < 0.95e1 ? 0.296462274778122635e-2 + R * (-0.304261858138510941e-3) + pow(R - 0.925e1, 2) * 0.331273253396888200e-3 + pow(R - 0.925e1, 3) * (-0.217974859691377613e-3) : (R < 0.100e2 ? 0.179664123412590147e-2 + R * (-0.179495517632200153e-3) + pow(R - 0.95e1, 2) * 0.167792108628354977e-3 + pow(R - 0.95e1, 3) * (-0.775889706479093147e-4) : (R < 0.105e2 ? 0.732886833527771628e-3 + R * (-0.698951369897771684e-4) + pow(R - 0.100e2, 2) * 0.514086526564909985e-4 + pow(R - 0.100e2, 3) * (-0.152679704738733157e-4) : (R < 0.110e2 ? 0.324274914974257214e-3 + R * (-0.299374621886911600e-4) + pow(R - 0.105e2, 2) * 0.285066969456810251e-4 + pow(R - 0.105e2, 3) * (-0.115587985285974021e-4) : (R < 0.120e2 ? 0.111743160852740108e-3 + R * (-0.100998641394581924e-4) + pow(R - 0.110e2, 2) * 0.111684991527849202e-4 + pow(R - 0.110e2, 3) * (-0.377592284832672814e-5) : (R < 0.140e2 ? -0.129750199695775598e-4 + R * 0.909365621131463371e-6 + pow(R - 0.120e2, 2) * (-0.159269392195264269e-6) + pow(R - 0.120e2, 3) * 0.506337268976627293e-8 : (R < 0.160e2 ? -0.550315120588642254e-5 + R * 0.333048524627601625e-6 + pow(R - 0.140e2, 2) * (-0.128889156056666630e-6) + pow(R - 0.140e2, 3) * 0.315501176589329185e-7 : (R < 0.180e2 ? -0.357502349173008126e-5 + R * 0.196093312308130073e-6 + pow(R - 0.160e2, 2) * 0.604115498969308810e-7 + pow(R - 0.160e2, 3) * (-0.262335759129979562e-7) : (R < 0.200e2 ? -0.222642509481780624e-5 + R * 0.122936600939878124e-6 + pow(R - 0.180e2, 2) * (-0.969899055810568691e-7) + pow(R - 0.180e2, 3) * 0.186455295805589024e-7 : (R < 0.250e2 ? 0.819044866652850144e-6 + R * (-0.412766664176425109e-7) + pow(R - 0.200e2, 2) * 0.148832719022965468e-7 + pow(R - 0.200e2, 3) * (-0.128456549735360877e-8) : -0.281701690995057438e-6 + R * 0.112136403038022993e-7 + pow(R - 0.250e2, 2) * (-0.438521055800758496e-8) + pow(R - 0.250e2, 3) * 0.436344057049425152e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2076307744e1 * (R - 0.300e2) * (R - 0.250e2) - 0.2214743336e2 * R - 0.1301114793e4 + 0.1107371668e1 * R * R + 0.75000e3 * (-0.4060273420e-2 * R + 0.1679464547e0) * R) * pow(R, -6));
}

static double radcoeff_0_12_12_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.294613629599999993e-2 + pow(R - 0.475e1, 2) * 0.411824137690855074e0 + pow(R - 0.475e1, 3) * (-0.737174119403420258e0) : (R < 0.525e1 ? -0.321292807996431229e0 + R * 0.676919214572862388e-1 + pow(R - 0.50e1, 2) * (-0.141056451861710119e0) + pow(R - 0.50e1, 3) * 0.104716916290260656e0 : (R < 0.55e1 ? -0.612801627569890470e-1 + R * 0.167981173308550565e-1 + pow(R - 0.525e1, 2) * (-0.625187646440146239e-1) + pow(R - 0.525e1, 3) * (-0.524607598376223977e-1) : (R < 0.575e1 ? 0.160019476433885505e0 + R * (-0.242976574607064559e-1) + pow(R - 0.55e1, 2) * (-0.101864334522231426e0) + pow(R - 0.55e1, 3) * 0.207627401780229009e0 : (R < 0.60e1 ? 0.225908802886168020e0 + R * (-0.362996868880292242e-1) + pow(R - 0.575e1, 2) * 0.538562168129403523e-1 + pow(R - 0.575e1, 3) * (-0.825717304832938037e-1) : (R < 0.625e1 ? 0.159309179503059839e0 + R * (-0.248537779471766397e-1) + pow(R - 0.60e1, 2) * (-0.807258104953000911e-2) + pow(R - 0.60e1, 3) * 0.345458756729462926e-1 : (R < 0.65e1 ? 0.144087790220401357e0 + R * (-0.224127167832642131e-1) + pow(R - 0.625e1, 2) * 0.178368257051797138e-1 + pow(R - 0.625e1, 3) * 0.107970634395085641e-1 : (R < 0.675e1 ? 0.742426913342822542e-1 + R * (-0.114698545357665022e-1) + pow(R - 0.65e1, 2) * 0.259346232848111369e-1 + pow(R - 0.65e1, 3) * (-0.174651089509805027e-1) : (R < 0.70e1 ? 0.101656378922710105e-1 + R * (-0.177725082166977928e-2) + pow(R - 0.675e1, 2) * 0.128357915715757581e-1 + pow(R - 0.675e1, 3) * (-0.160120984835865621e-1) : (R < 0.725e1 ? -0.131917054141193341e-1 + R * 0.163837649844561896e-2 + pow(R - 0.70e1, 2) * 0.826717708885836675e-3 + pow(R - 0.70e1, 3) * (-0.101657263467325046e-2) : (R < 0.75e1 ? -0.147708677741829452e-1 + R * 0.186112798388730276e-2 + pow(R - 0.725e1, 2) * 0.642882328808987879e-4 + pow(R - 0.725e1, 3) * (-0.197370853932044227e-2) : (R < 0.775e1 ? -0.122632421954387699e-1 + R * 0.152320174920516933e-2 + pow(R - 0.75e1, 2) * (-0.141599317160943298e-2) + pow(R - 0.75e1, 3) * 0.786912513555021714e-3 : (R < 0.80e1 ? -0.799595496691314980e-2 + R * 0.962751259692019379e-3 + pow(R - 0.775e1, 2) * (-0.825808786443166698e-3) + pow(R - 0.775e1, 3) * 0.498680449900356054e-3 : (R < 0.825e1 ? -0.548456166311402180e-2 + R * 0.643349450826752756e-3 + pow(R - 0.80e1, 2) * (-0.451798449017899631e-3) + pow(R - 0.80e1, 3) * (-0.149369947564458785e-4) : (R < 0.85e1 ? -0.362625819075799733e-2 + R * 0.414649539800969393e-3 + pow(R - 0.825e1, 2) * (-0.463001195085234040e-3) + pow(R - 0.825e1, 3) * 0.320485257125425625e-3 : (R < 0.875e1 ? -0.219320648273964259e-2 + R * 0.243239927969369715e-3 + pow(R - 0.85e1, 2) * (-0.222637252241164807e-3) + pow(R - 0.85e1, 3) * 0.105971721774743874e-3 : (R < 0.90e1 ? -0.140528738033357807e-2 + R * 0.151790999681551794e-3 + pow(R - 0.875e1, 2) * (-0.143158460910106902e-3) + pow(R - 0.875e1, 3) * 0.155178640955990496e-4 : (R < 0.925e1 ? -0.795965639079808320e-3 + R * 0.831213687444231448e-4 + pow(R - 0.90e1, 2) * (-0.131520062838407615e-3) + pow(R - 0.90e1, 3) * 0.186401394642859861e-3 : (R < 0.95e1 ? -0.516282749421988945e-3 + R * 0.523115988207555697e-4 + pow(R - 0.925e1, 2) * 0.828098314373729426e-5 + pow(R - 0.925e1, 3) * (-0.904843629870382912e-4) : (R < 0.100e2 ? -0.395338404509268057e-3 + R * 0.394862723325545322e-4 + pow(R - 0.95e1, 2) * (-0.595822890965414377e-4) + pow(R - 0.95e1, 3) * 0.404214030228647333e-4 : (R < 0.105e2 ? -0.112518933111616440e-3 + R * 0.102200355031616445e-4 + pow(R - 0.100e2, 2) * 0.104981543775566486e-5 + pow(R - 0.100e2, 3) * (-0.626111436015790607e-5) : (R < 0.110e2 ? -0.747559050573882446e-4 + R * 0.657401517079887981e-5 + pow(R - 0.105e2, 2) * (-0.834185610248119340e-5) + pow(R - 0.105e2, 3) * 0.720680222576686646e-5 : (R < 0.120e2 ? -0.436362200400711996e-4 + R * 0.363726073764283625e-5 + pow(R - 0.110e2, 2) * 0.246834723616910587e-5 + pow(R - 0.110e2, 3) * (-0.188336286281194228e-5) : (R < 0.140e2 ? -0.344905062731426545e-4 + R * 0.292386662154522157e-5 + pow(R - 0.120e2, 2) * (-0.318174135226672098e-5) + pow(R - 0.120e2, 3) * 0.725594785497055048e-6 : (R < 0.160e2 ? 0.148648783649980204e-4 + R * (-0.109596136155700155e-5) + pow(R - 0.140e2, 2) * 0.117182736071560910e-5 + pow(R - 0.140e2, 3) * (-0.259603913268554101e-6) : (R < 0.180e2 ? -0.767764323652456720e-5 + R * 0.476101122082785429e-6 + pow(R - 0.160e2, 2) * (-0.385796118895715504e-6) + pow(R - 0.160e2, 3) * 0.797524484271613844e-7 : (R < 0.200e2 ? 0.196798357553451662e-5 + R * (-0.110053972374139831e-6) + pow(R - 0.180e2, 2) * 0.927185716672528282e-7 + pow(R - 0.180e2, 3) * (-0.179988077275914542e-7) : (R < 0.250e2 ? -0.902904478375480186e-6 + R * 0.448346215637740115e-7 + pow(R - 0.200e2, 2) * (-0.152742746982959036e-7) + pow(R - 0.200e2, 3) * 0.130074448110822050e-8 : 0.257504486801712546e-6 + R * (-0.103522893360685028e-7) + pow(R - 0.250e2, 2) * 0.423689251832740140e-8 + pow(R - 0.250e2, 3) * (-0.425773527822740198e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1987855072e1 * (R - 0.300e2) * (R - 0.250e2) - 0.2120395656e2 * R - 0.1245711520e4 + 0.1060197828e1 * R * R + 0.75000e3 * (-0.3887352180e-2 * R + 0.1607944783e0) * R) * pow(R, -6));
}

static double radcoeff_0_12_12_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.891882027199999983e-2 + pow(R - 0.475e1, 2) * 0.238206609860123486e0 + pow(R - 0.475e1, 3) * (-0.635303129104493824e0) : (R < 0.525e1 ? -0.387735966284561556e-2 + R * (-0.160317770308768259e-4) + pow(R - 0.50e1, 2) * (-0.238270736968246938e0) + pow(R - 0.50e1, 3) * 0.464995416497481717e0 : (R < 0.55e1 ? 0.156227094086351687e0 + R * (-0.319647596678765133e-1) + pow(R - 0.525e1, 2) * 0.110475825404864364e0 + pow(R - 0.525e1, 3) * (-0.101814568373433278e0) : (R < 0.575e1 ? -0.372712656849531199e-1 + R * 0.418292146453693066e-2 + pow(R - 0.55e1, 2) * 0.341148991247894051e-1 + pow(R - 0.55e1, 3) * (-0.773079661717485100e-1) : (R < 0.60e1 ? -0.510797054159405212e-1 + R * 0.674512736972878672e-2 + pow(R - 0.575e1, 2) * (-0.238660755040219809e-1) + pow(R - 0.575e1, 3) * 0.744795716204273428e-1 : (R < 0.625e1 ? -0.635988833892875416e-1 + R * 0.877700929654792218e-2 + pow(R - 0.60e1, 2) * 0.319936032112985227e-1 + pow(R - 0.60e1, 3) * (-0.394070928539608512e-1) : (R < 0.65e1 ? -0.116014842111497055e0 + R * 0.173849809920795274e-1 + pow(R - 0.625e1, 2) * 0.243828357082788568e-2 + pow(R - 0.625e1, 3) * (-0.257571916925839819e-1) : (R < 0.675e1 ? -0.927977497383708078e-1 + R * 0.137746493351339691e-1 + pow(R - 0.65e1, 2) * (-0.168796101986101038e-1) + pow(R - 0.65e1, 3) * 0.532550704829688748e-2 : (R < 0.70e1 ? -0.435409247658459439e-1 + R * 0.633337680738458447e-2 + pow(R - 0.675e1, 2) * (-0.128854799123874382e-1) + pow(R - 0.675e1, 3) * 0.100766168305963938e-1 : (R < 0.725e1 ? -0.123152000191938272e-1 + R * 0.178000250692768964e-2 + pow(R - 0.70e1, 2) * (-0.532801728944014286e-2) + pow(R - 0.70e1, 3) * 0.534452872051753569e-2 : (R < 0.75e1 ? -0.515848893758757933e-3 + R * 0.118092997304656265e-3 + pow(R - 0.725e1, 2) * (-0.131962074905199152e-2) + pow(R - 0.725e1, 3) * 0.128304352573346500e-2 : (R < 0.775e1 ? 0.256602021539736056e-2 + R * (-0.301146716146314742e-3) + pow(R - 0.75e1, 2) * (-0.357338104751892720e-3) + pow(R - 0.75e1, 3) * 0.717535173348606784e-3 : (R < 0.80e1 ? 0.289691492807532926e-2 + R * (-0.345277923519397357e-3) + pow(R - 0.775e1, 2) * 0.180813275259562341e-3 + pow(R - 0.775e1, 3) * (-0.253394383278920111e-4) : (R < 0.825e1 ? 0.222257588550876751e-2 + R * (-0.259622430576095925e-3) + pow(R - 0.80e1, 2) * 0.161808696513643331e-3 + pow(R - 0.80e1, 3) * 0.104466770042961171e-3 : (R < 0.85e1 ? 0.140526331429380682e-2 + R * (-0.159130562936219018e-3) + pow(R - 0.825e1, 2) * 0.240158774045864216e-3 + pow(R - 0.825e1, 3) * (-0.259290815603952288e-3) : (R < 0.875e1 ? 0.808791766351737930e-3 + R * (-0.876682038390279880e-4) + pow(R - 0.85e1, 2) * 0.456906623428999796e-4 + pow(R - 0.85e1, 3) * 0.909763701328478917e-4 : (R < 0.90e1 ? 0.463914183532103852e-3 + R * (-0.477648032676690135e-4) + pow(R - 0.875e1, 2) * 0.113922939942535912e-3 + pow(R - 0.875e1, 3) * (-0.964831801274395121e-4) : (R < 0.925e1 ? 0.119688954312663665e-3 + R * (-0.889392957029596262e-5) + pow(R - 0.90e1, 2) * 0.415605548469562847e-4 + pow(R - 0.90e1, 3) * (-0.219115560663089745e-3) : (R < 0.95e1 ? 0.306673792713111119e-3 + R * (-0.291978197711471491e-4) + pow(R - 0.925e1, 2) * (-0.122776115650361037e-3) + pow(R - 0.925e1, 3) * 0.266031690939798554e-3 : (R < 0.100e2 ? 0.412474630508596581e-3 + R * (-0.407049355451154322e-4) + pow(R - 0.95e1, 2) * 0.767476525544878783e-4 + pow(R - 0.95e1, 3) * (-0.612382438085140124e-4) : (R < 0.105e2 ? 0.115817066190130653e-3 + R * (-0.988596584701306651e-5) + pow(R - 0.100e2, 2) * (-0.151097131582831454e-4) + pow(R - 0.100e2, 3) * 0.180085899446185617e-4 : (R < 0.110e2 ? 0.131125053991739061e-3 + R * (-0.114892365468322923e-4) + pow(R - 0.105e2, 2) * 0.119031717586446972e-4 + pow(R - 0.105e2, 3) * (-0.822871670596022325e-5) : (R < 0.120e2 ? 0.700242808222353987e-4 + R * (-0.575760231765776384e-5) + pow(R - 0.110e2, 2) * (-0.439903300295638819e-6) + pow(R - 0.110e2, 3) * 0.881810545953402813e-6 : (R < 0.140e2 ? 0.492786876206660051e-4 + R * (-0.399197728038883367e-5) + pow(R - 0.120e2, 2) * 0.220552833756456957e-5 + pow(R - 0.120e2, 3) * (-0.356021998810076347e-6) : (R < 0.160e2 ? -0.844526612317939426e-5 + R * 0.557872084148528122e-6 + pow(R - 0.140e2, 2) * 0.693963447041112768e-7 + pow(R - 0.140e2, 3) * (-0.575406543391876678e-7) : (R < 0.180e2 ? -0.202156640701553888e-5 + R * 0.144969610894721189e-6 + pow(R - 0.160e2, 2) * (-0.275847581331014743e-6) + pow(R - 0.160e2, 3) * 0.667092032043270585e-7 : (R < 0.200e2 ? 0.286055485699343361e-5 + R * (-0.157910275977412978e-6) + pow(R - 0.180e2, 2) * 0.124407637894947634e-6 + pow(R - 0.180e2, 3) * (-0.239112033281205626e-7) : (R < 0.250e2 ? -0.104702645089861483e-5 + R * 0.527858356649307342e-7 + pow(R - 0.200e2, 2) * (-0.190595820737757581e-7) + pow(R - 0.200e2, 3) * 0.164554028495792216e-8 : 0.361684017024567033e-6 + R * (-0.143944637009826809e-7) + pow(R - 0.250e2, 2) * 0.562352220059307311e-8 + pow(R - 0.250e2, 3) * (-0.559436473679307301e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2780883968e1 * (R - 0.300e2) * (R - 0.250e2) + 0.2966285768e2 * R + 0.1742640360e4 - 0.1483142884e1 * R * R + 0.75000e3 * (0.543809052e-2 * R - 0.2249378343e0) * R) * pow(R, -6));
}

static double radcoeff_3_2_5_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.100000000000000466e-15 + R * 0.986076131526264757e-31 + pow(R - 0.475e1, 2) * 0.351384387633061075e-14 + pow(R - 0.475e1, 3) * (-0.765537550532244313e-14) : (R < 0.525e1 ? -0.160769515458673604e-14 + R * 0.321539030917347189e-15 + pow(R - 0.50e1, 2) * (-0.222768775266122199e-14) + pow(R - 0.50e1, 3) * 0.376612651596733138e-14 : (R < 0.55e1 ? 0.452319649264292134e-15 + R * (-0.861561236693889779e-16) + pow(R - 0.525e1, 2) * 0.596907134314277031e-15 + pow(R - 0.525e1, 3) * (-0.100913055854688428e-14) : (R < 0.575e1 ? -0.126970050681147925e-15 + R * 0.230854637602087134e-16 + pow(R - 0.55e1, 2) * (-0.159940784595886229e-15) + pow(R - 0.55e1, 3) * 0.270395718220205451e-15 : (R < 0.60e1 ? 0.355679553858137706e-16 + R * (-0.618573137144587351e-17) + pow(R - 0.575e1, 2) * 0.428560040692678594e-16 + pow(R - 0.575e1, 3) * (-0.724523143339374493e-16) : (R < 0.625e1 ? -0.994477035344869607e-17 + R * 0.165746172557478255e-17 + pow(R - 0.60e1, 2) * (-0.114832316811852290e-16) + pow(R - 0.60e1, 3) * 0.194135391155443892e-16 : (R < 0.65e1 ? 0.277572206783286526e-17 + R * (-0.444115530853258418e-18) + pow(R - 0.625e1, 2) * 0.307692265547306478e-17 + pow(R - 0.625e1, 3) * (-0.520184212824012365e-17) : (R < 0.675e1 ? -0.773502585948629220e-18 + R * 0.119000397838250642e-18 + pow(R - 0.65e1, 2) * (-0.824458940707028442e-18) + pow(R - 0.65e1, 3) * 0.139382939741610350e-17 : (R < 0.70e1 ? 0.215230908373273053e-18 + R * (-0.318860604997441549e-19) + pow(R - 0.675e1, 2) * 0.220913107355049280e-18 + pow(R - 0.675e1, 3) * (-0.373475461424290594e-18) : (R < 0.725e1 ? -0.598069091250819283e-19 + R * 0.854384416072598975e-20 + pow(R - 0.70e1, 2) * (-0.591934887131686774e-19) + pow(R - 0.70e1, 3) * 0.100072448281058874e-18 : (R < 0.75e1 ? 0.165975420379086387e-19 + R * (-0.228931614315981204e-20) + pow(R - 0.725e1, 2) * 0.158608474976254747e-19 + pow(R - 0.725e1, 3) * (-0.268143316999449033e-19) : (R < 0.775e1 ? -0.460065308934941546e-20 + R * 0.613420411913255394e-21 + pow(R - 0.75e1, 2) * (-0.424990127733320350e-20) + pow(R - 0.75e1, 3) * 0.718487851872072767e-20 : (R < 0.80e1 ? 0.127383265982237628e-20 + R * (-0.164365504493209845e-21) + pow(R - 0.775e1, 2) * 0.113875761170734282e-20 + pow(R - 0.775e1, 3) * (-0.192518237493801340e-20) : (R < 0.825e1 ? -0.352332848476671870e-21 + R * 0.440416060595839838e-22 + pow(R - 0.80e1, 2) * (-0.305129169496167414e-21) + pow(R - 0.80e1, 3) * 0.515850981031325820e-21 : (R < 0.85e1 ? 0.973575878972905008e-22 + R * (-0.118009197451261215e-22) + pow(R - 0.825e1, 2) * 0.817590662773269865e-22 + pow(R - 0.825e1, 3) * (-0.138221549187289978e-21) : (R < 0.875e1 ? -0.268776198278242314e-22 + R * 0.316207292092049790e-23 + pow(R - 0.85e1, 2) * (-0.219070956131405059e-22) + pow(R - 0.85e1, 3) * 0.370352157178340512e-22 : (R < 0.90e1 ? 0.741450446236385829e-23 + R * (-0.847371938555869514e-24) + pow(R - 0.875e1, 2) * 0.586931617523503548e-23 + pow(R - 0.875e1, 3) * (-0.991931368404622677e-23) : (R < 0.925e1 ? -0.204673349972682289e-23 + R * 0.227414833302980341e-24 + pow(R - 0.90e1, 2) * (-0.157016908779963533e-23) + pow(R - 0.90e1, 3) * 0.264203901835085511e-23 : (R < 0.95e1 ? 0.576158400568480216e-24 + R * (-0.622873946560519196e-25) + pow(R - 0.925e1, 2) * 0.411360175963506100e-24 + pow(R - 0.925e1, 3) * (-0.648842389357193503e-24) : (R < 0.100e2 ? -0.206480080551659542e-24 + R * 0.217347453212273199e-25 + pow(R - 0.95e1, 2) * (-0.752716160543891078e-25) + pow(R - 0.95e1, 3) * 0.636042508238689361e-25 : (R < 0.105e2 ? 0.583368261526008929e-25 + R * (-0.583368261526008944e-26) + pow(R - 0.100e2, 2) * 0.201347601814142935e-25 + pow(R - 0.100e2, 3) * (-0.169347899017882292e-25) : (R < 0.110e2 ? -0.167998439680368244e-25 + R * 0.159998513981303087e-26 + pow(R - 0.105e2, 2) * (-0.526742467126805107e-26) + pow(R - 0.105e2, 3) * 0.413490878328397794e-26 : (R < 0.120e2 ? 0.622883738391240045e-26 + R * (-0.566257943992036388e-27) + pow(R - 0.110e2, 2) * 0.934938503657916014e-27 + pow(R - 0.110e2, 3) * (-0.368680559665879492e-27) : (R < 0.140e2 ? -0.237092861191388365e-26 + R * 0.197577384326156963e-27 + pow(R - 0.120e2, 2) * (-0.171103175339722573e-27) + pow(R - 0.120e2, 3) * 0.361572415883220402e-28 : (R < 0.160e2 ? 0.741277851620162923e-27 + R * (-0.529484179728687802e-28) + pow(R - 0.140e2, 2) * 0.458402741902096847e-28 + pow(R - 0.140e2, 3) * (-0.968303260188764590e-29) : (R < 0.180e2 ? -0.227460601045091101e-27 + R * 0.142162875653181938e-28 + pow(R - 0.160e2, 2) * (-0.122579214211161977e-28) + pow(R - 0.160e2, 3) * 0.257488881922855041e-29 : (R < 0.200e2 ? 0.705011811912718641e-28 + R * (-0.391673228840399214e-29) + pow(R - 0.180e2, 2) * 0.319141149425510476e-29 + pow(R - 0.180e2, 3) * (-0.616522675026554344e-30) : (R < 0.250e2 ? -0.290128317659554952e-28 + R * 0.145064158829777476e-29 + pow(R - 0.200e2, 2) * (-0.507724555904221131e-30) + pow(R - 0.200e2, 3) * 0.435192476489332389e-31 : 0.906650992686109296e-29 + R * (-0.362660397074443734e-30) + pow(R - 0.250e2, 2) * 0.145064158829777485e-30 + pow(R - 0.250e2, 3) * (-0.145064158829777463e-31))))))))))))))))))))))))))))) : -0.0e0);
}

static double radcoeff_4_0_4_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.354889960999999987e1 + pow(R - 0.475e1, 2) * (-0.225021539276746125e2) + pow(R - 0.475e1, 3) * 0.410576395186984442e2 : (R < 0.525e1 ? 0.205478883774067391e2 + R * (-0.355276955408134754e1) + pow(R - 0.50e1, 2) * 0.829107571134922416e1 + pow(R - 0.50e1, 3) * (-0.105497810200953346e2) : (R < 0.55e1 ? 0.952210723029170758e1 + R * (-0.138531563967461091e1) + pow(R - 0.525e1, 2) * 0.378739946277723005e0 + pow(R - 0.525e1, 3) * 0.371390225682882491e0 : (R < 0.575e1 ? 0.812705042671115052e1 + R * (-0.112630999922020902e1) + pow(R - 0.55e1, 2) * 0.657282615539884874e0 + pow(R - 0.55e1, 3) * (-0.872320554636196954e0) : (R < 0.60e1 ? 0.720528365980618268e1 + R * (-0.961228795444553419e0) + pow(R - 0.575e1, 2) * 0.304219956273715179e-2 + pow(R - 0.575e1, 3) * (-0.434664615138095178e0) : (R < 0.625e1 ? 0.767855325600946692e1 + R * (-0.104120731100157782e1) + pow(R - 0.60e1, 2) * (-0.322956261790834254e0) + pow(R - 0.60e1, 3) * 0.475390663188581197e0 : (R < 0.65e1 ? 0.811793635343209807e1 + R * (-0.111354969254913572e1) + pow(R - 0.625e1, 2) * 0.335867356006016304e-1 + pow(R - 0.625e1, 3) * 0.378171498383764959e0 : (R < 0.675e1 ? 0.755589104971221470e1 + R * (-0.102584916880187915e1) + pow(R - 0.65e1, 2) * 0.317215359388425322e0 + pow(R - 0.65e1, 3) * 0.138765980076365258e0 : (R < 0.70e1 ? 0.633165769664259948e1 + R * (-0.841222867843347988e0) + pow(R - 0.675e1, 2) * 0.421289844445699280e0 + pow(R - 0.675e1, 3) * (-0.610734282892307495e-1) : (R < 0.725e1 ? 0.496267845867310342e1 + R * (-0.642029213424729073e0) + pow(R - 0.70e1, 2) * 0.375484773228776214e0 + pow(R - 0.70e1, 3) * (-0.101472273319438935e0) : (R < 0.75e1 ? 0.376136732131858453e1 + R * (-0.473312878057735753e0) + pow(R - 0.725e1, 2) * 0.299380568239197009e0 + pow(R - 0.725e1, 3) * (-0.947486528330162142e-1) : (R < 0.775e1 ? 0.278916132128245797e1 + R * (-0.341387966344327776e0) + pow(R - 0.75e1, 2) * 0.228319078614434845e0 + pow(R - 0.75e1, 3) * (-0.789265041484951829e-1) : (R < 0.80e1 ? 0.203215168377838751e1 + R * (-0.242027146564953222e0) + pow(R - 0.775e1, 2) * 0.169124200503063454e0 + pow(R - 0.775e1, 3) * (-0.618267897730019472e-1) : (R < 0.825e1 ? 0.145799928536687484e1 + R * (-0.169057569395859364e0) + pow(R - 0.80e1, 2) * 0.122754108173311990e0 + pow(R - 0.80e1, 3) * (-0.466020436394982696e-1) : (R < 0.85e1 ? 0.103067010023577676e1 + R * (-0.116418398491609287e0) + pow(R - 0.825e1, 2) * 0.878025754436882883e-1 + pow(R - 0.825e1, 3) * (-0.347760961490046205e-1) : (R < 0.875e1 ? 0.717877842300479796e0 + R * (-0.790376287977035130e-1) + pow(R - 0.85e1, 2) * 0.617205033319348229e-1 + pow(R - 0.85e1, 3) * (-0.251370360844830679e-1) : (R < 0.90e1 ? 0.492555855318795921e0 + R * (-0.528905713975766772e-1) + pow(R - 0.875e1, 2) * 0.428677262685725202e-1 + pow(R - 0.875e1, 3) * (-0.181652871930632065e-1) : (R < 0.925e1 ? 0.332700409527907914e0 + R * (-0.348626996119897684e-1) + pow(R - 0.90e1, 2) * 0.292437608737751153e-1 + pow(R - 0.90e1, 3) * (-0.127935725832642126e-1) : (R < 0.95e1 ? 0.221264703418794340e0 + R * (-0.226396140344642532e-1) + pow(R - 0.925e1, 2) * 0.196485814363269555e-1 + pow(R - 0.925e1, 3) * (-0.925024256987977411e-2) : (R < 0.100e2 ? 0.145494437473455696e0 + R * (-0.145497437981532314e-1) + pow(R - 0.95e1, 2) * 0.127108995089171249e-1 + pow(R - 0.95e1, 3) * (-0.514565688922132523e-2) : (R < 0.105e2 ? 0.595123868195210001e-1 + R * (-0.569808695615209998e-2) + pow(R - 0.100e2, 2) * 0.499241417508513620e-2 + pow(R - 0.100e2, 3) * (-0.194237282956186879e-2) : (R < 0.110e2 ? 0.233935309541028445e-1 + R * (-0.216245240323836635e-2) + pow(R - 0.105e2, 2) * 0.207885493074233280e-2 + pow(R - 0.105e2, 3) * (-0.911543846131200272e-3) : (R < 0.120e2 ? 0.845213419845877202e-2 + R * (-0.767255357094433882e-3) + pow(R - 0.110e2, 2) * 0.711539161545532233e-3 + pow(R - 0.110e2, 3) * (-0.220381741051098269e-3) : (R < 0.140e2 ? -0.199905580320027876e-3 + R * (-0.532225715666434474e-5) + pow(R - 0.120e2, 2) * 0.503939383922373996e-4 + pow(R - 0.120e2, 3) * (-0.101298815319526124e-4) : (R < 0.160e2 ? -0.119960933160395428e-2 + R * 0.746949180288538771e-4 + pow(R - 0.140e2, 2) * (-0.103853507994782853e-4) + pow(R - 0.140e2, 3) * (-0.123074307474326098e-6) : (R < 0.180e2 ? -0.553842611029981089e-3 + R * 0.316766231412488194e-4 + pow(R - 0.160e2, 2) * (-0.111237966443242419e-4) + pow(R - 0.160e2, 3) * 0.159574258309991454e-5 : (R < 0.200e2 ? -0.129338896500715028e-3 + R * 0.633034756115083394e-5 + pow(R - 0.180e2, 2) * (-0.154934114572475379e-5) + pow(R - 0.180e2, 3) * 0.195882802324668342e-6 : (R < 0.250e2 ? -0.570337795649567849e-4 + R * 0.248357660614783931e-5 + pow(R - 0.200e2, 2) * (-0.374044331776743844e-6) + pow(R - 0.200e2, 3) * 0.220119866214351857e-7 : -0.113947815027009991e-4 + R * 0.394032284988040020e-6 + pow(R - 0.250e2, 2) * (-0.438645324552160190e-7) + pow(R - 0.250e2, 3) * 0.191625123552160200e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2355919181e4 * (R - 0.300e2) * (R - 0.250e2) - 0.2512980664e5 * R - 0.1476375332e7 + 0.1256490332e4 * R * R + 0.75000e3 * (-0.460712969e1 * R + 0.1905676163e3) * R) * pow(R, -6));
}

static double radcoeff_4_0_4_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.194480600999999997e1 + pow(R - 0.475e1, 2) * 0.514686356688905988e1 + pow(R - 0.475e1, 3) * (-0.863631442755623802e1) : (R < 0.525e1 ? -0.652868359138867582e1 + R * 0.954122828277735202e0 + pow(R - 0.50e1, 2) * (-0.133037225377811930e1) + pow(R - 0.50e1, 3) * 0.635931122668714766e0 : (R < 0.55e1 ? -0.373566296616756244e1 + R * 0.408173786889059476e0 + pow(R - 0.525e1, 2) * (-0.853423911776583166e0) + pow(R - 0.525e1, 3) * 0.111491793688137997e1 : (R < 0.575e1 ? -0.257442473291314666e1 + R * 0.190508944166026706e0 + pow(R - 0.55e1, 2) * (-0.172354591155480900e-1) + pow(R - 0.55e1, 3) * 0.612998025805765012e0 : (R < 0.60e1 ? -0.317726040656929332e1 + R * 0.296828344446833592e0 + pow(R - 0.575e1, 2) * 0.442513060238775735e0 + pow(R - 0.575e1, 3) * 0.267924263895559067e0 : (R < 0.625e1 ? -0.477437100127983349e1 + R * 0.568320674046638885e0 + pow(R - 0.60e1, 2) * 0.643456258160445049e0 + pow(R - 0.60e1, 3) * (-0.524011945388002331e0) : (R < 0.65e1 ? -0.613906698004131890e1 + R * 0.791796563366610973e0 + pow(R - 0.625e1, 2) * 0.250447299119443245e0 + pow(R - 0.625e1, 3) * (-0.454973083943547796e0) : (R < 0.675e1 ? -0.638997825436496214e1 + R * 0.831712759686917269e0 + pow(R - 0.65e1, 2) * (-0.907825138382176156e-1) + pow(R - 0.65e1, 3) * (-0.236807962037805630e0) : (R < 0.70e1 ? -0.579325122472860965e1 + R * 0.741920009885719933e0 + pow(R - 0.675e1, 2) * (-0.268388485366571838e0) + pow(R - 0.675e1, 3) * (-0.139689815052324029e-1) : (R < 0.725e1 ? -0.485254978339142085e1 + R * 0.605106583170202939e0 + pow(R - 0.70e1, 2) * (-0.278865221495496141e0) + pow(R - 0.70e1, 3) * 0.526300192587361507e-1 : (R < 0.75e1 ? -0.392981402019264214e1 + R * 0.475542101033467890e0 + pow(R - 0.725e1, 2) * (-0.239392707051444026e0) + pow(R - 0.725e1, 3) * 0.630781204702903775e-1 : (R < 0.775e1 ? -0.313477142421943977e1 + R * 0.367672895095925323e0 + pow(R - 0.75e1, 2) * (-0.192084116698726243e0) + pow(R - 0.75e1, 3) * 0.574093260601000327e-1 : (R < 0.80e1 ? -0.248497663551694004e1 + R * 0.282395085382830979e0 + pow(R - 0.775e1, 2) * (-0.149027122153651215e0) + pow(R - 0.775e1, 3) * 0.467343096893094861e-1 : (R < 0.825e1 ? -0.196755358298200722e1 + R * 0.216644207372750891e0 + pow(R - 0.80e1, 2) * (-0.113976389886669097e0) + pow(R - 0.80e1, 3) * 0.365314703826620235e-1 : (R < 0.85e1 ? -0.156046331309086517e1 + R * 0.166505663126165465e0 + pow(R - 0.825e1, 2) * (-0.865777870996725790e-1) + pow(R - 0.825e1, 3) * 0.280569351800427635e-1 : (R < 0.875e1 ? -0.124219618044199120e1 + R * 0.128477444922587197e0 + pow(R - 0.85e1, 2) * (-0.655350857146405064e-1) + pow(R - 0.85e1, 3) * 0.212131408971668947e-1 : (R < 0.90e1 ? -0.994047477255500245e0 + R * 0.996873659834857373e-1 + pow(R - 0.875e1, 2) * (-0.496252300417653336e-1) + pow(R - 0.875e1, 3) * 0.161630522712895019e-1 : (R < 0.925e1 ? -0.800858121961228742e0 + R * 0.779053232634698556e-1 + pow(R - 0.90e1, 2) * (-0.375029408382982071e-1) + pow(R - 0.90e1, 3) * 0.120038525776751896e-1 : (R < 0.95e1 ? -0.650382576004372326e0 + R * 0.614045752026348493e-1 + pow(R - 0.925e1, 2) * (-0.285000514050418145e-1) + pow(R - 0.925e1, 3) * 0.944748493800965684e-2 : (R < 0.100e2 ? -0.533469300636912114e0 + R * 0.489259529259907511e-1 + pow(R - 0.95e1, 2) * (-0.214144377015345715e-1) + pow(R - 0.95e1, 3) * 0.587911241910615574e-2 : (R < 0.105e2 ? -0.368036987137857985e0 + R * 0.319208495387858018e-1 + pow(R - 0.100e2, 2) * (-0.125957690728753374e-1) + pow(R - 0.100e2, 3) * 0.312777319060747114e-2 : (R < 0.110e2 ? -0.263170596368093701e0 + R * 0.216709103588660669e-1 + pow(R - 0.105e2, 2) * (-0.790410928696413072e-2) + pow(R - 0.105e2, 3) * 0.191094265846399264e-2 : (R < 0.120e2 ? -0.193727830633249221e0 + R * 0.152000080657499273e-1 + pow(R - 0.110e2, 2) * (-0.503769529926814154e-2) + pow(R - 0.110e2, 3) * 0.953673473518213397e-3 : (R < 0.140e2 ? -0.111239410323219434e0 + R * 0.798563788776828626e-2 + pow(R - 0.120e2, 2) * (-0.217667487871350124e-2) + pow(R - 0.120e2, 3) * 0.270714223289679034e-3 : (R < 0.160e2 ? -0.413665923564660101e-1 + R * 0.252750905239042950e-2 + pow(R - 0.140e2, 2) * (-0.552389538975426924e-3) + pow(R - 0.140e2, 3) * 0.570853865151059928e-4 : (R < 0.180e2 ? -0.187269311367199084e-1 + R * 0.100297553466999418e-2 + pow(R - 0.160e2, 2) * (-0.209877219884790927e-3) + pow(R - 0.160e2, 3) * 0.225180915248969077e-4 : (R < 0.200e2 ? -0.913904322173268203e-2 + R * 0.433683753429593428e-3 + pow(R - 0.180e2, 2) * (-0.747686707354094742e-4) + pow(R - 0.180e2, 3) * 0.702028716030637473e-5 : (R < 0.250e2 ? -0.508533086703264088e-2 + R * 0.218852516411632055e-3 + pow(R - 0.200e2, 2) * (-0.326469477735712258e-4) + pow(R - 0.200e2, 3) * 0.195612288064896254e-5 : -0.116298265911479932e-2 + R * 0.390922547245919758e-4 + pow(R - 0.250e2, 2) * (-0.330510456383678941e-5) + pow(R - 0.250e2, 3) * 0.852715693836788423e-7)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2266497724e6 * (R - 0.300e2) * (R - 0.250e2) + 0.3123400000e3 * R - 0.1586569878e9 - 0.15617000e2 * R * R + 0.75000e3 * (-0.302181476e3 * R + 0.1662076206e5) * R) * pow(R, -6));
}

static double radcoeff_4_2_2_1_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.497720687100000003e0 + pow(R - 0.475e1, 2) * (-0.705503696903583943e1) + pow(R - 0.475e1, 3) * 0.148131892265433578e2 : (R < 0.525e1 ? 0.304302310670520093e1 + R * (-0.750045504541040131e0) + pow(R - 0.50e1, 2) * 0.405485495087167802e1 + pow(R - 0.50e1, 3) * (-0.395582414683006967e1) : (R < 0.55e1 ? -0.351533806266184534e1 + R * 0.535664943364160928e0 + pow(R - 0.525e1, 2) * 0.108798684074912577e1 + pow(R - 0.525e1, 3) * (-0.957987084023077196e0) : (R < 0.575e1 ? -0.546634706496418232e1 + R * 0.900035785484396778e0 + pow(R - 0.55e1, 2) * 0.369496527731817792e0 + pow(R - 0.55e1, 3) * (-0.883679549077620807e0) : (R < 0.60e1 ? -0.556664652831494777e1 + R * 0.919094133898251786e0 + pow(R - 0.575e1, 2) * (-0.293263134076397869e0) + pow(R - 0.575e1, 3) * (-0.683622975666437149e0) : (R < 0.625e1 ? -0.394679183334557493e1 + R * 0.644283258922595858e0 + pow(R - 0.60e1, 2) * (-0.805980365826225675e0) + pow(R - 0.60e1, 3) * 0.270561486943369289e0 : (R < 0.65e1 ? -0.179131368228102983e1 + R * 0.292023354811364766e0 + pow(R - 0.625e1, 2) * (-0.603059250618698695e0) + pow(R - 0.625e1, 3) * 0.417581775412958156e0 : (R < 0.675e1 ? -0.371465394477643096e0 + R * 0.687903123919450937e-1 + pow(R - 0.65e1, 2) * (-0.289872919058980050e0) + pow(R - 0.65e1, 3) * 0.275733207244798662e0 : (R < 0.70e1 ? 0.244072140849229929e0 + R * (-0.244461707791451752e-1) + pow(R - 0.675e1, 2) * (-0.830730136253810258e-1) + pow(R - 0.675e1, 3) * 0.894882749678469619e-1 : (R < 0.725e1 ? 0.413580518587550738e0 + R * (-0.492036260353643853e-1) + pow(R - 0.70e1, 2) * (-0.159568073994958044e-1) + pow(R - 0.70e1, 3) * 0.305538093638134008e-1 : (R < 0.75e1 ? 0.429369963615630179e0 + R * (-0.514531904793972678e-1) + pow(R - 0.725e1, 2) * 0.695854962336424875e-2 + pow(R - 0.725e1, 3) * 0.104745093368993070e-1 : (R < 0.775e1 ? 0.389144197332848996e0 + R * (-0.460099451670465259e-1) + pow(R - 0.75e1, 2) * 0.148144316260387290e-1 + pow(R - 0.75e1, 3) * 0.150327328858945492e-2 : (R < 0.80e1 ? 0.330503221406229009e0 + R * (-0.383208656124166408e-1) + pow(R - 0.775e1, 2) * 0.159418865924808202e-1 + pow(R - 0.775e1, 3) * (-0.144470521125705104e-2) : (R < 0.825e1 ? 0.269876527246295406e0 + R * (-0.306208045432869273e-1) + pow(R - 0.80e1, 2) * 0.148583576840380319e-1 + pow(R - 0.80e1, 3) * (-0.308466428356126993e-2) : (R < 0.85e1 ? 0.214237841339094098e0 + R * (-0.237700002544356491e-1) + pow(R - 0.825e1, 2) * 0.125448594713670793e-1 + pow(R - 0.825e1, 3) * (-0.273042389449793671e-2) : (R < 0.875e1 ? 0.166015192511248993e0 + R * (-0.180095249989704713e-1) + pow(R - 0.85e1, 2) * 0.104970415504936267e-1 + pow(R - 0.85e1, 3) * (-0.289231661844697313e-2) : (R < 0.90e1 ? 0.125446715329721598e0 + R * (-0.133033135896824667e-1) + pow(R - 0.875e1, 2) * 0.832780408665839689e-2 + pow(R - 0.875e1, 3) * (-0.246655436771413012e-2) : (R < 0.925e1 ? 0.926158552786970068e-1 + R * (-0.960189049029966726e-2) + pow(R - 0.90e1, 2) * 0.647788831087279908e-2 + pow(R - 0.90e1, 3) * (-0.198266789469653693e-2) : (R < 0.95e1 ? 0.664682003043495229e-1 + R * (-0.673469656511886759e-2) + pow(R - 0.925e1, 2) * 0.499088738985039616e-2 + pow(R - 0.925e1, 3) * (-0.200761526949969852e-2) : (R < 0.100e2 ? 0.466181113746362008e-1 + R * (-0.461568073322486325e-2) + pow(R - 0.95e1, 2) * 0.348517593772562206e-2 + pow(R - 0.95e1, 3) * (-0.122696207855179165e-2) : (R < 0.105e2 ? 0.216864913111308490e-1 + R * (-0.205072635441308493e-2) + pow(R - 0.100e2, 2) * 0.164473281989793458e-2 + pow(R - 0.100e2, 3) * (-0.640983457343530802e-3) : (R < 0.110e2 ? 0.979560170158937961e-2 + R * (-0.886731127522798071e-3) + pow(R - 0.105e2, 2) * 0.683257633882638376e-3 + pow(R - 0.105e2, 3) * (-0.244695634474084776e-3) : (R < 0.120e2 ? 0.443873416745295575e-2 + R * (-0.386995219495723250e-3) + pow(R - 0.110e2, 2) * 0.316214182171511212e-3 + pow(R - 0.110e2, 3) * (-0.970219439757879229e-4) : (R < 0.140e2 ? 0.561576016630775578e-3 + R * (-0.456326870800646294e-4) + pow(R - 0.120e2, 2) * 0.251483502441474193e-4 + pow(R - 0.120e2, 3) * (-0.418424876705755174e-5) : (R < 0.160e2 ? -0.766583933356819474e-4 + R * 0.474972869183442446e-5 + pow(R - 0.140e2, 2) * 0.428576418021059363e-7 + pow(R - 0.140e2, 3) * (-0.174270879609659002e-6) : (R < 0.180e2 ? -0.471640099956310431e-4 + R * 0.282990870372694032e-5 + pow(R - 0.160e2, 2) * (-0.100276763585584820e-5) + pow(R - 0.160e2, 3) * 0.114465456621189015e-6 : (R < 0.200e2 ? -0.278462573434068338e-5 + R * 0.192423639757815752e-6 + pow(R - 0.180e2, 2) * (-0.315974896128714083e-6) + pow(R - 0.180e2, 3) * 0.656026122749030911e-7 : (R < 0.250e2 ? 0.600966032366406747e-5 + R * (-0.284244597458203382e-6) + pow(R - 0.200e2, 2) * 0.776407775207045164e-7 + pow(R - 0.200e2, 3) * (-0.621164099061276830e-8) : -0.589142884922104339e-6 + R * 0.262901034528841702e-7 + pow(R - 0.250e2, 2) * (-0.155338373384870014e-7) + pow(R - 0.250e2, 3) * 0.166235149038203354e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1039258798e3 * (R - 0.300e2) * (R - 0.250e2) + 0.1108540640e4 * R + 0.6512758658e5 - 0.5542703200e2 * R * R + 0.75000e3 * (0.2032340203e0 * R - 0.840651952e1) * R) * pow(R, -6));
}

static double radcoeff_4_2_2_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.696686976199999530e0 + R * 0.111022302462515654e-15 + pow(R - 0.475e1, 2) * 0.678738499636389747e1 + pow(R - 0.475e1, 3) * (-0.138682382446555899e2) : (R < 0.525e1 ? -0.306278182064512716e1 + R * 0.793397827309025416e0 + pow(R - 0.50e1, 2) * (-0.361379368712779581e1) + pow(R - 0.50e1, 3) * 0.291510594036677739e1 : (R < 0.55e1 ? 0.337355562288953514e1 + R * (-0.466916652436101864e0) + pow(R - 0.525e1, 2) * (-0.142746423185271287e1) + pow(R - 0.525e1, 3) * 0.971787020788480782e0 : (R < 0.575e1 ? 0.622289455300539895e1 + R * (-0.998438701964618036e0) + pow(R - 0.55e1, 2) * (-0.698623966261352258e0) + pow(R - 0.55e1, 3) * 0.135371388047929941e1 : (R < 0.60e1 ? 0.674945346010619751e1 + R * (-0.109392933250542557e1) + pow(R - 0.575e1, 2) * 0.316661444098122413e0 + pow(R - 0.575e1, 3) * 0.711106430094319286e0 : (R < 0.625e1 ? 0.503037677218207602e1 + R * (-0.802266154813679355e0) + pow(R - 0.60e1, 2) * 0.849991266668861822e0 + pow(R - 0.60e1, 3) * (-0.215665162456576770e0) : (R < 0.65e1 ? 0.267664136210910364e1 + R * (-0.417707739439856618e0) + pow(R - 0.625e1, 2) * 0.688242394826429238e0 + pow(R - 0.625e1, 3) * (-0.440786066348010430e0) : (R < 0.675e1 ? 0.101318946467581084e1 + R * (-0.156233929466893962e0) + pow(R - 0.65e1, 2) * 0.357652845065421388e0 + pow(R - 0.65e1, 3) * (-0.315414287991381992e0) : (R < 0.70e1 ? 0.222732275384830009e0 + R * (-0.365476859325674086e-1) + pow(R - 0.675e1, 2) * 0.121092129071884866e0 + pow(R - 0.675e1, 3) * (-0.110103536246460923e0) : (R < 0.725e1 ? -0.507313947301451934e-1 + R * 0.335396555716359866e-2 + pow(R - 0.70e1, 2) * 0.385144768870391702e-1 + pow(R - 0.70e1, 3) * (-0.381939683027742588e-1) : (R < 0.75e1 ? -0.136616073733369314e0 + R * 0.154498349439130076e-1 + pow(R - 0.725e1, 2) * 0.986900065995847259e-2 + pow(R - 0.725e1, 3) * (-0.149723435024420246e-1) : (R < 0.775e1 ? -0.152187098483882732e0 + R * 0.175770208671843647e-1 + pow(R - 0.75e1, 2) * (-0.136025696687304648e-2) + pow(R - 0.75e1, 3) * (-0.428697320745761133e-2) : (R < 0.80e1 ? -0.140838594811958928e0 + R * 0.160930849073495398e-1 + pow(R - 0.775e1, 2) * (-0.457548687246625563e-2) + pow(R - 0.775e1, 3) * (-0.115483438772761540e-2) : (R < 0.825e1 ? -0.121108407957339861e0 + R * 0.135888100234174830e-1 + pow(R - 0.80e1, 2) * (-0.544161266326196724e-2) + pow(R - 0.80e1, 3) * 0.721145190368132683e-3 : (R < 0.85e1 ? -0.100106110085589339e0 + R * 0.110032184149805260e-1 + pow(R - 0.825e1, 2) * (-0.490075377048586770e-2) + pow(R - 0.825e1, 3) * 0.520334906255050939e-3 : (R < 0.875e1 ? -0.804053571956135082e-1 + R * 0.865040432466041356e-2 + pow(R - 0.85e1, 2) * (-0.451050259079457949e-2) + pow(R - 0.85e1, 3) * 0.117981329661169532e-2 : (R < 0.90e1 ? -0.628710113798058995e-1 + R * 0.661636802237781669e-2 + pow(R - 0.875e1, 2) * (-0.362564261833580800e-2) + pow(R - 0.875e1, 3) * 0.707039875298165130e-3 : (R < 0.925e1 ? -0.479643045524548658e-1 + R * 0.493611668982831854e-2 + pow(R - 0.90e1, 2) * (-0.309536271186218416e-2) + pow(R - 0.90e1, 3) * 0.104246784219563966e-2 : (R < 0.95e1 ? -0.356334537833574022e-1 + R * 0.358389805430890836e-2 + pow(R - 0.925e1, 2) * (-0.231351183021545441e-2) + pow(R - 0.925e1, 3) * 0.674601395919283836e-3 : (R < 0.100e2 ? -0.259799601688924485e-1 + R * 0.255362990093604709e-2 + pow(R - 0.95e1, 2) * (-0.180756078327599153e-2) + pow(R - 0.95e1, 3) * 0.620733003607795101e-3 : (R < 0.105e2 ? -0.129341484335590180e-1 + R * 0.121161887036590177e-2 + pow(R - 0.100e2, 2) * (-0.876461277864298773e-3) + pow(R - 0.100e2, 3) * 0.317880195864990770e-3 : (R < 0.110e2 ? -0.641399185340363505e-2 + R * 0.573567739400346159e-3 + pow(R - 0.105e2, 2) * (-0.399640984066812564e-3) + pow(R - 0.105e2, 3) * 0.137658040132240361e-3 : (R < 0.120e2 ? -0.323632285075985257e-2 + R * 0.277170285432713900e-3 + pow(R - 0.110e2, 2) * (-0.193153923868452009e-3) + pow(R - 0.110e2, 3) * 0.553938136357381462e-4 : (R < 0.140e2 ? -0.732566079066291525e-3 + R * 0.570438786030242945e-4 + pow(R - 0.120e2, 2) * (-0.269724829612375801e-4) + pow(R - 0.120e2, 3) * 0.460491135361271626e-5 : (R < 0.160e2 ? -0.667827816579719629e-4 + R * 0.441288300142656853e-5 + pow(R - 0.140e2, 2) * 0.656985160438718784e-6 + pow(R - 0.140e2, 3) * (-0.488731168701001461e-6) : (R < 0.180e2 ? -0.162753562433108033e-4 + R * 0.117604961876942529e-5 + pow(R - 0.160e2, 2) * (-0.227540185176729019e-5) + pow(R - 0.160e2, 3) * 0.550594342441288796e-6 : (R < 0.200e2 ? 0.239283464491768608e-4 + R * (-0.131842567900427013e-5) + pow(R - 0.180e2, 2) * 0.102816420288044237e-5 + pow(R - 0.180e2, 3) * (-0.197301281364153640e-6) : (R < 0.250e2 ? -0.843823569325311180e-5 + R * 0.426615756147655526e-6 + pow(R - 0.200e2, 2) * (-0.155643485304479438e-6) + pow(R - 0.200e2, 3) * 0.134692781765896694e-7 : 0.301031169122284712e-5 + R * (-0.119623233652913890e-6) + pow(R - 0.250e2, 2) * 0.463956873443655627e-7 + pow(R - 0.250e2, 3) * (-0.460800231315655633e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3010541750e2 * (R - 0.300e2) * (R - 0.250e2) + 0.3211232196e3 * R + 0.1886687722e5 - 0.1605616098e2 * R * R + 0.75000e3 * (0.588742819e-1 * R - 0.2435277452e1) * R) * pow(R, -6));
}

static double radcoeff_4_2_3_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.160336841199999997e0 + R * 0.433680868994201774e-18 + pow(R - 0.475e1, 2) * 0.925406646799303984e-1 + pow(R - 0.475e1, 3) * (-0.350497180319721546e0) : (R < 0.525e1 ? 0.257883559149913011e0 + R * (-0.194478889699825977e-1) + pow(R - 0.50e1, 2) * (-0.170332220559860803e0) + pow(R - 0.50e1, 3) * 0.288911649759164668e0 : (R < 0.55e1 ? 0.414476713630365423e0 + R * (-0.504430649200696135e-1) + pow(R - 0.525e1, 2) * 0.463515167595127259e-1 + pow(R - 0.525e1, 3) * (-0.193156887516937048e0) : (R < 0.575e1 ? 0.486081976223564194e0 + R * (-0.634842229497389471e-1) + pow(R - 0.55e1, 2) * (-0.985161488781900602e-1) + pow(R - 0.55e1, 3) * 0.195643356308583372e0 : (R < 0.60e1 ? 0.555287578865603870e0 + R * (-0.760591680809745846e-1) + pow(R - 0.575e1, 2) * 0.482163683532474754e-1 + pow(R - 0.575e1, 3) * (-0.745351809173964847e-1) : (R < 0.625e1 ? 0.496339463158176231e0 + R * (-0.659263303263627060e-1) + pow(R - 0.60e1, 2) * (-0.768501733479988805e-2) + pow(R - 0.60e1, 3) * 0.118883990410028027e-1 : (R < 0.65e1 ? 0.506128867354841305e0 + R * (-0.675397641735746151e-1) + pow(R - 0.625e1, 2) * 0.123128194595221508e-2 + pow(R - 0.625e1, 3) * 0.179432833133851624e-1 : (R < 0.675e1 ? 0.480616143415702135e0 + R * (-0.635597575793387937e-1) + pow(R - 0.65e1, 2) * 0.146887444309910884e-1 + pow(R - 0.65e1, 3) * 0.659074290545621361e-2 : (R < 0.70e1 ? 0.423721248856223920e0 + R * (-0.549796210690702072e-1) + pow(R - 0.675e1, 2) * 0.196318016100832486e-1 + pow(R - 0.675e1, 3) * (-0.470751575209598261e-3) : (R < 0.725e1 ? 0.356847436770662663e0 + R * (-0.452519861843803800e-1) + pow(R - 0.70e1, 2) * 0.192787379286760499e-1 + pow(R - 0.70e1, 3) * (-0.285214492461806791e-2) : (R < 0.75e1 ? 0.291999502642209752e0 + R * (-0.361473943934082428e-1) + pow(R - 0.725e1, 2) * 0.171396292352124988e-1 + pow(R - 0.725e1, 3) * (-0.330978872631812688e-2) : (R < 0.775e1 ? 0.233399794784899833e0 + R * (-0.281981651619866436e-1) + pow(R - 0.75e1, 2) * 0.146572876904739035e-1 + pow(R - 0.75e1, 3) * (-0.331235393010930607e-2) : (R < 0.80e1 ? 0.182280394239500154e0 + R * (-0.214905876786451837e-1) + pow(R - 0.775e1, 2) * 0.121730222428919239e-1 + pow(R - 0.775e1, 3) * (-0.335623811324476263e-2) : (R < 0.825e1 ? 0.139331035107460921e0 + R * (-0.160333712034326156e-1) + pow(R - 0.80e1, 2) * 0.965584365795835176e-2 + pow(R - 0.80e1, 3) * (-0.262778840091155378e-2) : (R < 0.85e1 ? 0.104127971235900951e0 + R * (-0.116981596996243581e-1) + pow(R - 0.825e1, 2) * 0.768500235727468620e-2 + pow(R - 0.825e1, 3) * (-0.270244745110902532e-2) : (R < 0.875e1 ? 0.762118237485946287e-1 + R * (-0.836236741806995615e-2) + pow(R - 0.85e1, 2) * 0.565816676894291722e-2 + pow(R - 0.85e1, 3) * (-0.172406307465235858e-2) : (R < 0.90e1 ? 0.546125820538383849e-1 + R * (-0.585654586009581521e-2) + pow(R - 0.875e1, 2) * 0.436511946295364828e-2 + pow(R - 0.875e1, 3) * (-0.166972181828154852e-2) : (R < 0.925e1 ? 0.380339306019210274e-1 + R * (-0.398705896954678132e-2) + pow(R - 0.90e1, 2) * 0.311282809924248683e-2 + pow(R - 0.90e1, 3) * (-0.119746091622144682e-2) : (R < 0.95e1 ? 0.258897883488827980e-1 + R * (-0.265516884171705918e-2) + pow(R - 0.925e1, 2) * 0.221473241207640172e-2 + pow(R - 0.925e1, 3) * (-0.936084737632659168e-3) : (R < 0.100e2 ? 0.171610047821573325e-1 + R * (-0.172331852398498230e-2) + pow(R - 0.95e1, 2) * 0.151266885885190734e-2 + pow(R - 0.95e1, 3) * (-0.584388783363885291e-3) : (R < 0.105e2 ? 0.672235068565988931e-2 + R * (-0.648941252655988897e-3) + pow(R - 0.100e2, 2) * 0.636085683806079352e-3 + pow(R - 0.100e2, 3) * (-0.272573468988202840e-3) : (R < 0.110e2 ? 0.231491681127614889e-2 + R * (-0.217285670591061769e-3) + pow(R - 0.105e2, 2) * 0.227225480323775065e-3 + pow(R - 0.105e2, 3) * (-0.904755350033030698e-4) : (R < 0.120e2 ? 0.607356619697403937e-3 + R * (-0.579168415197639936e-4) + pow(R - 0.110e2, 2) * 0.915121778188204734e-4 + pow(R - 0.110e2, 3) * (-0.337079084990564692e-4) : (R < 0.140e2 ? -0.317646672668490341e-3 + R * 0.239837886207075254e-4 + pow(R - 0.120e2, 2) * (-0.961154767834895275e-5) + pow(R - 0.120e2, 3) * 0.164130021399759463e-5 : (R < 0.160e2 ? -0.804542276349598989e-4 + R * 0.523320047528285084e-5 + pow(R - 0.140e2, 2) * 0.236253605636614759e-6 + pow(R - 0.140e2, 3) * (-0.344834848639019928e-6) : (R < 0.180e2 ? -0.311798318235771216e-4 + R * 0.204019671416107021e-5 + pow(R - 0.160e2, 2) * (-0.183275548619750473e-5) + pow(R - 0.160e2, 3) * 0.371761104683484672e-6 : (R < 0.200e2 ? 0.161212314636883687e-4 + R * (-0.829691974427131584e-6) + pow(R - 0.180e2, 2) * 0.397811141903403516e-6 + pow(R - 0.180e2, 3) * (-0.688759847324188634e-7) : (R < 0.250e2 ? 0.186681313695087735e-5 + R * (-0.649592236025438563e-7) + pow(R - 0.200e2, 2) * (-0.154447664911096517e-7) + pow(R - 0.200e2, 3) * 0.209861229432368394e-8 : 0.166931408238410074e-5 + R * (-0.620109664393640309e-7) + pow(R - 0.250e2, 2) * 0.160344179237456148e-7 + pow(R - 0.250e2, 3) * (-0.141298966237456157e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1816411727e3 * (R - 0.300e2) * (R - 0.250e2) + 0.1937506840e4 * R + 0.1138281007e6 - 0.9687534200e2 * R * R + 0.75000e3 * (0.3552087752e0 * R - 0.1469271554e2) * R) * pow(R, -6));
}

static double radcoeff_4_2_4_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.890319209900000130e0 + R * (-0.138777878078144568e-16) + pow(R - 0.475e1, 2) * 0.141264974178401448e0 + pow(R - 0.475e1, 3) * (-0.242296817831360567e1) : (R < 0.525e1 ? 0.277965962472300143e1 + R * (-0.383674046344600339e0) + pow(R - 0.50e1, 2) * (-0.167596115955680292e1) + pow(R - 0.50e1, 3) * 0.797706896540816501e0 : (R < 0.55e1 ? 0.630153154006339378e1 + R * (-0.107208458302159881e1) + pow(R - 0.525e1, 2) * (-0.107768098715119054e1) + pow(R - 0.525e1, 3) * 0.199267494095034126e1 : (R < 0.575e1 ? 0.717398870612952688e1 + R * (-0.123729852516900496e1) + pow(R - 0.55e1, 2) * 0.416825218561565625e0 + pow(R - 0.55e1, 3) * 0.258467246857815525e0 : (R < 0.60e1 ? 0.572704632916869549e1 + R * (-0.980423307102381791e0) + pow(R - 0.575e1, 2) * 0.610675653704927268e0 + pow(R - 0.575e1, 3) * 0.581933569218399893e0 : (R < 0.625e1 ? 0.328760404302880938e1 + R * (-0.565972936021468254e0) + pow(R - 0.60e1, 2) * 0.104712583061872722e1 + pow(R - 0.60e1, 3) * (-0.560889882131417217e0) : (R < 0.65e1 ? 0.729310112973408420e0 + R * (-0.147576873611745346e0) + pow(R - 0.625e1, 2) * 0.626458419020164303e0 + pow(R - 0.625e1, 3) * (-0.497724415092731576e0) : (R < 0.675e1 ? -0.668701410744922620e0 + R * 0.723290080684496350e-1 + pow(R - 0.65e1, 2) * 0.253165107700615621e0 + pow(R - 0.65e1, 3) * (-0.302989033497656490e0) : (R < 0.70e1 ? -0.112857453813114139e1 + R * 0.142101118137946875e0 + pow(R - 0.675e1, 2) * 0.259233325773732537e-1 + pow(R - 0.675e1, 3) * (-0.835829133166429150e-1) : (R < 0.725e1 ? -0.110928940315834068e1 + R * 0.139390988179762948e0 + pow(R - 0.70e1, 2) * (-0.367638524101089395e-1) + pow(R - 0.70e1, 3) * (-0.174403628357711685e-1) : (R < 0.75e1 ? -0.954882691386759852e0 + R * 0.117738993943001358e0 + pow(R - 0.725e1, 2) * (-0.498441245369373176e-1) + pow(R - 0.725e1, 3) * 0.306671537972745979e-2 : (R < 0.775e1 ? -0.775347133231737096e0 + R * 0.933919408082316133e-1 + pow(R - 0.75e1, 2) * (-0.475440880021417225e-1) + pow(R - 0.75e1, 3) * 0.984231219686122240e-2 : (R < 0.80e1 ? -0.608233621506559685e0 + R * 0.714653303440722226e-1 + pow(R - 0.775e1, 2) * (-0.401623538544958053e-1) + pow(R - 0.775e1, 3) * 0.107930777528275623e-1 : (R < 0.825e1 ? -0.466115327993835926e0 + R * 0.534078554954794879e-1 + pow(R - 0.80e1, 2) * (-0.320675455398751336e-1) + pow(R - 0.80e1, 3) * 0.968577487182867639e-2 : (R < 0.85e1 ? -0.350672267010580851e0 + R * 0.391901655140097990e-1 + pow(R - 0.825e1, 2) * (-0.248032143860036254e-1) + pow(R - 0.825e1, 3) * 0.803091715985769505e-2 : (R < 0.875e1 ? -0.259482597912091051e0 + R * 0.282943552884813015e-1 + pow(R - 0.85e1, 2) * (-0.187800265161103541e-1) + pow(R - 0.85e1, 3) * 0.611466912874061852e-2 : (R < 0.90e1 ? -0.188430070895568680e0 + R * 0.200508424920649922e-1 + pow(R - 0.875e1, 2) * (-0.141940246695548902e-1) + pow(R - 0.875e1, 3) * 0.545760421317969136e-2 : (R < 0.925e1 ? -0.134568518468328652e0 + R * 0.139771309472587375e-1 + pow(R - 0.90e1, 2) * (-0.101008215096701215e-1) + pow(R - 0.90e1, 3) * 0.337398883454066018e-2 : (R < 0.95e1 ? -0.942825636398254840e-1 + R * 0.955934309890005274e-2 + pow(R - 0.925e1, 2) * (-0.757032988376462636e-2) + pow(R - 0.925e1, 3) * 0.341275795265768515e-2 : (R < 0.100e2 ? -0.648222930698400118e-1 + R * 0.641407027314105406e-2 + pow(R - 0.95e1, 2) * (-0.501076141927136228e-2) + pow(R - 0.95e1, 3) * 0.185125630597850806e-2 : (R < 0.105e2 ? -0.296203844885357254e-1 + R * 0.279175108335357261e-2 + pow(R - 0.100e2, 2) * (-0.223387696030360018e-2) + pow(R - 0.100e2, 3) * 0.865650573592910292e-3 : (R < 0.110e2 ? -0.134319375907688797e-1 + R * 0.120711205324465520e-2 + pow(R - 0.105e2, 2) * (-0.935401099914234531e-3) + pow(R - 0.105e2, 3) * 0.360453036449847968e-3 : (R < 0.120e2 ? -0.630505668784587560e-2 + R * 0.542050730667806833e-3 + pow(R - 0.110e2, 2) * (-0.394721545239462525e-3) + pow(R - 0.110e2, 3) * 0.115611775871655715e-3 : (R < 0.140e2 ? -0.127287330280618670e-2 + R * 0.994429678038489032e-4 + pow(R - 0.120e2, 2) * (-0.478862176244953782e-4) + pow(R - 0.120e2, 3) * 0.790453899878545841e-5 : (R < 0.160e2 ? -0.475162261361008494e-4 + R * 0.275256529129291765e-5 + pow(R - 0.140e2, 2) * (-0.458983631782622061e-6) + pow(R - 0.140e2, 3) * 0.195616440818081577e-6 : (R < 0.180e2 ? -0.559706333396705382e-4 + R * 0.326402805397940854e-5 + pow(R - 0.160e2, 2) * 0.714715013125867348e-6 + pow(R - 0.160e2, 3) * (-0.398008214932785750e-6) : (R < 0.200e2 ? -0.217855455262100805e-4 + R * 0.134678952728944893e-5 + pow(R - 0.180e2, 2) * (-0.167333427647084716e-5) + pow(R - 0.180e2, 3) * 0.339763788663061358e-6 : (R < 0.250e2 ? 0.265626605157440598e-4 + R * (-0.126938211463720298e-5) + pow(R - 0.200e2, 2) * 0.365248455507521097e-6 + pow(R - 0.200e2, 3) * (-0.297031947800160912e-7) : -0.363765110842001994e-5 + R * 0.155362831936800793e-6 + pow(R - 0.250e2, 2) * (-0.802994661927203172e-7) + pow(R - 0.250e2, 3) * 0.842419244667203154e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3760058314e3 * (R - 0.300e2) * (R - 0.250e2) + 0.4010726148e4 * R + 0.2356307384e6 - 0.2005363074e3 * R * R + 0.75000e3 * (0.735300893e0 * R - 0.3041473374e2) * R) * pow(R, -6));
}

static double radcoeff_4_2_4_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.129859266600000001e1 + pow(R - 0.475e1, 2) * 0.436982329886448628e1 + pow(R - 0.475e1, 3) * (-0.671559207545794301e1) : (R < 0.525e1 ? -0.575910051241939325e1 + R * 0.925738135283878605e0 + pow(R - 0.50e1, 2) * (-0.666870757728971530e0) + pow(R - 0.50e1, 3) * 0.279458749037382947e1 : (R < 0.55e1 ? -0.675750082703855082e1 + R * 0.111628791086448587e1 + pow(R - 0.525e1, 2) * 0.142906986005140069e1 + pow(R - 0.525e1, 3) * (-0.232497027643737564e1) : (R < 0.575e1 ? -0.823682813891998045e1 + R * 0.139489091405817822e1 + pow(R - 0.55e1, 2) * (-0.314657847276631042e0) + pow(R - 0.55e1, 3) * (-0.457803632624329104e0) : (R < 0.60e1 ? -0.686543658379110600e1 + R * 0.115172380930280105e1 + pow(R - 0.575e1, 2) * (-0.658010571744877870e0) + pow(R - 0.575e1, 3) * (-0.526457164265304756e0) : (R < 0.625e1 ? -0.434849211269970404e1 + R * 0.724007805130617355e0 + pow(R - 0.60e1, 2) * (-0.105285344494385646e1) + pow(R - 0.60e1, 3) * 0.462176251285547401e0 : (R < 0.65e1 ? -0.165851972809205783e1 + R * 0.284239129774729260e0 + pow(R - 0.625e1, 2) * (-0.706221256479695914e0) + pow(R - 0.625e1, 3) * 0.497681656723115262e0 : (R < 0.675e1 ? -0.621271630802514019e-2 + R * 0.244438121704654079e-1 + pow(R - 0.65e1, 2) * (-0.332960013937359467e0) + pow(R - 0.65e1, 3) * 0.335913262621991282e0 : (R < 0.70e1 ? 0.676825751581988877e0 + R * (-0.790524580565909463e-1) + pow(R - 0.675e1, 2) * (-0.810250669708659638e-1) + pow(R - 0.675e1, 3) * 0.112911910388919123e0 : (R < 0.725e1 ? 0.808916785508711045e0 + R * (-0.983940083441015856e-1) + pow(R - 0.70e1, 2) * 0.365886582082338178e-2 + pow(R - 0.70e1, 3) * 0.326279271823319283e-1 : (R < 0.75e1 ? 0.752038298870769228e0 + R * (-0.904468390870026562e-1) + pow(R - 0.725e1, 2) * 0.281298112075723285e-1 + pow(R - 0.725e1, 3) * 0.514758728175317148e-2 : (R < 0.775e1 ? 0.641151256479158382e0 + R * (-0.754167608678877749e-1) + pow(R - 0.75e1, 2) * 0.319905016688872071e-1 + pow(R - 0.75e1, 3) * (-0.384304302934446174e-2) : (R < 0.80e1 ? 0.524711843221208563e0 + R * (-0.601420806014462614e-1) + pow(R - 0.775e1, 2) * 0.291082193968788608e-1 + pow(R - 0.775e1, 3) * (-0.704255052437521324e-2) : (R < 0.825e1 ? 0.420552015280617475e0 + R * (-0.469084491263271827e-1) + pow(R - 0.80e1, 2) * 0.238263065035974504e-1 + pow(R - 0.80e1, 3) * (-0.614428575315487113e-2) : (R < 0.85e1 ? 0.333166082669271224e0 + R * (-0.361473494532449993e-1) + pow(R - 0.825e1, 2) * 0.192180921887312971e-1 + pow(R - 0.825e1, 3) * (-0.568373110300526580e-2) : (R < 0.875e1 ? 0.261659959775889128e0 + R * (-0.276040029406928386e-1) + pow(R - 0.85e1, 2) * 0.149552938614773475e-1 + pow(R - 0.85e1, 3) * (-0.441907143482396948e-2) : (R < 0.90e1 ? 0.204346246079857047e0 + R * (-0.209549319039836618e-1) + pow(R - 0.875e1, 2) * 0.116409902853593702e-1 + pow(R - 0.875e1, 3) * (-0.385342507769891734e-2) : (R < 0.925e1 ? 0.159131796740352688e0 + R * (-0.158569539633725207e-1) + pow(R - 0.90e1, 2) * 0.875092147708518217e-2 + pow(R - 0.90e1, 3) * (-0.258787081438038857e-2) : (R < 0.95e1 ? 0.123653620463367836e0 + R * (-0.119667190025262524e-1) + pow(R - 0.925e1, 2) * 0.681001836629989074e-2 + pow(R - 0.925e1, 3) * (-0.259503278477954055e-2) : (R < 0.100e2 ? 0.963135141319634847e-1 + R * (-0.904827846652247157e-2) + pow(R - 0.95e1, 2) * 0.486374377771523533e-2 + pow(R - 0.95e1, 3) * (-0.148187398534058178e-2) : (R < 0.105e2 ? 0.598208329411267364e-1 + R * (-0.529594017781267329e-2) + pow(R - 0.100e2, 2) * 0.264093279970436254e-2 + pow(R - 0.100e2, 3) * (-0.813616352158034149e-3) : (R < 0.110e2 ? 0.390567984733817750e-1 + R * (-0.326521964222683571e-2) + pow(R - 0.105e2, 2) * 0.142050827146731132e-2 + pow(R - 0.105e2, 3) * (-0.401612670027278102e-3) : (R < 0.120e2 ? 0.270494374990798148e-1 + R * (-0.214592087327998299e-2) + pow(R - 0.110e2, 2) * 0.818089266426394110e-3 + pow(R - 0.110e2, 3) * (-0.175062396146410894e-3) : (R < 0.140e2 ? 0.143605682363971369e-1 + R * (-0.103492952886642805e-2) + pow(R - 0.120e2, 2) * 0.292902077987161375e-3 + pow(R - 0.120e2, 3) * (-0.376956091519736926e-4) : (R < 0.160e2 ? 0.516095764568053582e-2 + R * (-0.315668526741466810e-3) + pow(R - 0.140e2, 2) * 0.667284230753192057e-4 + pow(R - 0.140e2, 3) * (-0.647175066479290012e-5) : (R < 0.180e2 ? 0.234805438348327684e-2 + R * (-0.126415842417704796e-3) + pow(R - 0.160e2, 2) * 0.278979190865618015e-4 + pow(R - 0.160e2, 3) * (-0.311277786385469852e-5) : (R < 0.200e2 ? 0.109845368127885158e-2 + R * (-0.521775004377139789e-4) + pow(R - 0.180e2, 2) * 0.922125190343360870e-5 + pow(R - 0.180e2, 3) * (-0.894208472288310719e-6) : (R < 0.250e2 ? 0.605094902188785299e-3 + R * (-0.260229944914392681e-4) + pow(R - 0.200e2, 2) * 0.385600106970374417e-5 + pow(R - 0.200e2, 3) * (-0.229873990123178073e-6) : 0.139774144221004558e-3 + R * (-0.470353305364018273e-5) + pow(R - 0.250e2, 2) * 0.407891217856073332e-6 + pow(R - 0.250e2, 3) * (-0.114849061456073291e-7))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2708320396e5 * (R - 0.300e2) * (R - 0.250e2) + 0.4832600000e2 * R + 0.1895791008e8 - 0.24163000e1 * R * R + 0.75000e3 * (0.361137568e2 * R - 0.1986135807e4) * R) * pow(R, -6));
}

static double radcoeff_4_2_5_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.156014768800000003e1 + pow(R - 0.475e1, 2) * 0.121237771217773620e2 + pow(R - 0.475e1, 3) * (-0.219833445191094441e2) : (R < 0.525e1 ? -0.108459586937782984e2 + R * 0.194001146355565979e1 + pow(R - 0.50e1, 2) * (-0.436373126755472285e1) + pow(R - 0.50e1, 3) * 0.609190055252833407e1 : (R < 0.55e1 ? -0.556542598093114549e1 + R * 0.900377183377361057e0 + pow(R - 0.525e1, 2) * 0.205194146841527536e0 + pow(R - 0.525e1, 3) * (-0.110367620620388629e1) : (R < 0.575e1 ? -0.499596410364192778e1 + R * 0.796034968134896048e0 + pow(R - 0.55e1, 2) * (-0.622563007811387292e0) + pow(R - 0.55e1, 3) * 0.396456694687212341e0 : (R < 0.60e1 ? -0.366624088227756495e1 + R * 0.559089094483054772e0 + pow(R - 0.575e1, 2) * (-0.325220486795978037e0) + pow(R - 0.575e1, 3) * 0.106191974655035742e0 : (R < 0.625e1 ? -0.282871242419730962e1 + R * 0.416389846332884894e0 + pow(R - 0.60e1, 2) * (-0.245576505804701223e0) + pow(R - 0.60e1, 3) * 0.104447189092646608e0 : (R < 0.65e1 ? -0.219740143755878492e1 + R * 0.313185441385405605e0 + pow(R - 0.625e1, 2) * (-0.167241113985216266e0) + pow(R - 0.625e1, 3) * 0.344431729743756715e-1 : (R < 0.675e1 ? -0.170575982921570368e1 + R * 0.236022979325492877e0 + pow(R - 0.65e1, 2) * (-0.141408734254434509e0) + pow(R - 0.65e1, 3) * 0.428473190098522944e-1 : (R < 0.70e1 ? -0.129090254576020458e1 + R * 0.173352484512622917e0 + pow(R - 0.675e1, 2) * (-0.109273244997045285e0) + pow(R - 0.675e1, 3) * 0.352976738662142756e-1 : (R < 0.725e1 ? -0.961052436878108263e0 + R * 0.125334175864015462e0 + pow(R - 0.70e1, 2) * (-0.827999895973845768e-1) + pow(R - 0.70e1, 3) * 0.289613250452908366e-1 : (R < 0.75e1 ? -0.704994254467035231e0 + R * 0.893644295113152076e-1 + pow(R - 0.725e1, 2) * (-0.610789958134164493e-1) + pow(R - 0.725e1, 3) * 0.218038035526224860e-1 : (R < 0.775e1 ? -0.510086371720427700e0 + R * 0.629131447707236974e-1 + pow(R - 0.75e1, 2) * (-0.447261431489495848e-1) + pow(R - 0.75e1, 3) * 0.165055298642192878e-1 : (R < 0.80e1 ? -0.363294650144872666e0 + R * 0.436448600457900182e-1 + pow(R - 0.775e1, 2) * (-0.323469957507851180e-1) + pow(R - 0.775e1, 3) * 0.124821685105002082e-1 : (R < 0.825e1 ? -0.254456573258930008e0 + R * 0.298117687661162492e-1 + pow(R - 0.80e1, 2) * (-0.229853693679099615e-1) + pow(R - 0.80e1, 3) * 0.906164198177985061e-2 : (R < 0.85e1 ? -0.174954149486396149e0 + R * 0.200181419537449889e-1 + pow(R - 0.825e1, 2) * (-0.161891378815750726e-1) + pow(R - 0.825e1, 3) * 0.650295373838043374e-2 : (R < 0.875e1 ? -0.117424608475682174e0 + R * 0.131428768389037862e-1 + pow(R - 0.85e1, 2) * (-0.113119225777897469e-1) + pow(R - 0.85e1, 3) * 0.489708354469841831e-2 : (R < 0.90e1 ? -0.765997031190988054e-1 + R * 0.840511871463986426e-2 + pow(R - 0.875e1, 2) * (-0.763910991926593317e-2) + pow(R - 0.875e1, 3) * 0.320755137882589372e-2 : (R < 0.925e1 ? -0.480637778138307895e-1 + R * 0.518697963853675427e-2 + pow(R - 0.90e1, 2) * (-0.523344638514651288e-2) + pow(R - 0.90e1, 3) * 0.249114575599798486e-2 : (R < 0.95e1 ? -0.284678354496213579e-1 + R * 0.303734627521311945e-2 + pow(R - 0.925e1, 2) * (-0.336508706814802423e-2) + pow(R - 0.925e1, 3) * 0.166099135718218130e-2 : (R < 0.100e2 ? -0.156266776827022856e-1 + R * 0.166623862061076678e-2 + pow(R - 0.95e1, 2) * (-0.211934355026138820e-2) + pow(R - 0.95e1, 3) * 0.948856208479708957e-3 : (R < 0.105e2 ? -0.196089260519160397e-2 + R * 0.258537226709160378e-3 + pow(R - 0.100e2, 2) * (-0.696059237541824709e-3) + pow(R - 0.100e2, 3) * 0.353500251447007611e-3 : (R < 0.110e2 ? 0.243408763089778945e-2 + R * (-0.172396822247408515e-3) + pow(R - 0.105e2, 2) * (-0.165808860371313265e-3) + pow(R - 0.105e2, 3) * 0.118510601732260646e-3 : (R < 0.120e2 ? 0.325363424081478872e-2 + R * (-0.249322731319526268e-3) + pow(R - 0.110e2, 2) * 0.119570422270776975e-4 + pow(R - 0.110e2, 3) * 0.149517782924485837e-4 : (R < 0.140e2 ? 0.245531002935630172e-2 + R * (-0.180553311988025168e-3) + pow(R - 0.120e2, 2) * 0.568123771044234504e-4 + pow(R - 0.120e2, 3) * (-0.773501029270543203e-5) : (R < 0.160e2 ? 0.738668066739151690e-3 + R * (-0.461239270827965502e-4) + pow(R - 0.140e2, 2) * 0.104023153481908548e-4 + pow(R - 0.140e2, 3) * (-0.101732322964628812e-5) : (R < 0.180e2 ? 0.301716620102617525e-3 + R * (-0.167225444457885967e-4) + pow(R - 0.160e2, 2) * 0.429837597031312529e-5 + pow(R - 0.160e2, 3) * (-0.488368114959413903e-6) : (R < 0.200e2 ? 0.111007622032883091e-3 + R * (-0.538945794404906072e-5) + pow(R - 0.180e2, 2) * 0.136816728055664187e-5 + pow(R - 0.180e2, 3) * (-0.181942798266055787e-6) : (R < 0.250e2 ? 0.492376379083032573e-4 + R * (-0.210010240101516289e-5) + pow(R - 0.200e2, 2) * 0.276510490960307097e-6 + pow(R - 0.200e2, 3) * (-0.147756153914548943e-7) : 0.128801043772802314e-4 + R * (-0.443168645771209230e-6) + pow(R - 0.250e2, 2) * 0.548762600884836868e-7 + pow(R - 0.250e2, 3) * (-0.300195218684836824e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2315388764e4 * (R - 0.300e2) * (R - 0.250e2) + 0.6242089360e4 * R + 0.1577857986e7 - 0.3121044680e3 * R * R + 0.75000e3 * (0.345130730e1 * R - 0.1742166785e3) * R) * pow(R, -6));
}

static double radcoeff_4_2_6_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.682336179099999995e1 + pow(R - 0.475e1, 2) * (-0.451146026378042819e2) + pow(R - 0.475e1, 3) * 0.829242621352171341e2 : (R < 0.525e1 ? 0.403444015647446435e2 + R * (-0.700900216854892832e1) + pow(R - 0.50e1, 2) * 0.170785939636085651e2 + pow(R - 0.50e1, 3) * (-0.229002569976514039e2) : (R < 0.55e1 ? 0.187651284994724961e2 + R * (-0.276350337380428490e1) + pow(R - 0.525e1, 2) * (-0.965987846299889708e-1) + pow(R - 0.525e1, 3) * 0.199913353538851646e1 : (R < 0.575e1 ? 0.169943677362866303e2 + R * (-0.243696522823393247e1) + pow(R - 0.55e1, 2) * 0.140275136691139846e1 + pow(R - 0.55e1, 3) * (-0.153545320790267259e1) : (R < 0.60e1 ? 0.146805485502449109e2 + R * (-0.202348702125998470e1) + pow(R - 0.575e1, 2) * 0.251161460984394014e0 + pow(R - 0.575e1, 3) * (-0.575032255777822687e0) : (R < 0.625e1 ? 0.145806881673567759e2 + R * (-0.200572483872612928e1) + pow(R - 0.60e1, 2) * (-0.180112730848973057e0) + pow(R - 0.60e1, 3) * 0.674205335013965845e0 : (R < 0.65e1 ? 0.143527334869718590e2 + R * (-0.196936770383549731e1) + pow(R - 0.625e1, 2) * 0.325541270411501438e0 + pow(R - 0.625e1, 3) * 0.425561955721949436e0 : (R < 0.675e1 ? 0.128030664595572272e2 + R * (-0.172680420193188100e1) + pow(R - 0.65e1, 2) * 0.644712737202963515e0 + pow(R - 0.65e1, 3) * 0.106193562098241490e0 : (R < 0.70e1 ? 0.105347135649496089e2 + R * (-0.138453654043697894e1) + pow(R - 0.675e1, 2) * 0.724357908776644632e0 + pow(R - 0.675e1, 3) * (-0.150755468114916358e0) : (R < 0.725e1 ? 0.824024425124142468e1 + R * (-0.105062423632020341e1) + pow(R - 0.70e1, 2) * 0.611291307690457364e0 + pow(R - 0.70e1, 3) * (-0.184111260838573376e0) : (R < 0.75e1 ? 0.630991847434600306e1 + R * (-0.779499443882207377e0) + pow(R - 0.725e1, 2) * 0.473207862061527318e0 + pow(R - 0.725e1, 3) * (-0.158549267730791588e0) : (R < 0.775e1 ? 0.478544705843225238e1 + R * (-0.572623500550967002e0) + pow(R - 0.75e1, 2) * 0.354295911263433627e0 + pow(R - 0.75e1, 3) * (-0.125133517838262875e0) : (R < 0.80e1 ? 0.361457332863291469e1 + R * (-0.418938079513924477e0) + pow(R - 0.775e1, 2) * 0.260445772884736471e0 + pow(R - 0.775e1, 3) * (-0.943097553161542645e-1) : (R < 0.825e1 ? 0.272905914094668134e1 + R * (-0.306398272193335153e0) + pow(R - 0.80e1, 2) * 0.189713456397620772e0 + pow(R - 0.80e1, 3) * (-0.697909744971201979e-1) : (R < 0.85e1 ? 0.206521565403006235e1 + R * (-0.224627351712734818e0) + pow(R - 0.825e1, 2) * 0.137370225524780620e0 + pow(R - 0.825e1, 3) * (-0.503772202953652465e-1) : (R < 0.875e1 ? 0.156947938542366661e1 + R * (-0.165387967755725507e0) + pow(R - 0.85e1, 2) * 0.995873103032566820e-1 + pow(R - 0.85e1, 3) * (-0.369052323214188807e-1) : (R < 0.90e1 ? 0.119998011226317813e1 + R * (-0.122514043664363206e0) + pow(R - 0.875e1, 2) * 0.719083860621925197e-1 + pow(R - 0.875e1, 3) * (-0.263459272189587868e-1) : (R < 0.925e1 ? 0.924933746181395344e0 + R * (-0.914997119868217051e-1) + pow(R - 0.90e1, 2) * 0.521489406479734297e-1 + pow(R - 0.90e1, 3) * (-0.190695388027463282e-1) : (R < 0.95e1 ? 0.719779974292236835e0 + R * (-0.690007801883499305e-1) + pow(R - 0.925e1, 2) * 0.378467865459136826e-1 + pow(R - 0.925e1, 3) * (-0.142463655700558692e-1) : (R < 0.100e2 ? 0.567526901567896314e0 + R * (-0.527485804597785657e-1) + pow(R - 0.95e1, 2) * 0.271620123683717803e-1 + pow(R - 0.95e1, 3) * (-0.857067457762929717e-2) : (R < 0.105e2 ? 0.365906005986287641e0 + R * (-0.320145740246287613e-1) + pow(R - 0.100e2, 2) * 0.143060005019278336e-1 + pow(R - 0.100e2, 3) * (-0.400249122534063629e-2) : (R < 0.110e2 ? 0.250288807837917238e0 + R * (-0.207104419417064034e-1) + pow(R - 0.105e2, 2) * 0.830226366391687877e-2 + pow(R - 0.105e2, 3) * (-0.224202228100815401e-2) : (R < 0.120e2 ? 0.179255904484002054e0 + R * (-0.140896949885456393e-1) + pow(R - 0.110e2, 2) * 0.493923024240464775e-2 + pow(R - 0.110e2, 3) * (-0.997495233859007182e-3) : (R < 0.140e2 ? 0.100565942093760394e0 + R * (-0.720372020531336640e-2) + pow(R - 0.120e2, 2) * 0.194674454082762599e-2 + pow(R - 0.120e2, 3) * (-0.241692902960471235e-3) : (R < 0.160e2 ? 0.380060904443992459e-1 + R * (-0.231705687752851736e-2) + pow(R - 0.140e2, 2) * 0.496587123064798634e-3 + pow(R - 0.140e2, 3) * (-0.515241424002699781e-4) : (R < 0.180e2 ? 0.176913052621609952e-1 + R * (-0.948998094072562291e-3) + pow(R - 0.160e2, 2) * 0.187442268663178739e-3 + pow(R - 0.160e2, 3) * (-0.177043288134487914e-4) : (R < 0.200e2 ? 0.862773138626219023e-2 + R * (-0.411680965181232777e-3) + pow(R - 0.180e2, 2) * 0.812162957824859771e-4 + pow(R - 0.180e2, 3) * (-0.892058665843478907e-5) : (R < 0.250e2 ? 0.452486901155012798e-2 + R * (-0.193862821952506378e-3) + pow(R - 0.200e2, 2) * 0.276927758318772359e-4 + pow(R - 0.200e2, 3) * (-0.160454739787519164e-5) : 0.110195239565933495e-2 + R * (-0.372761184743733987e-4) + pow(R - 0.250e2, 2) * 0.362456486374936042e-5 + pow(R - 0.250e2, 3) * (-0.138166892174936127e-6))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2072360232e6 * (R - 0.300e2) * (R - 0.250e2) - 0.1833876800e5 * R + 0.1451912950e9 + 0.916938400e3 * R * R + 0.75000e3 * (0.275244936e3 * R - 0.1518431841e5) * R) * pow(R, -6));
}

static double radcoeff_4_2_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.527963369300000451e1 + R * 0.888178419700125232e-15 + pow(R - 0.475e1, 2) * 0.310459544725558985e2 + pow(R - 0.475e1, 3) * (-0.566422069462236095e2) : (R < 0.525e1 ? -0.287371131913051236e2 + R * 0.490256343386102422e1 + pow(R - 0.50e1, 2) * (-0.114357007371118051e2) + pow(R - 0.50e1, 3) * 0.151457175426708375e2 : (R < 0.55e1 ? -0.141055439219184944e2 + R * 0.202453510455590369e1 + pow(R - 0.525e1, 2) * (-0.764125801086765061e-1) + pow(R - 0.525e1, 3) * (-0.145210386445975326e1) : (R < 0.575e1 ? -0.124253921255344864e2 + R * 0.171405933991536141e1 + pow(R - 0.55e1, 2) * (-0.116549047845349163e1) + pow(R - 0.55e1, 3) * 0.174509471516818371e1 : (R < 0.60e1 ? -0.110016132897502388e2 + R * 0.145851935978265024e1 + pow(R - 0.575e1, 2) * 0.143330557922646179e0 + pow(R - 0.575e1, 3) * 0.223327307787011875e0 : (R < 0.625e1 ? -0.116704005357242266e2 + R * 0.157205850895403798e1 + pow(R - 0.60e1, 2) * 0.310826038762905099e0 + pow(R - 0.60e1, 3) * (-0.533638250316230134e0) : (R < 0.65e1 ? -0.120052860525074845e2 + R * 0.162741435640119758e1 + pow(R - 0.625e1, 2) * (-0.894026489742675290e-1) + pow(R - 0.625e1, 3) * (-0.472226210522093237e0) : (R < 0.675e1 ? -0.111521679493676125e2 + R * 0.149417061744117108e1 + pow(R - 0.65e1, 2) * (-0.443572306865837485e0) + pow(R - 0.65e1, 3) * (-0.184898827595386006e0) : (R < 0.70e1 ? -0.945171114838029425e1 + R * 0.123771593383411749e1 + pow(R - 0.675e1, 2) * (-0.582246427562376989e0) + pow(R - 0.675e1, 3) * 0.728850473036272428e-1 : (R < 0.725e1 ? -0.754476184935651428e1 + R * 0.960258666422359131e0 + pow(R - 0.70e1, 2) * (-0.527582642084656550e0) + pow(R - 0.70e1, 3) * 0.140621127980878585e0 : (R < 0.75e1 ? -0.585420832765423071e1 + R * 0.722833806876445606e0 + pow(R - 0.725e1, 2) * (-0.422116796098997604e0) + pow(R - 0.725e1, 3) * 0.133505154372859952e0 : (R < 0.775e1 ? -0.448330824733893518e1 + R * 0.536807625271858102e0 + pow(R - 0.75e1, 2) * (-0.321987930319352633e0) + pow(R - 0.75e1, 3) * 0.109623688127681085e0 : (R < 0.80e1 ? -0.341331331467994525e1 + R * 0.396368101636121961e0 + pow(R - 0.775e1, 2) * (-0.239770164223591820e0) + pow(R - 0.775e1, 3) * 0.843706659164155798e-1 : (R < 0.825e1 ? -0.259445600026923184e1 + R * 0.292302519383653980e0 + pow(R - 0.80e1, 2) * (-0.176492164786280131e0) + pow(R - 0.80e1, 3) * 0.628002914066569107e-1 : (R < 0.85e1 ? -0.197361952704141208e1 + R * 0.215831491629262073e0 + pow(R - 0.825e1, 2) * (-0.129391946231287441e0) + pow(R - 0.825e1, 3) * 0.458983316569567604e-1 : (R < 0.875e1 ? -0.150422405684403082e1 + R * 0.159741455699297735e0 + pow(R - 0.85e1, 2) * (-0.949681974885698693e-1) + pow(R - 0.85e1, 3) * 0.340926091655155555e-1 : (R < 0.90e1 ? -0.115007419506853603e1 + R * 0.118649721173546968e0 + pow(R - 0.875e1, 2) * (-0.693987406144331992e-1) + pow(R - 0.875e1, 3) * 0.244607664009812605e-1 : (R < 0.925e1 ? -0.883012627418629292e0 + R * 0.885367445665143638e-1 + pow(R - 0.90e1, 2) * (-0.510531658136972530e-1) + pow(R - 0.90e1, 3) * 0.181649364305591712e-1 : (R < 0.95e1 ? -0.681303542883659241e0 + R * 0.664160872403955910e-1 + pow(R - 0.925e1, 2) * (-0.374294634907778728e-1) + pow(R - 0.925e1, 3) * 0.135692197167819606e-1 : (R < 0.100e2 ? -0.529811086333081160e0 + R * 0.502455841919032739e-1 + pow(R - 0.95e1, 2) * (-0.272525487031914024e-1) + pow(R - 0.95e1, 3) * 0.844527087876971276e-2 : (R < 0.105e2 ? -0.326382609207891472e0 + R * 0.293269886477891505e-1 + pow(R - 0.100e2, 2) * (-0.145846423850368324e-1) + pow(R - 0.100e2, 3) * 0.413858409891705407e-2 : (R < 0.110e2 ? -0.208964051527871175e0 + R * 0.178462843369401117e-1 + pow(R - 0.105e2, 2) * (-0.837676623666125039e-2) + pow(R - 0.105e2, 3) * 0.238460616556205630e-2 : (R < 0.120e2 ? -0.138288739578954434e0 + R * 0.112579727244504040e-1 + pow(R - 0.110e2, 2) * (-0.479985698831816594e-2) + pow(R - 0.110e2, 3) * 0.106120451486776133e-2 : (R < 0.140e2 ? -0.650341868680082841e-1 + R * 0.484187229241735649e-2 + pow(R - 0.120e2, 2) * (-0.161624344371488152e-2) + pow(R - 0.120e2, 3) * 0.221420546003101650e-3 : (R < 0.160e2 ? -0.164168151553306975e-1 + R * 0.103394506959504986e-2 + pow(R - 0.140e2, 2) * (-0.287720167696271626e-3) + pow(R - 0.140e2, 3) * 0.456782586993733166e-4 : (R < 0.180e2 ? -0.755840469433909437e-2 + R * 0.431203503202443376e-3 + pow(R - 0.160e2, 2) * (-0.136506155000317147e-4) + pow(R - 0.160e2, 3) * (-0.185835182755949749e-4) : (R < 0.200e2 ? -0.276479103902698212e-2 + R * 0.153598821895176797e-3 + pow(R - 0.180e2, 2) * (-0.125151725153601576e-3) + pow(R - 0.180e2, 3) * 0.241769555562815860e-4 : (R < 0.250e2 ? 0.113768638358940888e-2 + R * (-0.568846120438504420e-4) + pow(R - 0.200e2, 2) * 0.199100081840879534e-4 + pow(R - 0.200e2, 3) * (-0.170658012445717290e-5) : -0.355550240030327966e-3 + R * 0.142219604627411186e-4 + pow(R - 0.250e2, 2) * (-0.568869368276964040e-5) + pow(R - 0.250e2, 3) * 0.568867402959483437e-6)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1874332032e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1999267080e2 * R - 0.1174665205e4 + 0.9996335400e0 * R * R + 0.75000e3 * (-0.3665505450e-2 * R + 0.1516211226e0) * R) * pow(R, -6));
}

static double radcoeff_4_4_0_1_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.433041680200001056e0 + R * 0.222044604925031308e-15 + pow(R - 0.475e1, 2) * 0.113730810311734061e2 + pow(R - 0.475e1, 3) * (-0.208412640478936240e2) : (R < 0.525e1 ? -0.894188639957324050e1 + R * 0.177880350660664810e1 + pow(R - 0.50e1, 2) * (-0.425786700474681279e1) + pow(R - 0.50e1, 3) * 0.468050608928088252e1 : (R < 0.55e1 ? -0.256534247386038805e1 + R * 0.527464895973407288e0 + pow(R - 0.525e1, 2) * (-0.747487437786150455e0) + pow(R - 0.525e1, 3) * (-0.632709480429914706e0) : (R < 0.575e1 ? 0.861255812515228925e-1 + R * 0.350881494997231091e-1 + pow(R - 0.55e1, 2) * (-0.122201954810858648e1) + pow(R - 0.55e1, 3) * 0.123498784523877547e1 : (R < 0.60e1 ? 0.221088097474072320e1 + R * (-0.344361403572299662e0) + pow(R - 0.575e1, 2) * (-0.295778664179504769e0) + pow(R - 0.575e1, 3) * 0.672160128274813307e0 : (R < 0.625e1 ? 0.233405315846314743e1 + R * (-0.366220711610524552e0) + pow(R - 0.60e1, 2) * 0.208341432026605211e0 + pow(R - 0.60e1, 3) * 0.172775356221972626e0 : (R < 0.65e1 ? 0.149623601725001287e1 + R * (-0.229654616305602050e0) + pow(R - 0.625e1, 2) * 0.337922949193084687e0 + pow(R - 0.625e1, 3) * (-0.193082808842705733e0) : (R < 0.675e1 ? 0.651409371085935662e0 + R * (-0.968961683670670343e-1) + pow(R - 0.65e1, 2) * 0.193110842561055374e0 + pow(R - 0.65e1, 3) * (-0.174032525971148877e0) : (R < 0.70e1 ? 0.229270362565375863e0 + R * (-0.329718457061297585e-1) + pow(R - 0.675e1, 2) * 0.625864480826937158e-1 + pow(R - 0.675e1, 3) * (-0.550827555606987485e-1) : (R < 0.725e1 ? 0.855648958988974168e-1 + R * (-0.120066383324139159e-1) + pow(R - 0.70e1, 2) * 0.212743814121696580e-1 + pow(R - 0.70e1, 3) * (-0.168252853860559673e-1) : (R < 0.75e1 ? 0.323838893555557089e-1 + R * (-0.452418863621458119e-2) + pow(R - 0.725e1, 2) * 0.865541737262768250e-2 + pow(R - 0.725e1, 3) * (-0.670769201507742316e-2) : (R < 0.775e1 ? 0.979492200245818227e-2 + R * (-0.145417220272775764e-2) + pow(R - 0.75e1, 2) * 0.362464836131961513e-2 + pow(R - 0.75e1, 3) * (-0.305719314563433634e-2) : (R < 0.80e1 ? 0.370665271776508256e-3 + R * (-0.215071736874388169e-3) + pow(R - 0.775e1, 2) * 0.133175350209386277e-2 + pow(R - 0.775e1, 3) * (-0.829586090385240086e-3) : (R < 0.825e1 ? -0.364169728980248599e-2 + R * 0.295257622225310714e-3 + pow(R - 0.80e1, 2) * 0.709563934304932652e-3 + pow(R - 0.80e1, 3) * (-0.596320732824702406e-3) : (R < 0.85e1 ? -0.561118465077844845e-2 + R * 0.538229451973145311e-3 + pow(R - 0.825e1, 2) * 0.262323384686405793e-3 + pow(R - 0.825e1, 3) * (-0.224938583159480666e-4) : (R < 0.875e1 ? -0.667416570399791739e-2 + R * 0.665173545882107877e-3 + pow(R - 0.85e1, 2) * 0.245452990949444742e-3 + pow(R - 0.85e1, 3) * (-0.298632185911504842e-3) : (R < 0.90e1 ? -0.724740442536120182e-2 + R * 0.731906506498423114e-3 + pow(R - 0.875e1, 2) * 0.214788515158161102e-4 + pow(R - 0.875e1, 3) * (-0.169131478038035037e-3) : (R < 0.925e1 ? -0.705995013911779688e-2 + R * 0.710933780124199579e-3 + pow(R - 0.90e1, 2) * (-0.105369757012710181e-3) + pow(R - 0.90e1, 3) * (-0.121032199536352044e-3) : (R < 0.95e1 ? -0.637117652979420079e-2 + R * 0.635555364204778528e-3 + pow(R - 0.925e1, 2) * (-0.196143906664974214e-3) + pow(R - 0.925e1, 3) * (-0.126712555816559650e-3) : (R < 0.100e2 ? -0.522802511093852125e-2 + R * 0.513724806656686451e-3 + pow(R - 0.95e1, 2) * (-0.291178323527393958e-3) + pow(R - 0.95e1, 3) * 0.549778404280418828e-4 : (R < 0.105e2 ? -0.279449802970323929e-2 + R * 0.263779863450323946e-3 + pow(R - 0.100e2, 2) * (-0.208711562885331134e-3) + pow(R - 0.100e2, 3) * 0.726821528493665117e-4 : (R < 0.110e2 ? -0.121849119471118569e-2 + R * 0.109579915202017675e-3 + pow(R - 0.105e2, 2) * (-0.996883336112813664e-4) + pow(R - 0.105e2, 3) * 0.547782716144920432e-4 : (R < 0.120e2 ? -0.591915065257658801e-3 + R * 0.509752853016053444e-4 + pow(R - 0.110e2, 2) * (-0.175209261895432948e-4) + pow(R - 0.110e2, 3) * 0.519175867937951303e-6 : (R < 0.140e2 ? -0.207104918272991366e-3 + R * 0.174909605263326121e-4 + pow(R - 0.120e2, 2) * (-0.159633985857294408e-4) + pow(R - 0.120e2, 3) * 0.334261597615656760e-5 : (R < 0.160e2 ? 0.881732519994887515e-4 + R * (-0.625124210270633909e-5) + pow(R - 0.140e2, 2) * 0.409229727120996478e-5 + pow(R - 0.140e2, 3) * (-0.740038330553397361e-6) : (R < 0.180e2 ? -0.211975314508839927e-4 + R * 0.123748701549274958e-5 + pow(R - 0.160e2, 2) * (-0.347932712110420125e-6) + pow(R - 0.160e2, 3) * 0.310054211820226660e-7 : (R < 0.200e2 ? -0.398723463323614037e-5 + R * 0.217821221235341126e-6 + pow(R - 0.180e2, 2) * (-0.161900185018284129e-6) + pow(R - 0.180e2, 3) * 0.308294586628067799e-7 : (R < 0.250e2 ? 0.116474501838228003e-5 + R * (-0.598260148841140052e-7) + pow(R - 0.200e2, 2) * 0.230765669585565669e-7 + pow(R - 0.200e2, 3) * (-0.202136850274675327e-8) : -0.490087667486129279e-6 + R * 0.193370169954451682e-7 + pow(R - 0.250e2, 2) * (-0.724396058264473338e-8) + pow(R - 0.250e2, 3) * 0.713735684711140018e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1016808938e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1084635264e3 * R - 0.6370731300e4 + 0.5423176320e1 * R * R + 0.75000e3 * (-0.1988212101e-1 * R + 0.822357840e0) * R) * pow(R, -6));
}

static double radcoeff_4_4_1_1_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.297033267699999999e-1 + pow(R - 0.475e1, 2) * 0.119675440723642612e0 + pow(R - 0.475e1, 3) * (-0.183656340174570443e0) : (R < 0.525e1 ? -0.152104024935446724e0 + R * 0.254021565790893480e-1 + pow(R - 0.50e1, 2) * (-0.180668144072852199e-1) + pow(R - 0.50e1, 3) * 0.547917002037113382e-1 : (R < 0.55e1 ? -0.158887272589123746e0 + R * 0.266421931636426149e-1 + pow(R - 0.525e1, 2) * 0.230269607454982872e-1 + pow(R - 0.525e1, 3) * (-0.104114364640274973e0) : (R < 0.575e1 ? -0.115031078004871098e0 + R * 0.186342301663402002e-1 + pow(R - 0.55e1, 2) * (-0.550588127347079528e-1) + pow(R - 0.55e1, 3) * 0.115718770645388616e0 : (R < 0.60e1 ? -0.831293609992303922e-1 + R * 0.128020932949965902e-1 + pow(R - 0.575e1, 2) * 0.317302652493335127e-1 + pow(R - 0.575e1, 3) * (-0.572174241172794945e-1) : (R < 0.625e1 ? -0.112861435289040649e0 + R * 0.179389588976734404e-1 + pow(R - 0.60e1, 2) * (-0.111828028386261099e-1) + pow(R - 0.60e1, 3) * (-0.539757779227061779e-2) : (R < 0.65e1 ? -0.723731522734352706e-1 + R * 0.113355116423096442e-1 + pow(R - 0.625e1, 2) * (-0.152309861828290732e-1) + pow(R - 0.625e1, 3) * 0.813714987836197320e-2 : (R < 0.675e1 ? -0.336143922626718564e-1 + R * 0.524573415308797822e-2 + pow(R - 0.65e1, 2) * (-0.912812377405759247e-2) + pow(R - 0.65e1, 3) * 0.682483278122272569e-2 : (R < 0.70e1 ? -0.119085232376344875e-1 + R * 0.196132841253844267e-2 + pow(R - 0.675e1, 2) * (-0.400949918814054798e-2) + pow(R - 0.675e1, 3) * 0.276091642394710787e-2 : (R < 0.725e1 ? -0.170643326570776095e-2 + R * 0.474250647958251569e-3 + pow(R - 0.70e1, 2) * (-0.193881187018021687e-2) + pow(R - 0.70e1, 3) * 0.141648671338884193e-2 : (R < 0.75e1 ? 0.329718000069300536e-2 + R * (-0.229564028371449016e-3) + pow(R - 0.725e1, 2) * (-0.876446835138585366e-3) + pow(R - 0.725e1, 3) * 0.533205586497525379e-3 : (R < 0.775e1 ? 0.578758868654341650e-2 + R * (-0.567811398472455541e-3) + pow(R - 0.75e1, 2) * (-0.476542645265441332e-3) + pow(R - 0.75e1, 3) * 0.453532732621054514e-3 : (R < 0.80e1 ? 0.695245421847514710e-2 + R * (-0.721045333738728621e-3) + pow(R - 0.775e1, 2) * (-0.136393095799650446e-3) + pow(R - 0.775e1, 3) * (-0.439532209817396387e-4) : (R < 0.825e1 ? 0.755474509558104034e-2 + R * (-0.797483110572630026e-3) + pow(R - 0.80e1, 2) * (-0.169358011535955175e-3) + pow(R - 0.80e1, 3) * 0.386899901705901417e-3 : (R < 0.85e1 ? 0.765032154295869696e-2 + R * (-0.809618384770751081e-3) + pow(R - 0.825e1, 2) * 0.120816914743470915e-3 + pow(R - 0.825e1, 3) * (-0.916243122418662897e-4) : (R < 0.875e1 ? 0.728899533022710731e-2 + R * (-0.766389485944365609e-3) + pow(R - 0.85e1, 2) * 0.520986805620711840e-4 + pow(R - 0.85e1, 3) * 0.174091817661563942e-3 : (R < 0.90e1 ? 0.678142056660313401e-2 + R * (-0.707697929851786684e-3) + pow(R - 0.875e1, 2) * 0.182667543808244141e-3 + pow(R - 0.875e1, 3) * 0.559010287956105550e-4 : (R < 0.925e1 ? 0.587737380843638899e-2 + R * (-0.605882715048487622e-3) + pow(R - 0.90e1, 2) * 0.224593315404952057e-3 + pow(R - 0.90e1, 3) * 0.103454665555993594e-3 : (R < 0.95e1 ? 0.467485410047693145e-2 + R * (-0.474188307554262826e-3) + pow(R - 0.925e1, 2) * 0.302184314571947259e-3 + pow(R - 0.925e1, 3) * (-0.104614910219583636e-3) : (R < 0.100e2 ? 0.344307582677738080e-2 + R * (-0.342711445934461116e-3) + pow(R - 0.95e1, 2) * 0.223723131907259528e-3 + pow(R - 0.95e1, 3) * (-0.377207568766746139e-4) : (R < 0.105e2 ? 0.153996587269707576e-2 + R * (-0.147278881684707565e-3) + pow(R - 0.100e2, 2) * 0.167141996592247601e-3 + pow(R - 0.100e2, 3) * (-0.932114151656649207e-4) : (R < 0.110e2 ? 0.549148875160440923e-3 + R * (-0.500454464667086685e-4) + pow(R - 0.105e2, 2) * 0.273248738437502061e-4 + pow(R - 0.105e2, 3) * (-0.297159062066571487e-5) : (R < 0.120e2 ? 0.279550655135035243e-3 + R * (-0.249492655884577487e-4) + pow(R - 0.110e2, 2) * 0.228674879127516335e-4 + pow(R - 0.110e2, 3) * (-0.700147448929388476e-5) : (R < 0.140e2 ? -0.134995973296633058e-5 + R * (-0.218713230836139093e-6) + pow(R - 0.120e2, 2) * 0.186306444486997672e-5 + pow(R - 0.120e2, 3) * (-0.473091066725953570e-6) : (R < 0.160e2 ? -0.225347401895525522e-4 + R * 0.155645174793232517e-5 + pow(R - 0.140e2, 2) * (-0.975481955485744697e-6) + pow(R - 0.140e2, 3) * 0.183909151234791022e-6 : (R < 0.180e2 ? 0.215489331239057641e-5 + R * (-0.138566259193161031e-6) + pow(R - 0.160e2, 2) * 0.127972951923001597e-6 + pow(R - 0.160e2, 3) * (-0.267725609382105412e-7) : (R < 0.200e2 ? -0.978574743225739370e-6 + R * 0.520548172403188542e-7 + pow(R - 0.180e2, 2) * (-0.326624137062616574e-7) + pow(R - 0.180e2, 3) * 0.603022631805111524e-8 : (R < 0.250e2 ? 0.104756192662287779e-6 + R * (-0.623212176811438845e-8) + pow(R - 0.200e2, 2) * 0.351894420204503609e-8 + pow(R - 0.200e2, 3) * (-0.328770597684431671e-9) : -0.111657706850089941e-6 + R * 0.429952542600359769e-8 + pow(R - 0.250e2, 2) * (-0.141261476322143903e-8) + pow(R - 0.250e2, 3) * 0.134589743604143908e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.6363597664e1 * (R - 0.300e2) * (R - 0.250e2) - 0.6788032728e2 * R - 0.3987118058e4 + 0.3394016364e1 * R * R + 0.75000e3 * (-0.1244310539e-1 * R + 0.5146699780e0) * R) * pow(R, -6));
}

static double radcoeff_4_4_2_1_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.299597126000001046e0 + R * 0.222044604925031308e-15 + pow(R - 0.475e1, 2) * 0.998736698498129272e1 + pow(R - 0.475e1, 3) * (-0.188643296807251701e2) : (R < 0.525e1 ? -0.725325022751338544e1 + R * 0.145662167735467696e1 + pow(R - 0.50e1, 2) * (-0.416088027556258577e1) + pow(R - 0.50e1, 3) * 0.486934442137551304e1 : (R < 0.55e1 ? -0.130817192955178685e1 + R * 0.289183618581292712e0 + pow(R - 0.525e1, 2) * (-0.508871959530950990e0) + pow(R - 0.525e1, 3) * (-0.494688651176879990e0) : (R < 0.575e1 ? 0.561839623039162461e0 + R * (-0.580064832798477259e-1) + pow(R - 0.55e1, 2) * (-0.879888447913610983e0) + pow(R - 0.55e1, 3) * 0.951144973732007459e0 : (R < 0.60e1 ? 0.202593434820593510e1 + R * (-0.319611024661901777e0) + pow(R - 0.575e1, 2) * (-0.166529717614605333e0) + pow(R - 0.575e1, 3) * 0.523996058648849794e0 : (R < 0.625e1 ? 0.193380726613527076e1 + R * (-0.304626622472545128e0) + pow(R - 0.60e1, 2) * 0.226467326372032041e0 + pow(R - 0.60e1, 3) * 0.635018623925933667e-1 : (R < 0.65e1 ? 0.116682705072948623e1 + R * (-0.179486360087917796e0) + pow(R - 0.625e1, 2) * 0.274093723166477066e0 + pow(R - 0.625e1, 3) * (-0.165609341819223183e0) : (R < 0.675e1 ? 0.492402047512593644e0 + R * (-0.734912500957836390e-1) + pow(R - 0.65e1, 2) * 0.149886716802059672e0 + pow(R - 0.65e1, 3) * (-0.136503929355700493e0) : (R < 0.70e1 ? 0.166532209803396530e0 + R * (-0.241423784489476351e-1) + pow(R - 0.675e1, 2) * 0.475087697852843022e-1 + pow(R - 0.675e1, 3) * (-0.417889215579749854e-1) : (R < 0.725e1 ? 0.574158213123805786e-1 + R * (-0.822341634842579765e-2) + pow(R - 0.70e1, 2) * 0.161670786168030614e-1 + pow(R - 0.70e1, 3) * (-0.130560681883994702e-1) : (R < 0.75e1 ? 0.173646953677814644e-1 + R * (-0.258788982534916782e-2) + pow(R - 0.725e1, 2) * 0.637502747550345705e-2 + pow(R - 0.725e1, 3) * (-0.514110520842714185e-2) : (R < 0.775e1 ? 0.100613098233146340e-2 + R * (-0.364333314177528445e-3) + pow(R - 0.75e1, 2) * 0.251919856918310023e-2 + pow(R - 0.75e1, 3) * (-0.212702508989194615e-2) : (R < 0.80e1 ? -0.554071499595943338e-2 + R * 0.496448766059281793e-3 + pow(R - 0.775e1, 2) * 0.923929751764140613e-3 + pow(R - 0.775e1, 3) * (-0.833938368005070858e-3) : (R < 0.825e1 ? -0.794081112852321191e-2 + R * 0.802050197940401381e-3 + pow(R - 0.80e1, 2) * 0.298475975760337416e-3 + pow(R - 0.80e1, 3) * (-0.385266046087770584e-3) : (R < 0.85e1 ? -0.856343114697768332e-2 + R * 0.879050802179113101e-3 + pow(R - 0.825e1, 2) * 0.952644119450945739e-5 + pow(R - 0.825e1, 3) * 0.460758323561518326e-4 : (R < 0.875e1 ? -0.867603654241674328e-2 + R * 0.892453241343146289e-3 + pow(R - 0.85e1, 2) * 0.440833154616233336e-4 + pow(R - 0.85e1, 3) * (-0.315443811336833975e-3) : (R < 0.90e1 ? -0.835354964692263703e-2 + R * 0.855349184448301507e-3 + pow(R - 0.875e1, 2) * (-0.192499543041002141e-3) + pow(R - 0.875e1, 3) * 0.618059537911834662e-4 : (R < 0.925e1 ? -0.760266475367282583e-2 + R * 0.770688029263647337e-3 + pow(R - 0.90e1, 2) * (-0.146145077697614541e-3) + pow(R - 0.90e1, 3) * (-0.179792618227899662e-3) : (R < 0.95e1 ? -0.662685927409825768e-2 + R * 0.663904374497108988e-3 + pow(R - 0.925e1, 2) * (-0.280989541368539288e-3) + pow(R - 0.925e1, 3) * (-0.472883832795868865e-4) : (R < 0.100e2 ? -0.522622724720520938e-2 + R * 0.514543031947916761e-3 + pow(R - 0.95e1, 2) * (-0.316455828828229456e-3) + pow(R - 0.95e1, 3) * 0.768528906647916775e-4 : (R < 0.105e2 ? -0.270757298478281009e-2 + R * 0.255726871118281036e-3 + pow(R - 0.100e2, 2) * (-0.201176492831041940e-3) + pow(R - 0.100e2, 3) * 0.725025511089595929e-4 : (R < 0.110e2 ? -0.120740870435906769e-2 + R * 0.108927291618958835e-3 + pow(R - 0.105e2, 2) * (-0.924226661676025437e-4) + pow(R - 0.105e2, 3) * 0.474592488193697652e-4 : (R < 0.120e2 ? -0.599471439714719680e-3 + R * 0.520990620658836050e-4 + pow(R - 0.110e2, 2) * (-0.212337929385478960e-4) + pow(R - 0.110e2, 3) * 0.172855538266428833e-5 : (R < 0.140e2 ? -0.171593640518368212e-3 + R * 0.148171423367806851e-4 + pow(R - 0.120e2, 2) * (-0.160481267905550307e-4) + pow(R - 0.120e2, 3) * 0.353331214758234386e-5 : (R < 0.160e2 ? 0.975790089778182671e-4 + R * (-0.697561905445130471e-5) + pow(R - 0.140e2, 2) * 0.515174609493903414e-5 + pow(R - 0.140e2, 3) * (-0.923806589656690800e-6) : (R < 0.180e2 ? -0.415453442216926836e-4 + R * 0.254568624942454268e-5 + pow(R - 0.160e2, 2) * (-0.391093443001110605e-6) + pow(R - 0.160e2, 3) * (-0.591650077305803162e-7) : (R < 0.200e2 ? -0.264466848975645146e-5 + R * 0.271332384653136201e-6 + pow(R - 0.180e2, 2) * (-0.746083489384592529e-6) + pow(R - 0.180e2, 3) * 0.159175663529012168e-6 : (R < 0.250e2 ? 0.171289227647417497e-4 + R * (-0.802893610537087476e-6) + pow(R - 0.200e2, 2) * 0.208970491789480637e-6 + pow(R - 0.200e2, 3) * (-0.164498428268126240e-7) : -0.110221294096929722e-5 + R * 0.530730953467718826e-7 + pow(R - 0.250e2, 2) * (-0.377771506127087497e-7) + pow(R - 0.250e2, 3) * 0.413707632467087560e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3427361773e3 * (R - 0.300e2) * (R - 0.250e2) + 0.3655855592e4 * R + 0.2147803838e6 - 0.1827927796e3 * R * R + 0.75000e3 * (0.670238036e0 * R - 0.2772345297e2) * R) * pow(R, -6));
}

static double radcoeff_4_4_2_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.284477510099999997e0 + pow(R - 0.475e1, 2) * (-0.909473659171850635e1) + pow(R - 0.475e1, 3) * 0.165846144372740270e2 : (R < 0.525e1 ? 0.716395651803186517e1 + R * (-0.143775308887037312e1) + pow(R - 0.50e1, 2) * 0.334372423623701343e1 + pow(R - 0.50e1, 3) * (-0.342540251822208308e1) : (R < 0.55e1 ? 0.191402185222216192e1 + R * (-0.408153942918507040e0) + pow(R - 0.525e1, 2) * 0.774672347570451114e0 + pow(R - 0.525e1, 3) * 0.295890266014308623e0 : (R < 0.575e1 ? -0.468423633294207442e0 + R * 0.346616557444013595e-1 + pow(R - 0.55e1, 2) * 0.996590047081182595e0 + pow(R - 0.55e1, 3) * (-0.990575915435152332e0) : (R < 0.60e1 ? -0.221884623056018393e1 + R * 0.347223695140901567e0 + pow(R - 0.575e1, 2) * 0.253658110504818346e0 + pow(R - 0.575e1, 3) * (-0.635997324273698372e0) : (R < 0.625e1 ? -0.225840739855195372e1 + R * 0.354803252091992316e0 + pow(R - 0.60e1, 2) * (-0.223339882700455461e0) + pow(R - 0.60e1, 3) * (-0.125656862990055185e0) : (R < 0.65e1 ? -0.142913825994955768e1 + R * 0.219572648931129238e0 + pow(R - 0.625e1, 2) * (-0.317582529942996850e0) + pow(R - 0.625e1, 3) * 0.175436479913919530e0 : (R < 0.675e1 ? -0.627915960652689620e0 + R * 0.936757239434907185e-1 + pow(R - 0.65e1, 2) * (-0.186005170007557202e0) + pow(R - 0.65e1, 3) * 0.164403567974377218e0 : (R < 0.70e1 ? -0.217278294973627994e0 + R * 0.314988079349078492e-1 + pow(R - 0.675e1, 2) * (-0.627024940267742747e-1) + pow(R - 0.675e1, 3) * 0.550735602525714921e-1 : (R < 0.725e1 ? -0.731619952088450598e-1 + R * 0.104738534688778653e-1 + pow(R - 0.70e1, 2) * (-0.213973238373456540e-1) + pow(R - 0.70e1, 3) * 0.175816636553367475e-1 : (R < 0.75e1 ? -0.205593895754599236e-1 + R * 0.307175348558067895e-2 + pow(R - 0.725e1, 2) * (-0.821107609584309332e-2) + pow(R - 0.725e1, 3) * 0.694131831008150749e-2 : (R < 0.775e1 ? 0.661827530043885767e-4 + R * 0.267712620799414886e-3 + pow(R - 0.75e1, 2) * (-0.300508736328196271e-2) + pow(R - 0.75e1, 3) * 0.267265798433721172e-2 : (R < 0.80e1 ? 0.768113247303212846e-2 + R * (-0.733707688778339161e-3) + pow(R - 0.775e1, 2) * (-0.100059387502905348e-2) + pow(R - 0.775e1, 3) * 0.105811048856963822e-2 : (R < 0.825e1 ? 0.100503380994884685e-1 + R * (-0.103560890968605861e-2) + pow(R - 0.80e1, 2) * (-0.207011008601824738e-3) + pow(R - 0.80e1, 3) * 0.283930909384235396e-3 : (R < 0.85e1 ? 0.104565511169387709e-1 + R * (-0.108587736847742681e-2) + pow(R - 0.825e1, 2) * 0.593717343635181628e-5 + pow(R - 0.825e1, 3) * 0.890208498934240276e-4 : (R < 0.875e1 ? 0.102912031744359887e-1 + R * (-0.106621737240423392e-2) + pow(R - 0.85e1, 2) * 0.727028108564198463e-4 + pow(R - 0.85e1, 3) * 0.259106177442066082e-3 : (R < 0.90e1 ? 0.955662476427432232e-2 + R * (-0.981283558705636771e-3) + pow(R - 0.875e1, 2) * 0.267032443937969394e-3 + pow(R - 0.875e1, 3) * (-0.154922135661690423e-3) : (R < 0.925e1 ? 0.863067873985897023e-2 + R * (-0.876815237173218971e-3) + pow(R - 0.90e1, 2) * 0.150840842191701563e-3 + pow(R - 0.90e1, 3) * 0.343918762004696507e-3 : (R < 0.95e1 ? 0.735135702516375930e-2 + R * (-0.736910048201487524e-3) + pow(R - 0.925e1, 2) * 0.408779913695223984e-3 + pow(R - 0.925e1, 3) * (-0.159089008357096164e-3) : (R < 0.100e2 ? 0.571609271009789442e-2 + R * (-0.562349280420831052e-3) + pow(R - 0.95e1, 2) * 0.289463157427401847e-3 + pow(R - 0.95e1, 3) * (-0.188723043714791907e-4) : (R < 0.105e2 ? 0.303301016992038727e-2 + R * (-0.287040351272038708e-3) + pow(R - 0.100e2, 2) * 0.261154700870183058e-3 + pow(R - 0.100e2, 3) * (-0.118403780252211336e-3) : (R < 0.110e2 ? 0.127380378295564823e-2 + R * (-0.114688485591014119e-3) + pow(R - 0.105e2, 2) * 0.835490304918660401e-4 + pow(R - 0.105e2, 3) * (-0.385091022196755477e-4) : (R < 0.120e2 ? 0.688538160702952180e-3 + R * (-0.600212817639047430e-4) + pow(R - 0.110e2, 2) * 0.257853771623527151e-4 + pow(R - 0.110e2, 3) * (-0.275739438844796992e-5) : (R < 0.140e2 ? 0.191983289566518693e-3 + R * (-0.167227106045432225e-4) + pow(R - 0.120e2, 2) * 0.175131939970088054e-4 + pow(R - 0.120e2, 3) * (-0.378154893949359648e-5) : (R < 0.160e2 ? -0.113654967958963708e-3 + R * 0.795147810956883611e-5 + pow(R - 0.140e2, 2) * (-0.517609963995277352e-5) + pow(R - 0.140e2, 3) * 0.929742059334177543e-6 : (R < 0.180e2 ? 0.258384715205140152e-4 + R * (-0.159601573823212596e-5) + pow(R - 0.160e2, 2) * 0.402352716052292325e-6 + pow(R - 0.160e2, 3) * (-0.640591759311465260e-8) : (R < 0.200e2 ? -0.189082311474011405e-6 + R * (-0.634758851403326982e-7) + pow(R - 0.180e2, 2) * 0.363917210493604410e-6 + pow(R - 0.180e2, 3) * (-0.792493335367190264e-7) : (R < 0.250e2 ? -0.946094492846913073e-5 + R * 0.441200954393456518e-6 + pow(R - 0.200e2, 2) * (-0.111578790726709788e-6) + pow(R - 0.200e2, 3) * 0.869453888960369597e-8 : 0.428839928234103096e-6 + R * (-0.224965361533641268e-7) + pow(R - 0.250e2, 2) * 0.188392926173456513e-7 + pow(R - 0.250e2, 3) * (-0.209763274533456483e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2038162690e3 * (R - 0.300e2) * (R - 0.250e2) - 0.2174039144e4 * R - 0.1277252358e6 + 0.1087019572e3 * R * R + 0.75000e3 * (-0.3985746744e0 * R + 0.1648650922e2) * R) * pow(R, -6));
}

static double radcoeff_4_4_3_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.580916515599999295e-1 + R * 0.138777878078144568e-16 + pow(R - 0.475e1, 2) * (-0.655609957983831704e0) + pow(R - 0.475e1, 3) * 0.122184275033532663e1 : (R < 0.525e1 ? 0.529754638680210332e0 + R * (-0.987094633040420666e-1) + pow(R - 0.50e1, 2) * 0.260772104767663326e0 + pow(R - 0.50e1, 3) * (-0.406108010365980043e0) : (R < 0.55e1 ? 0.254943255255116297e0 + R * (-0.444686628638316789e-1) + pow(R - 0.525e1, 2) * (-0.438089030068217131e-1) + pow(R - 0.525e1, 3) * 0.180125304568593714e0 : (R < 0.575e1 ? 0.189739919633471588e0 + R * (-0.325996197606312002e-1) + pow(R - 0.55e1, 2) * 0.912850754196235792e-1 + pow(R - 0.55e1, 3) * (-0.158023020964395078e0) : (R < 0.60e1 ? 0.100900104790450071e0 + R * (-0.165863984816434912e-1) + pow(R - 0.575e1, 2) * (-0.272321903036727361e-1) + pow(R - 0.575e1, 3) * 0.620558565369867809e-1 : (R < 0.625e1 ? 0.112051447961269035e0 + R * (-0.185670205327948395e-1) + pow(R - 0.60e1, 2) * 0.193097020990673496e-1 + pow(R - 0.60e1, 3) * (-0.114463615955196396e-2) : (R < 0.65e1 ? 0.542389708418572342e-1 + R * (-0.912678876317715715e-2) + pow(R - 0.625e1, 2) * 0.184512249794033766e-1 + pow(R - 0.625e1, 3) * (-0.122874824587789842e-1) : (R < 0.675e1 ? 0.102090685532274447e-1 + R * (-0.220507923449652981e-2) + pow(R - 0.65e1, 2) * 0.923561313531913800e-2 + pow(R - 0.65e1, 3) * (-0.801132866133207402e-2) : (R < 0.70e1 ? -0.103697391308521063e-1 + R * 0.910603209163275088e-3 + pow(R - 0.675e1, 2) * 0.322711663932008161e-2 + pow(R - 0.675e1, 3) * (-0.310784513589272820e-2) : (R < 0.725e1 ? -0.174324659179040040e-1 + R * 0.194144056584342919e-2 + pow(R - 0.70e1, 2) * 0.896232787400535243e-3 + pow(R - 0.70e1, 3) * (-0.106056682709700979e-2) : (R < 0.75e1 ? -0.192001585491068071e-1 + R * 0.219070067946300785e-2 + pow(R - 0.725e1, 2) * 0.100807667077777876e-3 + pow(R - 0.725e1, 3) * (-0.701850435719231160e-3) : (R < 0.775e1 ? -0.185958760592840541e-1 + R * 0.210950755630454068e-2 + pow(R - 0.75e1, 2) * (-0.425580159711645548e-3) + pow(R - 0.75e1, 3) * 0.198118777973934138e-3 : (R < 0.80e1 ? -0.172581474437209365e-1 + R * 0.193386474731883072e-2 + pow(R - 0.775e1, 2) * (-0.276991076231194945e-3) + pow(R - 0.775e1, 3) * (-0.434606564176510176e-3) : (R < 0.825e1 ? -0.155223759623610985e-1 + R * 0.171388047842013736e-2 + pow(R - 0.80e1, 2) * (-0.602945999363577591e-3) + pow(R - 0.80e1, 3) * 0.319392918732112300e-3 : (R < 0.85e1 ? -0.135619782467551134e-1 + R * 0.147229365100061968e-2 + pow(R - 0.825e1, 2) * (-0.363401310314493352e-3) + pow(R - 0.825e1, 3) * (-0.120609014751941595e-3) : (R < 0.875e1 ? -0.118498991584077649e-1 + R * 0.126797880557738400e-2 + pow(R - 0.85e1, 2) * (-0.453858071378449555e-3) + pow(R - 0.85e1, 3) * 0.571094698756548694e-4 : (R < 0.90e1 ? -0.998543911413614024e-2 + R * 0.105175779548984452e-2 + pow(R - 0.875e1, 2) * (-0.411025968971708401e-3) + pow(R - 0.875e1, 3) * (-0.670608775506782544e-4) : (R < 0.925e1 ? -0.804939397216914224e-2 + R * 0.833670896463238067e-3 + pow(R - 0.90e1, 2) * (-0.461321627134717092e-3) + pow(R - 0.90e1, 3) * 0.544949939270581129e-4 : (R < 0.95e1 ? -0.603827731917912832e-2 + R * 0.613227894257203053e-3 + pow(R - 0.925e1, 2) * (-0.420450381689423504e-3) + pow(R - 0.925e1, 3) * 0.161468978642446195e-3 : (R < 0.100e2 ? -0.435250982042552446e-2 + R * 0.433278136907949869e-3 + pow(R - 0.95e1, 2) * (-0.299348647707588851e-3) + pow(R - 0.95e1, 3) * 0.697167357833780810e-4 : (R < 0.105e2 ? -0.194802143166894568e-2 + R * 0.186217041037894568e-3 + pow(R - 0.100e2, 2) * (-0.194773544032521723e-3) + pow(R - 0.100e2, 3) * 0.926794867934651006e-4 : (R < 0.110e2 ? -0.669858627984952623e-3 + R * 0.609531121004716842e-4 + pow(R - 0.105e2, 2) * (-0.557543138423240655e-4) + pow(R - 0.105e2, 3) * 0.245227186427613746e-4 : (R < 0.120e2 ? -0.269746843152405115e-3 + R * 0.235908372402186479e-4 + pow(R - 0.110e2, 2) * (-0.189702358781820037e-4) + pow(R - 0.110e2, 3) * 0.550802387796335486e-5 : (R < 0.140e2 ? -0.262122536868365142e-4 + R * 0.217443711774470941e-5 + pow(R - 0.120e2, 2) * (-0.244616424429193697e-5) + pow(R - 0.120e2, 3) * 0.443813141209791122e-6 : (R < 0.160e2 ? 0.299781844226776230e-4 + R * (-0.228446216490554458e-5) + pow(R - 0.140e2, 2) * 0.216714602966809816e-6 + pow(R - 0.140e2, 3) * 0.179622589242981338e-6 : (R < 0.180e2 ? -0.160752481760395311e-4 + R * 0.737867317877470743e-6 + pow(R - 0.160e2, 2) * 0.129445013842469790e-5 + pow(R - 0.160e2, 3) * (-0.378035010931716621e-6) : (R < 0.200e2 ? -0.254665753155219271e-4 + R * 0.137924774039566267e-5 + pow(R - 0.180e2, 2) * (-0.973759927165601829e-6) + pow(R - 0.180e2, 3) * 0.183811838333885194e-6 : (R < 0.250e2 ? 0.589483265560243975e-5 + R * (-0.310049908260122002e-6) + pow(R - 0.200e2, 2) * 0.129111102837709388e-6 + pow(R - 0.200e2, 3) * (-0.114845605243369941e-7) : -0.305718456529243002e-5 + R * 0.119719080791697199e-6 + pow(R - 0.250e2, 2) * (-0.431573050273455474e-7) + pow(R - 0.250e2, 3) * 0.421300497460122095e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.9797296307e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1045045316e4 * R - 0.6139637918e5 + 0.5225226580e2 * R * R + 0.75000e3 * (-0.1915915783e0 * R + 0.792492351e1) * R) * pow(R, -6));
}

static double radcoeff_4_4_4_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.576913131799999951e-1 + pow(R - 0.475e1, 2) * (-0.110057793036269160e2) + pow(R - 0.475e1, 3) * 0.216287439857076613e2 : (R < 0.525e1 ? 0.694528000396635647e1 + R * (-0.144750015449327130e1) + pow(R - 0.50e1, 2) * 0.521577868565383085e1 + pow(R - 0.50e1, 3) * (-0.615887499072298006e1) : (R < 0.55e1 ? -0.453742730758696977e0 + R * 0.560012757308514519e-2 + pow(R - 0.525e1, 2) * 0.596622442611595138e0 + pow(R - 0.525e1, 3) * 0.212653941984257522e0 : (R < 0.575e1 ? -0.227314220510512044e1 + R * 0.343783963000930948e0 + pow(R - 0.55e1, 2) * 0.756112899099788294e0 + pow(R - 0.55e1, 3) * (-0.954780086014048956e0) : (R < 0.60e1 ? -0.338525589243334801e1 + R * 0.542819146423190957e0 + pow(R - 0.575e1, 2) * 0.400278345892514653e-1 + pow(R - 0.575e1, 3) * (-0.639389437928061799e0) : (R < 0.625e1 ? -0.279351499883783028e1 + R * 0.442947544106305047e0 + pow(R - 0.60e1, 2) * (-0.439514243856794939e0) + pow(R - 0.60e1, 3) * 0.786757602862982602e-1 : (R < 0.65e1 ? -0.153847147485742819e1 + R * 0.237942127231588502e0 + pow(R - 0.625e1, 2) * (-0.380507423642071241e0) + pow(R - 0.625e1, 3) * 0.239588700782869035e0 : (R < 0.675e1 ? -0.613859217627715226e0 + R * 0.926112968073408149e-1 + pow(R - 0.65e1, 2) * (-0.200815898054919451e0) + pow(R - 0.65e1, 3) * 0.183721552422224654e0 : (R < 0.70e1 ? -0.178308495846575404e0 + R * 0.266511388590482054e-1 + pow(R - 0.675e1, 2) * (-0.630247337382509737e-1) + pow(R - 0.675e1, 3) * 0.568802435762325725e-1 : (R < 0.725e1 ? -0.354275395092642914e-1 + R * 0.580381766046632764e-2 + pow(R - 0.70e1, 2) * (-0.203645510560765408e-1) + pow(R - 0.70e1, 3) * 0.179826927288449095e-1 : (R < 0.75e1 ? 0.129569302736230341e-1 + R * (-0.100670298091352201e-2) + pow(R - 0.725e1, 2) * (-0.687753150944285865e-2) + pow(R - 0.725e1, 3) * 0.721448835638778714e-2 : (R < 0.775e1 ? 0.282851798440918074e-1 + R * (-0.309275216881224092e-2) + pow(R - 0.75e1, 2) * (-0.146666524215201808e-2) + pow(R - 0.75e1, 3) * 0.238023301360393031e-2 : (R < 0.80e1 ? 0.304552561227407273e-1 + R * (-0.337979109983751330e-2) + pow(R - 0.775e1, 2) * 0.318509518050929597e-3 + pow(R - 0.775e1, 3) * 0.650764037196495198e-3 : (R < 0.825e1 ? 0.282351470277016452e-1 + R * (-0.309851808383770563e-2) + pow(R - 0.80e1, 2) * 0.806582545948301022e-3 + pow(R - 0.80e1, 3) * 0.145545973610085446e-3 : (R < 0.85e1 ? 0.247355381626962259e-1 + R * (-0.266793694081166391e-2) + pow(R - 0.825e1, 2) * 0.915742026155865114e-3 + pow(R - 0.825e1, 3) * (-0.301522139636834462e-3) : (R < 0.875e1 ? 0.213767080547829259e-1 + R * (-0.226660132891563825e-2) + pow(R - 0.85e1, 2) * 0.689600421428239268e-3 + pow(R - 0.85e1, 3) * 0.102502264937249916e-3 : (R < 0.90e1 ? 0.182362400568506118e-1 + R * (-0.190258194352578396e-2) + pow(R - 0.875e1, 2) * 0.766477120131176708e-3 + pow(R - 0.875e1, 3) * (-0.219143121121647202e-4) : (R < 0.925e1 ? 0.148716358268310370e-1 + R * (-0.152345231698122643e-2) + pow(R - 0.90e1, 2) * 0.750041386047053168e-3 + pow(R - 0.90e1, 3) * (-0.238647774888590746e-3) : (R < 0.95e1 ? 0.118597478660811238e-1 + R * (-0.119317808174931070e-2) + pow(R - 0.925e1, 2) * 0.571055554880610101e-3 + pow(R - 0.925e1, 3) * 0.494141924665315071e-4 : (R < 0.100e2 ? 0.909567801900454387e-2 + R * (-0.898385143221531015e-3) + pow(R - 0.95e1, 2) * 0.608116199230508735e-3 + pow(R - 0.95e1, 3) * (-0.171277100774893320e-3) : (R < 0.105e2 ? 0.442971369472192240e-2 + R * (-0.418726769572192229e-3) + pow(R - 0.100e2, 2) * 0.351200548068168728e-3 + pow(R - 0.100e2, 3) * (-0.145212168247568307e-3) : (R < 0.110e2 ? 0.195530238094184742e-2 + R * (-0.176435347689699772e-3) + pow(R - 0.105e2, 2) * 0.133382295696816267e-3 + pow(R - 0.105e2, 3) * (-0.560957981548334422e-4) : (R < 0.120e2 ? 0.977221062209094335e-3 + R * (-0.851249006090085733e-4) + pow(R - 0.110e2, 2) * 0.492385984645661104e-4 + pow(R - 0.110e2, 3) * (-0.100549546755575411e-4) : (R < 0.140e2 ? 0.196656711168587719e-3 + R * (-0.168125677065489774e-4) + pow(R - 0.120e2, 2) * 0.190737344378934854e-4 + pow(R - 0.120e2, 3) * (-0.440943643430949854e-5) : (R < 0.160e2 ? -0.896676501123537420e-4 + R * 0.656913283331098086e-5 + pow(R - 0.140e2, 2) * (-0.738288416796350667e-5) + pow(R - 0.140e2, 3) * 0.175676399765400812e-5 : (R < 0.180e2 ? 0.300608243971191705e-4 + R * (-0.188123586669494814e-5) + pow(R - 0.160e2, 2) * 0.315769981796054207e-5 + pow(R - 0.160e2, 3) * (-0.792292147556533908e-6) : (R < 0.200e2 ? -0.198659965324386171e-4 + R * 0.124205763446881218e-5 + pow(R - 0.180e2, 2) * (-0.159605306737866180e-5) + pow(R - 0.180e2, 3) * 0.325065263072127827e-6 : (R < 0.250e2 ? 0.260188955556060191e-4 + R * (-0.124137147818030088e-5) + pow(R - 0.200e2, 2) * 0.354338511054105322e-6 + pow(R - 0.200e2, 3) * (-0.287456106484090279e-7) : -0.340245079685187867e-5 + R * 0.146092833730075154e-6 + pow(R - 0.250e2, 2) * (-0.768456486720300697e-7) + pow(R - 0.250e2, 3) * 0.808432994840300698e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3812691174e3 * (R - 0.300e2) * (R - 0.250e2) + 0.4066866812e4 * R + 0.2389299204e6 - 0.2033433406e3 * R * R + 0.75000e3 * (0.745595096e0 * R - 0.3084056327e2) * R) * pow(R, -6));
}

static double radcoeff_4_4_4_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.252176216699999990e-1 + pow(R - 0.475e1, 2) * 0.756920046928695367e1 + pow(R - 0.475e1, 3) * (-0.141483231891478134e2) : (R < 0.525e1 ? -0.538172308219130890e1 + R * 0.113178963667826182e1 + pow(R - 0.50e1, 2) * (-0.304204192257390682e1) + pow(R - 0.50e1, 3) * 0.277757648584343819e1 : (R < 0.55e1 ? -0.277267876256503953e0 + R * 0.131564266486953130e0 + pow(R - 0.525e1, 2) * (-0.958859558191328065e0) + pow(R - 0.525e1, 3) * 0.262468458574062258e0 : (R < 0.575e1 ? 0.203309765814340837e1 + R * (-0.298652676626074198e0) + pow(R - 0.55e1, 2) * (-0.762008214260781358e0) + pow(R - 0.55e1, 3) * 0.836871497460312530e0 : (R < 0.60e1 ? 0.328706979470027338e1 + R * (-0.522743377982656243e0) + pow(R - 0.575e1, 2) * (-0.134354591165546905e0) + pow(R - 0.575e1, 3) * 0.685449775584686893e0 : (R < 0.625e1 ? 0.292131556145980520e1 + R * (-0.461398840643300889e0) + pow(R - 0.60e1, 2) * 0.379732740522968237e0 + pow(R - 0.60e1, 3) * 0.204955845209414296e-1 : (R < 0.65e1 ? 0.173468602400587679e1 + R * (-0.267689548284140266e0) + pow(R - 0.625e1, 2) * 0.395104428913674310e0 + pow(R - 0.625e1, 3) * (-0.221167305988452495e0) : (R < 0.675e1 ? 0.741382571860896733e0 + R * (-0.111606203700137963e0) + pow(R - 0.65e1, 2) * 0.229228949422334932e0 + pow(R - 0.65e1, 3) * (-0.198817244407132138e0) : (R < 0.70e1 ? 0.230583232403827415e0 + R * (-0.342699623153077670e-1) + pow(R - 0.675e1, 2) * 0.801160161169858220e-1 + pow(R - 0.675e1, 3) * (-0.717617185590189305e-1) : (R < 0.725e1 ? 0.482504057574163897e-1 + R * (-0.766727648663091330e-2) + pow(R - 0.70e1, 2) * 0.262947271977216172e-1 + pow(R - 0.70e1, 3) * (-0.236147420927918551e-1) : (R < 0.75e1 ? -0.136922501972778082e-1 + R * 0.105232296983142183e-2 + pow(R - 0.725e1, 2) * 0.858367062812772502e-2 + pow(R - 0.725e1, 3) * (-0.926398974181365242e-2) : (R < 0.775e1 ? -0.324617999037891819e-1 + R * 0.360716020730522408e-2 + pow(R - 0.75e1, 2) * 0.163567832176748484e-2 + pow(R - 0.75e1, 3) * (-0.294721068395352795e-2) : (R < 0.80e1 ? -0.344612081473445186e-1 + R * 0.387239736494768023e-2 + pow(R - 0.775e1, 2) * (-0.574729691197661124e-3) + pow(R - 0.775e1, 3) * (-0.718187042372243423e-3) : (R < 0.825e1 ? -0.311321510972324307e-1 + R * 0.345037244890405385e-2 + pow(R - 0.80e1, 2) * (-0.111336997297684375e-2) + pow(R - 0.80e1, 3) * (-0.569413855748546194e-5) : (R < 0.85e1 ? -0.266003664323478557e-1 + R * 0.289261981143610399e-2 + pow(R - 0.825e1, 2) * (-0.111764057689495784e-2) + pow(R - 0.825e1, 3) * 0.235683980602168164e-3 : (R < 0.875e1 ? -0.222921852984880146e-1 + R * 0.237799026935153106e-2 + pow(R - 0.85e1, 2) * (-0.940877591443331713e-3) + pow(R - 0.85e1, 3) * 0.441530321488305157e-4 : (R < 0.90e1 ? -0.183063993626304961e-1 + R * 0.191583016715777123e-2 + pow(R - 0.875e1, 2) * (-0.907762817331708824e-3) + pow(R - 0.875e1, 3) * 0.253273298802495210e-3 : (R < 0.925e1 ? -0.147016431571564618e-1 + R * 0.150943750201738467e-2 + pow(R - 0.90e1, 2) * (-0.717807843229837403e-3) + pow(R - 0.90e1, 3) * 0.307285694411954177e-4 : (R < 0.95e1 ? -0.114794596011473828e-1 + R * 0.115629518717269000e-2 + pow(R - 0.925e1, 2) * (-0.694761416148940839e-3) + pow(R - 0.925e1, 3) * 0.213256481032722978e-3 : (R < 0.100e2 ? -0.859929643727262369e-2 + R * 0.848900069291855220e-3 + pow(R - 0.95e1, 2) * (-0.534819055374398606e-3) + pow(R - 0.95e1, 3) * 0.124014732781376169e-3 : (R < 0.105e2 ? -0.429941930163488684e-2 + R * 0.407092063503488720e-3 + pow(R - 0.100e2, 2) * (-0.348796956202334339e-3) + pow(R - 0.100e2, 3) * 0.154513531190713624e-3 : (R < 0.110e2 ? -0.192173036732899098e-2 + R * 0.174180255694189633e-3 + pow(R - 0.105e2, 2) * (-0.117026659416263876e-3) + pow(R - 0.105e2, 3) * 0.351433424557691379e-4 : (R < 0.120e2 ? -0.949233436057278566e-3 + R * 0.835111031197525988e-4 + pow(R - 0.110e2, 2) * (-0.643116457326101657e-4) + pow(R - 0.110e2, 3) * 0.180203779028575598e-4 : (R < 0.140e2 ? -0.100778810807259525e-3 + R * 0.894894536310496041e-5 + pow(R - 0.120e2, 2) * (-0.102505120240374828e-4) + pow(R - 0.120e2, 3) * 0.233500920349250065e-5 : (R < 0.160e2 ? 0.586463418838894379e-4 + R * (-0.403299229113495973e-5) + pow(R - 0.140e2, 2) * 0.375954319691752150e-5 + pow(R - 0.140e2, 3) * (-0.874739823925020756e-6) : (R < 0.180e2 ? -0.597412232895802794e-5 + R * 0.508302609434876780e-6 + pow(R - 0.160e2, 2) * (-0.148889574663260303e-5) + pow(R - 0.160e2, 3) * 0.372690806582582269e-6 : (R < 0.200e2 ? 0.177511006728818554e-4 + R * (-0.974990698104547492e-6) + pow(R - 0.180e2, 2) * 0.747249092862890687e-6 + pow(R - 0.180e2, 3) * (-0.143002554817808402e-6) : (R < 0.250e2 ? -0.586323766696627833e-5 + R * 0.297975015533313908e-6 + pow(R - 0.200e2, 2) * (-0.110766236043959868e-6) + pow(R - 0.200e2, 3) * 0.962564282505941673e-8 : 0.221429049907071208e-5 + R * (-0.877641330268284818e-7) + pow(R - 0.250e2, 2) * 0.336184063319313943e-7 + pow(R - 0.250e2, 3) * (-0.332954267011313945e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3080404598e2 * (R - 0.300e2) * (R - 0.250e2) + 0.3285780080e3 * R + 0.1930339452e5 - 0.1642890040e2 * R * R + 0.75000e3 * (0.602382282e-1 * R - 0.2491657530e1) * R) * pow(R, -6));
}

static double radcoeff_4_4_5_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.746611682099999896e-1 + pow(R - 0.475e1, 2) * (-0.102710653847309555e0) + pow(R - 0.475e1, 3) * 0.657466992292381897e-1 : (R < 0.525e1 ? 0.264408148610863092e0 + R * (-0.390278208181726177e-1) + pow(R - 0.50e1, 2) * (-0.534006294253809091e-1) + pow(R - 0.50e1, 3) * 0.149492447592285471e0 : (R < 0.55e1 ? 0.256426452908375069e0 + R * (-0.376983016073095326e-1) + pow(R - 0.525e1, 2) * 0.587187062688332082e-1 + pow(R - 0.525e1, 3) * (-0.151783215358380269e0) : (R < 0.575e1 ? 0.252774757909240866e0 + R * (-0.367983013525892411e-1) + pow(R - 0.55e1, 2) * (-0.551187052499520075e-1) + pow(R - 0.55e1, 3) * 0.158516506641235844e0 : (R < 0.60e1 ? 0.239372328118417743e0 + R * (-0.346358089823335172e-1) + pow(R - 0.575e1, 2) * 0.637686747309748753e-1 + pow(R - 0.575e1, 3) * (-0.898647785665631776e-1) : (R < 0.625e1 ? 0.151745584818460066e0 + R * (-0.196011175980766762e-1) + pow(R - 0.60e1, 2) * (-0.362990919394751707e-2) + pow(R - 0.60e1, 3) * (-0.332252069498308435e-2) : (R < 0.65e1 ? 0.166703846278498546e0 + R * (-0.220390448253597673e-1) + pow(R - 0.625e1, 2) * (-0.612179971518483045e-2) + pow(R - 0.625e1, 3) * 0.130264178264955597e-1 : (R < 0.675e1 ? 0.170544673923147705e0 + R * (-0.226574913404842607e-1) + pow(R - 0.65e1, 2) * 0.364801365468683976e-2 + pow(R - 0.65e1, 3) * 0.569907978900079971e-2 : (R < 0.70e1 ? 0.151336778955746543e0 + R * (-0.197649070527031907e-1) + pow(R - 0.675e1, 2) * 0.792232349643743998e-2 + pow(R - 0.675e1, 3) * (-0.144040662498706729e-3) : (R < 0.725e1 ? 0.124290594670920851e0 + R * (-0.158307529287029791e-1) + pow(R - 0.70e1, 2) * 0.781429299956340993e-2 + pow(R - 0.70e1, 3) * (-0.154504974700595682e-2) : (R < 0.75e1 ? 0.985283364575154502e-1 + R * (-0.122133032564848906e-1) + pow(R - 0.725e1, 2) * 0.665550568930894232e-2 + pow(R - 0.725e1, 3) * (-0.202352924547751292e-2) : (R < 0.775e1 ? 0.768001295851808985e-1 + R * (-0.926496214535745335e-2) + pow(R - 0.75e1, 2) * 0.513785875520080763e-2 + pow(R - 0.75e1, 3) * (-0.145294802308395610e-2) : (R < 0.80e1 ? 0.593006558641610074e-1 + R * (-0.696846052208529177e-2) + pow(R - 0.775e1, 2) * 0.404814773788784044e-2 + pow(R - 0.775e1, 3) * (-0.138963731818668381e-2) : (R < 0.825e1 ? 0.454238170404109992e-1 + R * (-0.520494365030137532e-2) + pow(R - 0.80e1, 2) * 0.300591974924782753e-2 + pow(R - 0.80e1, 3) * (-0.837081904169306419e-3) : (R < 0.85e1 ? 0.344940497248509489e-1 + R * (-0.385893663270920608e-2) + pow(R - 0.825e1, 2) * 0.237810832112084767e-2 + pow(R - 0.825e1, 3) * (-0.915656505136095756e-3) : (R < 0.875e1 ? 0.259807415523253052e-1 + R * (-0.284156806686180043e-2) + pow(R - 0.85e1, 2) * 0.169136594226877582e-2 + pow(R - 0.85e1, 3) * (-0.372002539286295057e-3) : (R < 0.90e1 ? 0.192912300526314369e-1 + R * (-0.206563557184359300e-2) + pow(R - 0.875e1, 2) * 0.141236403780405453e-2 + pow(R - 0.875e1, 3) * (-0.564935251318731909e-3) : (R < 0.925e1 ? 0.139683657581744503e-1 + R * (-0.146537891256382771e-2) + pow(R - 0.90e1, 2) * 0.988662599315005570e-3 + pow(R - 0.90e1, 3) * (-0.134487047438778574e-3) : (R < 0.95e1 ? 0.968874226158513742e-2 + R * (-0.996263934301095961e-3) + pow(R - 0.925e1, 2) * 0.887797313735921639e-3 + pow(R - 0.925e1, 3) * (-0.442673877326150403e-3) : (R < 0.100e2 ? 0.630878841810199060e-2 + R * (-0.635366629431788430e-3) + pow(R - 0.95e1, 2) * 0.555791905741308810e-3 + pow(R - 0.95e1, 3) * (-0.200868994555464042e-3) : (R < 0.105e2 ? 0.237122617201077600e-2 + R * (-0.230226469607077631e-3) + pow(R - 0.100e2, 2) * 0.254488413908112734e-3 + pow(R - 0.100e2, 3) * (-0.121895535867914886e-3) : (R < 0.110e2 ? 0.707410332426961289e-3 + R * (-0.671597075999010756e-4) + pow(R - 0.105e2, 2) * 0.716451101062404053e-4 + pow(R - 0.105e2, 3) * (-0.262712896528764789e-4) : (R < 0.120e2 ? 0.150679627216498491e-3 + R * (-0.152180647333180430e-4) + pow(R - 0.110e2, 2) * 0.322381756269256870e-4 + pow(R - 0.110e2, 3) * (-0.124577169436076440e-4) : (R < 0.140e2 ? -0.154778319176524757e-3 + R * 0.118851356897103956e-4 + pow(R - 0.120e2, 2) * (-0.513497520389724666e-5) + pow(R - 0.120e2, 3) * 0.824886538021024216e-6 : (R < 0.160e2 ? -0.197414546572317880e-4 + R * 0.124387333037369917e-5 + pow(R - 0.140e2, 2) * (-0.185655975771101758e-6) + pow(R - 0.140e2, 3) * 0.472793279212611520e-8 : (R < 0.180e2 ? -0.947203574461688834e-5 + R * 0.557984620794805532e-6 + pow(R - 0.160e2, 2) * (-0.157288379018345063e-6) + pow(R - 0.160e2, 3) * 0.129578142854711512e-7 : (R < 0.200e2 ? -0.147165134274742370e-5 + R * 0.843248761470790880e-7 + pow(R - 0.180e2, 2) * (-0.795414933055181524e-7) + pow(R - 0.180e2, 3) * 0.156764553534892989e-7 : (R < 0.250e2 ? 0.936564506462437906e-6 + R * (-0.457236328331218950e-7) + pow(R - 0.200e2, 2) * 0.145172388154176609e-7 + pow(R - 0.200e2, 3) * (-0.121417838895865664e-8) : -0.205002046328886806e-6 + R * 0.838537614915547203e-8 + pow(R - 0.250e2, 2) * (-0.369543701896218878e-8) + pow(R - 0.250e2, 3) * 0.376955617826218866e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.7069391936e1 * (R - 0.300e2) * (R - 0.250e2) + 0.7540840756e2 * R + 0.4429615756e4 - 0.3770420378e1 * R * R + 0.75000e3 * (0.1382367816e-1 * R - 0.5717812802e0) * R) * pow(R, -6));
}

static double radcoeff_4_4_6_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.963912854599999869e0 + R * 0.277555756156289135e-16 + pow(R - 0.475e1, 2) * 0.264759622606542733e1 + pow(R - 0.475e1, 3) * (-0.741838129466170848e1) : (R < 0.525e1 ? 0.134921730958178498e1 + R * (-0.671483797163570095e-1) + pow(R - 0.50e1, 2) * (-0.291618974493085492e1) + pow(R - 0.50e1, 3) * 0.293960610478512985e1 : (R < 0.55e1 ? 0.597421011695650606e1 + R * (-0.974067107534572596e0) + pow(R - 0.525e1, 2) * (-0.711485166342007536e0) + pow(R - 0.525e1, 3) * 0.115509799552119197e1 : (R < 0.575e1 ? 0.671318009979944108e1 + R * (-0.111322881654535299e1) + pow(R - 0.55e1, 2) * 0.154838330298886467e0 + pow(R - 0.55e1, 3) * 0.334136178730101208e0 : (R < 0.60e1 ? 0.592267760593308967e1 + R * (-0.973159117884015545e0) + pow(R - 0.575e1, 2) * 0.405440464346462359e0 + pow(R - 0.575e1, 3) * 0.654462319958399652e0 : (R < 0.625e1 ? 0.400565210571150665e1 + R * (-0.647727200718584473e0) + pow(R - 0.60e1, 2) * 0.896287204315262098e0 + pow(R - 0.60e1, 3) * (-0.442790405763696548e0) : (R < 0.65e1 ? 0.177274894913229164e1 + R * (-0.282606799641646644e0) + pow(R - 0.625e1, 2) * 0.564194399992489659e0 + pow(R - 0.625e1, 3) * (-0.393910515143612250e0) : (R < 0.675e1 ? 0.448302887686389262e0 + R * (-0.743678212348291151e-1) + pow(R - 0.65e1, 2) * 0.268761513634780458e0 + pow(R - 0.65e1, 3) * (-0.267664254941855861e0) : (R < 0.70e1 ? -0.107389307551501098e0 + R * 0.982588778096312593e-2 + pow(R - 0.675e1, 2) * 0.680133224283885202e-1 + pow(R - 0.675e1, 3) * (-0.787584458889640515e-1) : (R < 0.725e1 ? -0.239045243886836400e0 + R * 0.290653403909766281e-1 + pow(R - 0.70e1, 2) * 0.894448801166547632e-2 + pow(R - 0.70e1, 3) * (-0.216094431022879514e-1) : (R < 0.75e1 ? -0.241872293259695170e0 + R * 0.294858138151303691e-1 + pow(R - 0.725e1, 2) * (-0.726259431505048899e-2) + pow(R - 0.725e1, 3) * (-0.524925626188397706e-2) : (R < 0.775e1 ? -0.207791729733764086e0 + R * 0.248702811085018786e-1 + pow(R - 0.75e1, 2) * (-0.111995365114634718e-1) + pow(R - 0.75e1, 3) * 0.121276574982383473e-2 : (R < 0.80e1 ? -0.166836847549181377e0 + R * 0.194979064308621157e-1 + pow(R - 0.775e1, 2) * (-0.102899621990955956e-1) + pow(R - 0.775e1, 3) * 0.238900222258852041e-2 : (R < 0.825e1 ? -0.129866296564397327e0 + R * 0.148008632480496650e-1 + pow(R - 0.80e1, 2) * (-0.849821053215420522e-2) + pow(R - 0.80e1, 3) * 0.264266817582220221e-2 : (R < 0.85e1 ? -0.993889019217486236e-1 + R * 0.110472582649392258e-1 + pow(R - 0.825e1, 2) * (-0.651620940028755334e-2) + pow(R - 0.825e1, 3) * 0.222393371412260652e-2 : (R < 0.875e1 ? -0.756119204506442294e-1 + R * 0.820614113619343860e-2 + pow(R - 0.85e1, 2) * (-0.484825911469559823e-2) + pow(R - 0.85e1, 3) * 0.140985104768738480e-2 : (R < 0.90e1 ? -0.569948109710114587e-1 + R * 0.604635865028702382e-2 + pow(R - 0.875e1, 2) * (-0.379087082893005958e-2) + pow(R - 0.875e1, 3) * 0.119591751912786213e-2 : (R < 0.925e1 ? -0.421722462699262099e-1 + R * 0.437515777065846777e-2 + pow(R - 0.90e1, 2) * (-0.289393268958416288e-2) + pow(R - 0.90e1, 3) * 0.981198683801164529e-3 : (R < 0.95e1 ? -0.306551136114817241e-1 + R * 0.311216617907910525e-2 + pow(R - 0.925e1, 2) * (-0.215803367673328937e-2) + pow(R - 0.925e1, 3) * 0.663604353667476311e-3 : (R < 0.100e2 ? -0.217110071887385639e-1 + R * 0.215757515702511178e-2 + pow(R - 0.95e1, 2) * (-0.166033041148268214e-2) + pow(R - 0.95e1, 3) * 0.581687226064916572e-3 : (R < 0.105e2 ? -0.981272896901117311e-2 + R * 0.933510165091117235e-3 + pow(R - 0.100e2, 2) * (-0.787799572385307172e-3) + pow(R - 0.100e2, 3) * 0.323000829206145253e-3 : (R < 0.110e2 ? -0.424103977840940057e-2 + R * 0.387961214610419098e-3 + pow(R - 0.105e2, 2) * (-0.303298328576089265e-3) + pow(R - 0.105e2, 3) * 0.106096061910502097e-3 : (R < 0.120e2 ? -0.184261324923927060e-2 + R * 0.164234932467206422e-3 + pow(R - 0.110e2, 2) * (-0.144154235710336113e-3) + pow(R - 0.110e2, 3) * 0.425593850131296918e-4 : (R < 0.140e2 ? -0.166443033610792533e-4 + R * 0.360461608592327097e-5 + pow(R - 0.120e2, 2) * (-0.164760806709470303e-4) + pow(R - 0.120e2, 3) * 0.418442152399269673e-5 : (R < 0.160e2 ? 0.170604447691334777e-3 + R * (-0.120866483099524846e-4) + pow(R - 0.140e2, 2) * 0.863044847300915173e-5 + pow(R - 0.140e2, 3) * (-0.166275776501645487e-5) : (R < 0.180e2 ? -0.412750319261866432e-4 + R * 0.248205240188666514e-5 + pow(R - 0.160e2, 2) * (-0.134609811708957687e-5) + pow(R - 0.160e2, 3) * 0.236541664948122148e-6 : (R < 0.200e2 ? 0.105897372709517456e-5 + R * (-0.638400870941763582e-7) + pow(R - 0.180e2, 2) * 0.731518725991560520e-7 + pow(R - 0.180e2, 3) * (-0.147372735635339340e-7) : (R < 0.250e2 ? -0.108152112370081262e-5 + R * 0.519201205400406352e-7 + pow(R - 0.200e2, 2) * (-0.152717687820475554e-7) + pow(R - 0.200e2, 3) * 0.125015562520788559e-8 : 0.166854508146087279e-6 + R * (-0.703589538984349165e-8) + pow(R - 0.250e2, 2) * 0.348056559607072991e-8 + pow(R - 0.250e2, 3) * (-0.362524018020406324e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1379798813e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1471778616e3 * R - 0.8646929032e4 + 0.7358893080e1 * R * R + 0.75000e3 * (-0.2698304543e-1 * R + 0.1116122845e1) * R) * pow(R, -6));
}

static double radcoeff_4_4_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.851684879500000047e0 + pow(R - 0.475e1, 2) * (-0.101786064110561170e1) + pow(R - 0.475e1, 3) * 0.308484552122244660e1 : (R < 0.525e1 ? -0.121449153168201462e1 + R * 0.694782146764029163e-1 + pow(R - 0.50e1, 2) * 0.129577349981122336e1 + pow(R - 0.50e1, 3) * (-0.269146938067340358e0) : (R < 0.55e1 ? -0.427417502869553800e1 + R * 0.666899913694388280e0 + pow(R - 0.525e1, 2) * 0.109391329626071809e1 + pow(R - 0.525e1, 3) * (-0.138585027455308518e1) : (R < 0.575e1 ? -0.580656282730324058e1 + R * 0.954009635346043772e0 + pow(R - 0.55e1, 2) * 0.545255903459041721e-1 + pow(R - 0.55e1, 3) * (-0.468461749320318144e0) : (R < 0.60e1 ? -0.546217544149825862e1 + R * 0.893435852521436202e0 + pow(R - 0.575e1, 2) * (-0.296820721644334484e0) + pow(R - 0.575e1, 3) * (-0.597414907365640735e0) : (R < 0.625e1 ? -0.392750740880926807e1 + R * 0.633010196568211336e0 + pow(R - 0.60e1, 2) * (-0.744881902168565091e0) + pow(R - 0.60e1, 3) * 0.245536053982879171e0 : (R < 0.65e1 ? -0.193020764582574156e1 + R * 0.306607255605718665e0 + pow(R - 0.625e1, 2) * (-0.560729861681405706e0) + pow(R - 0.625e1, 3) * 0.356060133994124339e0 : (R < 0.675e1 ? -0.571266060427941591e0 + R * 0.930035998889141013e-1 + pow(R - 0.65e1, 2) * (-0.293684761185812437e0) + pow(R - 0.65e1, 3) * 0.272944467320624051e0 : (R < 0.70e1 ? 0.603841268492819536e-1 + R * (-0.266169308137510427e-2) + pow(R - 0.675e1, 2) * (-0.889764106953443851e-1) + pow(R - 0.675e1, 3) * 0.979771557633792450e-1 : (R < 0.725e1 ? 0.239176414733895837e0 + R * (-0.287791817234136875e-1) + pow(R - 0.70e1, 2) * (-0.154935438728099478e-1) + pow(R - 0.70e1, 3) * 0.294539221058587909e-1 : (R < 0.75e1 ? 0.254793456951033503e0 + R * (-0.310033432649701353e-1) + pow(R - 0.725e1, 2) * 0.659689770658414710e-2 + pow(R - 0.725e1, 3) * 0.698883709318559934e-2 : (R < 0.775e1 ? 0.220748545075293207e0 + R * (-0.263944874567057612e-1) + pow(R - 0.75e1, 2) * 0.118385255264733466e-1 + pow(R - 0.75e1, 3) * (-0.752065998601181675e-3) : (R < 0.80e1 ? 0.176695261378602780e0 + R * (-0.206162370682068108e-1) + pow(R - 0.775e1, 2) * 0.112744760275224603e-1 + pow(R - 0.775e1, 3) * (-0.313856861878086552e-2) : (R < 0.825e1 ? 0.136960824813735949e0 + R * (-0.155674806704669925e-1) + pow(R - 0.80e1, 2) * 0.892054956343681094e-2 + pow(R - 0.80e1, 3) * (-0.262681632627535192e-2) : (R < 0.85e1 ? 0.104743404711883037e0 + R * (-0.115997339499252176e-1) + pow(R - 0.825e1, 2) * 0.695043731873029678e-2 + pow(R - 0.825e1, 3) * (-0.247318374011771744e-2) : (R < 0.875e1 ? 0.795414415295731814e-1 + R * (-0.858823724183213968e-2) + pow(R - 0.85e1, 2) * 0.509554951364200870e-2 + pow(R - 0.85e1, 3) * (-0.160153408925378833e-2) : (R < 0.90e1 ? 0.601693771470294334e-1 + R * (-0.634075012674622119e-2) + pow(R - 0.875e1, 2) * 0.389439894670166745e-2 + pow(R - 0.875e1, 3) * (-0.123792387086711989e-2) : (R < 0.925e1 ? 0.449576357926467565e-1 + R * (-0.462566137918297288e-2) + pow(R - 0.90e1, 2) * 0.296595604355132754e-2 + pow(R - 0.90e1, 3) * (-0.102041625127773832e-2) : (R < 0.95e1 ? 0.331793017758274453e-1 + R * (-0.333401140452188561e-2) + pow(R - 0.925e1, 2) * 0.220064385509302369e-2 + pow(R - 0.925e1, 3) * (-0.704196980021925081e-3) : (R < 0.100e2 ? 0.241071314979301038e-1 + R * (-0.236572641072948456e-2) + pow(R - 0.95e1, 2) * 0.167249612007657985e-2 + pow(R - 0.95e1, 3) * (-0.571366531635221758e-3) : (R < 0.105e2 ? 0.120141224979932130e-1 + R * (-0.112175518937932114e-2) + pow(R - 0.100e2, 2) * 0.815446322623747215e-3 + pow(R - 0.100e2, 3) * (-0.310086621330209937e-3) : (R < 0.110e2 ? 0.605896900640892720e-2 + R * (-0.538873832753231216e-3) + pow(R - 0.105e2, 2) * 0.350316390628432309e-3 + pow(R - 0.105e2, 3) * (-0.113586311843939661e-3) : (R < 0.120e2 ? 0.321595659088529020e-2 + R * (-0.273747176007753694e-3) + pow(R - 0.110e2, 2) * 0.179936922862522817e-3 + pow(R - 0.110e2, 3) * (-0.489713471547690996e-4) : (R < 0.140e2 ? 0.791404515504184696e-3 + R * (-0.607873717470153993e-4) + pow(R - 0.120e2, 2) * 0.330228813982155249e-4 + pow(R - 0.120e2, 3) * (-0.623832128360391360e-5) : (R < 0.160e2 ? 0.723460881736036603e-4 + R * (-0.355570155740026218e-5) + pow(R - 0.140e2, 2) * (-0.440704630340795759e-5) + pow(R - 0.140e2, 3) * 0.115848781355404399e-5 : (R < 0.180e2 ? 0.123607108680136990e-3 + R * (-0.728203300838356214e-5) + pow(R - 0.160e2, 2) * 0.254388057791630676e-5 + pow(R - 0.160e2, 3) * (-0.313592503112262641e-6) : (R < 0.200e2 ? 0.158504700289787841e-4 + R * (-0.869620734065487972e-6) + pow(R - 0.180e2, 2) * 0.662325559242730909e-6 + pow(R - 0.180e2, 3) * (-0.126623681092493474e-6) : (R < 0.250e2 ? -0.510957846001028083e-5 + R * 0.260197329795514034e-6 + pow(R - 0.200e2, 2) * (-0.974165273122299063e-7) + pow(R - 0.200e2, 3) * 0.847879285942541901e-8 : 0.197125268124696290e-5 + R * (-0.780584788698785211e-7) + pow(R - 0.250e2, 2) * 0.297653655791514053e-7 + pow(R - 0.250e2, 3) * (-0.294487371063514088e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3019780349e2 * (R - 0.300e2) * (R - 0.250e2) + 0.3221094576e3 * R + 0.1892419076e5 - 0.1610547288e2 * R * R + 0.75000e3 * (0.590538961e-1 * R - 0.2442690639e1) * R) * pow(R, -6));
}

static double radcoeff_4_4_7_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.100585075300000004e1 + pow(R - 0.475e1, 2) * 0.100823642621003327e2 + pow(R - 0.475e1, 3) * (-0.185813111604013272e2) : (R < 0.525e1 ? -0.845196741587458433e1 + R * 0.155718628847491702e1 + pow(R - 0.50e1, 2) * (-0.385361910820066411e1) + pow(R - 0.50e1, 3) * 0.523174416280398269e1 : (R < 0.55e1 ? -0.364532060882674269e1 + R * 0.611328764900331945e0 + pow(R - 0.525e1, 2) * 0.701890139023232940e-1 + pow(R - 0.525e1, 3) * (-0.796788223614605551e0) : (R < 0.575e1 ? -0.302471554408065257e1 + R * 0.497025479923755065e0 + pow(R - 0.55e1, 2) * (-0.527402153808630869e0) + pow(R - 0.55e1, 3) * 0.357369006854442173e0 : (R < 0.60e1 ? -0.192110155627672352e1 + R * 0.300331091804647565e0 + pow(R - 0.575e1, 2) * (-0.259375398667799240e0) + pow(R - 0.575e1, 3) * 0.143891626596835687e0 : (R < 0.625e1 ? -0.131881609594592786e1 + R * 0.197623072457654647e0 + pow(R - 0.60e1, 2) * (-0.151456678720172461e0) + pow(R - 0.60e1, 3) * 0.927358717182154013e-1 : (R < 0.65e1 ? -0.962205869039586270e0 + R * 0.139282709044733805e0 + pow(R - 0.625e1, 2) * (-0.819047749315109097e-1) + pow(R - 0.625e1, 3) * 0.163274126103025163e-1 : (R < 0.675e1 ? -0.720778317242165456e0 + R * 0.101391711443410068e0 + pow(R - 0.65e1, 2) * (-0.696592154737840225e-1) + pow(R - 0.65e1, 3) * 0.223860887205748829e-1 : (R < 0.70e1 ? -0.518014776885974526e0 + R * 0.707594953416258443e-1 + pow(R - 0.675e1, 2) * (-0.528696489333528585e-1) + pow(R - 0.675e1, 3) * 0.195660008273977892e-1 : (R < 0.725e1 ? -0.361650016000605534e0 + R * 0.479932960300865075e-1 + pow(R - 0.70e1, 2) * (-0.381951483128045166e-1) + pow(R - 0.70e1, 3) * 0.157856980498339849e-1 : (R < 0.75e1 ? -0.246791831890703861e0 + R * 0.318555402580281213e-1 + pow(R - 0.725e1, 2) * (-0.263558747754290279e-1) + pow(R - 0.725e1, 3) * 0.113860725732661539e-1 : (R < 0.775e1 ? -0.165438300828507606e0 + R * 0.208124914778010130e-1 + pow(R - 0.75e1, 2) * (-0.178163203454794125e-1) + pow(R - 0.75e1, 3) * 0.778431482510139917e-2 : (R < 0.80e1 ? -0.108703532072450593e0 + R * 0.133638903347678174e-1 + pow(R - 0.775e1, 2) * (-0.119780842266533627e-1) + pow(R - 0.775e1, 3) * 0.541894844632835344e-2 : (R < 0.825e1 ? -0.695835770300216316e-1 + R * 0.839090105512770371e-2 + pow(R - 0.80e1, 2) * (-0.791387289190709740e-2) + pow(R - 0.80e1, 3) * 0.364727142158511805e-2 : (R < 0.85e1 ? -0.430183527708512606e-1 + R * 0.511782800072136529e-2 + pow(R - 0.825e1, 2) * (-0.517841932571825887e-2) + pow(R - 0.825e1, 3) * 0.232554982253119994e-2 : (R < 0.875e1 ? -0.250037301580881034e-1 + R * 0.296465892958683568e-2 + pow(R - 0.85e1, 2) * (-0.343425695881985869e-2) + pow(R - 0.85e1, 3) * 0.165893769789006093e-2 : (R < 0.90e1 ? -0.128892707822488139e-1 + R * 0.155858126853129298e-2 + pow(R - 0.875e1, 2) * (-0.219005368540231300e-2) + pow(R - 0.875e1, 3) * 0.103726334750856128e-2 : (R < 0.925e1 ? -0.490508221239192681e-2 + R * 0.658041303487991950e-3 + pow(R - 0.90e1, 2) * (-0.141210617477089198e-2) + pow(R - 0.90e1, 3) * 0.772956931275696956e-3 : (R < 0.95e1 ? 0.209132484370162797e-3 + R * 0.969176407167391660e-4 + pow(R - 0.925e1, 2) * (-0.832388476314119209e-3) + pow(R - 0.925e1, 3) * 0.451880613788650104e-3 : (R < 0.100e2 ? 0.331310175837201161e-2 + R * (-0.234548982354948585e-3) + pow(R - 0.95e1, 2) * (-0.493478015972631631e-3) + pow(R - 0.95e1, 3) * 0.334573250165057516e-3 : (R < 0.105e2 ? 0.565703469413786873e-2 + R * (-0.477097060703786944e-3) + pow(R - 0.100e2, 2) * 0.838185927495470738e-5 + pow(R - 0.100e2, 3) * 0.598181290652384523e-4 : (R < 0.110e2 ? 0.510753013631398689e-2 + R * (-0.423851604629903482e-3) + pow(R - 0.105e2, 2) * 0.981090528728123892e-4 + pow(R - 0.105e2, 3) * 0.231275597398916547e-5 : (R < 0.120e2 ? 0.403406667564259157e-2 + R * (-0.324007984776599205e-3) + pow(R - 0.110e2, 2) * 0.101578186833796137e-3 + pow(R - 0.110e2, 3) * (-0.154941764571969287e-4) : (R < 0.140e2 ? 0.224006455446717264e-2 + R * (-0.167334140480597716e-3) + pow(R - 0.120e2, 2) * 0.550956574622053514e-4 + pow(R - 0.120e2, 3) * (-0.727504433595324602e-5) : (R < 0.160e2 ? 0.539097460165013833e-3 + R * (-0.342520426632152763e-4) + pow(R - 0.140e2, 2) * 0.114453914464858702e-4 + pow(R - 0.140e2, 3) * (-0.199524844618911594e-5) : (R < 0.180e2 ? 0.219499687474658967e-3 + R * (-0.124134582315411850e-4) + pow(R - 0.160e2, 2) * (-0.526099230648825853e-6) + pow(R - 0.160e2, 3) * 0.780200504459709225e-6 : (R < 0.200e2 ? 0.929927302305596614e-4 + R * (-0.515544910061998114e-5) + pow(R - 0.180e2, 2) * 0.415510379610942908e-5 + pow(R - 0.180e2, 3) * (-0.801382760899719137e-6) : (R < 0.250e2 ? -0.368743577450220619e-4 + R * 0.184837295302110318e-5 + pow(R - 0.200e2, 2) * (-0.653192769288886278e-6) + pow(R - 0.200e2, 3) * 0.561150267337331038e-7 : 0.118927185609444011e-4 + R * (-0.474927734837776006e-6) + pow(R - 0.250e2, 2) * 0.188532631717110398e-6 + pow(R - 0.250e2, 3) * (-0.188220252755110379e-7))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2979242093e2 * (R - 0.300e2) * (R - 0.250e2) + 0.3177849000e3 * R + 0.1867027796e5 - 0.1588924500e2 * R * R + 0.75000e3 * (0.582613556e-1 * R - 0.2409912308e1) * R) * pow(R, -6));
}

static double radcoeff_4_4_8_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.792948786399999994e0 + pow(R - 0.475e1, 2) * 0.532639437903291380e0 + pow(R - 0.475e1, 3) * (-0.555028887613165378e0) : (R < 0.525e1 ? 0.630741227911424396e-2 + R * 0.162251802524177174e0 + pow(R - 0.50e1, 2) * 0.116367772193417290e0 + pow(R - 0.50e1, 3) * 0.103574198443949550e1 : (R < 0.55e1 ? -0.129526005139227918e1 + R * 0.414637310703291295e0 + pow(R - 0.525e1, 2) * 0.893174260523039054e0 + pow(R - 0.525e1, 3) * (-0.274496271094481692e1) : (R < 0.575e1 ? -0.907813123244617159e0 + R * 0.346543932662657650e0 + pow(R - 0.55e1, 2) * (-0.116554777268557364e1) + pow(R - 0.55e1, 3) * 0.930027726539771837e0 : (R < 0.60e1 ? 0.138213552798505090e1 + R * (-0.618497549539218927e-1) + pow(R - 0.575e1, 2) * (-0.468026977780744757e0) + pow(R - 0.575e1, 3) * (-0.684894953614270552e0) : (R < 0.625e1 ? 0.351677011438182063e1 + R * (-0.424281047646970111e0) + pow(R - 0.60e1, 2) * (-0.981698192991447671e0) + pow(R - 0.60e1, 3) * 0.102173042391731128e1 : (R < 0.65e1 ? 0.534184502776373726e1 + R * (-0.723555689658197942e0) + pow(R - 0.625e1, 2) * (-0.215400375053464072e0) + pow(R - 0.625e1, 3) * 0.493220925145022915e0 : (R < 0.675e1 ? 0.543502729768154857e1 + R * (-0.738776953720238216e0) + pow(R - 0.65e1, 2) * 0.154515318805303115e0 + pow(R - 0.65e1, 3) * 0.232870854702598967e0 : (R < 0.70e1 ? 0.463210673576073351e1 + R * (-0.617856009060849365e0) + pow(R - 0.675e1, 2) * 0.329168459832252347e0 + pow(R - 0.675e1, 3) * (-0.432828207554195182e-1) : (R < 0.725e1 ? 0.355672256325455072e1 + R * (-0.461387308036364352e0) + pow(R - 0.70e1, 2) * 0.296706344265687705e0 + pow(R - 0.70e1, 3) * (-0.915056452809209359e-1) : (R < 0.75e1 ? 0.262266692265427537e1 + R * (-0.330191444393693190e0) + pow(R - 0.725e1, 2) * 0.228077110304996999e0 + pow(R - 0.725e1, 3) * (-0.832721213208971883e-1) : (R < 0.775e1 ? 0.189743287211647194e1 + R * (-0.231766411988862914e0) + pow(R - 0.75e1, 2) * 0.165623019314324105e0 + pow(R - 0.75e1, 3) * (-0.648843590354899608e-1) : (R < 0.80e1 ? 0.135926637709412823e1 + R * (-0.161120719650855254e0) + pow(R - 0.775e1, 2) * 0.116959750037706631e0 + pow(R - 0.775e1, 3) * (-0.475231574171425045e-1) : (R < 0.825e1 ? 0.969279548111729117e0 + R * (-0.111551436647716135e0) + pow(R - 0.80e1, 2) * 0.813173819748497506e-1 + pow(R - 0.80e1, 3) * (-0.335435968959408928e-1) : (R < 0.85e1 ? 0.690291316585811443e0 + R * (-0.771821700782801823e-1) + pow(R - 0.825e1, 2) * 0.561596843028940793e-1 + pow(R - 0.825e1, 3) * (-0.231259967590933257e-1) : (R < 0.875e1 ? 0.491618352202886633e0 + R * (-0.534384523191631308e-1) + pow(R - 0.85e1, 2) * 0.388151867335740849e-1 + pow(R - 0.85e1, 3) * (-0.158572480676862221e-1) : (R < 0.90e1 ? 0.349995887524338523e0 + R * (-0.370040929650672645e-1) + pow(R - 0.875e1, 2) * 0.269222506828094184e-1 + pow(R - 0.875e1, 3) * (-0.110792823301614947e-1) : (R < 0.925e1 ? 0.249051575265110486e0 + R * (-0.256203330605678341e-1) + pow(R - 0.90e1, 2) * 0.186127889351882965e-1 + pow(R - 0.90e1, 3) * (-0.741859989166784167e-2) : (R < 0.95e1 ? 0.176881444312118025e0 + R * (-0.177049260726614074e-1) + pow(R - 0.925e1, 2) * 0.130488390164374152e-1 + pow(R - 0.925e1, 3) * (-0.566597256716715614e-2) : (R < 0.100e2 ? 0.125718994236472120e0 + R * (-0.122428764207865391e-1) + pow(R - 0.95e1, 2) * 0.879935959106204792e-2 + pow(R - 0.95e1, 3) * (-0.321955915497793921e-2) : (R < 0.105e2 ? 0.636694869915794548e-1 + R * (-0.585818619595794565e-2) + pow(R - 0.100e2, 2) * 0.397002085859513888e-2 + pow(R - 0.100e2, 3) * (-0.144461836535849557e-2) : (R < 0.110e2 ? 0.341725655225076225e-1 + R * (-0.297162911138167856e-2) + pow(R - 0.105e2, 2) * 0.180309331055739553e-2 + pow(R - 0.105e2, 3) * (-0.623775631588077001e-3) : (R < 0.120e2 ? 0.198574894406687505e-1 + R * (-0.163636752451534078e-2) + pow(R - 0.110e2, 2) * 0.867429863175280024e-3 + pow(R - 0.110e2, 3) * (-0.224164502559939089e-3) : (R < 0.140e2 ? 0.775236017723517773e-2 + R * (-0.574001305844598110e-3) + pow(R - 0.120e2, 2) * 0.194936355495462730e-3 + pow(R - 0.120e2, 3) * (-0.279533310490818530e-4) : (R < 0.160e2 ? 0.208820265932421149e-2 + R * (-0.129695856451729399e-3) + pow(R - 0.140e2, 2) * 0.272163692009715918e-4 + pow(R - 0.140e2, 3) * (-0.365183111255344128e-5) : (R < 0.180e2 ? 0.112715743193574948e-2 + R * (-0.646523529984843423e-4) + pow(R - 0.160e2, 2) * 0.530538252565094152e-5 + pow(R - 0.160e2, 3) * 0.190811309179561524e-5 : (R < 0.200e2 ? 0.369503897102597696e-3 + R * (-0.205334657943332035e-4) + pow(R - 0.180e2, 2) * 0.167540610764246346e-4 + pow(R - 0.180e2, 3) * (-0.323724166371651633e-5) : (R < 0.250e2 ? -0.152764678723442686e-3 + R * 0.763587854676713563e-5 + pow(R - 0.200e2, 2) * (-0.266938890587446422e-5) + pow(R - 0.200e2, 3) * 0.228740465629807419e-6 : 0.475520102461487659e-4 + R * (-0.190247558974195053e-5) + pow(R - 0.250e2, 2) * 0.761718078572646878e-6 + pow(R - 0.250e2, 3) * (-0.761876137760513408e-7))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1507449219e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1607940400e3 * R - 0.9446916104e4 + 0.8039702000e1 * R * R + 0.75000e3 * (-0.2947941446e-1 * R + 0.1219382696e1) * R) * pow(R, -6));
}

static double radcoeff_4_4_8_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.397098690400000010e0 + pow(R - 0.475e1, 2) * (-0.315078102949321126e1) + pow(R - 0.475e1, 3) * 0.524429558677284380e1 : (R < 0.525e1 ? 0.244834507493348630e1 + R * (-0.592085092226697252e0) + pow(R - 0.50e1, 2) * 0.782440660586421921e0 + pow(R - 0.50e1, 3) * (-0.178589086271853104e1) : (R < 0.55e1 ? 0.217342265543935742e1 + R * (-0.535719298693210888e0) + pow(R - 0.525e1, 2) * (-0.556977486452476467e0) + pow(R - 0.525e1, 3) * 0.179295567850128035e1 : (R < 0.575e1 ? 0.184932903930252457e1 + R * (-0.478028852200459042e0) + pow(R - 0.55e1, 2) * 0.787739272423483849e0 + pow(R - 0.55e1, 3) * (-0.152470852886590180e0) : (R < 0.60e1 ? -0.204187383196521299e0 + R * (-0.112747500904952822e0) + pow(R - 0.575e1, 2) * 0.673386132758541200e0 + pow(R - 0.575e1, 3) * 0.214088891445080087e0 : (R < 0.625e1 ? -0.241976401212162218e1 + R * 0.264087232620270340e0 + pow(R - 0.60e1, 2) * 0.833952801342351280e0 + pow(R - 0.60e1, 3) * (-0.684741141693730793e0) : (R < 0.65e1 ? -0.418201252114919697e1 + R * 0.552674669223871429e0 + pow(R - 0.625e1, 2) * 0.320396945072053185e0 + pow(R - 0.625e1, 3) * (-0.492175422270156648e0) : (R < 0.675e1 ? -0.461112922864758357e1 + R * 0.620590250084243622e0 + pow(R - 0.65e1, 2) * (-0.487346216305642940e-1) + pow(R - 0.65e1, 3) * (-0.258827306825641368e0) : (R < 0.70e1 ? -0.412616166096428838e1 + R * 0.547692819239153805e0 + pow(R - 0.675e1, 2) * (-0.242855101749795355e0) + pow(R - 0.675e1, 3) * (-0.143144992272792315e-1) : (R < 0.725e1 ? -0.327278313251398867e1 + R * 0.423581299759141272e0 + pow(R - 0.70e1, 2) * (-0.253590976170254778e0) + pow(R - 0.70e1, 3) * 0.633647149347592864e-1 : (R < 0.75e1 ? -0.245451161560103870e1 + R * 0.308666695724281182e0 + pow(R - 0.725e1, 2) * (-0.206067439969185306e0) + pow(R - 0.725e1, 3) * 0.698274282882419550e-1 : (R < 0.775e1 ? -0.179174169817800433e1 + R * 0.218725618543733930e0 + pow(R - 0.75e1, 2) * (-0.153696868753003840e0) + pow(R - 0.75e1, 3) * 0.588956839122722481e-1 : (R < 0.80e1 ? -0.129043493168106860e1 + R * 0.152920124900783050e0 + pow(R - 0.775e1, 2) * (-0.109525105818799651e0) + pow(R - 0.775e1, 3) * 0.439180274226699252e-1 : (R < 0.825e1 ? -0.924370649475070638e0 + R * 0.106392202133133829e0 + pow(R - 0.80e1, 2) * (-0.765865852517972068e-1) + pow(R - 0.80e1, 3) * 0.311463971170475480e-1 : (R < 0.85e1 ? -0.660930567475123687e0 + R * 0.739388589666816476e-1 + pow(R - 0.825e1, 2) * (-0.532267874140115449e-1) + pow(R - 0.825e1, 3) * 0.216060020291399327e-1 : (R < 0.875e1 ? -0.472140367131186622e0 + R * 0.513765906401396077e-1 + pow(R - 0.85e1, 2) * (-0.370222858921565937e-1) + pow(R - 0.85e1, 3) * 0.150855422863925698e-1 : (R < 0.90e1 ? -0.336995765436649275e0 + R * 0.356939868727599169e-1 + pow(R - 0.875e1, 2) * (-0.257081291773621663e-1) + pow(R - 0.875e1, 3) * 0.102655657852899432e-1 : (R < 0.925e1 ? -0.240078685009386311e0 + R * 0.247647158688207025e-1 + pow(R - 0.90e1, 2) * (-0.180089548383947085e-1) + pow(R - 0.90e1, 3) * 0.726555073244762595e-2 : (R < 0.95e1 ? -0.170400493880604825e0 + R * 0.171225292119572790e-1 + pow(R - 0.925e1, 2) * (-0.125597917890589890e-1) + pow(R - 0.925e1, 3) * 0.535293208491948586e-2 : (R < 0.100e2 ? -0.120977740581826781e0 + R * 0.118463080833501877e-1 + pow(R - 0.95e1, 2) * (-0.854509272536937460e-2) + pow(R - 0.95e1, 3) * 0.309121014133799952e-2 : (R < 0.105e2 ? -0.604607613018431217e-1 + R * 0.561962296398431198e-2 + pow(R - 0.100e2, 2) * (-0.390827751336237511e-2) + pow(R - 0.100e2, 3) * 0.138749645878750126e-2 : (R < 0.110e2 ? -0.311540143454819146e-1 + R * 0.275196779471256325e-2 + pow(R - 0.105e2, 2) * (-0.182703282518112344e-2) + pow(R - 0.105e2, 3) * 0.650759343511994885e-3 : (R < 0.120e2 ? -0.168008311408197955e-1 + R * 0.141300447716543589e-2 + pow(R - 0.110e2, 2) * (-0.850893809913131054e-3) + pow(R - 0.110e2, 3) * 0.229110849147695037e-3 : (R < 0.140e2 ? -0.524915323298710736e-2 + R * 0.398549404782258922e-3 + pow(R - 0.120e2, 2) * (-0.163561262470045916e-3) + pow(R - 0.120e2, 3) * 0.260067969144582120e-4 : (R < 0.160e2 ? -0.905055090858034408e-3 + R * 0.563859178755738832e-4 + pow(R - 0.140e2, 2) * (-0.752048098329662541e-5) + pow(R - 0.140e2, 3) * 0.130517565254842079e-6 : (R < 0.180e2 ? -0.477841463867127822e-3 + R * 0.278702047254454882e-4 + pow(R - 0.160e2, 2) * (-0.673737559176757294e-5) + pow(R - 0.160e2, 3) * 0.380684335772413891e-6 : (R < 0.200e2 ? -0.988822654640949264e-4 + R * 0.548891438764416249e-5 + pow(R - 0.180e2, 2) * (-0.445326957713308948e-5) + pow(R - 0.180e2, 3) * 0.859741058105503956e-6 : (R < 0.250e2 ? 0.401062969175429259e-4 + R * (-0.200727122362214627e-5) + pow(R - 0.200e2, 2) * 0.705176771499934680e-6 + pow(R - 0.200e2, 3) * (-0.604971297847010703e-7) : -0.126884995467154993e-4 + R * 0.507211757524619988e-6 + pow(R - 0.250e2, 2) * (-0.202280175270581348e-6) + pow(R - 0.250e2, 3) * 0.202148893587314634e-7)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1252081757e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1335553712e3 * R - 0.7846349516e4 + 0.6677768560e1 * R * R + 0.75000e3 * (-0.2448509701e-1 * R + 0.1012791907e1) * R) * pow(R, -6));
}

static double radcoeff_4_6_2_1_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.281452445599999990e0 + pow(R - 0.475e1, 2) * (-0.468137080671785544e1) + pow(R - 0.475e1, 3) * 0.832648563967142152e1 : (R < 0.525e1 ? 0.401631483790268096e1 + R * (-0.779469345920536183e0) + pow(R - 0.50e1, 2) * 0.156349342303571093e1 + pow(R - 0.50e1, 3) * (-0.182399233021426466e1) : (R < 0.55e1 ? 0.177685551131474062e1 + R * (-0.339721196317855356e0) + pow(R - 0.525e1, 2) * 0.195499175375012380e0 + pow(R - 0.525e1, 3) * 0.540063979425636220e0 : (R < 0.575e1 ? 0.702948998394232860e0 + R * (-0.140709612488042340e0) + pow(R - 0.55e1, 2) * 0.600547159944239572e0 + pow(R - 0.55e1, 3) * (-0.498563129888280554e0) : (R < 0.60e1 ? -0.456366563442642703e0 + R * 0.660833806300248211e-1 + pow(R - 0.575e1, 2) * 0.226624812528029129e0 + pow(R - 0.575e1, 3) * (-0.307111754272513582e0) : (R < 0.625e1 ? -0.781374847847658538e0 + R * 0.121812332967943082e0 + pow(R - 0.60e1, 2) * (-0.370900317635606278e-2) + pow(R - 0.60e1, 3) * (-0.165595449821665186e0) : (R < 0.65e1 ? -0.578546286763767736e0 + R * 0.889086845382028312e-1 + pow(R - 0.625e1, 2) * (-0.127905590542604947e0) + pow(R - 0.625e1, 3) * 0.624611829991743167e-1 : (R < 0.675e1 ? -0.245995827705096037e0 + R * 0.366673610792455432e-1 + pow(R - 0.65e1, 2) * (-0.810597032932242056e-1) + pow(R - 0.65e1, 3) * 0.771897039369680571e-1 : (R < 0.70e1 ? -0.739726904675009483e-1 + R * 0.106105789208149545e-1 + pow(R - 0.675e1, 2) * (-0.231674253404981559e-1) + pow(R - 0.675e1, 3) * 0.232533528049533381e-1 : (R < 0.725e1 ? -0.244913577789623929e-1 + R * 0.338686990149462790e-2 + pow(R - 0.70e1, 2) * (-0.572741073678315234e-2) + pow(R - 0.70e1, 3) * 0.434315237601856467e-2 : (R < 0.75e1 ? -0.992356803444736056e-2 + R * 0.133750560360653250e-2 + pow(R - 0.725e1, 2) * (-0.247004645476922883e-2) + pow(R - 0.725e1, 3) * 0.196915161737239164e-2 : (R < 0.775e1 ? -0.355362320036431206e-2 + R * 0.471698304479241620e-3 + pow(R - 0.75e1, 2) * (-0.993182741739935104e-3) + pow(R - 0.75e1, 3) * 0.676245866811874029e-3 : (R < 0.80e1 ? -0.739217431022878651e-3 + R * 0.101903033636500476e-3 + pow(R - 0.775e1, 2) * (-0.485998341631029582e-3) + pow(R - 0.775e1, 3) * 0.520677483060110672e-3 : (R < 0.825e1 ? 0.401520400231948431e-3 + R * (-0.434691091052435573e-4) + pow(R - 0.80e1, 2) * (-0.954902293359465639e-4) + pow(R - 0.80e1, 3) * 0.222022587507683124e-3 : (R < 0.85e1 ? 0.449477369788091633e-3 + R * (-0.495849886155262534e-4) + pow(R - 0.825e1, 2) * 0.710267112948157793e-4 + pow(R - 0.825e1, 3) * (-0.134202165250843052e-3) : (R < 0.875e1 ? 0.363840808277537226e-3 + R * (-0.392345389526514395e-4) + pow(R - 0.85e1, 2) * (-0.296249126433165135e-4) + pow(R - 0.85e1, 3) * 0.275113243415689088e-3 : (R < 0.90e1 ? 0.445392235013449152e-4 + R * (-0.246326213386799061e-5) + pow(R - 0.875e1, 2) * 0.176710019918450306e-3 + pow(R - 0.875e1, 3) * (-0.309326261211913386e-3) : (R < 0.925e1 ? -0.222456646923110675e-3 + R * 0.278930738481234057e-4 + pow(R - 0.90e1, 2) * (-0.552846759904847271e-4) + pow(R - 0.90e1, 3) * 0.102663035351964401e-3 : (R < 0.95e1 ? -0.146672404727712913e-3 + R * 0.195000549813743690e-4 + pow(R - 0.925e1, 2) * 0.217126005234885802e-4 + pow(R - 0.925e1, 3) * (-0.156293878275944216e-3) : (R < 0.100e2 ? 0.275061591493984097e-4 + R * 0.105125306637911522e-5 + pow(R - 0.95e1, 2) * (-0.955078081834695886e-4) + pow(R - 0.95e1, 3) * 0.792444979414227025e-4 : (R < 0.105e2 ? 0.374279116620234397e-3 + R * (-0.350231816610234431e-4) + pow(R - 0.100e2, 2) * 0.233589387286644821e-4 + pow(R - 0.100e2, 3) * (-0.106640196132351895e-4) : (R < 0.110e2 ? 0.217496146653996177e-3 + R * (-0.196622576422853502e-4) + pow(R - 0.105e2, 2) * 0.736290930881169785e-5 + pow(R - 0.105e2, 3) * 0.359473864751800827e-5 : (R < 0.120e2 ? 0.109137620073186599e-3 + R * (-0.960329434783514564e-5) + pow(R - 0.110e2, 2) * 0.127550172800887105e-4 + pow(R - 0.110e2, 3) * (-0.477292932625356476e-5) : (R < 0.140e2 ? -0.171752509499789646e-4 + R * 0.158795223358158037e-5 + pow(R - 0.120e2, 2) * (-0.156377069867198424e-5) + pow(R - 0.120e2, 3) * 0.321978415190597021e-6 : (R < 0.160e2 ? 0.126242789504686960e-4 + R * (-0.803389578819192563e-6) + pow(R - 0.140e2, 2) * 0.368099792471597724e-6 + pow(R - 0.140e2, 3) * (-0.593043212185007242e-7) : (R < 0.180e2 ? 0.145028650637696701e-5 + R * (-0.426422635548104385e-7) + pow(R - 0.160e2, 2) * 0.122738651605933436e-7 + pow(R - 0.160e2, 3) * (-0.107120740165940643e-7) : (R < 0.200e2 ? 0.284377507090818468e-5 + R * (-0.122091691111565829e-6) + pow(R - 0.180e2, 2) * (-0.519985789389710407e-7) + pow(R - 0.180e2, 3) * 0.143864496348769803e-7 : (R < 0.250e2 ? 0.345801075497852466e-5 + R * (-0.157448611248926216e-6) + pow(R - 0.200e2, 2) * 0.343201188702908476e-7 + pow(R - 0.200e2, 3) * (-0.251990797850112012e-8) : 0.145822971540044486e-6 + R * (-0.324052093360177982e-8) + pow(R - 0.250e2, 2) * (-0.347850080722595554e-8) + pow(R - 0.250e2, 3) * 0.451539497189262219e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.9889232960e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1054851344e4 * R + 0.6197241522e5 - 0.5274256720e2 * R * R + 0.75000e3 * (0.1933892202e0 * R - 0.799927876e1) * R) * pow(R, -6));
}

static double radcoeff_4_6_2_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.283829633700000472e0 + R * 0.111022302462515654e-15 + pow(R - 0.475e1, 2) * 0.361646713768613814e1 + pow(R - 0.475e1, 3) * (-0.586016971554455246e1) : (R < 0.525e1 ? -0.369662432529232676e1 + R * 0.709451747178465375e0 + pow(R - 0.50e1, 2) * (-0.778660148972276978e0) + pow(R - 0.50e1, 3) * 0.625968532233662112e0 : (R < 0.55e1 ? -0.230771470920222743e1 + R * 0.437490772486138546e0 + pow(R - 0.525e1, 2) * (-0.309183749797030338e0) + pow(R - 0.525e1, 3) * (-0.449266565070095325e0) : (R < 0.575e1 ? -0.102049702647339213e1 + R * 0.198661416636980420e0 + pow(R - 0.55e1, 2) * (-0.646133673599601832e0) + pow(R - 0.55e1, 3) * 0.429741164846720702e0 : (R < 0.60e1 ? 0.340153942875847271e0 + R * (-0.438289517540603885e-1) + pow(R - 0.575e1, 2) * (-0.323827799964561291e0) + pow(R - 0.575e1, 3) * 0.379542507923211148e0 : (R < 0.625e1 ? 0.870343135544433655e0 + R * (-0.134578631500738927e0) + pow(R - 0.60e1, 2) * (-0.391709190221529030e-1) + pow(R - 0.60e1, 3) * 0.236236908420434544e0 : (R < 0.65e1 ? 0.717155149688649352e0 + R * (-0.109869670682983894e0) + pow(R - 0.625e1, 2) * 0.138006762293172991e0 + pow(R - 0.625e1, 3) * (-0.471756814449493592e-1) : (R < 0.675e1 ? 0.334016836617615276e0 + R * (-0.497117298073254249e-1) + pow(R - 0.65e1, 2) * 0.102625001209460970e0 + pow(R - 0.65e1, 3) * (-0.923391797606370607e-1) : (R < 0.70e1 ? 0.109495494812072158e0 + R * (-0.157128254077143932e-1) + pow(R - 0.675e1, 2) * 0.333706163889831639e-1 + pow(R - 0.675e1, 3) * (-0.322727282165023444e-1) : (R < 0.725e1 ? 0.366376953807190237e-1 + R * (-0.507865375381700342e-2) + pow(R - 0.70e1, 2) * 0.916607022660640390e-2 + pow(R - 0.70e1, 3) * (-0.712568007095356216e-2) : (R < 0.75e1 ? 0.135587027937775582e-1 + R * (-0.183168365381759421e-2) + pow(R - 0.725e1, 2) * 0.382181017339123250e-2 + pow(R - 0.725e1, 3) * (-0.320667180048342122e-2) : (R < 0.775e1 ? 0.392505575198064637e-2 + R * (-0.522029529712619497e-3) + pow(R - 0.75e1, 2) * 0.141680632302866659e-2 + pow(R - 0.75e1, 3) * (-0.125499128775275479e-2) : (R < 0.80e1 ? 0.327531621582439916e-3 + R * (-0.489372346519277265e-4) + pow(R - 0.775e1, 2) * 0.475562857214100333e-3 + pow(R - 0.775e1, 3) * (-0.600515454905557701e-3) : (R < 0.825e1 ? -0.653607000322642905e-3 + R * 0.762475461603303575e-4 + pow(R - 0.80e1, 2) * 0.251762660349320438e-4 + pow(R - 0.80e1, 3) * (-0.230248065745013988e-3) : (R < 0.85e1 ? -0.403318230417501705e-3 + R * 0.456641668506062702e-4 + pow(R - 0.825e1, 2) * (-0.147509783273828434e-3) + pow(R - 0.825e1, 3) * 0.428783796456134000e-4 : (R < 0.875e1 ? 0.146711544163421217e-3 + R * (-0.200510286027554367e-4) + pow(R - 0.85e1, 2) * (-0.115350998539618380e-3) + pow(R - 0.85e1, 3) * 0.148180048602560488e-3 : (R < 0.90e1 ? 0.403370146386364628e-3 + R * (-0.499427687595845320e-4) + pow(R - 0.875e1, 2) * (-0.421596208769799683e-5) + pow(R - 0.875e1, 3) * (-0.253627581585555686e-5) : (R < 0.925e1 ? 0.426318814280157970e-3 + R * (-0.525263015189064459e-4) + pow(R - 0.90e1, 2) * (-0.611816894958966458e-5) + pow(R - 0.90e1, 3) * 0.215431299780861733e-3 : (R < 0.95e1 ? 0.839604136143046333e-4 + R * (-0.151920172847896914e-4) + pow(R - 0.925e1, 2) * 0.155455305886056645e-3 + pow(R - 0.925e1, 3) * (-0.123985087787591446e-3) : (R < 0.100e2 ? -0.425825162101619681e-3 + R * 0.392884316980652285e-4 + pow(R - 0.95e1, 2) * 0.624664900453630612e-4 + pow(R - 0.95e1, 3) * (-0.651336508829870083e-4) : (R < 0.105e2 ? -0.554512764781880246e-3 + R * 0.529046835811880199e-4 + pow(R - 0.100e2, 2) * (-0.352339862791174648e-4) + pow(R - 0.100e2, 3) * 0.808541447348282572e-5 : (R < 0.110e2 ? -0.256026367590418084e-3 + R * 0.237347581571826744e-4 + pow(R - 0.105e2, 2) * (-0.231058645688932262e-4) + pow(R - 0.105e2, 3) * 0.994560697305574906e-5 : (R < 0.120e2 ? -0.884463801307938804e-4 + R * 0.808809881808126207e-5 + pow(R - 0.110e2, 2) * (-0.818745410930960180e-5) + pow(R - 0.110e2, 3) * 0.292017536122833922e-5 : (R < 0.140e2 ? -0.234107325976492369e-5 + R * 0.473716683147076969e-6 + pow(R - 0.120e2, 2) * 0.573071974375416486e-6 + pow(R - 0.120e2, 3) * (-0.184969996974477452e-6) : (R < 0.160e2 ? -0.254561641137018236e-5 + R * 0.546364616955012965e-6 + pow(R - 0.140e2, 2) * (-0.536748007471448330e-6) + pow(R - 0.140e2, 3) * (-0.249227636280291226e-7) : (R < 0.180e2 ? 0.342450525444740699e-4 + R * (-0.189970057646712953e-5) + pow(R - 0.160e2, 2) * (-0.686284589239623078e-6) + pow(R - 0.160e2, 3) * 0.289051640236593909e-6 : (R < 0.200e2 ? 0.207896634434569140e-4 + R * (-0.117621925058649515e-5) + pow(R - 0.180e2, 2) * 0.104802525217994037e-5 + pow(R - 0.180e2, 3) * (-0.205027959930846419e-6) : (R < 0.250e2 ? -0.112937690182621849e-4 + R * 0.555546238963109211e-6 + pow(R - 0.200e2, 2) * (-0.182142507405138244e-6) + pow(R - 0.200e2, 3) * 0.153626449193032763e-7 : 0.280366653911318288e-5 + R * (-0.113680466140527311e-6) + pow(R - 0.250e2, 2) * 0.482971663844109202e-7 + pow(R - 0.250e2, 3) * (-0.489106500246109208e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.5851015648e2 * (R - 0.300e2) * (R - 0.250e2) - 0.6241086888e3 * R - 0.3666628000e5 + 0.3120543444e2 * R * R + 0.75000e3 * (-0.1144197254e0 * R + 0.4732813169e1) * R) * pow(R, -6));
}

static double radcoeff_4_6_3_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.287608358799999178e-2 + R * 0.173472347597680709e-17 + pow(R - 0.475e1, 2) * (-0.795263649516205762e-1) + pow(R - 0.475e1, 3) * 0.157050968990482265e0 : (R < 0.525e1 ? 0.519402361195743095e-1 + R * (-0.103161257900948617e-1) + pow(R - 0.50e1, 2) * 0.382618617912411224e-1 + pow(R - 0.50e1, 3) * (-0.530358535954466928e-1) : (R < 0.55e1 ? 0.527269844980792282e-2 + R * (-0.112941744362055670e-2) + pow(R - 0.525e1, 2) * (-0.151502840534389980e-2) + pow(R - 0.525e1, 3) * (-0.574032694789549172e-2) : (R < 0.575e1 ? 0.151743568456260119e-1 + R * (-0.296324294902291108e-2) + pow(R - 0.55e1, 2) * (-0.582027361626551859e-2) + pow(R - 0.55e1, 3) * 0.247777832494286490e-1 : (R < 0.60e1 ? 0.521748168885484160e-2 + R * (-0.122754539788779847e-2) + pow(R - 0.575e1, 2) * 0.127630638208059699e-1 + pow(R - 0.575e1, 3) * (-0.143557861970191013e-1) : (R < 0.625e1 ? -0.163480679724446257e-1 + R * 0.246227660057410412e-2 + pow(R - 0.60e1, 2) * 0.199622417304164265e-2 + pow(R - 0.60e1, 3) * (-0.519513606775223562e-2) : (R < 0.65e1 ? -0.164546284240461339e-1 + R * 0.248630067439138160e-2 + pow(R - 0.625e1, 2) * (-0.190012787777253406e-2) + pow(R - 0.625e1, 3) * (-0.357050127171966187e-3) : (R < 0.675e1 ? -0.996839487939240980e-2 + R * 0.146928983666037068e-2 + pow(R - 0.65e1, 2) * (-0.216791547315150872e-2) + pow(R - 0.65e1, 3) * 0.121413487404009980e-2 : (R < 0.70e1 ? -0.430484346712816258e-2 + R * 0.612982388967135174e-3 + pow(R - 0.675e1, 2) * (-0.125731431762143376e-2) + pow(R - 0.675e1, 3) * 0.123385743869157101e-2 : (R < 0.725e1 ? -0.158298436610761575e-2 + R * 0.215673499911087969e-3 + pow(R - 0.70e1, 2) * (-0.331921238602755388e-3) + pow(R - 0.70e1, 3) * 0.390145404736141899e-4 : (R < 0.75e1 ? -0.452940742346718639e-3 + R * 0.570281069485129155e-4 + pow(R - 0.725e1, 2) * (-0.302660333247544745e-3) + pow(R - 0.725e1, 3) * 0.497105178933972204e-3 : (R < 0.775e1 ? -0.281676529514525771e-4 + R * (-0.109483862513965659e-5) + pow(R - 0.75e1, 2) * 0.701685509529344350e-4 + pow(R - 0.75e1, 3) * (-0.215921185169503206e-3) : (R < 0.80e1 ? 0.147014502216457385e-4 + R * (-0.649578536795428901e-5) + pow(R - 0.775e1, 2) * (-0.917723379241929834e-4) + pow(R - 0.775e1, 3) * 0.321118772624040549e-3 : (R < 0.825e1 ? -0.100605647315654613e-3 + R * 0.782781553695682564e-5 + pow(R - 0.80e1, 2) * 0.149066741543837428e-3 + pow(R - 0.80e1, 3) * (-0.176482919086658934e-3) : (R < 0.85e1 ? -0.435949814986047652e-3 + R * 0.492706389801269898e-4 + pow(R - 0.825e1, 2) * 0.167045522288432315e-4 + pow(R - 0.825e1, 3) * (-0.393163903574047943e-4) : (R < 0.875e1 ? -0.443853948911549293e-3 + R * 0.502510919025352074e-4 + pow(R - 0.85e1, 2) * (-0.127827405392103659e-4) + pow(R - 0.85e1, 3) * 0.301651763627815108e-5 : (R < 0.90e1 ? -0.393630221492156549e-3 + R * 0.444253186897321787e-4 + pow(R - 0.875e1, 2) * (-0.105203523120017524e-4) + pow(R - 0.875e1, 3) * (-0.505853011157077849e-4) : (R < 0.925e1 ? -0.262373857804824775e-3 + R * 0.296803985745360877e-4 + pow(R - 0.90e1, 2) * (-0.484593281487825928e-4) + pow(R - 0.90e1, 3) * 0.172839562025528984e-4 : (R < 0.95e1 ? -0.709849728491420480e-4 + R * 0.869147628812346531e-5 + pow(R - 0.925e1, 2) * (-0.354963609968679173e-4) + pow(R - 0.925e1, 3) * (-0.180280630865037681e-4) : (R < 0.100e2 ? 0.127235018210784562e-3 + R * (-0.124369660390299535e-4) + pow(R - 0.95e1, 2) * (-0.490174083117457442e-4) + pow(R - 0.95e1, 3) * 0.644723265396112842e-4 : (R < 0.105e2 ? 0.129671341023672177e-3 + R * (-0.131001294460672176e-4) + pow(R - 0.100e2, 2) * 0.476910814976711956e-4 + pow(R - 0.100e2, 3) * (-0.374192614606735078e-4) : (R < 0.110e2 ? -0.691629680072378296e-4 + R * 0.652650595609884039e-5 + pow(R - 0.105e2, 2) * (-0.843781069333907624e-5) + pow(R - 0.105e2, 3) * 0.337199643428279132e-5 : (R < 0.120e2 ? -0.585397408219042400e-5 + R * 0.617692588471856682e-6 + pow(R - 0.110e2, 2) * (-0.337981604191488905e-5) + pow(R - 0.110e2, 3) * 0.133309318044303193e-5 : (R < 0.140e2 ? 0.252235335662458962e-4 + R * (-0.214265995402882457e-5) + pow(R - 0.120e2, 2) * 0.619463499414207479e-6 + pow(R - 0.120e2, 3) * (-0.898074348248975320e-7) : (R < 0.160e2 ? 0.738062116879071270e-5 + R * (-0.742495174270765148e-6) + pow(R - 0.140e2, 2) * 0.806188904648222472e-7 + pow(R - 0.140e2, 3) * 0.975040902102801574e-7 : (R < 0.180e2 ? -0.153972648577901749e-4 + R * 0.750029470111885942e-6 + pow(R - 0.160e2, 2) * 0.665643431726503258e-6 + pow(R - 0.160e2, 3) * (-0.205390644141223098e-6) : (R < 0.200e2 ? -0.179397642333179990e-4 + R * 0.947915467323222110e-6 + pow(R - 0.180e2, 2) * (-0.566700433120835280e-6) + pow(R - 0.180e2, 3) * 0.103581801704612113e-6 : (R < 0.250e2 ? 0.109849068839547147e-5 + R * (-0.759046447047735746e-7) + pow(R - 0.200e2, 2) * 0.547903771068374177e-7 + pow(R - 0.200e2, 3) * (-0.526904635397654154e-8) : -0.200851304118400149e-5 + R * 0.768206498153600634e-7 + pow(R - 0.250e2, 2) * (-0.242453182028106921e-7) + pow(R - 0.250e2, 3) * 0.228374578074773603e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1342727058e3 * (R - 0.300e2) * (R - 0.250e2) - 0.1432242872e4 * R - 0.8414409252e5 + 0.7161214360e2 * R * R + 0.75000e3 * (-0.2625775244e0 * R + 0.1086115666e2) * R) * pow(R, -6));
}

static double radcoeff_4_6_4_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.309219694100000497e0 + R * 0.111022302462515654e-15 + pow(R - 0.475e1, 2) * 0.622296687954643790e1 + pow(R - 0.475e1, 3) * (-0.114500570221857494e2) : (R < 0.525e1 ? -0.492218014561695227e1 + R * 0.964597748113390385e0 + pow(R - 0.50e1, 2) * (-0.236457588709287547e1) + pow(R - 0.50e1, 3) * 0.286699182175725564e1 : (R < 0.55e1 ? -0.164035276226880011e1 + R * 0.319870771146438138e0 + pow(R - 0.525e1, 2) * (-0.214332020774933657e0) + pow(R - 0.525e1, 3) * (-0.540991633163275587e0) : (R < 0.575e1 ? -0.514890829004714279e0 + R * 0.111268829540857150e0 + pow(R - 0.55e1, 2) * (-0.620075745647390320e0) + pow(R - 0.55e1, 3) * 0.493398001135846753e0 : (R < 0.60e1 ? 0.704836829421733757e0 + R * (-0.106256918069866757e0) + pow(R - 0.575e1, 2) * (-0.250027244795505255e0) + pow(R - 0.575e1, 3) * 0.420096955979889053e0 : (R < 0.625e1 ? 0.973246800468341222e0 + R * (-0.152502361221390187e0) + pow(R - 0.60e1, 2) * 0.650454721894115628e-1 + pow(R - 0.60e1, 3) * 0.103836526304596569e0 : (R < 0.65e1 ? 0.653984058348578312e0 + R * (-0.100510276444572527e0) + pow(R - 0.625e1, 2) * 0.142922866917858993e0 + pow(R - 0.625e1, 3) * (-0.688280135182755687e-1) : (R < 0.675e1 ? 0.281226123812078010e0 + R * (-0.419540955203196939e-1) + pow(R - 0.65e1, 2) * 0.913018567791523128e-1 + pow(R - 0.65e1, 3) * (-0.858768635274941017e-1) : (R < 0.70e1 ? 0.861348026405036327e-1 + R * (-0.124050790421486867e-1) + pow(R - 0.675e1, 2) * 0.268942091335317261e-1 + pow(R - 0.675e1, 3) * (-0.260194856517479318e-1) : (R < 0.725e1 ? 0.274299791988989149e-1 + R * (-0.383662803508555937e-2) + pow(R - 0.70e1, 2) * 0.737959489472077724e-2 + pow(R - 0.70e1, 3) * (-0.602230397111415145e-2) : (R < 0.75e1 ? 0.923264334763079092e-2 + R * (-0.127601258230907442e-2) + pow(R - 0.725e1, 2) * 0.286286691638516300e-2 + pow(R - 0.725e1, 3) * (-0.218890890859545911e-2) : (R < 0.775e1 ? 0.171977304448606280e-2 + R * (-0.254999544478141721e-3) + pow(R - 0.75e1, 2) * 0.122118523493856845e-2 + pow(R - 0.75e1, 3) * (-0.123230953370400548e-2) : (R < 0.80e1 ? -0.116455070901772093e-2 + R * 0.124535035421641422e-3 + pow(R - 0.775e1, 2) * 0.296953084660564286e-3 + pow(R - 0.775e1, 3) * (-0.391223433388519413e-3) : (R < 0.825e1 ? -0.175308119593260920e-2 + R * 0.199657183991576155e-3 + pow(R - 0.80e1, 2) * 0.353550961917472439e-5 + pow(R - 0.80e1, 3) * (-0.221661071941917705e-3) : (R < 0.85e1 ? -0.142802568734944546e-2 + R * 0.159863487812053986e-3 + pow(R - 0.825e1, 2) * (-0.162710294337263566e-3) + pow(R - 0.825e1, 3) * 0.675192083619072671e-5 : (R < 0.875e1 ? -0.757331704881767515e-3 + R * 0.797743258002079508e-4 + pow(R - 0.85e1, 2) * (-0.157646353710120521e-3) + pow(R - 0.85e1, 3) * 0.148538021557154858e-3 : (R < 0.90e1 ? -0.318856089537249479e-3 + R * 0.288020279871142263e-4 + pow(R - 0.875e1, 2) * (-0.462428375422543704e-4) + pow(R - 0.875e1, 3) * 0.546833055751898853e-4 : (R < 0.925e1 ? -0.205077149452016316e-3 + R * 0.159337290113351463e-4 + pow(R - 0.90e1, 2) * (-0.523035836086195647e-5) + pow(R - 0.90e1, 3) * 0.300599855820855060e-4 : (R < 0.95e1 ? -0.232879239649793084e-3 + R * 0.189547971275452000e-4 + pow(R - 0.925e1, 2) * 0.173146308257021748e-4 + pow(R - 0.925e1, 3) * 0.563850663364680871e-4 : (R < 0.100e2 ? -0.413596454395598529e-3 + R * 0.381843124784840592e-4 + pow(R - 0.95e1, 2) * 0.596034305780532384e-4 + pow(R - 0.95e1, 3) * (-0.620167620300426882e-4) : (R < 0.105e2 ? -0.537356282560052731e-3 + R * 0.512751715340052679e-4 + pow(R - 0.100e2, 2) * (-0.334217124670108074e-4) + pow(R - 0.100e2, 3) * 0.413258535800053752e-5 : (R < 0.110e2 ? -0.226811266293696181e-3 + R * 0.209528980854948725e-4 + pow(R - 0.105e2, 2) * (-0.272228344300100003e-4) + pow(R - 0.105e2, 3) * 0.149132466140405167e-4 : (R < 0.120e2 ? -0.553359249101678750e-4 + R * 0.491499861601526143e-5 + pow(R - 0.110e2, 2) * (-0.485296450894922277e-5) + pow(R - 0.110e2, 3) * 0.191117376893396112e-5 : (R < 0.140e2 ? -0.106088231167244050e-4 + R * 0.942590904918700427e-6 + pow(R - 0.120e2, 2) * 0.880556797852661342e-6 + pow(R - 0.120e2, 3) * (-0.289661080906005725e-6) : (R < 0.160e2 ? -0.100520036604018797e-4 + R * 0.988885125457277202e-6 + pow(R - 0.140e2, 2) * (-0.857409687583373113e-6) + pow(R - 0.140e2, 3) * 0.103669443177367315e-6 : (R < 0.180e2 ? 0.223174000499649260e-4 + R * (-0.119672030674780779e-5) + pow(R - 0.160e2, 2) * (-0.235393028519169222e-6) + pow(R - 0.160e2, 3) * 0.114223237821536530e-6 : (R < 0.200e2 ? 0.145656925220888317e-4 + R * (-0.767613566966046206e-6) + pow(R - 0.180e2, 2) * 0.449946398410050012e-6 + pow(R - 0.180e2, 3) * (-0.818913626135134462e-7) : (R < 0.250e2 ? -0.631437630739847837e-6 + R * 0.494756753119923949e-7 + pow(R - 0.200e2, 2) * (-0.414017772710306784e-7) + pow(R - 0.200e2, 3) * 0.403747254732643904e-8 : 0.161838529742078624e-5 + R * (-0.617316563488314439e-7) + pow(R - 0.250e2, 2) * 0.191603109388659106e-7 + pow(R - 0.250e2, 3) * (-0.179588847781992449e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1145842802e3 * (R - 0.300e2) * (R - 0.250e2) + 0.1222232852e4 * R + 0.7180609658e5 - 0.6111164260e2 * R * R + 0.75000e3 * (0.2240758638e0 * R - 0.926859037e1) * R) * pow(R, -6));
}

static double radcoeff_4_6_4_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.239331325799999994e0 + pow(R - 0.475e1, 2) * (-0.337738262736475026e1) + pow(R - 0.475e1, 3) * 0.544724590785900009e1 : (R < 0.525e1 ? 0.345002165869406241e1 + R * (-0.667332705958812555e0) + pow(R - 0.50e1, 2) * 0.708051803529499701e0 + pow(R - 0.50e1, 3) * (-0.405269147576998612e0) : (R < 0.55e1 ? 0.202824339890493732e1 + R * (-0.389294769364749937e0) + pow(R - 0.525e1, 2) * 0.404099942846750715e0 + pow(R - 0.525e1, 3) * 0.179753010128996360e0 : (R < 0.575e1 ? 0.759663151592032682e0 + R * (-0.153541108542187776e0) + pow(R - 0.55e1, 2) * 0.538914700443497985e0 + pow(R - 0.55e1, 3) * (-0.281982578698987407e0) : (R < 0.60e1 ? -0.456427953537631270e0 + R * 0.630445081735010876e-1 + pow(R - 0.575e1, 2) * 0.327427766419257416e0 + pow(R - 0.575e1, 3) * (-0.439628034213046970e0) : (R < 0.625e1 ? -0.930534666939100918e0 + R * 0.144328134968183502e0 + pow(R - 0.60e1, 2) * (-0.229325924052781920e-2) + pow(R - 0.60e1, 3) * (-0.173619756128824659e0) : (R < 0.65e1 ? -0.722763717491031077e0 + R * 0.110627801073764964e0 + pow(R - 0.625e1, 2) * (-0.132508076337146313e0) + pow(R - 0.625e1, 3) * 0.393732795283458642e-1 : (R < 0.675e1 ? -0.347765201098918231e0 + R * 0.517562528167566441e-1 + pow(R - 0.65e1, 2) * (-0.102978116690886912e0) + pow(R - 0.65e1, 3) * 0.897134882554413565e-1 : (R < 0.70e1 ? -0.118792049879656983e0 + R * 0.170884735192084435e-1 + pow(R - 0.675e1, 2) * (-0.356930004993058908e-1) + pow(R - 0.675e1, 3) * 0.330147787778884705e-1 : (R < 0.725e1 ? -0.389134018907670992e-1 + R * 0.543224429040958627e-2 + pow(R - 0.70e1, 2) * (-0.109319164158895397e-1) + pow(R - 0.70e1, 3) * 0.931191096260478891e-2 : (R < 0.75e1 ? -0.124813300151108020e-1 + R * 0.171226938795321403e-2 + pow(R - 0.725e1, 2) * (-0.394798319393594756e-2) + pow(R - 0.725e1, 3) * 0.339538445009236614e-2 : (R < 0.775e1 ? -0.264484848833169105e-2 + R * 0.374912375377558821e-3 + pow(R - 0.75e1, 2) * (-0.140144485636667284e-2) + pow(R - 0.75e1, 3) * 0.132225866742575028e-2 : (R < 0.80e1 ? 0.797413192141733043e-3 + R * (-0.778865526634494210e-4) + pow(R - 0.775e1, 2) * (-0.409750855797360073e-3) + pow(R - 0.775e1, 3) * 0.569021603404630798e-3 : (R < 0.825e1 ? 0.156616574429008920e-2 + R * (-0.176070429923761156e-3) + pow(R - 0.80e1, 2) * 0.170153467561131002e-4 + pow(R - 0.80e1, 3) * 0.268311264555725877e-3 : (R < 0.85e1 ? 0.108618927424242455e-2 + R * (-0.117254394441506000e-3) + pow(R - 0.825e1, 2) * 0.218248795172907542e-3 + pow(R - 0.825e1, 3) * (-0.275096320507534260e-3) : (R < 0.875e1 ? 0.606408825256826646e-3 + R * (-0.597105569502149062e-4) + pow(R - 0.85e1, 2) * 0.119265547922568202e-4 + pow(R - 0.85e1, 3) * 0.145146030914411245e-3 : (R < 0.90e1 ? 0.319113257479300893e-3 + R * (-0.265323987576343912e-4) + pow(R - 0.875e1, 2) * 0.120786077978065254e-3 + pow(R - 0.875e1, 3) * (-0.270933254670110740e-3) : (R < 0.925e1 ? 0.236091571603227817e-3 + R * (-0.169393450192475349e-4) + pow(R - 0.90e1, 2) * (-0.824138630245178152e-4) + pow(R - 0.90e1, 3) * 0.914897084060318241e-4 : (R < 0.95e1 ? 0.454856885329723117e-3 + R * (-0.409919562053754738e-4) + pow(R - 0.925e1, 2) * (-0.137965817199939453e-4) + pow(R - 0.925e1, 3) * (-0.254895712740167285e-4) : (R < 0.100e2 ? 0.564533386422880657e-3 + R * (-0.526695416792505875e-4) + pow(R - 0.95e1, 2) * (-0.329137601755064943e-4) + pow(R - 0.95e1, 3) * 0.284993392280153131e-4 : (R < 0.105e2 ? 0.675259921327455944e-3 + R * (-0.642087974337455885e-4) + pow(R - 0.100e2, 2) * 0.983524866651647539e-5 + pow(R - 0.100e2, 3) * 0.370487532019494139e-4 : (R < 0.110e2 ? 0.287320785183554114e-3 + R * (-0.265869838657670611e-4) + pow(R - 0.105e2, 2) * 0.654083784694405962e-4 + pow(R - 0.105e2, 3) * (-0.472508523558129478e-4) : (R < 0.120e2 ? -0.319061079719520739e-4 + R * 0.338325533681382465e-5 + pow(R - 0.110e2, 2) * (-0.546790006427882208e-5) + pow(R - 0.110e2, 3) * 0.156000021346499708e-5 : (R < 0.140e2 ? 0.392555860351859239e-4 + R * (-0.287254415134882700e-5) + pow(R - 0.120e2, 2) * (-0.787899423883829996e-6) + pow(R - 0.120e2, 3) * 0.364088135654121813e-6 : (R < 0.160e2 ? 0.219722543724855851e-4 + R * (-0.165508421903468481e-5) + pow(R - 0.140e2, 2) * 0.139662939004090109e-5 + pow(R - 0.140e2, 3) * (-0.258580072974279345e-6) : (R < 0.180e2 ? -0.142467756027010781e-4 + R * 0.828472465437567428e-6 + pow(R - 0.160e2, 2) * (-0.154851047804775003e-6) + pow(R - 0.160e2, 3) * (-0.149322458200436251e-8) : (R < 0.200e2 ? -0.340631363891947123e-5 + R * 0.191149579234415067e-6 + pow(R - 0.180e2, 2) * (-0.163810395296801178e-6) + pow(R - 0.180e2, 3) * 0.318761241897968167e-7 : (R < 0.250e2 ? 0.164801559160455606e-5 + R * (-0.815785116752278038e-7) + pow(R - 0.200e2, 2) * 0.274463498419797325e-7 + pow(R - 0.200e2, 3) * (-0.233009887818683418e-8) : -0.449740086013923736e-6 + R * 0.181275708805569501e-7 + pow(R - 0.250e2, 2) * (-0.750513333082278069e-8) + pow(R - 0.250e2, 3) * 0.756031347742278078e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.5262514592e1 * (R - 0.300e2) * (R - 0.250e2) + 0.5613294536e2 * R + 0.3298133400e4 - 0.2806647268e1 * R * R + 0.75000e3 * (0.1029165495e-1 * R - 0.4257086590e0) * R) * pow(R, -6));
}

static double radcoeff_4_6_5_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.792928004699999973e-2 + pow(R - 0.475e1, 2) * (-0.442886173075012352e-1) + pow(R - 0.475e1, 3) * 0.768785789260049146e-1 : (R < 0.525e1 ? 0.450103447866234685e-1 + R * (-0.772957510512469349e-2) + pow(R - 0.50e1, 2) * 0.133703168870024595e-1 + pow(R - 0.50e1, 3) * (-0.258580091620147362e-1) : (R < 0.55e1 ? 0.357988541393814419e-1 + R * (-0.589279337950122679e-2) + pow(R - 0.525e1, 2) * (-0.602318998450859355e-2) + pow(R - 0.525e1, 3) * 0.325142123460540056e-1 : (R < 0.575e1 ? 0.189639303087871872e-1 + R * (-0.280797355687039795e-2) + pow(R - 0.55e1, 2) * 0.183624692750319098e-1 + pow(R - 0.55e1, 3) * (-0.448670710062012701e-1) : (R < 0.60e1 ? 0.149907484168487967e-1 + R * (-0.203931473301718208e-2) + pow(R - 0.575e1, 2) * (-0.152878339796190445e-1) + pow(R - 0.575e1, 3) * 0.220814950387510818e-1 : (R < 0.625e1 ? 0.354021021733652574e-1 + R * (-0.554295140306087630e-2) + pow(R - 0.60e1, 2) * 0.127328729944426594e-2 + pow(R - 0.60e1, 3) * 0.516560470719695537e-2 : (R < 0.65e1 ? 0.255299293758207146e-1 + R * (-0.393775687073931457e-2) + pow(R - 0.625e1, 2) * 0.514749082984198268e-2 + pow(R - 0.625e1, 3) * (-0.240603406593890888e-2) : (R < 0.675e1 ? 0.120170620912821470e-1 + R * (-0.181514284318186857e-2) + pow(R - 0.65e1, 2) * 0.334296528038780091e-2 + pow(R - 0.65e1, 3) * (-0.235510293304130565e-2) : (R < 0.70e1 ? 0.388736826632918829e-2 + R * (-0.585242002933213058e-3) + pow(R - 0.675e1, 2) * 0.157663808060682156e-2 + pow(R - 0.675e1, 3) * (-0.140294555101587622e-2) : (R < 0.725e1 ? 0.287119875716953772e-3 + R * (-0.599752534452791146e-4) + pow(R - 0.70e1, 2) * 0.524428917344914401e-3 + pow(R - 0.70e1, 3) * (-0.446634615855191612e-3) : (R < 0.75e1 ? -0.980992877268889885e-3 + R * 0.118495214754329645e-3 + pow(R - 0.725e1, 2) * 0.189452955453520665e-3 + pow(R - 0.725e1, 3) * (-0.290571120283356836e-3) : (R < 0.775e1 ? -0.127552518635970415e-2 + R * 0.158739607427960550e-3 + pow(R - 0.75e1, 2) * (-0.284753847589969994e-4) + pow(R - 0.75e1, 3) * (-0.127872892771380760e-3) : (R < 0.80e1 ? -0.983145498607168296e-3 + R * 0.120525747653828160e-3 + pow(R - 0.775e1, 2) * (-0.124380054337532573e-3) + pow(R - 0.775e1, 3) * 0.109351156888796487e-4 : (R < 0.825e1 ? -0.509630847003814482e-3 + R * 0.603860546767268108e-4 + pow(R - 0.80e1, 2) * (-0.116178717570872836e-3) + pow(R - 0.80e1, 3) * 0.506715653758623140e-4 : (R < 0.85e1 ? -0.115245641353932811e-3 + R * 0.117976143992645840e-4 + pow(R - 0.825e1, 2) * (-0.781750435389760975e-4) + pow(R - 0.825e1, 3) * 0.585821101676710563e-4 : (R < 0.875e1 ? 0.119662460857173706e-3 + R * (-0.163057617137851429e-4) + pow(R - 0.85e1, 2) * (-0.342384609132228036e-4) + pow(R - 0.85e1, 3) * 0.122667637473453496e-3 : (R < 0.90e1 ? 0.679809126510850728e-4 + R * (-0.104248101441240091e-4) + pow(R - 0.875e1, 2) * 0.577622671918673255e-4 + pow(R - 0.875e1, 3) * (-0.510369366148516663e-5) : (R < 0.925e1 ? -0.179806410172530671e-3 + R * 0.174993808902811883e-4 + pow(R - 0.90e1, 2) * 0.539344969457534505e-4 + pow(R - 0.90e1, 3) * (-0.815933684275128119e-4) : (R < 0.95e1 ? -0.285643950502743221e-3 + R * 0.291678727829992647e-4 + pow(R - 0.925e1, 2) * (-0.726052937488116353e-5) + pow(R - 0.925e1, 3) * 0.286739566835364352e-4 : (R < 0.100e2 ? -0.302237673827356718e-3 + R * 0.309139749737217590e-4 + pow(R - 0.95e1, 2) * 0.142449381377711629e-4 + pow(R - 0.95e1, 3) * (-0.443073810504293771e-4) : (R < 0.105e2 ? -0.114358885420708952e-3 + R * 0.119283773236708958e-4 + pow(R - 0.100e2, 2) * (-0.522161334378728960e-4) + pow(R - 0.100e2, 3) * 0.433066533090621983e-4 : (R < 0.110e2 ? 0.852299191722561512e-4 + R * (-0.780776613240534803e-5) + pow(R - 0.105e2, 2) * 0.127438465257204032e-4 + pow(R - 0.105e2, 3) * (-0.109374911378194131e-4) : (R < 0.120e2 ? 0.371006845155445484e-4 + R * (-0.326703796004950470e-5) + pow(R - 0.110e2, 2) * (-0.366239018100871611e-5) + pow(R - 0.110e2, 3) * 0.268674488605822041e-5 : (R < 0.140e2 ? 0.272995876667072999e-4 + R * (-0.253158366389227484e-5) + pow(R - 0.120e2, 2) * 0.439784447716594639e-5 + pow(R - 0.120e2, 3) * (-0.113825108485990423e-5) : (R < 0.160e2 ? -0.192681515684371961e-4 + R * 0.140078122645265703e-5 + pow(R - 0.140e2, 2) * (-0.243166203199347982e-5) + pow(R - 0.140e2, 3) * 0.641450957383575582e-6 : (R < 0.180e2 ? 0.860459419269366901e-5 + R * (-0.628455412918354323e-6) + pow(R - 0.160e2, 2) * 0.141704371230797409e-5 + pow(R - 0.160e2, 3) * (-0.352203793174398352e-6) : (R < 0.200e2 ? -0.144959892635736915e-4 + R * 0.813273918220760663e-6 + pow(R - 0.180e2, 2) * (-0.696179046738416230e-6) + pow(R - 0.180e2, 3) * 0.135449523289017887e-6 : (R < 0.250e2 ? 0.698932888549378358e-5 + R * (-0.346047989264689183e-6) + pow(R - 0.200e2, 2) * 0.116518092995691227e-6 + pow(R - 0.200e2, 3) * (-0.989394655175067760e-8) : -0.191283557297305747e-5 + R * 0.770869493109222973e-7 + pow(R - 0.250e2, 2) * (-0.318911052805689249e-7) + pow(R - 0.250e2, 3) * 0.321205000287689228e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2187811206e2 * (R - 0.300e2) * (R - 0.250e2) + 0.2333663156e3 * R + 0.1371038500e5 - 0.1166831578e2 * R * R + 0.75000e3 * (0.4278404159e-1 * R - 0.1769706499e1) * R) * pow(R, -6));
}

static double radcoeff_4_6_6_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.237797052500001049e0 + R * (-0.222044604925031308e-15) + pow(R - 0.475e1, 2) * (-0.819055820635128740e1) + pow(R - 0.475e1, 3) * 0.157085398142051496e2 : (R < 0.525e1 ? 0.572097253922089077e1 + R * (-0.114992788801217816e1) + pow(R - 0.50e1, 2) * 0.359084665430257521e1 + pow(R - 0.50e1, 3) * (-0.444207812421545079e1) : (R < 0.55e1 ? 0.822691170444259434e0 + R * (-0.187394209151287516e0) + pow(R - 0.525e1, 2) * 0.259288061140987292e0 + pow(R - 0.525e1, 3) * 0.465842794656651349e0 : (R < 0.575e1 ? -0.347267082195305332e0 + R * 0.295953454173282365e-1 + pow(R - 0.55e1, 2) * 0.608670157133475831e0 + pow(R - 0.55e1, 3) * (-0.508944772811154689e0) : (R < 0.60e1 ? -0.151839807802135396e1 + R * 0.238503279081974606e0 + pow(R - 0.575e1, 2) * 0.226961577525109759e0 + pow(R - 0.575e1, 3) * (-0.577529222772033446e0) : (R < 0.625e1 ? -0.154440123048863942e1 + R * 0.243697338574773215e0 + pow(R - 0.60e1, 2) * (-0.206185339553915326e0) + pow(R - 0.60e1, 3) * 0.147133339289617915e-3 : (R < 0.65e1 ? -0.913128751028327246e0 + R * 0.140632256298932362e0 + pow(R - 0.625e1, 2) * (-0.206074989549448112e0) + pow(R - 0.625e1, 3) * 0.107051238534874596e0 : (R < 0.675e1 ? -0.385060743201732392e0 + R * 0.576668687494972937e-1 + pow(R - 0.65e1, 2) * (-0.125786560648292162e0) + pow(R - 0.65e1, 3) * 0.116688120201211790e0 : (R < 0.70e1 ? -0.114252911305779414e0 + R * 0.166526109630784312e-1 + pow(R - 0.675e1, 2) * (-0.382704704973833160e-1) + pow(R - 0.675e1, 3) * 0.363024866122783618e-1 : (R < 0.725e1 ? -0.297779562961227699e-1 + R * 0.432409195418896695e-2 + pow(R - 0.70e1, 2) * (-0.110436055381745429e-1) + pow(R - 0.70e1, 3) * 0.956421397687470289e-2 : (R < 0.75e1 ? -0.328702409780134205e-2 + R * 0.595579305765702306e-3 + pow(R - 0.725e1, 2) * (-0.387044505551851527e-2) + pow(R - 0.725e1, 3) * 0.383090524982282465e-2 : (R < 0.775e1 ? 0.565788943138831844e-2 + R * (-0.621348487651775814e-3) + pow(R - 0.75e1, 2) * (-0.997266118151396777e-3) + pow(R - 0.75e1, 3) * 0.127452707823399992e-2 : (R < 0.80e1 ? 0.762783383187914249e-2 + R * (-0.881007719558599069e-3) + pow(R - 0.775e1, 2) * (-0.413708094758967658e-4) + pow(R - 0.775e1, 3) * 0.682751045241172458e-3 : (R < 0.825e1 ? 0.677727281141062184e-2 + R * (-0.773677303313827680e-3) + pow(R - 0.80e1, 2) * 0.470692474454982557e-3 + pow(R - 0.80e1, 3) * (-0.534996175986880083e-4) : (R < 0.85e1 ? 0.494700592338524585e-2 + R * (-0.548362244386090404e-3) + pow(R - 0.825e1, 2) * 0.430567761255966548e-3 + pow(R - 0.825e1, 3) * (-0.153259544446420501e-3) : (R < 0.875e1 ? 0.338586614170539304e-2 + R * (-0.361814528341810964e-3) + pow(R - 0.85e1, 2) * 0.315623102921151158e-3 + pow(R - 0.85e1, 3) * (-0.163850191815628266e-3) : (R < 0.90e1 ? 0.229099807205832527e-2 + R * (-0.234724887846665719e-3) + pow(R - 0.875e1, 2) * 0.192735459059429959e-3 + pow(R - 0.875e1, 3) * (-0.216194990691068471e-3) : (R < 0.925e1 ? 0.179718547254373480e-2 + R * (-0.178893719071526074e-3) + pow(R - 0.90e1, 2) * 0.305892160411285917e-4 + pow(R - 0.90e1, 3) * 0.435086761799029269e-4 : (R < 0.95e1 ? 0.158284163717187752e-2 + R * (-0.155441234267229996e-3) + pow(R - 0.925e1, 2) * 0.632207231760557902e-4 + pow(R - 0.925e1, 3) * (-0.662953492285432613e-4) : (R < 0.100e2 ? 0.140354722326576265e-2 + R * (-0.136261250659553974e-3) + pow(R - 0.95e1, 2) * 0.134992112546483392e-4 + pow(R - 0.95e1, 3) * 0.319434466889191389e-4 : (R < 0.105e2 ? 0.103634699420216249e-2 + R * (-0.988044543882162602e-4) + pow(R - 0.100e2, 2) * 0.614143812880270492e-4 + pow(R - 0.100e2, 3) * 0.672796441681093355e-5 : (R < 0.110e2 ? 0.354707861769600779e-3 + R * (-0.323440997875810242e-4) + pow(R - 0.105e2, 2) * 0.715063279132434500e-4 + pow(R - 0.105e2, 3) * (-0.534984616361628036e-4) : (R < 0.120e2 ? 0.206898374960564710e-4 + R * (-0.961618101459679431e-6) + pow(R - 0.110e2, 2) * (-0.874136454100076051e-5) + pow(R - 0.110e2, 3) * 0.394772253446043962e-5 : (R < 0.140e2 ? 0.835709332329585770e-4 + R * (-0.660117958007988160e-5) + pow(R - 0.120e2, 2) * 0.310180306238055834e-5 + pow(R - 0.120e2, 3) * (-0.511723007920308637e-6) : (R < 0.160e2 ? 0.415285525611893442e-5 + R * (-0.334643425601352438e-6) + pow(R - 0.140e2, 2) * 0.314650148587063603e-7 + pow(R - 0.140e2, 3) * 0.365475124209849245e-7 : (R < 0.180e2 ? -0.445978792086467608e-5 + R * 0.229786782885292229e-6 + pow(R - 0.160e2, 2) * 0.250750089384615900e-6 + pow(R - 0.160e2, 3) * (-0.801276103761310047e-7) : (R < 0.200e2 ? -0.484425104078330790e-5 + R * 0.271255815910183774e-6 + pow(R - 0.180e2, 2) * (-0.230015572872170128e-6) + pow(R - 0.180e2, 3) * 0.446925478210391139e-7 : (R < 0.250e2 ? 0.226826140302054671e-5 + R * (-0.112495901726027344e-6) + pow(R - 0.200e2, 2) * 0.381397140540645687e-7 + pow(R - 0.200e2, 3) * (-0.324408016817182038e-8) : -0.636033964843295723e-6 + R * 0.255952262017318262e-7 + pow(R - 0.250e2, 2) * (-0.105214884685127320e-7) + pow(R - 0.250e2, 3) * 0.105830334563327321e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.5869877920e1 * (R - 0.300e2) * (R - 0.250e2) + 0.6261266252e2 * R + 0.3678295862e4 - 0.3130633126e1 * R * R + 0.75000e3 * (0.1147861087e-1 * R - 0.4747919412e0) * R) * pow(R, -6));
}

static double radcoeff_4_6_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.162076412300000000e0 + pow(R - 0.475e1, 2) * 0.426359664434338370e1 + pow(R - 0.475e1, 3) * (-0.729848328137353519e1) : (R < 0.525e1 ? -0.382630395787577005e1 + R * 0.763332706914154002e0 + pow(R - 0.50e1, 2) * (-0.121026581668676747e1) + pow(R - 0.50e1, 3) * 0.804752704920604023e0 : (R < 0.55e1 ? -0.150460198550276392e1 + R * 0.309090930743383563e0 + pow(R - 0.525e1, 2) * (-0.606701287996314398e0) + pow(R - 0.525e1, 3) * 0.156617152891120215e0 : (R < 0.575e1 ? -0.331565699177127082e-1 + R * 0.351060029123114042e-1 + pow(R - 0.55e1, 2) * (-0.489238423327974237e0) + pow(R - 0.55e1, 3) * 0.227660520314914377e0 : (R < 0.60e1 ? 0.110093719285761837e1 + R * (-0.166826861192629267e0) + pow(R - 0.575e1, 2) * (-0.318493033091788447e0) + pow(R - 0.575e1, 3) * 0.555036271769221989e0 : (R < 0.625e1 ? 0.142076711357076602e1 + R * (-0.222004076781794346e0) + pow(R - 0.60e1, 2) * 0.977841707351280592e-1 + pow(R - 0.60e1, 3) * 0.116510153888197687e0 : (R < 0.65e1 ? 0.986588225261207818e0 + R * (-0.151266337560193254e0) + pow(R - 0.625e1, 2) * 0.185166786151276325e0 + pow(R - 0.625e1, 3) * (-0.638189506820133340e-1) : (R < 0.675e1 ? 0.473151269443311762e0 + R * (-0.706489977374325784e-1) + pow(R - 0.65e1, 2) * 0.137302573139766321e0 + pow(R - 0.65e1, 3) * (-0.114889114040143930e0) : (R < 0.70e1 ? 0.161947888470015788e0 + R * (-0.235394200500764136e-1) + pow(R - 0.675e1, 2) * 0.511357376096583591e-1 + pow(R - 0.675e1, 3) * (-0.460969001014108273e-1) : (R < 0.725e1 ? 0.459507077554323490e-1 + R * (-0.661472001426176379e-2) + pow(R - 0.70e1, 2) * 0.165630625336002368e-1 + pow(R - 0.70e1, 3) * (-0.146406675446127156e-1) : (R < 0.75e1 ? 0.661819449255484412e-2 + R * (-0.107831391207653020e-2) + pow(R - 0.725e1, 2) * 0.558256187514069926e-2 + pow(R - 0.725e1, 3) * (-0.553304769133831226e-2) : (R < 0.775e1 ? -0.627310797625914383e-2 + R * 0.675520583367885882e-3 + pow(R - 0.75e1, 2) * 0.143277610663696551e-2 + pow(R - 0.75e1, 3) * (-0.193024615083403563e-2) : (R < 0.80e1 ? -0.896083804098865046e-2 + R * 0.102998748340498705e-2 + pow(R - 0.775e1, 2) * (-0.149085064885611613e-4) + pow(R - 0.775e1, 3) * (-0.615858802925549559e-3) : (R < 0.825e1 ? -0.798797038609732647e-2 + R * 0.907059704612165805e-3 + pow(R - 0.80e1, 2) * (-0.476802608682723331e-3) + pow(R - 0.80e1, 3) * 0.224465465362401317e-4 : (R < 0.85e1 ? -0.608533106270738033e-2 + R * 0.672867127746349151e-3 + pow(R - 0.825e1, 2) * (-0.459967698780543231e-3) + pow(R - 0.825e1, 3) * 0.102224981580586197e-3 : (R < 0.875e1 ? -0.432054012312071880e-2 + R * 0.462050462402437503e-3 + pow(R - 0.85e1, 2) * (-0.383298962595103577e-3) + pow(R - 0.85e1, 3) * 0.292263907941414560e-3 : (R < 0.90e1 ? -0.314249219733413361e-2 + R * 0.325200463843900995e-3 + pow(R - 0.875e1, 2) * (-0.164101031639042643e-3) + pow(R - 0.875e1, 3) * 0.494514442537548208e-4 : (R < 0.925e1 ? -0.249697050279762845e-2 + R * 0.252422093821958696e-3 + pow(R - 0.90e1, 2) * (-0.127012448448726527e-3) + pow(R - 0.90e1, 3) * 0.124776798243567111e-3 : (R < 0.95e1 ? -0.213193632873144405e-2 + R * 0.212311519268264232e-3 + pow(R - 0.925e1, 2) * (-0.334298497660512006e-4) + pow(R - 0.925e1, 3) * (-0.779140356280227757e-4) : (R < 0.100e2 ? -0.183766693879735166e-2 + R * 0.180987712704984378e-3 + pow(R - 0.95e1, 2) * (-0.918653764870682891e-4) + pow(R - 0.95e1, 3) * 0.140475618341990420e-4 : (R < 0.105e2 ? -0.104558028657565378e-2 + R * 0.996580075935653710e-4 + pow(R - 0.100e2, 2) * (-0.707940337357697253e-4) + pow(R - 0.100e2, 3) * 0.910314813727796800e-5 : (R < 0.110e2 ? -0.390490838847918275e-3 + R * 0.356913349607541216e-4 + pow(R - 0.105e2, 2) * (-0.571393115298527733e-4) + pow(R - 0.105e2, 3) * 0.355808824806890639e-4 : (R < 0.120e2 ? -0.653379100575996336e-4 + R * 0.523768529141814794e-5 + pow(R - 0.110e2, 2) * (-0.376798780881917191e-5) + pow(R - 0.110e2, 3) * 0.140460612340102388e-5 : (R < 0.140e2 ? -0.278354047737945099e-4 + R * 0.191552804398287575e-5 + pow(R - 0.120e2, 2) * 0.445830561383900094e-6 + pow(R - 0.120e2, 3) * (-0.141055178312668976e-6) : (R < 0.160e2 ? -0.284497654357302762e-4 + R * 0.200618814976644841e-5 + pow(R - 0.140e2, 2) * (-0.400500508492113817e-6) + pow(R - 0.140e2, 3) * (-0.506254869455551687e-7) : (R < 0.180e2 ? 0.489535467177870043e-5 + R * (-0.203319727548668780e-6) + pow(R - 0.160e2, 2) * (-0.704253430165444829e-6) + pow(R - 0.160e2, 3) * 0.200303217219889604e-6 : (R < 0.200e2 ? 0.111215187417919100e-4 + R * (-0.616694841571772845e-6) + pow(R - 0.180e2, 2) * 0.497565873153892744e-6 + pow(R - 0.180e2, 3) * (-0.959794963590031370e-7) : (R < 0.250e2 ? -0.442624446261520575e-5 + R * 0.221814694735760326e-6 + pow(R - 0.200e2, 2) * (-0.783111050001261179e-7) + pow(R - 0.200e2, 3) * 0.672609743379481027e-8 : 0.142308365327225214e-5 + R * (-0.568390477308900878e-7) + pow(R - 0.250e2, 2) * 0.225803565067960337e-7 + pow(R - 0.250e2, 3) * (-0.225466387372360339e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3215818272e1 * (R - 0.300e2) * (R - 0.250e2) + 0.3430215896e2 * R + 0.2015196596e4 - 0.1715107948e1 * R * R + 0.75000e3 * (0.628862392e-2 * R - 0.2601189183e0) * R) * pow(R, -6));
}

static double radcoeff_4_6_7_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.220162128699999994e-1 + pow(R - 0.475e1, 2) * 0.266106816836035986e0 + pow(R - 0.475e1, 3) * (-0.527781779984143884e0) : (R < 0.525e1 ? -0.184102750484955002e0 + R * 0.340943246709910011e-1 + pow(R - 0.50e1, 2) * (-0.129729518152071954e0) + pow(R - 0.50e1, 3) * 0.217512325040431831e0 : (R < 0.55e1 ? -0.623859251031889592e-1 + R * 0.100131265400359923e-1 + pow(R - 0.525e1, 2) * 0.334047256282519328e-1 + pow(R - 0.525e1, 3) * (-0.941782129135836088e-1) : (R < 0.575e1 ? -0.565113777387576677e-1 + R * 0.905707443286503031e-2 + pow(R - 0.55e1, 2) * (-0.372289340569357807e-1) + pow(R - 0.55e1, 3) * 0.894328221019026343e-1 : (R < 0.60e1 ? -0.468273741868973359e-1 + R * 0.721126154850388387e-2 + pow(R - 0.575e1, 2) * 0.298456825194911950e-1 + pow(R - 0.575e1, 3) * (-0.525924212860269247e-1) : (R < 0.625e1 ? -0.761543492237165970e-1 + R * 0.122730238171194338e-1 + pow(R - 0.60e1, 2) * (-0.959863344502899507e-2) + pow(R - 0.60e1, 3) * (-0.358001042979497891e-2) : (R < 0.65e1 ? -0.426191472390648612e-1 + R * 0.680245513901837733e-2 + pow(R - 0.625e1, 2) * (-0.122836412673752293e-1) + pow(R - 0.625e1, 3) * 0.709141910120687086e-2 : (R < 0.675e1 ? -0.119969043053458416e-1 + R * 0.199027558680705229e-2 + pow(R - 0.65e1, 2) * (-0.696507694147007611e-2) + pow(R - 0.65e1, 3) * 0.639391239936746951e-2 : (R < 0.70e1 ? 0.308252256406445126e-2 + R * (-0.293404309046585345e-3) + pow(R - 0.675e1, 2) * (-0.216964264194447354e-2) + pow(R - 0.675e1, 3) * 0.247946121492325939e-2 : (R < 0.725e1 ? 0.732511788264497699e-2 + R * (-0.913326652220710928e-3) + pow(R - 0.70e1, 2) * (-0.310046730752028949e-3) + pow(R - 0.70e1, 3) * 0.723572494539490322e-3 : (R < 0.75e1 ? 0.745735882141163910e-2 + R * (-0.932680174870570899e-3) + pow(R - 0.725e1, 2) * 0.232632640152588820e-3 + pow(R - 0.725e1, 3) * 0.282705562118778023e-3 : (R < 0.775e1 ? 0.620638853852754219e-2 + R * (-0.763356561897005678e-3) + pow(R - 0.75e1, 2) * 0.444661811741672364e-3 + pow(R - 0.75e1, 3) * (-0.124466342145978810e-4) : (R < 0.80e1 ? 0.452900741794590080e-2 + R * (-0.543359399941406584e-3) + pow(R - 0.775e1, 2) * 0.435326836080723954e-3 + pow(R - 0.775e1, 3) * (-0.921782956603905360e-4) : (R < 0.825e1 ? 0.295173515849894231e-2 + R * (-0.342979412337367793e-3) + pow(R - 0.80e1, 2) * 0.366193114335431052e-3 + pow(R - 0.80e1, 3) * (-0.309980695143839745e-3) : (R < 0.85e1 ? 0.193873357095025820e-2 + R * (-0.218004235509122209e-3) + pow(R - 0.825e1, 2) * 0.133707592977551229e-3 + pow(R - 0.825e1, 3) * (-0.619571096424920577e-5) : (R < 0.875e1 ? 0.138861063172221835e-2 + R * (-0.152312134826143347e-3) + pow(R - 0.85e1, 2) * 0.129060809754364325e-3 + pow(R - 0.85e1, 3) * (-0.273761390791639266e-4) : (R < 0.90e1 ? 0.876522115660163543e-3 + R * (-0.929147560263043979e-4) + pow(R - 0.875e1, 2) * 0.108528705444991378e-3 + pow(R - 0.875e1, 3) * (-0.196054635119095042e-3) : (R < 0.925e1 ? 0.722704828337751267e-3 + R * (-0.754106473886390327e-4) + pow(R - 0.90e1, 2) * (-0.385122708943299102e-4) + pow(R - 0.90e1, 3) * 0.101528932995544207e-3 : (R < 0.95e1 ? 0.723914210707039796e-3 + R * (-0.756301078991394448e-4) + pow(R - 0.925e1, 2) * 0.376344288523282550e-4 + pow(R - 0.925e1, 3) * (-0.527182518308176542e-5) : (R < 0.100e2 ? 0.556810891795629886e-3 + R * (-0.578013606948031517e-4) + pow(R - 0.95e1, 2) * 0.336805599650169307e-4 + pow(R - 0.95e1, 3) * 0.140231230091787413e-4 : (R < 0.105e2 ? 0.125004899949021701e-3 + R * (-0.136034584729021701e-4) + pow(R - 0.100e2, 2) * 0.547152444787850427e-4 + pow(R - 0.100e2, 3) * (-0.326235621139613983e-4) : (R < 0.110e2 ? -0.182993749575324121e-3 + R * 0.166441144204118205e-4 + pow(R - 0.105e2, 2) * 0.577990130784294019e-5 + pow(R - 0.105e2, 3) * (-0.150185232653331604e-4) : (R < 0.120e2 ? -0.123102187104003774e-3 + R * 0.111601232792548887e-4 + pow(R - 0.110e2, 2) * (-0.167478835901567987e-4) + pow(R - 0.110e2, 3) * 0.622335631080190781e-5 : (R < 0.140e2 ? 0.442816645915357872e-4 + R * (-0.366557496865298272e-5) + pow(R - 0.120e2, 2) * 0.192218534224892602e-5 + pow(R - 0.120e2, 3) * (-0.229103018836217338e-6) : (R < 0.160e2 ? -0.190154901913135894e-4 + R * 0.127393017430811350e-5 + pow(R - 0.140e2, 2) * 0.547567229231621880e-6 + pow(R - 0.140e2, 3) * (-0.263773147942839328e-6) : (R < 0.180e2 ? -0.333526472372846538e-5 + R * 0.298921315920529081e-6 + pow(R - 0.160e2, 2) * (-0.103507165842541419e-5) + pow(R - 0.160e2, 3) * 0.263759041982574831e-6 : (R < 0.200e2 ? 0.121877273167241359e-4 + R * (-0.676256813990229824e-6) + pow(R - 0.180e2, 2) * 0.547482593470034794e-6 + pow(R - 0.180e2, 3) * (-0.105662181849959927e-6) : (R < 0.250e2 ? -0.490732359780780130e-5 + R * 0.245727377690390064e-6 + pow(R - 0.200e2, 2) * (-0.864904976297248631e-7) + pow(R - 0.200e2, 3) * 0.742333179672936881e-8 : 0.156220772460389607e-5 + R * (-0.624277138521558416e-7) + pow(R - 0.250e2, 2) * 0.248594793212156773e-7 + pow(R - 0.250e2, 3) * (-0.248352418935690096e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2311665920e1 * (R - 0.300e2) * (R - 0.250e2) + 0.2465806856e2 * R + 0.1448564602e4 - 0.1232903428e1 * R * R + 0.75000e3 * (0.452046128e-2 * R - 0.1869801990e0) * R) * pow(R, -6));
}

static double radcoeff_4_6_8_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.381767984099999458e0 + R * 0.111022302462515654e-15 + pow(R - 0.475e1, 2) * 0.481764586784915494e1 + pow(R - 0.475e1, 3) * (-0.107099855961966206e2) : (R < 0.525e1 ? -0.148797584728855492e1 + R * 0.400700634637710995e0 + pow(R - 0.50e1, 2) * (-0.321484332929831096e1) + pow(R - 0.50e1, 3) * 0.407588619018986709e1 : (R < 0.55e1 ? 0.280154543729193239e1 + R * (-0.442492369350844239e0) + pow(R - 0.525e1, 2) * (-0.157928686655910394e0) + pow(R - 0.525e1, 3) * (-0.267146536285078895e-2) : (R < 0.575e1 ? 0.322869198968883708e1 + R * (-0.521957612434334028e0) + pow(R - 0.55e1, 2) * (-0.159932285678048486e0) + pow(R - 0.55e1, 3) * 0.288934864861538299e0 : (R < 0.60e1 ? 0.337150824924296399e1 + R * (-0.547748468111819764e0) + pow(R - 0.575e1, 2) * 0.567688629681052381e-1 + pow(R - 0.575e1, 3) * 0.604625394716695075e0 : (R < 0.625e1 ? 0.253399341700032110e1 + R * (-0.405996775118386832e0) + pow(R - 0.60e1, 2) * 0.510237909005626600e0 + pow(R - 0.60e1, 3) * (-0.224095098448316460e0) : (R < 0.65e1 ? 0.123049977825145573e1 + R * (-0.192895651574632898e0) + pow(R - 0.625e1, 2) * 0.342166585169389248e0 + pow(R - 0.625e1, 3) * (-0.215112028123430693e0) : (R < 0.675e1 ? 0.398650446858029972e0 + R * (-0.621458642630815308e-1) + pow(R - 0.65e1, 2) * 0.180832564076816221e0 + pow(R - 0.65e1, 3) * (-0.177658632769960412e0) : (R < 0.70e1 ? 0.217158693160267452e-1 + R * (-0.504057586904099915e-2) + pow(R - 0.675e1, 2) * 0.475885894993459124e-1 + pow(R - 0.675e1, 3) * (-0.528578660127276348e-1) : (R < 0.725e1 ? -0.733198621027186526e-1 + R * 0.884286900324552164e-2 + pow(R - 0.70e1, 2) * 0.794518998980018286e-2 + pow(R - 0.70e1, 3) * (-0.130020803311291025e-1) : (R < 0.75e1 ? -0.841530559964270841e-1 + R * 0.103775739360589085e-1 + pow(R - 0.725e1, 2) * (-0.180637025854664336e-2) + pow(R - 0.725e1, 3) * (-0.339190335075594419e-2) : (R < 0.775e1 ? -0.727752000708913604e-1 + R * 0.883840692851884692e-2 + pow(R - 0.75e1, 2) * (-0.435029777161360150e-2) + pow(R - 0.75e1, 3) * 0.584173181528540171e-4 : (R < 0.80e1 ? -0.562736647114592189e-1 + R * 0.667421128986570543e-2 + pow(R - 0.775e1, 2) * (-0.430648478299896099e-2) + pow(R - 0.775e1, 3) * 0.111130831814456460e-2 : (R < 0.825e1 ? -0.409664791631466491e-1 + R * 0.472933920801833080e-2 + pow(R - 0.80e1, 2) * (-0.347300354439053754e-2) + pow(R - 0.80e1, 3) * 0.131879747326885642e-2 : (R < 0.85e1 ? -0.288768108950030258e-1 + R * 0.324011196206097293e-2 + pow(R - 0.825e1, 2) * (-0.248390543943889522e-2) + pow(R - 0.825e1, 3) * 0.100976764478001341e-2 : (R < 0.875e1 ? -0.200689964317711141e-1 + R * 0.218749067573777807e-2 + pow(R - 0.85e1, 2) * (-0.172657970585388511e-2) + pow(R - 0.85e1, 3) * 0.856843115611090724e-3 : (R < 0.90e1 ? -0.140154915131442560e-1 + R * 0.148485890698791504e-2 + pow(R - 0.875e1, 2) * (-0.108394736914556701e-2) + pow(R - 0.875e1, 3) * 0.559438977575629597e-3 : (R < 0.925e1 ? -0.101407871031950585e-1 + R * 0.104778003071056202e-2 + pow(R - 0.90e1, 2) * (-0.664368135963844817e-3) + pow(R - 0.90e1, 3) * 0.197983790086385874e-3 : (R < 0.95e1 ? -0.744989212207099270e-2 + R * 0.752717923369837050e-3 + pow(R - 0.925e1, 2) * (-0.515880293399055404e-3) + pow(R - 0.925e1, 3) * 0.282003743678828551e-3 : (R < 0.100e2 ? -0.552961610669585116e-2 + R * 0.547653478610089653e-3 + pow(R - 0.95e1, 2) * (-0.304377485639933964e-3) + pow(R - 0.95e1, 3) * 0.282691896395089572e-4 : (R < 0.105e2 ? -0.277042089529787447e-2 + R * 0.264477885199787435e-3 + pow(R - 0.100e2, 2) * (-0.261973701180670527e-3) + pow(R - 0.100e2, 3) * 0.113458777882191288e-3 : (R < 0.110e2 ? -0.964495986782983993e-3 + R * 0.875982674307603816e-4 + pow(R - 0.105e2, 2) * (-0.917855343573835940e-4) + pow(R - 0.105e2, 3) * 0.418068601917256349e-4 : (R < 0.120e2 ? -0.317482231498881161e-3 + R * 0.271678782171710189e-4 + pow(R - 0.110e2, 2) * (-0.290752440697951348e-4) + pow(R - 0.110e2, 3) * 0.109892295866241118e-4 : (R < 0.140e2 ? -0.333746534254370587e-4 + R * 0.198507883745308814e-5 + pow(R - 0.120e2, 2) * 0.389244469007720145e-5 + pow(R - 0.120e2, 3) * (-0.120300090715187255e-5) : (R < 0.160e2 ? -0.433016321656518819e-4 + R * 0.311884671193941993e-5 + pow(R - 0.140e2, 2) * (-0.332556075283403471e-5) + pow(R - 0.140e2, 3) * 0.763252121469662220e-6 : (R < 0.180e2 ? 0.157936226539723436e-4 + R * (-0.102437084176077142e-5) + pow(R - 0.160e2, 2) * 0.125395197598393903e-5 + pow(R - 0.160e2, 3) * (-0.286747213039276599e-6) : (R < 0.200e2 ? -0.983169140076596805e-5 + R * 0.550470505703664902e-6 + pow(R - 0.180e2, 2) * (-0.466531302251720822e-6) + pow(R - 0.180e2, 3) * 0.906412103874441776e-7 : (R < 0.250e2 ? 0.459592676047776385e-5 + R * (-0.227960178653888201e-6) + pow(R - 0.200e2, 2) * 0.773159600729442170e-7 + pow(R - 0.200e2, 3) * (-0.657695816443331469e-8) : -0.129048746817638491e-5 + R * 0.519275597430553932e-7 + pow(R - 0.250e2, 2) * (-0.213384123935554901e-7) + pow(R - 0.250e2, 3) * 0.214616278178888223e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1175141997e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1253481308e3 * R + 0.7364319100e4 - 0.6267406540e1 * R * R + 0.75000e3 * (0.2298071238e-1 * R - 0.950568854e0) * R) * pow(R, -6));
}

static double radcoeff_4_6_8_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.311203231099999977e0 + pow(R - 0.475e1, 2) * (-0.232758415496519744e1) + pow(R - 0.475e1, 3) * 0.465501493666078847e1 : (R < 0.525e1 ? 0.107094125189350331e1 + R * (-0.290976776858700659e0) + pow(R - 0.50e1, 2) * 0.116367704753039436e1 + pow(R - 0.50e1, 3) * (-0.677507216382366106e0) : (R < 0.55e1 ? -0.125464606653271460e1 + R * 0.163829143834802765e0 + pow(R - 0.525e1, 2) * 0.655546635243619780e0 + pow(R - 0.525e1, 3) * (-0.595351171931323364e0) : (R < 0.575e1 ? -0.241177411475719250e1 + R * 0.379974116719489552e0 + pow(R - 0.55e1, 2) * 0.209033256295127257e0 + pow(R - 0.55e1, 3) * (-0.213352345492342416e0) : (R < 0.60e1 ? -0.277299328100162379e1 + R * 0.444487180087238976e0 + pow(R - 0.575e1, 2) * 0.490189971758704310e-1 + pow(R - 0.575e1, 3) * (-0.508412156499305157e0) : (R < 0.625e1 ? -0.235296684908932630e1 + R * 0.373669399331554408e0 + pow(R - 0.60e1, 2) * (-0.332290120198608485e0) + pow(R - 0.60e1, 3) * 0.200104729295630737e-1 : (R < 0.65e1 ? -0.135846546530589540e1 + R * 0.211276302906543256e0 + pow(R - 0.625e1, 2) * (-0.317282265501436178e0) + pow(R - 0.625e1, 3) * 0.163617487821052371e0 : (R < 0.675e1 ? -0.543980534057771137e0 + R * 0.833134491222724816e-1 + pow(R - 0.65e1, 2) * (-0.194569149635646893e0) + pow(R - 0.65e1, 3) * 0.167686720746227813e0 : (R < 0.70e1 ? -0.109078626825475533e0 + R * 0.174701344443667465e-1 + pow(R - 0.675e1, 2) * (-0.688041090759760332e-1) + pow(R - 0.675e1, 3) * 0.685480661220361498e-1 : (R < 0.725e1 ? 0.385372248711764245e-1 + R * (-0.407915769573948938e-2) + pow(R - 0.70e1, 2) * (-0.173930594844489209e-1) + pow(R - 0.70e1, 3) * 0.213237445576275192e-1 : (R < 0.75e1 ? 0.718462175352137244e-1 + R * (-0.877748533340878996e-2) + pow(R - 0.725e1, 2) * (-0.140025106622828233e-2) + pow(R - 0.725e1, 3) * 0.663431942345375086e-2 : (R < 0.775e1 ? 0.677837928936901452e-1 + R * (-0.823367597462535197e-2) + pow(R - 0.75e1, 2) * 0.357548850136203125e-2 + pow(R - 0.75e1, 3) * 0.648231060557508858e-3 : (R < 0.80e1 ? 0.532204108326959774e-1 + R * (-0.632438840008980353e-2) + pow(R - 0.775e1, 2) * 0.406166179678016295e-2 + pow(R - 0.775e1, 3) * (-0.106965614568379358e-2) : (R < 0.825e1 ? 0.388153883491234655e-1 + R * (-0.449411802901543336e-2) + pow(R - 0.80e1, 2) * 0.325941968751731776e-2 + pow(R - 0.80e1, 3) * (-0.997813837822332517e-3) : (R < 0.85e1 ? 0.271018983077498145e-1 + R * (-0.305149827984846226e-2) + pow(R - 0.825e1, 2) * 0.251105930915056837e-2 + pow(R - 0.825e1, 3) * (-0.133055167102687655e-2) : (R < 0.875e1 ? 0.186866143065210974e-1 + R * (-0.204544706359071748e-2) + pow(R - 0.85e1, 2) * 0.151314555588041096e-2 + pow(R - 0.85e1, 3) * (-0.527337462070166644e-3) : (R < 0.90e1 ? 0.130180974726508466e-1 + R * (-0.138775005978866825e-2) + pow(R - 0.875e1, 2) * 0.111764245932778595e-2 + pow(R - 0.875e1, 3) * (-0.671632490292454879e-3) : (R < 0.925e1 ? 0.918144462909149459e-2 + R * (-0.954859922054610575e-3) + pow(R - 0.90e1, 2) * 0.613918091608444761e-3 + pow(R - 0.90e1, 3) * (-0.118568755960010323e-3) : (R < 0.95e1 ? 0.658423338543423324e-2 + R * (-0.670132517992890050e-3) + pow(R - 0.925e1, 2) * 0.524991524638437012e-3 + pow(R - 0.925e1, 3) * (-0.277534207467507925e-3) : (R < 0.100e2 ? 0.461335694875137769e-2 + R * (-0.459674419573829270e-3) + pow(R - 0.95e1, 2) * 0.316840869037806055e-3 + pow(R - 0.95e1, 3) * (-0.813897021802948963e-4) : (R < 0.105e2 ? 0.212440752917244418e-2 + R * (-0.203875827171244432e-3) + pow(R - 0.100e2, 2) * 0.194756315767363703e-3 + pow(R - 0.100e2, 3) * (-0.666106361297496663e-4) : (R < 0.110e2 ? 0.644387722562526151e-3 + R * (-0.590774885011929646e-4) + pow(R - 0.105e2, 2) * 0.948403615727392039e-4 + pow(R - 0.105e2, 3) * (-0.616105015407065229e-4) : (R < 0.120e2 ? 0.125439160673820253e-3 + R * (-0.104450030839836596e-4) + pow(R - 0.110e2, 2) * 0.242460926167941664e-5 + pow(R - 0.110e2, 3) * (-0.266699684695756189e-6) : (R < 0.140e2 ? 0.790076366195451637e-4 + R * (-0.639588361471209647e-5) + pow(R - 0.120e2, 2) * 0.162451020759214796e-5 + pow(R - 0.120e2, 3) * (-0.198177322430497049e-7) : (R < 0.160e2 ? -0.229605701635858235e-5 + R * (-0.135655571260101279e-6) + pow(R - 0.140e2, 2) * 0.150560381413384973e-5 + pow(R - 0.140e2, 3) * (-0.359939049126899535e-6) : (R < 0.180e2 ? -0.264035008250400541e-4 + R * 0.156749109575250345e-5 + pow(R - 0.160e2, 2) * (-0.654030480627547369e-6) + pow(R - 0.160e2, 3) * 0.961375261256478200e-7 : (R < 0.200e2 ? -0.192603357650158083e-5 + R * 0.105019486750087828e-6 + pow(R - 0.180e2, 2) * (-0.772053238736604496e-7) + pow(R - 0.180e2, 3) * 0.146748908368082690e-7 : (R < 0.250e2 ? 0.536996363757094929e-6 + R * (-0.277031187028547456e-7) + pow(R - 0.200e2, 2) * 0.108440211471891612e-7 + pow(R - 0.200e2, 3) * (-0.952782092523642535e-9) : -0.235539732444092185e-6 + R * 0.927843582976368763e-8 + pow(R - 0.250e2, 2) * (-0.344771024066547478e-8) + pow(R - 0.250e2, 3) * 0.339045091742547445e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.5461123296e1 * (R - 0.300e2) * (R - 0.250e2) - 0.5825236912e2 * R - 0.3422165308e4 + 0.2912618456e1 * R * R + 0.75000e3 * (-0.1067929362e-1 * R + 0.4417302258e0) * R) * pow(R, -6));
}

static double radcoeff_4_6_9_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.336351232300000025e0 + pow(R - 0.475e1, 2) * 0.396353623818579504e1 + pow(R - 0.475e1, 3) * (-0.731531382954317966e1) : (R < 0.525e1 ? -0.325366587626775683e1 + R * 0.610146776053551276e0 + pow(R - 0.50e1, 2) * (-0.152294913397159015e1) + pow(R - 0.50e1, 3) * 0.196585167102954017e1 : (R < 0.55e1 ? -0.125552752677542334e1 + R * 0.217269397385794955e0 + pow(R - 0.525e1, 2) * (-0.485603806994350864e-1) + pow(R - 0.525e1, 3) * (-0.218077922734978974e0) : (R < 0.575e1 ? -0.903536113367978899e0 + R * 0.152099596523268876e0 + pow(R - 0.55e1, 2) * (-0.212118822750669317e0) + pow(R - 0.55e1, 3) * 0.128930394950375227e0 : (R < 0.60e1 ? -0.443940469016494921e0 + R * 0.702146342011295554e-1 + pow(R - 0.575e1, 2) * (-0.115421026537887883e0) + pow(R - 0.575e1, 3) * 0.107110454933478552e0 : (R < 0.625e1 ? -0.223716864503277102e0 + R * 0.325873312322128503e-1 + pow(R - 0.60e1, 2) * (-0.350881853377789724e-1) + pow(R - 0.60e1, 3) * 0.421562205157103298e-1 : (R < 0.65e1 ? -0.165002426877619068e0 + R * 0.229475299100190475e-1 + pow(R - 0.625e1, 2) * (-0.347101995099622631e-2) + pow(R - 0.625e1, 3) * (-0.439502531631990635e-2) : (R < 0.675e1 ? -0.148650785950121211e0 + R * 0.203879526877109550e-1 + pow(R - 0.65e1, 2) * (-0.676728893823615608e-2) + pow(R - 0.65e1, 3) * (-0.299795349043065294e-2) : (R < 0.70e1 ? -0.122486699479175606e0 + R * 0.164421919391371275e-1 + pow(R - 0.675e1, 2) * (-0.901575405605914600e-2) + pow(R - 0.675e1, 3) * 0.818978734042572322e-3 : (R < 0.725e1 ? -0.925571579571837499e-1 + R * 0.120878734237405364e-1 + pow(R - 0.70e1, 2) * (-0.840152000552721670e-2) + pow(R - 0.70e1, 3) * 0.274152905026028024e-2 : (R < 0.75e1 ? -0.663106725987802903e-1 + R * 0.840115011790073044e-2 + pow(R - 0.725e1, 2) * (-0.634537321783200641e-2) + pow(R - 0.725e1, 3) * 0.254268976891632937e-2 : (R < 0.775e1 ? -0.464480368179240460e-1 + R * 0.570521784065653945e-2 + pow(R - 0.75e1, 2) * (-0.443835589114475928e-2) + pow(R - 0.75e1, 3) * 0.187005920207441003e-2 : (R < 0.80e1 ? -0.322150150859166137e-1 + R * 0.383667599547311139e-2 + pow(R - 0.775e1, 2) * (-0.303581148958895165e-2) + pow(R - 0.775e1, 3) * 0.129822574278601961e-2 : (R < 0.825e1 ? -0.221885611826081117e-1 + R * 0.256218757745101415e-2 + pow(R - 0.80e1, 2) * (-0.206214218249943688e-2) + pow(R - 0.80e1, 3) * 0.867009794781517908e-3 : (R < 0.85e1 ? -0.151387173144633524e-1 + R * 0.169368082272283054e-2 + pow(R - 0.825e1, 2) * (-0.141188483641329840e-2) + pow(R - 0.825e1, 3) * 0.847989286087904291e-3 : (R < 0.875e1 ? -0.105646826540901368e-1 + R * 0.114673639565766330e-2 + pow(R - 0.85e1, 2) * (-0.775892871847370155e-3) + pow(R - 0.85e1, 3) * 0.229650942466867920e-3 : (R < 0.90e1 ? -0.759182742575701536e-2 + R * 0.801849511446515984e-3 + pow(R - 0.875e1, 2) * (-0.603654664997219201e-3) + pow(R - 0.875e1, 3) * 0.298139347244621999e-3 : (R < 0.925e1 ? -0.541156157100645789e-2 + R * 0.555923306556273039e-3 + pow(R - 0.90e1, 2) * (-0.380050154563752688e-3) + pow(R - 0.90e1, 3) * 0.175671482954642118e-3 : (R < 0.95e1 ? -0.397951810213762695e-2 + R * 0.398836632328392136e-3 + pow(R - 0.925e1, 2) * (-0.248296542347771086e-3) + pow(R - 0.925e1, 3) * 0.524232713368101601e-4 : (R < 0.100e2 ? -0.290818789833650546e-2 + R * 0.284517724530158498e-3 + pow(R - 0.95e1, 2) * (-0.208979088845163464e-3) + pow(R - 0.95e1, 3) * 0.628915747696929454e-4 : (R < 0.105e2 ? -0.133446714602264752e-2 + R * 0.122707316762264750e-3 + pow(R - 0.100e2, 2) * (-0.114641726690624033e-3) + pow(R - 0.100e2, 3) * 0.680421189721891256e-4 : (R < 0.110e2 ? -0.686715869478216816e-3 + R * 0.590971793007825480e-4 + pow(R - 0.105e2, 2) * (-0.125785482323403306e-4) + pow(R - 0.105e2, 3) * (-0.522598545844953479e-5) : (R < 0.120e2 ? -0.509035344130655634e-3 + R * 0.425991419746050629e-4 + pow(R - 0.110e2, 2) * (-0.204175264200146328e-4) + pow(R - 0.110e2, 3) * 0.454859160540956658e-5 : (R < 0.140e2 ? -0.198632942659654021e-3 + R * 0.154098639508045038e-4 + pow(R - 0.120e2, 2) * (-0.677175160378593222e-5) + pow(R - 0.120e2, 3) * 0.108125152419183988e-5 : (R < 0.160e2 ? -0.195021031334799571e-4 + R * 0.129787582596285430e-5 + pow(R - 0.140e2, 2) * (-0.284242458634893154e-6) + pow(R - 0.140e2, 3) * 0.346936020173300890e-8 : (R < 0.180e2 ? -0.308591789260524704e-5 + R * 0.202538313844077948e-6 + pow(R - 0.160e2, 2) * (-0.263426297424495099e-6) + pow(R - 0.160e2, 3) * 0.607687582387280590e-7 : (R < 0.200e2 ? 0.218716861860498214e-5 + R * (-0.121941776989165661e-6) + pow(R - 0.180e2, 2) * 0.101186252007873268e-6 + pow(R - 0.180e2, 3) * (-0.195997188066452149e-7) : (R < 0.250e2 ? -0.955851770851696487e-6 + R * 0.476066053625848216e-7 + pow(R - 0.200e2, 2) * (-0.164120608319980207e-7) + pow(R - 0.200e2, 3) * 0.140166890469621106e-8 : 0.283941333129488420e-6 + R * (-0.113888351051795376e-7) + pow(R - 0.250e2, 2) * 0.461297273844514803e-8 + pow(R - 0.250e2, 3) * (-0.462544972281848185e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1190292352e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1269765660e2 * R - 0.7454750394e3 + 0.6348828300e0 * R * R + 0.75000e3 * (-0.2326927928e-2 * R + 0.962368945e-1) * R) * pow(R, -6));
}

static double radcoeff_4_6_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.386404060400001081e0 + R * 0.222044604925031308e-15 + pow(R - 0.475e1, 2) * 0.829546783982982738e1 + pow(R - 0.475e1, 3) * (-0.156627268857193105e2) : (R < 0.525e1 ? -0.616753057221271561e1 + R * 0.121097262884254309e1 + pow(R - 0.50e1, 2) * (-0.345157732445965548e1) + pow(R - 0.50e1, 3) * 0.576028274355793002e1 : (R < 0.55e1 ? -0.290313758614659401e1 + R * 0.565236981029827446e0 + pow(R - 0.525e1, 2) * 0.868634733208792365e0 + pow(R - 0.525e1, 3) * (-0.255530889491240787e1) : (R < 0.575e1 ? -0.264235783520980894e1 + R * 0.520433929838147069e0 + pow(R - 0.55e1, 2) * (-0.104784693797551376e1) + pow(R - 0.55e1, 3) * 0.116174529689170303e1 : (R < 0.60e1 ? -0.929642700101110719e0 + R * 0.214337704017584452e0 + pow(R - 0.575e1, 2) * (-0.176537965306736405e0) + pow(R - 0.575e1, 3) * (-0.723433041454405790e0) : (R < 0.625e1 ? 0.391496103350908953e0 + R * (-0.957497390848482954e-2) + pow(R - 0.60e1, 2) * (-0.719112746397540747e0) + pow(R - 0.60e1, 3) * 0.684796891325919921e0 : (R < 0.65e1 ? 0.180198248359778246e1 + R * (-0.240731929983645204e0) + pow(R - 0.625e1, 2) * (-0.205515077903100751e0) + pow(R - 0.625e1, 3) * 0.288547716150726052e0 : (R < 0.675e1 ? 0.210990282342007385e1 + R * (-0.289386772156934424e0) + pow(R - 0.65e1, 2) * 0.108957092099438244e-1 + pow(R - 0.65e1, 3) * 0.176036244071175407e0 : (R < 0.70e1 ? 0.185376548157316567e1 + R * (-0.250932121788617124e0) + pow(R - 0.675e1, 2) * 0.142922892263325385e0 + pow(R - 0.675e1, 3) * (-0.105280588354276592e-1) : (R < 0.725e1 ? 0.137612161572017988e1 + R * (-0.181444686688597118e0) + pow(R - 0.70e1, 2) * 0.135026848136754640e0 + pow(R - 0.70e1, 3) * (-0.464565111294649863e-1) : (R < 0.75e1 ? 0.957514406063210144e0 + R * (-0.122641858456994490e0) + pow(R - 0.725e1, 2) * 0.100184464789655897e0 + pow(R - 0.725e1, 3) * (-0.411588694467116337e-1) : (R < 0.775e1 ? 0.645320744975687255e0 + R * (-0.802669140834249700e-1) + pow(R - 0.75e1, 2) * 0.693153127046221701e-1 + pow(R - 0.75e1, 3) * (-0.311526402036890367e-1) : (R < 0.80e1 ? 0.425838035582118191e0 + R * (-0.514503777693055761e-1) + pow(R - 0.775e1, 2) * 0.459508325518553917e-1 + pow(R - 0.775e1, 3) * (-0.214622446185322516e-1) : (R < 0.825e1 ? 0.276764651764821457e0 + R * (-0.324991323593526796e-1) + pow(R - 0.80e1, 2) * 0.298541490879562013e-1 + pow(R - 0.80e1, 3) * (-0.146391941221819012e-1) : (R < 0.85e1 ? 0.177898437094590411e0 + R * (-0.203169067132836882e-1) + pow(R - 0.825e1, 2) * 0.188747534963197745e-1 + pow(R - 0.825e1, 3) * (-0.948369614074008778e-2) : (R < 0.875e1 ? 0.113826864800856825e0 + R * (-0.126577229915125662e-1) + pow(R - 0.85e1, 2) * 0.117619813907647083e-1 + pow(R - 0.85e1, 3) * (-0.592826905885777359e-2) : (R < 0.90e1 ? 0.727367572738278900e-1 + R * (-0.788828274466604577e-2) + pow(R - 0.875e1, 2) * 0.731577959662137785e-2 + pow(R - 0.875e1, 3) * (-0.370114858382877485e-2) : (R < 0.925e1 ? 0.464608431024092702e-1 + R * (-0.492435830582325235e-2) + pow(R - 0.90e1, 2) * 0.453991815874979672e-2 + pow(R - 0.90e1, 3) * (-0.213002185382714024e-2) : (R < 0.95e1 ? 0.294084415643787213e-1 + R * (-0.305377832404094300e-2) + pow(R - 0.925e1, 2) * 0.294240176837944154e-2 + pow(R - 0.925e1, 3) * (-0.151253331286267971e-2) : (R < 0.100e2 ? 0.182864999056232616e-1 + R * (-0.186617743601297475e-2) + pow(R - 0.95e1, 2) * 0.180800178373243165e-2 + pow(R - 0.95e1, 3) * (-0.691476618612963919e-3) : (R < 0.105e2 ? 0.575812257650066064e-2 + R * (-0.576783116240266094e-3) + pow(R - 0.100e2, 2) * 0.770786855812985667e-3 + pow(R - 0.100e2, 3) * (-0.350378052264906960e-3) : (R < 0.110e2 ? 0.572987209472587342e-3 + R * (-0.687797996259607012e-4) + pow(R - 0.105e2, 2) * 0.245219777415625173e-3 + pow(R - 0.105e2, 3) * (-0.157775192327407499e-3) : (R < 0.120e2 ? -0.781201960085197030e-3 + R * 0.581085835441088201e-4 + pow(R - 0.110e2, 2) * 0.855698892451389027e-5 + pow(R - 0.110e2, 3) * (-0.727539104862271191e-5) : (R < 0.140e2 ? -0.723374018647221615e-3 + R * 0.533963882472684699e-4 + pow(R - 0.120e2, 2) * (-0.132691842213542489e-4) + pow(R - 0.120e2, 3) * 0.120895581011000818e-5 : (R < 0.160e2 ? -0.226809368754402003e-3 + R * 0.148271210831715710e-4 + pow(R - 0.140e2, 2) * (-0.601544936069419892e-5) + pow(R - 0.140e2, 3) * 0.103138397330420678e-5 : (R < 0.180e2 ? -0.556570582007241059e-4 + R * 0.314193132004525659e-5 + pow(R - 0.160e2, 2) * 0.172854479131042334e-6 + pow(R - 0.160e2, 3) * (-0.207829645076835349e-6) : (R < 0.200e2 ? -0.241825966052532406e-4 + R * 0.133939349564740216e-5 + pow(R - 0.180e2, 2) * (-0.107412339132996979e-5) + pow(R - 0.180e2, 3) * 0.207007209528134293e-6 : (R < 0.250e2 ? 0.942510852529730019e-5 + R * (-0.473013555334865056e-6) + pow(R - 0.200e2, 2) * 0.167919865838836101e-6 + pow(R - 0.200e2, 3) * (-0.144411249943726194e-7) : -0.308489254828874037e-5 + R * 0.123100728475549606e-6 + pow(R - 0.250e2, 2) * (-0.486970090767531713e-7) + pow(R - 0.250e2, 3) * 0.485790292432865075e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1125202605e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1200210844e3 * R - 0.7051444618e4 + 0.6001054220e1 * R * R + 0.75000e3 * (-0.2200425769e-1 * R + 0.910181461e0) * R) * pow(R, -6));
}

static double radcoeff_4_6_10_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.312142691400000005e0 + pow(R - 0.475e1, 2) * (-0.599292481857060544e1) + pow(R - 0.475e1, 3) * 0.109663864550824233e2 : (R < 0.525e1 ? 0.481025942338674284e1 + R * (-0.940264948957348579e0) + pow(R - 0.50e1, 2) * 0.223186502274121157e1 + pow(R - 0.50e1, 3) * (-0.350799546124726902e1) : (R < 0.55e1 ? 0.248947590567567989e1 + R * (-0.482081586570605736e0) + pow(R - 0.525e1, 2) * (-0.399131573194239975e0) + pow(R - 0.525e1, 3) * 0.130593507630665195e1 : (R < 0.575e1 ? 0.223580169678125662e1 + R * (-0.436784546360228454e0) + pow(R - 0.55e1, 2) * 0.580319734035749102e0 + pow(R - 0.55e1, 3) * (-0.379377951179341588e0) : (R < 0.60e1 ? 0.100674151793376265e1 + R * (-0.217758045188480437e0) + pow(R - 0.575e1, 2) * 0.295786270651242911e0 + pow(R - 0.575e1, 3) * 0.242609483610715687e0 : (R < 0.625e1 ? -0.131275547984901209e0 + R * (-0.243756316858498023e-1) + pow(R - 0.60e1, 2) * 0.477743383359279683e0 + pow(R - 0.60e1, 3) * (-0.319990780063522107e0) : (R < 0.65e1 ? -0.122437532007424776e1 + R * 0.154497788731879637e0 + pow(R - 0.625e1, 2) * 0.237750298311638075e0 + pow(R - 0.625e1, 3) * (-0.260994683356626345e0) : (R < 0.675e1 ? -0.166819516752915309e1 + R * 0.224436434758331249e0 + pow(R - 0.65e1, 2) * 0.420042857941682890e-1 + pow(R - 0.65e1, 3) * (-0.168440131309973040e0) : (R < 0.70e1 ? -0.159678420008486910e1 + R * 0.213856053034795407e0 + pow(R - 0.675e1, 2) * (-0.843258126883114911e-1) + pow(R - 0.675e1, 3) * (-0.297805162034807669e-1) : (R < 0.725e1 ? -0.126829261201740917e1 + R * 0.166109299902487045e0 + pow(R - 0.70e1, 2) * (-0.106661199840922066e0) + pow(R - 0.70e1, 3) * 0.246156220438955575e-1 : (R < 0.75e1 ? -0.921389329705609161e0 + R * 0.117394129115256429e0 + pow(R - 0.725e1, 2) * (-0.881994833080003982e-1) + pow(R - 0.725e1, 3) * 0.313192081878987533e-1 : (R < 0.775e1 ? -0.639707008893654283e0 + R * 0.791667389964872403e-1 + pow(R - 0.75e1, 2) * (-0.647100771670763297e-1) + pow(R - 0.75e1, 3) * 0.273877064845094997e-1 : (R < 0.80e1 ? -0.432369667765658161e0 + R * 0.519468953787946067e-1 + pow(R - 0.775e1, 2) * (-0.441692973036942049e-1) + pow(R - 0.775e1, 3) * 0.201039709940630876e-1 : (R < 0.825e1 ? -0.288294891576674706e0 + R * 0.336317412883343353e-1 + pow(R - 0.80e1, 2) * (-0.290913190581468875e-1) + pow(R - 0.80e1, 3) * 0.138149765792382143e-1 : (R < 0.85e1 ? -0.191265590789911427e0 + R * 0.216763898678680525e-1 + pow(R - 0.825e1, 2) * (-0.187300866237182263e-1) + pow(R - 0.825e1, 3) * 0.895910899298408767e-2 : (R < 0.875e1 ? -0.126971946932644353e0 + R * 0.139911794921934556e-1 + pow(R - 0.85e1, 2) * (-0.120107548789801597e-1) + pow(R - 0.85e1, 3) * 0.575984088882532629e-2 : (R < 0.90e1 ? -0.845353079613836156e-1 + R * 0.906577221935812687e-2 + pow(R - 0.875e1, 2) * (-0.769087421236116456e-2) + pow(R - 0.875e1, 3) * 0.364478703571462443e-2 : (R < 0.925e1 ? -0.565006819693663204e-1 + R * 0.590373268237403583e-2 + pow(R - 0.90e1, 2) * (-0.495728393557519614e-2) + pow(R - 0.90e1, 3) * 0.226267804031620627e-2 : (R < 0.95e1 ? -0.377720518950979689e-1 + R * 0.384934284714572635e-2 + pow(R - 0.925e1, 2) * (-0.326027540533804132e-2) + pow(R - 0.925e1, 3) * 0.157275757102054133e-2 : (R < 0.100e2 ? -0.252664110189090435e-1 + R * 0.251409718904305754e-2 + pow(R - 0.95e1, 2) * (-0.208070722707263522e-2) + pow(R - 0.95e1, 3) * 0.789749838773039269e-3 : (R < 0.105e2 ? -0.108039206159020202e-1 + R * 0.102570234105020205e-2 + pow(R - 0.100e2, 2) * (-0.896082468913076097e-3) + pow(R - 0.100e2, 3) * 0.348332824825343956e-3 : (R < 0.110e2 ? -0.431865470193940667e-2 + R * 0.390869490756133933e-3 + pow(R - 0.105e2, 2) * (-0.373583231675060135e-3) + pow(R - 0.105e2, 3) * 0.182381370725584387e-3 : (R < 0.120e2 ? -0.178448359861788303e-2 + R * 0.154072287125262095e-3 + pow(R - 0.110e2, 2) * (-0.100011175586683514e-3) + pow(R - 0.110e2, 3) * 0.261036465214214217e-4 : (R < 0.140e2 ? -0.397854188378911973e-3 + R * 0.323608755161593288e-4 + pow(R - 0.120e2, 2) * (-0.217002360224192489e-4) + pow(R - 0.120e2, 3) * 0.409373365091979156e-5 : (R < 0.160e2 ? 0.755607006417222810e-4 + R * (-0.531526476248016311e-5) + pow(R - 0.140e2, 2) * 0.286216588309950171e-5 + pow(R - 0.140e2, 3) * (-0.444992016304709803e-6) : (R < 0.180e2 ? -0.142907213441811987e-4 + R * 0.793494574261324926e-6 + pow(R - 0.160e2, 2) * 0.192213785271242810e-6 + pow(R - 0.160e2, 3) * (-0.931076213259526419e-7) : (R < 0.200e2 ? -0.799487350712756319e-5 + R * 0.445058259434864572e-6 + pow(R - 0.180e2, 2) * (-0.366431942684473014e-6) + pow(R - 0.180e2, 3) * 0.708966528835203583e-7 : (R < 0.250e2 ? 0.340593066791566362e-5 + R * (-0.169909676700783186e-6) + pow(R - 0.200e2, 2) * 0.589479746166491221e-7 + pow(R - 0.200e2, 3) * (-0.504212331529849633e-8) : -0.103364781905801972e-5 + R * 0.414108208183207951e-7 + pow(R - 0.250e2, 2) * (-0.166838751128283212e-7) + pow(R - 0.250e2, 3) * 0.167098356423283218e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2475882848e1 * (R - 0.300e2) * (R - 0.250e2) + 0.2640910848e2 * R + 0.1551642596e4 - 0.1320455424e1 * R * R + 0.75000e3 * (0.484187460e-2 * R - 0.2002803318e0) * R) * pow(R, -6));
}

static double radcoeff_4_8_4_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.113653803700000000e0 + pow(R - 0.475e1, 2) * (-0.151054355901831294e1) + pow(R - 0.475e1, 3) * 0.261011793399325143e1 : (R < 0.525e1 ? 0.138940125840710893e1 + R * (-0.265874666885421829e0) + pow(R - 0.50e1, 2) * 0.447044891476625739e0 + pow(R - 0.50e1, 3) * (-0.570359725179754307e0) : (R < 0.55e1 ? 0.796384707766142563e0 + R * (-0.149294669618312864e0) + pow(R - 0.525e1, 2) * 0.192750975918099601e-1 + pow(R - 0.525e1, 3) * 0.275425222085765808e0 : (R < 0.575e1 ? 0.464854141807297394e0 + R * (-0.880148916813267984e-1) + pow(R - 0.55e1, 2) * 0.225844014156134310e0 + pow(R - 0.55e1, 3) * (-0.125414580123308361e0) : (R < 0.60e1 ? -0.370791566258152211e-1 + R * 0.139188162362003862e-2 + pow(R - 0.575e1, 2) * 0.131783079063653025e0 + pow(R - 0.575e1, 3) * (-0.123139104472532679e0) : (R < 0.625e1 ? -0.287584507351079988e0 + R * 0.441948390668466667e-1 + pow(R - 0.60e1, 2) * 0.394287507092535155e-1 + pow(R - 0.60e1, 3) * (-0.121279648386560801e0) : (R < 0.65e1 ? -0.268105462951208018e0 + R * 0.411692803489932813e-1 + pow(R - 0.625e1, 2) * (-0.515309855806670783e-1) + pow(R - 0.625e1, 3) * 0.145485799387758130e-1 : (R < 0.675e1 ? -0.121354206651671362e0 + R * 0.181316462971802088e-1 + pow(R - 0.65e1, 2) * (-0.406195506265852185e-1) + pow(R - 0.65e1, 3) * 0.374955316394575480e-1 : (R < 0.70e1 ? -0.336713597501297618e-1 + R * 0.485228316628589108e-2 + pow(R - 0.675e1, 2) * (-0.124979018969920558e-1) + pow(R - 0.675e1, 3) * 0.135080291705939638e-1 : (R < 0.725e1 ? -0.822804730983362105e-2 + R * 0.113608768727623162e-2 + pow(R - 0.70e1, 2) * (-0.236688001904658118e-2) + pow(R - 0.70e1, 3) * 0.216411035336661712e-2 : (R < 0.75e1 ? -0.270406052931656876e-2 + R * 0.358418369009181877e-3 + pow(R - 0.725e1, 2) * (-0.743797254021618228e-3) + pow(R - 0.725e1, 3) * 0.817506585219562876e-3 : (R < 0.775e1 ? -0.109815325018280605e-2 + R * 0.139802226727040802e-3 + pow(R - 0.75e1, 2) * (-0.130667315106946017e-3) + pow(R - 0.75e1, 3) * 0.247170452751309757e-4 : (R < 0.80e1 ? -0.635514863920575161e-3 + R * 0.791030151626548686e-4 + pow(R - 0.775e1, 2) * (-0.112129531150597785e-3) + pow(R - 0.775e1, 3) * 0.137761204239913337e-3 : (R < 0.825e1 ? -0.398494122559717742e-3 + R * 0.488684753823397149e-4 + pow(R - 0.80e1, 2) * (-0.880862797066277052e-5) + pow(R - 0.80e1, 3) * (-0.935280113547843847e-4) : (R < 0.85e1 ? -0.219494304040886661e-3 + R * 0.269276592679862600e-4 + pow(R - 0.825e1, 2) * (-0.789546364867510709e-4) + pow(R - 0.825e1, 3) * 0.723892868112241042e-4 : (R < 0.875e1 ? -0.311110700157958911e-5 + R * 0.102333230171524582e-5 + pow(R - 0.85e1, 2) * (-0.246626713783329893e-4) + pow(R - 0.85e1, 3) * 0.417311323338880264e-4 : (R < 0.90e1 ? 0.354335732749133778e-4 + R * (-0.348341607484724306e-5) + pow(R - 0.875e1, 2) * 0.663567787208302875e-5 + pow(R - 0.875e1, 3) * (-0.702659426107762230e-4) : (R < 0.925e1 ? 0.123463625519936446e-3 + R * (-0.133404413783262722e-4) + pow(R - 0.90e1, 2) * (-0.460637790859991402e-4) + pow(R - 0.90e1, 3) * 0.114828884061216898e-3 : (R < 0.95e1 ? 0.136267473119591005e-3 + R * (-0.148419151598476756e-4) + pow(R - 0.925e1, 2) * 0.400578839599135332e-4 + pow(R - 0.925e1, 3) * (-0.288954667860913205e-4) : (R < 0.100e2 ? -0.485299398311207923e-6 + R * (-0.230873202283030736e-6) + pow(R - 0.95e1, 2) * 0.183862838703450429e-4 + pow(R - 0.95e1, 3) * (-0.177822069235579597e-4) : (R < 0.105e2 ? -0.486077910732353981e-4 + R * 0.481875547539353985e-5 + pow(R - 0.100e2, 2) * (-0.828702651499189830e-5) + pow(R - 0.100e2, 3) * (-0.477390164759036406e-5) : (R < 0.110e2 ? 0.733319684742568789e-4 + R * (-0.704869727529113149e-5) + pow(R - 0.105e2, 2) * (-0.154478789863774444e-4) + pow(R - 0.105e2, 3) * 0.194476887619194114e-4 : (R < 0.120e2 ? 0.813841963875191538e-4 + R * (-0.791080969022901392e-5) + pow(R - 0.110e2, 2) * 0.137236541565016728e-4 + pow(R - 0.110e2, 3) * (-0.521964672527265816e-5) : (R < 0.140e2 ? -0.515722138274762943e-4 + R * 0.387755844695635798e-5 + pow(R - 0.120e2, 2) * (-0.193528601931630002e-5) + pow(R - 0.120e2, 3) * 0.427576343669060516e-6 : (R < 0.160e2 ? -0.193495558100783825e-4 + R * 0.126733049371988451e-5 + pow(R - 0.140e2, 2) * 0.630172042698063284e-6 + pow(R - 0.140e2, 3) * (-0.276425219654002783e-6) : (R < 0.180e2 ? -0.629763795562566110e-5 + R * 0.470916028664103823e-6 + pow(R - 0.160e2, 2) * (-0.102837927522595352e-5) + pow(R - 0.160e2, 3) * 0.252076828446950804e-6 : (R < 0.200e2 ? 0.112001724423734125e-4 + R * (-0.617679130876300718e-6) + pow(R - 0.180e2, 2) * 0.484081695455751198e-6 + pow(R - 0.180e2, 3) * (-0.929651734088004189e-7) : (R < 0.250e2 ? -0.402211618142198010e-5 + R * 0.203065570041099046e-6 + pow(R - 0.200e2, 2) * (-0.737093449970513287e-7) + pow(R - 0.200e2, 3) * 0.637144276336630494e-8 : 0.141246160702353544e-5 + R * (-0.561696726769414133e-7) + pow(R - 0.250e2, 2) * 0.218622964534432354e-7 + pow(R - 0.250e2, 3) * (-0.217307878041099012e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1254247021e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1337862472e3 * R + 0.7859910480e4 - 0.6689312360e1 * R * R + 0.75000e3 * (0.2452741855e-1 * R - 0.1014542402e1) * R) * pow(R, -6));
}

static double radcoeff_4_8_4_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.758565452799999929e-1 + pow(R - 0.475e1, 2) * 0.144495572521337767e0 + pow(R - 0.475e1, 3) * 0.180903649114649012e0 : (R < 0.525e1 ? -0.594835054828327880e0 + R * 0.106167220469665577e0 + pow(R - 0.50e1, 2) * 0.280173309357324540e0 + pow(R - 0.50e1, 3) * (-0.440148603663947147e0) : (R < 0.55e1 ? -0.886385200257023165e0 + R * 0.163726011961337736e0 + pow(R - 0.525e1, 2) * (-0.499381433906358335e-1) + pow(R - 0.525e1, 3) * (-0.177044678938860445e0) : (R < 0.575e1 ? -0.572365437843409208e0 + R * 0.105561062964983493e0 + pow(R - 0.55e1, 2) * (-0.182721652594781153e0) + pow(R - 0.55e1, 3) * 0.541735370193884985e-1 : (R < 0.60e1 ? -0.116020173007687494e0 + R * 0.243577748587282608e-1 + pow(R - 0.575e1, 2) * (-0.142091499830239776e0) + pow(R - 0.575e1, 3) * 0.911614396613068673e-1 : (R < 0.625e1 ? 0.200241385619379514e0 + R * (-0.295952051198965851e-1) + pow(R - 0.60e1, 2) * (-0.737204200842596219e-1) + pow(R - 0.60e1, 3) * 0.138830962895383769e0 : (R < 0.65e1 ? 0.265486871279637049e0 + R * (-0.404246096191419324e-1) + pow(R - 0.625e1, 2) * 0.304028020872782190e-1 + pow(R - 0.625e1, 3) * 0.165988457171581012e-1 : (R < 0.675e1 ? 0.148607453372981924e0 + R * (-0.221109250035356787e-1) + pow(R - 0.65e1, 2) * 0.428519363751467958e-1 + pow(R - 0.65e1, 3) * (-0.348190340200163068e-1) : (R < 0.70e1 ? 0.501842066553285365e-1 + R * (-0.721352569471533922e-2) + pow(R - 0.675e1, 2) * 0.167376608601345657e-1 + pow(R - 0.675e1, 3) * (-0.167200506930928229e-1) : (R < 0.725e1 ? 0.143323131917207323e-1 + R * (-0.197970476960296175e-2) + pow(R - 0.70e1, 2) * 0.419762284031494678e-2 + pow(R - 0.70e1, 3) * (-0.417667112441239777e-2) : (R < 0.75e1 ? 0.499068364652789469e-2 + R * (-0.664019185272813001e-3) + pow(R - 0.725e1, 2) * 0.106511949700564845e-2 + pow(R - 0.725e1, 3) * (-0.921662633257584675e-3) : (R < 0.775e1 ? 0.234474260073339481e-2 + R * (-0.304271180505785938e-3) + pow(R - 0.75e1, 2) * 0.373872522062459914e-3 + pow(R - 0.75e1, 3) * (-0.153979237277264511e-3) : (R < 0.80e1 ? 0.114069876395933361e-2 + R * (-0.146206026464043050e-3) + pow(R - 0.775e1, 2) * 0.258388094104511530e-3 + pow(R - 0.775e1, 3) * (-0.205520435553357213e-3) : (R < 0.825e1 ? 0.428365039944334186e-3 + R * (-0.555470610780417758e-4) + pow(R - 0.80e1, 2) * 0.104247767439493620e-3 + pow(R - 0.80e1, 3) * 0.914485135706939430e-4 : (R < 0.85e1 ? -0.135172051683733735e-3 + R * 0.137234189362101487e-4 + pow(R - 0.825e1, 2) * 0.172834152617514078e-3 + pow(R - 0.825e1, 3) * (-0.300165085609418666e-3) : (R < 0.875e1 ? -0.385217040042210089e-3 + R * 0.438595416932011876e-4 + pow(R - 0.85e1, 2) * (-0.522896615895499086e-4) + pow(R - 0.85e1, 3) * 0.933617912349805868e-4 : (R < 0.90e1 ? -0.311430785194119594e-3 + R * 0.352200467549850950e-4 + pow(R - 0.875e1, 2) * 0.177316818366855382e-4 + pow(R - 0.875e1, 3) * (-0.724647241945036572e-4) : (R < 0.925e1 ? -0.268963162581725907e-3 + R * 0.304987518868584301e-4 + pow(R - 0.90e1, 2) * (-0.366168613091922114e-4) + pow(R - 0.90e1, 3) * (-0.446175475129660391e-4) : (R < 0.95e1 ? -0.252123230706260057e-4 + R * 0.382453107358118989e-5 + pow(R - 0.925e1, 2) * (-0.700800219439167424e-4) + pow(R - 0.925e1, 3) * 0.737277947583679161e-4 : (R < 0.100e2 ? 0.173112142171240335e-3 + R * (-0.173915183811831937e-4) + pow(R - 0.95e1, 2) * (-0.147841758751407952e-4) + pow(R - 0.95e1, 3) * 0.291388376990143607e-4 : (R < 0.105e2 ? 0.102358928923332188e-3 + R * (-0.103215659820632200e-4) + pow(R - 0.100e2, 2) * 0.289240806733807458e-4 + pow(R - 0.100e2, 3) * (-0.284932349065086090e-4) : (R < 0.110e2 ? 0.267096725469213029e-4 + R * (-0.276741148856393349e-5) + pow(R - 0.105e2, 2) * (-0.138157716863821676e-4) + pow(R - 0.105e2, 3) * 0.176474166950200644e-4 : (R < 0.120e2 ? 0.318439575284915684e-4 + R * (-0.334762065368105197e-5) + pow(R - 0.110e2, 2) * 0.126553533561479324e-4 + pow(R - 0.110e2, 3) * (-0.559721055846688026e-5) : (R < 0.140e2 ? -0.633268001165700548e-4 + R * 0.517145438321417119e-5 + pow(R - 0.120e2, 2) * (-0.413627831925270838e-5) + pow(R - 0.120e2, 3) * 0.842469251822811228e-6 : (R < 0.160e2 ? 0.169645921929209813e-4 + R * (-0.126402787192292718e-5) + pow(R - 0.140e2, 2) * 0.918537191684158881e-6 + pow(R - 0.140e2, 3) * (-0.152976705211347634e-6) : (R < 0.180e2 ? -0.999992554924058531e-5 + R * 0.574400432277536632e-6 + pow(R - 0.160e2, 2) * 0.676960416073044121e-9 + pow(R - 0.160e2, 3) * (-0.312174049149206699e-7) : (R < 0.200e2 ? -0.355273863523005368e-5 + R * 0.202499414962780752e-6 + pow(R - 0.180e2, 2) * (-0.186627469073450993e-6) + pow(R - 0.180e2, 3) * 0.366728714960302980e-7 : (R < 0.250e2 ? 0.212284282727319042e-5 + R * (-0.103936003378659524e-6) + pow(R - 0.200e2, 2) * 0.334097599027308348e-7 + pow(R - 0.200e2, 3) * (-0.280346888939978602e-8) : -0.488282594391622098e-6 + R * 0.199014289436648827e-7 + pow(R - 0.250e2, 2) * (-0.864227343826595254e-8) + pow(R - 0.250e2, 3) * 0.879031485906595236e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1411928310e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1506057276e3 * R + 0.8848012400e4 - 0.7530286380e1 * R * R + 0.75000e3 * (0.2761090893e-1 * R - 0.1142085672e1) * R) * pow(R, -6));
}

static double radcoeff_4_8_6_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.141078399500000007e0 + pow(R - 0.475e1, 2) * 0.219838527997574129e1 + pow(R - 0.475e1, 3) * (-0.394873228598296411e1) : (R < 0.525e1 ? -0.185940494330032347e1 + R * 0.358805336366064709e0 + pow(R - 0.50e1, 2) * (-0.763163934511482123e0) + pow(R - 0.50e1, 3) * 0.991428223068892667e0 : (R < 0.55e1 ? -0.864243452209640495e0 + R * 0.163116160935741050e0 + pow(R - 0.525e1, 2) * (-0.195927672098126678e-1) + pow(R - 0.525e1, 3) * (-0.310588236372606352e0) : (R < 0.575e1 ? -0.496146712770340503e0 + R * 0.950844830109710132e-1 + pow(R - 0.55e1, 2) * (-0.252533944489267470e0) + pow(R - 0.55e1, 3) * 0.967346757015335595e-1 : (R < 0.60e1 ? 0.111324413172844749e0 + R * (-0.130447375396251716e-1) + pow(R - 0.575e1, 2) * (-0.179982937713117297e0) + pow(R - 0.575e1, 3) * 0.243935191806471885e0 : (R < 0.625e1 ? 0.369408689294822012e0 + R * (-0.572983579324703382e-1) + pow(R - 0.60e1, 2) * 0.296845614173662500e-2 + pow(R - 0.60e1, 3) * 0.603202005925789764e-1 : (R < 0.65e1 ? 0.290572560425584159e0 + R * (-0.445040922504934683e-1) + pow(R - 0.625e1, 2) * 0.482086065861708560e-1 + pow(R - 0.625e1, 3) * (-0.415084627278776864e-2) : (R < 0.675e1 ? 0.141901613854112374e0 + R * (-0.211780726335557522e-1) + pow(R - 0.65e1, 2) * 0.450954718815800293e-1 + pow(R - 0.65e1, 3) * (-0.399518974214280662e-1) : (R < 0.70e1 ? 0.424627350231636322e-1 + R * (-0.612131745928350037e-2) + pow(R - 0.675e1, 2) * 0.151315488155089779e-1 + pow(R - 0.675e1, 3) * (-0.157266903582999017e-1) : (R < 0.725e1 ? 0.108435875282717024e-1 + R * (-0.150429749371024319e-2) + pow(R - 0.70e1, 2) * 0.333653104678405124e-2 + pow(R - 0.70e1, 3) * (-0.335313173737231476e-2) : (R < 0.75e1 ? 0.346296644617756760e-2 + R * (-0.464744171075526583e-3) + pow(R - 0.725e1, 2) * 0.821682243754815063e-3 + pow(R - 0.725e1, 3) * (-0.718782344690834093e-3) : (R < 0.775e1 ? 0.143256987041737887e-2 + R * (-0.188674738827650538e-3) + pow(R - 0.75e1, 2) * 0.282595485236689439e-3 + pow(R - 0.75e1, 3) * (-0.149431345304349187e-3) : (R < 0.80e1 ? 0.569982141827502452e-3 + R * (-0.753953734538712810e-4) + pow(R - 0.775e1, 2) * 0.170521976258427535e-3 + pow(R - 0.775e1, 3) * (-0.157003662251769605e-3) : (R < 0.825e1 ? 0.131604171464914542e-3 + R * (-0.195725719968643176e-4) + pow(R - 0.80e1, 2) * 0.527692295696003113e-4 + pow(R - 0.80e1, 3) * (-0.166048344885721788e-4) : (R < 0.85e1 ? -0.573446708509605895e-4 + R * 0.369863632132855601e-5 + pow(R - 0.825e1, 2) * 0.403156037031711763e-4 + pow(R - 0.825e1, 3) * (-0.160242125939415839e-4) : (R < 0.875e1 ? -0.200878050858175835e-3 + R * 0.208518983115500993e-4 + pow(R - 0.85e1, 2) * 0.282974442577149867e-4 + pow(R - 0.85e1, 3) * 0.119297190433850146e-5 : (R < 0.90e1 ? -0.324849358564121746e-3 + R * 0.352243026724710574e-4 + pow(R - 0.875e1, 2) * 0.291921731859688628e-4 + pow(R - 0.875e1, 3) * (-0.735210569114123669e-4) : (R < 0.925e1 ? -0.331471610053091009e-3 + R * 0.360351910945656709e-4 + pow(R - 0.90e1, 2) * (-0.259486194975904158e-4) + pow(R - 0.90e1, 3) * (-0.745380890906890601e-4) : (R < 0.95e1 ? -0.849686929703129040e-4 + R * 0.908498964126626084e-5 + pow(R - 0.925e1, 2) * (-0.818521863156072176e-4) + pow(R - 0.925e1, 3) * 0.133337492032568688e-3 : (R < 0.100e2 ? 0.632894210140918042e-4 + R * (-0.684032376043071559e-5) + pow(R - 0.95e1, 2) * 0.181509327088193085e-4 + pow(R - 0.95e1, 3) * (-0.250072761199157533e-4) : (R < 0.105e2 ? 0.707464884874821977e-4 + R * (-0.744484814154822037e-5) + pow(R - 0.100e2, 2) * (-0.193599814710543197e-4) + pow(R - 0.100e2, 3) * 0.395271488443015178e-4 : (R < 0.110e2 ? -0.371491049775478062e-4 + R * 0.284053202062360075e-5 + pow(R - 0.105e2, 2) * 0.399307417953979603e-4 + pow(R - 0.105e2, 3) * (-0.384071397372903289e-4) : (R < 0.120e2 ? -0.154346568912191935e-3 + R * 0.139659190130538127e-4 + pow(R - 0.110e2, 2) * (-0.176799678105375297e-4) + pow(R - 0.110e2, 3) * 0.614630551848371662e-5 : (R < 0.140e2 ? 0.371719975828411426e-4 + R * (-0.295510005257009517e-5) + pow(R - 0.120e2, 2) * 0.758948744913621436e-6 + pow(R - 0.120e2, 3) * (-0.379372220642869375e-7) : (R < 0.160e2 ? 0.377661837761873304e-5 + R * (-0.374551737687052382e-6) + pow(R - 0.140e2, 2) * 0.531325412527899798e-6 + pow(R - 0.140e2, 3) * (-0.984118212546867737e-7) : (R < 0.180e2 ? -0.999513126319288617e-5 + R * 0.569808057368305421e-6 + pow(R - 0.160e2, 2) * (-0.591455150002208638e-7) + pow(R - 0.160e2, 3) * (-0.123598805169659304e-7) : (R < 0.200e2 ? -0.340238109564895425e-5 + R * 0.184907431163830788e-6 + pow(R - 0.180e2, 2) * (-0.133304798102016460e-6) + pow(R - 0.180e2, 3) * 0.252545185975505252e-7 : (R < 0.250e2 ? 0.869735245472573724e-6 + R * (-0.452575380736286820e-7) + pow(R - 0.200e2, 2) * 0.182223134832867082e-7 + pow(R - 0.200e2, 3) * (-0.161025299611219407e-8) : -0.412342545070595980e-6 + R * 0.161966220508238377e-7 + pow(R - 0.250e2, 2) * (-0.593148145839620243e-8) + pow(R - 0.250e2, 3) * 0.581265544046286920e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1133296512e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1208851700e3 * R - 0.7101840486e4 + 0.6044258500e1 * R * R + 0.75000e3 * (-0.2216197023e-1 * R + 0.916695438e0) * R) * pow(R, -6));
}

static double radcoeff_4_8_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.801119071599999955e-1 + pow(R - 0.475e1, 2) * (-0.238661331169368107e0) + pow(R - 0.475e1, 3) * (-0.515193594825276852e-1) : (R < 0.525e1 ? 0.709343311408289878e0 + R * (-0.128990545487657982e0) + pow(R - 0.50e1, 2) * (-0.277300850781263875e0) + pow(R - 0.50e1, 3) * 0.531390593647583231e0 : (R < 0.55e1 ? 0.905142103939182263e0 + R * (-0.168005234569368056e0) + pow(R - 0.525e1, 2) * 0.121242094454423591e0 + pow(R - 0.525e1, 3) * 0.236474751321945065e-1 : (R < 0.575e1 ? 0.555287008161783890e0 + R * (-0.102950285754869794e0) + pow(R - 0.55e1, 2) * 0.138977700803569471e0 + pow(R - 0.55e1, 3) * 0.580215314236387850e-1 : (R < 0.60e1 ? 0.102764347514128523e0 + R * (-0.225823982111527863e-1) + pow(R - 0.575e1, 2) * 0.182493849371298561e0 + pow(R - 0.575e1, 3) * (-0.179060949306749650e0) : (R < 0.625e1 ? -0.234665594376885639e0 + R * 0.350905984794809417e-1 + pow(R - 0.60e1, 2) * 0.481981373912363370e-1 + pow(R - 0.60e1, 3) * (-0.975483921166403478e-1) : (R < 0.65e1 ? -0.269482061752681523e0 + R * 0.408993436532290450e-1 + pow(R - 0.625e1, 2) * (-0.249631566962439239e-1) + pow(R - 0.625e1, 3) * (-0.242935405306890229e-1) : (R < 0.675e1 ? -0.160683833832418771e0 + R * 0.238627264556028895e-1 + pow(R - 0.65e1, 2) * (-0.431833120942606910e-1) + pow(R - 0.65e1, 3) * 0.329734129273964865e-1 : (R < 0.70e1 ? -0.588558786794258770e-1 + R * 0.845358533235938958e-2 + pow(R - 0.675e1, 2) * (-0.184532523987133261e-1) + pow(R - 0.675e1, 3) * 0.176992728211030834e-1 : (R < 0.725e1 ? -0.183765679983168805e-1 + R * 0.254557278695955467e-2 + pow(R - 0.70e1, 2) * (-0.517879778288601097e-2) + pow(R - 0.70e1, 3) * 0.477787004739116915e-2 : (R < 0.75e1 ? -0.634736377296735415e-2 + R * 0.852024529402393613e-3 + pow(R - 0.725e1, 2) * (-0.159539524734263367e-2) + pow(R - 0.725e1, 3) * 0.140162329653223741e-2 : (R < 0.775e1 ? -0.241347619508153503e-2 + R * 0.317131273830871345e-3 + pow(R - 0.75e1, 2) * (-0.544177774943455507e-3) + pow(R - 0.75e1, 3) * 0.355129327759880578e-3 : (R < 0.80e1 ? -0.849296836764439132e-3 + R * 0.111629135314121180e-3 + pow(R - 0.775e1, 2) * (-0.277830779123545047e-3) + pow(R - 0.775e1, 3) * 0.166878847788241299e-3 : (R < 0.825e1 ? -0.304893365115118853e-5 + R * 0.400352971264389843e-5 + pow(R - 0.80e1, 2) * (-0.152671643282364065e-3) + pow(R - 0.80e1, 3) * 0.161387521087153846e-3 : (R < 0.85e1 ? 0.370054975518748495e-3 + R * (-0.420721317246967831e-4) + pow(R - 0.825e1, 2) * (-0.316310024669986674e-4) + pow(R - 0.825e1, 3) * 0.958248713831432228e-4 : (R < 0.875e1 ? 0.351286173197782421e-3 + R * (-0.399204695738567583e-4) + pow(R - 0.85e1, 2) * 0.402376510703587531e-4 + pow(R - 0.85e1, 3) * (-0.397796537877268371e-4) : (R < 0.90e1 ? 0.242403240361916463e-3 + R * (-0.272603291238761662e-4) + pow(R - 0.875e1, 2) * 0.104029107295636219e-4 + pow(R - 0.875e1, 3) * 0.306618231277641675e-4 : (R < 0.925e1 ? 0.144977588457747121e-3 + R * (-0.163097819226385717e-4) + pow(R - 0.90e1, 2) * 0.333992780753867492e-4 + pow(R - 0.90e1, 3) * (-0.328597516193298363e-4) : (R < 0.95e1 ? 0.490710803345182717e-4 + R * (-0.577134631356954314e-5) + pow(R - 0.925e1, 2) * 0.875446436088937029e-5 + pow(R - 0.925e1, 3) * 0.566983208855552064e-4 : (R < 0.100e2 ? -0.920734441707090403e-4 + R * 0.923682103291674066e-5 + pow(R - 0.95e1, 2) * 0.512782050250557768e-4 + pow(R - 0.95e1, 3) * (-0.720944216857785040e-4) : (R < 0.105e2 ? -0.603395832323864377e-4 + R * 0.644420979363864369e-5 + pow(R - 0.100e2, 2) * (-0.568634275036119792e-4) + pow(R - 0.100e2, 3) * 0.615495285126693823e-4 : (R < 0.110e2 ? 0.455017027062486757e-4 + R * (-0.425707132547130303e-5) + pow(R - 0.105e2, 2) * 0.354608652653920874e-4 + pow(R - 0.105e2, 3) * (-0.341149034208989614e-4) : (R < 0.120e2 ? -0.585190086017122041e-4 + R * 0.561761637424656421e-5 + pow(R - 0.110e2, 2) * (-0.157114898659563546e-4) + pow(R - 0.110e2, 3) * 0.699816191970978884e-5 : (R < 0.140e2 ? 0.579095911255412881e-4 + R * (-0.481087759853677348e-5) + pow(R - 0.120e2, 2) * 0.528299589317301442e-5 + pow(R - 0.120e2, 3) * (-0.128188387607731369e-5) : (R < 0.160e2 ? -0.117047751471852595e-4 + R * 0.938499461227518605e-6 + pow(R - 0.140e2, 2) * (-0.240830736329086816e-5) + pow(R - 0.140e2, 3) * 0.645654401713554310e-6 : (R < 0.180e2 ? 0.139932567349728227e-4 + R * (-0.946877171373301476e-6) + pow(R - 0.160e2, 2) * 0.146561904699045833e-5 + pow(R - 0.160e2, 3) * (-0.347252643776903802e-6) : (R < 0.200e2 ? -0.134402885544823443e-4 + R * 0.748567291265685813e-6 + pow(R - 0.180e2, 2) * (-0.617896815670964478e-6) + pow(R - 0.180e2, 3) * 0.119594359419060747e-6 : (R < 0.250e2 ? 0.577397805128885878e-5 + R * (-0.287887658389442926e-6) + pow(R - 0.200e2, 2) * 0.996693408434000426e-7 + pow(R - 0.200e2, 3) * (-0.852094037310228995e-8) : -0.173997798554714383e-5 + R * 0.697352220618857558e-7 + pow(R - 0.250e2, 2) * (-0.281447647531343017e-7) + pow(R - 0.250e2, 3) * 0.281992027055143011e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.5191962720e1 * (R - 0.300e2) * (R - 0.250e2) + 0.5538101284e2 * R + 0.3253597396e4 - 0.2769050642e1 * R * R + 0.75000e3 * (0.1015311500e-1 * R - 0.4199687929e0) * R) * pow(R, -6));
}

static double radcoeff_4_8_8_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.167624639100000000e0 + pow(R - 0.475e1, 2) * (-0.387978187385223050e1) + pow(R - 0.475e1, 3) * 0.732686064100892143e1 : (R < 0.525e1 ? 0.287014330314471167e1 + R * (-0.566104566736942316e0) + pow(R - 0.50e1, 2) * 0.161536360690446101e1 + pow(R - 0.50e1, 3) * (-0.209426278894676621e1) : (R < 0.55e1 ? 0.759591137244210235e0 + R * (-0.151097036212230529e0) + pow(R - 0.525e1, 2) * 0.446665151943862956e-1 + pow(R - 0.525e1, 3) * 0.332056329178143428e0 : (R < 0.575e1 ? 0.302305168337745178e0 + R * (-0.665032168941354918e-1) + pow(R - 0.55e1, 2) * 0.293708762077993901e0 + pow(R - 0.55e1, 3) * (-0.838348247258078327e-1) : (R < 0.60e1 ? -0.434676223735441902e0 + R * 0.646321345087725041e-1 + pow(R - 0.575e1, 2) * 0.230832643533638027e0 + pow(R - 0.575e1, 3) * (-0.409768847874912079e0) : (R < 0.625e1 ? -0.658159798504272864e0 + R * 0.103216797299045482e0 + pow(R - 0.60e1, 2) * (-0.764939923725460741e-1) + pow(R - 0.60e1, 3) * 0.179118454545660688e-2 : (R < 0.65e1 ? -0.425968003994034727e0 + R * 0.653056482150455586e-1 + pow(R - 0.625e1, 2) * (-0.751506039634536188e-1) + pow(R - 0.625e1, 3) * 0.144427080930854164e-1 : (R < 0.675e1 ? -0.203801837034019828e0 + R * 0.304383540007722789e-1 + pow(R - 0.65e1, 2) * (-0.643185728936395557e-1) + pow(R - 0.65e1, 3) * 0.571712834342017751e-1 : (R < 0.70e1 ? -0.622106686165909903e-1 + R * 0.899868319786533213e-2 + pow(R - 0.675e1, 2) * (-0.214401103179882244e-1) + pow(R - 0.675e1, 3) * 0.212969757061075987e-1 : (R < 0.725e1 ? -0.161298047672647563e-1 + R * 0.227181098376639384e-2 + pow(R - 0.70e1, 2) * (-0.546737853840752620e-2) + pow(R - 0.70e1, 3) * 0.549618188856779849e-2 : (R < 0.75e1 ? -0.403776313698092550e-2 + R * 0.568655818669093179e-3 + pow(R - 0.725e1, 2) * (-0.134524212198167711e-2) + pow(R - 0.725e1, 3) * 0.996392933541218311e-3 : (R < 0.775e1 ? -0.462791735379247616e-3 + R * 0.828584327172330156e-4 + pow(R - 0.75e1, 2) * (-0.597947421825763378e-3) + pow(R - 0.75e1, 3) * 0.758637778227324970e-3 : (R < 0.80e1 ? 0.726341004129695423e-3 + R * (-0.738706947780252147e-4) + pow(R - 0.775e1, 2) * (-0.289690881552696238e-4) + pow(R - 0.775e1, 3) * (-0.184888262130518161e-3) : (R < 0.825e1 ? 0.111485030284105748e-2 + R * (-0.123021788005132188e-3) + pow(R - 0.80e1, 2) * (-0.167635284753158244e-3) + pow(R - 0.80e1, 3) * 0.381943717014748396e-3 : (R < 0.85e1 ? 0.121101733047192933e-2 + R * (-0.135224983441445987e-3) + pow(R - 0.825e1, 2) * 0.118822503007903052e-3 + pow(R - 0.825e1, 3) * (-0.137626388328476458e-3) : (R < 0.875e1 ? 0.930639743207212385e-3 + R * (-0.101618679749083805e-3) + pow(R - 0.85e1, 2) * 0.156027117615456954e-4 + pow(R - 0.85e1, 3) * 0.214090375791579771e-4 : (R < 0.90e1 ? 0.828563362669414833e-3 + R * (-0.898031293222188346e-4) + pow(R - 0.875e1, 2) * 0.316594899459141782e-4 + pow(R - 0.875e1, 3) * 0.120392464571844626e-3 : (R < 0.925e1 ? 0.486793224328367960e-3 + R * (-0.513997972420408849e-4) + pow(R - 0.90e1, 2) * 0.121953838374797648e-3 + pow(R - 0.90e1, 3) * (-0.209815824506536446e-3) : (R < 0.95e1 ? 0.290999785113963273e-3 + R * (-0.297633451496176500e-4) + pow(R - 0.925e1, 2) * (-0.354080300051047008e-4) + pow(R - 0.925e1, 3) * 0.150230440494301194e-3 : (R < 0.100e2 ? 0.191724304265140965e-3 + R * (-0.192991525594885231e-4) + pow(R - 0.95e1, 2) * 0.772648003656212017e-4 + pow(R - 0.95e1, 3) * (-0.723166250852883029e-4) : (R < 0.105e2 ? -0.282723892956644537e-4 + R * 0.372817899216644554e-5 + pow(R - 0.100e2, 2) * (-0.312101372623112595e-4) + pow(R - 0.100e2, 3) * 0.233378734119567322e-4 : (R < 0.110e2 ? 0.110762998700361269e-3 + R * (-0.997855321117726309e-5) + pow(R - 0.105e2, 2) * 0.379667285562384051e-5 + pow(R - 0.105e2, 3) * 0.117551802146137594e-5 : (R < 0.120e2 ? 0.603976815780312963e-4 + R * (-0.530024183945739052e-5) + pow(R - 0.110e2, 2) * 0.555994988781590463e-5 + pow(R - 0.110e2, 3) * (-0.192382090135851391e-5) : (R < 0.140e2 ? -0.147434293886516382e-6 + R * 0.481952320988763631e-7 + pow(R - 0.120e2, 2) * (-0.211512816259637797e-6) + pow(R - 0.120e2, 3) * 0.360937555300998041e-7 : (R < 0.160e2 ? 0.507623126679867956e-5 + R * (-0.364730966578477149e-6) + pow(R - 0.140e2, 2) * 0.504971692096104588e-8 + pow(R - 0.140e2, 3) * 0.342842251466387674e-7 : (R < 0.180e2 ? -0.153504917544051504e-5 + R * 0.668786028650321972e-7 + pow(R - 0.160e2, 2) * 0.210755067800793645e-6 + pow(R - 0.160e2, 3) * (-0.607329691666548692e-7) : (R < 0.200e2 ? -0.323393619923026865e-5 + R * 0.181103244068348242e-6 + pow(R - 0.180e2, 2) * (-0.153642747199135623e-6) + pow(R - 0.180e2, 3) * 0.298551450199807478e-7 : (R < 0.250e2 ? 0.151651894326850606e-5 + R * (-0.752060044884253031e-7) + pow(R - 0.200e2, 2) * 0.254881229207488537e-7 + pow(R - 0.200e2, 3) * (-0.216777292301275891e-8) : -0.424706098627658061e-6 + R * 0.170922554931063219e-7 + pow(R - 0.250e2, 2) * (-0.702847092444252919e-8) + pow(R - 0.250e2, 3) * 0.707007229964252964e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3967633120e1 * (R - 0.300e2) * (R - 0.250e2) + 0.4232125648e2 * R + 0.2486434234e4 - 0.2116062824e1 * R * R + 0.75000e3 * (0.775901210e-2 * R - 0.3209425242e0) * R) * pow(R, -6));
}

static double radcoeff_4_8_8_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.101983224300000119e0 + R * 0.277555756156289135e-16 + pow(R - 0.475e1, 2) * 0.982212727377127059e0 + pow(R - 0.475e1, 3) * (-0.123602967430850841e1) : (R < 0.525e1 ? -0.135666189127859083e1 + R * 0.259350799755718175e0 + pow(R - 0.50e1, 2) * 0.551904716457457187e-1 + pow(R - 0.50e1, 3) * (-0.465967693874473898e0) : (R < 0.55e1 ? -0.104668127142991763e1 + R * 0.199577092977127168e0 + pow(R - 0.525e1, 2) * (-0.294285298760109726e0) + pow(R - 0.525e1, 3) * 0.215230202126404091e0 : (R < 0.575e1 ? -0.474382705046751951e0 + R * 0.927901064957730726e-1 + pow(R - 0.55e1, 2) * (-0.132862647165306658e0) + pow(R - 0.55e1, 3) * (-0.144621434631142437e0) : (R < 0.60e1 ? 0.529537644012619615e-1 + R * (-0.757736080219471864e-3) + pow(R - 0.575e1, 2) * (-0.241328723138663492e0) + pow(R - 0.575e1, 3) * 0.292290019598165307e0 : (R < 0.625e1 ? 0.437597648129371297e0 + R * (-0.666177189748952125e-1) + pow(R - 0.60e1, 2) * (-0.221112084400394947e-1) + pow(R - 0.60e1, 3) * 0.844849011984814130e-1 : (R < 0.65e1 ? 0.407627556966248028e0 + R * (-0.618324042201996923e-1) + pow(R - 0.625e1, 2) * 0.412524674588215720e-1 + pow(R - 0.625e1, 3) * 0.268475551279087621e-1 : (R < 0.675e1 ? 0.243834352174989111e0 + R * (-0.361722539043060135e-1) + pow(R - 0.65e1, 2) * 0.613881338047531436e-1 + pow(R - 0.65e1, 3) * (-0.445875782221163766e-1) : (R < 0.70e1 ? 0.962206317243897713e-1 + R * (-0.138383579185762627e-1) + pow(R - 0.675e1, 2) * 0.279474501381658628e-1 + pow(R - 0.675e1, 3) * (-0.247165441274432469e-1) : (R < 0.725e1 ? 0.322055400394225741e-1 + R * (-0.449898487338893944e-2) + pow(R - 0.70e1, 2) * 0.941004204258342504e-2 + pow(R - 0.70e1, 3) * (-0.836376674011066537e-2) : (R < 0.75e1 ? 0.992107681971283496e-2 + R * (-0.136217011586797733e-2) + pow(R - 0.725e1, 2) * 0.313721698750042601e-2 + pow(R - 0.725e1, 3) * (-0.275181904331406671e-2) : (R < 0.775e1 ? 0.217933753544363815e-2 + R * (-0.309527692739151774e-3) + pow(R - 0.75e1, 2) * 0.107335270501487598e-2 + pow(R - 0.75e1, 3) * (-0.927696389033074950e-3) : (R < 0.80e1 ? -0.579256093190530811e-3 + R * 0.532055868245846151e-4 + pow(R - 0.775e1, 2) * 0.377580413240069686e-3 + pow(R - 0.775e1, 3) * (-0.524106709353632460e-3) : (R < 0.825e1 ? -0.128800807362650701e-2 + R * 0.143725785440813365e-3 + pow(R - 0.80e1, 2) * (-0.154996187751546892e-4) + pow(R - 0.80e1, 3) * 0.333901000476050650e-4 : (R < 0.85e1 ? -0.127616946305033631e-2 + R * 0.142236619812161975e-3 + pow(R - 0.825e1, 2) * 0.954295626054910953e-5 + pow(R - 0.825e1, 3) * (-0.428323372367877633e-4) : (R < 0.875e1 ? -0.124853581018957997e-2 + R * 0.138977034710538813e-3 + pow(R - 0.85e1, 2) * (-0.225812966670417113e-4) + pow(R - 0.85e1, 3) * (-0.211386504700454266e-3) : (R < 0.90e1 ? -0.807650898174724408e-3 + R * 0.880514167456827911e-4 + pow(R - 0.875e1, 2) * (-0.181121175192382427e-3) + pow(R - 0.875e1, 3) * 0.209163156678604989e-3 : (R < 0.925e1 ? -0.353620335830570132e-3 + R * 0.367089210267300162e-4 + pow(R - 0.90e1, 2) * (-0.242488076834286824e-4) + pow(R - 0.90e1, 3) * (-0.630801577396552940e-5) : (R < 0.95e1 ? -0.232143248663423541e-3 + R * 0.234017642273971399e-4 + pow(R - 0.925e1, 2) * (-0.289798195139028294e-4) + pow(R - 0.925e1, 3) * (-0.313600302274290451e-5) : (R < 0.100e2 ? -0.907633393549735771e-4 + R * 0.832385390368142976e-5 + pow(R - 0.95e1, 2) * (-0.313318217809600079e-4) + pow(R - 0.95e1, 3) * 0.389334512271942960e-4 : (R < 0.105e2 ? -0.724122797911714569e-4 + R * 0.619212054311714556e-5 + pow(R - 0.100e2, 2) * 0.270683550598314395e-4 + pow(R - 0.100e2, 3) * (-0.291358643321314627e-4) : (R < 0.110e2 ? -0.124059970580424854e-3 + R * 0.114085773538499872e-4 + pow(R - 0.105e2, 2) * (-0.166354414383657562e-4) + pow(R - 0.105e2, 3) * 0.104506449973315626e-4 : (R < 0.120e2 ? -0.301404657213119310e-4 + R * 0.261111966348290295e-5 + pow(R - 0.110e2, 2) * (-0.959473942368412753e-6) + pow(R - 0.110e2, 3) * (-0.446011861144901512e-7) : (R < 0.140e2 ? -0.651152353323128400e-5 + R * 0.558368220402606980e-6 + pow(R - 0.120e2, 2) * (-0.109327750071188322e-5) + pow(R - 0.120e2, 3) * 0.288003034530289879e-6 : (R < 0.160e2 ? 0.425842097894026442e-5 + R * (-0.358705368081447452e-6) + pow(R - 0.140e2, 2) * 0.634740706469855950e-6 + pow(R - 0.140e2, 3) * (-0.151040607427066084e-6) : (R < 0.180e2 ? -0.603454964267093127e-5 + R * 0.367770168673183185e-6 + pow(R - 0.160e2, 2) * (-0.271502938092540605e-6) + pow(R - 0.160e2, 3) * 0.551806869279744979e-7 : (R < 0.200e2 ? 0.950067266603132634e-6 + R * (-0.560733405612851428e-7) + pow(R - 0.180e2, 2) * 0.595811834753064219e-7 + pow(R - 0.180e2, 3) * (-0.119081307973319208e-7) : (R < 0.250e2 ? -0.815416332539149402e-6 + R * 0.393538237719574684e-7 + pow(R - 0.200e2, 2) * (-0.118676013086851130e-7) + pow(R - 0.200e2, 3) * 0.978540626058723982e-9 : 0.142347866312234147e-6 + R * (-0.593164236048936560e-8) + pow(R - 0.250e2, 2) * 0.281050808219574657e-8 + pow(R - 0.250e2, 3) * (-0.290559412419574621e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.9068754272e1 * (R - 0.300e2) * (R - 0.250e2) - 0.9673369560e2 * R - 0.5682997328e4 + 0.4836684780e1 * R * R + 0.75000e3 * (-0.1773430651e-1 * R + 0.733552618e0) * R) * pow(R, -6));
}

static double radcoeff_4_8_9_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.743028253900000768e-2 + R * 0.173472347597680709e-17 + pow(R - 0.475e1, 2) * 0.659347142216861332e-1 + pow(R - 0.475e1, 3) * (-0.129683320438744532e0) : (R < 0.525e1 ? -0.485943374248923171e-1 + R * 0.865173452857846345e-2 + pow(R - 0.50e1, 2) * (-0.313277761073722724e-1) + pow(R - 0.50e1, 3) * 0.483634344042336572e-1 : (R < 0.55e1 ? -0.151689882288522284e-1 + R * 0.205599042568613884e-2 + pow(R - 0.525e1, 2) * 0.494479969580296878e-2 + pow(R - 0.525e1, 3) * (-0.151901387781900963e-1) : (R < 0.575e1 ? -0.130306527147233901e-1 + R * 0.168023925267698007e-2 + pow(R - 0.55e1, 2) * (-0.644780438783960474e-2) + pow(R - 0.55e1, 3) * 0.216296847405267334e-1 : (R < 0.60e1 ? -0.178777429107341568e-1 + R * 0.251190294760594065e-2 + pow(R - 0.575e1, 2) * 0.977445916755544618e-2 + pow(R - 0.575e1, 3) * (-0.153834808879168318e-1) : (R < 0.625e1 ? -0.295241676053955432e-1 + R * 0.451472986489925756e-2 + pow(R - 0.60e1, 2) * (-0.176315149838217789e-2) + pow(R - 0.60e1, 3) * (-0.963758372859412939e-3) : (R < 0.65e1 ? -0.230101705229814289e-1 + R * 0.345244942079702853e-2 + pow(R - 0.625e1, 2) * (-0.248597027802673759e-2) + pow(R - 0.625e1, 3) * (-0.342958260645501362e-3) : (R < 0.675e1 ? -0.146735186044320808e-1 + R * 0.214515960791262800e-2 + pow(R - 0.65e1, 2) * (-0.274318897351086364e-2) + pow(R - 0.65e1, 3) * 0.149295688104140317e-2 : (R < 0.70e1 ? -0.745290123097910092e-2 + R * 0.105349453635245928e-2 + pow(R - 0.675e1, 2) * (-0.162347131272981126e-2) + pow(R - 0.675e1, 3) * 0.131415684207989358e-2 : (R < 0.725e1 ? -0.357651574804273642e-2 + R * 0.488163287877533777e-3 + pow(R - 0.70e1, 2) * (-0.637853681169890966e-3) + pow(R - 0.70e1, 3) * 0.357908424559022639e-3 : (R < 0.75e1 ? -0.178510145437618629e-2 + R * 0.236344276897405001e-3 + pow(R - 0.725e1, 2) * (-0.369422362750623974e-3) + pow(R - 0.725e1, 3) * 0.226470680164015704e-3 : (R < 0.775e1 ? -0.737792281336344656e-3 + R * 0.940963480528459590e-4 + pow(R - 0.75e1, 2) * (-0.199569352627612195e-3) + pow(R - 0.75e1, 3) * 0.115647568384913231e-3 : (R < 0.80e1 ? -0.143177503996886029e-3 + R * 0.159955908112111031e-4 + pow(R - 0.775e1, 2) * (-0.112833676338927269e-3) + pow(R - 0.775e1, 3) * 0.995070891763313663e-4 : (R < 0.825e1 ? 0.153399261091523130e-3 + R * (-0.217636681376903916e-4) + pow(R - 0.80e1, 2) * (-0.382033594566787439e-4) + pow(R - 0.80e1, 3) * 0.129728704669761224e-3 : (R < 0.85e1 ? 0.109953329858708662e-3 + R * (-0.165412157404495357e-4) + pow(R - 0.825e1, 2) * 0.590931690456421879e-4 + pow(R - 0.825e1, 3) * (-0.147589757455376198e-3) : (R < 0.875e1 ? 0.954157704643475478e-4 + R * (-0.146677107405114755e-4) + pow(R - 0.85e1, 2) * (-0.515991490458899609e-4) + pow(R - 0.85e1, 3) * 0.266918048671743442e-3 : (R < 0.90e1 ? -0.115804728366835071e-3 + R * 0.957984886249543609e-5 + pow(R - 0.875e1, 2) * 0.148589387457917634e-3 + pow(R - 0.875e1, 3) * (-0.293325448431597507e-3) : (R < 0.925e1 ? -0.284766651114767508e-3 + R * 0.288760210105297208e-4 + pow(R - 0.90e1, 2) * (-0.714046988657804821e-4) + pow(R - 0.90e1, 3) * 0.212368808734646414e-3 : (R < 0.95e1 ? -0.323991602552317539e-3 + R * 0.329928232153856824e-4 + pow(R - 0.925e1, 2) * 0.878719076852043285e-4 + pow(R - 0.925e1, 3) * (-0.220571788426988247e-3) : (R < 0.100e2 ? -0.346444105888311688e-3 + R * 0.355715667279275487e-4 + pow(R - 0.95e1, 2) * (-0.775569336350368497e-4) + pow(R - 0.95e1, 3) * 0.506211059023635069e-4 : (R < 0.105e2 ? 0.364053410233667056e-4 + R * (-0.401953748033667084e-5) + pow(R - 0.100e2, 2) * (-0.162527478149158703e-5) + pow(R - 0.100e2, 3) * 0.100656907243298573e-4 : (R < 0.110e2 ? -0.249446955799009190e-4 + R * 0.190445578141913534e-5 + pow(R - 0.105e2, 2) * 0.134732613050032000e-4 + pow(R - 0.105e2, 3) * (-0.137705461276829396e-4) : (R < 0.120e2 ? -0.578965673212614165e-4 + R * 0.504980749066012854e-5 + pow(R - 0.110e2, 2) * (-0.718255788652121111e-5) + pow(R - 0.110e2, 3) * 0.288180094186108184e-5 : (R < 0.140e2 ? 0.643923110358855912e-5 + R * (-0.669905456799046548e-6) + pow(R - 0.120e2, 2) * 0.146284493906203549e-5 + pow(R - 0.120e2, 3) * (-0.394082817831256105e-6) : (R < 0.160e2 ? -0.657545487483631160e-5 + R * 0.452480485474022241e-6 + pow(R - 0.140e2, 2) * (-0.901651967925500934e-6) + pow(R - 0.140e2, 3) * 0.251791178856744860e-6 : (R < 0.180e2 ? 0.119408629105268064e-5 + R * (-0.132633239947042538e-6) + pow(R - 0.160e2, 2) * 0.609095105214968438e-6 + pow(R - 0.160e2, 3) * (-0.157344375620723551e-6) : (R < 0.200e2 ? -0.749675073445467137e-5 + R * 0.415614673464148444e-6 + pow(R - 0.180e2, 2) * (-0.334971148509372868e-6) + pow(R - 0.180e2, 3) * 0.646049280511492942e-7 : (R < 0.250e2 ? 0.297271324439102652e-5 + R * (-0.149010783959551312e-6) + pow(R - 0.200e2, 2) * 0.526584197975229569e-7 + pow(R - 0.200e2, 3) * (-0.452381946272253829e-8) : -0.958747150287195379e-6 + R * 0.382869543114878125e-7 + pow(R - 0.250e2, 2) * (-0.151988721433151274e-7) + pow(R - 0.250e2, 3) * 0.151737002660351269e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2400779136e1 * (R - 0.300e2) * (R - 0.250e2) - 0.2560868380e2 * R - 0.1504420422e4 + 0.1280434190e1 * R * R + 0.75000e3 * (-0.469475441e-2 * R + 0.1941897831e0) * R) * pow(R, -6));
}

static double radcoeff_4_8_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.727746390500000062e-1 + pow(R - 0.475e1, 2) * 0.378288710250307769e1 + pow(R - 0.475e1, 3) * (-0.805344922281230780e1) : (R < 0.525e1 ? -0.172373917107115338e1 + R * 0.381421821974230690e0 + pow(R - 0.50e1, 2) * (-0.225719981460615449e1) + pow(R - 0.50e1, 3) * 0.325214935163692598e1 : (R < 0.55e1 ? 0.909815669458844845e0 + R * (-0.137400081896922821e0) + pow(R - 0.525e1, 2) * 0.181912199121540302e0 + pow(R - 0.525e1, 3) * (-0.509699351735396267e0) : (R < 0.575e1 ? 0.938590038425967221e0 + R * (-0.142012610786539484e0) + pow(R - 0.55e1, 2) * (-0.200362314680006953e0) + pow(R - 0.55e1, 3) * 0.123320746504659143e0 : (R < 0.60e1 ? 0.137108075530228635e1 + R * (-0.219071128156919370e0) + pow(R - 0.575e1, 2) * (-0.107871754801512593e0) + pow(R - 0.575e1, 3) * 0.421092722196760694e0 : (R < 0.625e1 ? 0.122080429634469811e1 + R * (-0.194052120145783019e0) + pow(R - 0.60e1, 2) * 0.207947786846057914e0 + pow(R - 0.60e1, 3) * (-0.680184852117033112e-1) : (R < 0.65e1 ? 0.662610572654677710e0 + R * (-0.102831692699948435e0) + pow(R - 0.625e1, 2) * 0.156933922937280423e0 + pow(R - 0.625e1, 3) * (-0.788705368699467169e-1) : (R < 0.675e1 ? 0.257274807962750929e0 + R * (-0.391529568944232187e-1) + pow(R - 0.65e1, 2) * 0.977810202848203858e-1 + pow(R - 0.65e1, 3) * (-0.916477561725099893e-1) : (R < 0.70e1 ? 0.479348734849208979e-1 + R * (-0.744640103435865140e-2) + pow(R - 0.675e1, 2) * 0.290452031554378903e-1 + pow(R - 0.675e1, 3) * (-0.316981647760131297e-1) : (R < 0.725e1 ? -0.107994549180048145e-1 + R * 0.113279464785783065e-2 + pow(R - 0.70e1, 2) * 0.527157957342803875e-2 + pow(R - 0.70e1, 3) * (-0.656327329943744240e-2) : (R < 0.75e1 ? -0.207600586522231380e-1 + R * 0.253797069092732931e-2 + pow(R - 0.725e1, 2) * 0.349124598849956738e-3 + pow(R - 0.725e1, 3) * (-0.194955745023709737e-2) : (R < 0.775e1 ? -0.193363522812463849e-1 + R * 0.234699096843285146e-2 + pow(R - 0.75e1, 2) * (-0.111304348882786640e-2) + pow(R - 0.75e1, 3) * 0.618883803858398253e-4 : (R < 0.80e1 ? -0.151818385268947913e-1 + R * 0.180207329534126355e-2 + pow(R - 0.775e1, 2) * (-0.106662720353848653e-2) + pow(R - 0.775e1, 3) * 0.289679096693729564e-3 : (R < 0.825e1 ? -0.114119863221167558e-1 + R * 0.132307452420209453e-2 + pow(R - 0.80e1, 2) * (-0.849367881018189353e-3) + pow(R - 0.80e1, 3) * 0.152220212039245025e-3 : (R < 0.85e1 ? -0.819451650516545699e-2 + R * 0.926931873450358461e-3 + pow(R - 0.825e1, 2) * (-0.735202721988755577e-3) + pow(R - 0.825e1, 3) * 0.328414743149288435e-3 : (R < 0.875e1 ? -0.563413462337001517e-2 + R * 0.620908276796472338e-3 + pow(R - 0.85e1, 2) * (-0.488891664626789238e-3) + pow(R - 0.85e1, 3) * 0.192669954563600007e-3 : (R < 0.90e1 ? -0.383887799583283512e-2 + R * 0.412588060963752575e-3 + pow(R - 0.875e1, 2) * (-0.344389198704089219e-3) + pow(R - 0.875e1, 3) * 0.117193976196315502e-3 : (R < 0.925e1 ? -0.250658460553665474e-2 + R * 0.262367332148517190e-3 + pow(R - 0.90e1, 2) * (-0.256493716556852589e-3) + pow(R - 0.90e1, 3) * 0.993913336111352423e-4 : (R < 0.95e1 ? -0.150716087839015359e-2 + R * 0.152756348922178787e-3 + pow(R - 0.925e1, 2) * (-0.181950216348501158e-3) + pow(R - 0.925e1, 3) * 0.168306365519144097e-3 : (R < 0.100e2 ? -0.951435165876293319e-3 + R * 0.933386842827677168e-4 + pow(R - 0.95e1, 2) * (-0.557204422091430642e-4) + pow(R - 0.95e1, 3) * 0.253653646472152265e-4 : (R < 0.105e2 ? -0.595230418610360763e-3 + R * 0.566422655590360759e-4 + pow(R - 0.100e2, 2) * (-0.176723952383202245e-4) + pow(R - 0.100e2, 3) * (-0.195528404795038637e-4) : (R < 0.110e2 ? -0.262553853701423577e-3 + R * 0.243052399610879587e-4 + pow(R - 0.105e2, 2) * (-0.470016559575760234e-4) + pow(R - 0.105e2, 3) * 0.338494950148002013e-4 : (R < 0.120e2 ? -0.323131991527330151e-4 + R * 0.269070526461209222e-5 + pow(R - 0.110e2, 2) * 0.377258656462428495e-5 + pow(R - 0.110e2, 3) * (-0.234393549923637750e-5) : (R < 0.140e2 ? -0.370449476658183630e-4 + R * 0.320407189615153003e-5 + pow(R - 0.120e2, 2) * (-0.325921993308484798e-5) + pow(R - 0.120e2, 3) * 0.663761089129541502e-6 : (R < 0.160e2 ? 0.262327145934671009e-4 + R * (-0.186767476663336431e-5) + pow(R - 0.140e2, 2) * 0.723346601692400711e-6 + pow(R - 0.140e2, 3) * (-0.585429216878592849e-7) : (R < 0.180e2 ? -0.639618391711083326e-5 + R * 0.323196579881927065e-6 + pow(R - 0.160e2, 2) * 0.372089071565245001e-6 + pow(R - 0.160e2, 3) * (-0.116773754253104276e-6) : (R < 0.200e2 ? -0.740929989920180401e-5 + R * 0.410267815105655762e-6 + pow(R - 0.180e2, 2) * (-0.328553453953380627e-6) + pow(R - 0.180e2, 3) * 0.633060892877763632e-7 : (R < 0.250e2 ? 0.287374988649100597e-5 + R * (-0.144272929254550280e-6) + pow(R - 0.200e2, 2) * 0.512830817732775991e-7 + pow(R - 0.200e2, 3) * (-0.441167403087350758e-8) : -0.944513958467814222e-6 + R * 0.376823361627125682e-7 + pow(R - 0.250e2, 2) * (-0.148920286898250278e-7) + pow(R - 0.250e2, 3) * 0.148527429305650274e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3746783552e1 * (R - 0.300e2) * (R - 0.250e2) - 0.3996552964e2 * R - 0.2348036608e4 + 0.1998276482e1 * R * R + 0.75000e3 * (-0.732713138e-2 * R + 0.3030784017e0) * R) * pow(R, -6));
}

static double radcoeff_4_8_10_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.663243409000000006e-1 + pow(R - 0.475e1, 2) * (-0.102778291493439244e1) + pow(R - 0.475e1, 3) * 0.179294820373756991e1 : (R < 0.525e1 ? 0.786022388932009264e0 + R * (-0.177713669266401864e0) + pow(R - 0.50e1, 2) * 0.316928237868784879e0 + pow(R - 0.50e1, 3) * (-0.636867744127093405e-1) : (R < 0.55e1 ? 0.355903421055602520e-1 + R * (-0.311908205343924272e-1) + pow(R - 0.525e1, 2) * 0.269163157059252867e0 + pow(R - 0.525e1, 3) * (-0.202601003686732561e0) : (R < 0.575e1 ? -0.482018998121844122e0 + R * 0.654030698039716474e-1 + pow(R - 0.55e1, 2) * 0.117212404294203418e0 + pow(R - 0.55e1, 3) * 0.291863507596399896e-1 : (R < 0.60e1 ? -0.842689382881408711e0 + R * 0.129481712718505865e0 + pow(R - 0.575e1, 2) * 0.139102167363933410e0 + pow(R - 0.575e1, 3) * (-0.266978633591827275e0) : (R < 0.625e1 ? -0.955122577872029921e0 + R * 0.148974302602004977e0 + pow(R - 0.60e1, 2) * (-0.611318078299370390e-1) + pow(R - 0.60e1, 3) * (-0.718277888723314328e-1) : (R < 0.65e1 ? -0.684855535509214408e0 + R * 0.104940688273474303e0 + pow(R - 0.625e1, 2) * (-0.115002649484185621e0) + pow(R - 0.625e1, 3) * 0.268341602811536864e-1 : (R < 0.675e1 ? -0.350569439364635693e0 + R * 0.524707685840977989e-1 + pow(R - 0.65e1, 2) * (-0.948770292733203541e-1) + pow(R - 0.65e1, 3) * 0.701000016357166966e-1 : (R < 0.70e1 ? -0.123914281941407856e0 + R * 0.181760042541344972e-1 + pow(R - 0.675e1, 2) * (-0.423020280465328316e-1) + pow(R - 0.675e1, 3) * 0.379753973999793493e-1 : (R < 0.725e1 ? -0.277504040345494807e-1 + R * 0.414537724336421116e-2 + pow(R - 0.70e1, 2) * (-0.138204799965483179e-1) + pow(R - 0.70e1, 3) * 0.129803736923658850e-1 : (R < 0.75e1 ? 0.404267880403724224e-2 + R * (-0.331042687591343813e-3) + pow(R - 0.725e1, 2) * (-0.408519972727390372e-2) + pow(R - 0.725e1, 3) * 0.485745803855711176e-2 : (R < 0.775e1 ? 0.123519502134912772e-1 + R * (-0.146286916899883695e-2) + pow(R - 0.75e1, 2) * (-0.442106198356069632e-3) + pow(R - 0.75e1, 3) * 0.133654794540567128e-2 : (R < 0.80e1 ? 0.121161924232031388e-1 + R * (-0.143331952841330829e-2) + pow(R - 0.775e1, 2) * 0.560304760698183881e-3 + pow(R - 0.775e1, 3) * 0.220021431020199065e-3 : (R < 0.825e1 ? 0.958339811628343419e-2 + R * (-0.111191312974792916e-2) + pow(R - 0.80e1, 2) * 0.725320833963333180e-3 + pow(R - 0.80e1, 3) * (-0.258556971886466334e-3) : (R < 0.85e1 ? 0.703269759150854448e-2 + R * (-0.797732144994975009e-3) + pow(R - 0.825e1, 2) * 0.531403105048483429e-3 + pow(R - 0.825e1, 3) * (-0.884833074333805623e-6) : (R < 0.875e1 ? 0.480884346631345241e-2 + R * (-0.532196498672170802e-3) + pow(R - 0.85e1, 2) * 0.530739480242733075e-3 + pow(R - 0.85e1, 3) * (-0.323085801416198948e-3) : (R < 0.90e1 ? 0.304504388506798927e-2 + R * (-0.327405346316341612e-3) + pow(R - 0.875e1, 2) * 0.288425129180583850e-3 + pow(R - 0.875e1, 3) * (-0.733595516608697768e-4) : (R < 0.925e1 ? 0.188780537476216487e-2 + R * (-0.196947697662462764e-3) + pow(R - 0.90e1, 2) * 0.233405465434931514e-3 + pow(R - 0.90e1, 3) * (-0.230638607620321757e-3) : (R < 0.95e1 ? 0.121930304556271802e-2 + R * (-0.123489703873807340e-3) + pow(R - 0.925e1, 2) * 0.604265097196901964e-4 + pow(R - 0.925e1, 3) * 0.334945376621568499e-4 : (R < 0.100e2 ? 0.876914988191924462e-3 + R * (-0.869962232023078379e-4) + pow(R - 0.95e1, 2) * 0.855474129663078372e-4 + pow(R - 0.95e1, 3) * (-0.464454980033842987e-4) : (R < 0.105e2 ? 0.385363259545382314e-3 + R * (-0.362829337385382332e-4) + pow(R - 0.100e2, 2) * 0.158791659612313823e-4 + pow(R - 0.100e2, 3) * (-0.615395512830984437e-5) : (R < 0.110e2 ? 0.270294960687161954e-3 + R * (-0.250192341235392325e-4) + pow(R - 0.105e2, 2) * 0.664823326876661661e-5 + pow(R - 0.105e2, 3) * 0.114699020686236843e-4 : (R < 0.120e2 ? 0.105633498740353334e-3 + R * (-0.976857430330484844e-5) + pow(R - 0.110e2, 2) * 0.238530863717021422e-4 + pow(R - 0.110e2, 3) * (-0.104524085973972913e-4) : (R < 0.140e2 ? -0.771531868998907172e-4 + R * 0.658037264790756035e-5 + pow(R - 0.120e2, 2) * (-0.750413942048973341e-5) + pow(R - 0.120e2, 3) * 0.180855129389297661e-5 : (R < 0.160e2 ? 0.236938559427991636e-4 + R * (-0.173356950733565442e-5) + pow(R - 0.140e2, 2) * 0.334716834286812623e-5 + pow(R - 0.140e2, 3) * (-0.892803595350149304e-6) : (R < 0.180e2 ? -0.128603830849609112e-4 + R * 0.941460719935056957e-6 + pow(R - 0.160e2, 2) * (-0.200965322923277023e-5) + pow(R - 0.160e2, 3) * 0.493912787257620788e-6 : (R < 0.200e2 ? 0.210621767533823189e-4 + R * (-0.117019874990457343e-5) + pow(R - 0.180e2, 2) * 0.953823494312954715e-6 + pow(R - 0.180e2, 3) * (-0.184270758955333963e-6) : (R < 0.250e2 ? -0.867759273676475603e-5 + R * 0.433846119883237770e-6 + pow(R - 0.200e2, 2) * (-0.151801059419049036e-6) + pow(R - 0.200e2, 3) * 0.130106046604802977e-7 : 0.270908747668075564e-5 + R * (-0.108369124771230231e-6) + pow(R - 0.250e2, 2) * 0.433580104881554373e-7 + pow(R - 0.250e2, 3) * (-0.433602600278187699e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2145085120e0 * (R - 0.300e2) * (R - 0.250e2) - 0.2287987548e1 * R - 0.1344779252e3 + 0.1143993774e0 * R * R + 0.75000e3 * (-0.4195761110e-3 * R + 0.1735671723e-1) * R) * pow(R, -6));
}

static double radcoeff_4_8_11_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.615205325800000646e-1 + R * 0.138777878078144568e-16 + pow(R - 0.475e1, 2) * 0.807700040730033320e0 + pow(R - 0.475e1, 3) * (-0.141480566436013344e1) : (R < 0.525e1 ? -0.726015410027458286e0 + R * 0.138573958297491667e0 + pow(R - 0.50e1, 2) * (-0.253404207540066706e0) + pow(R - 0.50e1, 3) * 0.258607107640400180e0 : (R < 0.55e1 ? -0.327192763732675196e0 + R * 0.603606872100333619e-1 + pow(R - 0.525e1, 2) * (-0.594488768097665571e-1) + pow(R - 0.525e1, 3) * (-0.354564236146750079e-2) : (R < 0.575e1 ? -0.163822864286062048e0 + R * 0.299714408623749200e-1 + pow(R - 0.55e1, 2) * (-0.621081085808671829e-1) + pow(R - 0.55e1, 3) * 0.247462566854700257e-1 : (R < 0.60e1 ? -0.154367066306850265e-1 + R * 0.355730970046696116e-2 + pow(R - 0.575e1, 2) * (-0.435484160667646628e-1) + pow(R - 0.575e1, 3) * 0.500934641955872798e-1 : (R < 0.625e1 ? 0.569143287234565309e-1 + R * (-0.882437379624275570e-2) + pow(R - 0.60e1, 2) * (-0.597831792007420468e-2) + pow(R - 0.60e1, 3) * 0.184659769641809107e-1 : (R < 0.65e1 ? 0.538716414888495976e-1 + R * (-0.835116207549593641e-2) + pow(R - 0.625e1, 2) * 0.787116480306147837e-2 + pow(R - 0.625e1, 3) * 0.779768619689073295e-3 : (R < 0.675e1 ? 0.278441445585277218e-1 + R * (-0.426937305777349597e-2) + pow(R - 0.65e1, 2) * 0.845599126782828336e-2 + pow(R - 0.65e1, 3) * (-0.622351854053719220e-2) : (R < 0.70e1 ? 0.761307165951802603e-2 + R * (-0.120828715021007805e-2) + pow(R - 0.675e1, 2) * 0.378835236242538922e-2 + pow(R - 0.675e1, 3) * (-0.337351720314030702e-2) : (R < 0.725e1 ? -0.103435946349666194e-2 + R * 0.533545554138088350e-4 + pow(R - 0.70e1, 2) * 0.125821446007015874e-2 + pow(R - 0.70e1, 3) * (-0.129745106610157563e-2) : (R < 0.75e1 ? -0.377329860742260962e-2 + R * 0.439189710554842706e-3 + pow(R - 0.725e1, 2) * 0.285126160493976962e-3 + pow(R - 0.725e1, 3) * (-0.530465982053390903e-3) : (R < 0.775e1 ? -0.408702206795115257e-2 + R * 0.482290419166820359e-3 + pow(R - 0.75e1, 2) * (-0.112723326046066229e-3) + pow(R - 0.75e1, 3) * (-0.274046344848610508e-4) : (R < 0.80e1 ? -0.361787022532853754e-2 + R * 0.420790387177875794e-3 + pow(R - 0.775e1, 2) * (-0.133276801909712017e-3) + pow(R - 0.775e1, 3) * 0.249464719928353608e-4 : (R < 0.825e1 ? -0.313012273717341123e-2 + R * 0.358829449721676419e-3 + pow(R - 0.80e1, 2) * (-0.114566947915085496e-3) + pow(R - 0.80e1, 3) * (-0.244257394286481288e-3) : (R < 0.85e1 ? -0.229067537626720212e-2 + R * 0.255747714335418470e-3 + pow(R - 0.825e1, 2) * (-0.297759993629946476e-3) + pow(R - 0.825e1, 3) * 0.252907751553090401e-3 : (R < 0.875e1 ? -0.144292544836152246e-2 + R * 0.154287920936649689e-3 + pow(R - 0.85e1, 2) * (-0.108079179965128635e-3) + pow(R - 0.85e1, 3) * 0.101683733541195896e-4 : (R < 0.90e1 ? -0.993357591462349417e-3 + R * 0.102154900957982778e-3 + pow(R - 0.875e1, 2) * (-0.100452899949538942e-3) + pow(R - 0.875e1, 3) * 0.628378987104312778e-4 : (R < 0.925e1 ? -0.652654959842772662e-3 + R * 0.637105569914191855e-4 + pow(R - 0.90e1, 2) * (-0.533244759167154805e-4) + pow(R - 0.90e1, 3) * 0.208512158041549796e-4 : (R < 0.95e1 ? -0.445200065636149598e-3 + R * 0.409579219963405024e-4 + pow(R - 0.925e1, 2) * (-0.376860640635992450e-4) + pow(R - 0.925e1, 3) * 0.732532073529489097e-4 : (R < 0.100e2 ? -0.397884334570578640e-3 + R * 0.358498663432188047e-4 + pow(R - 0.95e1, 2) * 0.172538414511124407e-4 + pow(R - 0.95e1, 3) * (-0.167086148351000855e-4) : (R < 0.105e2 ? -0.442883254310061760e-3 + R * 0.405722466680061744e-4 + pow(R - 0.100e2, 2) * (-0.780908080153769105e-5) + pow(R - 0.100e2, 3) * (-0.214850043489493099e-4) : (R < 0.110e2 ? -0.196331392389943320e-3 + R * 0.166494126047565061e-4 + pow(R - 0.105e2, 2) * (-0.400365873249616558e-4) + pow(R - 0.105e2, 3) * 0.391898847108972887e-4 : (R < 0.120e2 ? -0.843558919226460523e-4 + R * 0.600523881296782354e-5 + pow(R - 0.110e2, 2) * 0.187482397413842806e-4 + pow(R - 0.110e2, 3) * (-0.962075387435210189e-5) : (R < 0.140e2 ? -0.178839020371160894e-3 + R * 0.146394566726800757e-4 + pow(R - 0.120e2, 2) * (-0.101140218816720268e-4) + pow(R - 0.120e2, 3) * 0.188798050716599419e-5 : (R < 0.160e2 ? 0.450132363296254021e-4 + R * (-0.316086476801610017e-5) + pow(R - 0.140e2, 2) * 0.121386116132393840e-5 + pow(R - 0.140e2, 3) * (-0.108591715032944125e-6) : (R < 0.180e2 ? -0.783755778414918061e-5 + R * 0.391479296884323781e-6 + pow(R - 0.160e2, 2) * 0.562310871126273601e-6 + pow(R - 0.160e2, 3) * (-0.173106341659217719e-6) : (R < 0.200e2 ? -0.100685779555184954e-4 + R * 0.563446681478805289e-6 + pow(R - 0.180e2, 2) * (-0.476327178829032767e-6) + pow(R - 0.180e2, 3) * 0.925113182698150421e-7 : (R < 0.250e2 ? 0.466966179689090360e-5 + R * (-0.231726214599545169e-6) + pow(R - 0.200e2, 2) * 0.787407307898574723e-7 + pow(R - 0.200e2, 3) * (-0.670124572518968831e-8) : -0.131982261174507349e-5 + R * 0.530876639098029463e-7 + pow(R - 0.250e2, 2) * (-0.217779550879878507e-7) + pow(R - 0.250e2, 3) * 0.218958502120545178e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1124400157e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1199358096e3 * R + 0.7046339774e4 - 0.5996790480e1 * R * R + 0.75000e3 * (0.2198844311e-1 * R - 0.909524847e0) * R) * pow(R, -6));
}

static double radcoeff_4_8_12_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.100210271500000267e0 + R * 0.555111512312578270e-16 + pow(R - 0.475e1, 2) * 0.237684096231803643e1 + pow(R - 0.475e1, 3) * (-0.467472426207214653e1) : (R < 0.525e1 ? -0.158424868805245334e1 + R * 0.311909682020490631e0 + pow(R - 0.50e1, 2) * (-0.112920223423607391e1) + pow(R - 0.50e1, 3) * 0.202067002717644462e1 : (R < 0.55e1 ? -0.648192051649694956e0 + R * 0.126184194998037125e0 + pow(R - 0.525e1, 2) * 0.386300286146259664e0 + pow(R - 0.525e1, 3) * (-0.934280975593632990e0) : (R < 0.575e1 ? -0.737494954830484550e0 + R * 0.144156655147360813e0 + pow(R - 0.55e1, 2) * (-0.314410445548965078e0) + pow(R - 0.55e1, 3) * 0.530757436158087570e0 : (R < 0.60e1 ? -0.417145352641988154e0 + R * 0.864684516525196789e-1 + pow(R - 0.575e1, 2) * 0.836576315696006545e-1 + pow(R - 0.575e1, 3) * (-0.498374116878717521e0) : (R < 0.625e1 ? -0.110005859465362885e0 + R * 0.348521205225604813e-1 + pow(R - 0.60e1, 2) * (-0.290122956089437500e0) + pow(R - 0.60e1, 3) * 0.255852832316782242e0 : (R < 0.65e1 ? 0.482665856192259990e0 + R * (-0.622369514627615916e-1) + pow(R - 0.625e1, 2) * (-0.982333318518507775e-1) + pow(R - 0.625e1, 3) * 0.102147007131588502e0 : (R < 0.675e1 ? 0.672888983514841832e0 + R * (-0.922010535515141311e-1) + pow(R - 0.65e1, 2) * (-0.216230765031593941e-1) + pow(R - 0.65e1, 3) * 0.914795461968637424e-1 : (R < 0.70e1 ? 0.630165991685477600e0 + R * (-0.858601768911818747e-1) + pow(R - 0.675e1, 2) * 0.469865831444884127e-1 + pow(R - 0.675e1, 3) * 0.456509096095637258e-2 : (R < 0.725e1 ? 0.462729259786308356e0 + R * (-0.615109307637583397e-1) + pow(R - 0.70e1, 2) * 0.504104013652056926e-1 + pow(R - 0.70e1, 3) * (-0.190109058806892280e-1) : (R < 0.75e1 ? 0.308688109699939317e0 + R * (-0.398702749337847273e-1) + pow(R - 0.725e1, 2) * 0.361522219546887708e-1 + pow(R - 0.725e1, 3) * (-0.161780293581993313e-1) : (R < 0.775e1 ? 0.197874363318270408e0 + R * (-0.248275444611027220e-1) + pow(R - 0.75e1, 2) * 0.240186999360392714e-1 + pow(R - 0.75e1, 3) * (-0.120286854225135301e-1) : (R < 0.80e1 ? 0.123594305106983882e0 + R * (-0.150735730098043724e-1) + pow(R - 0.775e1, 2) * 0.149971858691541234e-1 + pow(R - 0.775e1, 3) * (-0.760556795974650507e-2) : (R < 0.825e1 ? 0.758324006874382534e-1 + R * (-0.900102406767978175e-2) + pow(R - 0.80e1, 2) * 0.929300989934424455e-2 + pow(R - 0.80e1, 3) * (-0.485231621050044928e-2) : (R < 0.85e1 ? 0.455096571686810780e-1 + R * (-0.526432840747649480e-2) + pow(R - 0.825e1, 2) * 0.565377274146890759e-2 + pow(R - 0.825e1, 3) * (-0.303311939025171454e-2) : (R < 0.875e1 ? 0.266211253515210196e-1 + R * (-0.300615192241423732e-2) + pow(R - 0.85e1, 2) * 0.337893319878012147e-2 + pow(R - 0.85e1, 3) * (-0.180852264449268591e-2) : (R < 0.90e1 ? 0.149883252290823575e-1 + R * (-0.165578331886655520e-2) + pow(R - 0.875e1, 2) * 0.202254121541060698e-2 + pow(R - 0.875e1, 3) * (-0.118712304937754285e-2) : (R < 0.925e1 ? 0.799801993387587104e-2 + R * (-0.867098282919541267e-3) + pow(R - 0.90e1, 2) * 0.113219892837744984e-2 + pow(R - 0.90e1, 3) * (-0.692471877997139461e-3) : (R < 0.95e1 ? 0.402254836344134031e-2 + R * (-0.430837295855280049e-3) + pow(R - 0.925e1, 2) * 0.612845019879595249e-3 + pow(R - 0.925e1, 3) * (-0.411527487913900382e-3) : (R < 0.100e2 ? 0.187644055360371804e-2 + R * (-0.201576189899338736e-3) + pow(R - 0.95e1, 2) * 0.304199403944169949e-3 + pow(R - 0.95e1, 3) * (-0.168480085570984909e-3) : (R < 0.105e2 ? 0.153036996234074703e-3 + R * (-0.237368501334074719e-4) + pow(R - 0.100e2, 2) * 0.514792755876926060e-4 + pow(R - 0.100e2, 3) * 0.175329943824467974e-5 : (R < 0.110e2 ? -0.388213649186170795e-3 + R * 0.290574000329686439e-4 + pow(R - 0.105e2, 2) * 0.541092247450596257e-4 + pow(R - 0.105e2, 3) * (-0.464243773819938337e-4) : (R < 0.120e2 ? -0.592689748966861813e-3 + R * 0.483483417415328911e-4 + pow(R - 0.110e2, 2) * (-0.155273413279311248e-4) + pow(R - 0.110e2, 3) * 0.242774334639823166e-5 : (R < 0.140e2 ? -0.320531915548383998e-3 + R * 0.245768891248653365e-4 + pow(R - 0.120e2, 2) * (-0.824411128873642977e-5) + pow(R - 0.120e2, 3) * 0.929352905651880470e-6 : (R < 0.160e2 ? -0.405345934393905663e-4 + R * 0.275267883774218310e-5 + pow(R - 0.140e2, 2) * (-0.266799385482514695e-5) + pow(R - 0.140e2, 3) * 0.647011506727027574e-6 : (R < 0.180e2 ? 0.494920612345160351e-6 + R * (-0.155158500834072529e-6) + pow(R - 0.160e2, 2) * 0.121407518553701913e-5 + pow(R - 0.160e2, 3) * (-0.319737388184991444e-6) : (R < 0.200e2 ? -0.155568152613939178e-4 + R * 0.864293583094106465e-6 + pow(R - 0.180e2, 2) * (-0.704349143572929531e-6) + pow(R - 0.180e2, 3) * 0.136070596725438156e-6 : (R < 0.250e2 ? 0.640534120984707634e-5 + R * (-0.320255830492353833e-6) + pow(R - 0.200e2, 2) * 0.112074436779699382e-6 + pow(R - 0.200e2, 3) * (-0.960607386024572344e-8) : -0.200077781015526765e-5 + R * 0.800329977862107027e-7 + pow(R - 0.250e2, 2) * (-0.320166711239864783e-7) + pow(R - 0.250e2, 3) * 0.320174249094886785e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.7187200000e-1 * (R - 0.300e2) * (R - 0.250e2) + 0.7664847960e0 * R + 0.4506659196e2 - 0.3832423980e-1 * R * R + 0.75000e3 * (0.1405900416e-3 * R - 0.5816240300e-2) * R) * pow(R, -6));
}

static double radcoeff_4_8_12_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.634607031999999960e-1 + pow(R - 0.475e1, 2) * (-0.112327287910137930e1) + pow(R - 0.475e1, 3) * 0.207605261464551738e1 : (R < 0.525e1 ? 0.887577341883275750e0 + R * (-0.172376574304655139e0) + pow(R - 0.50e1, 2) * 0.433766581882758684e0 + pow(R - 0.50e1, 3) * (-0.720868315616552402e0) : (R < 0.55e1 ? 0.474391656557241748e0 + R * (-0.906560925413793794e-1) + pow(R - 0.525e1, 2) * (-0.106884654829655590e0) + pow(R - 0.525e1, 3) * 0.271578346380692448e0 : (R < 0.575e1 ? 0.485822408364050384e0 + R * (-0.931774800098273404e-1) + pow(R - 0.55e1, 2) * 0.967991049558637462e-1 + pow(R - 0.55e1, 3) * (-0.106985115346217685e0) : (R < 0.60e1 ? 0.327246610731039833e0 + R * (-0.648376366593112763e-1) + pow(R - 0.575e1, 2) * 0.165602684462004893e-1 + pow(R - 0.575e1, 3) * 0.119571332924178500e0 : (R < 0.625e1 ? 0.145951374707565362e0 + R * (-0.341378775129275586e-1) + pow(R - 0.60e1, 2) * 0.106238768139334375e0 + pow(R - 0.60e1, 3) * (-0.303281030704965274e-1) : (R < 0.65e1 ? -0.144337983543884552e0 + R * 0.132949872310215295e-1 + pow(R - 0.625e1, 2) * 0.834926908364619774e-1 + pow(R - 0.625e1, 3) * (-0.567398371221923548e-1) : (R < 0.675e1 ? -0.342205819047469384e0 + R * 0.444026131888414430e-1 + pow(R - 0.65e1, 2) * 0.409378129948177114e-1 + pow(R - 0.65e1, 3) * (-0.623153561207339113e-1) : (R < 0.70e1 ? -0.399918129441885706e0 + R * 0.531873904136126938e-1 + pow(R - 0.675e1, 2) * (-0.579870409573271864e-2) + pow(R - 0.675e1, 3) * (-0.256909662348722284e-1) : (R < 0.725e1 ? -0.346667112276954570e0 + R * 0.454709821967077960e-1 + pow(R - 0.70e1, 2) * (-0.250669287718868899e-1) + pow(R - 0.70e1, 3) * 0.123796794022285506e-2 : (R < 0.75e1 ? -0.259029697946781989e0 + R * 0.331696367995561389e-1 + pow(R - 0.725e1, 2) * (-0.241384528167197486e-1) + pow(R - 0.725e1, 3) * 0.673149319398084079e-2 : (R < 0.775e1 ? -0.179380135908007526e0 + R * 0.223625653650676680e-1 + pow(R - 0.75e1, 2) * (-0.190898329212341178e-1) + pow(R - 0.75e1, 3) * 0.804346113985376573e-2 : (R < 0.80e1 ? -0.118162623284342252e0 + R * 0.143257978681731925e-1 + pow(R - 0.775e1, 2) * (-0.130572370663437926e-1) + pow(R - 0.775e1, 3) * 0.597922122260409212e-2 : (R < 0.825e1 ? -0.756251588379164980e-1 + R * 0.891828331423956226e-2 + pow(R - 0.80e1, 2) * (-0.857282114939072332e-2) + pow(R - 0.80e1, 3) * 0.412531976172989499e-2 : (R < 0.85e1 ? -0.471149688036655925e-1 + R * 0.540537019486855667e-2 + pow(R - 0.825e1, 2) * (-0.547883132809330164e-2) + pow(R - 0.825e1, 3) * 0.298257960247630665e-2 : (R < 0.875e1 ? -0.288792460524328123e-1 + R * 0.322518820628621330e-2 + pow(R - 0.85e1, 2) * (-0.324189662623607143e-2) + pow(R - 0.85e1, 3) * 0.155020106676487246e-2 : (R < 0.90e1 ? -0.174176435852826730e-1 + R * 0.189490259318659138e-2 + pow(R - 0.875e1, 2) * (-0.207924582616241709e-2) + pow(R - 0.875e1, 3) * 0.118082304246420436e-2 : (R < 0.925e1 ? -0.101651787558067908e-1 + R * 0.107668400056742117e-2 + pow(R - 0.90e1, 2) * (-0.119362854431426376e-2) + pow(R - 0.90e1, 3) * 0.655595652978317495e-3 : (R < 0.95e1 ? -0.584605355092944392e-2 + R * 0.602793913343723691e-3 + pow(R - 0.925e1, 2) * (-0.701931804580525616e-3) + pow(R - 0.925e1, 3) * 0.513600905622523061e-3 : (R < 0.100e2 ? -0.346257481594799705e-2 + R * 0.348128180857683930e-3 + pow(R - 0.95e1, 2) * (-0.316731125363633320e-3) + pow(R - 0.95e1, 3) * 0.143066600096530887e-3 : (R < 0.105e2 ? -0.142956251936448794e-2 + R * 0.138697005566448795e-3 + pow(R - 0.100e2, 2) * (-0.102131225218836976e-3) + pow(R - 0.100e2, 3) * 0.981420697187875091e-5 : (R < 0.110e2 ? -0.458777564904469342e-3 + R * 0.439264355765208892e-4 + pow(R - 0.105e2, 2) * (-0.874099147610188484e-4) + pow(R - 0.105e2, 3) * 0.549907237519541204e-4 : (R < 0.120e2 ? 0.340793882918559270e-4 + R * (-0.224043637053235701e-5) + pow(R - 0.110e2, 2) * (-0.492382913308765763e-5) + pow(R - 0.110e2, 3) * 0.251726642362001444e-5 : (R < 0.140e2 ? 0.592231335261715364e-4 + R * (-0.453629536584762767e-5) + pow(R - 0.120e2, 2) * 0.262797013777238569e-5 + pow(R - 0.120e2, 3) * (-0.509962136549285899e-6) : (R < 0.160e2 ? 0.416262820989322071e-5 + R * (-0.143960453349515786e-6) + pow(R - 0.140e2, 2) * (-0.431802681523329539e-6) + pow(R - 0.140e2, 3) * 0.958192218490437111e-7 : (R < 0.180e2 ? 0.124400522811689464e-4 + R * (-0.721340517254309144e-6) + pow(R - 0.160e2, 2) * 0.143112649570932781e-6 + pow(R - 0.160e2, 3) * (-0.161143315938908855e-8) : (R < 0.200e2 ? 0.304357020749844712e-5 + R * (-0.168227116883247059e-6) + pow(R - 0.180e2, 2) * 0.133444050614598249e-6 + pow(R - 0.180e2, 3) * (-0.256749309489873492e-7) : (R < 0.250e2 ? -0.114159365904595385e-5 + R * 0.574499141872976928e-7 + pow(R - 0.200e2, 2) * (-0.206055350793258598e-7) + pow(R - 0.200e2, 3) * 0.177629579237326412e-8 : 0.386134097149152248e-6 + R * (-0.153832521779660894e-7) + pow(R - 0.250e2, 2) * 0.603890180627310332e-8 + pow(R - 0.250e2, 3) * (-0.601405803735976953e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2369479904e1 * (R - 0.300e2) * (R - 0.250e2) + 0.2527461472e2 * R + 0.1484815571e4 - 0.1263730736e1 * R * R + 0.75000e3 * (0.463354976e-2 * R - 0.1916587001e0) * R) * pow(R, -6));
}

static double radcoeff_4_10_6_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.205441542199999994e-1 + pow(R - 0.475e1, 2) * (-0.227565282131776875e0) + pow(R - 0.475e1, 3) * 0.382694702287107447e0 : (R < 0.525e1 ? 0.222437850745278998e0 + R * (-0.420273843870557981e-1) + pow(R - 0.50e1, 2) * 0.594557445835536894e-1 + pow(R - 0.50e1, 3) * (-0.884053160133219385e-1) : (R < 0.55e1 ? 0.155725155137828308e0 + R * (-0.288755088477768186e-1) + pow(R - 0.525e1, 2) * (-0.684824242643776969e-2) + pow(R - 0.525e1, 3) * 0.522122386941801381e-1 : (R < 0.575e1 ? 0.121101751735103083e0 + R * (-0.225098353058369241e-1) + pow(R - 0.55e1, 2) * 0.323109365941973356e-1 + pow(R - 0.55e1, 3) * 0.208168622860147035e-2 : (R < 0.60e1 ? 0.280154509460340193e-1 + R * (-0.596405084087548148e-2) + pow(R - 0.575e1, 2) * 0.338722012656484384e-1 + pow(R - 0.575e1, 3) * (-0.162944792245860448e-1) : (R < 0.625e1 ? -0.534074523820331284e-1 + R * 0.791683493733885517e-2 + pow(R - 0.60e1, 2) * 0.216513418472089048e-1 + pow(R - 0.60e1, 3) * (-0.425346173942572764e-1) : (R < 0.65e1 ? -0.705340354270004161e-1 + R * 0.107672650995200674e-1 + pow(R - 0.625e1, 2) * (-0.102496211984840560e-1) + pow(R - 0.625e1, 3) * (-0.622928126384848790e-3) : (R < 0.675e1 ? -0.371139074547757186e-1 + R * 0.552565547658087977e-2 + pow(R - 0.65e1, 2) * (-0.107168172932726926e-1) + pow(R - 0.65e1, 3) * 0.860387750299668359e-2 : (R < 0.70e1 ? -0.123692970495557827e-1 + R * 0.178047386175641219e-2 + pow(R - 0.675e1, 2) * (-0.426390916602517947e-2) + pow(R - 0.675e1, 3) * 0.444577839599812150e-2 : (R < 0.725e1 ? -0.347772814865429398e-2 + R * 0.482102727993470560e-3 + pow(R - 0.70e1, 2) * (-0.929575369026587909e-3) + pow(R - 0.70e1, 3) * 0.672220364530822477e-3 : (R < 0.75e1 ? -0.106941201133536716e-2 + R * 0.143356361829705820e-3 + pow(R - 0.725e1, 2) * (-0.425410095628471106e-3) + pow(R - 0.725e1, 3) * 0.602278234198591221e-3 : (R < 0.775e1 ? -0.338255453137795874e-3 + R * 0.435784829277061206e-4 + pow(R - 0.75e1, 2) * 0.262985800204723166e-4 + pow(R - 0.75e1, 3) * (-0.213847097485187160e-3) : (R < 0.80e1 ? -0.131113586830890037e-3 + R * 0.166314421594696796e-4 + pow(R - 0.775e1, 2) * (-0.134086743093418074e-3) + pow(R - 0.775e1, 3) * 0.180131719198157395e-3 : (R < 0.825e1 ? 0.129469943414678738e-3 + R * (-0.166372320375848421e-4) + pow(R - 0.80e1, 2) * 0.101204630519999163e-5 + pow(R - 0.80e1, 3) * 0.683918263245574882e-4 : (R < 0.85e1 ? 0.206335212403251030e-4 + R * (-0.330774144913031561e-5) + pow(R - 0.825e1, 2) * 0.523059160486181128e-4 + pow(R - 0.825e1, 3) * (-0.113596711152387400e-3) : (R < 0.875e1 ? -0.191276924259019095e-4 + R * 0.154583323410610670e-5 + pow(R - 0.85e1, 2) * (-0.328916173156724304e-4) + pow(R - 0.85e1, 3) * 0.204970969644991996e-3 : (R < 0.90e1 ? -0.210360418425176545e-3 + R * 0.235320813847058908e-4 + pow(R - 0.875e1, 2) * 0.120836609918071580e-3 + pow(R - 0.875e1, 3) * (-0.363829495747580549e-3) : (R < 0.925e1 ? -0.138295436733632850e-3 + R * 0.157323558910703144e-4 + pow(R - 0.90e1, 2) * (-0.152035511892613845e-3) + pow(R - 0.90e1, 3) * 0.290344193249330272e-3 : (R < 0.95e1 ? 0.563375041291313365e-4 + R * (-0.584586382098717101e-5) + pow(R - 0.925e1, 2) * 0.657226330443838862e-4 + pow(R - 0.925e1, 3) * (-0.100131570049740804e-3) : (R < 0.100e2 ? -0.749425348973445181e-4 + R * 0.824078331687837061e-5 + pow(R - 0.95e1, 2) * (-0.937604449292171471e-5) + pow(R - 0.95e1, 3) * (-0.672662422567005494e-5) : (R < 0.105e2 ? 0.660827525729588478e-4 + R * (-0.618022934529588530e-5) + pow(R - 0.100e2, 2) * (-0.194659808314267971e-4) + pow(R - 0.100e2, 3) * 0.288274802520371336e-4 : (R < 0.110e2 ? 0.421960841420957098e-4 + R * (-0.402559998769482970e-5) + pow(R - 0.105e2, 2) * 0.237752395466289066e-4 + pow(R - 0.105e2, 3) * (-0.188601570464784920e-4) : (R < 0.120e2 ? -0.601489649818272949e-4 + R * 0.560452177407520877e-5 + pow(R - 0.110e2, 2) * (-0.451499602308883136e-5) + pow(R - 0.110e2, 3) * 0.796301297013623304e-6 : (R < 0.140e2 ? 0.158253981537390148e-4 + R * (-0.103656638106158467e-5) + pow(R - 0.120e2, 2) * (-0.212609213204796124e-5) + pow(R - 0.120e2, 3) * 0.700080548664376680e-6 : (R < 0.160e2 ? 0.143693012339327014e-4 + R * (-0.113996832528090733e-5) + pow(R - 0.140e2, 2) * 0.207439115993829927e-5 + pow(R - 0.140e2, 3) * (-0.513065800773922819e-6) : (R < 0.180e2 ? -0.156900610197634614e-4 + R * 0.100080670518521634e-5 + pow(R - 0.160e2, 2) * (-0.100400364470523765e-5) + pow(R - 0.160e2, 3) * 0.218509181568814688e-6 : (R < 0.200e2 ? 0.713227705387923626e-5 + R * (-0.393097694809957566e-6) + pow(R - 0.180e2, 2) * 0.307051444707650589e-6 + pow(R - 0.180e2, 3) * (-0.589370178013359059e-7) : (R < 0.250e2 ? -0.253024461399227780e-5 + R * 0.127863870404613892e-6 + pow(R - 0.200e2, 2) * (-0.465706621003648665e-7) + pow(R - 0.200e2, 3) * 0.402866885748841682e-8 : 0.897983857985086731e-6 + R * (-0.356925862874034682e-7) + pow(R - 0.250e2, 2) * 0.138593707619613875e-7 + pow(R - 0.250e2, 3) * (-0.137686694569613862e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.8650494112e1 * (R - 0.300e2) * (R - 0.250e2) + 0.9227206040e2 * R + 0.5420988166e4 - 0.4613603020e1 * R * R + 0.75000e3 * (0.1691655320e-1 * R - 0.6997302755e0) * R) * pow(R, -6));
}

static double radcoeff_4_10_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.849810973399999121e-2 + R * (-0.173472347597680709e-17) + pow(R - 0.475e1, 2) * (-0.130656095047727960e0) + pow(R - 0.475e1, 3) * 0.327180467486911875e0 : (R < 0.525e1 ? 0.835662848034004688e-2 + R * (-0.398170987006800890e-2) + pow(R - 0.50e1, 2) * 0.114729255567455932e0 + pow(R - 0.50e1, 3) * (-0.148167145052735594e0) : (R < 0.55e1 ? -0.142100167141428174e0 + R * 0.256015782162720348e-1 + pow(R - 0.525e1, 2) * 0.360389677790424025e-2 + pow(R - 0.525e1, 3) * (-0.294791983799694776e-1) : (R < 0.575e1 ? -0.121845828877389317e0 + R * 0.218761769089798747e-1 + pow(R - 0.55e1, 2) * (-0.185055020070728701e-1) + pow(R - 0.55e1, 3) * (-0.185399480338651235e-2) : (R < 0.60e1 ? -0.678292350038987024e-1 + R * 0.122758018798084702e-1 + pow(R - 0.575e1, 2) * (-0.198959981096127544e-1) + pow(R - 0.575e1, 3) * (-0.878004519048450685e-2) : (R < 0.625e1 ? 0.355622076282518379e-3 + R * 0.681544351786246907e-3 + pow(R - 0.60e1, 2) * (-0.264810320024761355e-1) + pow(R - 0.60e1, 3) * 0.299974023173245827e-1 : (R < 0.65e1 ? 0.467692861544591332e-1 + R * (-0.693445871495346113e-2) + pow(R - 0.625e1, 2) * (-0.398298026448269758e-2) + pow(R - 0.625e1, 3) * 0.153096447531861704e-1 : (R < 0.675e1 ? 0.410456194038206212e-1 + R * (-0.605539045597240297e-2) + pow(R - 0.65e1, 2) * 0.749925330040693023e-2 + pow(R - 0.65e1, 3) * (-0.279053742606927627e-2) : (R < 0.70e1 ? 0.196925146290092626e-1 + R * (-0.282898957315692780e-2) + pow(R - 0.675e1, 2) * 0.540635023085497303e-2 + pow(R - 0.675e1, 3) * (-0.428743092090904873e-2) : (R < 0.725e1 ? 0.666844768599921586e-2 + R * (-0.929707755399887927e-3) + pow(R - 0.70e1, 2) * 0.219077704017318648e-2 + pow(R - 0.70e1, 3) * (-0.209303779589453719e-2) : (R < 0.75e1 ? 0.167632401866552429e-2 + R * (-0.226763822043520599e-3) + pow(R - 0.725e1, 2) * 0.620998693252283371e-3 + pow(R - 0.725e1, 3) * (-0.764562621912804122e-3) : (R < 0.775e1 ? 0.449611233397222544e-3 + R * (-0.596199670260296729e-4) + pow(R - 0.75e1, 2) * 0.475767268176802868e-4 + pow(R - 0.75e1, 3) * 0.215366469273753629e-3 : (R < 0.80e1 ? -0.413643371762043347e-4 + R * 0.454960937163926914e-5 + pow(R - 0.775e1, 2) * 0.209101578772995515e-3 + pow(R - 0.775e1, 3) * (-0.413368520974210336e-3) : (R < 0.825e1 ? -0.251107905273780668e-3 + R * 0.315938010754725855e-4 + pow(R - 0.80e1, 2) * (-0.100924811957662250e-3) + pow(R - 0.80e1, 3) * 0.821925740470876850e-4 : (R < 0.85e1 ? 0.330417642946192222e-4 + R * (-0.345749726952960277e-5) + pow(R - 0.825e1, 2) * (-0.392803814223464828e-4) + pow(R - 0.825e1, 3) * 0.787096345778595603e-4 : (R < 0.875e1 ? 0.733147194325104964e-4 + R * (-0.833963149735417578e-5) + pow(R - 0.85e1, 2) * 0.197518445110481874e-4 + pow(R - 0.85e1, 3) * (-0.388997091585259371e-4) : (R < 0.90e1 ? 0.513469173612198307e-4 + R * (-0.575740470905369528e-5) + pow(R - 0.875e1, 2) * (-0.942293735784626375e-5) + pow(R - 0.875e1, 3) * 0.362004156242441672e-4 : (R < 0.925e1 ? 0.326386320151794102e-4 + R * (-0.368129545843104581e-5) + pow(R - 0.90e1, 2) * 0.177273743603368667e-4 + pow(R - 0.90e1, 3) * 0.289361154474927145e-5 : (R < 0.95e1 ? -0.532159083463953453e-4 + R * 0.572494388637787514e-5 + pow(R - 0.925e1, 2) * 0.198975830188988204e-4 + pow(R - 0.925e1, 3) * (-0.310362114096412840e-4) : (R < 0.100e2 ? -0.916875179769356674e-4 + R * 0.985444575651954333e-5 + pow(R - 0.95e1, 2) * (-0.337957553833214470e-5) + pow(R - 0.95e1, 3) * (-0.163126178054138853e-4) : (R < 0.105e2 ? 0.615688998367301432e-4 + R * (-0.575959313587301491e-5) + pow(R - 0.100e2, 2) * (-0.278485022464529722e-4) + pow(R - 0.100e2, 3) * 0.351968716923979982e-4 : (R < 0.110e2 ? 0.742402922467885984e-4 + R * (-0.721044161302748505e-5) + pow(R - 0.105e2, 2) * 0.249468052921440353e-4 + pow(R - 0.105e2, 3) * (-0.193237903881781258e-4) : (R < 0.120e2 ? -0.369320677398124824e-4 + R * 0.324352088798295337e-5 + pow(R - 0.110e2, 2) * (-0.403888029012315506e-5) + pow(R - 0.110e2, 3) * 0.149001326294020124e-5 : (R < 0.140e2 ? 0.381171473011302949e-5 + R * (-0.364199903442752497e-6) + pow(R - 0.120e2, 2) * 0.431159498697448765e-6 + pow(R - 0.120e2, 3) * (-0.156456934113036237e-6) : (R < 0.160e2 ? 0.642453025593149846e-5 + R * (-0.517045118009392709e-6) + pow(R - 0.140e2, 2) * (-0.507582105980768765e-6) + pow(R - 0.140e2, 3) * 0.230313084992732533e-6 : (R < 0.180e2 ? -0.549815102368516245e-5 + R * 0.216383477980322630e-6 + pow(R - 0.160e2, 2) * 0.874296403975626540e-6 + pow(R - 0.160e2, 3) * (-0.246083291607893911e-6) : (R < 0.200e2 ? -0.137649818399858254e-4 + R * 0.760569594588101431e-6 + pow(R - 0.180e2, 2) * (-0.602203345671737034e-6) + pow(R - 0.180e2, 3) * 0.115832628926343146e-6 : (R < 0.250e2 ? 0.512930252015458012e-5 + R * (-0.258252240982729001e-6) + pow(R - 0.200e2, 2) * 0.927924278863218179e-7 + pow(R - 0.200e2, 3) * (-0.800242266675520441e-8) : -0.174475408744622310e-5 + R * 0.694903378738489255e-7 + pow(R - 0.250e2, 2) * (-0.272439121150062333e-7) + pow(R - 0.250e2, 3) * 0.271239889284728975e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1143753584e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1220002996e3 * R - 0.7167468212e4 + 0.6100014980e1 * R * R + 0.75000e3 * (-0.2236662748e-1 * R + 0.925163763e0) * R) * pow(R, -6));
}

static double radcoeff_4_10_8_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.373625802599999654e-1 + R * (-0.693889390390722838e-17) + pow(R - 0.475e1, 2) * 0.443735577494982714e0 + pow(R - 0.475e1, 3) * (-0.782692797659930606e0) : (R < 0.525e1 ? -0.397423127561271738e0 + R * 0.751128891862543474e-1 + pow(R - 0.50e1, 2) * (-0.143284020749965324e0) + pow(R - 0.50e1, 3) * 0.233337794579791785e0 : (R < 0.55e1 ? -0.256303812887658911e0 + R * 0.472217152949826538e-1 + pow(R - 0.525e1, 2) * 0.317193251848785357e-1 + pow(R - 0.525e1, 3) * (-0.126941323379236581e0) : (R < 0.575e1 ? -0.212624717761982801e0 + R * 0.392798797538150557e-1 + pow(R - 0.55e1, 2) * (-0.634866673495489142e-1) + pow(R - 0.55e1, 3) * (-0.690038944684525247e-2) : (R < 0.60e1 ? -0.267368020541034479e-1 + R * 0.624272305775712150e-2 + pow(R - 0.575e1, 2) * (-0.686619594346828538e-1) + pow(R - 0.575e1, 3) * 0.881488826386174762e-1 : (R < 0.625e1 ? 0.771675371080611516e-1 + R * (-0.115603411648435243e-1) + pow(R - 0.60e1, 2) * (-0.255029745571974014e-2) + pow(R - 0.60e1, 3) * 0.295088903637537227e-2 : (R < 0.65e1 ? 0.815658576178938388e-1 + R * (-0.122821981983830143e-1) + pow(R - 0.625e1, 2) * (-0.337130678438210660e-3) + pow(R - 0.625e1, 3) * 0.190472344318810619e-1 : (R < 0.675e1 ? 0.597242577295587218e-1 + R * (-0.887940708162441791e-2) + pow(R - 0.65e1, 2) * 0.139482951454725883e-1 + pow(R - 0.65e1, 3) * (-0.747039994789964502e-2) : (R < 0.70e1 ? 0.228585299948553360e-1 + R * (-0.330595949911930906e-2) + pow(R - 0.675e1, 2) * 0.834549518454785408e-2 + pow(R - 0.675e1, 3) * (-0.854267008348246967e-2) : (R < 0.725e1 ? 0.524966556248841580e-2 + R * (-0.734962547498345083e-3) + pow(R - 0.70e1, 2) * 0.193849262193600204e-2 + pow(R - 0.70e1, 3) * (-0.196285299625048506e-2) : (R < 0.75e1 ? 0.981369310552998413e-3 + R * (-0.133751173327310120e-3) + pow(R - 0.725e1, 2) * 0.466352874748138246e-3 + pow(R - 0.725e1, 3) * (-0.562420010875590900e-3) : (R < 0.775e1 ? 0.438084125411073184e-4 + R * (-0.602848799241430883e-5) + pow(R - 0.75e1, 2) * 0.445378665914450308e-4 + pow(R - 0.75e1, 3) * (-0.112167139959151187e-3) : (R < 0.80e1 ? 0.352480598525029641e-4 + R * (-0.479089343903264102e-5) + pow(R - 0.775e1, 2) * (-0.395874883779183596e-4) + pow(R - 0.775e1, 3) * 0.158167774232195681e-3 : (R < 0.825e1 ? -0.436564945353590104e-4 + R * 0.507182004054487611e-5 + pow(R - 0.80e1, 2) * 0.790383422962284146e-4 + pow(R - 0.80e1, 3) * (-0.182684687913631672e-3) : (R < 0.85e1 ? -0.850138317460384516e-4 + R * 0.103376122048531466e-4 + pow(R - 0.825e1, 2) * (-0.579751736389953396e-4) + pow(R - 0.825e1, 3) * 0.375499108047310022e-4 : (R < 0.875e1 ? 0.984987548785384127e-4 + R * (-0.116093663387574590e-4) + pow(R - 0.85e1, 2) * (-0.298127405354470862e-4) + pow(R - 0.85e1, 3) * 0.108180745609907675e-3 : (R < 0.90e1 ? 0.512724868214539846e-4 + R * (-0.623184680462331306e-5) + pow(R - 0.875e1, 2) * 0.513228186719836735e-4 + pow(R - 0.875e1, 3) * (-0.663523194779616681e-4) : (R < 0.925e1 ? -0.655397369082563638e-4 + R * 0.698850262925070840e-5 + pow(R - 0.90e1, 2) * 0.155857906351242101e-5 + pow(R - 0.90e1, 3) * (-0.403215770740610109e-4) : (R < 0.95e1 ? -0.334804328948943742e-5 + R * 0.207496459620479683e-6 + pow(R - 0.925e1, 2) * (-0.286826037420333374e-4) + pow(R - 0.925e1, 3) * 0.852325313902056823e-4 : (R < 0.100e2 ? -0.193870264845400614e-4 + R * 0.184729422426737473e-5 + pow(R - 0.95e1, 2) * 0.352417948006209176e-4 + pow(R - 0.95e1, 3) * (-0.442541561543113309e-4) : (R < 0.105e2 ? -0.366201241525479344e-4 + R * 0.389847190915479324e-5 + pow(R - 0.100e2, 2) * (-0.311394394308460822e-4) + pow(R - 0.100e2, 3) * 0.295813654810729912e-4 : (R < 0.110e2 ? 0.533035475357087292e-4 + R * (-0.505494341088654556e-5) + pow(R - 0.105e2, 2) * 0.132326087907634012e-4 + pow(R - 0.105e2, 3) * (-0.111334710803806163e-4) : (R < 0.120e2 ? 0.151245556309468852e-5 + R * (-0.172437930408608041e-6) + pow(R - 0.110e2, 2) * (-0.346759782980752491e-5) + pow(R - 0.110e2, 3) * 0.174718276521613277e-5 : (R < 0.140e2 ? 0.201158088665031074e-4 + R * (-0.186608529437525892e-5) + pow(R - 0.120e2, 2) * 0.177395046584087424e-5 + pow(R - 0.120e2, 3) * (-0.329803724951622416e-6) : (R < 0.160e2 ? -0.193610193649627717e-4 + R * 0.127207186956876927e-5 + pow(R - 0.140e2, 2) * (-0.204871883868860148e-6) + pow(R - 0.140e2, 3) * (-0.117751400827622719e-7) : (R < 0.180e2 ? -0.490208055750290519e-5 + R * 0.311282653100181559e-6 + pow(R - 0.160e2, 2) * (-0.275522724365433786e-6) + pow(R - 0.160e2, 3) * 0.574348444826714888e-7 : (R < 0.200e2 ? 0.188701704695092079e-5 + R * (-0.101590110569495601e-6) + pow(R - 0.180e2, 2) * 0.690863425305951864e-7 + pow(R - 0.180e2, 3) * (-0.129538541229236906e-7) : (R < 0.250e2 ? -0.358250828856016692e-6 + R * 0.193090100778008341e-7 + pow(R - 0.200e2, 2) * (-0.863678220694695882e-8) + pow(R - 0.200e2, 3) * 0.778417760677358388e-9 : 0.222794086521671893e-6 + R * (-0.867747994086687602e-8) + pow(R - 0.250e2, 2) * 0.303948420321341721e-8 + pow(R - 0.250e2, 3) * (-0.294577558208008347e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.8937399264e1 * (R - 0.300e2) * (R - 0.250e2) + 0.9533229840e2 * R + 0.5600662792e4 - 0.4766614920e1 * R * R + 0.75000e3 * (0.1747737902e-1 * R - 0.7229251005e0) * R) * pow(R, -6));
}

static double radcoeff_4_10_8_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.115095822899999832e-1 + R * 0.346944695195361419e-17 + pow(R - 0.475e1, 2) * 0.145675302837245113e0 + pow(R - 0.475e1, 3) * (-0.380804880468980422e0) : (R < 0.525e1 ? 0.748053080655643188e-2 + R * 0.143673633068871348e-2 + pow(R - 0.50e1, 2) * (-0.139928357514490259e0) + pow(R - 0.50e1, 3) * 0.202896150334941600e0 : (R < 0.55e1 ? 0.169491301300463026e0 + R * (-0.304844142387548644e-1) + pow(R - 0.525e1, 2) * 0.122437552367159423e-1 + pow(R - 0.525e1, 3) * (-0.119573478147859489e-1) : (R < 0.575e1 ? 0.148730390476180890e0 + R * (-0.266045393356692528e-1) + pow(R - 0.55e1, 2) * 0.327574437562648015e-2 + pow(R - 0.55e1, 3) * 0.511197174042021668e-1 : (R < 0.60e1 ? 0.852026596777666206e-1 + R * (-0.153817201345681082e-1) + pow(R - 0.575e1, 2) * 0.416155324287781070e-1 + pow(R - 0.575e1, 3) * (-0.291355437540226810e-1) : (R < 0.625e1 ? -0.472072297965017013e-2 + R * (-0.368683740583049605e-4) + pow(R - 0.60e1, 2) * 0.197638746132610954e-1 + pow(R - 0.60e1, 3) * (-0.149293975561114890e-1) : (R < 0.65e1 ? -0.479854730585083655e-1 + R * 0.704580689080133802e-2 + pow(R - 0.625e1, 2) * 0.856682644617747825e-2 + pow(R - 0.625e1, 3) * (-0.223262541175313113e-1) : (R < 0.675e1 ? -0.484309578705442167e-1 + R * 0.714304746685295606e-2 + pow(R - 0.65e1, 2) * (-0.817786414197100610e-2) + pow(R - 0.65e1, 3) * 0.141916141823673425e-2 : (R < 0.70e1 ? -0.231157346731611750e-1 + R * 0.332020816178684028e-2 + pow(R - 0.675e1, 2) * (-0.711349307829345530e-2) + pow(R - 0.675e1, 3) * 0.674904837418438021e-2 : (R < 0.725e1 ? -0.741577432679778759e-2 + R * 0.102890819279968402e-2 + pow(R - 0.70e1, 2) * (-0.205170679765517014e-2) + pow(R - 0.70e1, 3) * 0.162839094742573656e-2 : (R < 0.75e1 ? -0.229471919572457692e-2 + R * 0.308378096614424408e-3 + pow(R - 0.725e1, 2) * (-0.830413587085867774e-3) + pow(R - 0.725e1, 3) * 0.925812451792680882e-3 : (R < 0.775e1 ? -0.520027034119636207e-3 + R * 0.667611377826181666e-4 + pow(R - 0.75e1, 2) * (-0.136054248241357140e-3) + pow(R - 0.75e1, 3) * 0.101203328731537732e-3 : (R < 0.80e1 ? -0.146799997751047772e-3 + R * 0.177096377991029359e-4 + pow(R - 0.775e1, 2) * (-0.601517516927038305e-4) + pow(R - 0.775e1, 3) * 0.976100442891683569e-4 : (R < 0.825e1 ? -0.548423849527606889e-4 + R * 0.593564525697008590e-5 + pow(R - 0.80e1, 2) * 0.130557815241724372e-4 + pow(R - 0.80e1, 3) * (-0.246147629122111123e-4) : (R < 0.85e1 ? -0.701901416853879540e-4 + R * 0.784826797301672177e-5 + pow(R - 0.825e1, 2) * (-0.540529065998589536e-5) + pow(R - 0.825e1, 3) * 0.310891983356760280e-4 : (R < 0.875e1 ? -0.966181281701857436e-4 + R * 0.109748473309630289e-4 + pow(R - 0.85e1, 2) * 0.179116080917711256e-4 + pow(R - 0.85e1, 3) * (-0.614398911664929416e-4) : (R < 0.90e1 ? -0.740221149206976770e-4 + R * 0.841067178313116350e-5 + pow(R - 0.875e1, 2) * (-0.281683102830985839e-4) + pow(R - 0.875e1, 3) * (-0.231705617401042920e-4) : (R < 0.925e1 ? 0.897130448697891313e-4 + R * (-0.100179636846876819e-4) + pow(R - 0.90e1, 2) * (-0.455462315881768046e-4) + pow(R - 0.90e1, 3) * 0.156654159451710131e-3 : (R < 0.95e1 ? 0.282683899336190117e-4 + R * (-0.341842458158043386e-5) + pow(R - 0.925e1, 2) * 0.719443880006057936e-4 + pow(R - 0.925e1, 3) * (-0.129825243049136208e-3) : (R < 0.100e2 ? -0.797482340605894962e-4 + R * 0.821153634700941974e-5 + pow(R - 0.95e1, 2) * (-0.254245442862463690e-4) + pow(R - 0.95e1, 3) * 0.175706048164550562e-4 : (R < 0.105e2 ? 0.385578622089565584e-4 + R * (-0.403505432689565628e-5) + pow(R - 0.100e2, 2) * 0.931362938436215840e-6 + pow(R - 0.100e2, 3) * 0.422133241471019285e-5 : (R < 0.110e2 ? -0.370393412401864736e-5 + R * 0.623079225732045193e-7 + pow(R - 0.105e2, 2) * 0.726336156050150544e-5 + pow(R - 0.105e2, 3) * (-0.395276432329582790e-5) : (R < 0.120e2 ? -0.496688607726312185e-4 + R * 0.436109624060283798e-5 + pow(R - 0.110e2, 2) * 0.133421507555776317e-5 + pow(R - 0.110e2, 3) * (-0.185957005516060132e-5) : (R < 0.140e2 ? -0.152708555798387385e-4 + R * 0.145081622623656141e-5 + pow(R - 0.120e2, 2) * (-0.424449508992404100e-5) + pow(R - 0.120e2, 3) * 0.118896136315288002e-5 : (R < 0.160e2 ? 0.152090709917505806e-4 + R * (-0.125962777562504153e-5) + pow(R - 0.140e2, 2) * 0.288927308899323911e-5 + pow(R - 0.140e2, 3) * (-0.742381058965359196e-6) : (R < 0.180e2 ? -0.215491994978176659e-4 + R * 0.138889187276360413e-5 + pow(R - 0.160e2, 2) * (-0.156501326479891586e-5) + pow(R - 0.160e2, 3) * 0.350795433396056772e-6 : (R < 0.200e2 ? 0.119062523621287808e-4 + R * (-0.661615985679376657e-6) + pow(R - 0.180e2, 2) * 0.539759335577425093e-6 + pow(R - 0.180e2, 3) * (-0.104290745118868374e-6) : (R < 0.250e2 ? -0.492000427417806618e-5 + R * 0.245932415203903334e-6 + pow(R - 0.200e2, 2) * (-0.859851351357851638e-7) + pow(R - 0.200e2, 3) * 0.736830350460090033e-8 : 0.153211999832202057e-5 + R * (-0.612961733088808219e-7) + pow(R - 0.250e2, 2) * 0.245394174332283312e-7 + pow(R - 0.250e2, 3) * (-0.245439668149043287e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4339104320e0 * (R - 0.300e2) * (R - 0.250e2) - 0.4628483768e1 * R - 0.2718895470e3 + 0.2314241884e0 * R * R + 0.75000e3 * (-0.848490835e-3 * R + 0.3509578650e-1) * R) * pow(R, -6));
}

static double radcoeff_4_10_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.632096041299999994e-1 + pow(R - 0.475e1, 2) * (-0.115966025976327192e1) + pow(R - 0.475e1, 3) * 0.216709018849308777e1 : (R < 0.525e1 ? 0.892095219785910110e0 + R * (-0.173500719539182030e0) + pow(R - 0.50e1, 2) * 0.465657381606543797e0 + pow(R - 0.50e1, 3) * (-0.648350070759262653e0) : (R < 0.55e1 ? 0.326937310463177366e0 + R * (-0.622376670032718723e-1) + pow(R - 0.525e1, 2) * (-0.206051714629032073e-1) + pow(R - 0.525e1, 3) * 0.137897463503962758e0 : (R < 0.575e1 ? 0.242261597402517487e0 + R * (-0.466844783277304554e-1) + pow(R - 0.55e1, 2) * 0.828179261650688753e-1 + pow(R - 0.55e1, 3) * 0.611162474634118005e-1 : (R < 0.60e1 ? -0.555998328666137548e-1 + R * 0.618378115419369531e-2 + pow(R - 0.575e1, 2) * 0.128655111762627727e0 + pow(R - 0.575e1, 3) * (-0.214059668717609980e0) : (R < 0.625e1 ? -0.196051778685734063e0 + R * 0.303751491509556791e-1 + pow(R - 0.60e1, 2) * (-0.318896397755797714e-1) + pow(R - 0.60e1, 3) * 0.339248491030282109e-1 : (R < 0.65e1 ? -0.137615363648397382e0 + R * 0.207912384699835834e-1 + pow(R - 0.625e1, 2) * (-0.644600294830861321e-2) + pow(R - 0.625e1, 3) * (-0.210596227985029028e-1) : (R < 0.675e1 ? -0.917313705712148875e-1 + R * 0.136195577211099816e-1 + pow(R - 0.65e1, 2) * (-0.222407200471857920e-1) + pow(R - 0.65e1, 3) * 0.142368344749834487e-1 : (R < 0.70e1 ? -0.358550285085412618e-1 + R * 0.516860416157648335e-2 + pow(R - 0.675e1, 2) * (-0.115630941909482046e-1) + pow(R - 0.675e1, 3) * 0.105895756057690724e-1 : (R < 0.725e1 ? -0.984024809088858074e-2 + R * 0.137260249218408288e-2 + pow(R - 0.70e1, 2) * (-0.362091248662140030e-2) + pow(R - 0.70e1, 3) * 0.404426224434027443e-2 : (R < 0.75e1 ? -0.237522474809208567e-2 + R * 0.320445419687184242e-3 + pow(R - 0.725e1, 2) * (-0.587715803366194254e-3) + pow(R - 0.725e1, 3) * 0.330050460709828332e-3 : (R < 0.775e1 ? -0.666999145098849753e-3 + R * 0.884719793871799716e-4 + pow(R - 0.75e1, 2) * (-0.340177957833822991e-3) + pow(R - 0.75e1, 3) * 0.454355299252412383e-3 : (R < 0.80e1 ? -0.232064235327423969e-4 + R * 0.357461908009579330e-5 + pow(R - 0.775e1, 2) * 0.588516605486287595e-6 + pow(R - 0.775e1, 3) * (-0.230649554347783743e-5) : (R < 0.825e1 ? -0.221000033444947405e-4 + R * 0.343640946843684229e-5 + pow(R - 0.80e1, 2) * (-0.114135505212209069e-5) + pow(R - 0.80e1, 3) * (-0.157998139745011089e-4) : (R < 0.85e1 ? 0.673021670320607685e-5 + R * (-0.967331778431607661e-7) + pow(R - 0.825e1, 2) * (-0.129912155329979228e-4) + pow(R - 0.825e1, 3) * 0.238601689134822600e-4 : (R < 0.875e1 ? 0.234766026810456810e-4 + R * (-0.211855927306419779e-5) + pow(R - 0.85e1, 2) * 0.490391115211377217e-5 + pow(R - 0.85e1, 3) * 0.420871596965720796e-4 : (R < 0.90e1 ? -0.660631486693745890e-4 + R * 0.822473874609995237e-5 + pow(R - 0.875e1, 2) * 0.364692809245428302e-4 + pow(R - 0.875e1, 3) * (-0.205862071763770560e-3) : (R < 0.925e1 ? 0.116280068458020521e-3 + R * (-0.121397592473356125e-4) + pow(R - 0.90e1, 2) * (-0.117927272898285090e-3) + pow(R - 0.90e1, 3) * 0.320507426622510146e-3 : (R < 0.95e1 ? 0.103451111549006952e-3 + R * (-0.110082532047575085e-4) + pow(R - 0.925e1, 2) * 0.122453297068597519e-3 + pow(R - 0.925e1, 3) * (-0.248612705958269975e-3) : (R < 0.100e2 ? -0.315919095024735268e-4 + R * 0.360351296236563416e-5 + pow(R - 0.95e1, 2) * (-0.640062324001049486e-4) + pow(R - 0.95e1, 3) * 0.694009019907473580e-4 : (R < 0.105e2 ? 0.806372042167879645e-4 + R * (-0.835204294467879586e-5) + pow(R - 0.100e2, 2) * 0.400951205860160885e-4 + pow(R - 0.100e2, 3) * (-0.304452204333169964e-4) : (R < 0.110e2 ? -0.943873234318702510e-4 + R * 0.890916231634954706e-5 + pow(R - 0.105e2, 2) * (-0.557271006395940436e-5) + pow(R - 0.105e2, 3) * (-0.206286660947937838e-5) : (R < 0.120e2 ? -0.177198990420866922e-4 + R * 0.178930229528060839e-5 + pow(R - 0.110e2, 2) * (-0.866700997817847214e-5) + pow(R - 0.110e2, 3) * 0.399028930089786285e-5 : (R < 0.140e2 ? 0.419612049248929459e-4 + R * (-0.357384975838274524e-5) + pow(R - 0.120e2, 2) * 0.330385792451511851e-5 + pow(R - 0.120e2, 3) * (-0.716789083211872967e-6) : (R < 0.160e2 ? -0.151531538359935489e-4 + R * 0.104011294113525342e-5 + pow(R - 0.140e2, 2) * (-0.996876574756119078e-6) + pow(R - 0.140e2, 3) * 0.234877589844246115e-6 : (R < 0.180e2 ? 0.144196411803230286e-5 + R * (-0.128862279758268936e-6) + pow(R - 0.160e2, 2) * 0.412388964309357770e-6 + pow(R - 0.160e2, 3) * (-0.103802686702611638e-6) : (R < 0.200e2 ? -0.500952662086080280e-5 + R * 0.275061337047822377e-6 + pow(R - 0.180e2, 2) * (-0.210427155906312060e-6) + pow(R - 0.180e2, 3) * 0.402581622162004292e-7 : (R < 0.250e2 ? 0.164304359386041208e-5 + R * (-0.835493399830206076e-7) + pow(R - 0.200e2, 2) * 0.311218173908905548e-7 + pow(R - 0.200e2, 3) * (-0.270572496285728595e-8) : -0.624346634089712298e-6 + R * 0.247394617115884900e-7 + pow(R - 0.250e2, 2) * (-0.946405705196872996e-8) + pow(R - 0.250e2, 3) * 0.937030134730206256e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.8941825856e1 * (R - 0.300e2) * (R - 0.250e2) - 0.9537959560e2 * R - 0.5603524694e4 + 0.4768979780e1 * R * R + 0.75000e3 * (-0.1748620864e-1 * R + 0.7232924865e0) * R) * pow(R, -6));
}

static double radcoeff_4_10_10_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.295585229800000050e-1 + R * 0.867361737988403547e-18 + pow(R - 0.475e1, 2) * (-0.107408140987829692e0) + pow(R - 0.475e1, 3) * 0.454401171951318794e0 : (R < 0.525e1 ? -0.186652259714787133e0 + R * 0.314961492469574278e-1 + pow(R - 0.50e1, 2) * 0.233392737975659376e0 + pow(R - 0.50e1, 3) * (-0.455809423693956384e0) : (R < 0.55e1 ? -0.343155771573894042e0 + R * 0.627282512921702867e-1 + pow(R - 0.525e1, 2) * (-0.108464329794807912e0) + pow(R - 0.525e1, 3) * 0.174765313224506974e0 : (R < 0.575e1 ? -0.229153906490987658e0 + R * 0.412645826243613900e-1 + pow(R - 0.55e1, 2) * 0.226096551235723323e-1 + pow(R - 0.55e1, 3) * (-0.143940176148071530e0) : (R < 0.60e1 ? -0.139807124368708818e0 + R * 0.255806271583841408e-1 + pow(R - 0.575e1, 2) * (-0.853454769874813224e-1) + pow(R - 0.575e1, 3) * 0.807125637837789733e-1 : (R < 0.625e1 ? 0.213547138343877438e-1 + R * (-0.195850562589795687e-2) + pow(R - 0.60e1, 2) * (-0.248110541496470820e-1) + pow(R - 0.60e1, 3) * 0.956541483695563279e-2 : (R < 0.65e1 ? 0.862785562624519831e-1 + R * (-0.125705174187923166e-1) + pow(R - 0.625e1, 2) * (-0.176369930219303570e-1) + pow(R - 0.625e1, 3) * 0.428692124523985044e-1 : (R < 0.675e1 ? 0.909194502880630306e-1 + R * (-0.133510365949327733e-1) + pow(R - 0.65e1, 2) * 0.145149163173685213e-1 + pow(R - 0.65e1, 3) * (-0.356660263054970478e-2) : (R < 0.70e1 ? 0.472970432749669420e-1 + R * (-0.676231642947658362e-2) + pow(R - 0.675e1, 2) * 0.118399643444562427e-1 + pow(R - 0.675e1, 3) * (-0.897853396219963282e-2) : (R < 0.725e1 ? 0.182412020727262536e-1 + R * (-0.252580937516089319e-2) + pow(R - 0.70e1, 2) * 0.510606387280651813e-2 + pow(R - 0.70e1, 3) * (-0.468998231425177964e-2) : (R < 0.75e1 ? 0.635301326062886161e-2 + R * (-0.852149122679843026e-3) + pow(R - 0.725e1, 2) * 0.158857713711768318e-2 + pow(R - 0.725e1, 3) * (-0.122600733439324409e-2) : (R < 0.775e1 ? 0.220005151685801056e-2 + R * (-0.287736929319734689e-3) + pow(R - 0.75e1, 2) * 0.669071636322750058e-3 + pow(R - 0.75e1, 3) * (-0.584747964815244669e-3) : (R < 0.80e1 ? 0.489791102803439969e-3 + R * (-0.628413545612180628e-4) + pow(R - 0.775e1, 2) * 0.230510662711316529e-3 + pow(R - 0.775e1, 3) * (-0.324095589129777182e-3) : (R < 0.825e1 ? 0.632347584921441857e-4 + R * (-0.835394616739302333e-5) + pow(R - 0.80e1, 2) * (-0.125610291360163828e-4) + pow(R - 0.80e1, 3) * 0.560190630303539195e-4 : (R < 0.85e1 ? 0.284847490919812992e-4 + R * (-0.413088641720985483e-5) + pow(R - 0.825e1, 2) * 0.294532681367490585e-4 + pow(R - 0.825e1, 3) * (-0.385090775196385423e-4) : (R < 0.875e1 ? -0.340786732699757962e-4 + R * 0.337529561623244647e-5 + pow(R - 0.85e1, 2) * 0.571459997020149113e-6 + pow(R - 0.85e1, 3) * 0.112734612020026082e-5 : (R < 0.90e1 ? -0.383750319524506046e-4 + R * 0.387240301228006964e-5 + pow(R - 0.875e1, 2) * 0.141696958717034473e-5 + pow(R - 0.875e1, 3) * (-0.112271068971624943e-4) : (R < 0.925e1 ? -0.258925151518254762e-4 + R * 0.247580526264727495e-5 + pow(R - 0.90e1, 2) * (-0.700336058570152561e-5) + pow(R - 0.90e1, 3) * 0.434081368284497090e-4 : (R < 0.95e1 ? -0.685474176534602031e-4 + R * 0.711315062513083342e-5 + pow(R - 0.925e1, 2) * 0.255527420356357553e-4 + pow(R - 0.925e1, 3) * (-0.550968536006363305e-4) : (R < 0.100e2 ? -0.910455138072792548e-4 + R * 0.955886159282939569e-5 + pow(R - 0.95e1, 2) * (-0.157698981648414960e-4) + pow(R - 0.95e1, 3) * 0.740769201436540437e-5 : (R < 0.105e2 ? 0.807926469438045663e-5 + R * (-0.655267561238045756e-6) + pow(R - 0.100e2, 2) * (-0.465836014329338860e-5) + pow(R - 0.100e2, 3) * 0.170931395389602956e-7 : (R < 0.110e2 ? 0.556949843315107426e-4 + R * (-0.530080784987721371e-5) + pow(R - 0.105e2, 2) * (-0.463272043398494815e-5) + pow(R - 0.105e2, 3) * 0.864623140347875064e-5 : (R < 0.120e2 ? 0.352460988437840701e-4 + R * (-0.344885473125309718e-5) + pow(R - 0.110e2, 2) * 0.833662667123318036e-5 + pow(R - 0.110e2, 3) * (-0.354459711898008260e-5) : (R < 0.140e2 ? -0.324354154302761749e-4 + R * 0.259060725427301489e-5 + pow(R - 0.120e2, 2) * (-0.229716468570706744e-5) + pow(R - 0.120e2, 3) * 0.515065425910279938e-6 : (R < 0.160e2 ? 0.460668008084652984e-5 + R * (-0.417266377631895013e-6) + pow(R - 0.140e2, 2) * 0.793227869754612404e-6 + pow(R - 0.140e2, 3) * (-0.182462864781832421e-6) : (R < 0.180e2 ? -0.941382498457304953e-5 + R * 0.566090724004565601e-6 + pow(R - 0.160e2, 2) * (-0.301549318936382070e-6) + pow(R - 0.160e2, 3) * 0.523425031295496308e-7 : (R < 0.200e2 ? 0.204288052154606554e-6 + R * (-0.119965141863670300e-7) + pow(R - 0.180e2, 2) * 0.125056998409157295e-7 + pow(R - 0.180e2, 3) * (-0.249412664886610673e-8) : (R < 0.250e2 ? -0.167507753218052033e-6 + R * 0.809676539090260241e-8 + pow(R - 0.200e2, 2) * (-0.245906005228091125e-8) + pow(R - 0.200e2, 3) * 0.203171031620078099e-9 : 0.302314532100162772e-7 + R * (-0.125600776040065097e-8) + pow(R - 0.250e2, 2) * 0.588505422020260366e-9 + pow(R - 0.250e2, 3) * (-0.607202979880260329e-10))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1783182528e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1902037668e2 * R - 0.1117557236e4 + 0.9510188340e0 * R * R + 0.75000e3 * (-0.3487278790e-2 * R + 0.1442493916e0) * R) * pow(R, -6));
}

static double radcoeff_4_10_12_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.288605686399986830e-2 + R * 0.277555756156289135e-16 + pow(R - 0.475e1, 2) * 0.174614059257169196e1 + pow(R - 0.475e1, 3) * (-0.373282122148676843e1) : (R < 0.525e1 ? -0.812137073975384705e0 + R * 0.173166317257076929e0 + pow(R - 0.50e1, 2) * (-0.105347532354338425e1) + pow(R - 0.50e1, 3) * 0.167572286830030603e1 : (R < 0.55e1 ? 0.264036913938615891e0 + R * (-0.393733067083077912e-1) + pow(R - 0.525e1, 2) * 0.203316827681845308e0 + pow(R - 0.525e1, 3) * (-0.401004598594456585e0) : (R < 0.575e1 ? 0.124893234991151611e0 + R * (-0.129032551038457469e-1) + pow(R - 0.55e1, 2) * (-0.974366212639971030e-1) + pow(R - 0.55e1, 3) * (-0.929450562479672282e-3) : (R < 0.60e1 ? 0.399921273518778098e0 + R * (-0.617958377163092334e-1) + pow(R - 0.575e1, 2) * (-0.981337091858568572e-1) + pow(R - 0.575e1, 3) * 0.207580539724375207e0 : (R < 0.625e1 ? 0.457904382995503789e0 + R * (-0.719413411109172951e-1) + pow(R - 0.60e1, 2) * 0.575516956074245689e-1 + pow(R - 0.60e1, 3) * (-0.595021681502141964e-2) : (R < 0.65e1 ? 0.288532253390134608e0 + R * (-0.442811589600215355e-1) + pow(R - 0.625e1, 2) * 0.530890329961585042e-1 + pow(R - 0.625e1, 3) * (-0.163823820322894116e-1) : (R < 0.675e1 ? 0.139021014097477580e0 + R * (-0.208083390929965500e-1) + pow(R - 0.65e1, 2) * 0.408022464719414446e-1 + pow(R - 0.65e1, 3) * (-0.324177177758209964e-1) : (R < 0.70e1 ? 0.443857198789477658e-1 + R * (-0.648553793999226240e-2) + pow(R - 0.675e1, 2) * 0.164889581400756956e-1 + pow(R - 0.675e1, 3) * (-0.164616470564265850e-1) : (R < 0.725e1 ? 0.905362479874079890e-2 + R * (-0.132761769303439995e-2) + pow(R - 0.70e1, 2) * 0.414272284775575681e-2 + pow(R - 0.70e1, 3) * (-0.383891895207262796e-2) : (R < 0.75e1 ? -0.546278004541490966e-3 + R * 0.239464273298608187e-4 + pow(R - 0.725e1, 2) * 0.126353363370128573e-2 + pow(R - 0.725e1, 3) * (-0.166274520568291556e-2) : (R < 0.775e1 ? -0.289330322716217694e-2 + R * 0.343948518114956924e-3 + pow(R - 0.75e1, 2) * 0.164747294390989959e-4 + pow(R - 0.75e1, 3) * (-0.198494593195706898e-3) : (R < 0.80e1 ? -0.267077715542991378e-2 + R * 0.314968146610311453e-3 + pow(R - 0.775e1, 2) * (-0.132396215457681194e-3) + pow(R - 0.775e1, 3) * (-0.414566519342580335e-4) : (R < 0.825e1 ? -0.208792983935037965e-2 + R * 0.240996916643797482e-3 + pow(R - 0.80e1, 2) * (-0.163488704408374719e-3) + pow(R - 0.80e1, 3) * 0.138942377327392827e-4 : (R < 0.85e1 ? -0.144503252921961449e-2 + R * 0.161857734014498710e-3 + pow(R - 0.825e1, 2) * (-0.153068026108820257e-3) + pow(R - 0.825e1, 3) * 0.135868367883301656e-3 : (R < 0.875e1 ? -0.101847743795476517e-2 + R * 0.110799039938207656e-3 + pow(R - 0.85e1, 2) * (-0.511667501963440153e-4) + pow(R - 0.85e1, 3) * 0.472636302540537781e-4 : (R < 0.90e1 ? -0.874624226895868800e-3 + R * 0.940775955126707249e-4 + pow(R - 0.875e1, 2) * (-0.157190275058036851e-4) + pow(R - 0.875e1, 3) * (-0.940688837795168489e-4) : (R < 0.925e1 ? -0.647599627269985199e-3 + R * 0.685801660511094647e-4 + pow(R - 0.90e1, 2) * (-0.862706903404413184e-4) + pow(R - 0.90e1, 3) * 0.934010331840137329e-4 : (R < 0.95e1 ? -0.414522628376745345e-3 + R * 0.429575146028913889e-4 + pow(R - 0.925e1, 2) * (-0.162199154524310085e-4) + pow(R - 0.925e1, 3) * (-0.205287583325382140e-4) : (R < 0.100e2 ? -0.302245685762587155e-3 + R * 0.309984146893249631e-4 + pow(R - 0.95e1, 2) * (-0.316164842018346707e-4) + pow(R - 0.95e1, 3) * 0.973669627036947631e-5 : (R < 0.105e2 ? -0.657930997886740400e-4 + R * 0.668445269026740346e-5 + pow(R - 0.100e2, 2) * (-0.170114397962804554e-4) + pow(R - 0.100e2, 3) * 0.790746133549129364e-5 : (R < 0.110e2 ? 0.472913327731430986e-4 + R * (-0.439639110439458085e-5) + pow(R - 0.105e2, 2) * (-0.515024779304351493e-5) + pow(R - 0.105e2, 3) * 0.103149856436653503e-4 : (R < 0.120e2 ? 0.188472381935798886e-4 + R * (-0.181039966468908090e-5) + pow(R - 0.110e2, 2) * 0.103222306724545114e-4 + pow(R - 0.110e2, 3) * (-0.527753521176542875e-5) : (R < 0.140e2 ? -0.338503348610838108e-4 + R * 0.300145604492365066e-5 + pow(R - 0.120e2, 2) * (-0.551037496284177819e-5) + pow(R - 0.120e2, 3) * 0.145987575318997617e-5 : (R < 0.160e2 ? 0.191090426962924612e-4 + R * (-0.152153476816374701e-5) + pow(R - 0.140e2, 2) * 0.324887955629807967e-5 + pow(R - 0.140e2, 3) * (-0.839577538233103064e-6) : (R < 0.180e2 ? -0.213414636467013587e-4 + R * 0.139905299823133491e-5 + pow(R - 0.160e2, 2) * (-0.178858567310053892e-5) + pow(R - 0.160e2, 3) * 0.410956981867435618e-6 : (R < 0.200e2 ? 0.148033098961086613e-4 + R * (-0.823805911761592317e-6) + pow(R - 0.180e2, 2) * 0.677156218104075205e-6 + pow(R - 0.180e2, 3) * (-0.130983550624139522e-6) : (R < 0.250e2 ? -0.627237893500068250e-5 + R * 0.313016353165034138e-6 + pow(R - 0.200e2, 2) * (-0.108745085640761965e-6) + pow(R - 0.200e2, 3) * 0.930455768075102662e-8 : 0.191228939285646333e-5 + R * (-0.765926771862585442e-7) + pow(R - 0.250e2, 2) * 0.308232795705034215e-7 + pow(R - 0.250e2, 3) * (-0.308637168425034185e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3856598944e1 * (R - 0.300e2) * (R - 0.250e2) - 0.4113687524e2 * R - 0.2416865922e4 + 0.2056843762e1 * R * R + 0.75000e3 * (-0.754190236e-2 * R + 0.3119624418e0) * R) * pow(R, -6));
}

static double radcoeff_4_10_12_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.103284500399999993e-1 + pow(R - 0.475e1, 2) * (-0.139740764187155031e0) + pow(R - 0.475e1, 3) * 0.182877874028620047e0 : (R < 0.525e1 ? 0.161699122546056229e0 + R * (-0.355807807132112464e-1) + pow(R - 0.50e1, 2) * (-0.258235866568997221e-2) + pow(R - 0.50e1, 3) * 0.723121180741398417e-1 : (R < 0.55e1 ? 0.982640522425638208e-1 + R * (-0.233134379071550137e-1) + pow(R - 0.525e1, 2) * 0.516517298899149060e-1 + pow(R - 0.525e1, 3) * (-0.488013895251793728e-1) : (R < 0.575e1 ? 0.901393939992782903e-2 + R * (-0.663783349816869650e-2) + pow(R - 0.55e1, 2) * 0.150506877460303730e-1 + pow(R - 0.55e1, 3) * 0.582871584265776468e-1 : (R < 0.60e1 ? -0.952462257140213459e-1 + R * 0.118163525798297992e-1 + pow(R - 0.575e1, 2) * 0.587660565659636064e-1 + pow(R - 0.575e1, 3) * (-0.557836755411312071e-1) : (R < 0.625e1 ? -0.205986501823096996e0 + R * 0.307399416988494989e-1 + pow(R - 0.60e1, 2) * 0.169282999101152028e-1 + pow(R - 0.60e1, 3) * (-0.403439653820528502e-1) : (R < 0.65e1 ? -0.211181710324826188e0 + R * 0.316395981447721922e-1 + pow(R - 0.625e1, 2) * (-0.133296741264244348e-1) + pow(R - 0.625e1, 3) * (-0.163605159866573174e-1) : (R < 0.675e1 ? -0.149009628250401233e0 + R * 0.219071643340617260e-1 + pow(R - 0.65e1, 2) * (-0.256000611164174247e-1) + pow(R - 0.65e1, 3) * 0.985230369668208851e-2 : (R < 0.70e1 ? -0.765248054231211228e-1 + R * 0.109544407189809071e-1 + pow(R - 0.675e1, 2) * (-0.182108333439058578e-1) + pow(R - 0.675e1, 3) * 0.134660531359289057e-1 : (R < 0.725e1 ? -0.313888534640025321e-1 + R * 0.437390901001464757e-2 + pow(R - 0.70e1, 2) * (-0.811129349195917858e-2) + pow(R - 0.70e1, 3) * 0.604567417240234502e-2 : (R < 0.75e1 ? -0.106162450681036163e-1 + R * 0.145182617136049874e-2 + pow(R - 0.725e1, 2) * (-0.357703786265741895e-2) + pow(R - 0.725e1, 3) * 0.331692785126169471e-2 : (R < 0.775e1 ? -0.203852074267517900e-2 + R * 0.285231212143357182e-3 + pow(R - 0.75e1, 2) * (-0.108934197421114748e-2) + pow(R - 0.75e1, 3) * 0.107812738895087445e-2 : (R < 0.80e1 ? 0.564787412387938331e-3 + R * (-0.572908895339275306e-4) + pow(R - 0.775e1, 2) * (-0.280746432497991480e-3) + pow(R - 0.775e1, 3) * 0.404825837734806371e-3 : (R < 0.825e1 ? 0.106931313746117646e-2 + R * (-0.121759261207647062e-3) + pow(R - 0.80e1, 2) * 0.228729458031132917e-4 + pow(R - 0.80e1, 3) * 0.112856127309899864e-3 : (R < 0.85e1 ? 0.803580850192744684e-3 + R * (-0.891622644354842089e-4) + pow(R - 0.825e1, 2) * 0.107515041285538197e-3 + pow(R - 0.825e1, 3) * (-0.158692452574405406e-3) : (R < 0.875e1 ? 0.603798141528537054e-3 + R * (-0.651595786504161208e-4) + pow(R - 0.85e1, 2) * (-0.115042981452658528e-4) + pow(R - 0.85e1, 3) * 0.128016650027721349e-3 : (R < 0.90e1 ? 0.445383370984948858e-3 + R * (-0.469086058428512951e-4) + pow(R - 0.875e1, 2) * 0.845081893755251606e-4 + pow(R - 0.875e1, 3) * (-0.191867380816479938e-3) : (R < 0.925e1 ? 0.391156557933608256e-3 + R * (-0.406296450581786997e-4) + pow(R - 0.90e1, 2) * (-0.593923462368348062e-4) + pow(R - 0.90e1, 3) * 0.191081279638198511e-3 : (R < 0.95e1 ? 0.333713188261013463e-3 + R * (-0.344980782444338888e-4) + pow(R - 0.925e1, 2) * 0.839186134918140636e-4 + pow(R - 0.925e1, 3) * (-0.928186816083140253e-4) : (R < 0.100e2 ? 0.104227672232814515e-3 + R * (-0.994227430008573840e-5) + pow(R - 0.95e1, 2) * 0.143046022855785378e-4 + pow(R - 0.95e1, 3) * (-0.106420452508141236e-4) : (R < 0.105e2 ? 0.432428836731779432e-4 + R * (-0.361920595261779407e-5) + pow(R - 0.100e2, 2) * (-0.165846559064264770e-5) + pow(R - 0.100e2, 3) * (-0.522194057624352848e-5) : (R < 0.110e2 ? 0.100712195443152419e-3 + R * (-0.919412697544308792e-5) + pow(R - 0.105e2, 2) * (-0.949137645500794021e-5) + pow(R - 0.105e2, 3) * 0.161188122037882345e-4 : (R < 0.120e2 ? 0.717791431785083341e-4 + R * (-0.659639427760984800e-5) + pow(R - 0.110e2, 2) * 0.146868418506744133e-4 + pow(R - 0.110e2, 3) * (-0.630944954206456470e-5) : (R < 0.140e2 ? -0.451874854143434316e-4 + R * 0.384894079754528612e-5 + pow(R - 0.120e2, 2) * (-0.424150677551927998e-5) + pow(R - 0.120e2, 3) * 0.102466354712331838e-5 : (R < 0.160e2 ? 0.114246993732281731e-4 + R * (-0.821123739052012370e-6) + pow(R - 0.140e2, 2) * 0.190647450722063010e-5 + pow(R - 0.140e2, 3) * (-0.531302734347311848e-6) : (R < 0.180e2 ? -0.520406794060425047e-5 + R * 0.429141477662765642e-6 + pow(R - 0.160e2, 2) * (-0.128134189886324120e-5) + pow(R - 0.160e2, 3) * 0.323938729390929180e-6 : (R < 0.200e2 ? 0.145479254691828829e-4 + R * (-0.808961365099049003e-6) + pow(R - 0.180e2, 2) * 0.662290477482333773e-6 + pow(R - 0.180e2, 3) * (-0.128032377653904627e-6) : (R < 0.250e2 ? -0.608263920376860957e-5 + R * 0.303812012983430462e-6 + pow(R - 0.200e2, 2) * (-0.105903788441094014e-6) + pow(R - 0.200e2, 3) * 0.906873333768158021e-8 : 0.187542985453477378e-5 + R * (-0.750708711013909485e-7) + pow(R - 0.250e2, 2) * 0.301272116241297158e-7 + pow(R - 0.250e2, 3) * (-0.301486813277030531e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2047662112e1 * (R - 0.300e2) * (R - 0.250e2) - 0.2184165576e2 * R - 0.1283173068e4 + 0.1092082788e1 * R * R + 0.75000e3 * (-0.4004257450e-2 * R + 0.1656300202e0) * R) * pow(R, -6));
}

static double radcoeff_4_10_13_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.540029427199999971e-2 + pow(R - 0.475e1, 2) * 0.509190339823329952e-1 + pow(R - 0.475e1, 3) * (-0.526032209853319888e-1) : (R < 0.525e1 ? -0.810218452580837439e-1 + R * 0.155964130564167497e-1 + pow(R - 0.50e1, 2) * 0.114666182433340071e-1 + pow(R - 0.50e1, 3) * (-0.406518431560040222e-1) : (R < 0.55e1 ? -0.710235814490482315e-1 + R * 0.137075015863329965e-1 + pow(R - 0.525e1, 2) * (-0.190222641236690131e-1) + pow(R - 0.525e1, 3) * 0.749202240934810238e-2 : (R < 0.575e1 ? -0.275103318763819417e-1 + R * 0.560112372625126177e-2 + pow(R - 0.55e1, 2) * (-0.134032473166579361e-1) + pow(R - 0.55e1, 3) * 0.475225412661156067e-2 : (R < 0.60e1 ? 0.513703119219372385e-2 + R * (-0.209452283338038957e-3) + pow(R - 0.575e1, 2) * (-0.983905672169926512e-2) + pow(R - 0.575e1, 3) * 0.878020710020568050e-2 : (R < 0.625e1 ? 0.242987180603946376e-1 + R * (-0.348269181289910610e-2) + pow(R - 0.60e1, 2) * (-0.325390139654500431e-2) + pow(R - 0.60e1, 3) * 0.429436560056570878e-2 : (R < 0.65e1 ? 0.292984308616596120e-1 + R * (-0.430444896106553770e-2) + pow(R - 0.625e1, 2) * (-0.331271961207226179e-4) + pow(R - 0.625e1, 3) * 0.426667289753150138e-2 : (R < 0.675e1 ? 0.242706829694518227e-1 + R * (-0.352101139083874212e-2) + pow(R - 0.65e1, 2) * 0.316687747702790352e-2 + pow(R - 0.65e1, 3) * (-0.571083129891732794e-3) : (R < 0.70e1 ? 0.144942552391615614e-1 + R * (-0.204465073917949047e-2) + pow(R - 0.675e1, 2) * 0.273856512960910393e-2 + pow(R - 0.675e1, 3) * (-0.170164923556456239e-2) : (R < 0.725e1 ? 0.728726395850305946e-2 + R * (-0.994427406043294241e-3) + pow(R - 0.70e1, 2) * 0.146232820293568208e-2 + pow(R - 0.70e1, 3) * (-0.113500501585002043e-2) : (R < 0.75e1 ? 0.360288272559315713e-2 + R * (-0.476076745047332016e-3) + pow(R - 0.725e1, 2) * 0.611074441048166709e-3 + pow(R - 0.725e1, 3) * (-0.405696466155354484e-3) : (R < 0.775e1 ? 0.191371737247533215e-2 + R * (-0.246607611927377617e-3) + pow(R - 0.75e1, 2) * 0.306802091431650833e-3 + pow(R - 0.75e1, 3) * (-0.265352071848561229e-3) : (R < 0.80e1 ? 0.112547800217447009e-2 + R * (-0.142960079683157452e-3) + pow(R - 0.775e1, 2) * 0.107788037545229870e-3 + pow(R - 0.775e1, 3) * 0.801326709895999127e-4 : (R < 0.825e1 ? 0.582115670839940366e-3 + R * (-0.740411850999925486e-4) + pow(R - 0.80e1, 2) * 0.167887540787429811e-3 + pow(R - 0.80e1, 3) * (-0.211576402189838638e-3) : (R < 0.85e1 ? 0.224048902244197153e-3 + R * (-0.297679901168723791e-4) + pow(R - 0.825e1, 2) * 0.920523914505083594e-5 + pow(R - 0.825e1, 3) * 0.904056558497547260e-4 : (R < 0.875e1 ? 0.428305376864026327e-4 + R * (-0.821431007251795596e-5) + pow(R - 0.85e1, 2) * 0.770094810323668872e-4 + pow(R - 0.85e1, 3) * (-0.125515334169180263e-3) : (R < 0.90e1 ? -0.853104312407616415e-4 + R * 0.675630528694418839e-5 + pow(R - 0.875e1, 2) * (-0.171270195945183065e-4) + pow(R - 0.875e1, 3) * 0.835743733069662005e-4 : (R < 0.925e1 ? -0.149035187162670804e-3 + R * 0.138629904847412011e-4 + pow(R - 0.90e1, 2) * 0.455537603857063541e-4 + pow(R - 0.90e1, 3) * (-0.102854612178684632e-3) : (R < 0.95e1 ? -0.180092854240341844e-3 + R * 0.173546308940910114e-4 + pow(R - 0.925e1, 2) * (-0.315871987483071196e-4) + pow(R - 0.925e1, 3) * 0.482546584477722878e-4 : (R < 0.100e2 ? -0.117227491429500196e-3 + R * 0.106087799788947573e-4 + pow(R - 0.95e1, 2) * 0.460379508752209876e-5 + pow(R - 0.95e1, 3) * (-0.749776417062322468e-5) : (R < 0.105e2 ? -0.106818482774494365e-3 + R * 0.958925193844943628e-5 + pow(R - 0.100e2, 2) * (-0.664285116841273995e-5) + pow(R - 0.100e2, 3) * 0.189502498302773308e-5 : (R < 0.110e2 ? -0.534157019167287226e-4 + R * 0.436766950730749683e-5 + pow(R - 0.105e2, 2) * (-0.380031369387114022e-5) + pow(R - 0.105e2, 3) * 0.442620784651229225e-5 : (R < 0.120e2 ? -0.485252684605263384e-4 + R * 0.388701169832057581e-5 + pow(R - 0.110e2, 2) * 0.283899807589729858e-5 + pow(R - 0.110e2, 3) * (-0.210893862821787401e-5) : (R < 0.140e2 ? -0.400093722185386138e-4 + R * 0.323819196546155095e-5 + pow(R - 0.120e2, 2) * (-0.348781780875632429e-5) + pow(R - 0.120e2, 3) * 0.815242290012774350e-6 : (R < 0.160e2 ? 0.109183874347463481e-4 + R * (-0.930171789410453480e-6) + pow(R - 0.140e2, 2) * 0.140363593132032181e-5 + pow(R - 0.140e2, 3) * (-0.307913860307547534e-6) : (R < 0.180e2 ? -0.166436181482842104e-4 + R * 0.989405612180263257e-6 + pow(R - 0.160e2, 2) * (-0.443847230524963549e-6) + pow(R - 0.160e2, 3) * 0.695177530924159051e-7 : (R < 0.200e2 ? -0.921699115809203470e-6 + R * 0.482297271894001915e-7 + pow(R - 0.180e2, 2) * (-0.267407119704680592e-7) + pow(R - 0.180e2, 3) * 0.480593845038398094e-8 : (R < 0.250e2 ? -0.438272654271463484e-8 + R * (-0.106185928786426829e-8) + pow(R - 0.200e2, 2) * 0.209491873183582725e-8 + pow(R - 0.200e2, 3) * (-0.214533619652594719e-9) : -0.100305606813734982e-6 + R * 0.379730655654939950e-8 + pow(R - 0.250e2, 2) * (-0.112308556295309348e-8) + pow(R - 0.250e2, 3) * 0.103712451128642686e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.8198371936e1 * (R - 0.300e2) * (R - 0.250e2) - 0.8744935480e2 * R - 0.5137696196e4 + 0.4372467740e1 * R * R + 0.75000e3 * (-0.1603247047e-1 * R + 0.6631624890e0) * R) * pow(R, -6));
}

static double radcoeff_4_10_14_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.157081248300000009e-4 + pow(R - 0.475e1, 2) * 0.218777811980905040e0 + pow(R - 0.475e1, 3) * (-0.480017278259620039e0) : (R < 0.525e1 ? -0.907706964328687665e-1 + R * 0.193856663167737524e-1 + pow(R - 0.50e1, 2) * (-0.141235146713810045e0) + pow(R - 0.50e1, 3) * 0.294559820762860136e0 : (R < 0.55e1 ? -0.142104593427513255e-1 + R * 0.399805935290501423e-2 + pow(R - 0.525e1, 2) * 0.796847188583350713e-1 + pow(R - 0.525e1, 3) * (-0.172455432119820506e0) : (R < 0.575e1 ? -0.532130930278341407e-1 + R * 0.115050252596062066e-1 + pow(R - 0.55e1, 2) * (-0.496568552315303086e-1) + pow(R - 0.55e1, 3) * 0.159645526212421923e0 : (R < 0.60e1 ? -0.831765592898534162e-1 + R * 0.166101338086701612e-1 + pow(R - 0.575e1, 2) * 0.700772894277861408e-1 + pow(R - 0.575e1, 3) * (-0.173160441689867162e0) : (R < 0.625e1 ? -0.969287319842788014e-1 + R * 0.191811957057131353e-1 + pow(R - 0.60e1, 2) * (-0.597930418396142374e-1) + pow(R - 0.60e1, 3) * 0.396684831070467508e-1 : (R < 0.65e1 ? 0.403207750570169707e-1 + R * (-0.327748463152271498e-2) + pow(R - 0.625e1, 2) * (-0.300416795093291743e-1) + pow(R - 0.625e1, 3) * 0.136555819016801333e-1 : (R < 0.675e1 ? 0.119649256517544794e0 + R * (-0.157379027796222780e-1) + pow(R - 0.65e1, 2) * (-0.197999930830690743e-1) + pow(R - 0.65e1, 3) * 0.316510779262327568e-1 : (R < 0.70e1 ? 0.145672886197420165e0 + R * (-0.197033222099881750e-1) + pow(R - 0.675e1, 2) * 0.393831536160549247e-2 + pow(R - 0.675e1, 3) * 0.109745190653888023e-1 : (R < 0.725e1 ? 0.117902347728975190e0 + R * (-0.156764422044250278e-1) + pow(R - 0.70e1, 2) * 0.121692046606470938e-1 + pow(R - 0.70e1, 3) * (-0.417313018778794637e-2) : (R < 0.75e1 ? 0.801571998152599552e-1 + R * (-0.103743017843117187e-1) + pow(R - 0.725e1, 2) * 0.903935701980613376e-2 + pow(R - 0.725e1, 3) * (-0.314292337023702045e-2) : (R < 0.775e1 ? 0.511951986164607062e-1 + R * (-0.644392140632809359e-2) + pow(R - 0.75e1, 2) * 0.668216449212836842e-2 + pow(R - 0.75e1, 3) * (-0.363675098726397392e-2) : (R < 0.80e1 ? 0.309472760344132666e-1 + R * (-0.378472997037590519e-2) + pow(R - 0.775e1, 2) * 0.395460125168038776e-2 + pow(R - 0.775e1, 3) * (-0.199867429990706552e-2) : (R < 0.825e1 ? 0.183428157698462893e-1 + R * (-0.218218077576828613e-2) + pow(R - 0.80e1, 2) * 0.245559552675008851e-2 + pow(R - 0.80e1, 3) * (-0.148261067390777755e-2) : (R < 0.85e1 ? 0.106372065368453353e-1 + R * (-0.123237251375094979e-2) + pow(R - 0.825e1, 2) * 0.134363752131925530e-2 + pow(R - 0.825e1, 3) * (-0.707677039661824586e-3) : (R < 0.875e1 ? 0.612752724453727304e-2 + R * (-0.693243198027914450e-3) + pow(R - 0.85e1, 2) * 0.812879741572886832e-3 + pow(R - 0.85e1, 3) * (-0.562563349844916573e-3) : (R < 0.90e1 ? 0.353614880250218691e-2 + R * (-0.392283955337392797e-3) + pow(R - 0.875e1, 2) * 0.390957229189199402e-3 + pow(R - 0.875e1, 3) * (-0.791249561585127549e-4) : (R < 0.925e1 ? 0.193356313405262806e-2 + R * (-0.211641270022514238e-3) + pow(R - 0.90e1, 2) * 0.331613512070314833e-3 + pow(R - 0.90e1, 3) * (-0.238947234481031286e-3) : (R < 0.95e1 ? 0.831267044494089411e-3 + R * (-0.906371204525502030e-4) + pow(R - 0.925e1, 2) * 0.152403086209541361e-3 + pow(R - 0.925e1, 3) * (-0.860846422373621529e-4) : (R < 0.100e2 ? 0.268870774339206788e-3 + R * (-0.305764477672849268e-4) + pow(R - 0.95e1, 2) * 0.878396045315197433e-4 + pow(R - 0.95e1, 3) * (-0.513016398338997593e-4) : (R < 0.105e2 ? -0.209215776068099902e-3 + R * 0.187869268888099903e-4 + pow(R - 0.100e2, 2) * 0.108871447806700993e-4 + pow(R - 0.100e2, 3) * (-0.209725287165801658e-4) : (R < 0.110e2 ? -0.158271912516472137e-3 + R * 0.139446751320449661e-4 + pow(R - 0.105e2, 2) * (-0.205716482942001528e-4) + pow(R - 0.105e2, 3) * 0.148037850042204427e-4 : (R < 0.120e2 ? -0.574074465131115880e-4 + R * 0.447586559101014492e-5 + pow(R - 0.110e2, 2) * 0.163402921213051086e-5 + pow(R - 0.110e2, 3) * (-0.993955397140655981e-6) : (R < 0.140e2 ? -0.602016794921903873e-4 + R * 0.476205782384919934e-5 + pow(R - 0.120e2, 2) * (-0.134783697929145708e-5) + pow(R - 0.120e2, 3) * (-0.611801144157141099e-8) : (R < 0.160e2 ? 0.108647252616168013e-4 + R * (-0.702706230615485910e-6) + pow(R - 0.140e2, 2) * (-0.138454504794088555e-5) + pow(R - 0.140e2, 3) * 0.483013374374314122e-6 : (R < 0.180e2 ? 0.506296725319611456e-5 + R * (-0.444725929887257154e-6) + pow(R - 0.160e2, 2) * 0.151353519830499982e-5 + pow(R - 0.160e2, 3) * (-0.385976425555685610e-6) : (R < 0.200e2 ? -0.175743297157612666e-4 + R * 0.977697756664514803e-6 + pow(R - 0.180e2, 2) * (-0.802323355029113840e-6) + pow(R - 0.180e2, 3) * 0.155157091873428244e-6 : (R < 0.250e2 ? 0.740579995181603559e-5 + R * (-0.369710560970801785e-6) + pow(R - 0.200e2, 2) * 0.128619196211455626e-6 + pow(R - 0.200e2, 3) * (-0.110086844818590539e-7) : -0.226832135250813624e-5 + R * 0.908300650043254375e-7 + pow(R - 0.250e2, 2) * (-0.365110710164301773e-7) + pow(R - 0.250e2, 3) * 0.365499534791301800e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3708394368e1 * (R - 0.300e2) * (R - 0.250e2) + 0.3955632048e2 * R + 0.2323875956e4 - 0.1977816024e1 * R * R + 0.75000e3 * (0.725188185e-2 * R - 0.2999627006e0) * R) * pow(R, -6));
}

static double radcoeff_4_12_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.544592269100000435e-2 + R * 0.867361737988403547e-18 + pow(R - 0.475e1, 2) * 0.431925387501729333e-1 + pow(R - 0.475e1, 3) * (-0.759516639286917511e-1) : (R < 0.525e1 ? -0.407097957102838179e-1 + R * 0.735533238845676330e-2 + pow(R - 0.50e1, 2) * (-0.137712091963458818e-1) + pow(R - 0.50e1, 3) * 0.344145560100753006e-1 : (R < 0.55e1 ? -0.387601732794079432e-1 + R * 0.692245704217294214e-2 + pow(R - 0.525e1, 2) * 0.120397078112105971e-1 + pow(R - 0.525e1, 3) * (-0.322872958556094658e-1) : (R < 0.575e1 ? -0.383251031689830629e-1 + R * 0.688844297485146587e-2 + pow(R - 0.55e1, 2) * (-0.121757640804965005e-1) + pow(R - 0.55e1, 3) * 0.724979208436255049e-2 : (R < 0.60e1 ? -0.117836707820218635e-1 + R * 0.215989695042119369e-2 + pow(R - 0.575e1, 2) * (-0.673842001722458738e-2) + pow(R - 0.575e1, 3) * 0.123356633133592467e-1 : (R < 0.625e1 ? -0.567443846968255540e-2 + R * 0.110362381306375931e-2 + pow(R - 0.60e1, 2) * 0.251332746779484809e-2 + pow(R - 0.60e1, 3) * (-0.148359261889995410e-1) : (R < 0.65e1 ? 0.378253581622643980e-2 + R * (-0.421448613476230367e-3) + pow(R - 0.625e1, 2) * (-0.861361717395480765e-2) + pow(R - 0.625e1, 3) * 0.117960407578389138e-1 : (R < 0.675e1 ? 0.170463290214324416e-1 + R * (-0.251649955835883720e-2) + pow(R - 0.65e1, 2) * 0.233413394424378815e-3 + pow(R - 0.65e1, 3) * 0.578412195444388127e-2 : (R < 0.70e1 ? 0.904299470934683686e-2 + R * (-0.131526999468842016e-2) + pow(R - 0.675e1, 2) * 0.457150486025728955e-2 + pow(R - 0.675e1, 3) * (-0.639280641241443508e-2) : (R < 0.725e1 ? 0.161911756835237341e-2 + R * (-0.228168766887481905e-3) + pow(R - 0.70e1, 2) * (-0.223099949053536889e-3) + pow(R - 0.70e1, 3) * 0.146695487857385833e-2 : (R < 0.75e1 ? 0.442690518771976418e-3 + R * (-0.646647016816519264e-4) + pow(R - 0.725e1, 2) * 0.877116209876856938e-3 + pow(R - 0.725e1, 3) * (-0.159779460332099650e-2) : (R < 0.775e1 ? -0.569742384905672257e-3 + R * 0.743069151340896450e-4 + pow(R - 0.75e1, 2) * (-0.321229742613890598e-3) + pow(R - 0.75e1, 3) * 0.491616286198127972e-3 : (R < 0.80e1 ? -0.517524026000235521e-4 + R * 0.587009748929336184e-5 + pow(R - 0.775e1, 2) * 0.474824720347054554e-4 + pow(R - 0.775e1, 3) * (-0.115382634591515608e-3) : (R < 0.825e1 ? -0.674435380148952874e-4 + R * 0.797708952073691139e-5 + pow(R - 0.80e1, 2) * (-0.390545039089312471e-4) + pow(R - 0.80e1, 3) * 0.104962208199934373e-3 : (R < 0.85e1 ? -0.695079971910116329e-4 + R * 0.813025160375898450e-5 + pow(R - 0.825e1, 2) * 0.396671522410195395e-4 + pow(R - 0.825e1, 3) * (-0.132475676160221870e-3) : (R < 0.875e1 ? -0.265510207599307723e-4 + R * 0.312463844422714949e-5 + pow(R - 0.85e1, 2) * (-0.596896048791468762e-4) + pow(R - 0.85e1, 3) * 0.124911847039353111e-3 : (R < 0.90e1 ? 0.278786488424413365e-4 + R * (-0.329919267546758115e-5) + pow(R - 0.875e1, 2) * 0.339942804003679570e-4 + pow(R - 0.875e1, 3) * (-0.572967089635905135e-4) : (R < 0.925e1 ? -0.271780351356885511e-4 + R * 0.295481459404317228e-5 + pow(R - 0.90e1, 2) * (-0.897825132232493486e-5) + pow(R - 0.90e1, 3) * (-0.352213121833910226e-4) : (R < 0.95e1 ? 0.743218668376222666e-4 + R * (-0.813830710150511020e-5) + pow(R - 0.925e1, 2) * (-0.353942354598682035e-4) + pow(R - 0.925e1, 3) * 0.111420309095554585e-3 : (R < 0.100e2 ? 0.435058623092158850e-4 + R * (-0.494411687602272466e-5) + pow(R - 0.95e1, 2) * 0.481709963617977288e-4 + pow(R - 0.95e1, 3) * (-0.535836353075045597e-4) : (R < 0.105e2 ? -0.309820418253658865e-4 + R * 0.303915300514658895e-5 + pow(R - 0.100e2, 2) * (-0.322044565994591075e-4) + pow(R - 0.100e2, 3) * 0.376230399063318558e-4 : (R < 0.110e2 ? 0.753507904491805737e-5 + R * (-0.948023664563624556e-6) + pow(R - 0.105e2, 2) * 0.242301032600386762e-4 + pow(R - 0.105e2, 3) * (-0.231309965978228522e-4) : (R < 0.120e2 ? -0.649991836435870102e-4 + R * 0.593383214710791082e-5 + pow(R - 0.110e2, 2) * (-0.104663916366956038e-4) + pow(R - 0.110e2, 3) * 0.411761488018769313e-5 : (R < 0.140e2 ? 0.316113031938426039e-4 + R * (-0.264610648572021695e-5) + pow(R - 0.120e2, 2) * 0.188645300386747624e-5 + pow(R - 0.120e2, 3) * (-0.372496710553683849e-6) : (R < 0.160e2 ? -0.688477931867673980e-5 + R * 0.429745003105481409e-6 + pow(R - 0.140e2, 2) * (-0.348527259454627062e-6) + pow(R - 0.140e2, 3) * 0.935388000384431632e-7 : (R < 0.180e2 ? -0.318428295847266044e-5 + R * 0.158101565748291278e-6 + pow(R - 0.160e2, 2) * 0.212705540776031997e-6 + pow(R - 0.160e2, 3) * (-0.654218190500888106e-7) : (R < 0.200e2 ? -0.404052136882436138e-5 + R * 0.223861900251353405e-6 + pow(R - 0.180e2, 2) * (-0.179825373524500920e-6) + pow(R - 0.180e2, 3) * 0.346650338994121084e-7 : (R < 0.250e2 ? 0.158391915437409910e-5 + R * (-0.794591870537049465e-7) + pow(R - 0.200e2, 2) * 0.281648298719717375e-7 + pow(R - 0.200e2, 3) * (-0.242131414744614879e-8) : -0.515867808788781131e-6 + R * 0.205905506075512470e-7 + pow(R - 0.250e2, 2) * (-0.815488233972049810e-8) + pow(R - 0.250e2, 3) * 0.813721857242049734e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1684667744e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1796986976e2 * R - 0.1055708317e4 + 0.8984934880e0 * R * R + 0.75000e3 * (-0.3294435110e-2 * R + 0.1362692566e0) * R) * pow(R, -6));
}

static double radcoeff_4_12_12_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.124503630999999830e-1 + R * 0.346944695195361419e-17 + pow(R - 0.475e1, 2) * (-0.178778597627818781e0) + pow(R - 0.475e1, 3) * 0.329780510895275103e0 : (R < 0.525e1 ? 0.144206786336226467e0 + R * (-0.275554530210452980e-1) + pow(R - 0.50e1, 2) * 0.685567855436375606e-1 + pow(R - 0.50e1, 3) * (-0.104872835917825452e0) : (R < 0.55e1 ? 0.701255831760486531e-1 + R * (-0.129407169838187917e-1) + pow(R - 0.525e1, 2) * (-0.100978413947315319e-1) + pow(R - 0.525e1, 3) * 0.292720781520268078e-1 : (R < 0.575e1 ? 0.675340775512374147e-1 + R * (-0.125011230276795317e-1) + pow(R - 0.55e1, 2) * 0.118562172192885756e-1 + pow(R - 0.55e1, 3) * 0.290378616777181853e-1 : (R < 0.60e1 ? 0.333573858941272911e-2 + R * (-0.112841535346308326e-2) + pow(R - 0.575e1, 2) * 0.336346134775772146e-1 + pow(R - 0.575e1, 3) * (-0.680759628788995264e-1) : (R < 0.625e1 ? -0.199441671821911706e-1 + R * 0.292464834553186198e-2 + pow(R - 0.60e1, 2) * (-0.174223586815974336e-1) + pow(R - 0.60e1, 3) * 0.376651664138799441e-1 : (R < 0.65e1 ? -0.101385423858477187e-1 + R * 0.127568770733563512e-2 + pow(R - 0.625e1, 2) * 0.108265161288125262e-1 + pow(R - 0.625e1, 3) * (-0.153751523126202626e-1) : (R < 0.675e1 ? -0.261498324203163941e-1 + R * 0.380610471312559876e-2 + pow(R - 0.65e1, 2) * (-0.704848105652671614e-3) + pow(R - 0.65e1, 3) * (-0.463858708979888665e-2) : (R < 0.70e1 ? -0.180167892080933048e-1 + R * 0.258394558096197106e-2 + pow(R - 0.675e1, 2) * (-0.418378842300183660e-2) + pow(R - 0.675e1, 3) * 0.206086270701580582e-2 : (R < 0.725e1 ? -0.630769782718561701e-2 + R * 0.878463127026516809e-3 + pow(R - 0.70e1, 2) * (-0.263814139273998213e-2) + pow(R - 0.70e1, 3) * 0.330624346813565995e-2 : (R < 0.75e1 ? -0.135208377588672446e-2 + R * 0.179313080931961988e-3 + pow(R - 0.725e1, 2) * (-0.158458791638237161e-3) + pow(R - 0.725e1, 3) * (-0.609109891584431540e-4) : (R < 0.775e1 ? -0.683062637422264941e-3 + R * 0.886628746456353362e-4 + pow(R - 0.75e1, 2) * (-0.204142033507069526e-3) + pow(R - 0.75e1, 3) * 0.214091698098112812e-3 : (R < 0.80e1 ? -0.212527950694599657e-3 + R * 0.267340512854967287e-4 + pow(R - 0.775e1, 2) * (-0.435732599334849106e-4) + pow(R - 0.775e1, 3) * (-0.412595182420079750e-4) : (R < 0.825e1 ? 0.202863576839778091e-4 + R * (-0.278873835162222614e-5) + pow(R - 0.80e1, 2) * (-0.745178986149908952e-4) + pow(R - 0.80e1, 3) * 0.219566815189919208e-3 : (R < 0.85e1 ? -0.131963649521854226e-4 + R * 0.112109018899217261e-5 + pow(R - 0.825e1, 2) * 0.901572127774485037e-4 + pow(R - 0.825e1, 3) * (-0.184367075445668788e-3) : (R < 0.875e1 ? -0.997754025198549846e-4 + R * 0.116308699316535268e-4 + pow(R - 0.85e1, 2) * (-0.481180938068030871e-4) + pow(R - 0.85e1, 3) * 0.711916075527559107e-4 : (R < 0.90e1 ? -0.795248525174502864e-5 + R * 0.920249444393717530e-6 + pow(R - 0.875e1, 2) * 0.527561185776384676e-5 + pow(R - 0.875e1, 3) * (-0.353862498053548647e-4) : (R < 0.925e1 ? 0.277983735227555627e-4 + R * (-0.307686646522839601e-5) + pow(R - 0.90e1, 2) * (-0.212640754962523043e-4) + pow(R - 0.90e1, 3) * 0.947941811278635630e-4 : (R < 0.95e1 ? -0.381117808391087865e-4 + R * 0.406500474811986862e-5 + pow(R - 0.925e1, 2) * 0.498315603496453645e-4 + pow(R - 0.925e1, 3) * (-0.116817526200499368e-3) : (R < 0.100e2 ? -0.654412752803147369e-4 + R * 0.707749876034891929e-5 + pow(R - 0.95e1, 2) * (-0.377815843007291551e-4) + pow(R - 0.95e1, 3) * 0.361858515040626335e-4 : (R < 0.105e2 ? 0.360585168092326290e-4 + R * (-0.356469691233326232e-5) + pow(R - 0.100e2, 2) * 0.164971929553647986e-4 + pow(R - 0.100e2, 3) * (-0.199221540925965453e-4) : (R < 0.110e2 ? 0.213589832343666949e-4 + R * (-0.200911952641587566e-5) + pow(R - 0.105e2, 2) * (-0.133860381835300211e-4) + pow(R - 0.105e2, 3) * 0.157222047447235451e-4 : (R < 0.120e2 ? 0.375159801564356249e-4 + R * (-0.360350415140323831e-5) + pow(R - 0.110e2, 2) * 0.101972689335552949e-4 + pow(R - 0.110e2, 3) * (-0.428937550915205592e-5) : (R < 0.140e2 ? -0.468930624953141806e-4 + R * 0.392290718825118125e-5 + pow(R - 0.120e2, 2) * (-0.267085759390087410e-5) + pow(R - 0.120e2, 3) * 0.501896956512641582e-6 : (R < 0.160e2 ? 0.116880193458086115e-4 + R * (-0.737759709200615108e-6) + pow(R - 0.140e2, 2) * 0.340524145174975655e-6 + pow(R - 0.140e2, 3) * (-0.757020091498340583e-7) : (R < 0.180e2 ? 0.518574031887953794e-5 + R * (-0.284087238298721135e-6) + pow(R - 0.160e2, 2) * (-0.113687909724028695e-6) + pow(R - 0.160e2, 3) * 0.456230203366946278e-7 : (R < 0.200e2 ? 0.342692995008100449e-5 + R * (-0.191362633154500249e-6) + pow(R - 0.180e2, 2) * 0.160050212296139112e-6 + pow(R - 0.180e2, 3) * (-0.310369994594444861e-7) : (R < 0.250e2 ? -0.153630230983444627e-5 + R * 0.763942225167223119e-7 + pow(R - 0.200e2, 2) * (-0.261717844605278148e-7) + pow(R - 0.200e2, 3) * 0.223180669303666968e-8 : 0.446687480970139606e-6 + R * (-0.179381201108055845e-7) + pow(R - 0.250e2, 2) * 0.730531593502223290e-8 + pow(R - 0.250e2, 3) * (-0.733356086572223092e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2693715040e1 * (R - 0.300e2) * (R - 0.250e2) - 0.2873277060e2 * R - 0.1688204402e4 + 0.1436638530e1 * R * R + 0.75000e3 * (-0.526796819e-2 * R + 0.2179063239e0) * R) * pow(R, -6));
}

static double radcoeff_4_12_12_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.422585122799999137e-2 + R * (-0.173472347597680709e-17) + pow(R - 0.475e1, 2) * (-0.881210677111523011e-1) + pow(R - 0.475e1, 3) * 0.212954694204609218e0 : (R < 0.525e1 ? 0.142516425980596245e-1 + R * (-0.413152869221192470e-2) + pow(R - 0.50e1, 2) * 0.715949529423045988e-1 + pow(R - 0.50e1, 3) * (-0.133253823029827578e0) : (R < 0.55e1 ? -0.401207832564504235e-1 + R * 0.668085596084769945e-2 + pow(R - 0.525e1, 2) * (-0.283454143300660953e-1) + pow(R - 0.525e1, 3) * 0.645824082187011761e-1 : (R < 0.575e1 ? -0.295339905915161793e-1 + R * 0.461735033682112404e-2 + pow(R - 0.55e1, 2) * 0.200913918339597902e-1 + pow(R - 0.55e1, 3) * (-0.315451657489771442e-1) : (R < 0.60e1 ? -0.525242915162398849e-1 + R * 0.874832767586780635e-2 + pow(R - 0.575e1, 2) * (-0.356748247777307053e-2) + pow(R - 0.575e1, 3) * 0.231180524120738360e-2 : (R < 0.625e1 ? -0.446094706776459238e-1 + R * 0.739804991970765408e-2 + pow(R - 0.60e1, 2) * (-0.183362854686753272e-2) + pow(R - 0.60e1, 3) * (-0.204945834078523320e-1) : (R < 0.65e1 ? -0.152971211871348357e-1 + R * 0.263850125730157384e-2 + pow(R - 0.625e1, 2) * (-0.172045661027567832e-1) + pow(R - 0.625e1, 3) * 0.203125942462019440e-1 : (R < 0.675e1 ? 0.151038433129406912e-1 + R * (-0.215517037291395241e-2) + pow(R - 0.65e1, 2) * (-0.197012041810532305e-2) + pow(R - 0.65e1, 3) * 0.643293693184453230e-2 : (R < 0.70e1 ? 0.135886960331089070e-1 + R * (-0.193405490724576391e-2) + pow(R - 0.675e1, 2) * 0.285458228077807618e-2 + pow(R - 0.675e1, 3) * (-0.182179141358007981e-2) : (R < 0.725e1 ? 0.613870518242093637e-2 + R * (-0.848349656902990966e-3) + pow(R - 0.70e1, 2) * 0.148823872059301626e-2 + pow(R - 0.70e1, 3) * (-0.113113836232421041e-2) : (R < 0.75e1 ? 0.235682191471147393e-2 + R * (-0.316318739542272259e-3) + pow(R - 0.725e1, 2) * 0.639884948849858454e-3 + pow(R - 0.725e1, 3) * (-0.625755508963078363e-3) : (R < 0.775e1 ? 0.867437420479401497e-3 + R * (-0.113705423047920205e-3) + pow(R - 0.75e1, 2) * 0.170568317127549682e-3 + pow(R - 0.75e1, 3) * 0.468380553652460956e-5 : (R < 0.80e1 ? 0.210412740969864314e-3 + R * (-0.275430509460470064e-4) + pow(R - 0.775e1, 2) * 0.174081171279943139e-3 + pow(R - 0.775e1, 3) * (-0.314363825439020425e-3) : (R < 0.825e1 ? -0.839806755886583661e-5 + R * 0.554317424108229452e-6 + pow(R - 0.80e1, 2) * (-0.616916977993221929e-4) + pow(R - 0.80e1, 3) * 0.215407241179557072e-3 : (R < 0.85e1 ? -0.876178833053162449e-4 + R * 0.100973262456140897e-4 + pow(R - 0.825e1, 2) * 0.998637330853456313e-4 + pow(R - 0.825e1, 3) * (-0.218615189711207945e-3) : (R < 0.875e1 ? -0.160795169337200954e-3 + R * 0.190388447174354072e-4 + pow(R - 0.85e1, 2) * (-0.640976591980603477e-4) + pow(R - 0.85e1, 3) * 0.858633766092748406e-4 : (R < 0.90e1 ? -0.239020010356373242e-4 + R * 0.308939823264426592e-5 + pow(R - 0.875e1, 2) * 0.299873258895778486e-6 + pow(R - 0.875e1, 3) * (-0.732350621978913679e-4) : (R < 0.925e1 ? 0.972071809901122673e-4 + R * (-0.104922393000124742e-4) + pow(R - 0.90e1, 2) * (-0.546264233895227500e-4) + pow(R - 0.90e1, 3) * 0.161782013622290596e-3 : (R < 0.95e1 ? 0.683774017910978557e-4 + R * (-0.747132344059436328e-5) + pow(R - 0.925e1, 2) * 0.667100868271952038e-4 + pow(R - 0.925e1, 3) * (-0.105600746633670992e-3) : (R < 0.100e2 ? -0.578748119363042978e-4 + R * 0.608357997918992594e-5 + pow(R - 0.95e1, 2) * (-0.124904731480580401e-4) + pow(R - 0.95e1, 3) * 0.959550389935637273e-5 : (R < 0.105e2 ? -0.685954000049167083e-5 + R * 0.789734755649167118e-6 + pow(R - 0.100e2, 2) * 0.190278270097652136e-5 + pow(R - 0.100e2, 3) * (-0.288109080854971119e-5) : (R < 0.110e2 ? -0.403460891924075571e-5 + R * 0.531699350213405293e-6 + pow(R - 0.105e2, 2) * (-0.241885351184804543e-5) + pow(R - 0.105e2, 3) * (-0.992890985157530412e-6) : (R < 0.120e2 ? 0.300353055875306724e-4 + R * (-0.263182240050278848e-5) + pow(R - 0.110e2, 2) * (-0.390818998958434105e-5) + pow(R - 0.110e2, 3) * 0.256097589808712935e-5 : (R < 0.140e2 ? 0.302895189149209790e-4 + R * (-0.276527468541008167e-5) + pow(R - 0.120e2, 2) * 0.377473770467704701e-5 + pow(R - 0.120e2, 3) * (-0.893992249236002946e-6) : (R < 0.160e2 ? -0.229580818510249807e-4 + R * 0.160576914246607016e-5 + pow(R - 0.140e2, 2) * (-0.158921579073897067e-5) + pow(R - 0.140e2, 3) * 0.370631857665467667e-6 : (R < 0.180e2 ? 0.419860378286718839e-5 + R * (-0.303511728504199291e-6) + pow(R - 0.160e2, 2) * 0.634575355253835651e-6 + pow(R - 0.160e2, 3) * (-0.156011647863367975e-6) : (R < 0.200e2 ? -0.650209761881309277e-5 + R * 0.362649918150727344e-6 + pow(R - 0.180e2, 2) * (-0.301494531926372254e-6) + pow(R - 0.180e2, 3) * 0.584152726380042986e-7 : (R < 0.250e2 ? 0.285914355557420278e-5 + R * (-0.142344937898710141e-6) + pow(R - 0.200e2, 2) * 0.489971039016535509e-7 + pow(R - 0.200e2, 3) * (-0.418303840998230393e-8) : -0.844887604828813038e-6 + R * 0.338982203691525235e-7 + pow(R - 0.250e2, 2) * (-0.137484722480810114e-7) + pow(R - 0.250e2, 3) * 0.137895562605010105e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3918335232e1 * (R - 0.300e2) * (R - 0.250e2) + 0.4179581180e2 * R + 0.2455478068e4 - 0.2089790590e1 * R * R + 0.75000e3 * (0.766251622e-2 * R - 0.3169488625e0) * R) * pow(R, -6));
}

static double radcoeff_4_12_14_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.203299207900000008e-2 + pow(R - 0.475e1, 2) * 0.419348999142276080e0 + pow(R - 0.475e1, 3) * (-0.906495182489104323e0) : (R < 0.525e1 ? -0.188520931132154956e0 + R * 0.397066528544309932e-1 + pow(R - 0.50e1, 2) * (-0.260522387724552107e0) + pow(R - 0.50e1, 3) * 0.444709208907312581e0 : (R < 0.55e1 ? 0.482556412830507445e-1 + R * (-0.717156433772395130e-2) + pow(R - 0.525e1, 2) * 0.730095189559323426e-1 + pow(R - 0.525e1, 3) * (-0.124834866580146142e0) : (R < 0.575e1 ? -0.211720295405564904e-1 + R * 0.592665765646481577e-2 + pow(R - 0.55e1, 2) * (-0.206166309791772605e-1) + pow(R - 0.55e1, 3) * (-0.213135889867280305e-1) : (R < 0.60e1 ? 0.594579333867780793e-1 + R * (-0.837795576813531867e-2) + pow(R - 0.575e1, 2) * (-0.366018227192232842e-1) + pow(R - 0.575e1, 3) * 0.592536550390582520e-1 : (R < 0.625e1 ? 0.101241264065541223e0 + R * (-0.155688068079235381e-1) + pow(R - 0.60e1, 2) * 0.783841856007040476e-2 + pow(R - 0.60e1, 3) * 0.207976121449501838e-2 : (R < 0.65e1 ? 0.748313833210657586e-1 + R * (-0.112596423001705206e-1) + pow(R - 0.625e1, 2) * 0.939823947094166855e-2 + pow(R - 0.625e1, 3) * (-0.216432191303834879e-2) : (R < 0.675e1 ? 0.474784448090634498e-1 + R * (-0.696633292339437701e-2) + pow(R - 0.65e1, 2) * 0.777499803616290685e-2 + pow(R - 0.65e1, 3) * (-0.258346537034159079e-2) : (R < 0.70e1 ? 0.249530955275008189e-1 + R * (-0.356323366225197273e-2) + pow(R - 0.675e1, 2) * 0.583739900840671375e-2 + pow(R - 0.675e1, 3) * (-0.445869236239528934e-2) : (R < 0.725e1 ? 0.106694030935841292e-1 + R * (-0.148053897599773271e-2) + pow(R - 0.70e1, 2) * 0.249337973661024632e-2 + pow(R - 0.70e1, 3) * (-0.160260500087726051e-2) : (R < 0.75e1 ? 0.394023825178894602e-2 + R * (-0.534337545357096034e-3) + pow(R - 0.725e1, 2) * 0.129142598595230083e-2 + pow(R - 0.725e1, 3) * (-0.131078534097566705e-2) : (R < 0.775e1 ? 0.100091579338412338e-2 + R * (-0.134396803813883136e-3) + pow(R - 0.75e1, 2) * 0.308336980220550599e-3 + pow(R - 0.75e1, 3) * (-0.196425978900071913e-3) : (R < 0.80e1 ? 0.107743400962127882e-3 + R * (-0.170581847473713370e-4) + pow(R - 0.775e1, 2) * 0.161017496045496650e-3 + pow(R - 0.775e1, 3) * (-0.228754907264045154e-3) : (R < 0.825e1 ? -0.186704924246948147e-3 + R * 0.205590181633685186e-4 + pow(R - 0.80e1, 2) * (-0.105486844025372216e-4) + pow(R - 0.80e1, 3) * 0.139445564362525931e-4 : (R < 0.85e1 ? -0.165203495904652463e-3 + R * 0.178992802938972665e-4 + pow(R - 0.825e1, 2) * (-0.902670753477759167e-7) + pow(R - 0.825e1, 3) * 0.478198015190348428e-4 : (R < 0.875e1 ? -0.240291126798860535e-3 + R * 0.268203595410424130e-4 + pow(R - 0.85e1, 2) * 0.357745840639283591e-4 + pow(R - 0.85e1, 3) * (-0.173917520400391991e-3) : (R < 0.90e1 ? -0.111953049923914548e-3 + R * 0.120981164979330909e-4 + pow(R - 0.875e1, 2) * (-0.946635562363656543e-4) + pow(R - 0.875e1, 3) * 0.219376310866533167e-3 : (R < 0.925e1 ? -0.586532888550270784e-4 + R * 0.589939666722523081e-5 + pow(R - 0.90e1, 2) * 0.698686769135342206e-4 + pow(R - 0.90e1, 3) * (-0.145686714361740566e-3) : (R < 0.95e1 ? -0.127030086963785384e-3 + R * 0.135174761811659868e-4 + pow(R - 0.925e1, 2) * (-0.393963588577711968e-4) + pow(R - 0.925e1, 3) * 0.418712942924290011e-4 : (R < 0.100e2 ? -0.162886588034528485e-4 + R * 0.167016443211082606e-5 + pow(R - 0.95e1, 2) * (-0.799288813844944427e-5) + pow(R - 0.95e1, 3) * 0.110465550348555841e-4 : (R < 0.105e2 ? -0.198263428356306896e-4 + R * 0.196219256980306863e-5 + pow(R - 0.100e2, 2) * 0.857694441383393110e-5 + pow(R - 0.100e2, 3) * (-0.113379078348801364e-4) : (R < 0.110e2 ? -0.198712373575074247e-4 + R * 0.203570610747689741e-5 + pow(R - 0.105e2, 2) * (-0.842991733848627353e-5) + pow(R - 0.105e2, 3) * 0.444241334226495564e-5 : (R < 0.120e2 ? 0.346557656253172405e-4 + R * (-0.306240122431065811e-5) + pow(R - 0.110e2, 2) * (-0.176629732508883922e-5) + pow(R - 0.110e2, 3) * 0.176484098239949762e-5 : (R < 0.140e2 ? 0.135111697184781272e-4 + R * (-0.130047292728984390e-5) + pow(R - 0.120e2, 2) * 0.352822562210965343e-5 + pow(R - 0.120e2, 3) * (-0.100756340135736575e-5) : (R < 0.160e2 ? -0.874641841404534327e-5 + R * 0.721668744860381683e-6 + pow(R - 0.140e2, 2) * (-0.251715478603454063e-5) + pow(R - 0.140e2, 3) * 0.701751993552174873e-6 : (R < 0.180e2 ? 0.131605019344269233e-4 + R * (-0.925926476651682700e-6) + pow(R - 0.160e2, 2) * 0.169335717527850860e-5 + pow(R - 0.160e2, 3) * (-0.409213264351333574e-6) : (R < 0.200e2 ? -0.168714269990342567e-4 + R * 0.936943052246347652e-6 + pow(R - 0.180e2, 2) * (-0.761922410829493161e-6) + pow(R - 0.180e2, 3) * 0.147146204778159651e-6 : (R < 0.250e2 ? 0.689675671547417961e-5 + R * (-0.344992133733708968e-6) + pow(R - 0.200e2, 2) * 0.120954817839464825e-6 + pow(R - 0.200e2, 3) * (-0.103717679313446021e-7) : -0.216748341855234742e-5 + R * 0.866734498100939054e-7 + pow(R - 0.250e2, 2) * (-0.346217011307042359e-7) + pow(R - 0.250e2, 3) * 0.346113470333709047e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.9875069440e0 * (R - 0.300e2) * (R - 0.250e2) - 0.1053330020e2 * R - 0.6188376572e3 + 0.5266650100e0 * R * R + 0.75000e3 * (-0.1931116978e-2 * R + 0.798781832e-1) * R) * pow(R, -6));
}

static double radcoeff_6_0_6_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.259689537999999998e0 + pow(R - 0.475e1, 2) * (-0.437887856216414739e0) + pow(R - 0.475e1, 3) * (-0.362022725534340895e0) : (R < 0.525e1 ? 0.166078088762948117e1 + R * (-0.286823189145896218e0) + pow(R - 0.50e1, 2) * (-0.709404900367170410e0) + pow(R - 0.50e1, 3) * 0.209083743740302186e1 : (R < 0.55e1 ? 0.145313217733617783e1 + R * (-0.249493619816414852e0) + pow(R - 0.525e1, 2) * 0.858723177685095984e0 + pow(R - 0.525e1, 3) * (-0.820742435277746152e0) : (R < 0.575e1 ? -0.211198268635563596e-1 + R * 0.259787624115557017e-1 + pow(R - 0.55e1, 2) * 0.243166351226786343e0 + pow(R - 0.55e1, 3) * (-0.151106269092036616e0) : (R < 0.60e1 ? -0.544474778778604063e0 + R * 0.119229512570192014e0 + pow(R - 0.575e1, 2) * 0.129836649407758881e0 + pow(R - 0.575e1, 3) * (-0.466108981154107815e0) : (R < 0.625e1 ? -0.408780285446057490e0 + R * 0.967524033076762324e-1 + pow(R - 0.60e1, 2) * (-0.219745086457822009e0) + pow(R - 0.60e1, 3) * (-0.627240590915315588e-1) : (R < 0.65e1 ? 0.336713735155605876e0 + R * (-0.248809010008969392e-1) + pow(R - 0.625e1, 2) * (-0.266788130776470678e0) + pow(R - 0.625e1, 3) * 0.213892353520233724e0 : (R < 0.675e1 ? 0.929761664176575020e0 + R * (-0.118170150104088462e0) + pow(R - 0.65e1, 2) * (-0.106368865636295384e0) + pow(R - 0.65e1, 3) * 0.172352373010596860e0 : (R < 0.70e1 ? 0.106666806533355718e1 + R * (-0.139038512982749218e0) + pow(R - 0.675e1, 2) * 0.228954141216522640e-1 + pow(R - 0.675e1, 3) * 0.424052936373787714e-1 : (R < 0.725e1 ? 0.932970714104401910e0 + R * (-0.119639813364914568e0) + pow(R - 0.70e1, 2) * 0.546993843496863461e-1 + pow(R - 0.70e1, 3) * (-0.303084868011219144e-2) : (R < 0.75e1 ? 0.742176860272545147e0 + R * (-0.928584053175924434e-1) + pow(R - 0.725e1, 2) * 0.524262478396022025e-1 + pow(R - 0.725e1, 3) * (-0.121496953969298660e-1) : (R < 0.775e1 ? 0.565750741525367751e0 + R * (-0.689233492847156903e-1) + pow(R - 0.75e1, 2) * 0.433139762919048030e-1 + pow(R - 0.75e1, 3) * (-0.136815140521681731e-1) : (R < 0.80e1 ? 0.420283383362472396e0 + R * (-0.498316450235448197e-1) + pow(R - 0.775e1, 2) * 0.330528407527786727e-1 + pow(R - 0.775e1, 3) * (-0.114990317543975963e-1) : (R < 0.825e1 ? 0.307206698158840275e0 + R * (-0.354612931011050320e-1) + pow(R - 0.80e1, 2) * 0.244285669369804746e-1 + pow(R - 0.80e1, 3) * (-0.886659061024142915e-2) : (R < 0.85e1 ? 0.221542611849289278e0 + R * (-0.249094953720350662e-1) + pow(R - 0.825e1, 2) * 0.177786239792994023e-1 + pow(R - 0.825e1, 3) * (-0.685444196463656785e-2) : (R < 0.875e1 ? 0.157911790161415100e0 + R * (-0.173053912507547189e-1) + pow(R - 0.85e1, 2) * 0.126377925058219764e-1 + pow(R - 0.85e1, 3) * (-0.485172639521242333e-2) : (R < 0.90e1 ? 0.111295365372278021e0 + R * (-0.118961936969460592e-1) + pow(R - 0.875e1, 2) * 0.899899770941265872e-2 + pow(R - 0.875e1, 3) * (-0.348737277451367095e-2) : (R < 0.925e1 ? 0.771927643941493907e-1 + R * (-0.805057723746104362e-2) + pow(R - 0.90e1, 2) * 0.638346812852740551e-2 + pow(R - 0.90e1, 3) * (-0.268831569073291763e-2) : (R < 0.95e1 ? 0.526887336511903115e-1 + R * (-0.536290236520976273e-2) + pow(R - 0.925e1, 2) * 0.436723136047771718e-2 + pow(R - 0.925e1, 3) * (-0.189508529455466876e-2) : (R < 0.100e2 ? 0.355633466221490988e-1 + R * (-0.353461517769990477e-2) + pow(R - 0.95e1, 2) * 0.294591738956171550e-2 + pow(R - 0.95e1, 3) * (-0.113567724432381213e-2) : (R < 0.105e2 ? 0.152162717512104844e-1 + R * (-0.144045572138104842e-2) + pow(R - 0.100e2, 2) * 0.124240152307599720e-2 + pow(R - 0.100e2, 3) * (-0.483599335827800440e-3) : (R < 0.110e2 ? 0.622955099234696712e-2 + R * (-0.560753700175901622e-3) + pow(R - 0.105e2, 2) * 0.517002519334296509e-3 + pow(R - 0.105e2, 3) * (-0.236516135564986357e-3) : (R < 0.120e2 ? 0.259346751096879409e-2 + R * (-0.221138282515344922e-3) + pow(R - 0.110e2, 2) * 0.162228315986816946e-3 + pow(R - 0.110e2, 3) * (-0.501672930714720141e-4) : (R < 0.140e2 ? 0.618071500743525189e-3 + R * (-0.471835297561271004e-4) + pow(R - 0.120e2, 2) * 0.117264367724008880e-4 + pow(R - 0.120e2, 3) * (-0.680159779668668736e-6) : (R < 0.160e2 ? 0.117122353325666069e-3 + R * (-0.843970002254757645e-5) + pow(R - 0.140e2, 2) * 0.764547809438887563e-5 + pow(R - 0.140e2, 3) * (-0.164293785493254332e-5) : (R < 0.180e2 ? -0.393057670300784673e-4 + R * 0.242695809581740410e-5 + pow(R - 0.160e2, 2) * (-0.221214903520638430e-5) + pow(R - 0.160e2, 3) * 0.481062236536341003e-6 : (R < 0.200e2 ? 0.110594221643967162e-4 + R * (-0.648891206572039800e-6) + pow(R - 0.180e2, 2) * 0.674224384011662141e-6 + pow(R - 0.180e2, 3) * (-0.134417641537821083e-6) : (R < 0.250e2 ? -0.899673818371511085e-5 + R * 0.434994631020755560e-6 + pow(R - 0.200e2, 2) * (-0.132281465215264435e-6) + pow(R - 0.200e2, 3) * 0.109332412662226655e-7 : 0.163341927382972196e-5 + R * (-0.678269261651888803e-7) + pow(R - 0.250e2, 2) * 0.317171537780755495e-7 + pow(R - 0.250e2, 3) * (-0.327131440740755469e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.9499058022e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1013231548e4 * R - 0.5952815140e5 + 0.5066157740e2 * R * R + 0.75000e3 * (-0.1857606371e0 * R + 0.768375617e1) * R) * pow(R, -6));
}

static double radcoeff_6_0_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.346198954200000020e0 + pow(R - 0.475e1, 2) * 0.209106434099547256e1 + pow(R - 0.475e1, 3) * (-0.245163856718189033e1) : (R < 0.525e1 ? -0.318306398125565870e1 + R * 0.585849939151131816e0 + pow(R - 0.50e1, 2) * 0.252335415609054758e0 + pow(R - 0.50e1, 3) * (-0.149038049685432883e1) : (R < 0.55e1 ? -0.238586737742623090e1 + R * 0.432571303795472539e0 + pow(R - 0.525e1, 2) * (-0.865449957031692030e0) + pow(R - 0.525e1, 3) * 0.357999075559206847e0 : (R < 0.575e1 ? -0.423563429018378179e0 + R * 0.669711519469778499e-1 + pow(R - 0.55e1, 2) * (-0.596950650362286894e0) + pow(R - 0.55e1, 3) * 0.462605054137502025e0 : (R < 0.60e1 ? 0.763842405104457778e0 + R * (-0.144765725583383964e0) + pow(R - 0.575e1, 2) * (-0.249996859759160361e0) + pow(R - 0.575e1, 3) * 0.510526984370784476e0 : (R < 0.625e1 ? 0.931842307360652322e0 + R * (-0.174040345893442056e0) + pow(R - 0.60e1, 2) * 0.132898378518928051e0 + pow(R - 0.60e1, 3) * 0.206912929019360453e0 : (R < 0.65e1 ? 0.285597948967799664e0 + R * (-0.687949824428479434e-1) + pow(R - 0.625e1, 2) * 0.288083075283448398e0 + pow(R - 0.625e1, 3) * (-0.157283026848226537e0) : (R < 0.675e1 ? -0.443435711821419609e0 + R * 0.457559876648337832e-1 + pow(R - 0.65e1, 2) * 0.170120805147278481e0 + pow(R - 0.65e1, 3) * (-0.185587528826454407e0) : (R < 0.70e1 ? -0.774976467838711547e0 + R * 0.960187285835128190e-1 + pow(R - 0.675e1, 2) * 0.309301585274376727e-1 + pow(R - 0.675e1, 3) * (-0.719832290459557350e-1) : (R < 0.725e1 ? -0.787945637607804561e0 + R * 0.979869524011149490e-1 + pow(R - 0.70e1, 2) * (-0.230572632570291286e-1) + pow(R - 0.70e1, 3) * (-0.160768004297226659e-1) : (R < 0.75e1 ? -0.684200936677198612e0 + R * 0.834439206920273985e-1 + pow(R - 0.725e1, 2) * (-0.351148635793211289e-1) + pow(R - 0.725e1, 3) * 0.204706628484618847e-2 : (R < 0.775e1 ? -0.557561578780816136e0 + R * 0.662703138307754874e-1 + pow(R - 0.75e1, 2) * (-0.335795638656864875e-1) + pow(R - 0.75e1, 3) * 0.758286873033810205e-2 : (R < 0.80e1 ? -0.440439865342747428e0 + R * 0.509023197848706352e-1 + pow(R - 0.775e1, 2) * (-0.278924123179329110e-1) + pow(R - 0.775e1, 3) * 0.831660375380151307e-2 : (R < 0.825e1 ? -0.342958450537935722e0 + R * 0.385154768297419625e-1 + pow(R - 0.80e1, 2) * (-0.216549595025817762e-1) + pow(R - 0.80e1, 3) * 0.675534473445565421e-2 : (R < 0.85e1 ? -0.265329299183332479e0 + R * 0.289546242161615106e-1 + pow(R - 0.825e1, 2) * (-0.165884509517400351e-1) + pow(R - 0.825e1, 3) * 0.552878530837596239e-2 : (R < 0.875e1 ? -0.204590275137701921e0 + R * 0.216970459856119895e-1 + pow(R - 0.85e1, 2) * (-0.124418619704580631e-1) + pow(R - 0.85e1, 3) * 0.421016555204043342e-2 : (R < 0.90e1 ? -0.157776264412167161e0 + R * 0.162655210413905349e-1 + pow(R - 0.875e1, 2) * (-0.928423780642773783e-2) + pow(R - 0.875e1, 3) * 0.305483280346236386e-2 : (R < 0.925e1 ? -0.121684757739432742e0 + R * 0.121961832888258601e-1 + pow(R - 0.90e1, 2) * (-0.699311320383096471e-2) + pow(R - 0.90e1, 3) * 0.248119392211007756e-2 : (R < 0.95e1 ? -0.940432308005806628e-1 + R * 0.916485054730601864e-2 + pow(R - 0.925e1, 2) * (-0.513221776224840644e-2) + pow(R - 0.925e1, 3) * 0.184084251609730474e-2 : (R < 0.100e2 ? -0.732361976075255744e-1 + R * 0.694389963795006074e-2 + pow(R - 0.95e1, 2) * (-0.375158587517542778e-2) + pow(R - 0.95e1, 3) * 0.113450403855061121e-2 : (R < 0.105e2 ? -0.450252026088759222e-1 + R * 0.404319179168759202e-2 + pow(R - 0.100e2, 2) * (-0.204982981734951096e-2) + pow(R - 0.100e2, 3) * 0.596140563948655564e-3 : (R < 0.110e2 ? -0.286345363516455134e-1 + R * 0.244046739729957256e-2 + pow(R - 0.105e2, 2) * (-0.115561897142652751e-2) + pow(R - 0.105e2, 3) * 0.340600145654765089e-3 : (R < 0.120e2 ? -0.189790085922553094e-1 + R * 0.154029853511411909e-2 + pow(R - 0.110e2, 2) * (-0.644718752944379875e-3) + pow(R - 0.110e2, 3) * 0.143100230830260947e-3 : (R < 0.140e2 ? -0.915898535379370583e-2 + R * 0.680161721716142126e-3 + pow(R - 0.120e2, 2) * (-0.215418060453596979e-3) + pow(R - 0.120e2, 3) * 0.280747322852629614e-4 : (R < 0.160e2 ? -0.244920337584873587e-2 + R * 0.155386267324909719e-3 + pow(R - 0.140e2, 2) * (-0.469696667420192108e-4) + pow(R - 0.140e2, 3) * 0.761447902728217118e-5 : (R < 0.180e2 ? -0.103208751234750307e-2 + R * 0.588813486842189435e-4 + pow(R - 0.160e2, 2) * (-0.128279257832618349e-5) + pow(R - 0.160e2, 3) * (-0.270899455064164456e-5) : (R < 0.200e2 ? -0.381386750488260456e-3 + R * 0.212422437632144723e-4 + pow(R - 0.180e2, 2) * (-0.175367598821760519e-4) + pow(R - 0.180e2, 3) * 0.339432499353440725e-5 : (R < 0.250e2 ? 0.163923602057136793e-3 + R * (-0.817289584307683985e-5) + pow(R - 0.200e2, 2) * 0.282919007903039415e-5 + pow(R - 0.200e2, 3) * (-0.241866377229405183e-6) : -0.493780055732427549e-4 + R * 0.197902665502171014e-5 + pow(R - 0.250e2, 2) * (-0.798805579410684025e-6) + pow(R - 0.250e2, 3) * 0.800368057012683953e-7)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1490192626e3 * (R - 0.300e2) * (R - 0.250e2) + 0.1589540844e4 * R + 0.9338502288e5 - 0.7947704220e2 * R * R + 0.75000e3 * (0.2914148659e0 * R - 0.1205396551e2) * R) * pow(R, -6));
}

static double radcoeff_6_2_4_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.344410245000000004e-1 + pow(R - 0.475e1, 2) * (-0.175011039551375025e1) + pow(R - 0.475e1, 3) * 0.231383641725500100e1 : (R < 0.525e1 ? 0.209838511740781186e1 + R * (-0.441210869521562354e0) + pow(R - 0.50e1, 2) * (-0.147330825724993585e-1) + pow(R - 0.50e1, 3) * 0.106733972103499486e1 : (R < 0.55e1 ? 0.110215328674719037e1 + R * (-0.248451213113750541e0) + pow(R - 0.525e1, 2) * 0.785771708203746755e0 + pow(R - 0.525e1, 3) * (-0.465070744594978658e0) : (R < 0.575e1 ? -0.537270704071103999e0 + R * 0.572338763765643521e-1 + pow(R - 0.55e1, 2) * 0.436968649757512762e0 + pow(R - 0.55e1, 3) * (-0.207667174655080666e0) : (R < 0.60e1 ? -0.154559865844308542e1 + R * 0.236780606007493122e0 + pow(R - 0.575e1, 2) * 0.281218268766202262e0 + pow(R - 0.575e1, 3) * (-0.466271142384698689e0) : (R < 0.625e1 ? -0.185440777436077964e1 + R * 0.289963901193463269e0 + pow(R - 0.60e1, 2) * (-0.684850880223217828e-1) + pow(R - 0.60e1, 3) * (-0.272128730046124867e0) : (R < 0.65e1 ? -0.133002334817658685e1 + R * 0.204697220298653920e0 + pow(R - 0.625e1, 2) * (-0.272581635556915447e0) + pow(R - 0.625e1, 3) * 0.122862846569198880e0 : (R < 0.675e1 ? -0.608988747117486517e0 + R * 0.914431862519210076e-1 + pow(R - 0.65e1, 2) * (-0.180434500630016287e0) + pow(R - 0.65e1, 3) * 0.153614077849329012e0 : (R < 0.70e1 ? -0.203317061089718865e0 + R * 0.300285755336620538e-1 + pow(R - 0.675e1, 2) * (-0.652239422430195281e-1) + pow(R - 0.675e1, 3) * 0.574164518894852496e-1 : (R < 0.725e1 ? -0.535717206740154370e-1 + R * 0.818218914143077625e-2 + pow(R - 0.70e1, 2) * (-0.221616033259055892e-1) + pow(R - 0.70e1, 3) * 0.183189109447299409e-1 : (R < 0.75e1 ? 0.762954592542370788e-3 + R * 0.536183280614845352e-3 + pow(R - 0.725e1, 2) * (-0.842242011735813353e-2) + pow(R - 0.725e1, 3) * 0.805720711559500605e-2 : (R < 0.775e1 ? 0.206160751301761799e-1 + R * (-0.216430044389015735e-2) + pow(R - 0.75e1, 2) * (-0.237951478066187770e-2) + pow(R - 0.75e1, 3) * 0.305932145689002781e-2 : (R < 0.80e1 ? 0.252902006371701765e-1 + R * (-0.278043506105421631e-2) + pow(R - 0.775e1, 2) * (-0.850236879943570031e-4) + pow(R - 0.775e1, 3) * 0.923983024844890325e-3 : (R < 0.825e1 ? 0.242534441061438184e-1 + R * (-0.264970008789297724e-2) + pow(R - 0.80e1, 2) * 0.607963580639310822e-3 + pow(R - 0.80e1, 3) * 0.236292811730398535e-3 : (R < 0.85e1 ? 0.214217686918344481e-1 + R * (-0.230141339537387251e-2) + pow(R - 0.825e1, 2) * 0.785183189437109724e-3 + pow(R - 0.825e1, 3) * (-0.259124639766481553e-3) : (R < 0.875e1 ? 0.185427451581980304e-1 + R * (-0.195740767061153287e-2) + pow(R - 0.85e1, 2) * 0.590839709612248532e-3 + pow(R - 0.85e1, 3) * 0.134350579335531465e-3 : (R < 0.90e1 ? 0.157764292190749680e-1 + R * (-0.163679708217999648e-2) + pow(R - 0.875e1, 2) * 0.691602644113897130e-3 + pow(R - 0.875e1, 3) * (-0.193288877575643729e-3) : (R < 0.925e1 ? 0.130305973280163308e-1 + R * (-0.132723742466848114e-2) + pow(R - 0.90e1, 2) * 0.546635985932164320e-3 + pow(R - 0.90e1, 3) * (-0.753527522329573674e-4) : (R < 0.95e1 ? 0.106660831851012258e-1 + R * (-0.106804807274607852e-2) + pow(R - 0.925e1, 2) * 0.490121421757446288e-3 + pow(R - 0.925e1, 3) * (-0.163297582925284891e-4) : (R < 0.100e2 ? 0.839747125009844206e-2 + R * (-0.826049191547204454e-3) + pow(R - 0.95e1, 2) * 0.477874103038049920e-3 + pow(R - 0.95e1, 3) * (-0.997121502872819242e-4) : (R < 0.105e2 ? 0.447357585384616004e-2 + R * (-0.422959201224616004e-3) + pow(R - 0.100e2, 2) * 0.328305877607127034e-3 + pow(R - 0.100e2, 3) * (-0.118757675115789988e-3) : (R < 0.110e2 ? 0.202881259048048055e-2 + R * (-0.183721579954331492e-3) + pow(R - 0.105e2, 2) * 0.150169364933442045e-3 + pow(R - 0.105e2, 3) * (-0.600772562095581005e-4) : (R < 0.120e2 ? 0.902619624148638167e-3 + R * (-0.786101571780580119e-4) + pow(R - 0.110e2, 2) * 0.600534806191048876e-4 + pow(R - 0.110e2, 3) * (-0.165649594010468776e-4) : (R < 0.140e2 ? 0.101163148943866416e-3 + R * (-0.819807414298886769e-5) + pow(R - 0.120e2, 2) * 0.103586024159642549e-4 + pow(R - 0.120e2, 3) * (-0.254616981410990999e-5) : (R < 0.160e2 ? -0.300970064286892324e-4 + R * 0.268229775154923112e-5 + pow(R - 0.140e2, 2) * (-0.491841646869520506e-5) + pow(R - 0.140e2, 3) * 0.112013367021029481e-5 : (R < 0.180e2 ? 0.589033863743288071e-4 + R * (-0.354976408070805053e-5) + pow(R - 0.160e2, 2) * 0.180238555256656424e-5 + pow(R - 0.160e2, 3) * (-0.300466383356269415e-6) : (R < 0.200e2 ? -0.116182346239351776e-5 + R * 0.541815292829732139e-7 + pow(R - 0.180e2, 2) * (-0.412747571052246042e-9) + pow(R - 0.180e2, 3) * (-0.117362062271717974e-8) : (R < 0.250e2 ? -0.858174662523161520e-6 + R * 0.384470915261580726e-7 + pow(R - 0.200e2, 2) * (-0.745447130735532455e-8) + pow(R - 0.200e2, 3) * 0.517160532424742017e-9 : -0.859495501115120273e-7 + R * 0.268941838446048111e-8 + pow(R - 0.250e2, 2) * 0.302936679015807465e-9 + pow(R - 0.250e2, 3) * (-0.602337167815807381e-10))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2855450624e2 * (R - 0.300e2) * (R - 0.250e2) - 0.3045805284e3 * R - 0.1789467244e5 + 0.1522902642e2 * R * R + 0.75000e3 * (-0.558408423e-1 * R + 0.2309795008e1) * R) * pow(R, -6));
}

static double radcoeff_6_2_4_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.345394196100000550e0 + R * 0.111022302462515654e-15 + pow(R - 0.475e1, 2) * 0.496577200425337839e1 + pow(R - 0.475e1, 3) * (-0.765719744421351312e1) : (R < 0.525e1 ? -0.539048456258327668e1 + R * 0.104716148133665543e1 + pow(R - 0.50e1, 2) * (-0.777126078906756779e0) + pow(R - 0.50e1, 3) * (-0.703169921594583303e-1) : (R < 0.55e1 ? -0.333097939919023656e1 + R * 0.645414005853378381e0 + pow(R - 0.525e1, 2) * (-0.829863823026350533e0) + pow(R - 0.525e1, 3) * (-0.176048143486530542e-1) : (R < 0.575e1 ? -0.108284048527406918e1 + R * 0.227181191649830777e0 + pow(R - 0.55e1, 2) * (-0.843067433787840326e0) + pow(R - 0.55e1, 3) * 0.462728454354068841e0 : (R < 0.60e1 ? 0.796637689503033486e0 + R * (-0.107590940052701478e0) + pow(R - 0.575e1, 2) * (-0.496021093022288695e0) + pow(R - 0.575e1, 3) * 0.555355188932378230e0 : (R < 0.625e1 ? 0.163760248753414928e1 + R * (-0.251472388639024880e0) + pow(R - 0.60e1, 2) * (-0.795047013230049532e-1) + pow(R - 0.60e1, 3) * 0.415088505756417647e0 : (R < 0.65e1 ? 0.140113955055499417e1 + R * (-0.213395644471199047e0) + pow(R - 0.625e1, 2) * 0.231811677994308296e0 + pow(R - 0.625e1, 3) * (-0.607157591580481243e-1) : (R < 0.675e1 ? 0.735288474685163007e0 + R * (-0.108874010316178924e0) + pow(R - 0.65e1, 2) * 0.186274858625772199e0 + pow(R - 0.65e1, 3) * (-0.145579657284226005e0) : (R < 0.70e1 ? 0.300227577090575071e0 + R * (-0.430327667440851963e-1) + pow(R - 0.675e1, 2) * 0.770901156626026818e-1 + pow(R - 0.675e1, 3) * (-0.639920931770475154e-1) : (R < 0.725e1 ? 0.118220050339361879e0 + R * (-0.164862263834802680e-1) + pow(R - 0.70e1, 2) * 0.290960457798170452e-1 + pow(R - 0.70e1, 3) * (-0.225993811435839000e-1) : (R < 0.75e1 ? 0.449333056602545106e-1 + R * (-0.617558745799372602e-2) + pow(R - 0.725e1, 2) * 0.121465099221291194e-1 + pow(R - 0.725e1, 3) * (-0.979182139101686042e-2) : (R < 0.775e1 ? 0.137598019442862086e-1 + R * (-0.193829900774482766e-2) + pow(R - 0.75e1, 2) * 0.480264387886647406e-2 + pow(R - 0.75e1, 3) * (-0.397642596434865259e-2) : (R < 0.80e1 ? 0.116583447985896455e-2 + R * (-0.282556936626963159e-3) + pow(R - 0.775e1, 2) * 0.182032440560498440e-2 + pow(R - 0.775e1, 3) * (-0.144749562838852636e-2) : (R < 0.825e1 ? -0.385306654382144235e-2 + R * 0.356199835852680333e-3 + pow(R - 0.80e1, 2) * 0.734702684313589681e-3 + pow(R - 0.80e1, 3) * (-0.799902120497244032e-3) : (R < 0.85e1 ? -0.561294607683399550e-2 + R * 0.573569530416241863e-3 + pow(R - 0.825e1, 2) * 0.134776093940656657e-3 + pow(R - 0.825e1, 3) * (-0.210025284822496991e-3) : (R < 0.875e1 ? -0.584587481759999122e-2 + R * 0.601577836482351976e-3 + pow(R - 0.85e1, 2) * (-0.227428696762161095e-4) + pow(R - 0.85e1, 3) * (-0.849209514127668275e-4) : (R < 0.90e1 ? -0.560979964607556409e-2 + R * 0.574283723254350158e-3 + pow(R - 0.875e1, 2) * (-0.864335832357912369e-4) + pow(R - 0.875e1, 3) * (-0.181212547926438853e-3) : (R < 0.925e1 ? -0.492328589190222602e-2 + R * 0.497089578900247330e-3 + pow(R - 0.90e1, 2) * (-0.222342994180620363e-3) + pow(R - 0.90e1, 3) * 0.905522119185249338e-4 : (R < 0.95e1 ? -0.406448259518811007e-2 + R * 0.402896621544660547e-3 + pow(R - 0.925e1, 2) * (-0.154428835241726659e-3) + pow(R - 0.925e1, 3) * 0.105458698523379878e-4 : (R < 0.100e2 ? -0.335921748145055028e-2 + R * 0.327659554521110563e-3 + pow(R - 0.95e1, 2) * (-0.146519432852473168e-3) + pow(R - 0.95e1, 3) * 0.201322772205041543e-4 : (R < 0.105e2 ? -0.207912855564015495e-2 + R * 0.196239329584015532e-3 + pow(R - 0.100e2, 2) * (-0.116321017021716935e-3) + pow(R - 0.100e2, 3) * 0.169187948273717489e-4 : (R < 0.110e2 ? -0.101795879107968766e-2 + R * 0.926074086828273965e-4 + pow(R - 0.105e2, 2) * (-0.909428247806593084e-4) + pow(R - 0.105e2, 3) * 0.440569761100090236e-4 : (R < 0.120e2 ? -0.398286355581423546e-3 + R * 0.347073159846748660e-4 + pow(R - 0.110e2, 2) * (-0.248573606156457629e-4) + pow(R - 0.110e2, 3) * 0.614347116097089724e-5 : (R < 0.140e2 ? -0.415885520557523851e-4 + R * 0.342300823629603198e-5 + pow(R - 0.120e2, 2) * (-0.642694713273307029e-5) + pow(R - 0.120e2, 3) * 0.185568080604252711e-5 : (R < 0.160e2 ? -0.429623012023705365e-5 + R * (-0.166106221259247562e-7) + pow(R - 0.140e2, 2) * 0.470713770352209192e-5 + pow(R - 0.140e2, 3) * (-0.137392895047956472e-5) : (R < 0.180e2 ? -0.339215654433227008e-4 + R * 0.232479278620766881e-5 + pow(R - 0.160e2, 2) * (-0.353643599935529598e-5) + pow(R - 0.160e2, 3) * 0.828557802125730735e-6 : (R < 0.200e2 ? 0.342160596706854111e-4 + R * (-0.187825758570474503e-5) + pow(R - 0.180e2, 2) * 0.143491081339908885e-5 + pow(R - 0.180e2, 3) * (-0.274461075160858034e-6) : (R < 0.250e2 ? -0.111621927103262623e-4 + R * 0.567852765961313114e-6 + pow(R - 0.200e2, 2) * (-0.211855637566059593e-6) + pow(R - 0.200e2, 3) * 0.184250327115593958e-7 : 0.426151849680820745e-5 + R * (-0.168826156332328310e-6) + pow(R - 0.250e2, 2) * 0.645198531073313109e-7 + pow(R - 0.250e2, 3) * (-0.638660512897313111e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.6235603485e2 * (R - 0.300e2) * (R - 0.250e2) + 0.6651321952e3 * R + 0.3907554784e5 - 0.3325660976e2 * R * R + 0.75000e3 * (0.1219390575e0 * R - 0.5043817670e1) * R) * pow(R, -6));
}

static double radcoeff_6_2_5_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.118095889699999998e0 + pow(R - 0.475e1, 2) * 0.160522658356755521e1 + pow(R - 0.475e1, 3) * (-0.292800221907022085e1) : (R < 0.525e1 ? -0.133158364144055619e1 + R * 0.253612875708111196e0 + pow(R - 0.50e1, 2) * (-0.590775080735110536e0) + pow(R - 0.50e1, 3) * 0.762436030650662788e0 : (R < 0.55e1 ? -0.556332401749665029e0 + R * 0.101182091087555229e0 + pow(R - 0.525e1, 2) * (-0.189480577471134240e-1) + pow(R - 0.525e1, 3) * (-0.149836565932429944e0) : (R < 0.575e1 ? -0.353231734277173470e0 + R * 0.636137061016679023e-1 + pow(R - 0.55e1, 2) * (-0.131325482196435889e0) + pow(R - 0.55e1, 3) * 0.121933344823057177e0 : (R < 0.60e1 ? -0.113432994474195803e0 + R * 0.208134671577731821e-1 + pow(R - 0.575e1, 2) * (-0.398754735791430059e-1) + pow(R - 0.575e1, 3) * 0.191293012002010966e-1 : (R < 0.625e1 ? -0.175203593544363198e-1 + R * 0.446247434323938669e-2 + pow(R - 0.60e1, 2) * (-0.255284976789921826e-1) + pow(R - 0.60e1, 3) * 0.242348558161385383e-1 : (R < 0.65e1 ? 0.326391127500670480e-1 + R * (-0.375773903073072782e-2) + pow(R - 0.625e1, 2) * (-0.735235581688827630e-2) + pow(R - 0.625e1, 3) * 0.769248007924475206e-2 : (R < 0.675e1 ? 0.468197318210570868e-1 + R * (-0.599157692431647512e-2) + pow(R - 0.65e1, 2) * (-0.158299575745471225e-2) + pow(R - 0.65e1, 3) * 0.360843634688245681e-2 : (R < 0.70e1 ? 0.475528598340227426e-1 + R * (-0.610649298800336991e-2) + pow(R - 0.675e1, 2) * 0.112333150270713046e-2 + pow(R - 0.675e1, 3) * 0.129115328522539188e-2 : (R < 0.725e1 ? 0.420169433766903119e-1 + R * (-0.530273599567004407e-2) + pow(R - 0.70e1, 2) * 0.209169646662617443e-2 + pow(R - 0.70e1, 3) * (-0.239970831783984783e-3) : (R < 0.75e1 ? 0.348877355195442995e-1 + R * (-0.430188229331645439e-2) + pow(R - 0.725e1, 2) * 0.191171834278818582e-2 + pow(R - 0.725e1, 3) * (-0.193518150089471395e-3) : (R < 0.775e1 ? 0.281073853079810282e-1 + R * (-0.338230777506413720e-2) + pow(R - 0.75e1, 2) * 0.176657973022108228e-2 + pow(R - 0.75e1, 3) * (-0.479442647858133522e-3) : (R < 0.80e1 ? 0.220614988928092212e-1 + R * (-0.258891340642699620e-2) + pow(R - 0.775e1, 2) * 0.140699774432748214e-2 + pow(R - 0.775e1, 3) * (-0.312062106477989127e-3) : (R < 0.825e1 ? 0.169846624638230262e-1 + R * (-0.194392617922787810e-2) + pow(R - 0.80e1, 2) * 0.117295116446899028e-2 + pow(R - 0.80e1, 3) * (-0.343276286229914171e-3) : (R < 0.85e1 ? 0.127451901714573067e-1 + R * (-0.142181490066149176e-2) + pow(R - 0.825e1, 2) * 0.915493949796554636e-3 + pow(R - 0.825e1, 3) * (-0.390895571002351620e-3) : (R < 0.875e1 ? 0.952844132967231930e-2 + R * (-0.103736084532615540e-2) + pow(R - 0.85e1, 2) * 0.622322271544790907e-3 + pow(R - 0.85e1, 3) * (-0.180639823360677397e-3) : (R < 0.90e1 ? 0.713821624659651162e-2 + R * (-0.760069676433887029e-3) + pow(R - 0.875e1, 2) * 0.486842404024282859e-3 + pow(R - 0.875e1, 3) * (-0.154196418754938439e-3) : (R < 0.925e1 ? 0.523565021634466842e-2 + R * (-0.545560302938296465e-3) + pow(R - 0.90e1, 2) * 0.371195089958079017e-3 + pow(R - 0.90e1, 3) * (-0.176420351219572409e-3) : (R < 0.95e1 ? 0.384529509706957318e-2 + R * (-0.393041573812926814e-3) + pow(R - 0.925e1, 2) * 0.238879826543399697e-3 + pow(R - 0.925e1, 3) * 0.202708412332302489e-4 : (R < 0.100e2 ? 0.268975520609496515e-2 + R * (-0.269800877809996348e-3) + pow(R - 0.95e1, 2) * 0.254082957468322384e-3 + pow(R - 0.95e1, 3) * (-0.121578178256659332e-3) : (R < 0.105e2 ? 0.110908543542168427e-2 + R * (-0.106901554034168436e-3) + pow(R - 0.100e2, 2) * 0.717156900833333861e-4 + pow(R - 0.100e2, 3) * (-0.344979890999302474e-5) : (R < 0.110e2 ? 0.400735553618963109e-3 + R * (-0.377732131333298181e-4) + pow(R - 0.105e2, 2) * 0.665409917183438490e-4 + pow(R - 0.105e2, 3) * (-0.371178974793684211e-4) : (R < 0.120e2 ? -0.129971903333648571e-4 + R * 0.929355475487714267e-6 + pow(R - 0.110e2, 2) * 0.108641454992912157e-4 + pow(R - 0.110e2, 3) * (-0.569710323277892972e-5) : (R < 0.140e2 ? -0.634739236698002529e-4 + R * 0.556633677573335484e-5 + pow(R - 0.120e2, 2) * (-0.622716419904557430e-5) + pow(R - 0.120e2, 3) * 0.135245253133944807e-5 : (R < 0.160e2 ? 0.439462096657578820e-4 + R * (-0.311288964437556298e-5) + pow(R - 0.140e2, 2) * 0.188755098899111497e-5 + pow(R - 0.140e2, 3) * (-0.331551244526666651e-6) : (R < 0.180e2 ? -0.830142068100234268e-5 + R * 0.458699377268896394e-6 + pow(R - 0.160e2, 2) * (-0.101756478168885150e-6) + pow(R - 0.160e2, 3) * 0.938010387971847634e-8 : (R < 0.200e2 ? -0.333304177249959572e-5 + R * 0.164234711149977531e-6 + pow(R - 0.180e2, 2) * (-0.454758548905742883e-7) + pow(R - 0.180e2, 3) * 0.625318739529275997e-8 : (R < 0.250e2 ? -0.132761627652387015e-5 + R * 0.573695403311935046e-7 + pow(R - 0.200e2, 2) * (-0.795673051881772680e-8) + pow(R - 0.200e2, 3) * 0.436006922515805114e-9 : -0.300364024192540604e-6 + R * 0.105027543317016251e-7 + pow(R - 0.250e2, 2) * (-0.141662668108065005e-8) + pow(R - 0.250e2, 3) * 0.811934373480650063e-10)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.5767215037e2 * (R - 0.300e2) * (R - 0.250e2) - 0.6151718956e3 * R - 0.3614049832e5 + 0.3075859478e2 * R * R + 0.75000e3 * (-0.1127798941e0 * R + 0.4664964438e1) * R) * pow(R, -6));
}

static double radcoeff_6_2_6_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.398862336300000120e0 + R * (-0.277555756156289135e-16) + pow(R - 0.475e1, 2) * (-0.127849772872781164e1) + pow(R - 0.475e1, 3) * 0.289749115811124636e1 : (R < 0.525e1 ? 0.844075888690235421e0 + R * (-0.959692722180470886e-1) + pow(R - 0.50e1, 2) * 0.894620639855623234e0 + pow(R - 0.50e1, 3) * (-0.235364600553373915e1) : (R < 0.55e1 ? 0.831705066921011316e0 + R * (-0.899675783278116870e-1) + pow(R - 0.525e1, 2) * (-0.870613864294681461e0) + pow(R - 0.525e1, 3) * 0.925846348823712750e0 : (R < 0.575e1 ? 0.223116712918888460e1 + R * (-0.351678320070706263e0) + pow(R - 0.55e1, 2) * (-0.176229102676896815e0) + pow(R - 0.55e1, 3) * 0.122484533438887100e0 : (R < 0.60e1 ? 0.259667166368883917e1 + R * (-0.416827021389363339e0) + pow(R - 0.575e1, 2) * (-0.843657025977314901e-1) + pow(R - 0.575e1, 3) * 0.465944317420739385e0 : (R < 0.625e1 ? 0.232758893794104216e1 + R * (-0.371645313171840408e0) + pow(R - 0.60e1, 2) * 0.265092535467823076e0 + pow(R - 0.60e1, 3) * 0.117506271758154382e0 : (R < 0.65e1 ? 0.137987642135046840e1 + R * (-0.217066619483274936e0) + pow(R - 0.625e1, 2) * 0.353222239286438866e0 + pow(R - 0.625e1, 3) * (-0.195839142693356338e0) : (R < 0.675e1 ? 0.489599502177888724e0 + R * (-0.771753390950598028e-1) + pow(R - 0.65e1, 2) * 0.206342882266421612e0 + pow(R - 0.65e1, 3) * (-0.186627741944729447e0) : (R < 0.70e1 ? 0.393733821012790114e-1 + R * (-0.899659957648578021e-2) + pow(R - 0.675e1, 2) * 0.663720758078745199e-1 + pow(R - 0.675e1, 3) * (-0.675702607277255674e-1) : (R < 0.725e1 ? -0.101150446607020522e0 + R * 0.115200144410029324e-1 + pow(R - 0.70e1, 2) * 0.156943802620803409e-1 + pow(R - 0.70e1, 3) * (-0.203536887443682771e-1) : (R < 0.75e1 ? -0.129711407040436877e0 + R * 0.155508879324740504e-1 + pow(R - 0.725e1, 2) * 0.429113703804132713e-3 + pow(R - 0.725e1, 3) * (-0.703984061480132997e-2) : (R < 0.775e1 ? -0.121503985468256498e0 + R * 0.144454746691008665e-1 + pow(R - 0.75e1, 2) * (-0.485076675729686439e-2) + pow(R - 0.75e1, 3) * (-0.105032134042640918e-2) : (R < 0.80e1 ? -0.101500600279199243e0 + R * 0.118231560391224826e-1 + pow(R - 0.775e1, 2) * (-0.563850776261667127e-2) + pow(R - 0.775e1, 3) * 0.871051480506975645e-3 : (R < 0.825e1 ? -0.805919430052736419e-1 + R * 0.916722431040920514e-2 + pow(R - 0.80e1, 2) * (-0.498521915223643954e-2) + pow(R - 0.80e1, 3) * 0.142034953039846474e-2 : (R < 0.85e1 ? -0.625144004177357604e-1 + R * 0.694093027124069797e-2 + pow(R - 0.825e1, 2) * (-0.391995700443759088e-2) + pow(R - 0.825e1, 3) * 0.101707634989919621e-2 : (R < 0.875e1 ? -0.477046540763380184e-1 + R * 0.517165358462800227e-2 + pow(R - 0.85e1, 2) * (-0.315714974201319366e-2) + pow(R - 0.85e1, 3) * 0.117941796600473875e-2 : (R < 0.90e1 ? -0.360060000086638160e-1 + R * 0.381421958224729398e-2 + pow(R - 0.875e1, 2) * (-0.227258626750963949e-2) + pow(R - 0.875e1, 3) * 0.530552138081853025e-3 : (R < 0.925e1 ? -0.268084153024453938e-1 + R * 0.277740497438282163e-2 + pow(R - 0.90e1, 2) * (-0.187467216394824969e-2) + pow(R - 0.90e1, 3) * 0.742799081667850692e-3 : (R < 0.95e1 ? -0.195319094760481246e-1 + R * 0.197934372022141912e-2 + pow(R - 0.925e1, 2) * (-0.131757285269736165e-2) + pow(R - 0.925e1, 3) * 0.360551330446738573e-3 : (R < 0.100e2 ? -0.139923851718492687e-1 + R * 0.138816066833150195e-2 + pow(R - 0.95e1, 2) * (-0.104715935486230770e-2) + pow(R - 0.95e1, 3) * 0.357225271598607722e-3 : (R < 0.105e2 ? -0.641711783998150011e-2 + R * 0.608920267168150007e-3 + pow(R - 0.100e2, 2) * (-0.511321447464396068e-3) + pow(R - 0.100e2, 3) * 0.198707037456192126e-3 : (R < 0.110e2 ? -0.271605254375692972e-2 + R * 0.246629097795898061e-3 + pow(R - 0.105e2, 2) * (-0.213260891280107878e-3) + pow(R - 0.105e2, 3) * 0.873189335366235262e-4 : (R < 0.120e2 ? -0.113296429748083595e-2 + R * 0.988574066682578172e-4 + pow(R - 0.110e2, 2) * (-0.822824909751725825e-4) + pow(R - 0.110e2, 3) * 0.252812682569147597e-4 : (R < 0.140e2 ? -0.125311394039883317e-3 + R * 0.101362294886569434e-4 + pow(R - 0.120e2, 2) * (-0.643868620442829819e-5) + pow(R - 0.120e2, 3) * 0.120753189042491338e-5 : (R < 0.160e2 ? 0.162951861225020429e-4 + R * (-0.112813264395728888e-5) + pow(R - 0.140e2, 2) * 0.806505138121182389e-6 + pow(R - 0.140e2, 3) * (-0.201941840733768997e-6) : (R < 0.180e2 ? 0.506217653024459748e-5 + R * (-0.325414180277787336e-6) + pow(R - 0.160e2, 2) * (-0.405145906281431643e-6) + pow(R - 0.160e2, 3) * 0.144854107835162653e-6 : (R < 0.200e2 ? 0.248244372786811439e-5 + R * (-0.207748511381561915e-6) + pow(R - 0.180e2, 2) * 0.463978740729544327e-6 + pow(R - 0.180e2, 3) * (-0.980780463568816701e-7) : (R < 0.250e2 ? -0.100258338127807052e-4 + R * 0.471229895254035300e-6 + pow(R - 0.200e2, 2) * (-0.124489537411745693e-6) + pow(R - 0.200e2, 3) * 0.984988868578772661e-8 : 0.747006904733553782e-6 + R * (-0.349238274293421512e-7) + pow(R - 0.250e2, 2) * 0.232587928750701976e-7 + pow(R - 0.250e2, 3) * (-0.252760799704035346e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1923954904e3 * (R - 0.300e2) * (R - 0.250e2) - 0.2052217156e4 * R - 0.1205682355e6 + 0.1026108578e3 * R * R + 0.75000e3 * (-0.3762407216e0 * R + 0.1556269680e2) * R) * pow(R, -6));
}

static double radcoeff_6_2_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.119636729799999730e0 + R * (-0.555111512312578270e-16) + pow(R - 0.475e1, 2) * (-0.155271847446055800e1) + pow(R - 0.475e1, 3) * 0.196128609624223249e1 : (R < 0.525e1 ? 0.185705393172430200e1 + R * (-0.408618094184860392e0) + pow(R - 0.50e1, 2) * (-0.817539022788835446e-1) + pow(R - 0.50e1, 3) * 0.119478565367330036e1 : (R < 0.55e1 ? 0.909099704317931190e0 + R * (-0.225472735260558332e0) + pow(R - 0.525e1, 2) * 0.814335337976091700e0 + pow(R - 0.525e1, 3) * (-0.338022176535433261e0) : (R < 0.575e1 ? -0.936122743449016026e0 + R * 0.118315775627093805e0 + pow(R - 0.55e1, 2) * 0.560818705574516740e0 + pow(R - 0.55e1, 3) * (-0.393684992331567951e0) : (R < 0.60e1 ? -0.209513504852505328e1 + R * 0.324909192352183185e0 + pow(R - 0.575e1, 2) * 0.265554961325840777e0 + pow(R - 0.575e1, 3) * (-0.505183178938293675e0) : (R < 0.625e1 ? -0.231476515828504104e1 + R * 0.362964826964173481e0 + pow(R - 0.60e1, 2) * (-0.113332422877879452e0) + pow(R - 0.60e1, 3) * (-0.272163084235257757e0) : (R < 0.65e1 ? -0.165299604707451819e1 + R * 0.255268037231122902e0 + pow(R - 0.625e1, 2) * (-0.317454736054322784e0) + pow(R - 0.625e1, 3) * 0.118605487719324582e0 : (R < 0.675e1 ? -0.783806303313676844e0 + R * 0.118779198151334892e0 + pow(R - 0.65e1, 2) * (-0.228500620264829341e0) + pow(R - 0.65e1, 3) * 0.178220210477959023e0 : (R < 0.70e1 ? -0.249673261786878403e0 + R * 0.379451774835375399e-1 + pow(R - 0.675e1, 2) * (-0.948354624063600660e-1) + pow(R - 0.675e1, 3) * 0.823792206408396066e-1 : (R < 0.725e1 ? -0.305119115336045382e-1 + R * 0.597355015051493406e-2 + pow(R - 0.70e1, 2) * (-0.330510469257303541e-1) + pow(R - 0.70e1, 3) * 0.306815843346824671e-1 : (R < 0.75e1 ? 0.460040641895802793e-1 + R * (-0.479917624959728083e-2) + pow(R - 0.725e1, 2) * (-0.100398586747185020e-1) + pow(R - 0.725e1, 3) * 0.119944685164304916e-1 : (R < 0.775e1 ? 0.663462352719436099e-1 + R * (-0.757014274012581499e-2) + pow(R - 0.75e1, 2) * (-0.104400728739563247e-2) + pow(R - 0.75e1, 3) * 0.395613244759555893e-2 : (R < 0.80e1 ? 0.646395726617208372e-1 + R * (-0.735037154989946328e-2) + pow(R - 0.775e1, 2) * 0.192309204830103694e-2 + pow(R - 0.775e1, 3) * 0.731728989187269163e-3 : (R < 0.825e1 ? 0.559812375032106568e-1 + R * (-0.625162634027633200e-2) + pow(R - 0.80e1, 2) * 0.247188879019148884e-2 + pow(R - 0.80e1, 3) * 0.365092916553479835e-4 : (R < 0.85e1 ? 0.458832844402104825e-1 + R * (-0.500883645299520994e-2) + pow(R - 0.825e1, 2) * 0.249927075893299983e-2 + pow(R - 0.825e1, 3) * (-0.685984267808650199e-3) : (R < 0.875e1 ? 0.365001570598140687e-1 + R * (-0.388782312374283184e-2) + pow(R - 0.85e1, 2) * 0.198478255807651213e-2 + pow(R - 0.85e1, 3) * (-0.379881788420739005e-3) : (R < 0.90e1 ? 0.285580901842928149e-1 + R * (-0.296665968003346440e-2) + pow(R - 0.875e1, 2) * 0.169987121676095786e-2 + pow(R - 0.875e1, 3) * (-0.560176002508404195e-3) : (R < 0.925e1 ? 0.219514559141098034e-1 + R * (-0.222175707212331121e-2) + pow(R - 0.90e1, 2) * 0.127973921487965466e-2 + pow(R - 0.90e1, 3) * (-0.418094393545640885e-3) : (R < 0.95e1 ? 0.168312454851279464e-1 + R * (-0.166028016347329163e-2) + pow(R - 0.925e1, 2) * 0.966168419720423994e-3 + pow(R - 0.925e1, 3) * (-0.346206551309031791e-3) : (R < 0.100e2 ? 0.129136019598434688e-1 + R * (-0.124210968198352296e-2) + pow(R - 0.95e1, 2) * 0.706513506238650151e-3 + pow(R - 0.95e1, 3) * (-0.194841621343208533e-3) : (R < 0.105e2 ? 0.746205223142279266e-2 + R * (-0.681727391752279298e-3) + pow(R - 0.100e2, 2) * 0.414251074223837338e-3 + pow(R - 0.100e2, 3) * (-0.132795920638557825e-3) : (R < 0.110e2 ? 0.424514710557728249e-2 + R * (-0.367073258007360255e-3) + pow(R - 0.105e2, 2) * 0.215057193266000586e-3 + pow(R - 0.105e2, 3) * (-0.781404705025599209e-4) : (R < 0.120e2 ? 0.256817360080107641e-2 + R * (-0.210621417618279667e-3) + pow(R - 0.110e2, 2) * 0.978464875121606978e-4 + pow(R - 0.110e2, 3) * (-0.227020296938810283e-4) : (R < 0.140e2 ? 0.111227542730721633e-2 + R * (-0.830345316756013501e-4) + pow(R - 0.120e2, 2) * 0.297403984305176061e-4 + pow(R - 0.120e2, 3) * (-0.452351786760846579e-5) : (R < 0.160e2 ? 0.289537567737655367e-3 + R * (-0.183551523648325254e-4) + pow(R - 0.140e2, 2) * 0.259929122486680965e-5 + pow(R - 0.140e2, 3) * 0.742512800247259679e-7 : (R < 0.180e2 ? 0.119917858723097185e-3 + R * (-0.706697210506857429e-5) + pow(R - 0.160e2, 2) * 0.304479890501516549e-5 + pow(R - 0.160e2, 3) * (-0.473401254365439117e-6) : (R < 0.200e2 ? 0.113389940900772695e-4 + R * (-0.568591537393181631e-6) + pow(R - 0.180e2, 2) * 0.204391378822530708e-6 + pow(R - 0.180e2, 3) * (-0.320648263129699460e-7) : (R < 0.250e2 ? 0.324428900417396271e-5 + R * (-0.135803937858698152e-6) + pow(R - 0.200e2, 2) * 0.120024209447110203e-7 + pow(R - 0.200e2, 3) * (-0.307812212994277719e-9) : 0.108241566435397006e-5 + R * (-0.388656443861588046e-7) + pow(R - 0.250e2, 2) * 0.738523774979685451e-8 + pow(R - 0.250e2, 3) * (-0.561296614513018747e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1690272790e3 * (R - 0.300e2) * (R - 0.250e2) + 0.1802955376e4 * R + 0.1059244628e6 - 0.9014776880e2 * R * R + 0.75000e3 * (0.3305434083e0 * R - 0.1367249901e2) * R) * pow(R, -6));
}

static double radcoeff_6_2_7_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.186416412199999992e0 + pow(R - 0.475e1, 2) * 0.614382627868711784e0 + pow(R - 0.475e1, 3) * (-0.104272342667484685e1) : (R < 0.525e1 ? -0.722713408664110490e0 + R * 0.111680671432822093e0 + pow(R - 0.50e1, 2) * (-0.167659942137423440e0) + pow(R - 0.50e1, 3) * 0.316011937624540329e0 : (R < 0.55e1 ? -0.599221371510736400e0 + R * 0.871029386687116880e-1 + pow(R - 0.525e1, 2) * 0.693490110809818344e-1 + pow(R - 0.525e1, 3) * (-0.805468454233144171e-1) : (R < 0.575e1 ? -0.703791448907821304e0 + R * 0.106674910692331135e0 + pow(R - 0.55e1, 2) * 0.893887701349601639e-2 + pow(R - 0.55e1, 3) * (-0.499921949712822389e-1) : (R < 0.60e1 ? -0.675815333351291514e0 + R * 0.101770812641963734e0 + pow(R - 0.575e1, 2) * (-0.285552692149656645e-1) + pow(R - 0.575e1, 3) * (-0.955462941155701961e-2) : (R < 0.625e1 ? -0.581334563028883755e0 + R * 0.857016850198139557e-1 + pow(R - 0.60e1, 2) * (-0.357212412736334292e-1) + pow(R - 0.60e1, 3) * (-0.938914902489697669e-3) : (R < 0.65e1 ? -0.470852641272377692e0 + R * 0.676650178387804280e-1 + pow(R - 0.625e1, 2) * (-0.364254274505007025e-1) + pow(R - 0.625e1, 3) * 0.453990822151594409e-2 : (R < 0.675e1 ? -0.360208668352918093e0 + R * 0.503035369050643180e-1 + pow(R - 0.65e1, 2) * (-0.330204962843637442e-1) + pow(R - 0.65e1, 3) * 0.103763578564259138e-1 : (R < 0.70e1 ? -0.263798721731495545e0 + R * 0.357388558609623014e-1 + pow(R - 0.675e1, 2) * (-0.252382278920443084e-1) + pow(R - 0.675e1, 3) * 0.914721011278034693e-2 : (R < 0.725e1 ? -0.188905101467605252e0 + R * 0.248348438110864642e-1 + pow(R - 0.70e1, 2) * (-0.183778203074590474e-1) + pow(R - 0.70e1, 3) * 0.722596386845276040e-2 : (R < 0.75e1 ? -0.133144005570515783e0 + R * 0.170008018826918322e-1 + pow(R - 0.725e1, 2) * (-0.129583474061194769e-1) + pow(R - 0.725e1, 3) * 0.523154113340856125e-2 : (R < 0.775e1 ? -0.926352113990965009e-1 + R * 0.115025421421461986e-1 + pow(R - 0.75e1, 2) * (-0.903469155606305592e-2) + pow(R - 0.75e1, 3) * 0.368134986991301922e-2 : (R < 0.80e1 ? -0.634823902796060602e-1 + R * 0.767544946472336308e-2 + pow(R - 0.775e1, 2) * (-0.627367915362829140e-2) + pow(R - 0.775e1, 3) * 0.269917305093935822e-2 : (R < 0.825e1 ? -0.427863636096827774e-1 + R * 0.504470483496034707e-2 + pow(R - 0.80e1, 2) * (-0.424929936542377262e-2) + pow(R - 0.80e1, 3) * 0.186142768632953544e-2 : (R < 0.85e1 ? -0.283738960823408035e-1 + R * 0.326907284343524876e-2 + pow(R - 0.825e1, 2) * (-0.285322860067662104e-2) + pow(R - 0.825e1, 3) * 0.134154948374250226e-2 : (R < 0.875e1 ? -0.185431340960385861e-1 + R * 0.209399907129865712e-2 + pow(R - 0.85e1, 2) * (-0.184706648786974424e-2) + pow(R - 0.85e1, 3) * 0.735886513100461799e-3 : (R < 0.90e1 ? -0.117734754508885629e-1 + R * 0.130844454857012159e-2 + pow(R - 0.875e1, 2) * (-0.129515160304439787e-2) + pow(R - 0.875e1, 3) * 0.669486479855644430e-3 : (R < 0.925e1 ? -0.714553792086770369e-2 + R * 0.786397462020856021e-3 + pow(R - 0.90e1, 2) * (-0.793036743152664516e-3) + pow(R - 0.90e1, 3) * 0.296273359476961762e-3 : (R < 0.95e1 ? -0.403652761685469996e-2 + R * 0.445430345346454093e-3 + pow(R - 0.925e1, 2) * (-0.570831723544943195e-3) + pow(R - 0.925e1, 3) * 0.277558482236507523e-3 : (R < 0.100e2 ? -0.185081810793661272e-2 + R * 0.212056698993327673e-3 + pow(R - 0.95e1, 2) * (-0.362662861867562539e-3) + pow(R - 0.95e1, 3) * 0.164324370161814294e-3 : (R < 0.105e2 ? 0.473252565328741246e-3 + R * (-0.273628852528741249e-4) + pow(R - 0.100e2, 2) * (-0.116176306624841085e-3) + pow(R - 0.100e2, 3) * 0.752729710611786586e-4 : (R < 0.110e2 ? 0.108069418250922766e-2 + R * (-0.870844635818312021e-4) + pow(R - 0.105e2, 2) * (-0.326685003307308615e-5) + pow(R - 0.105e2, 3) * 0.142191239934709682e-4 : (R < 0.120e2 ? 0.100028243791781151e-2 + R * (-0.796869706198010541e-4) + pow(R - 0.110e2, 2) * 0.180618359571333657e-4 + pow(R - 0.110e2, 3) * (-0.369784487332305839e-6) : (R < 0.140e2 ? 0.597802667960375088e-3 + R * (-0.446726521675312505e-4) + pow(R - 0.120e2, 2) * 0.169524824951364481e-4 + pow(R - 0.120e2, 3) * (-0.260558487943540922e-5) : (R < 0.160e2 ? 0.133167158922945314e-3 + R * (-0.812974074021037867e-5) + pow(R - 0.140e2, 2) * 0.131897321852399029e-5 + pow(R - 0.140e2, 3) * (-0.148055162959400328e-6) : (R < 0.180e2 ? 0.812709158000355638e-4 + R * (-0.463050982162722273e-5) + pow(R - 0.160e2, 2) * 0.430642240767588268e-6 + pow(R - 0.160e2, 3) * 0.114549579273011542e-6 : (R < 0.200e2 ? 0.281609309388531640e-4 + R * (-0.153334590728073126e-5) + pow(R - 0.180e2, 2) * 0.111793971640565762e-5 + pow(R - 0.180e2, 3) * (-0.212198349120145960e-6) : (R < 0.250e2 ? -0.757247051210294467e-5 + R * 0.392032768900147292e-6 + pow(R - 0.200e2, 2) * (-0.155250378315218241e-6) + pow(R - 0.200e2, 3) * 0.136732277598377534e-7 : 0.343071602910508720e-5 + R * (-0.134978932264203498e-6) + pow(R - 0.250e2, 2) * 0.498480380823480630e-7 + pow(R - 0.250e2, 3) * (-0.489482146910147257e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.8581915712e2 * (R - 0.300e2) * (R - 0.250e2) + 0.9154036560e3 * R + 0.5378023986e5 - 0.4577018280e2 * R * R + 0.75000e3 * (0.1678245276e0 * R - 0.6941839878e1) * R) * pow(R, -6));
}

static double radcoeff_6_2_8_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.181130417400000110e1 + R * (-0.222044604925031308e-15) + pow(R - 0.475e1, 2) * (-0.140577138012822580e2) + pow(R - 0.475e1, 3) * 0.249945523571290309e2 : (R < 0.525e1 ? 0.130351286103971731e2 + R * (-0.234237833367943482e1) + pow(R - 0.50e1, 2) * 0.468820046656451783e1 + pow(R - 0.50e1, 3) * (-0.540401613058711039e1) : (R < 0.55e1 ? 0.625675554133186118e1 + R * (-0.101153112488225938e1) + pow(R - 0.525e1, 2) * 0.635188368624184929e0 + pow(R - 0.525e1, 3) * 0.405664869219410307e0 : (R < 0.575e1 ? 0.413768341785340166e1 + R * (-0.617874777591527535e0) + pow(R - 0.55e1, 2) * 0.939437020538742673e0 + pow(R - 0.55e1, 3) * (-0.847908088690530137e0) : (R < 0.60e1 ? 0.239641914182187588e1 + R * (-0.307139033951630558e0) + pow(R - 0.575e1, 2) * 0.303505954020845015e0 + pow(R - 0.575e1, 3) * (-0.603643029657290775e0) : (R < 0.625e1 ? 0.217453688791170041e1 + R * (-0.268569125001950126e0) + pow(R - 0.60e1, 2) * (-0.149226318222123067e0) + pow(R - 0.60e1, 3) * (-0.594192038803060055e-1) : (R < 0.65e1 ? 0.270024594195355627e1 + R * (-0.354323384840569022e0) + pow(R - 0.625e1, 2) * (-0.193790721132352572e0) + pow(R - 0.625e1, 3) * 0.271441317178514663e0 : (R < 0.675e1 ? 0.299137603083252968e1 + R * (-0.400323498435773806e0) + pow(R - 0.65e1, 2) * 0.979026675153343330e-2 + pow(R - 0.65e1, 3) * 0.190385787966247277e0 : (R < 0.70e1 ? 0.272096353726026585e1 + R * (-0.359731029816335701e0) + pow(R - 0.675e1, 2) * 0.152579607726218897e0 + pow(R - 0.675e1, 3) * 0.147758509564961758e-1 : (R < 0.725e1 ? 0.217730870399218279e1 + R * (-0.280670753898883241e0) + pow(R - 0.70e1, 2) * 0.163661495943591029e0 + pow(R - 0.70e1, 3) * (-0.407998541922321226e-1) : (R < 0.75e1 ? 0.164908942876395193e1 + R * (-0.206489978588131284e0) + pow(R - 0.725e1, 2) * 0.133061605299416935e0 + pow(R - 0.725e1, 3) * (-0.435056885875673288e-1) : (R < 0.775e1 ? 0.121892485741443757e1 + R * (-0.148116492548591661e0) + pow(R - 0.75e1, 2) * 0.100432338858741435e0 + pow(R - 0.75e1, 3) * (-0.370862874574993118e-1) : (R < 0.80e1 ? 0.889338103735641039e0 + R * (-0.104854002017502071e0) + pow(R - 0.775e1, 2) * 0.726176232656169512e-1 + pow(R - 0.775e1, 3) * (-0.283290399824345403e-1) : (R < 0.825e1 ? 0.645457130851200600e0 + R * (-0.738568853814000753e-1) + pow(R - 0.80e1, 2) * 0.513708432787910452e-1 + pow(R - 0.80e1, 3) * (-0.202807615727630015e-1) : (R < 0.85e1 ? 0.467817996189405338e0 + R * (-0.519741065368976157e-1) + pow(R - 0.825e1, 2) * 0.361602720992187932e-1 + pow(R - 0.825e1, 3) * (-0.146803860465133801e-1) : (R < 0.875e1 ? 0.339564341003580461e0 + R * (-0.366465428710094701e-1) + pow(R - 0.85e1, 2) * 0.251499825643337581e-1 + pow(R - 0.85e1, 3) * (-0.985727696118353369e-2) : (R < 0.90e1 ? 0.247123116256814435e0 + R * (-0.259197910190645080e-1) + pow(R - 0.875e1, 2) * 0.177570248434461078e-1 + pow(R - 0.875e1, 3) * (-0.715718450875230811e-2) : (R < 0.925e1 ? 0.180292236364592573e0 + R * (-0.183832506927325105e-1) + pow(R - 0.90e1, 2) * 0.123891364618818767e-1 + pow(R - 0.90e1, 3) * (-0.467545124380734645e-2) : (R < 0.95e1 ? 0.131802733082550416e0 + R * (-0.130653295700054496e-1) + pow(R - 0.925e1, 2) * 0.888254802902636691e-2 + pow(R - 0.925e1, 3) * (-0.378815054801828061e-2) : (R < 0.100e2 ? 0.968542425078340874e-1 + R * (-0.933433378324569421e-2) + pow(R - 0.95e1, 2) * 0.604143511801265645e-2 + pow(R - 0.95e1, 3) * (-0.208177688704253841e-2) : (R < 0.105e2 ? 0.533033546491494190e-1 + R * (-0.485423133051494145e-2) + pow(R - 0.100e2, 2) * 0.291876978744884863e-2 + pow(R - 0.100e2, 3) * (-0.965635996837932789e-3) : (R < 0.110e2 ? 0.308696433032926952e-1 + R * (-0.265968854069454242e-2) + pow(R - 0.105e2, 2) * 0.147031579219194944e-2 + pow(R - 0.105e2, 3) * (-0.497879717605728754e-3) : (R < 0.120e2 ? 0.191090212427757859e-1 + R * (-0.156278253670688962e-2) + pow(R - 0.110e2, 2) * 0.723496215783356257e-3 + pow(R - 0.110e2, 3) * (-0.171154106076466616e-3) : (R < 0.140e2 ? 0.845900199263492462e-2 + R * (-0.629252423369577093e-3) + pow(R - 0.120e2, 2) * 0.210033897553956356e-3 + pow(R - 0.120e2, 3) * (-0.288499275845839054e-4) : (R < 0.160e2 ? 0.215322773336261864e-2 + R * (-0.135315964168758479e-3) + pow(R - 0.140e2, 2) * 0.369343320464529171e-4 + pow(R - 0.140e2, 3) * (-0.586645139353683661e-5) : (R < 0.180e2 ? 0.101659486701622184e-2 + R * (-0.579760527053888697e-4) + pow(R - 0.160e2, 2) * 0.173562368523189348e-5 + pow(R - 0.160e2, 3) * 0.252323838623126874e-5 : (R < 0.200e2 ? 0.373738872083049091e-3 + R * (-0.207546973296860582e-4) + pow(R - 0.180e2, 2) * 0.168750540026195083e-4 + pow(R - 0.180e2, 3) * (-0.325891668148823794e-5) : (R < 0.250e2 ? -0.152696562010762218e-3 + R * 0.763851850293311118e-5 + pow(R - 0.200e2, 2) * (-0.267844608630992189e-5) + pow(R - 0.200e2, 3) * 0.229681837979859965e-6 : 0.480105909442152769e-4 + R * (-0.191980451167661095e-5) + pow(R - 0.250e2, 2) * 0.766781483387977586e-6 + pow(R - 0.250e2, 3) * (-0.766533843713310995e-7))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2361857533e2 * (R - 0.300e2) * (R - 0.250e2) + 0.2519335608e3 * R + 0.1480054498e5 - 0.1259667804e2 * R * R + 0.75000e3 * (0.461867686e-1 * R - 0.1910438371e1) * R) * pow(R, -6));
}

static double radcoeff_6_2_8_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.213000772600000232e1 + R * 0.444089209850062616e-15 + pow(R - 0.475e1, 2) * 0.201891254519307886e2 + pow(R - 0.475e1, 3) * (-0.365104035677231451e2) : (R < 0.525e1 ? -0.176829727260865184e2 + R * 0.324886205701730324e1 + pow(R - 0.50e1, 2) * (-0.719367722386157471e1) + pow(R - 0.50e1, 3) * 0.903013393516944873e1 : (R < 0.55e1 ? -0.799711708963663348e1 + R * 0.134517355793078730e1 + pow(R - 0.525e1, 2) * (-0.421076772484488493e0) + pow(R - 0.525e1, 3) * (-0.159159319055464188e1) : (R < 0.575e1 ? -0.524901142942751164e1 + R * 0.836211448459547646e0 + pow(R - 0.55e1, 2) * (-0.161477166540047001e1) + pow(R - 0.55e1, 3) * 0.153143434064911643e1 : (R < 0.60e1 ? -0.233461510742837675e1 + R * 0.315969554631022054e0 + pow(R - 0.575e1, 2) * (-0.466195909913632578e0) + pow(R - 0.575e1, 3) * 0.560553779958177123e0 : (R < 0.625e1 ? -0.158702897169818380e1 + R * 0.187975433416363968e0 + pow(R - 0.60e1, 2) * (-0.457805749449997010e-1) + pow(R - 0.60e1, 3) * 0.324370065918175132e0 : (R < 0.65e1 ? -0.182187884964701219e1 + R * 0.225904533303521948e0 + pow(R - 0.625e1, 2) * 0.197496974493631655e0 + pow(R - 0.625e1, 3) * (-0.164486574830877919e0) : (R < 0.675e1 ? -0.225350254550206319e1 + R * 0.293811787769548194e0 + pow(R - 0.65e1, 2) * 0.741320433704732162e-1 + pow(R - 0.65e1, 3) * (-0.196378486594663948e0) : (R < 0.70e1 ? -0.225359183092342574e1 + R * 0.294056843218285291e0 + pow(R - 0.675e1, 2) * (-0.731518215755247447e-1) + pow(R - 0.675e1, 3) * (-0.609636835904656463e-1) : (R < 0.725e1 ? -0.192307016710117429e1 + R * 0.246050241757310606e0 + pow(R - 0.70e1, 2) * (-0.118874584268373981e0) + pow(R - 0.70e1, 3) * 0.115669105565260142e-1 : (R < 0.75e1 ? -0.151512249670542376e1 + R * 0.188781745352472247e0 + pow(R - 0.725e1, 2) * (-0.110199401350979470e0) + pow(R - 0.725e1, 3) * 0.288983133643619383e-1 : (R < 0.775e1 ? -0.114894892124600290e1 + R * 0.139100478432800378e0 + pow(R - 0.75e1, 2) * (-0.885256663277080164e-1) + pow(R - 0.75e1, 3) * 0.296393502260261128e-1 : (R < 0.80e1 ? -0.854051384321528606e0 + R * 0.100395023436326281e0 + pow(R - 0.775e1, 2) * (-0.662961536581884309e-1) + pow(R - 0.775e1, 3) * 0.242671958115333875e-1 : (R < 0.825e1 ? -0.629031898075156470e0 + R * 0.717970458218945562e-1 + pow(R - 0.80e1, 2) * (-0.480957567995383903e-1) + pow(R - 0.80e1, 3) * 0.183436066878406648e-1 : (R < 0.85e1 ? -0.461731533817787809e0 + R * 0.511885936760954965e-1 + pow(R - 0.825e1, 2) * (-0.343380517836578900e-1) + pow(R - 0.825e1, 3) * 0.133363172771035991e-1 : (R < 0.875e1 ? -0.338987317676649524e0 + R * 0.365201272737234739e-1 + pow(R - 0.85e1, 2) * (-0.243358138258301902e-1) + pow(R - 0.85e1, 3) * 0.929420644374520134e-2 : (R < 0.90e1 ? -0.249142206023842738e0 + R * 0.260948840690105981e-1 + pow(R - 0.875e1, 2) * (-0.173651589930212888e-1) + pow(R - 0.875e1, 3) * 0.696473726791559111e-2 : (R < 0.925e1 ? -0.183728483112107183e0 + R * 0.187181928102341313e-1 + pow(R - 0.90e1, 2) * (-0.121416060420845955e-1) + pow(R - 0.90e1, 3) * 0.451677664459225643e-2 : (R < 0.95e1 ? -0.136095615402989145e0 + R * 0.134942854100528805e-1 + pow(R - 0.925e1, 2) * (-0.875402355864040270e-2) + pow(R - 0.925e1, 3) * 0.358296965771552492e-2 : (R < 0.100e2 ? -0.101387310773766226e0 + R * 0.978908044155434032e-2 + pow(R - 0.95e1, 2) * (-0.606679631535375890e-2) + pow(R - 0.95e1, 3) * 0.198327432849015363e-2 : (R < 0.105e2 ? -0.568626948716819680e-1 + R * 0.520973987256819707e-2 + pow(R - 0.100e2, 2) * (-0.309188482261852802e-2) + pow(R - 0.100e2, 3) * 0.100523580296426641e-2 : (R < 0.110e2 ? -0.329614529128151312e-1 + R * 0.287178190217286930e-2 + pow(R - 0.105e2, 2) * (-0.158403111817212840e-2) + pow(R - 0.105e2, 3) * 0.497181003652779870e-3 : (R < 0.120e2 ? -0.199727140471435798e-1 + R * 0.166063653674032542e-2 + pow(R - 0.110e2, 2) * (-0.838259612692958487e-3) + pow(R - 0.110e2, 3) * 0.203350142952633085e-3 : (R < 0.140e2 ? -0.780999795834769282e-2 + R * 0.594167740212307727e-3 + pow(R - 0.120e2, 2) * (-0.228209183835059178e-3) + pow(R - 0.120e2, 3) * 0.338387748769526252e-4 : (R < 0.160e2 ? -0.135732437923703720e-2 + R * 0.873963033955026515e-4 + pow(R - 0.140e2, 2) * (-0.251765345733434136e-4) + pow(R - 0.140e2, 3) * 0.332981198779604267e-5 : (R < 0.180e2 ? -0.459417710620904185e-3 + R * 0.266479089556815124e-4 + pow(R - 0.160e2, 2) * (-0.519766264656715594e-5) + pow(R - 0.160e2, 3) * 0.313306231131999911e-7 : (R < 0.200e2 ? -0.112493420266283141e-3 + R * 0.623322584677128601e-5 + pow(R - 0.180e2, 2) * (-0.500967890788795598e-5) + pow(R - 0.180e2, 3) * 0.965794338801156089e-6 : (R < 0.250e2 ? 0.441778901313332330e-4 + R * (-0.221595771916666144e-5) + pow(R - 0.200e2, 2) * 0.785087124918981614e-6 + pow(R - 0.200e2, 3) * (-0.674860000595298457e-7) : -0.143662128712603843e-4 + R * 0.573463525558415394e-6 + pow(R - 0.250e2, 2) * (-0.227202875973966178e-6) + pow(R - 0.250e2, 3) * 0.226728905428566184e-7)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4520456064e2 * (R - 0.300e2) * (R - 0.250e2) - 0.4821830260e3 * R - 0.2832774622e5 + 0.2410915130e2 * R * R + 0.75000e3 * (-0.883992566e-1 * R + 0.3656501547e1) * R) * pow(R, -6));
}

static double radcoeff_6_4_2_1_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.118900928599999997e0 + pow(R - 0.475e1, 2) * (-0.591112572925311164e0) + pow(R - 0.475e1, 3) * 0.279858543221244593e0 : (R < 0.525e1 ? 0.130174323057336117e1 + R * (-0.243082809608672207e0) + pow(R - 0.50e1, 2) * (-0.381218665509377719e0) + pow(R - 0.50e1, 3) * 0.947358985376265950e0 : (R < 0.55e1 ? 0.136086204385788379e1 + R * (-0.256062332605311194e0) + pow(R - 0.525e1, 2) * 0.329300573522821827e0 + pow(R - 0.525e1, 3) * (-0.195608191606308296e0) : (R < 0.575e1 ? 0.674531322115456855e0 + R * (-0.128088581770083060e0) + pow(R - 0.55e1, 2) * 0.182594429818090598e0 + pow(R - 0.55e1, 3) * 0.847462898489667327e-1 : (R < 0.60e1 ? 0.709415552875498900e-1 + R * (-0.209014375143565037e-1) + pow(R - 0.575e1, 2) * 0.246154147204815654e0 + pow(R - 0.575e1, 3) * (-0.187911653869558548e0) : (R < 0.625e1 ? -0.443671761115054575e0 + R * 0.669422009875090956e-1 + pow(R - 0.60e1, 2) * 0.105220406802646743e0 + pow(R - 0.60e1, 3) * (-0.242513599490732507e0) : (R < 0.65e1 ? -0.485502907537000761e0 + R * 0.740811044843201205e-1 + pow(R - 0.625e1, 2) * (-0.766647928154026298e-1) + pow(R - 0.625e1, 3) * 0.593468927248843193e-2 : (R < 0.675e1 ? -0.248274053468867550e0 + R * 0.368614623152103901e-1 + pow(R - 0.65e1, 2) * (-0.722137758610363056e-1) + pow(R - 0.65e1, 3) * 0.624170457287789651e-1 : (R < 0.70e1 ? -0.870872280901584944e-1 + R * 0.124577704588382972e-1 + pow(R - 0.675e1, 2) * (-0.254009915644520766e-1) + pow(R - 0.675e1, 3) * 0.240459605163955460e-1 : (R < 0.725e1 ? -0.309559246320549736e-1 + R * 0.426589227343642484e-2 + pow(R - 0.70e1, 2) * (-0.736652117715541708e-2) + pow(R - 0.70e1, 3) * 0.558409679443888120e-2 : (R < 0.75e1 ? -0.122163230059660483e-1 + R * 0.162964983381600663e-2 + pow(R - 0.725e1, 2) * (-0.317844858132625618e-2) + pow(R - 0.725e1, 3) * 0.271511908984892105e-2 : (R < 0.775e1 ? -0.427150634664663371e-2 + R * 0.549510372499551186e-3 + pow(R - 0.75e1, 2) * (-0.114210926393956518e-2) + pow(R - 0.75e1, 3) * 0.896568480085441926e-3 : (R < 0.80e1 ? -0.120603196799986493e-2 + R * 0.146562330545789020e-3 + pow(R - 0.775e1, 2) * (-0.469682903875483649e-3) + pow(R - 0.775e1, 3) * 0.810954664049310563e-3 : (R < 0.825e1 ? -0.560416363438343327e-3 + R * 0.637748781172929125e-4 + pow(R - 0.80e1, 2) * 0.138533094161499300e-3 + pow(R - 0.80e1, 3) * (-0.200594679322683674e-3) : (R < 0.85e1 ? -0.816046455756574691e-3 + R * 0.954299228250393635e-4 + pow(R - 0.825e1, 2) * (-0.119129153305134792e-4) + pow(R - 0.825e1, 3) * 0.813045722814239701e-4 : (R < 0.875e1 ? -0.894469900944671790e-3 + R * 0.104718072462549628e-3 + pow(R - 0.85e1, 2) * 0.490655138805545085e-4 + pow(R - 0.85e1, 3) * (-0.117125888203012225e-3) : (R < 0.90e1 ? -0.915735361221668232e-3 + R * 0.107289725364762093e-3 + pow(R - 0.875e1, 2) * (-0.387789022717046570e-4) + pow(R - 0.875e1, 3) * (-0.137279176269374935e-3) : (R < 0.925e1 ? -0.514140359565617576e-3 + R * 0.621604286784019540e-4 + pow(R - 0.90e1, 2) * (-0.141738284473735858e-3) + pow(R - 0.90e1, 3) * 0.951072243205120448e-4 : (R < 0.95e1 ? -0.309249784550778286e-4 + R * 0.912389100163003483e-5 + pow(R - 0.925e1, 2) * (-0.704078662333518181e-4) + pow(R - 0.925e1, 3) * 0.136568159473266953e-4 : (R < 0.100e2 ? 0.274999078856760098e-3 + R * (-0.235193891249221169e-4) + pow(R - 0.95e1, 2) * (-0.601652542728567957e-4) + pow(R - 0.95e1, 3) * 0.523867791254020493e-4 : (R < 0.105e2 ? 0.475257811967273779e-3 + R * (-0.443945590537273791e-4) + pow(R - 0.100e2, 2) * 0.184149144152462748e-4 + pow(R - 0.100e2, 3) * 0.196986178441694969e-5 : (R < 0.110e2 ? 0.271238510381768079e-3 + R * (-0.245022483001683902e-4) + pow(R - 0.105e2, 2) * 0.213697070918716995e-4 + pow(R - 0.105e2, 3) * (-0.105825754150698417e-4) : (R < 0.120e2 ? 0.127497584391589823e-3 + R * (-0.110694727695990737e-4) + pow(R - 0.110e2, 2) * 0.549584396926693619e-5 + pow(R - 0.110e2, 3) * (-0.136103135566786250e-5) : (R < 0.140e2 ? 0.487292705468254556e-4 + R * (-0.416087889806878813e-5) + pow(R - 0.120e2, 2) * 0.141274990226334869e-5 + pow(R - 0.120e2, 3) * 0.151942261355227962e-7 : (R < 0.160e2 ? -0.271648005525523085e-4 + R * 0.167245142461087916e-5 + pow(R - 0.140e2, 2) * 0.150391525907648548e-5 + pow(R - 0.140e2, 3) * (-0.548192739690962491e-6) : (R < 0.180e2 ? -0.165322519940043345e-4 + R * 0.110979958462527096e-5 + pow(R - 0.160e2, 2) * (-0.178524117906928968e-5) + pow(R - 0.160e2, 3) * 0.428600276753327130e-6 : (R < 0.200e2 ? 0.157152906176153248e-4 + R * (-0.887961810611962424e-6) + pow(R - 0.180e2, 2) * 0.786360481450672991e-6 + pow(R - 0.180e2, 3) * (-0.153711350434845901e-6) : (R < 0.250e2 ? -0.838707267175157254e-5 + R * 0.412943909972578618e-6 + pow(R - 0.200e2, 2) * (-0.135907621158402523e-6) + pow(R - 0.200e2, 3) * 0.114742484455773611e-7 : 0.211220730912861647e-5 + R * (-0.855636681931446591e-7) + pow(R - 0.250e2, 2) * 0.362061055252578597e-7 + pow(R - 0.250e2, 3) * (-0.366362277492578604e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4102223114e2 * (R - 0.300e2) * (R - 0.250e2) - 0.4375703888e3 * R - 0.2570732100e5 + 0.2187851944e2 * R * R + 0.75000e3 * (-0.802213536e-1 * R + 0.3318248474e1) * R) * pow(R, -6));
}

static double radcoeff_6_4_2_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.252574245900000105e0 + R * 0.277555756156289135e-16 + pow(R - 0.475e1, 2) * 0.117785597125459884e1 + pow(R - 0.475e1, 3) * (-0.924908717018395721e0) : (R < 0.525e1 ? -0.227094795233175129e1 + R * 0.415507601186350273e0 + pow(R - 0.50e1, 2) * 0.484174433490802081e0 + pow(R - 0.50e1, 3) * (-0.122255158974481271e1) : (R < 0.55e1 ? -0.232729808561664431e1 + R * 0.428366394854598931e0 + pow(R - 0.525e1, 2) * (-0.432739258817807448e0) + pow(R - 0.525e1, 3) * 0.170568231197647663e0 : (R < 0.575e1 ? -0.133754468735189747e1 + R * 0.243978308795254117e0 + pow(R - 0.55e1, 2) * (-0.304813085419571694e0) + pow(R - 0.55e1, 3) * (-0.774952044857792899e-1) : (R < 0.60e1 ? -0.397919229845211664e0 + R * 0.770414152443846395e-1 + pow(R - 0.575e1, 2) * (-0.362934488783906162e0) + pow(R - 0.575e1, 3) * 0.258347877625470179e0 : (R < 0.625e1 ? 0.381596154216756578e0 + R * (-0.559856020927927620e-1) + pow(R - 0.60e1, 2) * (-0.169173580564803500e0) + pow(R - 0.60e1, 3) * 0.320011508383898136e0 : (R < 0.65e1 ? 0.529676938127584984e0 + R * (-0.805702345532136044e-1) + pow(R - 0.625e1, 2) * 0.708350507231201021e-1 + pow(R - 0.625e1, 3) * 0.124671160389374092e-1 : (R < 0.675e1 ? 0.288890714963293216e0 + R * (-0.428151249343527995e-1) + pow(R - 0.65e1, 2) * 0.801853877523231590e-1 + pow(R - 0.65e1, 3) * (-0.664886563796479035e-1) : (R < 0.70e1 ? 0.106387438508282570e0 + R * (-0.151890541293751950e-1) + pow(R - 0.675e1, 2) * 0.303188954675872348e-1 + pow(R - 0.675e1, 3) * (-0.282210410483458053e-1) : (R < 0.725e1 ? 0.387653979480249225e-1 + R * (-0.532105159214641722e-2) + pow(R - 0.70e1, 2) * 0.915311468132787992e-2 + pow(R - 0.70e1, 3) * (-0.732352562216884162e-2) : (R < 0.75e1 ? 0.159984144505837290e-1 + R * (-0.211765530563913507e-2) + pow(R - 0.725e1, 2) * 0.366047046470124914e-2 + pow(R - 0.725e1, 3) * (-0.294877007577883663e-2) : (R < 0.775e1 ? 0.660106299862781888e-2 + R * (-0.840314462497042500e-3) + pow(R - 0.75e1, 2) * 0.144889290786712134e-2 + pow(R - 0.75e1, 3) * (-0.119156963311580497e-2) : (R < 0.80e1 ? 0.279004013498838866e-2 + R * (-0.339287314772695288e-3) + pow(R - 0.775e1, 2) * 0.555215683030267507e-3 + pow(R - 0.775e1, 3) * (-0.565276230157944976e-3) : (R < 0.825e1 ? 0.144296028719741024e-2 + R * (-0.167668766412176285e-3) + pow(R - 0.80e1, 2) * 0.131258510411808748e-3 + pow(R - 0.80e1, 3) * 0.296702612675853071e-4 : (R < 0.85e1 ? 0.864290001083447223e-3 + R * (-0.964763372185996587e-4) + pow(R - 0.825e1, 2) * 0.153511206362497729e-3 + pow(R - 0.825e1, 3) * (-0.376863889472396304e-3) : (R < 0.875e1 ? 0.816200150014113435e-3 + R * (-0.903827133134251079e-4) + pow(R - 0.85e1, 2) * (-0.129136710741799553e-3) + pow(R - 0.85e1, 3) * 0.356727848302000085e-3 : (R < 0.90e1 ? 0.793419461597373783e-3 + R * (-0.880645971276998685e-4) + pow(R - 0.875e1, 2) * 0.138409175484700511e-3 + pow(R - 0.875e1, 3) * (-0.159774534775604176e-3) : (R < 0.925e1 ? 0.446351795711978671e-3 + R * (-0.488177346557754131e-4) + pow(R - 0.90e1, 2) * 0.185782744029973616e-4 + pow(R - 0.90e1, 3) * (-0.202789159958284148e-5) : (R < 0.95e1 ? 0.365073857433086222e-3 + R * (-0.399088271291985118e-4) + pow(R - 0.925e1, 2) * 0.170573557033102304e-4 + pow(R - 0.925e1, 3) * 0.528692801819353087e-4 : (R < 0.100e2 ? 0.191770179752589998e-3 + R * (-0.214671592434305245e-4) + pow(R - 0.95e1, 2) * 0.567093158397617085e-4 + pow(R - 0.95e1, 3) * (-0.341948758258013127e-4) : (R < 0.105e2 ? -0.108958440469801958e-3 + R * 0.959599972698019602e-5 + pow(R - 0.100e2, 2) * 0.541700210105973348e-5 + pow(R - 0.100e2, 3) * (-0.840192995004025226e-5) : (R < 0.110e2 ? -0.993677548928522747e-4 + R * 0.871155436550974030e-5 + pow(R - 0.105e2, 2) * (-0.718589282400064661e-5) + pow(R - 0.105e2, 3) * 0.494930211396233163e-5 : (R < 0.120e2 ? -0.623324867107892647e-4 + R * 0.523763812698084220e-5 + pow(R - 0.110e2, 2) * 0.238060346942851260e-6 + pow(R - 0.110e2, 3) * (-0.823352359923693563e-6) : (R < 0.140e2 ? -0.389905420927455545e-4 + R * 0.324370174109546297e-5 + pow(R - 0.120e2, 2) * (-0.223199673282822964e-5) + pow(R - 0.120e2, 3) * 0.393772914102748902e-6 : (R < 0.160e2 ? 0.140696217578825473e-4 + R * (-0.959010220984467709e-6) + pow(R - 0.140e2, 2) * 0.130640751788263930e-6 + pow(R - 0.140e2, 3) * 0.428740608519849896e-7 : (R < 0.180e2 ? -0.165765054607852609e-5 + R * 0.780415163924078878e-7 + pow(R - 0.160e2, 2) * 0.387885116900173868e-6 + pow(R - 0.160e2, 3) * (-0.114434694623188881e-6) : (R < 0.200e2 ? -0.423142201366705874e-5 + R * 0.256365648514836632e-6 + pow(R - 0.180e2, 2) * (-0.298723050838959470e-6) + pow(R - 0.180e2, 3) * 0.602824253282705733e-7 : (R < 0.250e2 ? 0.448600717393508498e-5 + R * (-0.215137450901754261e-6) + pow(R - 0.200e2, 2) * 0.629715011306639967e-7 + pow(R - 0.200e2, 3) * (-0.514741888366262792e-8) : -0.674597534054714537e-6 + R * 0.285211441301885808e-7 + pow(R - 0.250e2, 2) * (-0.142397821242754320e-7) + pow(R - 0.250e2, 3) * 0.148546490604754317e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.5864260989e2 * (R - 0.300e2) * (R - 0.250e2) + 0.6255220416e3 * R + 0.3674856118e5 - 0.3127610208e2 * R * R + 0.75000e3 * (0.1146774052e0 * R - 0.4743452185e1) * R) * pow(R, -6));
}

static double radcoeff_6_4_3_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.574376891000000639e-1 + R * 0.138777878078144568e-16 + pow(R - 0.475e1, 2) * 0.434021746180858203e0 + pow(R - 0.475e1, 3) * (-0.688858246163432719e0) : (R < 0.525e1 ? -0.480324499733927268e0 + R * 0.878499519347854529e-1 + pow(R - 0.50e1, 2) * (-0.826219384417163777e-1) + pow(R - 0.50e1, 3) * 0.533357394502982154e-1 : (R < 0.55e1 ? -0.320274780069505438e0 + R * 0.565394338608581834e-1 + pow(R - 0.525e1, 2) * (-0.426201338539927144e-1) + pow(R - 0.525e1, 3) * (-0.870981977601307524e-4) : (R < 0.575e1 ? -0.205644711229799881e0 + R * 0.352130360217818017e-1 + pow(R - 0.55e1, 2) * (-0.426854575023128124e-1) + pow(R - 0.55e1, 3) * 0.189071909407424535e-1 : (R < 0.60e1 ? -0.105680752379083975e0 + R * 0.174154055720146042e-1 + pow(R - 0.575e1, 2) * (-0.285050642967559706e-1) + pow(R - 0.575e1, 3) * 0.229873603547902094e-1 : (R < 0.625e1 ? -0.474487289009587060e-1 + R * 0.747300349015978405e-2 + pow(R - 0.60e1, 2) * (-0.112645440306633152e-1) + pow(R - 0.60e1, 3) * 0.108900151920967112e-1 : (R < 0.65e1 ? -0.255426428729141168e-1 + R * 0.388260932334625903e-2 + pow(R - 0.625e1, 2) * (-0.309703263659078225e-2) + pow(R - 0.625e1, 3) * (-0.556799273577017668e-3) : (R < 0.675e1 ? -0.150009522177586528e-1 + R * 0.222969314125517730e-2 + pow(R - 0.65e1, 2) * (-0.351463209177354553e-2) + pow(R - 0.65e1, 3) * 0.232185144461134491e-2 : (R < 0.70e1 ? -0.626104771952296427e-2 + R * 0.907724241233031867e-3 + pow(R - 0.675e1, 2) * (-0.177324350831503663e-2) + pow(R - 0.675e1, 3) * 0.140848372233163708e-2 : (R < 0.725e1 ? -0.199215048706686800e-2 + R * 0.285193185012695477e-3 + pow(R - 0.70e1, 2) * (-0.716880716566308711e-3) + pow(R - 0.70e1, 3) * 0.596239091982106646e-3 : (R < 0.75e1 ? -0.239459214152349742e-3 + R * 0.385476564761861714e-4 + pow(R - 0.725e1, 2) * (-0.269701397579728700e-3) + pow(R - 0.725e1, 3) * 0.192510632299935973e-3 : (R < 0.775e1 ? 0.487354591380801327e-3 + R * (-0.602072987574401751e-4) + pow(R - 0.75e1, 2) * (-0.125318423354776713e-3) + pow(R - 0.75e1, 3) * 0.279780343618149649e-3 : (R < 0.80e1 ? 0.562946836469797440e-3 + R * (-0.704076960064254725e-4) + pow(R - 0.775e1, 2) * 0.845168343588355232e-4 + pow(R - 0.775e1, 3) * 0.421203081074655018e-4 : (R < 0.825e1 ? 0.167639468834863454e-3 + R * (-0.202517210568579323e-4) + pow(R - 0.80e1, 2) * 0.116107065439434651e-3 + pow(R - 0.80e1, 3) * (-0.883180229600116762e-4) : (R < 0.85e1 ? -0.168808511855321936e-3 + R * 0.212421823578572058e-4 + pow(R - 0.825e1, 2) * 0.498685482194258874e-4 + pow(R - 0.825e1, 3) * (-0.402273433714188427e-4) : (R < 0.875e1 ? -0.314149281266147475e-3 + R * 0.386338295854291139e-4 + pow(R - 0.85e1, 2) * 0.196980406908617554e-4 + pow(R - 0.85e1, 3) * (-0.952216473303128358e-4) : (R < 0.90e1 ? -0.244361904833730363e-3 + R * 0.306287910564263289e-4 + pow(R - 0.875e1, 2) * (-0.517181948068728715e-4) + pow(R - 0.875e1, 3) * 0.600759168846701742e-4 : (R < 0.925e1 ? -0.115301838919790013e-3 + R * 0.160339280688655564e-4 + pow(R - 0.90e1, 2) * (-0.666125714337023740e-5) + pow(R - 0.90e1, 3) * (-0.878879728483679520e-4) : (R < 0.95e1 ? 0.661476001299691183e-4 + R * (-0.377569541188855418e-5) + pow(R - 0.925e1, 2) * (-0.725772367796462031e-4) + pow(R - 0.925e1, 3) * 0.969197313088016678e-4 : (R < 0.100e2 ? 0.235229496942457718e-3 + R * (-0.218918641813113405e-4) + pow(R - 0.95e1, 2) * 0.112561701955045556e-6 + pow(R - 0.95e1, 3) * 0.131128100133527476e-5 : (R < 0.105e2 ? 0.224461322963548365e-3 + R * (-0.207958417283548363e-4) + pow(R - 0.100e2, 2) * 0.207948320395795774e-5 + pow(R - 0.100e2, 3) * 0.123885897455034330e-4 : (R < 0.110e2 ? 0.107135049595327706e-3 + R * (-0.942491621526930589e-5) + pow(R - 0.105e2, 2) * 0.206623678222131068e-4 + pow(R - 0.105e2, 3) * (-0.186597726073489834e-4) : (R < 0.120e2 ? 0.366252479412473427e-4 + R * (-0.275737784856794000e-5) + pow(R - 0.110e2, 2) * (-0.732729108881037081e-5) + pow(R - 0.110e2, 3) * 0.413989707737830973e-5 : (R < 0.140e2 ? 0.602565452760450064e-4 + R * (-0.499226879405375073e-5) + pow(R - 0.120e2, 2) * 0.509240014332456008e-5 + pow(R - 0.120e2, 3) * (-0.109942134064884240e-5) : (R < 0.160e2 ? -0.286408476734173466e-4 + R * 0.218427569145838205e-5 + pow(R - 0.140e2, 2) * (-0.150412790056849391e-5) + pow(R - 0.140e2, 3) * 0.215181690419651397e-6 : (R < 0.180e2 ? 0.220133953234764222e-4 + R * (-0.125005562577977638e-5) + pow(R - 0.160e2, 2) * (-0.213037758050585470e-6) + pow(R - 0.160e2, 3) * 0.126890716720236876e-6 : (R < 0.200e2 ? 0.101066937935069619e-4 + R * (-0.579518057339275642e-6) + pow(R - 0.180e2, 2) * 0.548306542270835735e-6 + pow(R - 0.180e2, 3) * (-0.108103951463098939e-6) : (R < 0.250e2 ? -0.648448667963759726e-5 + R * 0.316460694186879866e-6 + pow(R - 0.200e2, 2) * (-0.100317166507757954e-6) + pow(R - 0.200e2, 3) * 0.838667962447639645e-8 : 0.141018644177424985e-5 + R * (-0.577099990549699914e-7) + pow(R - 0.250e2, 2) * 0.254830278593879908e-7 + pow(R - 0.250e2, 3) * (-0.260040066007879875e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4968729469e2 * (R - 0.300e2) * (R - 0.250e2) - 0.5299963992e3 * R - 0.3113776342e5 + 0.2649981996e2 * R * R + 0.75000e3 * (-0.971669112e-1 * R + 0.4019189119e1) * R) * pow(R, -6));
}

static double radcoeff_6_4_4_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.148208351500000002e0 + pow(R - 0.475e1, 2) * 0.150354421476096167e1 + pow(R - 0.475e1, 3) * (-0.200722277584384656e1) : (R < 0.525e1 ? -0.196268887849879814e1 + R * 0.375417836909759606e0 + pow(R - 0.50e1, 2) * (-0.187286712192321790e-2) + pow(R - 0.50e1, 3) * (-0.489257048468461131e0) : (R < 0.55e1 ? -0.148392189079334802e1 + R * 0.282745706760961557e0 + pow(R - 0.525e1, 2) * (-0.368815653473269056e0) + pow(R - 0.525e1, 3) * 0.126455518837691683e0 : (R < 0.575e1 ? -0.621161208405168197e0 + R * 0.122048289806394206e0 + pow(R - 0.55e1, 2) * (-0.273974014345000294e0) + pow(R - 0.55e1, 3) * 0.295914025576936197e-1 : (R < 0.60e1 ? 0.117949841722595691e0 + R * (-0.939032938653838051e-2) + pow(R - 0.575e1, 2) * (-0.251780462426730078e0) + pow(R - 0.575e1, 3) * 0.233711555731534348e0 : (R < 0.625e1 ? 0.598281192961444330e0 + R * (-0.914596439002407224e-1) + pow(R - 0.60e1, 2) * (-0.764967956280793032e-1) + pow(R - 0.60e1, 3) * 0.232468118516168692e0 : (R < 0.65e1 ? 0.563761367538117120e0 + R * (-0.861202694924987355e-1) + pow(R - 0.625e1, 2) * 0.978542932590472231e-1 + pow(R - 0.625e1, 3) * (-0.227979811562090476e-1) : (R < 0.675e1 ? 0.279279628855468198e0 + R * (-0.414677443297643347e-1) + pow(R - 0.65e1, 2) * 0.807558073918904357e-1 + pow(R - 0.65e1, 3) * (-0.697177133793323717e-1) : (R < 0.70e1 ? 0.989231585939965297e-1 + R * (-0.141619118924439305e-1) + pow(R - 0.675e1, 2) * 0.284675223573911569e-1 + pow(R - 0.675e1, 3) * (-0.264289132944617207e-1) : (R < 0.725e1 ? 0.353410474192194790e-1 + R * (-0.488357195645992576e-2) + pow(R - 0.70e1, 2) * 0.864583738654486379e-2 + pow(R - 0.70e1, 3) * (-0.674825411482063604e-2) : (R < 0.75e1 ? 0.136082181964436374e-1 + R * (-0.182595090971636388e-2) + pow(R - 0.725e1, 2) * 0.358464680042938633e-2 + pow(R - 0.725e1, 3) * (-0.302811201905572175e-2) : (R < 0.775e1 ? 0.460080139634963699e-2 + R * (-0.601398513074618331e-3) + pow(R - 0.75e1, 2) * 0.131356278613759523e-2 + pow(R - 0.75e1, 3) * (-0.124965223583648746e-2) : (R < 0.80e1 ? 0.138921836321900674e-2 + R * (-0.178926914225162141e-3) + pow(R - 0.775e1, 2) * 0.376323609260229583e-3 + pow(R - 0.775e1, 3) * (-0.420032711198323736e-3) : (R < 0.825e1 ? 0.530930207437864616e-3 + R * (-0.695212429447330708e-4) + pow(R - 0.80e1, 2) * 0.612990758614867672e-4 + pow(R - 0.80e1, 3) * (-0.151001521610218017e-3) : (R < 0.85e1 ? 0.513123791716220889e-3 + R * (-0.671844903159055654e-4) + pow(R - 0.825e1, 2) * (-0.519520653461767525e-4) + pow(R - 0.825e1, 3) * 0.123614866119196003e-3 : (R < 0.875e1 ? 0.535593354758979903e-3 + R * (-0.699827355916446929e-4) + pow(R - 0.85e1, 2) * 0.407590842432202629e-4 + pow(R - 0.85e1, 3) * 0.299169819334339600e-4 : (R < 0.90e1 ? 0.311204708318262263e-3 + R * (-0.439937593575156867e-4) + pow(R - 0.875e1, 2) * 0.631968206932957346e-4 + pow(R - 0.875e1, 3) * 0.142644791070680355e-4 : (R < 0.925e1 ? 0.692039048463306697e-5 + R * (-0.972075917829256275e-5) + pow(R - 0.90e1, 2) * 0.738951800235967612e-4 + pow(R - 0.90e1, 3) * (-0.387285879617060142e-4) : (R < 0.95e1 ? -0.263661607813844877e-3 + R * 0.199652205906859351e-4 + pow(R - 0.925e1, 2) * 0.448487390523172506e-4 + pow(R - 0.925e1, 3) * 0.135098569975607153e-5 : (R < 0.100e2 ? -0.476275406247713871e-3 + R * 0.426428999355488273e-4 + pow(R - 0.95e1, 2) * 0.458619783271343044e-4 + pow(R - 0.95e1, 3) * (-0.357914239964639253e-4) : (R < 0.105e2 ? -0.659467942963351886e-3 + R * 0.616613102653351843e-4 + pow(R - 0.100e2, 2) * (-0.782515766756158530e-5) + pow(R - 0.100e2, 3) * (-0.334033602062175673e-4) : (R < 0.110e2 ? -0.320384035272659469e-3 + R * 0.287836324431104269e-4 + pow(R - 0.105e2, 2) * (-0.579301979768879379e-4) + pow(R - 0.105e2, 3) * 0.479652713813341587e-4 : (R < 0.120e2 ? -0.873522369944542668e-4 + R * 0.682738800222311562e-5 + pow(R - 0.110e2, 2) * 0.140177090951133103e-4 + pow(R - 0.110e2, 3) * (-0.803055566733642628e-5) : (R < 0.140e2 ? -0.128690097826685517e-3 + R * 0.107711391904404598e-4 + pow(R - 0.120e2, 2) * (-0.100739579068959669e-4) + pow(R - 0.120e2, 3) * 0.216881505071286807e-5 : (R < 0.160e2 ? 0.481453052174458276e-4 + R * (-0.349891182858898753e-5) + pow(R - 0.140e2, 2) * 0.293893239738124236e-5 + pow(R - 0.140e2, 3) * (-0.612406083705874160e-6) : (R < 0.180e2 ? -0.155079192235478509e-4 + R * 0.907944756465490619e-6 + pow(R - 0.160e2, 2) * (-0.735504104854003022e-6) + pow(R - 0.160e2, 3) * 0.163530300048128848e-6 : (R < 0.200e2 ? 0.492057496513555331e-6 + R * (-0.717080623729752973e-7) + pow(R - 0.180e2, 2) * 0.245677695434770011e-6 + pow(R - 0.180e2, 3) * (-0.528268245241411793e-7) : (R < 0.250e2 ? -0.592362406692821108e-5 + R * 0.277080825076410596e-6 + pow(R - 0.200e2, 2) * (-0.712832517100770381e-7) + pow(R - 0.200e2, 3) * 0.558857809975898435e-8 : 0.335095893260899496e-6 + R * (-0.166083345424359814e-7) + pow(R - 0.250e2, 2) * 0.125454197863077263e-7 + pow(R - 0.250e2, 3) * (-0.138271404756410605e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1222424209e3 * (R - 0.300e2) * (R - 0.250e2) - 0.1303918536e4 * R - 0.7660497072e5 + 0.6519592680e2 * R * R + 0.75000e3 * (-0.2390512683e0 * R + 0.988802342e1) * R) * pow(R, -6));
}

static double radcoeff_6_4_4_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.257047607999999983e0 + pow(R - 0.475e1, 2) * (-0.178535150739753790e1) + pow(R - 0.475e1, 3) * 0.222742052559015091e1 : (R < 0.525e1 ? 0.255543861025307795e1 + R * (-0.475034405150615624e0) + pow(R - 0.50e1, 2) * (-0.114786113204924600e0) + pow(R - 0.50e1, 3) * 0.634553642429547815e0 : (R < 0.55e1 ? 0.223485418427707305e1 + R * (-0.413448653797537702e0) + pow(R - 0.525e1, 2) * 0.361129118617236289e0 + pow(R - 0.525e1, 3) * 0.548342629165876616e-2 : (R < 0.575e1 ? 0.125875057316578465e1 + R * (-0.231855952059233539e0) + pow(R - 0.55e1, 2) * 0.365241688335980363e0 + pow(R - 0.55e1, 3) * (-0.359374090361846560e-1) : (R < 0.60e1 ? 0.269691821821786026e0 + R * (-0.559733720855280018e-1) + pow(R - 0.575e1, 2) * 0.338288631558841868e0 + pow(R - 0.575e1, 3) * (-0.255208775746919359e0) : (R < 0.625e1 ? -0.440908797788073237e0 + R * 0.653192982413455386e-1 + pow(R - 0.60e1, 2) * 0.146882049748652321e0 + pow(R - 0.60e1, 3) * (-0.291482235496137942e0) : (R < 0.65e1 ? -0.553708740350911444e0 + R * 0.841074039601458351e-1 + pow(R - 0.625e1, 2) * (-0.717296268734511355e-1) + pow(R - 0.625e1, 3) * (-0.127190816285288420e-1) : (R < 0.675e1 ? -0.309767909607462200e0 + R * 0.458577627180711059e-1 + pow(R - 0.65e1, 2) * (-0.812689380948477674e-1) + pow(R - 0.65e1, 3) * 0.642587961862533252e-1 : (R < 0.70e1 ? -0.120888047401095627e0 + R * 0.172718179555697224e-1 + pow(R - 0.675e1, 2) * (-0.330748409551577735e-1) + pow(R - 0.675e1, 3) * 0.294308219395155446e-1 : (R < 0.725e1 ? -0.453613788205500038e-1 + R * 0.625267659165000024e-2 + pow(R - 0.70e1, 2) * (-0.110017245005211168e-1) + pow(R - 0.70e1, 3) * 0.873878447168445135e-2 : (R < 0.75e1 ? -0.179104769208695142e-1 + R * 0.239033642983027756e-2 + pow(R - 0.725e1, 2) * (-0.444763614675777828e-2) + pow(R - 0.725e1, 3) * 0.379187941854667102e-2 : (R < 0.775e1 ? -0.678290094611667081e-2 + R * 0.877495747428889343e-3 + pow(R - 0.75e1, 2) * (-0.160372658284777480e-2) + pow(R - 0.75e1, 3) * 0.120542211652886993e-2 : (R < 0.80e1 ? -0.240148764151977947e-2 + R * 0.301649102854165097e-3 + pow(R - 0.775e1, 2) * (-0.699659995451122293e-3) + pow(R - 0.775e1, 3) * 0.886049779337847376e-3 : (R < 0.825e1 ? -0.961806550635603032e-3 + R * 0.117953438754450374e-3 + pow(R - 0.80e1, 2) * (-0.351226609477366594e-4) + pow(R - 0.80e1, 3) * (-0.163520791640259374e-3) : (R < 0.85e1 ? -0.568729528338275713e-3 + R * 0.697319598480334121e-4 + pow(R - 0.825e1, 2) * (-0.157763254677931197e-3) + pow(R - 0.825e1, 3) * 0.262539410903190056e-3 : (R < 0.875e1 ? -0.322415907204035631e-3 + R * 0.400764720534159559e-4 + pow(R - 0.85e1, 2) * 0.391413034994613518e-4 + pow(R - 0.85e1, 3) * (-0.164943164932500677e-3) : (R < 0.90e1 ? -0.223180135530149130e-3 + R * 0.287202803783027583e-4 + pow(R - 0.875e1, 2) * (-0.845660701999141493e-4) + pow(R - 0.875e1, 3) * 0.201061790266812484e-3 : (R < 0.925e1 ? -0.184068379620357190e-3 + R * 0.241363309533730210e-4 + pow(R - 0.90e1, 2) * 0.662302725001952003e-4 + pow(R - 0.90e1, 3) * (-0.229733459814749106e-3) : (R < 0.95e1 ? -0.913896138458977932e-4 + R * 0.141764434882051655e-4 + pow(R - 0.925e1, 2) * (-0.106069822360866650e-3) + pow(R - 0.925e1, 3) * 0.106432222432183919e-3 : (R < 0.100e2 ? 0.217893285738839852e-3 + R * (-0.189024259861936695e-4) + pow(R - 0.95e1, 2) * (-0.262456555367287005e-4) + pow(R - 0.95e1, 3) * 0.180202338982320851e-4 : (R < 0.105e2 ? 0.340889202222483044e-3 + R * (-0.316329060992483037e-4) + pow(R - 0.100e2, 2) * 0.784695310619429489e-6 + pow(R - 0.100e2, 3) * 0.229680367357543660e-4 : (R < 0.110e2 ? 0.154843790586537528e-3 + R * (-0.136221832368130986e-4) + pow(R - 0.105e2, 2) * 0.352367504142509812e-4 + pow(R - 0.105e2, 3) * (-0.320771907212495552e-4) : (R < 0.120e2 ? 0.366758982434922112e-4 + R * (-0.244332586349929234e-5) + pow(R - 0.110e2, 2) * (-0.128790356676233618e-4) + pow(R - 0.110e2, 3) * 0.648922819112265454e-5 : (R < 0.140e2 ? 0.105770731909036631e-3 + R * (-0.873371262537805227e-5) + pow(R - 0.120e2, 2) * 0.658864890574460185e-5 + pow(R - 0.120e2, 3) * (-0.132808212577778768e-5) : (R < 0.160e2 ? -0.243458710653366190e-4 + R * 0.168389748826690144e-5 + pow(R - 0.140e2, 2) * (-0.137984384892212446e-5) + pow(R - 0.140e2, 3) * 0.297307784069336809e-6 : (R < 0.180e2 ? 0.374012760123287228e-5 + R * (-0.267784498589554510e-6) + pow(R - 0.160e2, 2) * 0.404002855493896492e-6 + pow(R - 0.160e2, 3) * (-0.922332658370596219e-7) : (R < 0.200e2 ? -0.454754727824368953e-5 + R * 0.241427733341316049e-6 + pow(R - 0.180e2, 2) * (-0.149396739528461213e-6) + pow(R - 0.180e2, 3) * 0.275045359664015959e-7 : (R < 0.250e2 ? 0.425552581714192811e-6 + R * (-0.261047931757096409e-7) + pow(R - 0.200e2, 2) * 0.156304762699483725e-7 + pow(R - 0.200e2, 3) * (-0.147152996376128931e-8) : -0.516127142441935217e-6 + R * 0.198352222416774058e-7 + pow(R - 0.250e2, 2) * (-0.644247318647096412e-8) + pow(R - 0.250e2, 3) * 0.611854840427096370e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3089385018e2 * (R - 0.300e2) * (R - 0.250e2) - 0.3295345416e3 * R - 0.1936014080e5 + 0.1647672708e2 * R * R + 0.75000e3 * (-0.604146402e-1 * R + 0.2498968855e1) * R) * pow(R, -6));
}

static double radcoeff_6_4_5_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.853338730599999956e-1 + pow(R - 0.475e1, 2) * (-0.746326819919785001e0) + pow(R - 0.475e1, 3) * 0.127111670495914009e1 : (R < 0.525e1 ? 0.732694784230268570e0 + R * (-0.134829027780053734e0) + pow(R - 0.50e1, 2) * 0.207010708799570120e0 + pow(R - 0.50e1, 3) * (-0.237259796157420821e0) : (R < 0.55e1 ? 0.432075270458871619e0 + R * (-0.758098851597850676e-1) + pow(R - 0.525e1, 2) * 0.290658616815045005e-1 + pow(R - 0.525e1, 3) * 0.482130198305430607e-1 : (R < 0.575e1 ? 0.304994418924432964e0 + R * (-0.522370131008059943e-1) + pow(R - 0.55e1, 2) * 0.652256265544118030e-1 + pow(R - 0.55e1, 3) * (-0.390631517087513119e-1) : (R < 0.60e1 ? 0.163051942930698052e0 + R * (-0.269485407689909647e-1) + pow(R - 0.575e1, 2) * 0.359282627728483156e-1 + pow(R - 0.575e1, 3) * (-0.201749080995378034e-1) : (R < 0.625e1 ? 0.798942097083808755e-1 + R * (-0.127672046512301452e-1) + pow(R - 0.60e1, 2) * 0.207970816981949622e-1 + pow(R - 0.60e1, 3) * (-0.175258401490975269e-1) : (R < 0.65e1 ? 0.364673996800528102e-1 + R * (-0.565475883008845041e-2) + pow(R - 0.625e1, 2) * 0.765270158637181529e-2 + pow(R - 0.625e1, 3) * (-0.378434687527204067e-2) : (R < 0.675e1 ? 0.166274557078043318e-1 + R * (-0.253797307601605088e-2) + pow(R - 0.65e1, 2) * 0.481444142991778457e-2 + pow(R - 0.65e1, 3) * (-0.349582594981432196e-2) : (R < 0.70e1 ? 0.504940090846957117e-2 + R * (-0.786219726647343969e-3) + pow(R - 0.675e1, 2) * 0.219257196755704310e-2 + pow(R - 0.675e1, 3) * (-0.184370097987066853e-2) : (R < 0.725e1 ? -0.965155217379898680e-4 + R * (-0.356276765945728787e-4) + pow(R - 0.70e1, 2) * 0.809796232654041753e-3 + pow(R - 0.70e1, 3) * (-0.866962367503000563e-3) : (R < 0.75e1 ? -0.181643391923585638e-2 + R * 0.206714995825635372e-3 + pow(R - 0.725e1, 2) * 0.159574457026791277e-3 + pow(R - 0.725e1, 3) * (-0.168153108517331013e-3) : (R < 0.775e1 ? -0.217102681299023541e-2 + R * 0.254973516492031408e-3 + pow(R - 0.75e1, 2) * 0.334596256387930031e-4 + pow(R - 0.75e1, 3) * (-0.259378459227674438e-3) : (R < 0.80e1 ? -0.192573510059835216e-2 + R * 0.223069868206238973e-3 + pow(R - 0.775e1, 2) * (-0.161074218781962852e-3) + pow(R - 0.775e1, 3) * 0.275287566280278890e-4 : (R < 0.825e1 ? -0.133236836226410197e-2 + R * 0.147694400683012756e-3 + pow(R - 0.80e1, 2) * (-0.140427651310941936e-3) + pow(R - 0.80e1, 3) * (-0.816816408443641567e-5) : (R < 0.85e1 ? -0.749373527559107303e-3 + R * 0.759490442617099799e-4 + pow(R - 0.825e1, 2) * (-0.146553774374269248e-3) + pow(R - 0.825e1, 3) * 0.233290690109717294e-3 : (R < 0.875e1 ? -0.503841467696252376e-3 + R * 0.464141614701473452e-4 + pow(R - 0.85e1, 2) * 0.284142432080187328e-4 + pow(R - 0.85e1, 3) * (-0.117076488194432527e-3) : (R < 0.90e1 ? -0.436128598214880392e-3 + R * 0.386694415377006128e-4 + pow(R - 0.875e1, 2) * (-0.593931229378056726e-4) + pow(R - 0.875e1, 3) * 0.220277845708012848e-3 : (R < 0.925e1 ? -0.540848638471451730e-3 + R * 0.502749761390501923e-4 + pow(R - 0.90e1, 2) * 0.105815261343203984e-3 + pow(R - 0.90e1, 3) * (-0.157286372397619006e-3) : (R < 0.95e1 ? -0.753294815791412343e-3 + R * 0.736914119860986207e-4 + pow(R - 0.925e1, 2) * (-0.121495179550102842e-4) + pow(R - 0.925e1, 3) * 0.663179748246327170e-5 : (R < 0.100e2 ? -0.708053217807275734e-3 + R * 0.688601150365553426e-4 + pow(R - 0.95e1, 2) * (-0.717566984316282996e-5) + pow(R - 0.95e1, 3) * (-0.196536144598956977e-4) : (R < 0.105e2 ? -0.493145030194707366e-3 + R * 0.469442343484707334e-4 + pow(R - 0.100e2, 2) * (-0.366560915330063766e-4) + pow(R - 0.100e2, 3) * 0.139489277521298242e-4 : (R < 0.110e2 ? -0.225524282056398099e-3 + R * 0.207498386295617237e-4 + pow(R - 0.105e2, 2) * (-0.157326999048116395e-4) + pow(R - 0.105e2, 3) * 0.431646983537637574e-5 : (R < 0.120e2 ? -0.914690754919060490e-4 + R * 0.825449110128236789e-5 + pow(R - 0.110e2, 2) * (-0.925799515174707545e-5) + pow(R - 0.110e2, 3) * 0.313624801946470806e-5 : (R < 0.140e2 ? 0.116961323168119019e-4 + R * (-0.852755143817658617e-6) + pow(R - 0.120e2, 2) * 0.150748906647049552e-6 + pow(R - 0.120e2, 3) * (-0.396268616191101058e-7) : (R < 0.160e2 ? 0.101974870301229442e-4 + R * (-0.725281856658781677e-6) + pow(R - 0.140e2, 2) * (-0.870122630676110695e-7) + pow(R - 0.140e2, 3) * 0.942410103235009803e-7 : (R < 0.180e2 ? -0.192212308524457523e-5 + R * 0.575612149527859674e-7 + pow(R - 0.160e2, 2) * 0.478433798873394773e-6 + pow(R - 0.160e2, 3) * (-0.131738209274893851e-6) : (R < 0.200e2 ? -0.705407387945749493e-5 + R * 0.390437899147638580e-6 + pow(R - 0.180e2, 2) * (-0.311995456775968440e-6) + pow(R - 0.180e2, 3) * 0.600959414635745761e-7 : (R < 0.250e2 ? 0.271532241596680443e-5 + R * (-0.136392630393340214e-6) + pow(R - 0.200e2, 2) * 0.485801920054790696e-7 + pow(R - 0.200e2, 3) * (-0.418111747656220602e-8) : -0.898265201282126258e-6 + R * 0.358254789192850479e-7 + pow(R - 0.250e2, 2) * (-0.141365701429540199e-7) + pow(R - 0.250e2, 3) * 0.140945255501940176e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4009661408e1 * (R - 0.300e2) * (R - 0.250e2) - 0.4276910028e2 * R - 0.2513107428e4 + 0.2138455014e1 * R * R + 0.75000e3 * (-0.784180702e-2 * R + 0.3243766355e0) * R) * pow(R, -6));
}

static double radcoeff_6_4_6_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.131238799700000242e0 + R * (-0.555111512312578270e-16) + pow(R - 0.475e1, 2) * (-0.278751716640344283e1) + pow(R - 0.475e1, 3) * 0.452291105921377046e1 : (R < 0.525e1 ? 0.275625326009569616e1 + R * (-0.545712759599139230e0) + pow(R - 0.50e1, 2) * 0.604666128006885684e0 + pow(R - 0.50e1, 3) * (-0.179594675241314450e0) : (R < 0.55e1 ? 0.138077864871807487e1 + R * (-0.277053697203442861e0) + pow(R - 0.525e1, 2) * 0.469970121575899846e0 + pow(R - 0.525e1, 3) * (-0.107604121448513348e0) : (R < 0.575e1 ? 0.227019382828990646e0 + R * (-0.622444091870892127e-1) + pow(R - 0.55e1, 2) * 0.389267030489514831e0 + pow(R - 0.55e1, 3) * (-0.183359872564631987e0) : (R < 0.60e1 ? -0.672974275822848300e0 + R * 0.980091299517996950e-1 + pow(R - 0.575e1, 2) * 0.251747126066040827e0 + pow(R - 0.575e1, 3) * (-0.318873995332958404e0) : (R < 0.625e1 ? -0.105873062006934249e1 + R * 0.164093818859890411e0 + pow(R - 0.60e1, 2) * 0.125916295663220084e-1 + pow(R - 0.60e1, 3) * (-0.228450889143534425e0) : (R < 0.65e1 ? -0.833146145043991870e0 + R * 0.127555091928638703e0 + pow(R - 0.625e1, 2) * (-0.158746537291328815e0) + pow(R - 0.625e1, 3) * 0.584817784670959573e-1 : (R < 0.675e1 ? -0.397502447146106053e0 + R * 0.591471567455547770e-1 + pow(R - 0.65e1, 2) * (-0.114885203441006847e0) + pow(R - 0.65e1, 3) * 0.984509174831509487e-1 : (R < 0.70e1 ? -0.140008857601709558e0 + R * 0.201641020531421571e-1 + pow(R - 0.675e1, 2) * (-0.410470153286436323e-1) + pow(R - 0.675e1, 3) * 0.371202353123000206e-1 : (R < 0.725e1 ? -0.470500475803361726e-1 + R * 0.660063850987659649e-2 + pow(R - 0.70e1, 2) * (-0.132068388444186152e-1) + pow(R - 0.70e1, 3) * 0.107846532164489126e-1 : (R < 0.75e1 ? -0.144925619566980812e-1 + R * 0.201934156575145959e-2 + pow(R - 0.725e1, 2) * (-0.511834893208193073e-2) + pow(R - 0.725e1, 3) * 0.473948643950436281e-2 : (R < 0.775e1 ? -0.220949859958172049e-2 + R * 0.348820807117562737e-3 + pow(R - 0.75e1, 2) * (-0.156373410245365797e-2) + pow(R - 0.75e1, 3) * 0.155089148313362836e-2 : (R < 0.80e1 ? 0.152283115901826003e-2 + R * (-0.142254091021710972e-3) + pow(R - 0.775e1, 2) * (-0.400565490103436755e-3) + pow(R - 0.775e1, 3) * 0.610591627961122293e-3 : (R < 0.825e1 ? 0.219371082854575130e-2 + R * (-0.228050905830718905e-3) + pow(R - 0.80e1, 2) * 0.573782308674050122e-4 + pow(R - 0.80e1, 3) * 0.141244827421882371e-3 : (R < 0.85e1 ? 0.174433062365716095e-2 + R * (-0.172878385255413462e-3) + pow(R - 0.825e1, 2) * 0.163311851433816811e-3 + pow(R - 0.825e1, 3) * (-0.259707859248651911e-3) : (R < 0.875e1 ? 0.147031371115483164e-2 + R * (-0.139917683147627262e-3) + pow(R - 0.85e1, 2) * (-0.314690430026721084e-4) + pow(R - 0.85e1, 3) * 0.123230647972724628e-3 : (R < 0.90e1 ? 0.140577415614817776e-2 + R * (-0.132546458154077462e-3) + pow(R - 0.875e1, 2) * 0.609539429768713692e-4 + pow(R - 0.875e1, 3) * (-0.209960511842245917e-3) : (R < 0.925e1 ? 0.148631876492456589e-2 + R * (-0.141437082636062877e-3) + pow(R - 0.90e1, 2) * (-0.965164409048130617e-4) + pow(R - 0.90e1, 3) * 0.168253780196258229e-3 : (R < 0.95e1 ? 0.163748884184045660e-2 + R * (-0.158147719301670990e-3) + pow(R - 0.925e1, 2) * 0.296738942423806031e-4 + pow(R - 0.925e1, 3) * (-0.104500201427866356e-4) : (R < 0.100e2 ? 0.151684327939390550e-2 + R * (-0.145270150957253205e-3) + pow(R - 0.95e1, 2) * 0.218363791352906255e-4 + pow(R - 0.95e1, 3) * 0.227286557184315144e-4 : (R < 0.105e2 ? 0.113631474690138929e-2 + R * (-0.106387280033138926e-3) + pow(R - 0.100e2, 2) * 0.559293627129378972e-4 + pow(R - 0.100e2, 3) * (-0.542558425332004519e-5) : (R < 0.110e2 ? 0.605087057057006284e-3 + R * (-0.545271055101910737e-4) + pow(R - 0.105e2, 2) * 0.477909863329578286e-4 + pow(R - 0.105e2, 3) * (-0.254193202251513426e-4) : (R < 0.120e2 ? 0.297865930807064314e-3 + R * (-0.258006093460967572e-4) + pow(R - 0.110e2, 2) * 0.966200599523081291e-5 + pow(R - 0.110e2, 3) * (-0.618541859134053233e-6) : (R < 0.140e2 ? 0.972887579864475146e-4 + R * (-0.833222293303729285e-5) + pow(R - 0.120e2, 2) * 0.780638041782865310e-5 + pow(R - 0.120e2, 3) * (-0.161231231165500325e-5) : (R < 0.160e2 ? -0.506730538758419057e-4 + R * 0.354555099841727924e-5 + pow(R - 0.140e2, 2) * (-0.186749345210136685e-5) + pow(R - 0.140e2, 3) * 0.286912486946363586e-6 : (R < 0.180e2 ? 0.858465565220919915e-5 + R * (-0.481472966631824899e-6) + pow(R - 0.160e2, 2) * (-0.146018530423185040e-6) + pow(R - 0.160e2, 3) * 0.662970083695487262e-7 : (R < 0.200e2 ? 0.472413798041964419e-5 + R * (-0.269982987889980240e-6) + pow(R - 0.180e2, 2) * 0.251763519794107343e-6 + pow(R - 0.180e2, 3) * (-0.495467691745586105e-7) : (R < 0.250e2 ? -0.291503907543491543e-5 + R * 0.142509861191745756e-6 + pow(R - 0.200e2, 2) * (-0.455170952532443459e-7) + pow(R - 0.200e2, 3) * 0.381296473497903897e-8 : 0.653619070331744279e-6 + R * (-0.266887362172697712e-7) + pow(R - 0.250e2, 2) * 0.116773757714412419e-7 + pow(R - 0.250e2, 3) * (-0.118949414559745741e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2074939251e2 * (R - 0.300e2) * (R - 0.250e2) - 0.2213243152e3 * R - 0.1300380258e5 + 0.1106621576e2 * R * R + 0.75000e3 * (-0.4057802737e-1 * R + 0.1678480718e1) * R) * pow(R, -6));
}

static double radcoeff_6_4_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.262347787800000287e0 + R * 0.555111512312578270e-16 + pow(R - 0.475e1, 2) * 0.295048489184355578e1 + pow(R - 0.475e1, 3) * (-0.447826404737422301e1) : (R < 0.525e1 ? -0.332575504299555558e1 + R * 0.635567937039111075e0 + pow(R - 0.50e1, 2) * (-0.408213143687111646e0) + pow(R - 0.50e1, 3) * 0.786095492266936091e-2 : (R < 0.55e1 ? -0.228732416241866732e1 + R * 0.432935294243555646e0 + pow(R - 0.525e1, 2) * (-0.402317427495109625e0) + pow(R - 0.525e1, 3) * (-0.117752556956453036e0) : (R < 0.575e1 ? -0.108650363536666261e1 + R * 0.209697976066665931e0 + pow(R - 0.55e1, 2) * (-0.490631845212449402e0) + pow(R - 0.55e1, 3) * 0.178660940103142624e0 : (R < 0.60e1 ? 0.103571180433762441e0 + R * (-0.211902027021955430e-2) + pow(R - 0.575e1, 2) * (-0.356636140135092428e0) + pow(R - 0.575e1, 3) * 0.317704811903882334e0 : (R < 0.625e1 ? 0.798736066374726827e0 + R * (-0.120867438105787803e0) + pow(R - 0.60e1, 2) * (-0.118357531207180650e0) + pow(R - 0.60e1, 3) * 0.306572147641327508e0 : (R < 0.65e1 ? 0.806731959986432656e0 + R * (-0.122563926026629216e0) + pow(R - 0.625e1, 2) * 0.111571579523814995e0 + pow(R - 0.625e1, 3) * 0.530015770807727216e-3 : (R < 0.675e1 ? 0.450459875030019385e0 + R * (-0.666787583076952906e-1) + pow(R - 0.65e1, 2) * 0.111969091351920791e0 + pow(R - 0.65e1, 3) * (-0.838473921645585818e-1) : (R < 0.70e1 ? 0.184371500135479954e0 + R * (-0.264155986625896240e-1) + pow(R - 0.675e1, 2) * 0.490835472285018476e-1 + pow(R - 0.675e1, 3) * (-0.415108922325734195e-1) : (R < 0.725e1 ? 0.694812449016235234e-1 + R * (-0.965711734194621765e-2) + pow(R - 0.70e1, 2) * 0.179503780540717812e-1 + pow(R - 0.70e1, 3) * (-0.144129704891476362e-1) : (R < 0.75e1 ? 0.249004521783849353e-1 + R * (-0.338436028162550839e-2) + pow(R - 0.725e1, 2) * 0.714065018721105407e-2 + pow(R - 0.725e1, 3) * (-0.621677490523607924e-2) : (R < 0.775e1 ? 0.721450721563809700e-2 + R * (-0.979680482751746264e-3) + pow(R - 0.75e1, 2) * 0.247806900828399486e-2 + pow(R - 0.75e1, 3) * (-0.213987738430803601e-2) : (R < 0.80e1 ? 0.842942861498169847e-3 + R * (-0.141872988167505775e-3) + pow(R - 0.775e1, 2) * 0.873160970052967635e-3 + pow(R - 0.775e1, 3) * (-0.102240230953177776e-2) : (R < 0.825e1 ? -0.107750002987415752e-2 + R * 0.103007063821769685e-3 + pow(R - 0.80e1, 2) * 0.106359237904134234e-3 + pow(R - 0.80e1, 3) * (-0.454108815648520564e-4) : (R < 0.85e1 ? -0.144004902146352312e-2 + R * 0.147672142480427039e-3 + pow(R - 0.825e1, 2) * 0.723010767304951922e-4 + pow(R - 0.825e1, 3) * (-0.318440205808813318e-3) : (R < 0.875e1 ? -0.124027133048043819e-2 + R * 0.124115142256522127e-3 + pow(R - 0.85e1, 2) * (-0.166529077626114796e-3) + pow(R - 0.85e1, 3) * 0.294220383200104988e-3 : (R < 0.90e1 ? -0.100022280591798864e-2 + R * 0.960169252934844214e-4 + pow(R - 0.875e1, 2) * 0.541362097739639514e-4 + pow(R - 0.875e1, 3) * (-0.161603093391606532e-3) : (R < 0.925e1 ? -0.970272065025861536e-3 + R * 0.927844501695401655e-4 + pow(R - 0.90e1, 2) * (-0.670661102697409680e-4) + pow(R - 0.90e1, 3) * 0.195446486366321131e-3 : (R < 0.95e1 ? -0.100020658536228275e-2 + R * 0.958976112283548970e-4 + pow(R - 0.925e1, 2) * 0.795187545049998802e-4 + pow(R - 0.925e1, 3) * (-0.201699446633677939e-3) : (R < 0.100e2 ? -0.101682516164188202e-2 + R * 0.978383422370402149e-4 + pow(R - 0.95e1, 2) * (-0.717558304702585811e-4) + pow(R - 0.95e1, 3) * 0.437272387123562817e-4 : (R < 0.105e2 ? -0.639694200060488471e-3 + R * 0.588779408010488468e-4 + pow(R - 0.100e2, 2) * (-0.616497240172414921e-5) + pow(R - 0.100e2, 3) * (-0.179367110407471067e-4) : (R < 0.110e2 ? -0.437493722377025880e-3 + R * 0.392604351187643701e-4 + pow(R - 0.105e2, 2) * (-0.330700389628448119e-4) + pow(R - 0.105e2, 3) * 0.169312552106321220e-4 : (R < 0.120e2 ? -0.219557252112830204e-3 + R * 0.188888375638936539e-4 + pow(R - 0.110e2, 2) * (-0.767315614689662548e-5) + pow(R - 0.110e2, 3) * 0.926885523002971890e-6 : (R < 0.140e2 ? -0.755156540426118561e-4 + R * 0.632318183910932120e-5 + pow(R - 0.120e2, 2) * (-0.489249957788770981e-5) + pow(R - 0.120e2, 3) * 0.965099187579024095e-6 : (R < 0.160e2 ? 0.244784539949051446e-4 + R * (-0.166562622149322466e-5) + pow(R - 0.140e2, 2) * 0.898095547586435924e-6 + pow(R - 0.140e2, 3) * (-0.161109391419911745e-6) : (R < 0.180e2 ? 0.236849160982756057e-6 + R * (-0.655672818642225356e-8) + pow(R - 0.160e2, 2) * (-0.685608009330345880e-7) + pow(R - 0.160e2, 3) * 0.189085603756228546e-7 : (R < 0.200e2 ? 0.966003066299553677e-6 + R * (-0.538972074110863107e-7) + pow(R - 0.180e2, 2) * 0.448905613207025528e-7 + pow(R - 0.180e2, 3) * (-0.870001344507969675e-8) : (R < 0.250e2 ? -0.427276474815350440e-6 + R * 0.212648765307675230e-7 + pow(R - 0.200e2, 2) * (-0.730951934977563347e-8) + pow(R - 0.200e2, 3) * 0.623826168724425669e-9 : 0.125669583616421990e-6 + R * (-0.504335431265687965e-8) + pow(R - 0.250e2, 2) * 0.204787318109075218e-8 + pow(R - 0.250e2, 3) * (-0.205450827711875246e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.6332621440e0 * (R - 0.300e2) * (R - 0.250e2) - 0.6756340320e1 * R - 0.3962211944e3 + 0.3378170160e0 * R * R + 0.75000e3 * (-0.1237302774e-2 * R + 0.5116080175e-1) * R) * pow(R, -6));
}

static double radcoeff_6_4_7_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.111865293800000126e0 + R * 0.277555756156289135e-16 + pow(R - 0.475e1, 2) * 0.128630963370149165e1 + pow(R - 0.475e1, 3) * (-0.229772551912596645e1) : (R < 0.525e1 ? -0.112902931300313547e1 + R * 0.212331282014627060e0 + pow(R - 0.50e1, 2) * (-0.436984505642983356e0) + pow(R - 0.50e1, 3) * 0.559429304257900495e0 : (R < 0.55e1 ? -0.551203655792831593e0 + R * 0.987320237414917451e-1 + pow(R - 0.525e1, 2) * (-0.174125274495579296e-1) + pow(R - 0.525e1, 3) * (-0.128230766705636323e0) : (R < 0.575e1 ? -0.374173115836732850e0 + R * 0.659824912594059731e-1 + pow(R - 0.55e1, 2) * (-0.113585602478785186e0) + pow(R - 0.55e1, 3) * 0.961578841646453519e-1 : (R < 0.60e1 ? -0.156881360794585145e0 + R * 0.272192933008843750e-1 + pow(R - 0.575e1, 2) * (-0.414671893553011719e-1) + pow(R - 0.575e1, 3) * 0.163572791990546640e-1 : (R < 0.625e1 ? -0.532178486743392284e-1 + R * 0.955268847305653854e-2 + pow(R - 0.60e1, 2) * (-0.291992299560101740e-1) + pow(R - 0.60e1, 3) * 0.258099424631360666e-1 : (R < 0.65e1 ? 0.636204709294085121e-2 + R * (-0.207562293110536171e-3) + pow(R - 0.625e1, 2) * (-0.984177310865812401e-2) + pow(R - 0.625e1, 3) * 0.972418736440107574e-2 : (R < 0.675e1 ? 0.260332859539935749e-1 + R * (-0.330516371661439615e-2) + pow(R - 0.65e1, 2) * (-0.254863258535731720e-2) + pow(R - 0.65e1, 3) * 0.394818667125960802e-2 : (R < 0.70e1 ? 0.295403980539151803e-1 + R * (-0.383919500843187857e-2) + pow(R - 0.675e1, 2) * 0.412507418087389199e-3 + pow(R - 0.675e1, 3) * 0.134190115056050151e-2 : (R < 0.725e1 ? 0.263821257496066330e-1 + R * (-0.338133483365809021e-2) + pow(R - 0.70e1, 2) * 0.141893328100776549e-2 + pow(R - 0.70e1, 3) * 0.533293024983811926e-4 : (R < 0.75e1 ? 0.212555146857842658e-1 + R * (-0.266186894893576066e-2) + pow(R - 0.725e1, 2) * 0.145893025788155139e-2 + pow(R - 0.725e1, 3) * (-0.197720952554031771e-3) : (R < 0.775e1 ? 0.161506650594914966e-1 + R * (-0.196947649859886614e-2) + pow(R - 0.75e1, 2) * 0.131063954346602755e-2 + pow(R - 0.75e1, 3) * (-0.452301082682251784e-3) : (R < 0.80e1 ? 0.118040346063830008e-1 + R * (-0.139896317986877442e-2) + pow(R - 0.775e1, 2) * 0.971413731454338686e-3 + pow(R - 0.775e1, 3) * (-0.185997897516964477e-3) : (R < 0.825e1 ? 0.825518366790828698e-2 + R * (-0.948130919926035783e-3) + pow(R - 0.80e1, 2) * 0.831915308316615314e-3 + pow(R - 0.80e1, 3) * (-0.483057106449889817e-3) : (R < 0.85e1 ? 0.561520892212343057e-2 + R * (-0.622746473227082497e-3) + pow(R - 0.825e1, 2) * 0.469622478479197938e-3 + pow(R - 0.825e1, 3) * (-0.265466758283471396e-3) : (R < 0.875e1 ? 0.406760452140789239e-2 + R * (-0.437710251165634415e-3) + pow(R - 0.85e1, 2) * 0.270522409766594391e-3 + pow(R - 0.85e1, 3) * (-0.561265228162272862e-4) : (R < 0.90e1 ? 0.299218222886582334e-2 + R * (-0.312972769310379843e-3) + pow(R - 0.875e1, 2) * 0.228427517654423924e-3 + pow(R - 0.875e1, 3) * (-0.284999323251618154e-3) : (R < 0.925e1 ? 0.245501836283561680e-2 + R * (-0.252196383592846285e-3) + pow(R - 0.90e1, 2) * 0.146780252157103138e-4 + pow(R - 0.90e1, 3) * 0.176151764622699183e-3 : (R < 0.95e1 ? 0.208528902734367435e-2 + R * (-0.211828915118235047e-3) + pow(R - 0.925e1, 2) * 0.146791848682734696e-3 + pow(R - 0.925e1, 3) * (-0.951593019591782171e-4) : (R < 0.100e2 ? 0.156521787916502923e-2 + R * (-0.156275359894213596e-3) + pow(R - 0.95e1, 2) * 0.754223722133510262e-4 + pow(R - 0.95e1, 3) * 0.184447118701523895e-4 : (R < 0.105e2 ? 0.693820000042482993e-3 + R * (-0.670194537782482975e-4) + pow(R - 0.100e2, 2) * 0.103089440018579612e-3 + pow(R - 0.100e2, 3) * (-0.730093466041660413e-4) : (R < 0.110e2 ? 0.202975676031328777e-3 + R * (-0.186870237127932163e-4) + pow(R - 0.105e2, 2) * (-0.642457988766944472e-5) + pow(R - 0.105e2, 3) * 0.170897471705117526e-4 : (R < 0.120e2 ? 0.133185714063367320e-3 + R * (-0.122942932225788466e-4) + pow(R - 0.110e2, 2) * 0.192100408680981858e-4 + pow(R - 0.110e2, 3) * (-0.714174134151934014e-5) : (R < 0.140e2 ? -0.586842789497140653e-4 + R * 0.470056448905950552e-5 + pow(R - 0.120e2, 2) * (-0.221518315645983457e-5) + pow(R - 0.120e2, 3) * 0.284043397465040922e-6 : (R < 0.160e2 ? 0.110583015914907862e-4 + R * (-0.751647367199341808e-6) + pow(R - 0.140e2, 2) * (-0.510922771669589039e-6) + pow(R - 0.140e2, 3) * 0.228842566509629966e-6 : (R < 0.180e2 ? -0.393364345805784410e-6 + R * (-0.492276557621384762e-7) + pow(R - 0.160e2, 2) * 0.862132627388190811e-6 + pow(R - 0.160e2, 3) * (-0.234542625628560784e-6) : (R < 0.200e2 ? -0.102335168772621148e-4 + R * 0.584791346247895253e-6 + pow(R - 0.180e2, 2) * (-0.545123126383173893e-6) + pow(R - 0.180e2, 3) * 0.107274588604613137e-6 : (R < 0.250e2 ? 0.630813617158885289e-5 + R * (-0.308406096029442673e-6) + pow(R - 0.200e2, 2) * 0.985244052445049435e-7 + pow(R - 0.200e2, 3) * (-0.825384166212328046e-8) : -0.141563209970901647e-5 + R * 0.577998317563606615e-7 + pow(R - 0.250e2, 2) * (-0.252832196873442667e-7) + pow(R - 0.250e2, 3) * 0.257530032801442657e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.4480456032e2 * (R - 0.300e2) * (R - 0.250e2) + 0.4779148968e3 * R + 0.2807801540e5 - 0.2389574484e2 * R * R + 0.75000e3 * (0.876187125e-1 * R - 0.3624241942e1) * R) * pow(R, -6));
}

static double radcoeff_6_4_8_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.312594410799999944e0 + R * 0.693889390390722838e-17 + pow(R - 0.475e1, 2) * 0.244532501144678366e0 + pow(R - 0.475e1, 3) * (-0.251912999778713564e0) : (R < 0.525e1 ? -0.512212640691519505e-1 + R * 0.750325631138303861e-1 + pow(R - 0.50e1, 2) * 0.555977513106431856e-1 + pow(R - 0.50e1, 3) * (-0.932408981463858866e0) : (R < 0.55e1 ? 0.709580698990438297e0 + R * (-0.719952452553215827e-1) + pow(R - 0.525e1, 2) * (-0.643708984787251026e0) + pow(R - 0.525e1, 3) * 0.577347812034148977e0 : (R < 0.575e1 ? 0.185317972400899267e1 + R * (-0.285597022892544128e0) + pow(R - 0.55e1, 2) * (-0.210698125761639266e0) + pow(R - 0.55e1, 3) * 0.155888011727263048e0 : (R < 0.60e1 ? 0.228013719025338624e1 + R * (-0.361717083574501941e0) + pow(R - 0.575e1, 2) * (-0.937821169661919724e-1) + pow(R - 0.575e1, 3) * 0.404965952256798767e0 : (R < 0.625e1 ? 0.210636305555668901e1 + R * (-0.332677026009448151e0) + pow(R - 0.60e1, 2) * 0.209942347226407117e0 + pow(R - 0.60e1, 3) * 0.121362497325541635e0 : (R < 0.65e1 ? 0.132308922964315956e1 + R * (-0.204950384147705500e0) + pow(R - 0.625e1, 2) * 0.300964220220563350e0 + pow(R - 0.625e1, 3) * (-0.153493208758964994e0) : (R < 0.675e1 ? 0.548437294474243497e0 + R * (-0.832482506797297683e-1) + pow(R - 0.65e1, 2) * 0.185844313651339604e0 + pow(R - 0.65e1, 3) * (-0.163201198289682214e0) : (R < 0.70e1 ? 0.136829503363283811e0 + R * (-0.209263185333753814e-1) + pow(R - 0.675e1, 2) * 0.634434149340779296e-1 + pow(R - 0.675e1, 3) * (-0.614734912023055871e-1) : (R < 0.725e1 ? -0.153380156961898523e-2 + R * (-0.730890666768716293e-3) + pow(R - 0.70e1, 2) * 0.173382965323487341e-1 + pow(R - 0.70e1, 3) * (-0.181258497010954728e-1) : (R < 0.75e1 ? -0.389448724302643087e-1 + R * 0.453966078045024962e-2 + pow(R - 0.725e1, 2) * 0.374390925652712996e-2 + pow(R - 0.725e1, 3) * (-0.658155255331251653e-2) : (R < 0.775e1 ? -0.435980662942578798e-1 + R * 0.517757430496771764e-2 + pow(R - 0.75e1, 2) * (-0.119225515845725787e-2) + pow(R - 0.75e1, 3) * (-0.131654328565444551e-2) : (R < 0.80e1 ? -0.371600625295113174e-1 + R * 0.433459485967887994e-2 + pow(R - 0.775e1, 2) * (-0.217966262269809205e-2) + pow(R - 0.775e1, 3) * 0.198204863930287120e-3 : (R < 0.825e1 ? -0.288718512975341020e-1 + R * 0.328192696031676286e-2 + pow(R - 0.80e1, 2) * (-0.203100897475037671e-2) + pow(R - 0.80e1, 3) * 0.592260597933303616e-3 : (R < 0.85e1 ? -0.215277763781960736e-1 + R * 0.237747133505406948e-2 + pow(R - 0.825e1, 2) * (-0.158681352630039895e-2) + pow(R - 0.825e1, 3) * 0.740980520336488114e-3 : (R < 0.875e1 ? -0.160523546204691739e-1 + R * 0.172299841946696149e-2 + pow(R - 0.85e1, 2) * (-0.103107813604803281e-2) + pow(R - 0.85e1, 3) * 0.467240808720749770e-3 : (R < 0.90e1 ? -0.123650964729332489e-1 + R * 0.129506700307808554e-2 + pow(R - 0.875e1, 2) * (-0.680647529507470467e-3) + pow(R - 0.875e1, 3) * 0.125730542380512279e-3 : (R < 0.925e1 ? -0.955492881128626806e-2 + R * 0.978317715020696546e-3 + pow(R - 0.90e1, 2) * (-0.586349622722086251e-3) + pow(R - 0.90e1, 3) * 0.293647012157202073e-3 : (R < 0.95e1 ? -0.738441445976194093e-2 + R * 0.740201718439128728e-3 + pow(R - 0.925e1, 2) * (-0.366114363604184696e-3) + pow(R - 0.925e1, 3) * 0.381047561906802703e-4 : (R < 0.100e2 ? -0.573553209051649426e-2 + R * 0.564289178422788850e-3 + pow(R - 0.95e1, 2) * (-0.337535796461174492e-3) + pow(R - 0.95e1, 3) * 0.905349392311934683e-4 : (R < 0.105e2 ? -0.311225325185009475e-2 + R * 0.294654586385009493e-3 + pow(R - 0.100e2, 2) * (-0.201733387614384276e-3) + pow(R - 0.100e2, 3) * 0.512621504887305382e-4 : (R < 0.110e2 ? -0.144176769512031769e-2 + R * 0.131367811637173124e-3 + pow(R - 0.105e2, 2) * (-0.124840161881288462e-3) + pow(R - 0.105e2, 3) * 0.636868977738844764e-4 : (R < 0.120e2 ? -0.617191999309278021e-3 + R * 0.542928230862979995e-4 + pow(R - 0.110e2, 2) * (-0.293098152204617506e-4) + pow(R - 0.110e2, 3) * 0.526531162416374760e-5 : (R < 0.140e2 ? -0.127352156084388994e-3 + R * 0.114691275178657496e-4 + pow(R - 0.120e2, 2) * (-0.135138803479705061e-4) + pow(R - 0.120e2, 3) * 0.300968610864381552e-5 : (R < 0.160e2 ? 0.938198446270668184e-4 + R * (-0.647016057029048679e-5) + pow(R - 0.140e2, 2) * 0.454423630389238703e-5 + pow(R - 0.140e2, 3) * (-0.921434362873571873e-6) : (R < 0.180e2 ? -0.929041083773918728e-5 + R * 0.649572290796199173e-6 + pow(R - 0.160e2, 2) * (-0.984369873349044207e-6) + pow(R - 0.160e2, 3) * 0.227912528850472264e-6 : (R < 0.200e2 ? 0.102409345490975785e-4 + R * (-0.552956856394309957e-6) + pow(R - 0.180e2, 2) * 0.383105299753789589e-6 + pow(R - 0.180e2, 3) * (-0.720758814033173002e-7) : (R < 0.250e2 ? -0.215346374662081353e-5 + R * 0.114553765781040692e-6 + pow(R - 0.200e2, 2) * (-0.493499886661142384e-7) + pow(R - 0.200e2, 3) * 0.441782895238122004e-8 : 0.121908303658775424e-5 + R * (-0.476089494515101647e-7) + pow(R - 0.250e2, 2) * 0.169174456196040663e-7 + pow(R - 0.250e2, 3) * (-0.164557269306040689e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.4403570208e2 * (R - 0.300e2) * (R - 0.250e2) + 0.4697134728e3 * R + 0.2759575586e5 - 0.2348567364e2 * R * R + 0.75000e3 * (0.861143068e-1 * R - 0.3562003193e1) * R) * pow(R, -6));
}

static double radcoeff_6_4_8_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.185629992500002637e-1 + R * (-0.555111512312578270e-16) + pow(R - 0.475e1, 2) * (-0.293187840026239144e1) + pow(R - 0.475e1, 3) * 0.496249074024956549e1 : (R < 0.525e1 ? 0.259022044872201018e1 + R * (-0.535472186334402078e0) + pow(R - 0.50e1, 2) * 0.789989654924783014e0 + pow(R - 0.50e1, 3) * (-0.433645011148698578e0) : (R < 0.55e1 ? 0.985965562527555850e0 + R * (-0.221785798462391603e0) + pow(R - 0.525e1, 2) * 0.464755896563259052e0 + pow(R - 0.525e1, 3) * 0.407658163452295011e-1 : (R < 0.575e1 ? -0.304468691711826445e0 + R * 0.182357403839684407e-1 + pow(R - 0.55e1, 2) * 0.495330258822181180e0 + pow(R - 0.55e1, 3) * (-0.325149335832219721e0) : (R < 0.60e1 ? -0.135211387532747751e1 + R * 0.204935369326517819e0 + pow(R - 0.575e1, 2) * 0.251468256948016389e0 + pow(R - 0.575e1, 3) * (-0.366825157816350667e0) : (R < 0.625e1 ? -0.168385522065976168e1 + R * 0.261889780709960274e0 + pow(R - 0.60e1, 2) * (-0.236506114142466320e-1) + pow(R - 0.60e1, 3) * (-0.265560832902377419e0) : (R < 0.65e1 ? -0.130437051016025740e1 + R * 0.200271818833641174e0 + pow(R - 0.625e1, 2) * (-0.222821236091029690e0) + pow(R - 0.625e1, 3) * 0.554999710258598303e-1 : (R < 0.675e1 ? -0.660901222760587825e0 + R * 0.992674453554750619e-1 + pow(R - 0.65e1, 2) * (-0.181196257821634815e0) + pow(R - 0.65e1, 3) * 0.135202404798938192e0 : (R < 0.70e1 ? -0.229691624720595317e0 + R * 0.340197673444585652e-1 + pow(R - 0.675e1, 2) * (-0.797944542224311576e-1) + pow(R - 0.675e1, 3) * 0.698101376503875021e-1 : (R < 0.725e1 ? -0.459332105958345435e-1 + R * 0.721194104269064912e-2 + pow(R - 0.70e1, 2) * (-0.274368509846405276e-1) + pow(R - 0.70e1, 3) * 0.256323622315117218e-1 : (R < 0.75e1 ? 0.173670842883534536e-1 + R * (-0.170041653122116596e-2) + pow(R - 0.725e1, 2) * (-0.821257931100673536e-2) + pow(R - 0.725e1, 3) * 0.100080683995655943e-1 : (R < 0.775e1 ? 0.337335003795448812e-1 + R * (-0.393019336180598471e-2) + pow(R - 0.75e1, 2) * (-0.706528011332539503e-3) + pow(R - 0.75e1, 3) * 0.269607220222591037e-2 : (R < 0.80e1 ? 0.325515346320504467e-1 + R * (-0.377794382955489675e-2) + pow(R - 0.775e1, 2) * 0.131552614033689339e-2 + pow(R - 0.775e1, 3) * 0.554668391530775706e-3 : (R < 0.825e1 ? 0.265483145607954343e-1 + R * (-0.301618043597442912e-2) + pow(R - 0.80e1, 2) * 0.173152743398497519e-2 + pow(R - 0.80e1, 3) * (-0.517369512349034237e-3) : (R < 0.85e1 ? 0.203062064260159346e-1 + R * (-0.224742350254738578e-2) + pow(R - 0.825e1, 2) * 0.134350029972319946e-2 + pow(R - 0.825e1, 3) * (-0.359234694134624125e-3) : (R < 0.875e1 ? 0.152472161726062393e-1 + R * (-0.164302985783602818e-2) + pow(R - 0.85e1, 2) * 0.107407427912223135e-2 + pow(R - 0.85e1, 3) * (-0.411624408712475947e-3) : (R < 0.90e1 ? 0.112841605080493887e-1 + R * (-0.118317229490850161e-2) + pow(R - 0.875e1, 2) * 0.765355972587874393e-3 + pow(R - 0.875e1, 3) * (-0.296054653415471491e-3) : (R < 0.925e1 ? 0.838285975336968900e-2 + R * (-0.856004556129965374e-3) + pow(R - 0.90e1, 2) * 0.543314982526270774e-3 + pow(R - 0.90e1, 3) * (-0.294092606425638034e-3) : (R < 0.95e1 ? 0.640945681288764349e-2 + R * (-0.639489428571637084e-3) + pow(R - 0.925e1, 2) * 0.322745527707042222e-3 + pow(R - 0.925e1, 3) * (-0.178166744819758388e-4) : (R < 0.100e2 ? 0.492804471764312062e-2 + R * (-0.481457291183486416e-3) + pow(R - 0.95e1, 2) * 0.309383021845560343e-3 + pow(R - 0.95e1, 3) * (-0.108286963757175112e-3) : (R < 0.105e2 ? 0.271017661235807474e-2 + R * (-0.253289492155807448e-3) + pow(R - 0.100e2, 2) * 0.146952576209797675e-3 + pow(R - 0.100e2, 3) * (-0.358673919563655920e-4) : (R < 0.110e2 ? 0.148188499386948166e-2 + R * (-0.133237459913283969e-3) + pow(R - 0.105e2, 2) * 0.931514882752492834e-4 + pow(R - 0.105e2, 3) * (-0.337232089773627333e-4) : (R < 0.120e2 ? 0.754507567851623868e-3 + R * (-0.653783783710567185e-4) + pow(R - 0.110e2, 2) * 0.425666748092051766e-4 + pow(R - 0.110e2, 3) * (-0.108646641781484499e-4) : (R < 0.140e2 ? 0.155737293472100709e-3 + R * (-0.128390212870917253e-4) + pow(R - 0.120e2, 2) * 0.997268227475982678e-5 + pow(R - 0.120e2, 3) * (-0.200548077885698182e-5) : (R < 0.160e2 ? -0.419652601978931411e-4 + R * 0.298593846566379574e-5 + pow(R - 0.140e2, 2) * (-0.206020239838206586e-5) + pow(R - 0.140e2, 3) * 0.378658678175083933e-6 : (R < 0.180e2 ? 0.119736869208153651e-4 + R * (-0.710966989763460285e-6) + pow(R - 0.160e2, 2) * 0.211749670668437739e-6 + pow(R - 0.160e2, 3) * (-0.185828421683537913e-7) : (R < 0.200e2 ? 0.143994048637918539e-5 + R * (-0.869624131099547472e-7) + pow(R - 0.180e2, 2) * 0.100252617658314991e-6 + pow(R - 0.180e2, 3) * (-0.202093681141688022e-7) : (R < 0.250e2 ? -0.149068505316559099e-5 + R * 0.715356401532795492e-7 + pow(R - 0.200e2, 2) * (-0.210035910266978426e-7) + pow(R - 0.200e2, 3) * 0.171845119760838672e-8 : 0.227833332026747143e-6 + R * (-0.961643029306988718e-8) + pow(R - 0.250e2, 2) * 0.477317693742795496e-8 + pow(R - 0.250e2, 3) * (-0.497439968562795566e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1919112003e2 * (R - 0.300e2) * (R - 0.250e2) - 0.2047046244e3 * R - 0.1202671556e5 + 0.1023523122e2 * R * R + 0.75000e3 * (-0.3752978848e-1 * R + 0.1552376807e1) * R) * pow(R, -6));
}

static double radcoeff_6_4_9_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.123382897700000063e0 + R * 0.138777878078144568e-16 + pow(R - 0.475e1, 2) * 0.512785423296982401e0 + pow(R - 0.475e1, 3) * (-0.949672784387929569e0) : (R < 0.525e1 ? -0.497817768878771938e0 + R * 0.783290645757543924e-1 + pow(R - 0.50e1, 2) * (-0.199469164993964859e0) + pow(R - 0.50e1, 3) * 0.352229994763789134e0 : (R < 0.55e1 ? -0.327900841009157840e0 + R * 0.446376060969824393e-1 + pow(R - 0.525e1, 2) * 0.647033310788770327e-1 + pow(R - 0.525e1, 3) * (-0.499503460272271577e-1) : (R < 0.575e1 ? -0.451060223099737201e0 + R * 0.676235817563158592e-1 + pow(R - 0.55e1, 2) * 0.272405715584566575e-1 + pow(R - 0.55e1, 3) * (-0.598222055348804488e-1) : (R < 0.60e1 ? -0.464113237227086028e0 + R * 0.700272039977540978e-1 + pow(R - 0.575e1, 2) * (-0.176260825927036860e-1) + pow(R - 0.575e1, 3) * (-0.401908911325091645e-2) : (R < 0.625e1 ? -0.407877942626006296e0 + R * 0.604605834926677105e-1 + pow(R - 0.60e1, 2) * (-0.206403994276418735e-1) + pow(R - 0.60e1, 3) * (-0.550546041211583560e-2) : (R < 0.65e1 ? -0.338301030777344081e0 + R * 0.491081099515750519e-1 + pow(R - 0.625e1, 2) * (-0.247694947367287505e-1) + pow(R - 0.625e1, 3) * (-0.219292971828588968e-2) : (R < 0.675e1 ? -0.256709897736708492e0 + R * 0.363121882610320731e-1 + pow(R - 0.65e1, 2) * (-0.264141920254431679e-1) + pow(R - 0.65e1, 3) * 0.815828840525947840e-2 : (R < 0.70e1 ? -0.179410747159002348e0 + R * 0.246347713242966448e-1 + pow(R - 0.675e1, 2) * (-0.202954757214985591e-1) + pow(R - 0.675e1, 3) * 0.816165750524791567e-2 : (R < 0.725e1 ? -0.120229698943469437e0 + R * 0.160173442457813495e-1 + pow(R - 0.70e1, 2) * (-0.141742325925626224e-1) + pow(R - 0.70e1, 3) * 0.648574845374888000e-2 : (R < 0.75e1 ? -0.784492198171901634e-1 + R * 0.101463057845779525e-1 + pow(R - 0.725e1, 2) * (-0.930992125225096195e-2) + pow(R - 0.725e1, 3) * 0.429335008775659326e-2 : (R < 0.775e1 ? -0.500893251653012489e-1 + R * 0.629634829990683310e-2 + pow(R - 0.75e1, 2) * (-0.608990868643351658e-2) + pow(R - 0.75e1, 3) * 0.299376505122473345e-2 : (R < 0.80e1 ? -0.311750855594090243e-1 + R * 0.381272490379471266e-2 + pow(R - 0.775e1, 2) * (-0.384458489801496649e-2) + pow(R - 0.775e1, 3) * 0.200906329454446711e-2 : (R < 0.825e1 ? -0.190192358513145317e-1 + R * 0.226713182251431656e-2 + pow(R - 0.80e1, 2) * (-0.233778742710661616e-2) + pow(R - 0.80e1, 3) * 0.119166036899739773e-2 : (R < 0.85e1 ? -0.113467043687211690e-1 + R * 0.132167442814802062e-2 + pow(R - 0.825e1, 2) * (-0.144404215035856781e-2) + pow(R - 0.825e1, 3) * 0.949917757465939356e-3 : (R < 0.875e1 ? -0.679886682509560358e-2 + R * 0.777762932493600441e-3 + pow(R - 0.85e1, 2) * (-0.731603832259113238e-3) + pow(R - 0.85e1, 3) * 0.204296537138845037e-3 : (R < 0.90e1 ? -0.397580717128880132e-2 + R * 0.450266617077577243e-3 + pow(R - 0.875e1, 2) * (-0.578381429404979447e-3) + pow(R - 0.875e1, 3) * 0.536455158938681687e-3 : (R < 0.925e1 ? -0.230612554715481366e-2 + R * 0.261661244676090424e-3 + pow(R - 0.90e1, 2) * (-0.176040060200968154e-3) + pow(R - 0.90e1, 3) * (-0.133100763933574016e-3) : (R < 0.95e1 ? -0.127417583447706623e-2 + R * 0.148684821338061204e-3 + pow(R - 0.925e1, 2) * (-0.275865633151148673e-3) + pow(R - 0.925e1, 3) * 0.178123912795615137e-3 : (R < 0.100e2 ? -0.295555712610814892e-3 + R * 0.441502384116647278e-4 + pow(R - 0.95e1, 2) * (-0.142272698554437313e-3) + pow(R - 0.95e1, 3) * 0.789267746622156912e-4 : (R < 0.105e2 ? 0.509518135161108146e-3 + R * (-0.389273791461108170e-4) + pow(R - 0.100e2, 2) * (-0.238825365611137798e-4) + pow(R - 0.100e2, 3) * 0.483849858667080868e-5 : (R < 0.110e2 ? 0.716815770865825586e-3 + R * (-0.591810417672214848e-4) + pow(R - 0.105e2, 2) * (-0.166247886811075660e-4) + pow(R - 0.105e2, 3) * 0.261285747511010803e-4 : (R < 0.120e2 ? 0.683237579335035624e-3 + R * (-0.562093993850032355e-4) + pow(R - 0.110e2, 2) * 0.225680734455440578e-4 + pow(R - 0.110e2, 3) * (-0.443548568054081939e-5) : (R < 0.140e2 ? 0.319413888906450996e-3 + R * (-0.243797095355375814e-4) + pow(R - 0.120e2, 2) * 0.926161640392159797e-5 + pow(R - 0.120e2, 3) * (-0.132373356307640387e-5) : (R < 0.160e2 ? 0.496072059957524802e-4 + R * (-0.321804667676803427e-5) + pow(R - 0.140e2, 2) * 0.131921502546317475e-5 + pow(R - 0.140e2, 3) * (-0.235278025914578698e-6) : (R < 0.180e2 ? 0.137454612362444812e-4 + R * (-0.764522885890280070e-6) + pow(R - 0.160e2, 2) * (-0.924531300242975330e-7) + pow(R - 0.160e2, 3) * 0.627171242347188034e-7 : (R < 0.200e2 ? 0.698711223697520037e-5 + R * (-0.381729915170844508e-6) + pow(R - 0.180e2, 2) * 0.283849615384015274e-6 + pow(R - 0.180e2, 3) * (-0.540553591492965138e-7) : (R < 0.250e2 ? -0.204461520957316929e-5 + R * 0.105004236573658464e-6 + pow(R - 0.200e2, 2) * (-0.404825395117638017e-7) + pow(R - 0.200e2, 3) * 0.354564420980642124e-8 : 0.859078813412449005e-6 + R * (-0.338978428084979570e-7) + pow(R - 0.250e2, 2) * 0.127021236353325152e-7 + pow(R - 0.250e2, 3) * (-0.125160110672658460e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1775024701e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1893360144e3 * R + 0.1112343829e5 - 0.9466800720e1 * R * R + 0.75000e3 * (0.3471150249e-1 * R - 0.1435792601e1) * R) * pow(R, -6));
}

static double radcoeff_6_4_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.599181717699999949e0 + pow(R - 0.475e1, 2) * (-0.554759231732323510e1) + pow(R - 0.475e1, 3) * 0.102887210644929397e2 : (R < 0.525e1 ? 0.463652325984595759e1 + R * (-0.844660959069191475e0) + pow(R - 0.50e1, 2) * 0.216894848104646920e1 + pow(R - 0.50e1, 3) * (-0.234567653747881311e1) : (R < 0.55e1 ? 0.135096692284698072e1 + R * (-0.200001069323234415e0) + pow(R - 0.525e1, 2) * 0.409691077937359205e0 + pow(R - 0.525e1, 3) * (-0.155276988177686232e0) : (R < 0.575e1 ? 0.407625342008290370e0 + R * (-0.242699656378709723e-1) + pow(R - 0.55e1, 2) * 0.293233336804094524e0 + pow(R - 0.55e1, 3) * (-0.312941532210442463e0) : (R < 0.60e1 ? -0.845930397796303413e-1 + R * 0.636701654747183210e-1 + pow(R - 0.575e1, 2) * 0.585271876462626559e-1 + pow(R - 0.575e1, 3) * (-0.511111954980543626e0) : (R < 0.625e1 ? 0.310498171566013725e0 + R * (-0.289973226100229131e-2) + pow(R - 0.60e1, 2) * (-0.324806778589145084e0) + pow(R - 0.60e1, 3) * 0.853638033326167972e-1 : (R < 0.65e1 ? 0.120651703339193239e1 + R * (-0.149297408430709183e0) + pow(R - 0.625e1, 2) * (-0.260783926089682483e0) + pow(R - 0.625e1, 3) * 0.265238239250076557e0 : (R < 0.675e1 ? 0.171865104120504686e1 + R * (-0.229957201616161067e0) + pow(R - 0.65e1, 2) * (-0.618552466521250441e-1) + pow(R - 0.65e1, 3) * 0.199282228467077549e0 : (R < 0.70e1 ? 0.167444376015636398e1 + R * (-0.223519407104646517e0) + pow(R - 0.675e1, 2) * 0.876064246981831246e-1 + pow(R - 0.675e1, 3) * 0.303011284816119830e-1 : (R < 0.725e1 ? 0.133399989925676921e1 + R * (-0.174034733165252753e0) + pow(R - 0.70e1, 2) * 0.110332271059392112e0 + pow(R - 0.70e1, 3) * (-0.270526009535246650e-1) : (R < 0.75e1 ? 0.977293116138983620e0 + R * (-0.123940960314342569e0) + pow(R - 0.725e1, 2) * 0.900428203442486114e-1 + pow(R - 0.725e1, 3) * (-0.320225032275133561e-1) : (R < 0.775e1 ? 0.689791509670327541e0 + R * (-0.849237694973770108e-1) + pow(R - 0.75e1, 2) * 0.660259429236135925e-1 + pow(R - 0.75e1, 3) * (-0.271727781364223160e-1) : (R < 0.80e1 ? 0.477128470845157804e0 + R * (-0.570056939361493972e-1) + pow(R - 0.775e1, 2) * 0.456463593212968546e-1 + pow(R - 0.775e1, 3) * (-0.199859317467971018e-1) : (R < 0.825e1 ? 0.327062548454203406e0 + R * (-0.379298764780254261e-1) + pow(R - 0.80e1, 2) * 0.306569105111990266e-1 + pow(R - 0.80e1, 3) * (-0.138825758363893079e-1) : (R < 0.85e1 ? 0.223776543751928514e0 + R * (-0.252044041917489081e-1) + pow(R - 0.825e1, 2) * 0.202449786339070452e-1 + pow(R - 0.825e1, 3) * (-0.923763370764563510e-2) : (R < 0.875e1 ? 0.153578836417321063e0 + R * (-0.168139711949789467e-1) + pow(R - 0.85e1, 2) * 0.133167533531728180e-1 + pow(R - 0.85e1, 3) * (-0.611844786102816191e-2) : (R < 0.90e1 ? 0.106092815355934011e0 + R * (-0.113028034923353168e-1) + pow(R - 0.875e1, 2) * 0.872791745740169635e-2 + pow(R - 0.875e1, 3) * (-0.376905894424170527e-2) : (R < 0.925e1 ? 0.736640770611180912e-1 + R * (-0.764554331567978817e-2) + pow(R - 0.90e1, 2) * 0.590112324922041718e-2 + pow(R - 0.90e1, 3) * (-0.255275341800505207e-2) : (R < 0.95e1 ? 0.511277471737461298e-1 + R * (-0.517362295694552728e-2) + pow(R - 0.925e1, 2) * 0.398655818571662813e-2 + pow(R - 0.925e1, 3) * (-0.173705083973808546e-2) : (R < 0.100e2 ? 0.355077360671119877e-1 + R * (-0.350604089653810394e-2) + pow(R - 0.95e1, 2) * 0.268377005591306393e-2 + pow(R - 0.95e1, 3) * (-0.989906573673711866e-3) : (R < 0.105e2 ? 0.166415390032032401e-1 + R * (-0.156470077088032380e-2) + pow(R - 0.100e2, 2) * 0.119891019540249613e-2 + pow(R - 0.100e2, 3) * (-0.424952712083696946e-3) : (R < 0.110e2 ? 0.764609301897630541e-2 + R * (-0.684505109540600514e-3) + pow(R - 0.105e2, 2) * 0.561481127276950657e-3 + pow(R - 0.105e2, 3) * (-0.237804711591499635e-3) : (R < 0.120e2 ? 0.354233418243001886e-2 + R * (-0.301377515957274435e-3) + pow(R - 0.110e2, 2) * 0.204774059889701205e-3 + pow(R - 0.110e2, 3) * (-0.579739505324267036e-4) : (R < 0.140e2 ? 0.861619073591826093e-3 + R * (-0.657512477751521764e-4) + pow(R - 0.120e2, 2) * 0.308522082924210940e-4 + pow(R - 0.120e2, 3) * (-0.542186593367250319e-5) : (R < 0.160e2 ? 0.124802791773529799e-3 + R * (-0.740480580953784308e-5) + pow(R - 0.140e2, 2) * (-0.167898730961392774e-5) + pow(R - 0.140e2, 3) * 0.670724353441424578e-6 : (R < 0.180e2 ? 0.102128749319143350e-3 + R * (-0.607206280669645911e-5) + pow(R - 0.160e2, 2) * 0.234535881103462015e-5 + pow(R - 0.160e2, 3) * (-0.314995524968195310e-6) : (R < 0.200e2 ? 0.816341936197380655e-5 + R * (-0.470573862176322658e-6) + pow(R - 0.180e2, 2) * 0.455385661225448076e-6 + pow(R - 0.180e2, 3) * (-0.900344202061433735e-7) : (R < 0.250e2 ? -0.555790540333498203e-5 + R * 0.270555740251749111e-6 + pow(R - 0.200e2, 2) * (-0.848208600114121914e-7) + pow(R - 0.200e2, 3) * 0.706999816981247371e-8 : 0.115429130206093206e-5 + R * (-0.474029971264372831e-7) + pow(R - 0.250e2, 2) * 0.212291125357749151e-7 + pow(R - 0.250e2, 3) * (-0.217216248049749161e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4697299146e2 * (R - 0.300e2) * (R - 0.250e2) - 0.5010462768e3 * R - 0.2943590722e5 + 0.2505231384e2 * R * R + 0.75000e3 * (-0.918574145e-1 * R + 0.3799542105e1) * R) * pow(R, -6));
}

static double radcoeff_6_4_10_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.772057850700001103e0 + R * 0.222044604925031308e-15 + pow(R - 0.475e1, 2) * 0.981796113099350620e1 + pow(R - 0.475e1, 3) * (-0.184673519223740286e2) : (R < 0.525e1 ? -0.767874805405811589e1 + R * 0.144635208005162319e1 + pow(R - 0.50e1, 2) * (-0.403255281078701522e1) + pow(R - 0.50e1, 3) * 0.515657276552208987e1 : (R < 0.55e1 ? -0.234076134301591399e1 + R * 0.396933068193507432e0 + pow(R - 0.525e1, 2) * (-0.165123236645447424e0) + pow(R - 0.525e1, 3) * (-0.775629987714329006e0) : (R < 0.575e1 ? -0.110924343825890848e1 + R * 0.168940827174346997e0 + pow(R - 0.55e1, 2) * (-0.746845727431194151e0) + pow(R - 0.55e1, 3) * 0.810603582135224987e0 : (R < 0.60e1 ? 0.129993864122648628e0 + R * (-0.524938648908954142e-1) + pow(R - 0.575e1, 2) * (-0.138893040829775383e0) + pow(R - 0.575e1, 3) * 0.334482251173428113e0 : (R < 0.625e1 ? 0.166925924164591927e0 + R * (-0.592249632107653204e-1) + pow(R - 0.60e1, 2) * 0.111968647550295744e0 + pow(R - 0.60e1, 3) * 0.166466683571062257e0 : (R < 0.65e1 ? -0.368455161837229483e0 + R * 0.279718637339567144e-1 + pow(R - 0.625e1, 2) * 0.236818660228592437e0 + pow(R - 0.625e1, 3) * (-0.138171967857677047e0) : (R < 0.675e1 ? -0.957076492487100250e0 + R * 0.120473949874938493e0 + pow(R - 0.65e1, 2) * 0.133189684335334652e0 + pow(R - 0.65e1, 3) * (-0.182475452140354572e0) : (R < 0.70e1 ? -0.117017300667245294e1 + R * 0.152854644766289322e0 + pow(R - 0.675e1, 2) * (-0.366690476993128053e-2) + pow(R - 0.675e1, 3) * (-0.764892507809041000e-1) : (R < 0.725e1 ? -0.105837102441932918e1 + R * 0.136679457859904180e0 + pow(R - 0.70e1, 2) * (-0.610338428556093660e-1) + pow(R - 0.70e1, 3) * (-0.555549353602929896e-2) : (R < 0.75e1 ? -0.833472764807181354e0 + R * 0.105120881394093979e0 + pow(R - 0.725e1, 2) * (-0.652004630076313402e-1) + pow(R - 0.725e1, 3) * 0.149609446050215731e-1 : (R < 0.775e1 ? -0.613851121057899074e0 + R * 0.753258270037198696e-1 + pow(R - 0.75e1, 2) * (-0.539797545538651599e-1) + pow(R - 0.75e1, 3) * 0.192773163959427569e-1 : (R < 0.80e1 ? -0.435764449140455812e0 + R * 0.519504465510265551e-1 + pow(R - 0.775e1, 2) * (-0.395217672569080913e-1) + pow(R - 0.775e1, 3) * 0.160834832512074741e-1 : (R < 0.825e1 ? -0.304021411017391274e0 + R * 0.352052160321739069e-1 + pow(R - 0.80e1, 2) * (-0.274591548185024840e-1) + pow(R - 0.80e1, 3) * 0.117911384392274422e-1 : (R < 0.85e1 ? -0.210523775302291938e0 + R * 0.236864770802778096e-1 + pow(R - 0.825e1, 2) * (-0.186158009890819015e-1) + pow(R - 0.825e1, 3) * 0.817960459188264884e-2 : (R < 0.875e1 ? -0.145478547157076282e0 + R * 0.159122524467148578e-1 + pow(R - 0.85e1, 2) * (-0.124810975451699144e-1) + pow(R - 0.85e1, 3) * 0.556557951324195433e-2 : (R < 0.90e1 ? -0.100697880702549203e0 + R * 0.107152498328627662e-1 + pow(R - 0.875e1, 2) * (-0.830691291023844848e-2) + pow(R - 0.875e1, 3) * 0.365314826714953356e-2 : (R < 0.925e1 ? -0.699435619225067251e-1 + R * 0.724675867783407951e-2 + pow(R - 0.90e1, 2) * (-0.556705170987629831e-2) + pow(R - 0.90e1, 3) * 0.245548981815992429e-2 : (R < 0.95e1 ? -0.487642616211584751e-1 + R * 0.492363716380091621e-2 + pow(R - 0.925e1, 2) * (-0.372543434625635488e-2) + pow(R - 0.925e1, 3) * 0.166038090821076867e-2 : (R < 0.100e2 ? -0.342328981641414412e-1 + R * 0.337224141096225706e-2 + pow(R - 0.95e1, 2) * (-0.248014866509827826e-2) + pow(R - 0.95e1, 3) * 0.888601958347527894e-3 : (R < 0.105e2 ? -0.166048881222462530e-1 + R * 0.155854421462462518e-2 + pow(R - 0.100e2, 2) * (-0.114724572757698637e-2) + pow(R - 0.100e2, 3) * 0.403320074255472303e-3 : (R < 0.110e2 ? -0.797134999006205228e-2 + R * 0.713788542739243010e-3 + pow(R - 0.105e2, 2) * (-0.542265616193777860e-3) + pow(R - 0.105e2, 3) * 0.212748919830583571e-3 : (R < 0.120e2 ? -0.387057958960243054e-2 + R * 0.331084616418402802e-3 + pow(R - 0.110e2, 2) * (-0.223142236447902503e-3) + pow(R - 0.110e2, 3) * 0.616051776294997361e-4 : (R < 0.140e2 ? -0.894489368343163961e-3 + R * 0.696156764110969912e-4 + pow(R - 0.120e2, 2) * (-0.383267035594032945e-4) + pow(R - 0.120e2, 3) * 0.705699811567739892e-5 : (R < 0.160e2 ? -0.306204817625765430e-4 + R * 0.992839561612610528e-6 + pow(R - 0.140e2, 2) * 0.401528513466110411e-5 + pow(R - 0.140e2, 3) * (-0.940105526483704665e-6) : (R < 0.180e2 ? -0.985581729732411320e-4 + R * 0.577271378245257059e-5 + pow(R - 0.160e2, 2) * (-0.162534802424112387e-5) + pow(R - 0.160e2, 3) * 0.140985538757419198e-6 : (R < 0.200e2 ? -0.173594993860879030e-4 + R * 0.963148150577105680e-6 + pow(R - 0.180e2, 2) * (-0.779434791696608578e-6) + pow(R - 0.180e2, 3) * 0.150419240616527796e-6 : (R < 0.250e2 ? 0.698028095981989652e-5 + R * (-0.349560128810994821e-6) + pow(R - 0.200e2, 2) * 0.123080652002558195e-6 + pow(R - 0.200e2, 3) * (-0.105646768616718454e-7) : -0.222468123282996752e-5 + R * 0.888956265891986962e-7 + pow(R - 0.250e2, 2) * (-0.353895009225194786e-7) + pow(R - 0.250e2, 3) * 0.353528555133594790e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3494917248e1 * (R - 0.300e2) * (R - 0.250e2) - 0.3727882112e2 * R - 0.2190265182e4 + 0.1863941056e1 * R * R + 0.75000e3 * (-0.683470661e-2 * R + 0.2827118108e0) * R) * pow(R, -6));
}

static double radcoeff_6_6_0_1_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.515841796499999922e-1 + R * (-0.867361737988403547e-18) + pow(R - 0.475e1, 2) * (-0.227511062495089844e0) + pow(R - 0.475e1, 3) * 0.851471878780359348e0 : (R < 0.525e1 ? -0.281976603068862297e0 + R * 0.458954460237724626e-1 + pow(R - 0.50e1, 2) * 0.411092846590179695e0 + pow(R - 0.50e1, 3) * (-0.774088292981078174e0) : (R < 0.55e1 ? -0.585503988630778127e0 + R * 0.106300314384910125e0 + pow(R - 0.525e1, 2) * (-0.169473373145628992e0) + pow(R - 0.525e1, 3) * 0.269322735063953933e0 : (R < 0.575e1 ? -0.403575201101228409e0 + R * 0.720616406365869877e-1 + pow(R - 0.55e1, 2) * 0.325186781523364721e-1 + pow(R - 0.55e1, 3) * (-0.208137074794737753e0) : (R < 0.60e1 ? -0.273888341432265980e0 + R * 0.492952781887419089e-1 + pow(R - 0.575e1, 2) * (-0.123584127943716829e0) + pow(R - 0.575e1, 3) * 0.334541956029967072e-1 : (R < 0.625e1 ? 0.520267861553276936e-1 + R * (-0.622412410755461554e-2) + pow(R - 0.60e1, 2) * (-0.984934812414692967e-1) + pow(R - 0.60e1, 3) * 0.149664874526751035e0 : (R < 0.65e1 ? 0.180613061285771537e0 + R * (-0.274087007545234448e-1) + pow(R - 0.625e1, 2) * 0.137551746535939795e-1 + pow(R - 0.625e1, 3) * 0.228235472499991668e-1 : (R < 0.675e1 ? 0.109308861792285467e0 + R * (-0.162516983183516109e-1) + pow(R - 0.65e1, 2) * 0.308728350910933563e-1 + pow(R - 0.65e1, 3) * (-0.243857950467476561e-1) : (R < 0.70e1 ? 0.375248393614732931e-1 + R * (-0.538761734407011781e-2) + pow(R - 0.675e1, 2) * 0.125834888060326125e-1 + pow(R - 0.675e1, 3) * (-0.128962032678085585e-1) : (R < 0.725e1 ? 0.109938602036754145e-1 + R * (-0.151391105376791650e-2) + pow(R - 0.70e1, 2) * 0.291133635517619276e-2 + pow(R - 0.70e1, 3) * (-0.286595954281810509e-2) : (R < 0.75e1 ? 0.447335757402205804e-2 + R * (-0.595610290458214878e-3) + pow(R - 0.725e1, 2) * 0.761866698062613830e-3 + pow(R - 0.725e1, 3) * (-0.467075405719015631e-3) : (R < 0.775e1 ? 0.231350086098417547e-2 + R * (-0.302253579999223394e-3) + pow(R - 0.75e1, 2) * 0.411560143773352107e-3 + pow(R - 0.75e1, 3) * (-0.898351114258338879e-4) : (R < 0.80e1 ? 0.873565785526907060e-3 + R * (-0.113317591504891223e-3) + pow(R - 0.775e1, 2) * 0.344183810203976684e-3 + pow(R - 0.775e1, 3) * (-0.379086010977647064e-3) : (R < 0.825e1 ? 0.810478303896937455e-4 + R * (-0.123043134612117190e-4) + pow(R - 0.80e1, 2) * 0.598693019707413526e-4 + pow(R - 0.80e1, 3) * 0.143640500564221421e-4 : (R < 0.85e1 ? -0.184166160515339368e-3 + R * 0.203235969097381039e-4 + pow(R - 0.825e1, 2) * 0.706423395130579591e-4 + pow(R - 0.825e1, 3) * (-0.761386151040414406e-4) : (R < 0.875e1 ? -0.359824705265204109e-3 + R * 0.413687763342593032e-4 + pow(R - 0.85e1, 2) * 0.135383781850268702e-4 + pow(R - 0.85e1, 3) * (-0.974493217362564060e-4) : (R < 0.90e1 ? -0.259853813366715824e-3 + R * 0.298662176012246656e-4 + pow(R - 0.875e1, 2) * (-0.595486131171654360e-4) + pow(R - 0.875e1, 3) * 0.118041231777067093e-3 : (R < 0.925e1 ? -0.192957027036578220e-3 + R * 0.222246420008420241e-4 + pow(R - 0.90e1, 2) * 0.289823107156348769e-4 + pow(R - 0.90e1, 3) * (-0.215188769980011906e-3) : (R < 0.95e1 ? 0.446668787264830800e-4 + R * (-0.363209701259276476e-5) + pow(R - 0.925e1, 2) * (-0.132409266769374060e-3) + pow(R - 0.925e1, 3) * 0.232369678414980454e-3 : (R < 0.100e2 ? 0.255057603256474011e-3 + R * (-0.262674156944709493e-4) + pow(R - 0.95e1, 2) * 0.418679920418613011e-4 + pow(R - 0.95e1, 3) * (-0.226678710898388022e-4) : (R < 0.105e2 ? 0.140202301355874612e-4 + R * (-0.140032696998874607e-5) + pow(R - 0.100e2, 2) * 0.786618540710310113e-5 + pow(R - 0.100e2, 3) * (-0.301454759745121813e-5) : (R < 0.110e2 ? -0.432454264069723841e-4 + R * 0.420494773902594189e-5 + pow(R - 0.105e2, 2) * 0.334436401092627394e-5 + pow(R - 0.105e2, 3) * (-0.687438314595631623e-5) : (R < 0.120e2 ? -0.233429764633347515e-4 + R * 0.239352439048497739e-5 + pow(R - 0.110e2, 2) * (-0.696721070800820125e-5) + pow(R - 0.110e2, 3) * 0.310624506652322391e-5 : (R < 0.140e2 ? 0.281842924925410414e-4 + R * (-0.222216182596175339e-5) + pow(R - 0.120e2, 2) * 0.235152449156147047e-5 + pow(R - 0.120e2, 3) * (-0.604561978665296771e-6) : (R < 0.160e2 ? 0.263493551779207655e-5 + R * (-0.708076036994340386e-7) + pow(R - 0.140e2, 2) * (-0.127584738043031058e-5) + pow(R - 0.140e2, 3) * 0.377885411015013799e-6 : (R < 0.180e2 ? 0.965486271664817200e-5 + R * (-0.639572193240510787e-6) + pow(R - 0.160e2, 2) * 0.991465085659772209e-6 + pow(R - 0.160e2, 3) * (-0.237693507669758344e-6) : (R < 0.200e2 ? -0.832451351290659501e-5 + R * 0.473966057361477496e-6 + pow(R - 0.180e2, 2) * (-0.434695960358777961e-6) + pow(R - 0.180e2, 3) * 0.853653630140196033e-7 : (R < 0.250e2 ? 0.490761525510798081e-5 + R * (-0.240433427905399003e-6) + pow(R - 0.200e2, 2) * 0.774962177253396717e-7 + pow(R - 0.200e2, 3) * (-0.650747675525197211e-8) : -0.114094941140249411e-5 + R * 0.464679927040997641e-7 + pow(R - 0.250e2, 2) * (-0.201159336034399083e-7) + pow(R - 0.250e2, 3) * 0.204479210452399074e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3166294304e2 * (R - 0.300e2) * (R - 0.250e2) + 0.3377388044e3 * R + 0.1984192748e5 - 0.1688694022e2 * R * R + 0.75000e3 * (0.619183479e-1 * R - 0.2561162125e1) * R) * pow(R, -6));
}

static double radcoeff_6_6_1_1_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.269305467000000159e-1 + R * 0.346944695195361419e-17 + pow(R - 0.475e1, 2) * 0.189966669659935194e0 + pow(R - 0.475e1, 3) * (-0.276254234479740790e0) : (R < 0.525e1 ? -0.235302431585080990e0 + R * 0.431856658650161956e-1 + pow(R - 0.50e1, 2) * (-0.172240061998704015e-1) + pow(R - 0.50e1, 3) * (-0.195777211367774914e-1) : (R < 0.55e1 ? -0.172199998346659888e0 + R * 0.309028400519352139e-1 + pow(R - 0.525e1, 2) * (-0.319072970524535218e-1) + pow(R - 0.525e1, 3) * 0.119714390268506367e-1 : (R < 0.575e1 ? -0.986076302798362253e-1 + R * 0.171938363432429485e-1 + pow(R - 0.55e1, 2) * (-0.229287177823155434e-1) + pow(R - 0.55e1, 3) * 0.209053283737501306e-2 : (R < 0.60e1 ? -0.363418026567846955e-1 + R * 0.612145235909299004e-2 + pow(R - 0.575e1, 2) * (-0.213608181542842834e-1) + pow(R - 0.575e1, 3) * 0.261655578028492861e-1 : (R < 0.625e1 ? -0.262181501611054302e-2 + R * 0.347085369985090540e-3 + pow(R - 0.60e1, 2) * (-0.173664980214731585e-2) + pow(R - 0.60e1, 3) * 0.569117002482781402e-2 : (R < 0.65e1 ? -0.388374033824154989e-2 + R * 0.545854848566647960e-3 + pow(R - 0.625e1, 2) * 0.253172771647354510e-2 + pow(R - 0.625e1, 3) * (-0.511952889096054745e-2) : (R < 0.675e1 ? -0.579418923756406558e-2 + R * 0.851807039748317808e-3 + pow(R - 0.65e1, 2) * (-0.130791895174686571e-2) + pow(R - 0.65e1, 3) * 0.803708681414378357e-3 : (R < 0.70e1 ? -0.246634356167054619e-2 + R * 0.348542941640080876e-3 + pow(R - 0.675e1, 2) * (-0.705137440686081913e-3) + pow(R - 0.675e1, 3) * 0.939334011703033293e-3 : (R < 0.725e1 ? -0.126063240573951081e-2 + R * 0.172099348491358675e-3 + pow(R - 0.70e1, 2) * (-0.636931908806903186e-6) + pow(R - 0.70e1, 3) * (-0.218636034466511078e-3) : (R < 0.75e1 ? -0.964571164500011816e-3 + R * 0.130786626074484388e-3 + pow(R - 0.725e1, 2) * (-0.164613957758690232e-3) + pow(R - 0.725e1, 3) * 0.162855950163010634e-3 : (R < 0.775e1 ? -0.584028750957278240e-3 + R * 0.790151378507037675e-4 + pow(R - 0.75e1, 2) * (-0.424719951364322564e-4) + pow(R - 0.75e1, 3) * (-0.197876071465531261e-3) : (R < 0.80e1 ? -0.137657416770929007e-3 + R * 0.206773768827005159e-4 + pow(R - 0.775e1, 2) * (-0.190879048735580702e-3) + pow(R - 0.775e1, 3) * 0.197352499539114423e-3 : (R < 0.825e1 ? 0.320983721122047004e-3 + R * (-0.377585538215058741e-4) + pow(R - 0.80e1, 2) * (-0.428646740812448781e-4) + pow(R - 0.80e1, 3) * 0.302166569890734924e-4 : (R < 0.85e1 ? 0.448852203561585466e-3 + R * (-0.535252676766770274e-4) + pow(R - 0.825e1, 2) * (-0.202021813394397588e-4) + pow(R - 0.825e1, 3) * 0.140179946424591408e-3 : (R < 0.875e1 ? 0.312227359968181122e-3 + R * (-0.373426183917860161e-4) + pow(R - 0.85e1, 2) * 0.849327784790038004e-4 + pow(R - 0.85e1, 3) * (-0.687082185594388916e-4) : (R < 0.90e1 ? 0.576056079365655109e-4 + R * (-0.775902013217891488e-5) + pow(R - 0.875e1, 2) * 0.334016145594246249e-4 + pow(R - 0.875e1, 3) * 0.117454595891641231e-4 : (R < 0.925e1 ? -0.110250996921515035e-3 + R * 0.111440608205016708e-4 + pow(R - 0.90e1, 2) * 0.422107092512977181e-4 + pow(R - 0.90e1, 3) * (-0.508589428692176110e-4) : (R < 0.95e1 ? -0.215423549824093061e-3 + R * 0.227133636581722240e-4 + pow(R - 0.925e1, 2) * 0.406650209938451065e-5 + pow(R - 0.925e1, 3) * (-0.537871236962936307e-4) : (R < 0.100e2 ? -0.139517388138189557e-3 + R * 0.146615290148094270e-4 + pow(R - 0.95e1, 2) * (-0.362738406728357166e-4) + pow(R - 0.95e1, 3) * 0.242188067904337270e-4 : (R < 0.105e2 ? 0.355388583430099473e-4 + R * (-0.344820656520099442e-5) + pow(R - 0.100e2, 2) * 0.543695128148765389e-7 + pow(R - 0.100e2, 3) * 0.213934478717422445e-5 : (R < 0.110e2 ? 0.184016487361572202e-4 + R * (-0.178932846200544947e-5) + pow(R - 0.105e2, 2) * 0.326338669357621351e-5 + pow(R - 0.105e2, 3) * (-0.282344806473062924e-5) : (R < 0.120e2 ? 0.626075730614928890e-5 + R * (-0.643527816977208105e-6) + pow(R - 0.110e2, 2) * (-0.971785403519730783e-6) + pow(R - 0.110e2, 3) * 0.692662996096938870e-6 : (R < 0.140e2 ? 0.436861672371023774e-5 + R * (-0.509109635725853168e-6) + pow(R - 0.120e2, 2) * 0.110620358477108561e-5 + pow(R - 0.120e2, 3) * (-0.289169519204079450e-6) : (R < 0.160e2 ? -0.688684661163349389e-5 + R * 0.445670472909535308e-6 + pow(R - 0.140e2, 2) * (-0.628813530453391297e-6) + pow(R - 0.140e2, 3) * 0.177121445736811794e-6 : (R < 0.180e2 ? -0.174838080000338885e-5 + R * 0.558736999377118026e-7 + pow(R - 0.160e2, 2) * 0.433915143967479623e-6 + pow(R - 0.160e2, 3) * (-0.120458230555667741e-6) : (R < 0.200e2 ? -0.619929863421310841e-5 + R * 0.346035509139617137e-6 + pow(R - 0.180e2, 2) * (-0.288834239366526930e-6) + pow(R - 0.180e2, 3) * 0.559946938858591815e-7 : (R < 0.250e2 ? 0.276133457612360730e-5 + R * (-0.137365121696180378e-6) + pow(R - 0.200e2, 2) * 0.471339239486281459e-7 + pow(R - 0.200e2, 3) * (-0.402089683547841284e-8) : -0.807228850230502884e-6 + R * 0.324068551292201142e-7 + pow(R - 0.250e2, 2) * (-0.131795285835480442e-7) + pow(R - 0.250e2, 3) * 0.132266081954080432e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.4490285504e1 * (R - 0.300e2) * (R - 0.250e2) + 0.4789680860e2 * R + 0.2813722242e4 - 0.2394840430e1 * R * R + 0.75000e3 * (0.878067155e-2 * R - 0.3631949138e0) * R) * pow(R, -6));
}

static double radcoeff_6_6_2_1_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.381165267500000043e-1 + R * 0.130104260698260532e-17 + pow(R - 0.475e1, 2) * (-0.125683188019358238e0) + pow(R - 0.475e1, 3) * 0.551934391757432863e0 : (R < 0.525e1 ? -0.240578273354197791e0 + R * 0.406461044448395564e-1 + pow(R - 0.50e1, 2) * 0.288267605798716464e0 + pow(R - 0.50e1, 3) * (-0.547520317672298695e0) : (R < 0.55e1 ? -0.448853705468369391e0 + R * 0.821198477806417831e-1 + pow(R - 0.525e1, 2) * (-0.122372632455507543e0) + pow(R - 0.525e1, 3) * 0.170325103571761588e0 : (R < 0.575e1 ? -0.292963689055263266e0 + R * 0.528694884725933179e-1 + pow(R - 0.55e1, 2) * 0.537119522331366665e-2 + pow(R - 0.55e1, 3) * (-0.130704954214747704e0) : (R < 0.60e1 ? -0.169196161770663517e0 + R * 0.310479071689849576e-1 + pow(R - 0.575e1, 2) * (-0.926575204377471096e-1) + pow(R - 0.575e1, 3) * 0.332361557832290822e-1 : (R < 0.625e1 ? 0.661139441931988536e-1 + R * (-0.904907384053314258e-2) + pow(R - 0.60e1, 2) * (-0.677304036003252979e-1) + pow(R - 0.60e1, 3) * 0.110923411913831441e0 : (R < 0.65e1 ? 0.145283110193827447e0 + R * (-0.221161359068523938e-1) + pow(R - 0.625e1, 2) * 0.154621553350482895e-1 + pow(R - 0.625e1, 3) * 0.117139190574451803e-1 : (R < 0.675e1 ? 0.819041811973722916e-1 + R * (-0.121886984160572767e-1) + pow(R - 0.65e1, 2) * 0.242475946281321755e-1 + pow(R - 0.65e1, 3) * (-0.201596827676122602e-1) : (R < 0.70e1 ? 0.267836274513997934e-1 + R * (-0.384484162091848795e-2) + pow(R - 0.675e1, 2) * 0.912783255242297954e-2 + pow(R - 0.675e1, 3) * (-0.961685496939611133e-2) : (R < 0.725e1 ? 0.787856184088138456e-2 + R * (-0.108408565146876938e-2) + pow(R - 0.70e1, 2) * 0.191519132537589540e-2 + pow(R - 0.70e1, 3) * (-0.170606765240327108e-2) : (R < 0.75e1 ? 0.334822115214665397e-2 + R * (-0.446377673606435034e-3) + pow(R - 0.725e1, 2) * 0.635640586073442089e-3 + pow(R - 0.725e1, 3) * (-0.457137668990808372e-3) : (R < 0.775e1 ? 0.164000356194117904e-2 + R * (-0.214270693505490522e-3) + pow(R - 0.75e1, 2) * 0.292787334330335796e-3 + pow(R - 0.75e1, 3) * (-0.888221394734945054e-4) : (R < 0.80e1 ? 0.651433675298922340e-3 + R * (-0.845311774916028709e-4) + pow(R - 0.775e1, 2) * 0.226170729725214917e-3 + pow(R - 0.775e1, 3) * (-0.198153023675213819e-3) : (R < 0.825e1 ? 0.550198215247839741e-4 + R * (-0.859950456809799668e-5) + pow(R - 0.80e1, 2) * 0.775559619688045391e-4 + pow(R - 0.80e1, 3) * (-0.332508858256502199e-4) : (R < 0.85e1 ? -0.209135855052957633e-3 + R * 0.239439353239948613e-4 + pow(R - 0.825e1, 2) * 0.526177975995668724e-4 + pow(R - 0.825e1, 3) * (-0.123543604094185231e-3) : (R < 0.875e1 ? -0.234505632290007765e-3 + R * 0.270884083561185617e-4 + pow(R - 0.85e1, 2) * (-0.400399054710720640e-4) + pow(R - 0.85e1, 3) * 0.818329418823912663e-4 : (R < 0.90e1 ? -0.194812070504895288e-3 + R * 0.224121322235308895e-4 + pow(R - 0.875e1, 2) * 0.213348009407213823e-4 + pow(R - 0.875e1, 3) * (-0.130157980715379777e-3) : (R < 0.925e1 ? -0.718773756708208705e-4 + R * 0.867491130975787425e-5 + pow(R - 0.90e1, 2) * (-0.762836845958134434e-4) + pow(R - 0.90e1, 3) * 0.109853816499127756e-3 : (R < 0.95e1 ? 0.873556881897021037e-4 + R * (-0.886934039456238978e-5) + pow(R - 0.925e1, 2) * 0.610667777853238644e-5 + pow(R - 0.925e1, 3) * (-0.307262377713130047e-5) : (R < 0.100e2 ? 0.641557374593289937e-4 + R * (-0.639211846350831455e-5) + pow(R - 0.95e1, 2) * 0.380220994568391109e-5 + pow(R - 0.95e1, 3) * (-0.166993768533456224e-5) : (R < 0.105e2 ? 0.393999809179532549e-4 + R * (-0.384236178182532604e-5) + pow(R - 0.100e2, 2) * 0.129730341768206784e-5 + pow(R - 0.100e2, 3) * 0.353790896393716747e-5 : (R < 0.110e2 ? -0.131617358340098941e-5 + R * 0.108373358809618035e-6 + pow(R - 0.105e2, 2) * 0.660416686358781883e-5 + pow(R - 0.105e2, 3) * (-0.473094792241410835e-5) : (R < 0.120e2 ? -0.338720154977553993e-4 + R * 0.316432928058685476e-5 + pow(R - 0.110e2, 2) * (-0.492255020033343693e-6) + pow(R - 0.110e2, 3) * (-0.311779697553511218e-6) : (R < 0.140e2 ? -0.116378606223155974e-4 + R * 0.124448014785963319e-5 + pow(R - 0.120e2, 2) * (-0.142759411269387745e-5) + pow(R - 0.120e2, 3) * 0.116355597007030367e-6 : (R < 0.160e2 ? 0.439801377166411736e-4 + R * (-0.306962913883151259e-5) + pow(R - 0.140e2, 2) * (-0.729460530651695224e-6) + pow(R - 0.140e2, 3) * 0.472878337783725638e-6 : (R < 0.180e2 ? 0.738155403537349325e-6 + R * (-0.312931208033584352e-6) + pow(R - 0.160e2, 2) * 0.210780949605065903e-5 + pow(R - 0.160e2, 3) * (-0.541080214516933309e-6) : (R < 0.200e2 ? -0.300482057088853346e-4 + R * 0.162534420196585204e-5 + pow(R - 0.180e2, 2) * (-0.113867179105094104e-5) + pow(R - 0.180e2, 3) * 0.214649226171507527e-6 : (R < 0.250e2 ? 0.669222993919643153e-5 + R * (-0.353552248179821589e-6) + pow(R - 0.200e2, 2) * 0.149223565978104225e-6 + pow(R - 0.200e2, 3) * (-0.133076479948279815e-7) : -0.359468841492805183e-5 + R * 0.140609811989122078e-6 + pow(R - 0.250e2, 2) * (-0.503911539443154987e-7) + pow(R - 0.250e2, 3) * 0.491201437969821592e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1212208078e3 * (R - 0.300e2) * (R - 0.250e2) - 0.1293022092e4 * R - 0.7596490944e5 + 0.6465110460e2 * R * R + 0.75000e3 * (-0.2370537864e0 * R + 0.980540302e1) * R) * pow(R, -6));
}

static double radcoeff_6_6_2_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.534470282199999910e-1 + R * 0.867361737988403547e-18 + pow(R - 0.475e1, 2) * 0.156906219314708606e0 + pow(R - 0.475e1, 3) * (-0.673466379978834517e0) : (R < 0.525e1 ? 0.291839937683385786e0 + R * (-0.478218365886771551e-1) + pow(R - 0.50e1, 2) * (-0.348193565669417227e0) + pow(R - 0.50e1, 3) * 0.628502177376503379e0 : (R < 0.55e1 ? 0.575224465377779715e0 + R * (-0.104074461165291385e0) + pow(R - 0.525e1, 2) * 0.123183067362960294e0 + pow(R - 0.525e1, 3) * (-0.166962806967179078e0) : (R < 0.575e1 ? 0.413741572668865243e0 + R * (-0.737884537901573184e-1) + pow(R - 0.55e1, 2) * (-0.203903786242402938e-2) + pow(R - 0.55e1, 3) * 0.152439982972213117e0 : (R < 0.60e1 ? 0.257508884747956412e0 + R * (-0.462254759140793697e-1) + pow(R - 0.575e1, 2) * 0.112290949366735809e0 + pow(R - 0.575e1, 3) * (-0.299044037696732934e-1) : (R < 0.625e1 ? -0.391705810848487837e-1 + R * 0.431292306247479766e-2 + pow(R - 0.60e1, 2) * 0.898626465394808394e-1 + pow(R - 0.60e1, 3) * (-0.132391847189520073e0) : (R < 0.65e1 ? -0.161296862799126250e0 + R * 0.244207749841802019e-1 + pow(R - 0.625e1, 2) * (-0.943123885265922599e-2) + pow(R - 0.625e1, 3) * (-0.243837418082463106e-1) : (R < 0.675e1 ? -0.101898099593228639e0 + R * 0.151332039688044043e-1 + pow(R - 0.65e1, 2) * (-0.277190452088439607e-1) + pow(R - 0.65e1, 3) * 0.211378889825053762e-1 : (R < 0.70e1 ? -0.365011235670647319e-1 + R * 0.523703554860218204e-2 + pow(R - 0.675e1, 2) * (-0.118656284719649268e-1) + pow(R - 0.675e1, 3) * 0.119557403230247956e-1 : (R < 0.725e1 ? -0.112181264261080778e-1 + R * 0.154592262318686835e-2 + pow(R - 0.70e1, 2) * (-0.289882322969632926e-2) + pow(R - 0.70e1, 3) * 0.270645782139542499e-2 : (R < 0.75e1 ? -0.452787136781500777e-2 + R * 0.603971849850345934e-3 + pow(R - 0.725e1, 2) * (-0.868979863649760298e-3) + pow(R - 0.725e1, 3) * 0.552623104993505668e-3 : (R < 0.775e1 ? -0.209199962596811045e-2 + R * 0.273098750211748077e-3 + pow(R - 0.75e1, 2) * (-0.454512534904631020e-3) + pow(R - 0.75e1, 3) * 0.228011587110554424e-3 : (R < 0.80e1 ? -0.686937243119826882e-3 + R * 0.885946553426615385e-4 + pow(R - 0.775e1, 2) * (-0.283503844571715189e-3) + pow(R - 0.775e1, 3) * 0.329633202884276023e-3 : (R < 0.825e1 ? -0.599401406498456508e-4 + R * 0.864895859760570665e-5 + pow(R - 0.80e1, 2) * (-0.362789424085081653e-4) + pow(R - 0.80e1, 3) * (-0.101553620396586421e-4) : (R < 0.85e1 ? 0.102993461007946032e-3 + R * (-0.113946429890843680e-4) + pow(R - 0.825e1, 2) * (-0.438954639382521468e-4) + pow(R - 0.825e1, 3) * (-0.229442486776415308e-4) : (R < 0.875e1 ? 0.323014608693779944e-3 + R * (-0.376444215852682289e-4) + pow(R - 0.85e1, 2) * (-0.611036504464832966e-4) + pow(R - 0.85e1, 3) * 0.247006583694224871e-3 : (R < 0.90e1 ? 0.185138402741123791e-3 + R * (-0.218825123658427173e-4) + pow(R - 0.875e1, 2) * 0.124151287324185384e-3 + pow(R - 0.875e1, 3) * (-0.211456259539258089e-3) : (R < 0.925e1 ? -0.122545008427517405e-4 + R * 0.545082632639082309e-6 + pow(R - 0.90e1, 2) * (-0.344409073302581902e-4) + pow(R - 0.90e1, 3) * 0.113980323710807430e-3 : (R < 0.95e1 ? -0.510215425263990207e-4 + R * 0.469593966328637993e-5 + pow(R - 0.925e1, 2) * 0.510443354528473925e-4 + pow(R - 0.925e1, 3) * (-0.711901878159716521e-4) : (R < 0.100e2 ? -0.164596689599046195e-3 + R * 0.168699471742153897e-4 + pow(R - 0.95e1, 2) * (-0.234830540913134692e-5) + pow(R - 0.95e1, 3) * (-0.109234690145988668e-4) : (R < 0.105e2 ? -0.611401278773489559e-4 + R * 0.632904000413489481e-5 + pow(R - 0.100e2, 2) * (-0.187335089310296485e-4) + pow(R - 0.100e2, 3) * 0.986613305351971635e-5 : (R < 0.110e2 ? 0.544158075009271408e-4 + R * (-0.500486913675496554e-5) + pow(R - 0.105e2, 2) * (-0.393430935075007224e-5) + pow(R - 0.105e2, 3) * 0.662807507252000486e-5 : (R < 0.120e2 ? 0.428565230572653717e-4 + R * (-0.396812218311503371e-5) + pow(R - 0.110e2, 2) * 0.600780325802993590e-5 + pow(R - 0.110e2, 3) * (-0.199233395521490242e-5) : (R < 0.140e2 ? -0.255912634449015641e-4 + R * 0.207048246730013040e-5 + pow(R - 0.120e2, 2) * 0.308013923852280879e-7 + pow(R - 0.120e2, 3) * (-0.171148805392646676e-6) : (R < 0.160e2 ? 0.190873014190055442e-6 + R * 0.139902372129281743e-6 + pow(R - 0.140e2, 2) * (-0.996091439970652165e-6) + pow(R - 0.140e2, 3) * 0.263024315328005586e-6 : (R < 0.180e2 ? 0.115598853923761424e-4 + R * (-0.688171603817258937e-6) + pow(R - 0.160e2, 2) * 0.582054451997381560e-6 + pow(R - 0.160e2, 3) * (-0.128604180319375992e-6) : (R < 0.200e2 ? -0.127014783701559146e-5 + R * 0.967960403397550810e-7 + pow(R - 0.180e2, 2) * (-0.189570629918874525e-6) + pow(R - 0.180e2, 3) * 0.397941164744984829e-7 : (R < 0.250e2 ? 0.390498501473522285e-5 + R * (-0.183957081641761143e-6) + pow(R - 0.200e2, 2) * 0.491940689281163992e-7 + pow(R - 0.200e2, 3) * (-0.390837445915283412e-8) : -0.324025190573507102e-6 + R * 0.148555232029402840e-7 + pow(R - 0.250e2, 2) * (-0.943154795917611340e-8) + pow(R - 0.250e2, 3) * 0.101893048851761131e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.7226988224e2 * (R - 0.300e2) * (R - 0.250e2) + 0.7708790840e3 * R + 0.4528921340e5 - 0.3854395420e2 * R * R + 0.75000e3 * (0.1413279601e0 * R - 0.5845840088e1) * R) * pow(R, -6));
}

static double radcoeff_6_6_3_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.248838723700000007e-1 + pow(R - 0.475e1, 2) * (-0.182851961914302336e0) + pow(R - 0.475e1, 3) * 0.280040950377209330e0 : (R < 0.525e1 ? 0.212422778407122093e0 + R * (-0.389183027614244184e-1) + pow(R - 0.50e1, 2) * 0.271787508686046723e-1 + pow(R - 0.50e1, 3) * (-0.635569247562801920e-2) : (R < 0.55e1 ? 0.148934306392087240e0 + R * (-0.265206196663023350e-1) + pow(R - 0.525e1, 2) * 0.224119815118836579e-1 + pow(R - 0.525e1, 3) * (-0.557903845869727345e-2) : (R < 0.575e1 ? 0.943683170135143357e-1 + R * (-0.163606986213662431e-1) + pow(R - 0.55e1, 2) * 0.182277026678607026e-1 + pow(R - 0.55e1, 3) * 0.193201021441707921e-2 : (R < 0.60e1 ? 0.410501424073379598e-1 + R * (-0.688459537223268855e-2) + pow(R - 0.575e1, 2) * 0.196767103286735121e-1 + pow(R - 0.575e1, 3) * (-0.213503619893710278e-1) : (R < 0.625e1 ? 0.693536364881799927e-2 + R * (-0.104943308090299980e-2) + pow(R - 0.60e1, 2) * 0.366393883664524207e-2 + pow(R - 0.60e1, 3) * (-0.767819171613297064e-2) : (R < 0.65e1 ? 0.459246013337069256e-2 + R * (-0.657124609355310817e-3) + pow(R - 0.625e1, 2) * (-0.209470495045448613e-2) + pow(R - 0.625e1, 3) * 0.426415190670291835e-2 : (R < 0.675e1 ? 0.613902440019241814e-2 + R * (-0.904948602075756584e-3) + pow(R - 0.65e1, 2) * 0.110340897957270307e-2 + pow(R - 0.65e1, 3) * (-0.252449721878705759e-3) : (R < 0.70e1 ? 0.279954430771622159e-2 + R * (-0.400578435141662461e-3) + pow(R - 0.675e1, 2) * 0.914071688163673748e-3 + pow(R - 0.675e1, 3) * (-0.114798836254809524e-2) : (R < 0.725e1 ? 0.114622028733315433e-2 + R * (-0.158790409037593472e-3) + pow(R - 0.70e1, 2) * 0.530804162526022312e-4 + pow(R - 0.70e1, 3) * 0.159467019751086559e-3 : (R < 0.75e1 ? 0.742837496639636415e-3 + R * (-0.102350134707963636e-3) + pow(R - 0.725e1, 2) * 0.172680681065917157e-3 + pow(R - 0.725e1, 3) * (-0.166233985896250386e-3) : (R < 0.775e1 ? 0.337246621849139974e-3 + R * (-0.471786665305519985e-4) + pow(R - 0.75e1, 2) * 0.480051916437293676e-4 + pow(R - 0.75e1, 3) * 0.145384198073914532e-3 : (R < 0.80e1 ? -0.547629560238304286e-4 + R * 0.408346643017166853e-5 + pow(R - 0.775e1, 2) * 0.157043340199165273e-3 + pow(R - 0.775e1, 3) * (-0.147038423039407809e-3) : (R < 0.825e1 ? -0.454860948858922768e-3 + R * 0.550354322098653477e-4 + pow(R - 0.80e1, 2) * 0.467645229196094232e-4 + pow(R - 0.80e1, 3) * (-0.146414872636283205e-3) : (R < 0.85e1 ? -0.420644049496127323e-3 + R * 0.509649050503669483e-4 + pow(R - 0.825e1, 2) * (-0.630466315576029871e-4) + pow(R - 0.825e1, 3) * 0.424586429925408361e-4 : (R < 0.875e1 ? -0.223641325821668320e-3 + R * 0.274025848326668589e-4 + pow(R - 0.85e1, 2) * (-0.312026493131973567e-4) + pow(R - 0.85e1, 3) * (-0.137045294138803354e-4) : (R < 0.90e1 ? -0.668100403609491670e-4 + R * 0.923166091096561918e-5 + pow(R - 0.875e1, 2) * (-0.414810463736076091e-4) + pow(R - 0.875e1, 3) * (-0.417583462010194672e-4) : (R < 0.925e1 ? 0.187076837976764065e-3 + R * (-0.193385521885293410e-4) + pow(R - 0.90e1, 2) * (-0.727998060243722112e-4) + pow(R - 0.90e1, 3) * 0.137578438889958301e-3 : (R < 0.95e1 ? 0.282763011120846434e-3 + R * (-0.299424979088482650e-4) + pow(R - 0.925e1, 2) * 0.303840231430965081e-4 + pow(R - 0.925e1, 3) * 0.868831409718617964e-5 : (R < 0.100e2 ? 0.124997598059637223e-3 + R * (-0.131214274440776021e-4) + pow(R - 0.95e1, 2) * 0.369002587159861437e-4 + pow(R - 0.95e1, 3) * (-0.324322359436618831e-4) : (R < 0.105e2 ? 0.440781566337869163e-5 + R * (-0.545345685837869229e-6) + pow(R - 0.100e2, 2) * (-0.117480951995066793e-4) + pow(R - 0.100e2, 3) * 0.164552186783648355e-4 : (R < 0.110e2 ? -0.270215329900531369e-5 + R * 0.479731234290774815e-7 + pow(R - 0.105e2, 2) * 0.129347328180405723e-4 + pow(R - 0.105e2, 3) * (-0.117514572497974530e-4) : (R < 0.120e2 ? -0.462699409378371408e-4 + R * 0.416911300412155831e-5 + pow(R - 0.110e2, 2) * (-0.469245305665560724e-5) + pow(R - 0.110e2, 3) * 0.162654597453404826e-5 : (R < 0.140e2 ? 0.472737025685012413e-5 + R * (-0.336155185587510328e-6) + pow(R - 0.120e2, 2) * 0.187184866946538045e-6 + pow(R - 0.120e2, 3) * (-0.147566481451391465e-6) : (R < 0.160e2 ? 0.186043942080527840e-4 + R * (-0.135821349521805583e-5) + pow(R - 0.140e2, 2) * (-0.698214021761810717e-6) + pow(R - 0.140e2, 3) * 0.367932364310419244e-6 : (R < 0.180e2 ? -0.720231951935572570e-5 + R * 0.264118789459732863e-6 + pow(R - 0.160e2, 2) * 0.150938016410070496e-5 + pow(R - 0.160e2, 3) * (-0.424030376415285649e-6) : (R < 0.200e2 ? -0.216418523837242403e-4 + R * 0.121327492887912448e-5 + pow(R - 0.180e2, 2) * (-0.103480209439100904e-5) + pow(R - 0.180e2, 3) * 0.201229199000723328e-6 : (R < 0.250e2 ? 0.103179326218246276e-4 + R * (-0.511183060676231332e-6) + pow(R - 0.200e2, 2) * 0.172573099613330953e-6 + pow(R - 0.200e2, 3) * (-0.146633065868169385e-7) : -0.285022826424519558e-5 + R * 0.114799941445807833e-6 + pow(R - 0.250e2, 2) * (-0.473764991889231323e-7) + pow(R - 0.250e2, 3) * 0.476928021755231223e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3016685066e2 * (R - 0.300e2) * (R - 0.250e2) + 0.3217798588e3 * R + 0.1890466702e5 - 0.1608899294e2 * R * R + 0.75000e3 * (0.589931651e-1 * R - 0.2440174435e1) * R) * pow(R, -6));
}

static double radcoeff_6_6_4_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.544685728899999971e-1 + pow(R - 0.475e1, 2) * (-0.519582632312347303e-1) + pow(R - 0.475e1, 3) * (-0.276152913795061072e0) : (R < 0.525e1 ? 0.435695306920956593e0 + R * (-0.777578029521913128e-1) + pow(R - 0.50e1, 2) * (-0.259072948577530549e0) + pow(R - 0.50e1, 3) * 0.521254338185183297e0 : (R < 0.55e1 ? 0.594604597533982093e0 + R * (-0.109559088831234691e0) + pow(R - 0.525e1, 2) * 0.131867805061356952e0 + pow(R - 0.525e1, 3) * (-0.127654712865672593e0) : (R < 0.575e1 ? 0.369859189186784121e0 + R * (-0.675604449628698367e-1) + pow(R - 0.55e1, 2) * 0.361267704121024866e-1 + pow(R - 0.55e1, 3) * 0.104982206717507534e0 : (R < 0.60e1 ? 0.156709052764394091e0 + R * (-0.298128959972859299e-1) + pow(R - 0.575e1, 2) * 0.114863425450233134e0 + pow(R - 0.575e1, 3) * (-0.566436116043576576e-1) : (R < 0.625e1 ? -0.117863252872081492e0 + R * 0.169981395520135831e-1 + pow(R - 0.60e1, 2) * 0.723807167469648904e-1 + pow(R - 0.60e1, 3) * (-0.128260078444076858e0) : (R < 0.65e1 ? -0.191228482208697592e0 + R * 0.291397332172316156e-1 + pow(R - 0.625e1, 2) * (-0.238143420860927602e-1) + pow(R - 0.625e1, 3) * (-0.962736869933479567e-2) : (R < 0.675e1 ? -0.103737338842889742e0 + R * 0.154274305430599605e-1 + pow(R - 0.65e1, 2) * (-0.310348686105938569e-1) + pow(R - 0.65e1, 3) * 0.266695435774160668e-1 : (R < 0.70e1 ? -0.342712660420676773e-1 + R * 0.491053565852854479e-2 + pow(R - 0.675e1, 2) * (-0.110327109275318077e-1) + pow(R - 0.675e1, 3) * 0.112345587864705089e-1 : (R < 0.725e1 ? -0.109161406548810309e-1 + R * 0.150065996722586158e-2 + pow(R - 0.70e1, 2) * (-0.260679183767892472e-2) + pow(R - 0.70e1, 3) * 0.232185124150191286e-2 : (R < 0.75e1 ? -0.474943233891805729e-2 + R * 0.632611156168007933e-3 + pow(R - 0.725e1, 2) * (-0.865403406552489856e-3) + pow(R - 0.725e1, 3) * 0.534294903521832050e-3 : (R < 0.775e1 ? -0.230126112744579846e-2 + R * 0.300089747302106447e-3 + pow(R - 0.75e1, 2) * (-0.464682228911115819e-3) + pow(R - 0.75e1, 3) * 0.207963087450759824e-3 : (R < 0.80e1 ? -0.828607067937636721e-3 + R * 0.106741711743566035e-3 + pow(R - 0.775e1, 2) * (-0.308709913323045938e-3) + pow(R - 0.775e1, 3) * 0.359738102195126998e-3 : (R < 0.825e1 ? -0.147048029669035124e-3 + R * 0.198376492436293917e-4 + pow(R - 0.80e1, 2) * (-0.389063366767006751e-4) + pow(R - 0.80e1, 3) * (-0.144694548391267571e-3) : (R < 0.85e1 ? 0.232572490304189727e-3 + R * (-0.267457469180836053e-4) + pow(R - 0.825e1, 2) * (-0.147427247970151353e-3) + pow(R - 0.825e1, 3) * 0.323983582569943151e-3 : (R < 0.875e1 ? 0.338637499933006970e-3 + R * (-0.397124491712949412e-4) + pow(R - 0.85e1, 2) * 0.955604389573060233e-4 + pow(R - 0.85e1, 3) * (-0.122280232192504971e-3) : (R < 0.90e1 ? 0.125238484242445387e-3 + R * (-0.148597732287366149e-4) + pow(R - 0.875e1, 2) * 0.385026481292729615e-5 + pow(R - 0.875e1, 3) * 0.259251330800766420e-4 : (R < 0.925e1 ? 0.648093522668273438e-4 + R * (-0.807367836975859432e-5) + pow(R - 0.90e1, 2) * 0.232941146229847768e-4 + pow(R - 0.90e1, 3) * 0.956427234881984179e-4 : (R < 0.95e1 ? -0.205855976695881710e-3 + R * 0.215063895957709957e-4 + pow(R - 0.925e1, 2) * 0.950261572391336004e-4 + pow(R - 0.925e1, 3) * (-0.219418307352870292e-3) : (R < 0.100e2 ? -0.263880639834508809e-3 + R * 0.278785355866746127e-4 + pow(R - 0.95e1, 2) * (-0.695375732755191324e-4) + pow(R - 0.95e1, 3) * 0.522740326683397957e-4 : (R < 0.105e2 ? 0.285897086728966718e-4 + R * (-0.245351318758966704e-5) + pow(R - 0.100e2, 2) * 0.887347572699056784e-5 + pow(R - 0.100e2, 3) * (-0.171006348556224677e-4) : (R < 0.110e2 ? 0.701665026023174905e-4 + R * (-0.640551360231595083e-5) + pow(R - 0.105e2, 2) * (-0.167774765564431337e-4) + pow(R - 0.105e2, 3) * 0.212212904181500716e-4 : (R < 0.120e2 ? 0.781013909366118212e-4 + R * (-0.726702234514652918e-5) + pow(R - 0.110e2, 2) * 0.150544590707819736e-4 + pow(R - 0.110e2, 3) * (-0.618018371263544489e-5) : (R < 0.140e2 ? -0.518447377494330233e-4 + R * 0.430134465851108508e-5 + pow(R - 0.120e2, 2) * (-0.348609206712436020e-5) + pow(R - 0.120e2, 3) * 0.733809205646908714e-6 : (R < 0.160e2 ? 0.120225768375283025e-4 + R * (-0.837313142223450296e-6) + pow(R - 0.140e2, 2) * 0.916763166757092085e-6 + pow(R - 0.140e2, 3) * (-0.242066557072683474e-6) : (R < 0.180e2 ? 0.155703333347653923e-5 + R * (-0.750591600672837002e-7) + pow(R - 0.160e2, 2) * (-0.535636175679008761e-6) + pow(R - 0.160e2, 3) * 0.158417208356325289e-6 : (R < 0.200e2 ? 0.502951394163346835e-5 + R * (-0.316597362507414904e-6) + pow(R - 0.180e2, 2) * 0.414867074458943080e-6 + pow(R - 0.180e2, 3) * (-0.846413048401177845e-7) : (R < 0.250e2 ? -0.686360099433887652e-5 + R * 0.327175277246943842e-6 + pow(R - 0.200e2, 2) * (-0.929807545817636670e-7) + pow(R - 0.200e2, 3) * 0.753287149847498079e-8 : 0.874543664226732348e-6 + R * (-0.376669061850692929e-7) + pow(R - 0.250e2, 2) * 0.200123178953610499e-7 + pow(R - 0.250e2, 3) * (-0.210863120926943801e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1024305438e3 * (R - 0.300e2) * (R - 0.250e2) - 0.1092592528e4 * R - 0.6418990104e5 + 0.5462962640e2 * R * R + 0.75000e3 * (-0.2003088020e0 * R + 0.828550279e1) * R) * pow(R, -6));
}

static double radcoeff_6_6_4_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.691162809900000008e-1 + pow(R - 0.475e1, 2) * (-0.112928861244598250e0) + pow(R - 0.475e1, 3) * 0.645118758898392874e0 : (R < 0.525e1 ? -0.388571037565747679e0 + R * 0.644953366711495391e-1 + pow(R - 0.50e1, 2) * 0.370910207929196489e0 + pow(R - 0.50e1, 3) * (-0.634448445655178661e0) : (R < 0.55e1 ? -0.724406513655859396e0 + R * 0.130991357075401771e0 + pow(R - 0.525e1, 2) * (-0.104926126312187590e0) + pow(R - 0.525e1, 3) * 0.847863286823217488e-1 : (R < 0.575e1 ? -0.528528664258838154e0 + R * 0.944257305472433056e-1 + pow(R - 0.55e1, 2) * (-0.413363798004462712e-1) + pow(R - 0.55e1, 3) * (-0.119006164434107789e0) : (R < 0.60e1 ? -0.285826046361843555e0 + R * 0.514438848156249656e-1 + pow(R - 0.575e1, 2) * (-0.130591003126027116e0) + pow(R - 0.575e1, 3) * 0.449019125421089016e-1 : (R < 0.625e1 ? 0.479719660944590010e-1 + R * (-0.543250814574316662e-2) + pow(R - 0.60e1, 2) * (-0.969145687194454403e-1) + pow(R - 0.60e1, 3) * 0.141207148249672454e0 : (R < 0.65e1 ? 0.181502067634076836e0 + R * (-0.274134522086522947e-1) + pow(R - 0.625e1, 2) * 0.899079246780891059e-2 + pow(R - 0.625e1, 3) * 0.288880696912011126e-1 : (R < 0.675e1 ? 0.118087957795709617e0 + R * (-0.175015429076476325e-1) + pow(R - 0.65e1, 2) * 0.306568447362097450e-1 + pow(R - 0.65e1, 3) * (-0.228599815104768463e-1) : (R < 0.70e1 ? 0.451121364951109008e-1 + R * (-0.645936707275717066e-2) + pow(R - 0.675e1, 2) * 0.135118586033521077e-1 + pow(R - 0.675e1, 3) * (-0.129297798156937024e-1) : (R < 0.725e1 ? 0.154334307445658046e-1 + R * (-0.212777148652368644e-2) + pow(R - 0.70e1, 2) * 0.381452374158183088e-2 + pow(R - 0.70e1, 3) * (-0.324829889394833956e-2) : (R < 0.75e1 ? 0.620909155392361349e-2 + R * (-0.829565658348084588e-3) + pow(R - 0.725e1, 2) * 0.137829957112057611e-2 + pow(R - 0.725e1, 3) * (-0.106739856691295191e-2) : (R < 0.775e1 ? 0.261096301757981217e-2 + R * (-0.340553104083975004e-3) + pow(R - 0.75e1, 2) * 0.577750645935862120e-3 + pow(R - 0.75e1, 3) * (-0.330216611839848355e-3) : (R < 0.80e1 ? 0.882975059465120472e-3 + R * (-0.113593395836015544e-3) + pow(R - 0.775e1, 2) * 0.330088187055975826e-3 + pow(R - 0.775e1, 3) * (-0.362631886847654536e-3) : (R < 0.825e1 ? 0.121534529975702882e-3 + R * (-0.165427810919628600e-4) + pow(R - 0.80e1, 2) * 0.581142719202349178e-4 + pow(R - 0.80e1, 3) * 0.743984939504661159e-4 : (R < 0.85e1 ? -0.228477393561902673e-3 + R * 0.264640724838669880e-4 + pow(R - 0.825e1, 2) * 0.113913142383084508e-3 + pow(R - 0.825e1, 3) * (-0.256104713914209758e-3) : (R < 0.875e1 ? -0.301323425645506622e-3 + R * 0.354010098164949023e-4 + pow(R - 0.85e1, 2) * (-0.781653930525728376e-4) + pow(R - 0.85e1, 3) * 0.281962311463728745e-4 : (R < 0.90e1 ? -0.100540437188422576e-4 + R * 0.160510663015340085e-5 + pow(R - 0.875e1, 2) * (-0.570182196927931817e-4) + pow(R - 0.875e1, 3) * 0.186831970576718321e-3 : (R < 0.925e1 ? -0.693953946400234549e-4 + R * 0.812699126689149513e-5 + pow(R - 0.90e1, 2) * 0.831057582397455520e-4 + pow(R - 0.90e1, 3) * (-0.237533186157246144e-3) : (R < 0.95e1 ? -0.403052529010957303e-4 + R * 0.514239798228061924e-5 + pow(R - 0.925e1, 2) * (-0.950441313781890556e-4) + pow(R - 0.925e1, 3) * 0.124281638884266303e-3 : (R < 0.100e2 ? 0.185779344279132747e-3 + R * (-0.190768604160139750e-4) + pow(R - 0.95e1, 2) * (-0.183290221498931568e-5) + pow(R - 0.95e1, 3) * 0.247698609580345266e-4 : (R < 0.105e2 ? 0.209724163097739551e-4 + R * (-0.233236691247739554e-5) + pow(R - 0.100e2, 2) * 0.353218892220624753e-4 + pow(R - 0.100e2, 3) * (-0.397857028022153631e-4) : (R < 0.110e2 ? -0.327377514993973132e-4 + R * 0.315024520792355360e-5 + pow(R - 0.105e2, 2) * (-0.243566649812605761e-4) + pow(R - 0.105e2, 3) * 0.236446066108269377e-4 : (R < 0.120e2 ? 0.369839683363850025e-4 + R * (-0.347296481521681882e-5) + pow(R - 0.110e2, 2) * 0.111102449349798321e-4 + pow(R - 0.110e2, 3) * (-0.523368942676301315e-5) : (R < 0.140e2 ? -0.353725352314456775e-4 + R * 0.304645677445380645e-5 + pow(R - 0.120e2, 2) * (-0.459082334530920729e-5) + pow(R - 0.120e2, 3) * 0.117523851291615204e-5 : (R < 0.160e2 ? 0.153121166580487759e-4 + R * (-0.121397445178919829e-5) + pow(R - 0.140e2, 2) * 0.246060773218770492e-5 + pow(R - 0.140e2, 3) * (-0.631650636771552782e-6) : (R < 0.180e2 ? -0.161006301072478034e-4 + R * 0.104864883570298781e-5 + pow(R - 0.160e2, 2) * (-0.132929608844161198e-5) + pow(R - 0.160e2, 3) * 0.306081076445058994e-6 : (R < 0.200e2 ? 0.106266400062095277e-4 + R * (-0.595562600722751537e-6) + pow(R - 0.180e2, 2) * 0.507190370228742091e-6 + pow(R - 0.180e2, 3) * (-0.986080699836831356e-7) : (R < 0.250e2 ? -0.504275589496038259e-5 + R * 0.249902040388019145e-6 + pow(R - 0.200e2, 2) * (-0.844580496733567096e-7) + pow(R - 0.200e2, 3) * 0.717822880635057489e-8 : 0.139840487043136965e-5 + R * (-0.563112958692547890e-7) + pow(R - 0.250e2, 2) * 0.232153824219019187e-7 + pow(R - 0.250e2, 3) * (-0.233654123921019184e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1430882790e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1526276928e3 * R - 0.8966946036e4 + 0.7631384640e1 * R * R + 0.75000e3 * (-0.2798187527e-1 * R + 0.1157433908e1) * R) * pow(R, -6));
}

static double radcoeff_6_6_5_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.251760570599999997e-1 + pow(R - 0.475e1, 2) * 0.182399328342611328e0 + pow(R - 0.475e1, 3) * (-0.292268483930445300e0) : (R < 0.525e1 ? -0.200339411271735823e0 + R * 0.363993234343471667e-1 + pow(R - 0.50e1, 2) * (-0.368020346052226541e-1) + pow(R - 0.50e1, 3) * 0.291269935513358835e-1 : (R < 0.55e1 ? -0.134250972598709439e0 + R * 0.234596174226113195e-1 + pow(R - 0.525e1, 2) * (-0.149567894417207432e-1) + pow(R - 0.525e1, 3) * 0.408206031710182677e-2 : (R < 0.575e1 ? -0.982004434836414725e-1 + R * 0.167466090112075409e-1 + pow(R - 0.55e1, 2) * (-0.118952442038943729e-1) + pow(R - 0.55e1, 3) * (-0.731248787574316494e-2) : (R < 0.60e1 ? -0.569755507922114421e-1 + R * 0.942789543255851195e-2 + pow(R - 0.575e1, 2) * (-0.173796101107017466e-1) + pow(R - 0.575e1, 3) * 0.132971658098707812e-1 : (R < 0.625e1 ? -0.206744894123504636e-1 + R * 0.323130896655841101e-2 + pow(R - 0.60e1, 2) * (-0.740673575329866066e-2) + pow(R - 0.60e1, 3) * 0.103672719258600613e-1 : (R < 0.65e1 ? -0.997851933214901482e-2 + R * 0.147180457600784250e-2 + pow(R - 0.625e1, 2) * 0.368718191096385761e-3 + pow(R - 0.625e1, 3) * (-0.223861422371102138e-2) : (R < 0.675e1 ? -0.846047582836642262e-2 + R * 0.123642350461021879e-2 + pow(R - 0.65e1, 2) * (-0.131024247668688038e-2) + pow(R - 0.65e1, 3) * 0.286497896984019861e-3 : (R < 0.70e1 ? -0.447841999557115674e-2 + R * 0.635020621951282388e-3 + pow(R - 0.675e1, 2) * (-0.109536905394886546e-2) + pow(R - 0.675e1, 3) * 0.108206950297494247e-2 : (R < 0.725e1 ? -0.211639775925256046e-2 + R * 0.290224126784651467e-3 + pow(R - 0.70e1, 2) * (-0.283816926717658552e-3) + pow(R - 0.70e1, 3) * 0.494215995962105117e-4 : (R < 0.75e1 ? -0.117171023227830929e-2 + R * 0.157582213350111635e-3 + pow(R - 0.725e1, 2) * (-0.246750727020500667e-3) + pow(R - 0.725e1, 3) * 0.123559073360216258e-3 : (R < 0.775e1 ? -0.433641262777763976e-3 + R * 0.573741760949018675e-4 + pow(R - 0.75e1, 2) * (-0.154081422000338459e-3) + pow(R - 0.75e1, 3) * 0.998825278909239297e-4 : (R < 0.80e1 ? 0.102130247553232477e-4 + R * (-0.938560925719128671e-6) + pow(R - 0.775e1, 2) * (-0.791695260821455120e-4) + pow(R - 0.775e1, 3) * 0.288646710760880640e-4 : (R < 0.825e1 ? 0.279097037575203001e-3 + R * (-0.351111981400253727e-4) + pow(R - 0.80e1, 2) * (-0.575210227750794640e-4) + pow(R - 0.80e1, 3) * 0.144145949340723827e-3 : (R < 0.85e1 ? 0.292052707665979908e-3 + R * (-0.368443440261793855e-4) + pow(R - 0.825e1, 2) * 0.505884392304634060e-4 + pow(R - 0.825e1, 3) * 0.395182998170165404e-4 : (R < 0.875e1 ? 0.178488014896851699e-4 + R * (-0.414044319525707903e-5) + pow(R - 0.85e1, 2) * 0.802271640932258130e-4 + pow(R - 0.85e1, 3) * (-0.103736164288789954e-3) : (R < 0.90e1 ? -0.159559576693067440e-3 + R * 0.165226080472077061e-4 + pow(R - 0.875e1, 2) * 0.242504087663333979e-5 + pow(R - 0.875e1, 3) * 0.560124347781433026e-4 : (R < 0.925e1 ? -0.263966484977836183e-3 + R * 0.282374600064262416e-4 + pow(R - 0.90e1, 2) * 0.444343669602408214e-4 + pow(R - 0.90e1, 3) * (-0.130223078759783150e-3) : (R < 0.95e1 ? -0.242877367615557718e-3 + R * 0.260378162190873185e-4 + pow(R - 0.925e1, 2) * (-0.532329421095965408e-4) + pow(R - 0.925e1, 3) * 0.476284096689890587e-4 : (R < 0.100e2 ? -0.774418622986327183e-4 + R * 0.835167197722449539e-5 + pow(R - 0.95e1, 2) * (-0.175116348578547451e-4) + pow(R - 0.95e1, 3) * 0.864032689481150969e-5 : (R < 0.105e2 ? 0.295741667162161616e-4 + R * (-0.267971770952161614e-5) + pow(R - 0.100e2, 2) * (-0.455114451563747969e-5) + pow(R - 0.100e2, 3) * 0.505216478936142192e-5 : (R < 0.110e2 ? 0.370691208842493001e-4 + R * (-0.344173863313802854e-5) + pow(R - 0.105e2, 2) * 0.302710266840465404e-5 + pow(R - 0.105e2, 3) * (-0.142481818025719476e-5) : (R < 0.120e2 ? 0.161044149138889760e-4 + R * (-0.148324959992627042e-5) + pow(R - 0.110e2, 2) * 0.889875398018861790e-6 + pow(R - 0.110e2, 3) * (-0.218416824792591162e-6) : (R < 0.140e2 ? 0.328186962719584790e-5 + R * (-0.358749278266320639e-6) + pow(R - 0.120e2, 2) * 0.234624923641088252e-6 + pow(R - 0.120e2, 3) * (-0.248992223789639714e-7) : (R < 0.160e2 ? -0.493475082150650704e-5 + R * 0.280959747750464764e-6 + pow(R - 0.140e2, 2) * 0.852295893673044234e-7 + pow(R - 0.140e2, 3) * (-0.293869380337684115e-7) : (R < 0.180e2 ? -0.464132958533138300e-5 + R * 0.269234848814461453e-6 + pow(R - 0.160e2, 2) * (-0.910920388353060523e-7) + pow(R - 0.160e2, 3) * 0.116688988890376609e-7 : (R < 0.200e2 ? -0.874201913450405519e-6 + R * 0.448934801416891944e-7 + pow(R - 0.180e2, 2) * (-0.210786455010800870e-7) + pow(R - 0.180e2, 3) * 0.362776552761774374e-8 : (R < 0.250e2 ? -0.113866457775635599e-6 + R * 0.411208446878177967e-8 + pow(R - 0.200e2, 2) * 0.687947664626377125e-9 + pow(R - 0.200e2, 3) * (-0.102132466876546612e-9) : -0.899228652826138702e-7 + R * 0.333162609930455452e-8 + pow(R - 0.250e2, 2) * (-0.844039338521821907e-9) + pow(R - 0.250e2, 3) * 0.737930877321821920e-10)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1011992589e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1079459016e3 * R - 0.6341835904e4 + 0.5397295080e1 * R * R + 0.75000e3 * (-0.1979010898e-1 * R + 0.818591240e0) * R) * pow(R, -6));
}

static double radcoeff_6_6_6_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.869735136199999981e-1 + pow(R - 0.475e1, 2) * 0.537952077285038133e0 + pow(R - 0.475e1, 3) * (-0.542771880340152224e0) : (R < 0.525e1 ? -0.897863874813702556e0 + R * 0.167206311078740510e0 + pow(R - 0.50e1, 2) * 0.130873167029923937e0 + pow(R - 0.50e1, 3) * (-0.404858282819543613e0) : (R < 0.55e1 ? -0.841019903846449757e0 + R * 0.156731966565038044e0 + pow(R - 0.525e1, 2) * (-0.172770545084733801e0) + pow(R - 0.525e1, 3) * 0.934958877783263753e-1 : (R < 0.575e1 ? -0.471655824956090375e0 + R * 0.878771729811073377e-1 + pow(R - 0.55e1, 2) * (-0.102648629250989012e0) + pow(R - 0.55e1, 3) * (-0.699804087737614933e-1) : (R < 0.60e1 ? -0.108602370865562181e0 + R * 0.234315317105325549e-1 + pow(R - 0.575e1, 2) * (-0.155133935831310132e0) + pow(R - 0.575e1, 3) * 0.106752850036719540e0 : (R < 0.625e1 ? 0.228674622629425561e0 + R * (-0.341192768232375931e-1) + pow(R - 0.60e1, 2) * (-0.750692983037704736e-1) + pow(R - 0.60e1, 3) * 0.153584645746883380e0 : (R < 0.65e1 ? 0.280992102039888669e0 + R * (-0.428568048975821944e-1) + pow(R - 0.625e1, 2) * 0.401191860063920616e-1 + pow(R - 0.625e1, 3) * 0.420000511974678338e-2 : (R < 0.675e1 ? 0.148059065484818675e0 + R * (-0.220097109344336399e-1) + pow(R - 0.65e1, 2) * 0.432691898462021496e-1 + pow(R - 0.65e1, 3) * (-0.367967592178703590e-1) : (R < 0.70e1 ? 0.507258231416119892e-1 + R * (-0.727450836468325739e-2) + pow(R - 0.675e1, 2) * 0.156716204327993804e-1 + pow(R - 0.675e1, 3) * (-0.155298110002653929e-1) : (R < 0.725e1 ? 0.169948515448333018e-1 + R * (-0.235053771083332903e-2) + pow(R - 0.70e1, 2) * 0.402426218260033483e-2 + pow(R - 0.70e1, 3) * (-0.322922503066807188e-2) : (R < 0.75e1 ? 0.699768865427983361e-2 + R * (-0.943886312783425363e-3) + pow(R - 0.725e1, 2) * 0.160234340959928049e-2 + pow(R - 0.725e1, 3) * (-0.108352397466231600e-2) : (R < 0.775e1 ? 0.259582285866927047e-2 + R * (-0.345875353232969395e-3) + pow(R - 0.75e1, 2) * 0.789700428602543489e-3 + pow(R - 0.75e1, 3) * (-0.650618351322663395e-3) : (R < 0.80e1 ? 0.520353854646402134e-3 + R * (-0.730160798046970510e-4) + pow(R - 0.775e1, 2) * 0.301736665110545889e-3 + pow(R - 0.775e1, 3) * (-0.142517821327030683e-3) : (R < 0.825e1 ? -0.456184373194061152e-3 + R * 0.511301612517576403e-4 + pow(R - 0.80e1, 2) * 0.194848299115272876e-3 + pow(R - 0.80e1, 3) * (-0.378788752489213538e-3) : (R < 0.85e1 ? -0.667735311100748925e-3 + R * 0.775314197176665333e-4 + pow(R - 0.825e1, 2) * (-0.892432652516372908e-4) + pow(R - 0.825e1, 3) * 0.100995423923884662e-3 : (R < 0.875e1 ? -0.453412541239398231e-3 + R * 0.518464290775762628e-4 + pow(R - 0.85e1, 2) * (-0.134966973087237912e-4) + pow(R - 0.85e1, 3) * (-0.497908676863250077e-4) : (R < 0.90e1 ? -0.314297874105248743e-3 + R * 0.357622927320284240e-4 + pow(R - 0.875e1, 2) * (-0.508398480734675504e-4) + pow(R - 0.875e1, 3) * (-0.630328779785845717e-4) : (R < 0.925e1 ? 0.166870445912095578e-4 + R * (-0.147629592568995079e-5) + pow(R - 0.90e1, 2) * (-0.981145065574059826e-4) + pow(R - 0.90e1, 3) * 0.162509806288663140e-3 : (R < 0.95e1 ? 0.185020751200734552e-3 + R * (-0.200629605252686016e-4) + pow(R - 0.925e1, 2) * 0.237678481590913860e-4 + pow(R - 0.925e1, 3) * 0.712282920793205852e-5 : (R < 0.100e2 ? 0.610327176347386156e-4 + R * (-0.684350596923564430e-5) + pow(R - 0.95e1, 2) * 0.291099700650404298e-4 + pow(R - 0.95e1, 3) * (-0.245998834611382770e-4) : (R < 0.105e2 ? -0.413653499735107643e-4 + R * 0.381655149995107691e-5 + pow(R - 0.100e2, 2) * (-0.778985512666698573e-5) + pow(R - 0.100e2, 3) * 0.114135176455296620e-4 : (R < 0.110e2 ? -0.499740966780290666e-4 + R * 0.458683460743133939e-5 + pow(R - 0.105e2, 2) * 0.933042134162750898e-5 + pow(R - 0.105e2, 3) * (-0.132079898489803754e-4) : (R < 0.120e2 ? -0.429612085775592201e-4 + R * 0.401126356232356552e-5 + pow(R - 0.110e2, 2) * (-0.104815634318430533e-4) + pow(R - 0.110e2, 3) * 0.464841836651948632e-5 : (R < 0.140e2 ? 0.354201075269489296e-4 + R * (-0.300660820180407751e-5) + pow(R - 0.120e2, 2) * 0.346369166771540776e-5 + pow(R - 0.120e2, 3) * (-0.839309467281684289e-6) : (R < 0.160e2 ? -0.104023444291827673e-4 + R * 0.776444861677340578e-6 + pow(R - 0.140e2, 2) * (-0.157216513597469861e-5) + pow(R - 0.140e2, 3) * 0.415061272693014161e-6 : (R < 0.180e2 ? 0.755628955348454656e-5 + R * (-0.531480409905284137e-6) + pow(R - 0.160e2, 2) * 0.918202500183386146e-6 + pow(R - 0.160e2, 3) * (-0.219083639102872038e-6) : (R < 0.200e2 ? -0.931208352558832666e-5 + R * 0.512325921593795887e-6 + pow(R - 0.180e2, 2) * (-0.396299334433846081e-6) + pow(R - 0.180e2, 3) * 0.759516378184740511e-7 : (R < 0.250e2 ? 0.318588591749799514e-5 + R * (-0.161451762319899746e-6) + pow(R - 0.200e2, 2) * 0.594104924769982450e-7 + pow(R - 0.200e2, 3) * (-0.515122447140365951e-8) : -0.116683206487020655e-5 + R * 0.463113270948082640e-7 + pow(R - 0.250e2, 2) * (-0.178578745940566410e-7) + pow(R - 0.250e2, 3) * 0.177130999021899743e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1380778525e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1472830820e3 * R - 0.8652722948e4 + 0.7364154100e1 * R * R + 0.75000e3 * (-0.2700159716e-1 * R + 0.1116880139e1) * R) * pow(R, -6));
}

static double radcoeff_6_6_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.103618874499999999e0 + pow(R - 0.475e1, 2) * (-0.757833480213790656e-1) + pow(R - 0.475e1, 3) * (-0.426458742954483772e0) : (R < 0.525e1 ? 0.681482438963276316e0 + R * (-0.117852688314655271e0) + pow(R - 0.50e1, 2) * (-0.395627405237241880e0) + pow(R - 0.50e1, 3) * 0.694553460223451768e0 : (R < 0.55e1 ? 0.102242900029223982e1 + R * (-0.185437617141378991e0) + pow(R - 0.525e1, 2) * 0.125287689930346918e0 + pow(R - 0.525e1, 3) * (-0.400778204993238463e-1) : (R < 0.575e1 ? 0.726422370047058230e0 + R * (-0.130308363519828774e0) + pow(R - 0.55e1, 2) * 0.952293245558540336e-1 + pow(R - 0.55e1, 3) * 0.107703644493844064e0 : (R < 0.60e1 ? 0.344154772461009395e0 + R * (-0.624992678993059811e-1) + pow(R - 0.575e1, 2) * 0.176007057926237082e0 + pow(R - 0.575e1, 3) * (-0.801609609960525771e-1) : (R < 0.625e1 ? -0.839373940923161532e-1 + R * 0.104740808770526911e-1 + pow(R - 0.60e1, 2) * 0.115886337179197649e0 + pow(R - 0.60e1, 3) * (-0.170929586109633630e0) : (R < 0.65e1 ? -0.241201967764345077e0 + R * 0.363679520710952150e-1 + pow(R - 0.625e1, 2) * (-0.123108524030275703e-1) + pow(R - 0.625e1, 3) * (-0.352438818934131745e-1) : (R < 0.675e1 ? -0.159558330326681930e0 + R * 0.236042980145664549e-1 + pow(R - 0.65e1, 2) * (-0.387437638230874529e-1) + pow(R - 0.65e1, 3) * 0.273373427392865111e-1 : (R < 0.70e1 ? -0.653912910868129083e-1 + R * 0.935816786663895041e-2 + pow(R - 0.675e1, 2) * (-0.182407567686225687e-1) + pow(R - 0.675e1, 3) * 0.164232414962670707e-1 : (R < 0.725e1 ? -0.239875810099441922e-1 + R * 0.331714726287774160e-2 + pow(R - 0.70e1, 2) * (-0.592332564642226479e-2) + pow(R - 0.70e1, 3) * 0.483395760524519321e-2 : (R < 0.75e1 ? -0.938136392661310242e-2 + R * 0.126185149065008309e-2 + pow(R - 0.725e1, 2) * (-0.229785744248836967e-2) + pow(R - 0.725e1, 3) * 0.172480849875214937e-2 : (R < 0.775e1 ? -0.330657642598444681e-2 + R * 0.436324362921926214e-3 + pow(R - 0.75e1, 2) * (-0.100425106842425764e-2) + pow(R - 0.75e1, 3) * 0.959410467586211020e-3 : (R < 0.80e1 ? -0.857021774772142621e-3 + R * 0.114088291382211947e-3 + pow(R - 0.775e1, 2) * (-0.284693217734599427e-3) + pow(R - 0.775e1, 3) * 0.935492821030064906e-4 : (R < 0.825e1 ? 0.125095554436192440e-3 + R * (-0.107178270907740559e-4) + pow(R - 0.80e1, 2) * (-0.214531256157344559e-3) + pow(R - 0.80e1, 3) * 0.339413794081763070e-3 : (R < 0.85e1 ? 0.476901410387705000e-3 + R * (-0.543433687791157564e-4) + pow(R - 0.825e1, 2) * 0.400290894039777436e-4 + pow(R - 0.825e1, 3) * (-0.491775317100589575e-4) : (R < 0.875e1 ? 0.386887890738485017e-3 + R * (-0.435496112727629429e-4) + pow(R - 0.85e1, 2) * 0.314594062143352681e-5 + pow(R - 0.85e1, 3) * 0.674565341664729891e-4 : (R < 0.90e1 ? 0.263704153788034250e-3 + R * (-0.293285408058324904e-4) + pow(R - 0.875e1, 2) * 0.537383412462882657e-4 + pow(R - 0.875e1, 3) * (-0.337336615318331956e-4) : (R < 0.925e1 ? 0.816387298811637477e-4 + R * (-0.878443171990708302e-5) + pow(R - 0.90e1, 2) * 0.284380950974133673e-4 + pow(R - 0.90e1, 3) * (-0.322081926791401133e-4) : (R < 0.95e1 ? 0.724775216648735544e-5 + R * (-0.604420298539173559e-6) + pow(R - 0.925e1, 2) * 0.428195058805827730e-5 + pow(R - 0.925e1, 3) * 0.248307684403936647e-4 : (R < 0.100e2 ? -0.566657167426058998e-4 + R * 0.619232407806377849e-5 + pow(R - 0.95e1, 2) * 0.229050269183535275e-4 + pow(R - 0.95e1, 3) * (-0.405452486929621644e-4) : (R < 0.105e2 ? 0.190314799140431720e-4 + R * (-0.131158552330431731e-5) + pow(R - 0.100e2, 2) * (-0.379128461210897225e-4) + pow(R - 0.100e2, 3) * 0.389014981113967059e-4 : (R < 0.110e2 ? 0.106151542292188294e-3 + R * (-0.100483080608465036e-4) + pow(R - 0.105e2, 2) * 0.204394010460053432e-4 + pow(R - 0.105e2, 3) * (-0.121373544006246671e-4) : (R < 0.120e2 ? -0.149560144469937218e-4 + R * 0.128807718469033845e-5 + pow(R - 0.110e2, 2) * 0.223336944506834168e-5 + pow(R - 0.110e2, 3) * (-0.158079125875868023e-5) : (R < 0.140e2 ? -0.109958176266117679e-4 + R * 0.101244229855098069e-5 + pow(R - 0.120e2, 2) * (-0.250900433120769901e-5) + pow(R - 0.120e2, 3) * 0.652785475841104201e-6 : (R < 0.160e2 ? 0.150267314616118849e-4 + R * (-0.119014931618656325e-5) + pow(R - 0.140e2, 2) * 0.140770852383892683e-5 + pow(R - 0.140e2, 3) * (-0.295762231647822540e-6) : (R < 0.180e2 ? -0.150155293455243749e-4 + R * 0.891537999395273479e-6 + pow(R - 0.160e2, 2) * (-0.366864866048008411e-6) + pow(R - 0.160e2, 3) * 0.531450798876858361e-7 : (R < 0.200e2 ? -0.112289507089845842e-5 + R * 0.618194938554699190e-7 + pow(R - 0.180e2, 2) * (-0.479943867218933883e-7) + pow(R - 0.180e2, 3) * 0.920354723457921562e-8 : (R < 0.250e2 ? 0.389455361543061200e-6 + R * (-0.197154862171530601e-7) + pow(R - 0.200e2, 2) * 0.722689668558190290e-8 + pow(R - 0.200e2, 3) * (-0.626072527630258333e-9) : -0.140969469359914917e-6 + R * 0.559804106639659719e-8 + pow(R - 0.250e2, 2) * (-0.216419122887197219e-8) + pow(R - 0.250e2, 3) * 0.214790111918530570e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1553396096e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1656879936e2 * R - 0.9738063272e3 + 0.8284399680e0 * R * R + 0.75000e3 * (-0.3038354862e-2 * R + 0.1256875190e0) * R) * pow(R, -6));
}

static double radcoeff_6_6_7_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.294454036500000176e-1 + R * (-0.346944695195361419e-17) + pow(R - 0.475e1, 2) * (-0.163619706744978916e0) + pow(R - 0.475e1, 3) * 0.250676249059915646e0 : (R < 0.525e1 ? 0.197176271738776360e0 + R * (-0.348080566737552707e-1) + pow(R - 0.50e1, 2) * 0.243874800499578291e-1 + pow(R - 0.50e1, 3) * (-0.214902703797469896e-1) : (R < 0.55e1 ? 0.155502053541139329e0 + R * (-0.266437423449789185e-1) + pow(R - 0.525e1, 2) * 0.826977726514758690e-2 + pow(R - 0.525e1, 3) * 0.412572461907235316e-2 : (R < 0.575e1 ? 0.129086838074809807e0 + R * (-0.217352803463290549e-1) + pow(R - 0.55e1, 2) * 0.113640707294518518e-1 + pow(R - 0.55e1, 3) * 0.861280902345746766e-2 : (R < 0.60e1 ? 0.879742795608029204e-1 + R * (-0.144383432897048549e-1) + pow(R - 0.575e1, 2) * 0.178236774970449534e-1 + pow(R - 0.575e1, 3) * (-0.816731879290211876e-2) : (R < 0.625e1 ? 0.446778461991091669e-1 + R * (-0.705787681485152765e-2) + pow(R - 0.60e1, 2) * 0.116981884023683643e-1 + pow(R - 0.60e1, 3) * (-0.113709438998490179e-1) : (R < 0.65e1 ? 0.219997981010564801e-1 + R * (-0.334083459488903646e-2) + pow(R - 0.625e1, 2) * 0.316998047748160089e-2 + pow(R - 0.625e1, 3) * (-0.899548238101826464e-3) : (R < 0.675e1 ? 0.129777543030501347e-1 + R * (-0.192450965079232848e-2) + pow(R - 0.65e1, 2) * 0.249531929890523104e-2 + pow(R - 0.65e1, 3) * (-0.119846538774366911e-2) : (R < 0.70e1 ? 0.621009086010614313e-2 + R * (-0.901562261541650816e-3) + pow(R - 0.675e1, 2) * 0.159647025809747916e-2 + pow(R - 0.675e1, 3) * (-0.126670307492350413e-2) : (R < 0.725e1 ? 0.236497989816747758e-2 + R * (-0.340833959041068261e-3) + pow(R - 0.70e1, 2) * 0.646442951904851060e-3 + pow(R - 0.70e1, 3) * (-0.407764846962312372e-3) : (R < 0.75e1 ? 0.609960895112052941e-3 + R * (-0.940683918940762805e-4) + pow(R - 0.725e1, 2) * 0.340619316683116755e-3 + pow(R - 0.725e1, 3) * (-0.230154188747246503e-3) : (R < 0.775e1 ? -0.326014666430300280e-3 + R * 0.330873560573733742e-4 + pow(R - 0.75e1, 2) * 0.168003675122681864e-3 + pow(R - 0.75e1, 3) * (-0.108323660768701487e-3) : (R < 0.80e1 ? -0.810813415480516600e-3 + R * 0.967785072245827842e-4 + pow(R - 0.775e1, 2) * 0.867609295461557490e-4 + pow(R - 0.775e1, 3) * (-0.200600290097947451e-3) : (R < 0.825e1 ? -0.854668519954364121e-3 + R * 0.102546417604295508e-3 + pow(R - 0.80e1, 2) * (-0.636892880273048667e-4) + pow(R - 0.80e1, 3) * (-0.472645701995087438e-4) : (R < 0.85e1 ? -0.523556914225440360e-3 + R * 0.618396666782351887e-4 + pow(R - 0.825e1, 2) * (-0.991377156769364246e-4) + pow(R - 0.825e1, 3) * 0.599409575998273133e-5 : (R < 0.875e1 ? -0.117877162199491695e-3 + R * 0.133947017947637283e-4 + pow(R - 0.85e1, 2) * (-0.946421438569493761e-4) + pow(R - 0.85e1, 3) * 0.145578379543577849e-3 : (R < 0.90e1 ? 0.537022164252884862e-4 + R * (-0.663042396929011227e-5) + pow(R - 0.875e1, 2) * 0.145416408007340104e-4 + pow(R - 0.875e1, 3) * (-0.697898619982942282e-4) : (R < 0.925e1 ? 0.105853610900429504e-3 + R * (-0.124452026936032774e-4) + pow(R - 0.90e1, 2) * (-0.378007556979866676e-4) + pow(R - 0.90e1, 3) * 0.103945878177599062e-3 : (R < 0.95e1 ? 0.996625806547452150e-4 + R * (-0.118557283842967803e-4) + pow(R - 0.925e1, 2) * 0.401586529352126423e-4 + pow(R - 0.925e1, 3) * (-0.226222043121020721e-4) : (R < 0.100e2 ? -0.486387754905088287e-4 + R * 0.398193477479040295e-5 + pow(R - 0.95e1, 2) * 0.231919997011360874e-4 + pow(R - 0.95e1, 3) * (-0.166296419734337864e-4) : (R < 0.105e2 ? -0.152117163022511459e-3 + R * 0.147017029958511480e-4 + pow(R - 0.100e2, 2) * (-0.175246325901459499e-5) + pow(R - 0.100e2, 3) * (-0.114856265293754090e-4) : (R < 0.110e2 ? -0.451408090152524658e-4 + R * 0.433501983980499689e-5 + pow(R - 0.105e2, 2) * (-0.189809030530777083e-4) + pow(R - 0.105e2, 3) * 0.151248326029354284e-4 : (R < 0.120e2 ? 0.360146339064825333e-4 + R * (-0.330225876107113926e-5) + pow(R - 0.110e2, 2) * 0.370634585132543385e-5 + pow(R - 0.110e2, 3) * (-0.100970051395429432e-5) : (R < 0.140e2 ? -0.138918026856021354e-4 + R * 0.108133139971684462e-5 + pow(R - 0.120e2, 2) * 0.677244309462550354e-6 + pow(R - 0.120e2, 3) * (-0.314117275785486340e-6) : (R < 0.160e2 ? 0.115025734802306354e-5 + R * 0.209013281412097444e-7 + pow(R - 0.140e2, 2) * (-0.120745934525036779e-5) + pow(R - 0.140e2, 3) * 0.346997790089881472e-6 : (R < 0.180e2 ? 0.975022468600693659e-5 + R * (-0.644962571781683543e-6) + pow(R - 0.160e2, 2) * 0.874527395288921148e-6 + pow(R - 0.160e2, 3) * (-0.202996873749039696e-6) : (R < 0.200e2 ? -0.749428845383944429e-5 + R * 0.417184524385524697e-6 + pow(R - 0.180e2, 2) * (-0.343453847205317028e-6) + pow(R - 0.180e2, 3) * 0.664501123562773294e-7 : (R < 0.250e2 ? 0.319177786710830539e-5 + R * (-0.159229516160415277e-6) + pow(R - 0.200e2, 2) * 0.552468269323470213e-7 + pow(R - 0.200e2, 3) * (-0.472563001525279271e-8) : -0.968905665977387145e-6 + R * 0.388165020190954871e-7 + pow(R - 0.250e2, 2) * (-0.156376232964448619e-7) + pow(R - 0.250e2, 3) * 0.156617362652515282e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2300014048e1 * (R - 0.300e2) * (R - 0.250e2) + 0.2453436964e2 * R + 0.1440960843e4 - 0.1226718482e1 * R * R + 0.75000e3 * (0.449714230e-2 * R - 0.1860069023e0) * R) * pow(R, -6));
}

static double radcoeff_6_6_8_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.112630981000000130e0 + R * (-0.277555756156289135e-16) + pow(R - 0.475e1, 2) * (-0.151640612890010984e1) + pow(R - 0.475e1, 3) * 0.231850947432043952e1 : (R < 0.525e1 ? 0.167149499855486217e1 + R * (-0.323482538014972454e0) + pow(R - 0.50e1, 2) * 0.222475976840219997e0 + pow(R - 0.50e1, 3) * 0.605345127186797810e-1 : (R < 0.55e1 ? 0.104275749870557743e1 + R * (-0.200894328460109989e0) + pow(R - 0.525e1, 2) * 0.267876861379229836e0 + pow(R - 0.525e1, 3) * (-0.879332147951595450e-1) : (R < 0.575e1 ? 0.412145605025231287e0 + R * (-0.834433755445875003e-1) + pow(R - 0.55e1, 2) * 0.201926950282860174e0 + pow(R - 0.55e1, 3) * (-0.844961961804080453e-2) : (R < 0.60e1 ? -0.146796221801144655e0 + R * 0.159357959184599426e-1 + pow(R - 0.575e1, 2) * 0.195589735569329570e0 + pow(R - 0.575e1, 3) * (-0.186861059372677302e0) : (R < 0.625e1 ? -0.514042082294486335e0 + R * 0.786942150707477250e-1 + pow(R - 0.60e1, 2) * 0.554439410398216009e-1 + pow(R - 0.60e1, 3) * (-0.178763930411250105e0) : (R < 0.65e1 ? -0.477143357190932094e0 + R * 0.728979486385491343e-1 + pow(R - 0.625e1, 2) * (-0.786290067686159777e-1) + pow(R - 0.625e1, 3) * 0.124999938176777459e-1 : (R < 0.675e1 ? -0.241552453181862192e0 + R * 0.359271940950557228e-1 + pow(R - 0.65e1, 2) * (-0.692540114053576683e-1) + pow(R - 0.65e1, 3) * 0.582040387245391783e-1 : (R < 0.70e1 ? -0.849035888072888489e-1 + R * 0.122134456532279785e-1 + pow(R - 0.675e1, 2) * (-0.256009823619532811e-1) + pow(R - 0.675e1, 3) * 0.240736249161654439e-1 : (R < 0.725e1 ? -0.281206942510265137e-1 + R * 0.392675914403235911e-2 + pow(R - 0.70e1, 2) * (-0.754576367482919820e-2) + pow(R - 0.70e1, 3) * 0.605439599159904741e-2 : (R < 0.75e1 ? -0.937450577315871586e-2 + R * 0.128907655504258145e-2 + pow(R - 0.725e1, 2) * (-0.300496668112991286e-2) + pow(R - 0.725e1, 3) * 0.258133299903834769e-2 : (R < 0.775e1 ? -0.188335733827986376e-2 + R * 0.270593151797315185e-3 + pow(R - 0.75e1, 2) * (-0.106896693185115198e-2) + pow(R - 0.75e1, 3) * 0.911761151447564424e-3 : (R < 0.80e1 ? 0.881422434196778878e-3 + R * (-0.929350982318424368e-4) + pow(R - 0.775e1, 2) * (-0.385146068265478667e-3) + pow(R - 0.775e1, 3) * 0.475187278371393444e-3 : (R < 0.825e1 ? 0.169257896165956375e-2 + R * (-0.196410517669945483e-3) + pow(R - 0.80e1, 2) * (-0.287556094869335602e-4) + pow(R - 0.80e1, 3) * 0.195199084826862127e-3 : (R < 0.85e1 ? 0.151050002655909879e-2 + R * (-0.174188494008375609e-3) + pow(R - 0.825e1, 2) * 0.117643704133213052e-3 + pow(R - 0.825e1, 3) * 0.130527432811573933e-4 : (R < 0.875e1 ? 0.997268155010692589e-3 + R * (-0.112919252576552061e-3) + pow(R - 0.85e1, 2) * 0.127433261594081098e-3 + pow(R - 0.85e1, 3) * (-0.385236272314913521e-4) : (R < 0.90e1 ? 0.510313108637391378e-3 + R * (-0.564258018854161576e-4) + pow(R - 0.875e1, 2) * 0.985405411704625838e-4 + pow(R - 0.875e1, 3) * (-0.133467583231918186e-4) : (R < 0.925e1 ? 0.953535687650499840e-4 + R * (-0.965804848578333196e-5) + pow(R - 0.90e1, 2) * 0.885304724280687190e-4 + pow(R - 0.90e1, 3) * (-0.197415403091741565e-3) : (R < 0.95e1 ? 0.307410123759172560e-4 + R * (-0.240820035145051415e-5) + pow(R - 0.925e1, 2) * (-0.595310798907374545e-4) + pow(R - 0.925e1, 3) * 0.141128086466158040e-3 : (R < 0.100e2 ? 0.606136716969387355e-4 + R * (-0.571222408441460382e-5) + pow(R - 0.95e1, 2) * 0.463149849588810822e-4 + pow(R - 0.95e1, 3) * (-0.598265069241037402e-4) : (R < 0.105e2 ? 0.502630569131133176e-4 + R * (-0.426711931861133181e-5) + pow(R - 0.100e2, 2) * (-0.434247754272745314e-4) + pow(R - 0.100e2, 3) * 0.450818496489943876e-4 : (R < 0.110e2 ? 0.145982670263070780e-3 + R * (-0.138805075091400725e-4) + pow(R - 0.105e2, 2) * 0.241979990462170500e-4 + pow(R - 0.105e2, 3) * (-0.137463491758738095e-4) : (R < 0.120e2 ? -0.245673242988781708e-5 + R * 0.772965517161972402e-8 + pow(R - 0.110e2, 2) * 0.357847528240633656e-5 + pow(R - 0.110e2, 3) * (-0.182047771557795634e-5) : (R < 0.140e2 ? -0.210449438799050864e-4 + R * 0.170324707325042384e-5 + pow(R - 0.120e2, 2) * (-0.188295786432753245e-5) + pow(R - 0.120e2, 3) * 0.451115923338660196e-6 : (R < 0.160e2 ? 0.469031733094096105e-5 + R * (-0.415193303995782909e-6) + pow(R - 0.140e2, 2) * 0.823737675704428942e-6 + pow(R - 0.140e2, 3) * (-0.199514407078268746e-6) : (R < 0.180e2 ? -0.802329230892332558e-5 + R * 0.485584513882707855e-6 + pow(R - 0.160e2, 2) * (-0.373348766765183480e-6) + pow(R - 0.160e2, 3) * 0.779737190494147709e-7 : (R < 0.200e2 ? 0.114589026883087724e-5 + R * (-0.721259245850487361e-7) + pow(R - 0.180e2, 2) * 0.944935475313051585e-7 + pow(R - 0.180e2, 3) * (-0.192782627693903866e-7) : (R < 0.250e2 ? -0.156306238104974342e-5 + R * 0.745091123074871791e-7 + pow(R - 0.200e2, 2) * (-0.211760290850371810e-7) + pow(R - 0.200e2, 3) * 0.171561122630794896e-8 : 0.199224517044711700e-6 + R * (-0.858033656978846840e-8) + pow(R - 0.250e2, 2) * 0.455813930958205352e-8 + pow(R - 0.250e2, 3) * (-0.480266773524871901e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2332164317e2 * (R - 0.300e2) * (R - 0.250e2) - 0.2487646156e3 * R - 0.1461474962e5 + 0.1243823078e2 * R * R + 0.75000e3 * (-0.456065194e-1 * R + 0.1886447028e1) * R) * pow(R, -6));
}

static double radcoeff_6_6_8_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.150123198099999994e0 + pow(R - 0.475e1, 2) * 0.887680445310305100e0 + pow(R - 0.475e1, 3) * (-0.100142226124122047e1) : (R < 0.525e1 ? -0.139065813646211867e1 + R * 0.256073548672423712e0 + pow(R - 0.50e1, 2) * 0.136613749379389804e0 + pow(R - 0.50e1, 3) * (-0.408299022356338803e0) : (R < 0.55e1 ? -0.134519119133910170e1 + R * 0.247824356670305085e0 + pow(R - 0.525e1, 2) * (-0.169610517387864340e0) + pow(R - 0.525e1, 3) * (-0.198262042134243650e-1) : (R < 0.575e1 ? -0.869226937204957251e0 + R * 0.159301684686355860e0 + pow(R - 0.55e1, 2) * (-0.184480170547932615e0) + pow(R - 0.55e1, 3) * (-0.622325966299632008e-1) : (R < 0.60e1 ? -0.284254323619560711e0 + R * 0.553929875442714312e-1 + pow(R - 0.575e1, 2) * (-0.231154618020405017e0) + pow(R - 0.575e1, 3) * 0.136469720973277059e0 : (R < 0.625e1 ? 0.243366270110649735e0 + R * (-0.345962487834416202e-1) + pow(R - 0.60e1, 2) * (-0.128802327290447216e0) + pow(R - 0.60e1, 3) * 0.210702646496854717e0 : (R < 0.65e1 ? 0.394198462425656038e0 + R * (-0.594906662105049652e-1) + pow(R - 0.625e1, 2) * 0.292246575821938394e-1 + pow(R - 0.625e1, 3) * 0.384263413593041447e-1 : (R < 0.675e1 ? 0.254813174434500411e0 + R * (-0.376733984145385253e-1) + pow(R - 0.65e1, 2) * 0.580444136016719514e-1 + pow(R - 0.65e1, 3) * (-0.382208112300714137e-1) : (R < 0.70e1 ? 0.110317068416551312e0 + R * (-0.158175937193409354e-1) + pow(R - 0.675e1, 2) * 0.293788051791183877e-1 + pow(R - 0.675e1, 3) * (-0.245457649830185878e-1) : (R < 0.725e1 ? 0.411602145756840912e-1 + R * (-0.573052206409772717e-2) + pow(R - 0.70e1, 2) * 0.109694814418544451e-1 + pow(R - 0.70e1, 3) * (-0.906976717385413710e-2) : (R < 0.75e1 ? 0.142689365789441316e-1 + R * (-0.194636268826815610e-2) + pow(R - 0.725e1, 2) * 0.416715606146384181e-2 + pow(R - 0.725e1, 3) * (-0.344523802716486909e-2) : (R < 0.775e1 ? 0.369358273382236219e-2 + R * (-0.508766787629648257e-3) + pow(R - 0.75e1, 2) * 0.158322754109019000e-2 + pow(R - 0.75e1, 3) * (-0.136479166788638679e-2) : (R < 0.80e1 ? -0.380584243997305867e-3 + R * 0.269485451867491394e-4 + pow(R - 0.775e1, 2) * 0.559633790175399857e-3 + pow(R - 0.775e1, 3) * (-0.757832530089585566e-3) : (R < 0.825e1 ? -0.145923463096121427e-2 + R * 0.164671840882651781e-3 + pow(R - 0.80e1, 2) * (-0.874060739178937037e-5) + pow(R - 0.80e1, 3) * 0.122993626447289794e-4 : (R < 0.85e1 ? -0.144255931248181099e-2 + R * 0.162607667682643762e-3 + pow(R - 0.825e1, 2) * 0.483914591757364585e-6 + pow(R - 0.825e1, 3) * (-0.130497902249329618e-3) : (R < 0.875e1 ? -0.123864370284757159e-2 + R * 0.138381268306773150e-3 + pow(R - 0.85e1, 2) * (-0.973895120952398554e-4) + pow(R - 0.85e1, 3) * (-0.125303263407410795e-3) : (R < 0.90e1 ? -0.615033628899807087e-3 + R * 0.661921503702636777e-4 + pow(R - 0.875e1, 2) * (-0.191366959650797952e-3) + pow(R - 0.875e1, 3) * 0.412687364198972807e-3 : (R < 0.925e1 ? -0.455804432469548971e-3 + R * 0.478875513321721065e-4 + pow(R - 0.90e1, 2) * 0.118148563498431653e-3 + pow(R - 0.90e1, 3) * (-0.431843847148480277e-3) : (R < 0.95e1 ? -0.252625641144692866e-3 + R * 0.259911117410478813e-4 + pow(R - 0.925e1, 2) * (-0.205734321862928595e-3) + pow(R - 0.925e1, 3) * 0.353202135114948253e-3 : (R < 0.100e2 ? 0.881314727754543652e-4 + R * (-0.106506488563636172e-4) + pow(R - 0.95e1, 2) * 0.591672794732825809e-4 + pow(R - 0.95e1, 3) * (-0.419671860171106774e-4) : (R < 0.105e2 ? -0.179241505212859490e-3 + R * 0.170412411040859506e-4 + pow(R - 0.100e2, 2) * (-0.378349955238344158e-5) + pow(R - 0.100e2, 3) * (-0.435441072757692158e-5) : (R < 0.110e2 ? -0.106713951662208082e-3 + R * 0.999193350601981739e-5 + pow(R - 0.105e2, 2) * (-0.103151156437488244e-4) + pow(R - 0.105e2, 3) * 0.137834050341837717e-5 : (R < 0.120e2 ? -0.702547508218254062e-5 + R * 0.710573239834776420e-6 + pow(R - 0.110e2, 2) * (-0.824760488862125840e-5) + pow(R - 0.110e2, 3) * 0.442818685678648108e-5 : (R < 0.140e2 ? 0.276828973685795673e-4 + R * (-0.250007596704829714e-5) + pow(R - 0.120e2, 2) * 0.503695568173818569e-5 + pow(R - 0.120e2, 3) * (-0.129297728285701832e-5) : (R < 0.160e2 ? -0.273624328246831308e-4 + R * 0.213201936562022370e-5 + pow(R - 0.140e2, 2) * (-0.272090801540392505e-5) + pow(R - 0.140e2, 3) * 0.608630534171906603e-6 : (R < 0.180e2 ? 0.239040298118215500e-4 + R * (-0.144804628593259685e-5) + pow(R - 0.160e2, 2) * 0.930875189627514777e-6 + pow(R - 0.160e2, 3) * (-0.178511064080608125e-6) : (R < 0.200e2 ? -0.226518175408296055e-5 + R * 0.133321703610164461e-6 + pow(R - 0.180e2, 2) * (-0.140191194856134002e-6) + pow(R - 0.180e2, 3) * 0.279868342755258858e-7 : (R < 0.250e2 ? 0.189640350306121832e-5 + R * (-0.916010645080609179e-7) + pow(R - 0.200e2, 2) * 0.277298107970213161e-7 + pow(R - 0.200e2, 3) * (-0.228896309508182694e-8) : -0.337118509875380687e-6 + R * 0.140248113310152273e-7 + pow(R - 0.250e2, 2) * (-0.660463562920609048e-8) + pow(R - 0.250e2, 3) * 0.682065173400608872e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2060230813e2 * (R - 0.300e2) * (R - 0.250e2) + 0.2197586808e3 * R + 0.1291065165e5 - 0.1098793404e2 * R * R + 0.75000e3 * (0.4028876610e-1 * R - 0.1666485432e1) * R) * pow(R, -6));
}

static double radcoeff_6_6_9_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.715279397599999922e-1 + pow(R - 0.475e1, 2) * 0.602532686384563032e0 + pow(R - 0.475e1, 3) * (-0.104155055993825219e1) : (R < 0.525e1 ? -0.580021940379296108e0 + R * 0.105975613203859231e0 + pow(R - 0.50e1, 2) * (-0.178630233569126134e0) + pow(R - 0.50e1, 3) * 0.233813346374756814e0 : (R < 0.55e1 ? -0.348788646158956106e0 + R * 0.605004988645630598e-1 + pow(R - 0.525e1, 2) * (-0.327022378805852517e-2) + pow(R - 0.525e1, 3) * (-0.674695007607748753e-1) : (R < 0.575e1 ? -0.271476208018386789e0 + R * 0.462148555778885070e-1 + pow(R - 0.55e1, 2) * (-0.538723493586396873e-1) + pow(R - 0.55e1, 3) * 0.375949551643426083e-1 : (R < 0.60e1 ? -0.159904865309326710e0 + R * 0.263277349918829041e-1 + pow(R - 0.575e1, 2) * (-0.256761329853827311e-1) + pow(R - 0.575e1, 3) * 0.449727850340445046e-2 : (R < 0.625e1 ? -0.894703930044792456e-1 + R * 0.143329082185798748e-1 + pow(R - 0.60e1, 2) * (-0.223031741078293932e-1) + pow(R - 0.60e1, 3) * 0.156558929980395826e-1 : (R < 0.65e1 ? -0.392690485782349885e-1 + R * 0.611680110179759883e-2 + pow(R - 0.625e1, 2) * (-0.105612543592997054e-1) + pow(R - 0.625e1, 3) * 0.788648739243723480e-2 : (R < 0.675e1 ? -0.150934804520132301e-1 + R * 0.231489030822972777e-2 + pow(R - 0.65e1, 2) * (-0.464638881497177886e-2) + pow(R - 0.65e1, 3) * 0.331359327221146961e-2 : (R < 0.70e1 ? -0.384430909266355062e-2 + R * 0.612994639283489053e-3 + pow(R - 0.675e1, 2) * (-0.216119386081317644e-2) + pow(R - 0.675e1, 3) * 0.197045736831688101e-2 : (R < 0.725e1 ? 0.102935790434578733e-2 + R * (-0.981415345636838942e-4) + pow(R - 0.70e1, 2) * (-0.683350834575515678e-3) + pow(R - 0.70e1, 3) * 0.667936569721005232e-3 : (R < 0.75e1 ? 0.256625548695846133e-2 + R * (-0.314578845028753279e-3) + pow(R - 0.725e1, 2) * (-0.182398407284761754e-3) + pow(R - 0.725e1, 3) * 0.409013197599098985e-3 : (R < 0.775e1 ? 0.267006563590977330e-2 + R * (-0.329088074121303067e-3) + pow(R - 0.75e1, 2) * 0.124361490914562471e-3 + pow(R - 0.75e1, 3) * (-0.957066571740110457e-5) : (R < 0.80e1 ? 0.220969528376676770e-2 + R * (-0.268701828486034538e-3) + pow(R - 0.775e1, 2) * 0.117183491626511642e-3 + pow(R - 0.775e1, 3) * 0.699165097505061010e-4 : (R < 0.825e1 ? 0.164450296632647039e-2 + R * (-0.197000737094558801e-3) + pow(R - 0.80e1, 2) * 0.169620873939391225e-3 + pow(R - 0.80e1, 3) * 0.529225908753761738e-4 : (R < 0.85e1 ? 0.874380448669773982e-3 + R * (-0.102267314335730176e-3) + pow(R - 0.825e1, 2) * 0.209312817095923357e-3 + pow(R - 0.825e1, 3) * (-0.163581393572010531e-3) : (R < 0.875e1 ? 0.256034913811424027e-3 + R * (-0.282824170825204759e-4) + pow(R - 0.85e1, 2) * 0.866267719169154450e-4 + pow(R - 0.85e1, 3) * (-0.937382364273341205e-4) : (R < 0.90e1 ? 0.347815941141441570e-4 + R * (-0.254495045418790392e-5) + pow(R - 0.875e1, 2) * 0.163230945964148546e-4 + pow(R - 0.875e1, 3) * (-0.206039749586529536e-4) : (R < 0.925e1 ? -0.320486752344885000e-5 + R * 0.175335153927209460e-5 + pow(R - 0.90e1, 2) * 0.870113377425139146e-6 + pow(R - 0.90e1, 3) * (-0.713435590980540657e-4) : (R < 0.95e1 ? 0.115446982391829403e-3 + R * (-0.111885091029004755e-4) + pow(R - 0.925e1, 2) * (-0.526375559461154149e-4) + pow(R - 0.925e1, 3) * 0.904177796068692262e-4 : (R < 0.100e2 ? 0.202541633770866907e-3 + R * (-0.205539533996702005e-4) + pow(R - 0.95e1, 2) * 0.151757787590365115e-4 + pow(R - 0.95e1, 3) * (-0.167641800739221580e-5) : (R < 0.105e2 ? 0.669413736744785211e-4 + R * (-0.663548814617785175e-5) + pow(R - 0.100e2, 2) * 0.126611517479481877e-4 + pow(R - 0.100e2, 3) * (-0.669434357278496882e-5) : (R < 0.110e2 ? -0.109542690529069024e-4 + R * 0.100490592218160979e-5 + pow(R - 0.105e2, 2) * 0.261963638877073449e-5 + pow(R - 0.105e2, 3) * (-0.405393566226790745e-5) : (R < 0.120e2 ? -0.617713297626554640e-5 + R * 0.584090564251413268e-6 + pow(R - 0.110e2, 2) * (-0.346126710463112711e-5) + pow(R - 0.110e2, 3) * 0.148235408637971395e-5 : (R < 0.140e2 ? 0.215496174064603888e-4 + R * (-0.189138138587169890e-5) + pow(R - 0.120e2, 2) * 0.985795154508014518e-6 + pow(R - 0.120e2, 3) * (-0.171915473036082449e-6) : (R < 0.160e2 ? -0.220525494218317269e-5 + R * (-0.111864442726305252e-7) + pow(R - 0.140e2, 2) * (-0.456976837084801862e-7) + pow(R - 0.140e2, 3) * 0.769739346723977131e-7 : (R < 0.180e2 ? -0.136265978993955409e-4 + R * 0.729710036962221341e-6 + pow(R - 0.160e2, 2) * 0.416145924325906159e-6 + pow(R - 0.160e2, 3) * (-0.149660121278508397e-6) : (R < 0.200e2 ? -0.107952155273274109e-4 + R * 0.598372278923745104e-6 + pow(R - 0.180e2, 2) * (-0.481814803345144224e-6) + pow(R - 0.180e2, 3) * 0.929131227416358158e-7 : (R < 0.250e2 ? 0.426686505084403935e-5 + R * (-0.213929461557201951e-6) + pow(R - 0.200e2, 2) * 0.756639331046706839e-7 + pow(R - 0.200e2, 3) * (-0.650148331864605803e-8) : -0.137992409007626182e-5 + R * 0.550986205910504723e-7 + pow(R - 0.250e2, 2) * (-0.218583166750201907e-7) + pow(R - 0.250e2, 3) * 0.218189804256201911e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3751737696e1 * (R - 0.300e2) * (R - 0.250e2) - 0.4001859892e2 * R - 0.2350949630e4 + 0.2000929946e1 * R * R + 0.75000e3 * (-0.733647064e-2 * R + 0.3034593881e0) * R) * pow(R, -6));
}

static double radcoeff_6_6_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.103388178600000005e0 + pow(R - 0.475e1, 2) * 0.934051008157294804e0 + pow(R - 0.475e1, 3) * (-0.155034959422917940e1) : (R < 0.525e1 ? -0.744132621603381450e0 + R * 0.176334955160676266e0 + pow(R - 0.50e1, 2) * (-0.228711187514589798e0) + pow(R - 0.50e1, 3) * (-0.151630750112460799e0) : (R < 0.55e1 ? -0.111679144257983698e-1 + R * 0.335485957572949287e-1 + pow(R - 0.525e1, 2) * (-0.342434250098935411e0) + pow(R - 0.525e1, 3) * 0.207464594679022701e0 : (R < 0.575e1 ? 0.698417903744207980e0 + R * (-0.987689177898559978e-1) + pow(R - 0.55e1, 2) * (-0.186835804089668378e0) + pow(R - 0.55e1, 3) * 0.781308929963696192e-1 : (R < 0.60e1 ? 0.114087952893775779e1 + R * (-0.177537277397870924e0) + pow(R - 0.575e1, 2) * (-0.128237634342391160e0) + pow(R - 0.575e1, 3) * 0.268295833335499556e0 : (R < 0.625e1 ? 0.121993688971196179e1 + R * (-0.191350625818660303e0) + pow(R - 0.60e1, 2) * 0.729842406592335208e-1 + pow(R - 0.60e1, 3) * 0.131553282141630645e0 : (R < 0.65e1 ? 0.844314170216798776e0 + R * (-0.130192265087487796e0) + pow(R - 0.625e1, 2) * 0.171649202265456519e0 + pow(R - 0.625e1, 3) * (-0.674768633420213121e-1) : (R < 0.675e1 ? 0.378365439208025511e0 + R * (-0.570195758313885373e-1) + pow(R - 0.65e1, 2) * 0.121041554758940531e0 + pow(R - 0.65e1, 3) * (-0.103342475749545526e0) : (R < 0.70e1 ? 0.106593383755966858e0 + R * (-0.158755126549580544e-1) + pow(R - 0.675e1, 2) * 0.435346979467813866e-1 + pow(R - 0.675e1, 3) * (-0.423641585237966370e-1) : (R < 0.725e1 ? 0.118838776494546335e-1 + R * (-0.205144340477923359e-2) + pow(R - 0.70e1, 2) * 0.117615790539339037e-1 + pow(R - 0.70e1, 3) * (-0.116193494192678749e-1) : (R < 0.75e1 ? -0.144032469480436884e-1 + R * 0.165071810607499148e-2 + pow(R - 0.725e1, 2) * 0.304706698948299702e-2 + pow(R - 0.725e1, 3) * (-0.443985890313185281e-2) : (R < 0.775e1 ? -0.194651276845945048e-1 + R * 0.234177805647926753e-2 + pow(R - 0.75e1, 2) * (-0.282827187865892799e-3) + pow(R - 0.75e1, 3) * (-0.812437432204704373e-3) : (R < 0.80e1 ? -0.172189702220615290e-1 + R * 0.204803244400793890e-2 + pow(R - 0.775e1, 2) * (-0.892155262019421079e-3) + pow(R - 0.775e1, 3) * (-0.361720276849341737e-3) : (R < 0.825e1 ? -0.131691803419118156e-1 + R * 0.153413226108897694e-2 + pow(R - 0.80e1, 2) * (-0.116344546965642739e-2) + pow(R - 0.80e1, 3) * 0.400500920402079887e-3 : (R < 0.85e1 ? -0.905595015579826329e-2 + R * 0.102750344883615306e-2 + pow(R - 0.825e1, 2) * (-0.863069779354867480e-3) + pow(R - 0.825e1, 3) * 0.402678464041018023e-3 : (R < 0.875e1 ? -0.607732240581448750e-2 + R * 0.671470771166410318e-3 + pow(R - 0.85e1, 2) * (-0.561060931324103935e-3) + pow(R - 0.85e1, 3) * 0.801720906338495508e-4 : (R < 0.90e1 ? -0.378802678675929433e-2 + R * 0.405972572498205088e-3 + pow(R - 0.875e1, 2) * (-0.500931863348716769e-3) + pow(R - 0.875e1, 3) * 0.403077173423584904e-3 : (R < 0.925e1 ? -0.223903629246692028e-2 + R * 0.231083610840768927e-3 + pow(R - 0.90e1, 2) * (-0.198623983281028118e-3) + pow(R - 0.90e1, 3) * 0.128076002871809641e-3 : (R < 0.95e1 ? -0.155294499868315235e-2 + R * 0.155785869738719169e-3 + pow(R - 0.925e1, 2) * (-0.102566981127170874e-3) + pow(R - 0.925e1, 3) * 0.460240573291768250e-4 : (R < 0.100e2 ? -0.115342350087136651e-2 + R * 0.113131889924354380e-3 + pow(R - 0.95e1, 2) * (-0.680489381302882521e-4) + pow(R - 0.95e1, 3) * 0.181283031231589789e-4 : (R < 0.105e2 ? -0.623642589634353594e-3 + R * 0.586791791364353659e-4 + pow(R - 0.100e2, 2) * (-0.408564834455497837e-4) + pow(R - 0.100e2, 3) * 0.140258599453580854e-4 : (R < 0.110e2 ? -0.313564048893993626e-3 + R * 0.283420906499041555e-4 + pow(R - 0.105e2, 2) * (-0.198176935275126539e-4) + pow(R - 0.105e2, 3) * 0.478490916740868708e-5 : (R < 0.120e2 ? -0.139401230458428154e-3 + R * 0.121130789979480154e-4 + pow(R - 0.110e2, 2) * (-0.126403297763996229e-4) + pow(R - 0.110e2, 3) * 0.427684118645160703e-5 : (R < 0.140e2 ? 0.163691287295690164e-5 + R * (-0.337056995496408457e-6) + pow(R - 0.120e2, 2) * 0.190193782955198465e-6 + pow(R - 0.120e2, 3) * 0.822463627715028840e-7 : (R < 0.160e2 ? -0.214125818841538819e-4 + R * 0.141067448958242006e-5 + pow(R - 0.140e2, 2) * 0.683671959584215716e-6 + pow(R - 0.140e2, 3) * (-0.314116203687712879e-6) : (R < 0.180e2 ? -0.463551798066765035e-5 + R * 0.375967883666728162e-6 + pow(R - 0.160e2, 2) * (-0.120102526254206167e-5) + pow(R - 0.160e2, 3) * 0.307908735979348731e-6 : (R < 0.200e2 ? 0.129891827880879990e-4 + R * (-0.733228334749333309e-6) + pow(R - 0.180e2, 2) * 0.646427153334030825e-6 + pow(R - 0.180e2, 3) * (-0.126281735829682096e-6) : (R < 0.250e2 ? -0.684191815281209736e-5 + R * 0.337099448630604889e-6 + pow(R - 0.200e2, 2) * (-0.111263261644061713e-6) + pow(R - 0.200e2, 3) * 0.940045459878814810e-8 : 0.174152016922253077e-5 + R * (-0.704990729009012364e-7) + pow(R - 0.250e2, 2) * 0.297435573377604949e-7 + pow(R - 0.250e2, 3) * (-0.300788425311604962e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3197733766e2 * (R - 0.300e2) * (R - 0.250e2) - 0.3410917484e3 * R - 0.2003911996e5 + 0.1705458742e2 * R * R + 0.75000e3 * (-0.625334486e-1 * R + 0.2586610302e1) * R) * pow(R, -6));
}

static double radcoeff_6_6_10_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.623066582800002600e-1 + R * (-0.555111512312578270e-16) + pow(R - 0.475e1, 2) * (-0.187504891443574628e1) + pow(R - 0.475e1, 3) * 0.322312240270298478e1 : (R < 0.525e1 ? 0.166142242222731729e1 + R * (-0.333189006711063440e0) + pow(R - 0.50e1, 2) * 0.542292887591492301e0 + pow(R - 0.50e1, 3) * (-0.507991757868953564e0) : (R < 0.55e1 ? 0.763913913207667217e0 + R * (-0.157291017515746145e0) + pow(R - 0.525e1, 2) * 0.161299069189777072e0 + pow(R - 0.525e1, 3) * 0.128196270372829907e0 : (R < 0.575e1 ? 0.200223327662736039e0 + R * (-0.526046822259520069e-1) + pow(R - 0.55e1, 2) * 0.257446271969399509e0 + pow(R - 0.55e1, 3) * (-0.101651048422365900e0) : (R < 0.60e1 ? -0.415840073302436330e0 + R * 0.570588821795541476e-1 + pow(R - 0.575e1, 2) * 0.181207985652625081e0 + pow(R - 0.575e1, 3) * (-0.163148687883366617e0) : (R < 0.625e1 ? -0.767145455536412557e0 + R * 0.117072496027735437e0 + pow(R - 0.60e1, 2) * 0.588464697401001186e-1 + pow(R - 0.60e1, 3) * (-0.196361913324167525e0) : (R < 0.65e1 ? -0.720319306834400597e0 + R * 0.109677872149504085e0 + pow(R - 0.625e1, 2) * (-0.884249652530255253e-1) + pow(R - 0.625e1, 3) * (-0.157355596199634240e-1) : (R < 0.675e1 ? -0.419532884922613258e0 + R * 0.625149720942481946e-1 + pow(R - 0.65e1, 2) * (-0.100226634967998093e0) + pow(R - 0.65e1, 3) * 0.650747860440212406e-1 : (R < 0.70e1 ? -0.168875639148146128e0 + R * 0.246031769935031314e-1 + pow(R - 0.675e1, 2) * (-0.514205454349821595e-1) + pow(R - 0.675e1, 3) * 0.429842711878784881e-1 : (R < 0.725e1 ? -0.478627409118749028e-1 + R * 0.695245512373927205e-2 + pow(R - 0.70e1, 2) * (-0.191823420440732882e-1) + pow(R - 0.70e1, 3) * 0.170364422732647916e-1 : (R < 0.75e1 ? -0.241836668456338593e-2 + R * 0.555617027939777340e-3 + pow(R - 0.725e1, 2) * (-0.640501033912469191e-2) + pow(R - 0.725e1, 3) * 0.699348993346233030e-2 : (R < 0.775e1 ? 0.114747870022378629e-1 + R * (-0.133560877909838179e-2) + pow(R - 0.75e1, 2) * (-0.115989288902794440e-2) + pow(R - 0.75e1, 3) * 0.207093518968588580e-2 : (R < 0.80e1 ? 0.129199093064834378e-1 + R * (-0.152725487554625011e-2) + pow(R - 0.775e1, 2) * 0.393308503236470001e-3 + pow(R - 0.775e1, 3) * 0.557612264594121868e-3 : (R < 0.825e1 ? 0.105435513697329387e-1 + R * (-0.122604832431661738e-2) + pow(R - 0.80e1, 2) * 0.811517701682061402e-3 + pow(R - 0.80e1, 3) * (-0.209836440062367895e-3) : (R < 0.85e1 ? 0.756807275549506702e-2 + R * (-0.859633805987280769e-3) + pow(R - 0.825e1, 2) * 0.654140371635285474e-3 + pow(R - 0.825e1, 3) * (-0.220404238744648616e-3) : (R < 0.875e1 ? 0.517668538854120647e-2 + R * (-0.573889414934259539e-3) + pow(R - 0.85e1, 2) * 0.488837192576799012e-3 + pow(R - 0.85e1, 3) * (-0.143910342559043383e-3) : (R < 0.90e1 ? 0.330242930221220617e-2 + R * (-0.356454007875680711e-3) + pow(R - 0.875e1, 2) * 0.380904435657516461e-3 + pow(R - 0.875e1, 3) * (-0.210526685419174322e-3) : (R < 0.925e1 ? 0.196414017116715908e-2 + R * (-0.205475543563017669e-3) + pow(R - 0.90e1, 2) * 0.223009421593135706e-3 + pow(R - 0.90e1, 3) * (-0.140909996724259974e-3) : (R < 0.95e1 ? 0.118884874201829918e-2 + R * (-0.120391457152248558e-3) + pow(R - 0.925e1, 2) * 0.117326924049940726e-3 + pow(R - 0.925e1, 3) * (-0.684124854437859534e-4) : (R < 0.100e2 ? 0.759669580145886660e-3 + R * (-0.745553361479880732e-4) + pow(R - 0.95e1, 2) * 0.660175599671012541e-4 + pow(R - 0.95e1, 3) * (-0.397909031022501789e-4) : (R < 0.105e2 ? 0.409456280845744600e-3 + R * (-0.383809535075744601e-4) + pow(R - 0.100e2, 2) * 0.633120531372597727e-5 + pow(R - 0.100e2, 3) * 0.177825571628458895e-4 : (R < 0.110e2 ? 0.206746608367997691e-3 + R * (-0.187128303217140640e-4) + pow(R - 0.105e2, 2) * 0.330050410579948132e-4 + pow(R - 0.105e2, 3) * (-0.235985104531333687e-4) : (R < 0.120e2 ? 0.436803144262620742e-4 + R * (-0.340667210356927947e-5) + pow(R - 0.110e2, 2) * (-0.239272462170524242e-5) + pow(R - 0.110e2, 3) * 0.122293933827452205e-5 : (R < 0.140e2 ? 0.559101038858743818e-4 + R * (-0.452330333215619814e-5) + pow(R - 0.120e2, 2) * 0.127609339311832374e-5 + pow(R - 0.120e2, 3) * (-0.151048264511234709e-8) : (R < 0.160e2 ? -0.102050753330604715e-4 + R * 0.562944448575748013e-6 + pow(R - 0.140e2, 2) * 0.126703049724764966e-5 + pow(R - 0.140e2, 3) * (-0.396038340267761784e-6) : (R < 0.180e2 ? -0.133558505586512835e-4 + R * 0.878606354353205235e-6 + pow(R - 0.160e2, 2) * (-0.110919954435892126e-5) + pow(R - 0.160e2, 3) * 0.253330945128659321e-6 : (R < 0.200e2 ? 0.937688187099421810e-5 + R * (-0.518220481538567624e-6) + pow(R - 0.180e2, 2) * 0.410786126413034775e-6 + pow(R - 0.180e2, 3) * (-0.790277587218754717e-7) : (R < 0.250e2 ? -0.350842371292131582e-5 + R * 0.176590919451065790e-6 + pow(R - 0.200e2, 2) * (-0.633804259182180285e-7) + pow(R - 0.200e2, 3) * 0.546454027040097414e-8 : 0.118922664547603651e-5 + R * (-0.473728194510414597e-7) + pow(R - 0.250e2, 2) * 0.185876781377965812e-7 + pow(R - 0.250e2, 3) * (-0.185091840231765788e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.7486296352e1 * (R - 0.300e2) * (R - 0.250e2) + 0.7985398604e2 * R + 0.4691362126e4 - 0.3992699302e1 * R * R + 0.75000e3 * (0.1463978401e-1 * R - 0.6055531548e0) * R) * pow(R, -6));
}

static double radcoeff_6_6_11_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.555132468000000337e-1 + R * 0.693889390390722838e-17 + pow(R - 0.475e1, 2) * 0.461762719822300882e0 + pow(R - 0.475e1, 3) * (-0.938509690169203492e0) : (R < 0.525e1 ? -0.315871255742123935e0 + R * 0.549107930044247794e-1 + pow(R - 0.50e1, 2) * (-0.242119547804601737e0) + pow(R - 0.50e1, 3) * 0.382734353067610500e0 : (R < 0.55e1 ? -0.662138190270796373e-1 + R * 0.561371030230088316e-2 + pow(R - 0.525e1, 2) * 0.449312169961061589e-1 + pow(R - 0.525e1, 3) * (-0.386969867412387397e-1) : (R < 0.575e1 ? -0.147664837545044336e0 + R * 0.208236337863716980e-1 + pow(R - 0.55e1, 2) * 0.159084769401771006e-1 + pow(R - 0.55e1, 3) * (-0.254102275426555876e-1) : (R < 0.60e1 ? -0.165409062175220861e0 + R * 0.240134545922123244e-1 + pow(R - 0.575e1, 2) * (-0.314919371681459314e-2) + pow(R - 0.575e1, 3) * 0.201487035186115630e-2 : (R < 0.625e1 ? -0.158393552428673978e0 + R * 0.228166459247789964e-1 + pow(R - 0.60e1, 2) * (-0.163804095291872581e-2) + pow(R - 0.60e1, 3) * (-0.344899530478903413e-2) : (R < 0.65e1 ? -0.149389151189198072e0 + R * 0.213509388286716902e-1 + pow(R - 0.625e1, 2) * (-0.422478743151050162e-2) + pow(R - 0.625e1, 3) * (-0.854990609270504277e-2) : (R < 0.675e1 ? -0.125636035483472575e0 + R * 0.176354377205342437e-1 + pow(R - 0.65e1, 2) * (-0.106372170010392841e-1) + pow(R - 0.65e1, 3) * 0.144245033160924252e-2 : (R < 0.70e1 ? -0.922033170820415193e-1 + R * 0.125872886571913346e-1 + pow(R - 0.675e1, 2) * (-0.955537925233235219e-2) + pow(R - 0.675e1, 3) * 0.316719801426805026e-2 : (R < 0.725e1 ? -0.634641608269029128e-1 + R * 0.840344865870041625e-2 + pow(R - 0.70e1, 2) * (-0.717998074163131439e-2) + pow(R - 0.70e1, 3) * 0.320850493931858563e-2 : (R < 0.75e1 ? -0.421969079470507075e-1 + R * 0.541505296400699408e-2 + pow(R - 0.725e1, 2) * (-0.477360203714237517e-2) + pow(R - 0.725e1, 3) * 0.224179022845759357e-2 : (R < 0.775e1 ? -0.277117399715370444e-1 + R * 0.344858761327160573e-2 + pow(R - 0.75e1, 2) * (-0.309225936579917999e-2) + pow(R - 0.75e1, 3) * 0.135140179485103299e-2 : (R < 0.80e1 ? -0.178651412195260269e-1 + R * 0.215584576690658423e-2 + pow(R - 0.775e1, 2) * (-0.207870801966090514e-2) + pow(R - 0.775e1, 3) * 0.104039662093827158e-2 : (R < 0.825e1 ? -0.112245671263164620e-1 + R * 0.131156612350205766e-2 + pow(R - 0.80e1, 2) * (-0.129841055395720135e-2) + pow(R - 0.80e1, 3) * 0.744010831795881983e-3 : (R < 0.85e1 ? -0.708904083705277650e-2 + R * 0.801862877485184965e-3 + pow(R - 0.825e1, 2) * (-0.740402430110289863e-3) + pow(R - 0.825e1, 3) * 0.302471021478199764e-3 : (R < 0.875e1 ? -0.446594274173622158e-2 + R * 0.488374978957202490e-3 + pow(R - 0.85e1, 2) * (-0.513549164001640039e-3) + pow(R - 0.85e1, 3) * 0.469935136691319497e-3 : (R < 0.90e1 ? -0.301490656910254323e-2 + R * 0.319713235086004923e-3 + pow(R - 0.875e1, 2) * (-0.161097811483150390e-3) + pow(R - 0.875e1, 3) * (-0.869245858434778383e-4) : (R < 0.925e1 ? -0.215470798868899922e-2 + R * 0.222865969498777688e-3 + pow(R - 0.90e1, 2) * (-0.226291250865758768e-3) + pow(R - 0.90e1, 3) * 0.228461830682592272e-3 : (R < 0.95e1 ? -0.151492292809968015e-2 + R * 0.152556937318884327e-3 + pow(R - 0.925e1, 2) * (-0.549448778538145778e-4) + pow(R - 0.925e1, 3) * (-0.616307413668907065e-4) : (R < 0.100e2 ? -0.114855203543400789e-2 + R * 0.113528734385685037e-3 + pow(R - 0.95e1, 2) * (-0.101167933878982611e-3) + pow(R - 0.95e1, 3) * 0.520442606152250438e-4 : (R < 0.105e2 ? -0.545991102151212196e-3 + R * 0.513939959681212157e-4 + pow(R - 0.100e2, 2) * (-0.231015429561450385e-4) + pow(R - 0.100e2, 3) * (-0.136724589201947744e-4) : (R < 0.110e2 ? -0.203238730219216048e-3 + R * 0.180381088218300998e-4 + pow(R - 0.105e2, 2) * (-0.436102313364372001e-4) + pow(R - 0.105e2, 3) * 0.363632250655540002e-4 : (R < 0.120e2 ? -0.298799470101424168e-4 + R * 0.170029628455840151e-5 + pow(R - 0.110e2, 2) * 0.109346062618938019e-4 + pow(R - 0.110e2, 3) * (-0.530839112545220184e-5) : (R < 0.140e2 ? -0.955822016428727354e-4 + R * 0.764433543198939474e-5 + pow(R - 0.120e2, 2) * (-0.499056711446280700e-5) + pow(R - 0.120e2, 3) * 0.102196647848405463e-5 : (R < 0.160e2 ? 0.412651751844451063e-6 + R * (-0.543352840531750751e-7) + pow(R - 0.140e2, 2) * 0.114123175644152204e-5 + pow(R - 0.140e2, 3) * (-0.350047500082467205e-6) : (R < 0.180e2 ? -0.365251361957289892e-5 + R * 0.310021740723306188e-6 + pow(R - 0.160e2, 2) * (-0.959053244053281407e-6) + pow(R - 0.160e2, 3) * 0.242426985595814148e-6 : (R < 0.200e2 ? 0.111382939718208927e-4 + R * (-0.617067408340049556e-6) + pow(R - 0.180e2, 2) * 0.495508669521603376e-6 + pow(R - 0.180e2, 3) * (-0.955144214507892895e-7) : (R < 0.250e2 ? -0.436101913523784929e-5 + R * 0.218794212336892474e-6 + pow(R - 0.200e2, 2) * (-0.775778591831323609e-7) + pow(R - 0.200e2, 3) * 0.666982107035077425e-8 : 0.142181230785307817e-5 + R * (-0.567477992181231254e-7) + pow(R - 0.250e2, 2) * 0.224694568721292471e-7 + pow(R - 0.250e2, 3) * (-0.224195817290092478e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.4756835680e1 * (R - 0.300e2) * (R - 0.250e2) + 0.5073989852e2 * R + 0.2980856278e4 - 0.2536994926e1 * R * R + 0.75000e3 * (0.930209994e-2 * R - 0.3847657505e0) * R) * pow(R, -6));
}

static double radcoeff_6_6_12_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.606818169399999385e-1 + R * (-0.138777878078144568e-16) + pow(R - 0.475e1, 2) * 0.863035183615323609e0 + pow(R - 0.475e1, 3) * (-0.157012577766129446e1) : (R < 0.525e1 ? -0.716870375720845443e0 + R * 0.137119008496169092e0 + pow(R - 0.50e1, 2) * (-0.314559149630647128e0) + pow(R - 0.50e1, 3) * 0.691140991223883061e0 : (R < 0.55e1 ? -0.580355390038449048e0 + R * 0.109428369535323616e0 + pow(R - 0.525e1, 2) * 0.203796593787265196e0 + pow(R - 0.525e1, 3) * (-0.342777040354238838e0) : (R < 0.575e1 ? -0.779925804233950304e0 + R * 0.147055971362536425e0 + pow(R - 0.55e1, 2) * (-0.532861864784139674e-1) + pow(R - 0.55e1, 3) * 0.100774987153073009e0 : (R < 0.60e1 ? -0.737131828613550977e0 + R * 0.139308188214530615e0 + pow(R - 0.575e1, 2) * 0.222950538863908032e-1 + pow(R - 0.575e1, 3) * (-0.345873225698053233e0) : (R < 0.625e1 ? -0.418920439646046139e0 + R * 0.856044853393410354e-1 + pow(R - 0.60e1, 2) * (-0.237109865387149094e0) + pow(R - 0.60e1, 3) * 0.775801703591397357e-1 : (R < 0.65e1 ? 0.217526451124342601e0 + R * (-0.184041654118948170e-1) + pow(R - 0.625e1, 2) * (-0.178924737617794288e0) + pow(R - 0.625e1, 3) * 0.138071782021494061e0 : (R < 0.675e1 ? 0.621731439536451935e0 + R * (-0.819780750917618317e-1) + pow(R - 0.65e1, 2) * (-0.753709011016737290e-1) + pow(R - 0.65e1, 3) * 0.134481060594884072e0 : (R < 0.70e1 ? 0.703296223692140954e0 + R * (-0.944483267810579119e-1) + pow(R - 0.675e1, 2) * 0.254898943444893424e-1 + pow(R - 0.675e1, 3) * 0.327474923989691524e-1 : (R < 0.725e1 ? 0.573205307678045672e0 + R * (-0.755632247840065246e-1) + pow(R - 0.70e1, 2) * 0.500505136437162101e-1 + pow(R - 0.70e1, 3) * (-0.106526167507603464e-1) : (R < 0.75e1 ? 0.409214806581140900e0 + R * (-0.525353336029159845e-1) + pow(R - 0.725e1, 2) * 0.420610510806459503e-1 + pow(R - 0.725e1, 3) * (-0.153376129159280093e-1) : (R < 0.775e1 ? 0.275443548682471395e0 + R * (-0.343806104843295199e-1) + pow(R - 0.75e1, 2) * 0.305578413936999430e-1 + pow(R - 0.75e1, 3) * (-0.136018890255275166e-1) : (R < 0.80e1 ? 0.178494493843186136e0 + R * (-0.216520439797659517e-1) + pow(R - 0.775e1, 2) * 0.203564246245543055e-1 + pow(R - 0.775e1, 3) * (-0.960371117396199327e-2) : (R < 0.825e1 ? 0.112596580657853398e0 + R * (-0.132745275126066754e-1) + pow(R - 0.80e1, 2) * 0.131536412440828102e-1 + pow(R - 0.80e1, 3) * (-0.676643440662443897e-2) : (R < 0.85e1 ? 0.695210157889106645e-1 + R * (-0.796641334180735357e-2) + pow(R - 0.825e1, 2) * 0.807881543911448050e-2 + pow(R - 0.825e1, 3) * (-0.422941993554027187e-2) : (R < 0.875e1 ? 0.423655294733932680e-1 + R * (-0.472002186016391365e-2) + pow(R - 0.85e1, 2) * 0.490675048745927659e-2 + pow(R - 0.85e1, 3) * (-0.272497250721448654e-2) : (R < 0.90e1 ? 0.256332483204486788e-1 + R * (-0.277757896153699169e-2) + pow(R - 0.875e1, 2) * 0.286302110704841168e-2 + pow(R - 0.875e1, 3) * (-0.157723436200177800e-2) : (R < 0.925e1 ? 0.155655308568930749e-1 + R * (-0.164179985088811929e-2) + pow(R - 0.90e1, 2) * 0.168009533554707813e-2 + pow(R - 0.90e1, 3) * (-0.101099090237840271e-2) : (R < 0.95e1 ? 0.963773650192241080e-2 + R * (-0.991312977310530950e-3) + pow(R - 0.925e1, 2) * 0.921852158763275986e-3 + pow(R - 0.925e1, 3) * (-0.485377106884610752e-3) : (R < 0.100e2 ? 0.617354846206269632e-2 + R * (-0.621395105469757449e-3) + pow(R - 0.95e1, 2) * 0.557819328599817909e-3 + pow(R - 0.95e1, 3) * (-0.222322101720605982e-3) : (R < 0.105e2 ? 0.237443550843393974e-2 + R * (-0.230317353160393952e-3) + pow(R - 0.100e2, 2) * 0.224336176018908923e-3 + pow(R - 0.100e2, 3) * (-0.764680632362418726e-4) : (R < 0.110e2 ? 0.667617194325997800e-3 + R * (-0.633322245686664608e-4) + pow(R - 0.105e2, 2) * 0.109634081164546114e-3 + pow(R - 0.105e2, 3) * (-0.662618517344263638e-4) : (R < 0.120e2 ? 0.274283671503413885e-4 + R * (-0.339453220494012589e-5) + pow(R - 0.110e2, 2) * 0.102413035629065680e-4 + pow(R - 0.110e2, 3) * (-0.409331762996644146e-5) : (R < 0.140e2 ? -0.648554977476842169e-4 + R * 0.480812203097368412e-5 + pow(R - 0.120e2, 2) * (-0.203864932699275718e-5) + pow(R - 0.120e2, 3) * 0.448050147002957517e-6 : (R < 0.160e2 ? -0.305337562645340428e-4 + R * 0.203012648703814560e-5 + pow(R - 0.140e2, 2) * 0.649651555024987710e-6 + pow(R - 0.140e2, 3) * (-0.344635651022030210e-6) : (R < 0.180e2 ? -0.609988977797974301e-5 + R * 0.493104894873733920e-6 + pow(R - 0.160e2, 2) * (-0.141816235110719365e-5) + pow(R - 0.160e2, 3) * 0.357872112085163286e-6 : (R < 0.200e2 ? 0.158977507840954537e-4 + R * (-0.885079164533080735e-6) + pow(R - 0.180e2, 2) * 0.729070321403786167e-6 + pow(R - 0.180e2, 3) * (-0.141069382968622899e-6) : (R < 0.250e2 ? -0.678349679387178246e-5 + R * 0.338369525458589146e-6 + pow(R - 0.200e2, 2) * (-0.117345976407951214e-6) + pow(R - 0.200e2, 3) * 0.100362426240466757e-7 : 0.205592330583555716e-5 + R * (-0.823720418174222979e-7) + pow(R - 0.250e2, 2) * 0.331976629527489212e-7 + pow(R - 0.250e2, 3) * (-0.332517032665289226e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.5154011104e1 * (R - 0.300e2) * (R - 0.250e2) - 0.5497606468e2 * R - 0.3229852502e4 + 0.2748803234e1 * R * R + 0.75000e3 * (-0.1007896177e-1 * R + 0.4169027356e0) * R) * pow(R, -6));
}

static double radcoeff_6_6_12_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.534996640200001289e-1 + R * 0.277555756156289135e-16 + pow(R - 0.475e1, 2) * 0.103987261066712144e1 + pow(R - 0.475e1, 3) * (-0.202350124714848567e1) : (R < 0.525e1 ? -0.722773940306098095e0 + R * 0.140529821493219631e0 + pow(R - 0.50e1, 2) * (-0.477753324694242865e0) + pow(R - 0.50e1, 3) * 0.556054307205457343e0 : (R < 0.55e1 ? -0.372086558793876532e-1 + R * 0.591334174712145749e-2 + pow(R - 0.525e1, 2) * (-0.607125942901498294e-1) + pow(R - 0.525e1, 3) * (-0.717740128413439926e-1) : (R < 0.575e1 ? 0.198851923067380032e0 + R * (-0.379005828057054628e-1) + pow(R - 0.55e1, 2) * (-0.114543103921157824e0) + pow(R - 0.55e1, 3) * 0.108211634975918569e0 : (R < 0.60e1 ? 0.406029540687722901e0 + R * (-0.748824532082996291e-1) + pow(R - 0.575e1, 2) * (-0.333843776892188901e-1) + pow(R - 0.575e1, 3) * 0.116545168489669629e0 : (R < 0.625e1 ? 0.374803853856576108e0 + R * (-0.697224229610960144e-1) + pow(R - 0.60e1, 2) * 0.540244986780333281e-1 + pow(R - 0.60e1, 3) * 0.671829000254030168e-1 : (R < 0.65e1 ? 0.131673598500726796e0 + R * (-0.301133798673162874e-1) + pow(R - 0.625e1, 2) * 0.104411673697085594e0 + pow(R - 0.625e1, 3) * (-0.249416639512817229e-1) : (R < 0.675e1 ? -0.171130671967347714e0 + R * 0.174158949903611866e-1 + pow(R - 0.65e1, 2) * 0.857054257336243019e-1 + pow(R - 0.65e1, 3) * (-0.784023351002762076e-1) : (R < 0.70e1 ? -0.357026975834632943e0 + R * 0.455681700258715530e-1 + pow(R - 0.675e1, 2) * 0.269036744084171428e-1 + pow(R - 0.675e1, 3) * (-0.518600042876133510e-1) : (R < 0.725e1 ? -0.382252413553068271e0 + R * 0.492962564261526098e-1 + pow(R - 0.70e1, 2) * (-0.119913288072928722e-1) + pow(R - 0.70e1, 3) * (-0.140030467892703642e-1) : (R < 0.75e1 ? -0.320716710554005413e0 + R * 0.406750207495179886e-1 + pow(R - 0.725e1, 2) * (-0.224936138992456458e-1) + pow(R - 0.725e1, 3) * 0.893329364694809614e-3 : (R < 0.775e1 ? -0.239013795448315775e0 + R * 0.295957130557754390e-1 + pow(R - 0.75e1, 2) * (-0.218236168757245386e-1) + pow(R - 0.75e1, 3) * 0.681012485049112704e-2 : (R < 0.80e1 ? -0.165600810582197000e0 + R * 0.199608030273802570e-1 + pow(R - 0.775e1, 2) * (-0.167160232378561931e-1) + pow(R - 0.775e1, 3) * 0.691726384134068884e-2 : (R < 0.825e1 ? -0.110049282597628306e0 + R * 0.128997783787035379e-1 + pow(R - 0.80e1, 2) * (-0.115280753568506762e-1) + pow(R - 0.80e1, 3) * 0.518232538414608798e-2 : (R < 0.85e1 ? -0.711519122048961256e-1 + R * 0.810742670980559195e-2 + pow(R - 0.825e1, 2) * (-0.764133131874111023e-2) + pow(R - 0.825e1, 3) * 0.396998451007496856e-2 : (R < 0.875e1 ? -0.454189691126297979e-1 + R * 0.503113314607409393e-2 + pow(R - 0.85e1, 2) * (-0.466384293618488360e-2) + pow(R - 0.85e1, 3) * 0.213934444755402514e-2 : (R < 0.90e1 ? -0.287825811776077842e-1 + R * 0.310033876189803230e-2 + pow(R - 0.875e1, 2) * (-0.305933460051936463e-2) + pow(R - 0.875e1, 3) * 0.170464461170894322e-2 : (R < 0.925e1 ? -0.180567365980039904e-1 + R * 0.189029232633377642e-2 + pow(R - 0.90e1, 2) * (-0.178085114173765716e-2) + pow(R - 0.90e1, 3) * 0.977790481610205141e-3 : (R < 0.95e1 ? -0.116121806540934683e-1 + R * 0.118320247076686143e-2 + pow(R - 0.925e1, 2) * (-0.104750828053000325e-2) + pow(R - 0.925e1, 3) * 0.509625922650228992e-3 : (R < 0.100e2 ? -0.760179385878838841e-2 + R * 0.755003190998777742e-3 + pow(R - 0.95e1, 2) * (-0.665288838542331482e-3) + pow(R - 0.95e1, 3) * 0.287996398689551966e-3 : (R < 0.105e2 ? -0.323920112333610276e-2 + R * 0.305711651473610261e-3 + pow(R - 0.100e2, 2) * (-0.233294240508003452e-3) + pow(R - 0.100e2, 3) * 0.811469295215657685e-4 : (R < 0.110e2 ? -0.147682386187120217e-2 + R * 0.133277608106781162e-3 + pow(R - 0.105e2, 2) * (-0.111573846225654800e-3) + pow(R - 0.105e2, 3) * 0.459704473841849508e-4 : (R < 0.120e2 ? -0.650914899941915743e-3 + R * 0.561815974192650690e-4 + pow(R - 0.110e2, 2) * (-0.426181751493773735e-4) + pow(R - 0.110e2, 3) * 0.125210424901123054e-4 : (R < 0.140e2 ? -0.108933358661166923e-3 + R * 0.850837459084724309e-5 + pow(R - 0.120e2, 2) * (-0.505504767904045402e-5) + pow(R - 0.120e2, 3) * 0.102048018130841635e-5 : (R < 0.160e2 ? -0.934770836040990733e-5 + R * 0.533946050386421994e-6 + pow(R - 0.140e2, 2) * 0.106783340881004389e-5 + pow(R - 0.140e2, 3) * (-0.342726615376627379e-6) : (R < 0.180e2 ? -0.103560156597131016e-4 + R * 0.692560301107068812e-6 + pow(R - 0.160e2, 2) * (-0.988526283449720591e-6) + pow(R - 0.160e2, 3) * 0.231027470860593103e-6 : (R < 0.200e2 ? 0.881005767586452718e-5 + R * (-0.489215182364695993e-6) + pow(R - 0.180e2, 2) * 0.397638541713838082e-6 + pow(R - 0.180e2, 3) * (-0.767884100907450260e-7) : (R < 0.250e2 ? -0.359556035333431925e-5 + R * 0.179878063401715971e-6 + pow(R - 0.200e2, 2) * (-0.630919188306320869e-7) + pow(R - 0.200e2, 3) * 0.541061020445777833e-8 : 0.113155352575678706e-5 + R * (-0.452453595702714874e-7) + pow(R - 0.250e2, 2) * 0.180672342362345946e-7 + pow(R - 0.250e2, 3) * (-0.180605212443605932e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.6402927040e0 * (R - 0.300e2) * (R - 0.250e2) + 0.6830124920e1 * R + 0.4011789426e3 - 0.3415062460e0 * R * R + 0.75000e3 * (0.1252016433e-2 * R - 0.5178559150e-1) * R) * pow(R, -6));
}

static double radcoeff_6_8_2_1_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.111295431100000008e-1 + pow(R - 0.475e1, 2) * 0.587767318867876074e-1 + pow(R - 0.475e1, 3) * (-0.213487712187150402e0) : (R < 0.525e1 ? 0.646702438084845455e-1 + R * (-0.106405800916969072e-1) + pow(R - 0.50e1, 2) * (-0.101339052253575215e0) + pow(R - 0.50e1, 3) * 0.232397147697451373e0 : (R < 0.55e1 ? 0.992168283763649878e-1 + R * (-0.177356410252123772e-1) + pow(R - 0.525e1, 2) * 0.729588085195133212e-1 + pow(R - 0.525e1, 3) * (-0.161010598986655262e0) : (R < 0.575e1 ? 0.666664200759946868e-1 + R * (-0.114457240754535783e-1) + pow(R - 0.55e1, 2) * (-0.477991407204781185e-1) + pow(R - 0.55e1, 3) * 0.100744834361169738e0 : (R < 0.60e1 ? 0.940601168437965179e-1 + R * (-0.164556379929733099e-1) + pow(R - 0.575e1, 2) * 0.277594850503991887e-1 + pow(R - 0.575e1, 3) * 0.166494090197623346e-2 : (R < 0.625e1 ? 0.106695856949190291e-1 + R * (-0.226371904865317131e-2) + pow(R - 0.60e1, 2) * 0.290081907268813638e-1 + pow(R - 0.60e1, 3) * (-0.376140000170746974e-1) : (R < 0.65e1 ? -0.346768108864125152e-1 + R * 0.518775131158600352e-2 + pow(R - 0.625e1, 2) * 0.797690714075338560e-3 + pow(R - 0.625e1, 3) * (-0.800067868967741305e-2) : (R < 0.675e1 ? -0.275936334890095232e-1 + R * 0.408646941430915785e-2 + pow(R - 0.65e1, 2) * (-0.520281830318272253e-2) + pow(R - 0.65e1, 3) * 0.145179309258436232e-2 : (R < 0.70e1 ? -0.121740392254472089e-1 + R * 0.175727146757736433e-2 + pow(R - 0.675e1, 2) * (-0.411397348374445068e-2) + pow(R - 0.675e1, 3) * 0.383528004733997042e-2 : (R < 0.725e1 ? -0.300613418647968471e-2 + R * 0.419399734581383556e-3 + pow(R - 0.70e1, 2) * (-0.123751344823947286e-2) + pow(R - 0.70e1, 3) * 0.151948978557575457e-2 : (R < 0.75e1 ? -0.639306926493982955e-3 + R * 0.855473452571010927e-4 + pow(R - 0.725e1, 2) * (-0.978961090576569066e-4) + pow(R - 0.725e1, 3) * 0.466375937170099777e-4 : (R < 0.775e1 ? -0.343170428102590117e-3 + R * 0.453438395502120140e-4 + pow(R - 0.75e1, 2) * (-0.629179137698994217e-4) + pow(R - 0.75e1, 3) * (-0.869790673237945649e-4) : (R < 0.80e1 ? 0.217365274231060877e-4 + R * (-0.242369245794917267e-5) + pow(R - 0.775e1, 2) * (-0.128152214262745352e-3) + pow(R - 0.775e1, 3) * 0.234950059194168168e-3 : (R < 0.825e1 ? 0.177581876966322538e-3 + R * (-0.224466634904153173e-4) + pow(R - 0.80e1, 2) * 0.480603301328807669e-4 + pow(R - 0.80e1, 3) * 0.164934030712199755e-5 : (R < 0.85e1 ? -0.201887665437861084e-4 + R * 0.189275288361043736e-5 + pow(R - 0.825e1, 2) * 0.492973353632222651e-4 + pow(R - 0.825e1, 3) * (-0.825195407426560564e-4) : (R < 0.875e1 ? -0.963952081427752334e-4 + R * 0.110690066759735576e-4 + pow(R - 0.85e1, 2) * (-0.125923201937697840e-4) + pow(R - 0.85e1, 3) * (-0.312673599249779891e-5) : (R < 0.90e1 ? -0.370098813191341311e-4 + R * 0.418658358049532879e-5 + pow(R - 0.875e1, 2) * (-0.149373721881431331e-4) + pow(R - 0.875e1, 3) * 0.197676098198472638e-4 : (R < 0.925e1 ? -0.377426490180612513e-5 + R * 0.424324327645125019e-6 + pow(R - 0.90e1, 2) * (-0.111664823257683643e-6) + pow(R - 0.90e1, 3) * 0.201316523035087350e-4 : (R < 0.95e1 ? -0.378660715423485830e-4 + R * 0.414317672292417101e-5 + pow(R - 0.925e1, 2) * 0.149870744043738693e-4 + pow(R - 0.925e1, 3) * (-0.728364450370822106e-4) : (R < 0.100e2 ? 0.204838654557472087e-4 + R * (-0.202011951934181137e-5) + pow(R - 0.95e1, 2) * (-0.396402593734377937e-4) + pow(R - 0.95e1, 3) * 0.492815926082428371e-4 : (R < 0.105e2 ? 0.435246488609748297e-4 + R * (-0.469918443659748319e-5) + pow(R - 0.100e2, 2) * 0.342821295389264552e-4 + pow(R - 0.100e2, 3) * (-0.260693923634629723e-4) : (R < 0.110e2 ? -0.105829388096383270e-3 + R * 0.100309008297317394e-4 + pow(R - 0.105e2, 2) * (-0.482195900626800324e-5) + pow(R - 0.105e2, 3) * (-0.137157941839095103e-5) : (R < 0.120e2 ? -0.428492460043757405e-4 + R * 0.418025725967052196e-5 + pow(R - 0.110e2, 2) * (-0.687932813385442990e-5) + pow(R - 0.110e2, 3) * 0.252514333818390700e-5 : (R < 0.140e2 ? 0.269952842378393927e-4 + R * (-0.200296899348661598e-5) + pow(R - 0.120e2, 2) * 0.696101880697291746e-6 + pow(R - 0.120e2, 3) * (-0.977777957269919289e-7) : (R < 0.160e2 ? 0.644243375799892532e-5 + R * (-0.391895019421351820e-6) + pow(R - 0.140e2, 2) * 0.109435106335340186e-6 + pow(R - 0.140e2, 3) * (-0.278202641123321381e-7) : (R < 0.180e2 ? 0.499525597454762884e-5 + R * (-0.287997763427976813e-6) + pow(R - 0.160e2, 2) * (-0.574864783386526624e-7) + pow(R - 0.160e2, 3) * 0.327227221888205237e-7 : (R < 0.200e2 ? 0.209801028630133907e-5 + R * (-0.125271010516741046e-6) + pow(R - 0.180e2, 2) * 0.138849854794270500e-6 + pow(R - 0.180e2, 3) * (-0.278772673804499812e-7) : (R < 0.250e2 ? -0.198705264579882286e-5 + R * 0.956012000949411382e-7 + pow(R - 0.200e2, 2) * (-0.284137494884294010e-7) + pow(R - 0.200e2, 3) * 0.233305488508823460e-8 : 0.323194940193382225e-6 + R * (-0.135571784077352877e-7) + pow(R - 0.250e2, 2) * 0.658207378789411513e-8 + pow(R - 0.250e2, 3) * (-0.683381125269411400e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2400916605e2 * (R - 0.300e2) * (R - 0.250e2) - 0.2560979660e3 * R - 0.1504563670e5 + 0.1280489830e2 * R * R + 0.75000e3 * (-0.469510675e-1 * R + 0.1942063797e1) * R) * pow(R, -6));
}

static double radcoeff_6_8_2_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.864983197599999976e-2 + pow(R - 0.475e1, 2) * (-0.175995354438702074e-1) + pow(R - 0.475e1, 3) * 0.101047442831480830e0 : (R < 0.525e1 ? -0.589040756918377539e-1 + R * 0.101466278089675510e-1 + pow(R - 0.50e1, 2) * 0.581860466797404149e-1 + pow(R - 0.50e1, 3) * (-0.165076997742442472e0) : (R < 0.55e1 ? -0.480874787456814154e-1 + R * 0.828771407212979330e-2 + pow(R - 0.525e1, 2) * (-0.656217016270914388e-1) + pow(R - 0.525e1, 3) * 0.170352500522289035e0 : (R < 0.575e1 ? -0.447434139658230076e-1 + R * 0.741795710651327496e-2 + pow(R - 0.55e1, 2) * 0.621426737646253446e-1 + pow(R - 0.55e1, 3) * (-0.104284104506713785e0) : (R < 0.60e1 ? -0.108717822890448387e0 + R * 0.189360243938171101e-1 + pow(R - 0.575e1, 2) * (-0.160704046154099972e-1) + pow(R - 0.575e1, 3) * (-0.285555480954338033e-1) : (R < 0.625e1 ? -0.298321981643096361e-1 + R * 0.554665681821827228e-2 + pow(R - 0.60e1, 2) * (-0.374870656869853505e-1) + pow(R - 0.60e1, 3) * 0.397196098484490501e-1 : (R < 0.65e1 ? 0.390461416148138035e-1 + R * (-0.574944917869020782e-2) + pow(R - 0.625e1, 2) * (-0.769735830064856383e-2) + pow(R - 0.625e1, 3) * 0.195944558376375810e-1 : (R < 0.675e1 ? 0.400068915184733712e-1 + R * (-0.592416785945744200e-2) + pow(R - 0.65e1, 2) * 0.699848357757962281e-2 + pow(R - 0.65e1, 3) * (-0.751105006999417931e-3) : (R < 0.70e1 ? 0.177632959265901433e-1 + R * (-0.256575825948002125e-2) + pow(R - 0.675e1, 2) * 0.643515482233005930e-2 + pow(R - 0.675e1, 3) * (-0.656589182243989301e-2) : (R < 0.725e1 ? 0.415759218205730488e-2 + R * (-0.579285565022472082e-3) + pow(R - 0.70e1, 2) * 0.151073595550013889e-2 + pow(R - 0.70e1, 3) * (-0.141892212948100272e-2) : (R < 0.75e1 ? 0.682271952078157334e-3 + R * (-0.899654865500906597e-4) + pow(R - 0.725e1, 2) * 0.446544358389386906e-3 + pow(R - 0.725e1, 3) * (-0.695366402036096901e-3) : (R < 0.775e1 ? 0.263353334874039290e-5 + R * 0.292549226283461404e-5 + pow(R - 0.75e1, 2) * (-0.749804431376857703e-4) + pow(R - 0.75e1, 3) * 0.698983609853892184e-4 : (R < 0.80e1 ? 0.188017578894670331e-3 + R * (-0.214587866212477842e-4) + pow(R - 0.775e1, 2) * (-0.225566723986438463e-4) + pow(R - 0.775e1, 3) * 0.240967425453993774e-5 : (R < 0.825e1 ? 0.273257616242747806e-3 + R * (-0.322853088978434748e-4) + pow(R - 0.80e1, 2) * (-0.207494167077388927e-4) + pow(R - 0.80e1, 3) * 0.635726347964510211e-4 : (R < 0.85e1 ? 0.260206524585871401e-3 + R * (-0.307401482273783497e-4) + pow(R - 0.825e1, 2) * 0.269300593895993764e-4 + pow(R - 0.825e1, 3) * (-0.523590655363438871e-4) : (R < 0.875e1 ? 0.230066051191066728e-3 + R * (-0.270924433206431424e-4) + pow(R - 0.85e1, 2) * (-0.123392397626585440e-4) + pow(R - 0.85e1, 3) * 0.105118310676924486e-3 : (R < 0.90e1 ? 0.112461767817929387e-3 + R * (-0.135523799500490724e-4) + pow(R - 0.875e1, 2) * 0.664994932450348240e-4 + pow(R - 0.875e1, 3) * (-0.683763120833541516e-4) : (R < 0.925e1 ? -0.683130866925549441e-4 + R * 0.687680815683943792e-5 + pow(R - 0.90e1, 2) * 0.152172591825192138e-4 + pow(R - 0.90e1, 3) * (-0.106628968395078404e-4) : (R < 0.95e1 ? -0.119414977769894746e-3 + R * 0.124861445906913237e-4 + pow(R - 0.925e1, 2) * 0.722008655288833347e-5 + pow(R - 0.925e1, 3) * (-0.336824731026145053e-4) : (R < 0.100e2 ? -0.937885169149550577e-4 + R * 0.978072416039526854e-5 + pow(R - 0.95e1, 2) * (-0.180417682740725497e-4) + pow(R - 0.95e1, 3) * 0.423676397056402928e-5 : (R < 0.105e2 ? 0.508725894743425854e-4 + R * (-0.508347113575425882e-5) + pow(R - 0.100e2, 2) * (-0.116866223182265050e-4) + pow(R - 0.100e2, 3) * 0.229712778754700407e-4 : (R < 0.110e2 ? -0.736693529852858632e-5 + R * 0.458364952621770093e-6 + pow(R - 0.105e2, 2) * 0.227702944949785611e-4 + pow(R - 0.105e2, 3) * (-0.215885544404441995e-4) : (R < 0.120e2 ? -0.767405962906389906e-4 + R * 0.703724361726717989e-5 + pow(R - 0.110e2, 2) * (-0.961253716568773814e-5) + pow(R - 0.110e2, 3) * 0.366949810842055747e-5 : (R < 0.140e2 ? 0.159153247251594672e-4 + R * (-0.117933638884662229e-5) + pow(R - 0.120e2, 2) * 0.139595715957393553e-5 + pow(R - 0.120e2, 3) * (-0.357469903450312205e-6) : (R < 0.160e2 ? 0.520736979364775946e-6 + R * 0.114853408045373147e-6 + pow(R - 0.140e2, 2) * (-0.748862261127937702e-6) + pow(R - 0.140e2, 3) * 0.175630757177625547e-6 : (R < 0.180e2 ? 0.131364133262579355e-4 + R * (-0.773026550334870995e-6) + pow(R - 0.160e2, 2) * 0.304922281937815632e-6 + pow(R - 0.160e2, 3) * (-0.437541245226900647e-7) : (R < 0.200e2 ? 0.150255605520600727e-5 + R * (-0.783869168558892975e-7) + pow(R - 0.180e2, 2) * 0.423975348016752235e-7 + pow(R - 0.180e2, 3) * (-0.757502979936528900e-8) : (R < 0.250e2 ? 0.377503237314374057e-7 + R * 0.302864758428129397e-9 + pow(R - 0.200e2, 2) * (-0.305264399451651172e-8) + pow(R - 0.200e2, 3) * 0.321449770966177169e-9 : 0.162058123306842454e-6 + R * (-0.611484236427369865e-8) + pow(R - 0.250e2, 2) * 0.176910256997614628e-8 + pow(R - 0.250e2, 3) * (-0.162211836224281313e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1401843805e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1495301800e3 * R + 0.8784838188e4 - 0.7476509000e1 * R * R + 0.75000e3 * (0.2741375230e-1 * R - 0.1133930927e1) * R) * pow(R, -6));
}

static double radcoeff_6_8_3_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.549066395899999986e-2 + pow(R - 0.475e1, 2) * 0.233767175323302857e-1 + pow(R - 0.475e1, 3) * (-0.243328238573211411e-1) : (R < 0.525e1 ? -0.400395909505871367e-1 + R * 0.712595429291742761e-2 + pow(R - 0.50e1, 2) * 0.512709963933942730e-2 + pow(R - 0.50e1, 3) * (-0.137041339960365521e-1) : (R < 0.55e1 ? -0.399019039677340134e-1 + R * 0.711997898833028817e-2 + pow(R - 0.525e1, 2) * (-0.515100085768798680e-2) + pow(R - 0.525e1, 3) * 0.931339745467328812e-3 : (R < 0.575e1 ? -0.270044810916877966e-1 + R * 0.471910476176141784e-2 + pow(R - 0.55e1, 2) * (-0.445249604858749017e-2) + pow(R - 0.55e1, 3) * (-0.503521553303273341e-2) : (R < 0.60e1 ? -0.913191945118820535e-2 + R * 0.154875382502403579e-2 + pow(R - 0.575e1, 2) * (-0.822890769836204065e-2) + pow(R - 0.575e1, 3) * 0.117253017786635872e-1 : (R < 0.625e1 ? 0.203274025204536971e-2 + R * (-0.367205940657561614e-3) + pow(R - 0.60e1, 2) * 0.565068635635649643e-3 + pow(R - 0.60e1, 3) * 0.160626061677838811e-2 : (R < 0.65e1 ? -0.155502128273881843e-2 + R * 0.216502242806210937e-3 + pow(R - 0.625e1, 2) * 0.176976409821944067e-2 + pow(R - 0.625e1, 3) * (-0.321193801857713648e-2) : (R < 0.675e1 ? -0.333178141719266694e-2 + R * 0.499145913432718020e-3 + pow(R - 0.65e1, 2) * (-0.639189415713411905e-3) + pow(R - 0.65e1, 3) * (-0.188166793349841280e-3) : (R < 0.70e1 ? -0.979257985951688869e-3 + R * 0.144269931822916853e-3 + pow(R - 0.675e1, 2) * (-0.780314510725792871e-3) + pow(R - 0.675e1, 3) * 0.122351130973650168e-2 : (R < 0.725e1 ? 0.116331914853598295e-3 + R * (-0.164789529643854705e-4) + pow(R - 0.70e1, 2) * 0.137318971576583525e-3 + pow(R - 0.70e1, 3) * (-0.416124063900166546e-3) : (R < 0.75e1 ? 0.186299789477968310e-3 + R * (-0.258427291573749388e-4) + pow(R - 0.725e1, 2) * (-0.174774076348541385e-3) + pow(R - 0.725e1, 3) * 0.449165793352164521e-3 : (R < 0.775e1 ? 0.206158014635860788e-3 + R * (-0.290111810781147699e-4) + pow(R - 0.75e1, 2) * 0.162100268665582033e-3 + pow(R - 0.75e1, 3) * (-0.187382900612491772e-3) : (R < 0.80e1 ? -0.142486340021213758e-3 + R * 0.169046593898340345e-4 + pow(R - 0.775e1, 2) * 0.215630932062131944e-4 + pow(R - 0.775e1, 3) * (-0.349047269021973393e-4) : (R < 0.825e1 ? -0.175579315525229053e-3 + R * 0.211415696987786301e-4 + pow(R - 0.80e1, 2) * (-0.461545197043481097e-5) + pow(R - 0.80e1, 3) * 0.347595223332811170e-4 : (R < 0.85e1 ? -0.210054560468174331e-3 + R * 0.253512541510514362e-4 + pow(R - 0.825e1, 2) * 0.214541897795260259e-4 + pow(R - 0.825e1, 3) * (-0.121071668030927118e-3) : (R < 0.875e1 ? -0.108827754058632667e-3 + R * 0.133774112850156076e-4 + pow(R - 0.85e1, 2) * (-0.693495612436693129e-4) + pow(R - 0.85e1, 3) * 0.806504043184275154e-4 : (R < 0.90e1 ? 0.591853217872465376e-4 + R * (-0.617541852711388968e-5) + pow(R - 0.875e1, 2) * (-0.886175800484867802e-5) + pow(R - 0.875e1, 3) * (-0.328202123467830618e-4) : (R < 0.925e1 ? 0.153380665451040461e-3 + R * (-0.167600873445600502e-4) + pow(R - 0.90e1, 2) * (-0.334769172649359727e-4) + pow(R - 0.90e1, 3) * 0.151697958412704703e-3 : (R < 0.95e1 ? 0.453882344504746523e-4 + R * (-0.505517877464590898e-5) + pow(R - 0.925e1, 2) * 0.802965515445925682e-4 + pow(R - 0.925e1, 3) * (-0.130448262008035732e-3) : (R < 0.100e2 ? -0.100679138307364872e-3 + R * 0.106340478711436710e-4 + pow(R - 0.95e1, 2) * (-0.175396449614342379e-4) + pow(R - 0.95e1, 3) * 0.320134503029379108e-5 : (R < 0.105e2 ? 0.467224804677022224e-4 + R * (-0.450458831757022248e-5) + pow(R - 0.100e2, 2) * (-0.127376274159935509e-4) + pow(R - 0.100e2, 3) * 0.226398595502679892e-4 : (R < 0.110e2 ? 0.182424996665917801e-5 + R * (-0.262321070862778866e-6) + pow(R - 0.105e2, 2) * 0.212221619094084381e-4 + pow(R - 0.105e2, 3) * (-0.238553609593657614e-4) : (R < 0.120e2 ? -0.324891827642347021e-4 + R * 0.306832011902133649e-5 + pow(R - 0.110e2, 2) * (-0.145608795296402040e-4) + pow(R - 0.110e2, 3) * 0.702260346361886670e-5 : (R < 0.140e2 ? 0.566199251908296161e-4 + R * (-0.498562854940246800e-5) + pow(R - 0.120e2, 2) * 0.650693086121639780e-5 + pow(R - 0.120e2, 3) * (-0.152206197525758190e-5) : (R < 0.160e2 ? -0.382105635510099502e-4 + R * 0.277735119237213954e-5 + pow(R - 0.140e2, 2) * (-0.262544099032909361e-5) + pow(R - 0.140e2, 3) * 0.567403401259011890e-6 : (R < 0.180e2 ? 0.149136700370774769e-4 + R * (-0.915571953836092328e-6) + pow(R - 0.160e2, 2) * 0.778979417224977623e-6 + pow(R - 0.160e2, 3) * (-0.166261933940965704e-6) : (R < 0.200e2 ? -0.347444807450013043e-5 + R * 0.205202507772229482e-6 + pow(R - 0.180e2, 2) * (-0.218592186420816625e-6) + pow(R - 0.180e2, 3) * 0.437008321798509372e-7 : (R < 0.250e2 ? 0.299996502775651430e-5 + R * (-0.144756251752825718e-6) + pow(R - 0.200e2, 2) * 0.436128066582890117e-7 + pow(R - 0.200e2, 3) * (-0.359514050474477190e-8) : -0.521420587055160829e-6 + R * 0.217362769742064331e-7 + pow(R - 0.250e2, 2) * (-0.103143009128825743e-7) + pow(R - 0.250e2, 3) * 0.106660617800825749e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3354879766e2 * (R - 0.300e2) * (R - 0.250e2) + 0.3578539336e3 * R + 0.2102374054e5 - 0.1789269668e2 * R * R + 0.75000e3 * (0.656062153e-1 * R - 0.2713707009e1) * R) * pow(R, -6));
}

static double radcoeff_6_8_4_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.856002631400000144e-2 + R * 0.433680868994201774e-18 + pow(R - 0.475e1, 2) * (-0.567778174416652959e-1) + pow(R - 0.475e1, 3) * 0.182658126214661154e0 : (R < 0.525e1 ? -0.385520564040816027e-1 + R * 0.585948994441632016e-2 + pow(R - 0.50e1, 2) * 0.802157772193305835e-1 + pow(R - 0.50e1, 3) * (-0.154631100051983467e0) : (R < 0.55e1 ? -0.943061073532572569e-1 + R * 0.169740472943347154e-1 + pow(R - 0.525e1, 2) * (-0.357575478196570165e-1) + pow(R - 0.525e1, 3) * 0.760453582172726517e-1 : (R < 0.575e1 ? -0.754412645273465493e-1 + R * 0.133537780502448258e-1 + pow(R - 0.55e1, 2) * 0.212764708432974722e-1 + pow(R - 0.55e1, 3) * (-0.594637394731071037e-1) : (R < 0.60e1 ? -0.721011155839443862e-1 + R * 0.128425623206859796e-1 + pow(R - 0.575e1, 2) * (-0.233213337615328573e-1) + pow(R - 0.575e1, 3) * (-0.494032320484426302e-2) : (R < 0.625e1 ? 0.188597339593247473e-2 + R * 0.255584839011254242e-3 + pow(R - 0.60e1, 2) * (-0.270265761651660545e-1) + pow(R - 0.60e1, 3) * 0.372256619884841419e-1 : (R < 0.65e1 ? 0.416126912275687280e-1 + R * (-0.627789162073099597e-2) + pow(R - 0.625e1, 2) * 0.892670326197053448e-3 + pow(R - 0.625e1, 3) * 0.821192574690772677e-2 : (R < 0.675e1 ? 0.288873313980672550e-1 + R * (-0.429182038008726983e-2) + pow(R - 0.65e1, 2) * 0.705161463637784917e-2 + pow(R - 0.65e1, 3) * (-0.432274826571507620e-2) : (R < 0.70e1 ? 0.109322932472094760e-1 + R * (-0.157652836171992246e-2) + pow(R - 0.675e1, 2) * 0.380955343709154159e-2 + pow(R - 0.675e1, 3) * (-0.379329208244740586e-2) : (R < 0.725e1 ? 0.275637897659128340e-2 + R * (-0.382993908633040483e-3) + pow(R - 0.70e1, 2) * 0.964584375255986975e-3 + pow(R - 0.70e1, 3) * (-0.103078757665529992e-2) : (R < 0.75e1 ? 0.705167945872389019e-3 + R * (-0.939743916279157303e-4) + pow(R - 0.725e1, 2) * 0.191493692764511952e-3 + pow(R - 0.725e1, 3) * (-0.134871459251396057e-3) : (R < 0.775e1 ? 0.186590576824723824e-3 + R * (-0.235159438552965132e-4) + pow(R - 0.75e1, 2) * 0.903400983259649025e-4 + pow(R - 0.75e1, 3) * (-0.194891027043115375e-3) : (R < 0.80e1 ? 0.122324803331461021e-3 + R * (-0.148879622628981981e-4) + pow(R - 0.775e1, 2) * (-0.558281719563716354e-4) + pow(R - 0.775e1, 3) * 0.132769398911857704e-3 : (R < 0.825e1 ? 0.145068653899885534e-3 + R * (-0.179077859451106928e-4) + pow(R - 0.80e1, 2) * 0.437488772275216429e-4 + pow(R - 0.80e1, 3) * 0.240071259236845443e-4 : (R < 0.85e1 ? -0.694220714074630593e-4 + R * 0.846798877934097748e-5 + pow(R - 0.825e1, 2) * 0.617542216702850519e-4 + pow(R - 0.825e1, 3) * (-0.231565377294595858e-3) : (R < 0.875e1 ? 0.374212363911523868e-4 + R * (-0.407340862825322156e-5) + pow(R - 0.85e1, 2) * (-0.111919811300661848e-3) + pow(R - 0.85e1, 3) * 0.220394818070698942e-3 : (R < 0.90e1 ? 0.161933843260370829e-3 + R * (-0.187092858903280940e-4) + pow(R - 0.875e1, 2) * 0.533763022523623583e-4 + pow(R - 0.875e1, 3) * (-0.397111446521999537e-4) : (R < 0.925e1 ? -0.853142801909036006e-5 + R * 0.533025613565595527e-6 + pow(R - 0.90e1, 2) * 0.235929437632123930e-4 + pow(R - 0.90e1, 3) * (-0.301078158458990998e-4) : (R < 0.95e1 ? -0.644264254536078192e-4 + R * 0.668428202406571082e-5 + pow(R - 0.925e1, 2) * 0.101208187878806964e-5 + pow(R - 0.925e1, 3) * (-0.565305238020364512e-5) : (R < 0.100e2 ? -0.591893886515298419e-4 + R * 0.613037564217156244e-5 + pow(R - 0.95e1, 2) * (-0.322770740636466420e-5) + pow(R - 0.95e1, 3) * (-0.138586059956920963e-6) : (R < 0.105e2 ? -0.266971692473920703e-4 + R * 0.279872869083920687e-5 + pow(R - 0.100e2, 2) * (-0.343558649630004566e-5) + pow(R - 0.100e2, 3) * (-0.309223485875673737e-5) : (R < 0.110e2 ? 0.324824124950481269e-4 + R * (-0.295603394952839309e-5) + pow(R - 0.105e2, 2) * (-0.807393878443515214e-5) + pow(R - 0.105e2, 3) * 0.103450021269838766e-4 : (R < 0.120e2 ? 0.352241121456819961e-4 + R * (-0.327122113872563612e-5) + pow(R - 0.110e2, 2) * 0.744356440604066354e-5 + pow(R - 0.110e2, 3) * (-0.312190575331502694e-5) : (R < 0.140e2 ? -0.267111678270273156e-4 + R * 0.225019041341060973e-5 + pow(R - 0.120e2, 2) * (-0.192215285390441770e-5) + pow(R - 0.120e2, 3) * 0.372630864787056324e-6 : (R < 0.160e2 ? 0.136198422100733810e-4 + R * (-0.966850624762384332e-6) + pow(R - 0.140e2, 2) * 0.313632334817920563e-6 + pow(R - 0.140e2, 3) * (-0.178059244933641568e-7) : (R < 0.180e2 ? -0.192180777222284695e-5 + R * 0.740076205889279342e-7 + pow(R - 0.160e2, 2) * 0.206796787857735623e-6 + pow(R - 0.160e2, 3) * (-0.564645879510997795e-7) : (R < 0.200e2 ? -0.423935505272011228e-5 + R * 0.223619716606672911e-6 + pow(R - 0.180e2, 2) * (-0.131990739848863108e-6) + pow(R - 0.180e2, 3) * 0.240590266477633234e-7 : (R < 0.250e2 ? 0.210246993512391794e-6 + R * (-0.156349230156195913e-7) + pow(R - 0.200e2, 2) * 0.123634200377168579e-7 + pow(R - 0.200e2, 3) * (-0.119956066771858772e-8) : -0.472291346466372491e-6 + R * 0.180322272826548996e-7 + pow(R - 0.250e2, 2) * (-0.562998997806195990e-8) + pow(R - 0.250e2, 3) * 0.528624163506195901e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3278446938e2 * (R - 0.300e2) * (R - 0.250e2) - 0.3497008728e3 * R - 0.2054496284e5 + 0.1748504364e2 * R * R + 0.75000e3 * (-0.641118963e-1 * R + 0.2651902114e1) * R) * pow(R, -6));
}

static double radcoeff_6_8_4_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.101357151600000011e-1 + R * (-0.433680868994201774e-18) + pow(R - 0.475e1, 2) * 0.737133482438940418e-2 + pow(R - 0.475e1, 3) * (-0.671339666255576090e-1) : (R < 0.525e1 ? 0.540572120084867533e-1 + R * (-0.890195133009735046e-2) + pow(R - 0.50e1, 2) * (-0.429791401447788060e-1) + pow(R - 0.50e1, 3) * 0.922901238126728196e-1 : (R < 0.55e1 ? 0.747852011859556354e-1 + R * (-0.130871231876105963e-1) + pow(R - 0.525e1, 2) * 0.262384527147258122e-1 + pow(R - 0.525e1, 3) * (-0.675398361451337026e-1) : (R < 0.575e1 ? 0.728645056000314234e-1 + R * (-0.126316161074602595e-1) + pow(R - 0.55e1, 2) * (-0.244164243941244613e-1) + pow(R - 0.55e1, 3) * 0.498461229758619950e-1 : (R < 0.60e1 ? 0.885741935464530866e-1 + R * (-0.154936802465483643e-1) + pow(R - 0.575e1, 2) * 0.129681678377720384e-1 + pow(R - 0.575e1, 3) * 0.242582064496856889e-1 : (R < 0.625e1 ? 0.235687527430776776e-1 + R * (-0.446118261834627973e-2) + pow(R - 0.60e1, 2) * 0.311618226750363068e-1 + pow(R - 0.60e1, 3) * (-0.319294998786047446e-1) : (R < 0.65e1 ? -0.349458449645842703e-1 + R * 0.513294749193348322e-2 + pow(R - 0.625e1, 2) * 0.721469776608274580e-2 + pow(R - 0.625e1, 3) * (-0.182508189032667203e-1) : (R < 0.675e1 ? -0.359846776009802444e-1 + R * 0.531826783061234518e-2 + pow(R - 0.65e1, 2) * (-0.647341641136729620e-2) + pow(R - 0.65e1, 3) * 0.149268872047166393e-2 : (R < 0.70e1 ? -0.164073466389156528e-1 + R * 0.236143876001713385e-2 + pow(R - 0.675e1, 2) * (-0.535389987101354825e-2) + pow(R - 0.675e1, 3) * 0.494173939418004419e-2 : (R < 0.725e1 ? -0.441213410913382943e-2 + R * 0.611064960919118503e-3 + pow(R - 0.70e1, 2) * (-0.164759532537851468e-2) + pow(R - 0.70e1, 3) * 0.187658169896816286e-2 : (R < 0.75e1 ? -0.106423242046134003e-2 + R * 0.139126366786391728e-3 + pow(R - 0.725e1, 2) * (-0.240159051152392369e-3) + pow(R - 0.725e1, 3) * 0.206885454747301876e-3 : (R < 0.775e1 ? -0.466346004844859943e-3 + R * 0.578378639753146534e-4 + pow(R - 0.75e1, 2) * (-0.849949600919159556e-4) + pow(R - 0.75e1, 3) * 0.111121680762629396e-3 : (R < 0.80e1 ? -0.302040135590710048e-3 + R * 0.361756990723496890e-4 + pow(R - 0.775e1, 2) * (-0.165369951994390026e-5) + pow(R - 0.775e1, 3) * (-0.717509939781938363e-5) : (R < 0.825e1 ? -0.284878155562292884e-3 + R * 0.340035181752866073e-4 + pow(R - 0.80e1, 2) * (-0.703502406830843778e-5) + pow(R - 0.80e1, 3) * 0.186422082864806728e-5 : (R < 0.85e1 ? -0.259152958428657146e-3 + R * 0.308355475465038975e-4 + pow(R - 0.825e1, 2) * (-0.563685844682238727e-5) + pow(R - 0.825e1, 3) * (-0.530529078847728126e-4) : (R < 0.875e1 ? -0.151824493426931260e-3 + R * 0.180696980946977976e-4 + pow(R - 0.85e1, 2) * (-0.454265393604019984e-4) + pow(R - 0.85e1, 3) * 0.380009291104431860e-4 : (R < 0.90e1 ? -0.176740522396678634e-4 + R * 0.248160262270489878e-5 + pow(R - 0.875e1, 2) * (-0.169258425275696072e-4) + pow(R - 0.875e1, 3) * (-0.107553129409999513e-4) : (R < 0.925e1 ? 0.754159127996565618e-4 + R * (-0.799793981751739486e-5) + pow(R - 0.90e1, 2) * (-0.249923272333195707e-4) + pow(R - 0.90e1, 3) * 0.660362871975565921e-4 : (R < 0.95e1 ? 0.759435371808766862e-4 + R * (-0.811229958463531749e-5) + pow(R - 0.925e1, 2) * 0.245348881648478768e-4 + pow(R - 0.925e1, 3) * (-0.409414320732264133e-4) : (R < 0.100e2 ? 0.332234649120426645e-4 + R * (-0.352137401594133328e-5) + pow(R - 0.95e1, 2) * (-0.617118589007193570e-5) + pow(R - 0.95e1, 3) * 0.106986624839092036e-4 : (R < 0.105e2 ? 0.144898915218136531e-4 + R * (-0.166856304308136544e-5) + pow(R - 0.100e2, 2) * 0.987680783579187223e-5 + pow(R - 0.100e2, 3) * (-0.391985091525828097e-5) : (R < 0.110e2 ? -0.563685442018013589e-4 + R * 0.526835660626679564e-5 + pow(R - 0.105e2, 2) * 0.399703146290444993e-5 + pow(R - 0.105e2, 3) * (-0.631567951887608361e-5) : (R < 0.120e2 ? -0.480217363371560028e-4 + R * 0.452862843001418202e-5 + pow(R - 0.110e2, 2) * (-0.547648781540967548e-5) + pow(R - 0.110e2, 3) * 0.160474596639549339e-5 : (R < 0.140e2 ? 0.217713745934242611e-4 + R * (-0.161010930161868834e-5) + pow(R - 0.120e2, 2) * (-0.662249916223195303e-6) + pow(R - 0.120e2, 3) * 0.265335454641269684e-6 : (R < 0.160e2 ? 0.137546974944272572e-4 + R * (-0.107508351081623270e-5) + pow(R - 0.140e2, 2) * 0.929762811624423016e-6 + pow(R - 0.140e2, 3) * (-0.160409456733153289e-6) : (R < 0.180e2 ? -0.125157311641379133e-4 + R * 0.719054254883619579e-6 + pow(R - 0.160e2, 2) * (-0.326939287744968292e-7) + pow(R - 0.160e2, 3) * (-0.292381012086564841e-7) : (R < 0.200e2 ? -0.421101895597158008e-5 + R * 0.237421325281754452e-6 + pow(R - 0.180e2, 2) * (-0.208122536026435741e-6) + pow(R - 0.180e2, 3) * 0.406258643802792523e-7 : (R < 0.250e2 ? 0.218109324581274857e-5 + R * (-0.107558446260637430e-6) + pow(R - 0.200e2, 2) * 0.356326502552397730e-7 + pow(R - 0.200e2, 3) * (-0.301338240222245701e-8) : -0.562833857726900627e-6 + R * 0.227643761250760269e-7 + pow(R - 0.250e2, 2) * (-0.956808577809707722e-8) + pow(R - 0.250e2, 3) * 0.966848846616374351e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.9575782592e1 * (R - 0.300e2) * (R - 0.250e2) + 0.1021416644e3 * R + 0.6000789932e4 - 0.5107083220e1 * R * R + 0.75000e3 * (0.1872590923e-1 * R - 0.774570846e0) * R) * pow(R, -6));
}

static double radcoeff_6_8_5_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.568563979600000390e-2 + R * (-0.867361737988403547e-18) + pow(R - 0.475e1, 2) * (-0.277197393884024805e-1) + pow(R - 0.475e1, 3) * 0.372113895536099262e-1 : (R < 0.525e1 ? 0.389482548104968934e-1 + R * (-0.688273415289937952e-2) + pow(R - 0.50e1, 2) * 0.188802776804965769e-3 + pow(R - 0.50e1, 3) * 0.207987473117020143e-2 : (R < 0.55e1 ? 0.364495690491130342e-1 + R * (-0.639835625240248347e-2) + pow(R - 0.525e1, 2) * 0.174870882518261698e-2 + pow(R - 0.525e1, 3) * 0.160582748970927074e-2 : (R < 0.575e1 ? 0.301189955371987741e-1 + R * (-0.522290918549068658e-2) + pow(R - 0.55e1, 2) * 0.295307944246457014e-2 + pow(R - 0.55e1, 3) * 0.647516814199271349e-2 : (R < 0.60e1 ? 0.149335934543999120e-1 + R * (-0.253227543763476746e-2) + pow(R - 0.575e1, 2) * 0.780945554895910547e-2 + pow(R - 0.575e1, 3) * (-0.759976536968013858e-2) : (R < 0.625e1 ? 0.424307486321446399e-3 + R * (-0.525036699702410641e-4) + pow(R - 0.60e1, 2) * 0.210963152169900154e-2 + pow(R - 0.60e1, 3) * (-0.517177048407214870e-2) : (R < 0.65e1 ? -0.565794266733234239e-4 + R * 0.326051251157317436e-4 + pow(R - 0.625e1, 2) * (-0.176919634135511020e-2) + pow(R - 0.625e1, 3) * 0.254983412580873318e-2 : (R < 0.675e1 ? 0.251496472878245817e-2 + R * (-0.373899146972685886e-3) + pow(R - 0.65e1, 2) * 0.143179253001439656e-3 + pow(R - 0.65e1, 3) * 0.736467149477215309e-3 : (R < 0.70e1 ? 0.112009951636866988e-2 + R * (-0.164221929944988133e-3) + pow(R - 0.675e1, 2) * 0.695529615109351219e-3 + pow(R - 0.675e1, 3) * (-0.833948315397594698e-3) : (R < 0.725e1 ? -0.189256814034069297e-3 + R * 0.271775684726384736e-4 + pow(R - 0.70e1, 2) * 0.700683785611551818e-4 + pow(R - 0.70e1, 3) * (-0.103361686542836269e-3) : (R < 0.75e1 ? -0.299983146366648325e-3 + R * 0.428314415264342531e-4 + pow(R - 0.725e1, 2) * (-0.745288634597202553e-5) + pow(R - 0.725e1, 3) * (-0.118138063039060001e-3) : (R < 0.775e1 ? -0.108214884052183676e-3 + R * 0.169541115336244897e-4 + pow(R - 0.75e1, 2) * (-0.960564336252670307e-4) + pow(R - 0.75e1, 3) * 0.384587435630762945e-4 : (R < 0.80e1 ? 0.202715825272224676e-3 + R * (-0.238630908609322171e-4) + pow(R - 0.775e1, 2) * (-0.672123759529598099e-4) + pow(R - 0.775e1, 3) * 0.575184818107547053e-4 : (R < 0.825e1 ? 0.381985559149164899e-3 + R * (-0.466845634978956114e-4) + pow(R - 0.80e1, 2) * (-0.240735145948937809e-4) + pow(R - 0.80e1, 3) * 0.148561164585904953e-3 : (R < 0.85e1 ? 0.252299928916753838e-3 + R * (-0.308661024354853181e-4) + pow(R - 0.825e1, 2) * 0.873473588445349404e-4 + pow(R - 0.825e1, 3) * (-0.658099557063746140e-4) : (R < 0.875e1 ? -0.961079989561371571e-5 + R * 0.468210291836907706e-6 + pow(R - 0.85e1, 2) * 0.379898920647539799e-4 + pow(R - 0.85e1, 3) * (-0.735851667204064227e-4) : (R < 0.90e1 ? -0.538663135042048035e-4 + R * 0.566593756413769170e-5 + pow(R - 0.875e1, 2) * (-0.171989829755508439e-4) + pow(R - 0.875e1, 3) * 0.440569943000003052e-4 : (R < 0.925e1 ? -0.512036138955109546e-4 + R * 0.532713250761232824e-5 + pow(R - 0.90e1, 2) * 0.158437627494493867e-4 + pow(R - 0.90e1, 3) * 0.339074324840521100e-5 : (R < 0.95e1 ? -0.129318621398370217e-3 + R * 0.138847782414129986e-4 + pow(R - 0.925e1, 2) * 0.183868201857532949e-4 + pow(R - 0.925e1, 3) * (-0.774359503976211502e-4) : (R < 0.100e2 ? -0.787839910979888967e-4 + R * 0.855894763473567280e-5 + pow(R - 0.95e1, 2) * (-0.396901426124625711e-4) + pow(R - 0.95e1, 3) * 0.329057639739824487e-4 : (R < 0.105e2 ? 0.655148900656006192e-4 + R * (-0.645187199724006181e-5) + pow(R - 0.100e2, 2) * 0.966850334851110023e-5 + pow(R - 0.100e2, 3) * (-0.376538855606195112e-5) : (R < 0.110e2 ? -0.440550794705802909e-5 + R * 0.392589934224574238e-6 + pow(R - 0.105e2, 2) * 0.402042051441817356e-5 + pow(R - 0.105e2, 3) * (-0.347471021613464410e-5) : (R < 0.120e2 ? -0.193930079709594050e-4 + R * 0.180697778654176409e-5 + pow(R - 0.110e2, 2) * (-0.119164480978379259e-5) + pow(R - 0.110e2, 3) * 0.593500442420284344e-7 : (R < 0.140e2 ? 0.593757110559683066e-5 + R * (-0.398261700299735890e-6) + pow(R - 0.120e2, 2) * (-0.101359467705770728e-5) + pow(R - 0.120e2, 3) * 0.333784579103787585e-6 : (R < 0.160e2 ? 0.523896165599159317e-5 + R * (-0.447225459285113785e-6) + pow(R - 0.140e2, 2) * 0.989112797565018333e-6 + pow(R - 0.140e2, 3) * (-0.247200035711230654e-6) : (R < 0.180e2 ? -0.862299962744306164e-5 + R * 0.542825302440191378e-6 + pow(R - 0.160e2, 2) * (-0.494087416702365698e-6) + pow(R - 0.160e2, 3) * 0.105157499541134996e-6 : (R < 0.200e2 ? 0.310218480376172461e-5 + R * (-0.171634369875651360e-6) + pow(R - 0.180e2, 2) * 0.136857580544444302e-6 + pow(R - 0.180e2, 3) * (-0.263526376408093143e-7) : (R < 0.250e2 ? -0.118517938494828098e-5 + R * 0.595643006124140517e-7 + pow(R - 0.200e2, 2) * (-0.212582453004115898e-7) + pow(R - 0.200e2, 3) * 0.183047003398575543e-8 : 0.394603248169254576e-6 + R * (-0.157328998427701814e-7) + pow(R - 0.250e2, 2) * 0.619880520937473953e-8 + pow(R - 0.250e2, 3) * (-0.617831543364140615e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1954120736e1 * (R - 0.300e2) * (R - 0.250e2) + 0.2084388496e2 * R + 0.1224666944e4 - 0.1042194248e1 * R * R + 0.75000e3 * (0.3821547870e-2 * R - 0.1580754204e0) * R) * pow(R, -6));
}

static double radcoeff_6_8_6_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.116357853899999985e-1 + R * 0.257498015965307303e-18 + pow(R - 0.475e1, 2) * 0.408871219750326156e-1 + pow(R - 0.475e1, 3) * (-0.165046759900130457e0) : (R < 0.525e1 ? 0.641259073587907708e-1 + R * (-0.105027064937581530e-1) + pow(R - 0.50e1, 2) * (-0.828979479500652344e-1) + pow(R - 0.50e1, 3) * 0.148838879316391393e0 : (R < 0.55e1 ? 0.132364234643078782e0 + R * (-0.240443905969673841e-1) + pow(R - 0.525e1, 2) * 0.287312115372283065e-1 + pow(R - 0.525e1, 3) * (-0.499363205014350525e-1) : (R < 0.575e1 ? 0.105865679146047678e0 + R * (-0.190418449223723057e-1) + pow(R - 0.55e1, 2) * (-0.872102883884798459e-2) + pow(R - 0.55e1, 3) * 0.527687714573488176e-1 : (R < 0.60e1 ? 0.743267530818745165e-1 + R * (-0.135082146935433939e-1) + pow(R - 0.575e1, 2) * 0.308555497541636303e-1 + pow(R - 0.575e1, 3) * (-0.356435023960206322e-3) : (R < 0.625e1 ? -0.159160042162752799e-1 + R * 0.185272861654587999e-2 + pow(R - 0.60e1, 2) * 0.305882234861934756e-1 + pow(R - 0.60e1, 3) * (-0.446882347535079785e-1) : (R < 0.65e1 ? -0.579216672089991960e-1 + R * 0.876779634335987136e-2 + pow(R - 0.625e1, 2) * (-0.292795257893750920e-2) + pow(R - 0.625e1, 3) * (-0.926438468200790032e-2) : (R < 0.675e1 ? -0.374426055430951352e-1 + R * 0.556674792601463599e-2 + pow(R - 0.65e1, 2) * (-0.987624109044343487e-2) + pow(R - 0.65e1, 3) * 0.689350843833956561e-2 : (R < 0.70e1 ? -0.133444424789257114e-1 + R * 0.192116021298158668e-2 + pow(R - 0.675e1, 2) * (-0.470610976168876066e-2) + pow(R - 0.675e1, 3) * 0.484194188544965695e-2 : (R < 0.725e1 ? -0.344658355581311995e-2 + R * 0.475969435659017131e-3 + pow(R - 0.70e1, 2) * (-0.107465334760151773e-2) + pow(R - 0.70e1, 3) * 0.110101193922179674e-2 : (R < 0.75e1 ? -0.109761579831200193e-2 + R * 0.145082500462345113e-3 + pow(R - 0.725e1, 2) * (-0.248894393185170178e-3) + pow(R - 0.725e1, 3) * 0.186165784863158586e-3 : (R < 0.775e1 ? -0.438704518017017024e-3 + R * 0.555413885316022725e-4 + pow(R - 0.75e1, 2) * (-0.109270054537801239e-3) + pow(R - 0.75e1, 3) * 0.162347143405568639e-3 : (R < 0.80e1 ? -0.255486453737154809e-3 + R * 0.313464506512457796e-4 + pow(R - 0.775e1, 2) * 0.124903030163752470e-4 + pow(R - 0.775e1, 3) * (-0.682681122774334351e-4) : (R < 0.825e1 ? -0.203331542702317014e-3 + R * 0.247913311074146256e-4 + pow(R - 0.80e1, 2) * (-0.387107811916998293e-4) + pow(R - 0.80e1, 3) * 0.363035968401652769e-4 : (R < 0.85e1 ? -0.101658876772139545e-3 + R * 0.122428649190957025e-4 + pow(R - 0.825e1, 2) * (-0.114830835615758699e-4) + pow(R - 0.825e1, 3) * 0.303166107407722348e-4 : (R < 0.875e1 ? -0.101416865683721748e-3 + R * 0.121856876522025592e-4 + pow(R - 0.85e1, 2) * 0.112543744940033070e-4 + pow(R - 0.85e1, 3) * (-0.262257640272541901e-4) : (R < 0.90e1 ? -0.107334489144822966e-3 + R * 0.128955441440940525e-4 + pow(R - 0.875e1, 2) * (-0.841494852643733725e-5) + pow(R - 0.875e1, 3) * (-0.623223500237554809e-4) : (R < 0.925e1 ? 0.342020238872089381e-4 + R * (-0.299737074857877133e-5) + pow(R - 0.90e1, 2) * (-0.551567110442539513e-4) + pow(R - 0.90e1, 3) * 0.102580449690276129e-3 : (R < 0.95e1 ? 0.109544370121455464e-3 + R * (-0.113418919537789693e-4) + pow(R - 0.925e1, 2) * 0.217786262234531526e-4 + pow(R - 0.925e1, 3) * (-0.237789380813490960e-4) : (R < 0.100e2 ? 0.494417472489008144e-4 + R * (-0.491112973230534875e-5) + pow(R - 0.95e1, 2) * 0.394442266244133140e-5 + pow(R - 0.95e1, 3) * (-0.262298744366126888e-5) : (R < 0.105e2 ? 0.303281586867996879e-4 + R * (-0.293394765260996880e-5) + pow(R - 0.100e2, 2) * 0.994149694942770507e-8 + pow(R - 0.100e2, 3) * 0.760522904541020731e-6 : (R < 0.110e2 ? 0.243322058324751454e-4 + R * (-0.235361397725477564e-5) + pow(R - 0.105e2, 2) * 0.115072585376095886e-5 + pow(R - 0.105e2, 3) * 0.148704714309718510e-5 : (R < 0.120e2 ? -0.120355133119790074e-6 + R * (-0.876027661709281702e-7) + pow(R - 0.110e2, 2) * 0.338129656840673630e-5 + pow(R - 0.110e2, 3) * (-0.176078517623580799e-5) : (R < 0.140e2 ? -0.162626950384214406e-4 + R * 0.139263484193512001e-5 + pow(R - 0.120e2, 2) * (-0.190105896030068811e-5) + pow(R - 0.120e2, 3) * 0.479560196404064002e-6 : (R < 0.160e2 ? 0.586273947256408904e-5 + R * (-0.456878642418863559e-6) + pow(R - 0.140e2, 2) * 0.976302218123696112e-6 + pow(R - 0.140e2, 3) * (-0.257717348357132142e-6) : (R < 0.180e2 ? -0.529540151714536149e-5 + R * 0.355722049790335083e-6 + pow(R - 0.160e2, 2) * (-0.570001872019096738e-6) + pow(R - 0.160e2, 3) * 0.136676961074464590e-6 : (R < 0.200e2 ? 0.503591787666457906e-5 + R * (-0.284161905392476634e-6) + pow(R - 0.180e2, 2) * 0.250059894427690854e-6 + pow(R - 0.180e2, 3) * (-0.488378095407262581e-7) : (R < 0.250e2 ? -0.263826228639143213e-5 + R * 0.130023957829571604e-6 + pow(R - 0.200e2, 2) * (-0.429669628166667281e-7) + pow(R - 0.200e2, 3) * 0.363131070855048137e-8 : 0.674510607395239233e-6 + R * (-0.272973671958095666e-7) + pow(R - 0.250e2, 2) * 0.115026978115904929e-7 + pow(R - 0.250e2, 3) * (-0.116294680968571609e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1209060154e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1289670976e3 * R - 0.7576675152e4 + 0.6448354880e1 * R * R + 0.75000e3 * (-0.2364369778e-1 * R + 0.977985633e0) * R) * pow(R, -6));
}

static double radcoeff_6_8_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.112026588599999852e-1 + R * (-0.346944695195361419e-17) + pow(R - 0.475e1, 2) * (-0.128548973172049164e0) + pow(R - 0.475e1, 3) * 0.328570295248196698e0 : (R < 0.525e1 ? -0.765277685061495350e-3 + R * (-0.266755622698770095e-2) + pow(R - 0.50e1, 2) * 0.117878748264098360e0 + pow(R - 0.50e1, 3) * (-0.176368303344590222e0) : (R < 0.55e1 ? -0.131972776246741724e0 + R * 0.232027610279508072e-1 + pow(R - 0.525e1, 2) * (-0.143974792443443220e-1) + pow(R - 0.525e1, 3) * 0.342394066421643911e-1 : (R < 0.575e1 ? -0.128053948148514590e0 + R * 0.224239101511844695e-1 + pow(R - 0.55e1, 2) * 0.112820757372789730e-1 + pow(R - 0.55e1, 3) * (-0.478163122800674203e-1) : (R < 0.60e1 ? -0.108979954362040055e0 + R * 0.190993894673113125e-1 + pow(R - 0.575e1, 2) * (-0.245801584727715974e-1) + pow(R - 0.575e1, 3) * (-0.140740757298945980e-1) : (R < 0.625e1 ? -0.211623110854216590e-1 + R * 0.417042103157027645e-2 + pow(R - 0.60e1, 2) * (-0.351357152701925468e-1) + pow(R - 0.60e1, 3) * 0.381907885756457705e-1 : (R < 0.65e1 ? 0.422827176389525897e-1 + R * (-0.623666374559241413e-2) + pow(R - 0.625e1, 2) * (-0.649262383845821550e-2) + pow(R - 0.625e1, 3) * 0.189892677313114912e-1 : (R < 0.675e1 ? 0.401314933848040192e-1 + R * (-0.592248796520061793e-2) + pow(R - 0.65e1, 2) * 0.774932696002540288e-2 + pow(R - 0.65e1, 3) * (-0.307133361289173290e-2) : (R < 0.70e1 ? 0.183010148453345393e-1 + R * (-0.262369953760511684e-2) + pow(R - 0.675e1, 2) * 0.544582675035660321e-2 + pow(R - 0.675e1, 3) * (-0.481196983654454645e-2) : (R < 0.725e1 ? 0.582150877275242323e-2 + R * (-0.803030506778917700e-3) + pow(R - 0.70e1, 2) * 0.183684937294819272e-2 + pow(R - 0.70e1, 3) * (-0.195332784093008765e-2) : (R < 0.75e1 ? 0.190251716789429336e-2 + R * (-0.250854790479212856e-3) + pow(R - 0.725e1, 2) * 0.371853492250626767e-3 + pow(R - 0.725e1, 3) * (-0.253567715575101350e-3) : (R < 0.775e1 ? 0.883925019691732218e-3 + R * (-0.112471991024230968e-3) + pow(R - 0.75e1, 2) * 0.181677705569300728e-3 + pow(R - 0.75e1, 3) * (-0.184177983489507494e-3) : (R < 0.80e1 ? 0.456034618474940171e-3 + R * (-0.561665101438632461e-4) + pow(R - 0.775e1, 2) * 0.435442179521701144e-4 + pow(R - 0.775e1, 3) * (-0.631563238686843037e-5) : (R < 0.825e1 ? 0.293954027108528175e-3 + R * (-0.355785822403160230e-4) + pow(R - 0.80e1, 2) * 0.388074936620187914e-4 + pow(R - 0.80e1, 3) * (-0.452561025790187740e-4) : (R < 0.85e1 ? 0.205596991180699340e-3 + R * (-0.246603546428726496e-4) + pow(R - 0.825e1, 2) * 0.486541672775471085e-5 + pow(R - 0.825e1, 3) * 0.663921900949435812e-4 : (R < 0.875e1 ? 0.804478836396436855e-4 + R * (-0.977911063619337523e-5) + pow(R - 0.85e1, 2) * 0.546595592989623951e-4 + pow(R - 0.85e1, 3) * (-0.924229128407555710e-4) : (R < 0.90e1 ? -0.508423247090382037e-5 + R * 0.221372855646150941e-6 + pow(R - 0.875e1, 2) * (-0.146576253316042866e-4) + pow(R - 0.875e1, 3) * 0.417731252040787210e-4 : (R < 0.925e1 ? -0.988046376247891851e-5 + R * 0.725021165608768780e-6 + pow(R - 0.90e1, 2) * 0.166722185714547609e-4 + pow(R - 0.90e1, 3) * 0.108237221044406646e-4 : (R < 0.95e1 ? -0.104550733361748655e-3 + R * 0.110905783459187740e-4 + pow(R - 0.925e1, 2) * 0.247900101497852598e-4 + pow(R - 0.925e1, 3) * (-0.643338049178414134e-4) : (R < 0.100e2 ? -0.107164531630803283e-3 + R * 0.114229949987161354e-4 + pow(R - 0.95e1, 2) * (-0.234603435385958003e-4) + pow(R - 0.95e1, 3) * 0.872551849032705518e-5 : (R < 0.105e2 ? 0.572231190043437235e-4 + R * (-0.549320967213437216e-5) + pow(R - 0.100e2, 2) * (-0.103720658031052166e-4) + pow(R - 0.100e2, 3) * 0.206098321347479169e-4 : (R < 0.110e2 ? 0.381059444177580133e-5 + R * (-0.407901374178647773e-6) + pow(R - 0.105e2, 2) * 0.205426823990166620e-4 + pow(R - 0.105e2, 3) * (-0.208588331493187300e-4) : (R < 0.120e2 ? -0.475452220093386063e-4 + R * 0.449065616284896424e-5 + pow(R - 0.110e2, 2) * (-0.107455673249614363e-4) + pow(R - 0.110e2, 3) * 0.426032899011247160e-5 : (R < 0.140e2 ? 0.504913118110379152e-4 + R * (-0.421949151673649275e-5) + pow(R - 0.120e2, 2) * 0.203541964537597932e-5 + pow(R - 0.120e2, 3) * (-0.217733382628866421e-6) : (R < 0.160e2 ? -0.205131685280943846e-4 + R * 0.130938647322102739e-5 + pow(R - 0.140e2, 2) * 0.729019349602780641e-6 + pow(R - 0.140e2, 3) * (-0.294468606731647090e-6) : (R < 0.180e2 ? -0.100721058657381537e-4 + R * 0.691840590852384557e-6 + pow(R - 0.160e2, 2) * (-0.103779229078710200e-5) + pow(R - 0.160e2, 3) * 0.241965883242954867e-6 : (R < 0.200e2 ? 0.101688661932501710e-4 + R * (-0.555737973380565052e-6) + pow(R - 0.180e2, 2) * 0.414003008670627147e-6 + pow(R - 0.180e2, 3) * (-0.788652893276722881e-7) : (R < 0.250e2 ? -0.299861534169751896e-5 + R * 0.153890589369875944e-6 + pow(R - 0.200e2, 2) * (-0.591887272954065889e-7) + pow(R - 0.200e2, 3) * 0.518141802188627863e-8 : 0.125136676146797471e-5 + R * (-0.493903319427189875e-7) + pow(R - 0.250e2, 2) * 0.185325430328875972e-7 + pow(R - 0.250e2, 3) * (-0.182668222806875987e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2534286262e2 * (R - 0.300e2) * (R - 0.250e2) + 0.2703248996e3 * R + 0.1588133240e5 - 0.1351624498e2 * R * R + 0.75000e3 * (0.495590783e-1 * R - 0.2049937061e1) * R) * pow(R, -6));
}

static double radcoeff_6_8_7_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.548746299599999973e-2 + pow(R - 0.475e1, 2) * 0.368954846260525909e-1 + pow(R - 0.475e1, 3) * (-0.620085210322103633e-1) : (R < 0.525e1 ? -0.382561014454342596e-1 + R * 0.682114461948685191e-2 + pow(R - 0.50e1, 2) * (-0.961090614810518155e-2) + pow(R - 0.50e1, 3) * 0.116398063606310796e-1 : (R < 0.55e1 ? -0.249042168527760926e-1 + R * 0.419815523805258922e-2 + pow(R - 0.525e1, 2) * (-0.881051377631870318e-3) + pow(R - 0.525e1, 3) * 0.282008413368606487e-2 : (R < 0.575e1 ? -0.254005392236653534e-1 + R * 0.428639532430279135e-2 + pow(R - 0.55e1, 2) * 0.123401172263267844e-2 + pow(R - 0.55e1, 3) * (-0.826130123137536893e-2) : (R < 0.60e1 ? -0.200935646349334300e-1 + R * 0.335440720473624858e-2 + pow(R - 0.575e1, 2) * (-0.496196420089884890e-2) + pow(R - 0.575e1, 3) * 0.110048888141541521e-2 : (R < 0.625e1 ? -0.673864964761328612e-2 + R * 0.107976676955221429e-2 + pow(R - 0.60e1, 2) * (-0.413659753983728739e-2) + pow(R - 0.60e1, 3) * 0.617050619211371998e-2 : (R < 0.65e1 ? -0.120496746649308237e-2 + R * 0.168437910654893196e-3 + pow(R - 0.625e1, 2) * 0.491282104248002920e-3 + pow(R - 0.625e1, 3) * (-0.825613350990302359e-3) : (R < 0.675e1 ? -0.177761311087338398e-2 + R * 0.259276459468212950e-3 + pow(R - 0.65e1, 2) * (-0.127927908994723876e-3) + pow(R - 0.65e1, 3) * (-0.418003072312511409e-3) : (R < 0.70e1 ? -0.831348071937721821e-3 + R * 0.116936928912255079e-3 + pow(R - 0.675e1, 2) * (-0.441430213229107474e-3) + pow(R - 0.675e1, 3) * 0.431329222960348416e-3 : (R < 0.725e1 ? 0.126688200010633263e-3 + R * (-0.229039483972333232e-4) + pow(R - 0.70e1, 2) * (-0.117933296008846162e-3) + pow(R - 0.70e1, 3) * 0.363241436151117759e-3 : (R < 0.75e1 ? 0.587198872140831841e-4 + R * (-0.137628271233218175e-4) + pow(R - 0.725e1, 2) * 0.154497781104492198e-3 + pow(R - 0.725e1, 3) * (-0.134652074764819740e-3) : (R < 0.775e1 ? -0.323740139138904378e-3 + R * 0.382387994105205838e-4 + pow(R - 0.75e1, 2) * 0.535087250308773933e-4 + pow(R - 0.75e1, 3) * (-0.429016234918389158e-4) : (R < 0.80e1 ? -0.466071069549606014e-3 + R * 0.569491075212394838e-4 + pow(R - 0.775e1, 2) * 0.213325074119982031e-4 + pow(R - 0.775e1, 3) * (-0.548258152678245746e-4) : (R < 0.825e1 ? -0.468685747946171729e-3 + R * 0.573355208645214687e-4 + pow(R - 0.80e1, 2) * (-0.197868540388702329e-4) + pow(R - 0.80e1, 3) * (-0.839452671168626832e-4) : (R < 0.85e1 ? -0.259760463142565470e-3 + R * 0.317023562606746025e-4 + pow(R - 0.825e1, 2) * (-0.827458043765172386e-4) + pow(R - 0.825e1, 3) * 0.526203216232752478e-4 : (R < 0.875e1 ? 0.369614762236915879e-5 + R * 0.195764376780098967e-6 + pow(R - 0.85e1, 2) * (-0.432805631590607993e-4) + pow(R - 0.85e1, 3) * 0.925188500637616072e-4 : (R < 0.90e1 ? 0.400004448922062421e-4 + R * (-0.409723281579499935e-5) + pow(R - 0.875e1, 2) * 0.261085743887604095e-4 + pow(R - 0.875e1, 3) * (-0.968529785183216415e-4) : (R < 0.925e1 ? 0.860697195024009423e-4 + R * (-0.920287909360010409e-5) + pow(R - 0.90e1, 2) * (-0.465311594999808284e-4) + pow(R - 0.90e1, 3) * 0.108543284105524988e-3 : (R < 0.95e1 ? 0.111809365164392417e-3 + R * (-0.121165930738045855e-4) + pow(R - 0.925e1, 2) * 0.348763035791629095e-4 + pow(R - 0.925e1, 3) * (-0.114861760797782585e-4) : (R < 0.100e2 ? -0.313930282217752204e-4 + R * 0.316790070081844409e-5 + pow(R - 0.95e1, 2) * 0.262616715193292156e-4 + pow(R - 0.95e1, 3) * (-0.464901192179322084e-4) : (R < 0.105e2 ? 0.554203036970149320e-4 + R * (-0.543801719330149319e-5) + pow(R - 0.100e2, 2) * (-0.434735073075690970e-4) + pow(R - 0.100e2, 3) * 0.611631391803441673e-4 : (R < 0.110e2 ? 0.270094249519308237e-4 + R * (-0.303917011561245963e-5) + pow(R - 0.105e2, 2) * 0.482712014629471539e-4 + pow(R - 0.105e2, 3) * (-0.448022316394444784e-4) : (R < 0.120e2 ? -0.127887858704464743e-3 + R * 0.116303576177513389e-4 + pow(R - 0.110e2, 2) * (-0.189321459962195568e-4) + pow(R - 0.110e2, 3) * 0.747411658616821732e-5 : (R < 0.140e2 ? 0.459574186926974497e-4 + R * (-0.381158461618312106e-5) + pow(R - 0.120e2, 2) * 0.349020376228509471e-5 + pow(R - 0.120e2, 3) * (-0.722812202871766937e-6) : (R < 0.160e2 ? -0.198832244866447536e-4 + R * 0.147548399849605370e-5 + pow(R - 0.140e2, 2) * (-0.846669454945506908e-6) + pow(R - 0.140e2, 3) * 0.114281637061239976e-6 : (R < 0.180e2 ? 0.988912159081750249e-5 + R * (-0.539814176551093898e-6) + pow(R - 0.160e2, 2) * (-0.160979632578066997e-6) + pow(R - 0.160e2, 3) * 0.700169030518069733e-7 : (R < 0.200e2 ? 0.627222077165020782e-5 + R * (-0.343529870241678205e-6) + pow(R - 0.180e2, 2) * 0.259121785732774843e-6 + pow(R - 0.180e2, 3) * (-0.494617551184678688e-7) : (R < 0.250e2 ? -0.194590775655613478e-5 + R * 0.994162112678067438e-7 + pow(R - 0.200e2, 2) * (-0.376487449780323626e-7) + pow(R - 0.200e2, 3) * 0.328493113369420269e-8 : 0.776430379536292316e-6 + R * (-0.307014034854516923e-7) + pow(R - 0.250e2, 2) * 0.116252220273806754e-7 + pow(R - 0.250e2, 3) * (-0.114829055805806735e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1357327002e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1447821780e3 * R + 0.8505846460e4 - 0.7239108900e1 * R * R + 0.75000e3 * (0.2654319647e-1 * R - 0.1097920361e1) * R) * pow(R, -6));
}

static double radcoeff_6_8_8_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.233873666300000067e-1 + R * 0.173472347597680709e-17 + pow(R - 0.475e1, 2) * (-0.118393483364398477e-3) + pow(R - 0.475e1, 3) * 0.159294637613457579e0 : (R < 0.525e1 ? -0.169948526564205532e0 + R * 0.298085478108411073e-1 + pow(R - 0.50e1, 2) * 0.119352584726728800e0 + pow(R - 0.50e1, 3) * (-0.229325323400372844e0) : (R < 0.55e1 ? -0.253630617883336851e0 + R * 0.464863420366355903e-1 + pow(R - 0.525e1, 2) * (-0.526414078235508537e-1) + pow(R - 0.525e1, 3) * 0.740469297160339518e-1 : (R < 0.575e1 ? -0.187360747350750867e0 + R * 0.340494374466165234e-1 + pow(R - 0.55e1, 2) * 0.289378946347461450e-2 + pow(R - 0.55e1, 3) * (-0.846323782477629433e-1) : (R < 0.60e1 ? -0.105577628328165099e0 + R * 0.196277612568982775e-1 + pow(R - 0.575e1, 2) * (-0.605804942223475903e-1) + pow(R - 0.575e1, 3) * 0.216810811310178819e-1 : (R < 0.625e1 ? 0.483251240702579771e-1 + R * (-0.659728314220966311e-2) + pow(R - 0.60e1, 2) * (-0.443196833740841789e-1) + pow(R - 0.60e1, 3) * 0.697412276756913252e-1 : (R < 0.65e1 ? 0.103415859903372695e0 + R * (-0.156806446400596308e-1) + pow(R - 0.625e1, 2) * 0.798623738268431325e-2 + pow(R - 0.625e1, 3) * 0.120061194622168316e-1 : (R < 0.675e1 ? 0.635148657680868062e-1 + R * (-0.943637854955181599e-2) + pow(R - 0.65e1, 2) * 0.169908269793469374e-1 + pow(R - 0.65e1, 3) * (-0.125358421645586863e-1) : (R < 0.70e1 ? 0.229025541043984364e-1 + R * (-0.329143546573310193e-2) + pow(R - 0.675e1, 2) * 0.758894535592792140e-2 + pow(R - 0.675e1, 3) * (-0.757240912718205351e-2) : (R < 0.725e1 ? 0.663602253021043555e-2 + R * (-0.916789499115776589e-3) + pow(R - 0.70e1, 2) * 0.190963851054138040e-2 + pow(R - 0.70e1, 3) * (-0.175601902271309588e-2) : (R < 0.75e1 ? 0.219258589813749053e-2 + R * (-0.291223810603791840e-3) + pow(R - 0.725e1, 2) * 0.592624243506558379e-3 + pow(R - 0.725e1, 3) * (-0.672211821965563354e-3) : (R < 0.775e1 ? 0.942078565127918584e-3 + R * (-0.120951405469055820e-3) + pow(R - 0.75e1, 2) * 0.884653770323858089e-4 + pow(R - 0.75e1, 3) * 0.803105825753497185e-4 : (R < 0.80e1 ? 0.489357852739882339e-3 + R * (-0.616604827199848231e-4) + pow(R - 0.775e1, 2) * 0.148698313963898098e-3 + pow(R - 0.775e1, 3) * (-0.207311289391835102e-3) : (R < 0.825e1 ? 0.211585936698038932e-3 + R * (-0.261821924990048660e-4) + pow(R - 0.80e1, 2) * (-0.678515307997823200e-5) + pow(R - 0.80e1, 3) * 0.708479584159908113e-4 : (R < 0.85e1 ? 0.130664684760964573e-3 + R * (-0.162907768359957057e-4) + pow(R - 0.825e1, 2) * 0.463508157320148765e-4 + pow(R - 0.825e1, 3) * (-0.625786428321282361e-4) : (R < 0.875e1 ? 0.353275646026046550e-4 + R * (-0.484886450101231262e-5) + pow(R - 0.85e1, 2) * (-0.583166392081306946e-6) + pow(R - 0.85e1, 3) * 0.575939732965222306e-4 : (R < 0.90e1 ? -0.557477369383933315e-4 + R * 0.565842229604495235e-5 + pow(R - 0.875e1, 2) * 0.426123135803103706e-4 + pow(R - 0.875e1, 3) * (-0.921082241779607337e-4) : (R < 0.925e1 ? -0.908464411534925246e-4 + R * 0.969428705283250180e-5 + pow(R - 0.90e1, 2) * (-0.264688545531601762e-4) + pow(R - 0.90e1, 3) * 0.792942716393206867e-4 : (R < 0.95e1 ? -0.106369321634781672e-3 + R * 0.113275357086250450e-4 + pow(R - 0.925e1, 2) * 0.330018491763303388e-4 + pow(R - 0.925e1, 3) * (-0.992575936433220561e-4) : (R < 0.100e2 ? -0.858138008723395557e-4 + R * 0.921766148866732212e-5 + pow(R - 0.95e1, 2) * (-0.414413460561612100e-4) + pow(R - 0.95e1, 3) * 0.398497126728531223e-4 : (R < 0.105e2 ? 0.243476922129404022e-4 + R * (-0.233640006285404024e-5) + pow(R - 0.100e2, 2) * 0.183332229531184836e-4 + pow(R - 0.100e2, 3) * (-0.200887994900208018e-4) : (R < 0.110e2 ? -0.787964700886282944e-5 + R * 0.930223272748840797e-6 + pow(R - 0.105e2, 2) * (-0.117999762819127207e-4) + pow(R - 0.105e2, 3) * 0.102214153208300776e-4 : (R < 0.120e2 ? 0.359210985400545244e-4 + R * (-0.320369151854132083e-5) + pow(R - 0.110e2, 2) * 0.353214669933239576e-5 + pow(R - 0.110e2, 3) * (-0.120541289579107436e-5) : (R < 0.140e2 ? -0.312882419190296104e-5 + R * 0.244363192750246765e-6 + pow(R - 0.120e2, 2) * (-0.840919880408279334e-7) + pow(R - 0.120e2, 3) * 0.911642236078522800e-7 : (R < 0.160e2 ? -0.133423165910362749e-4 + R * 0.100196592388116250e-5 + pow(R - 0.140e2, 2) * 0.462893353606285720e-6 + pow(R - 0.140e2, 3) * (-0.264657942148433512e-6) : (R < 0.180e2 ? 0.758114354759834474e-5 + R * (-0.322355967474896557e-6) + pow(R - 0.160e2, 2) * (-0.112505429928431525e-5) + pow(R - 0.160e2, 3) * 0.322465682635881777e-6 : (R < 0.200e2 ? 0.170119739102683667e-4 + R * (-0.952984972981575910e-6) + pow(R - 0.180e2, 2) * 0.809739796530975412e-6 + pow(R - 0.180e2, 3) * (-0.157379433532593729e-6) : (R < 0.250e2 ? -0.801622204652401962e-5 + R * 0.397421010751200942e-6 + pow(R - 0.200e2, 2) * (-0.134536804664586986e-6) + pow(R - 0.200e2, 3) * 0.114391817540693629e-7 : 0.223599093338667255e-5 + R * (-0.900084043394668939e-7) + pow(R - 0.250e2, 2) * 0.370509216464534311e-7 + pow(R - 0.250e2, 3) * (-0.372784129491200980e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2169658608e2 * (R - 0.300e2) * (R - 0.250e2) - 0.2314299352e3 * R - 0.1359661112e5 + 0.1157149676e2 * R * R + 0.75000e3 * (-0.4242901655e-1 * R + 0.1755021073e1) * R) * pow(R, -6));
}

static double radcoeff_6_8_8_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.167928144699999657e-1 + R * 0.693889390390722838e-17 + pow(R - 0.475e1, 2) * 0.360234712076034302e0 + pow(R - 0.475e1, 3) * (-0.855413753904137097e0) : (R < 0.525e1 ? -0.726947418349571384e-1 + R * 0.197272771809914246e-1 + pow(R - 0.50e1, 2) * (-0.281325603352068632e0) + pow(R - 0.50e1, 3) * 0.414844361232411807e0 : (R < 0.55e1 ? 0.246321641810819808e0 + R * (-0.431522067639656809e-1) + pow(R - 0.525e1, 2) * 0.298076675722402130e-1 + pow(R - 0.525e1, 3) * (-0.703805371055099271e-1) : (R < 0.575e1 ? 0.237693768208207812e0 + R * (-0.414447236851286926e-1) + pow(R - 0.55e1, 2) * (-0.229777352568922427e-1) + pow(R - 0.55e1, 3) * 0.983528540696280984e-1 : (R < 0.60e1 ? 0.197818741173837354e0 + R * (-0.344924311755195404e-1) + pow(R - 0.575e1, 2) * 0.507869052953288380e-1 + pow(R - 0.575e1, 3) * 0.829954578699730952e-2 : (R < 0.625e1 ? 0.394248982617587673e-1 + R * (-0.754281369279312733e-2) + pow(R - 0.60e1, 2) * 0.570115646355768210e-1 + pow(R - 0.60e1, 3) * (-0.626461848656172382e-1) : (R < 0.65e1 ? -0.627383671838253193e-1 + R * 0.921680896269205102e-2 + pow(R - 0.625e1, 2) * 0.100269259863638958e-1 + pow(R - 0.625e1, 3) * (-0.280947882765283999e-1) : (R < 0.675e1 ? -0.608976516201620022e-1 + R * 0.896249915402492353e-2 + pow(R - 0.65e1, 2) * (-0.110441652210324041e-1) + pow(R - 0.65e1, 3) * 0.408845201973084132e-2 : (R < 0.70e1 ? -0.294244193501557207e-1 + R * 0.420700129720825468e-2 + pow(R - 0.675e1, 2) * (-0.797782620623427308e-2) + pow(R - 0.675e1, 3) * 0.677068848560502274e-2 : (R < 0.725e1 ? -0.107813783959944173e-1 + R * 0.148759228514205952e-2 + pow(R - 0.70e1, 2) * (-0.289980984203050580e-2) + pow(R - 0.70e1, 3) * 0.268886541064907152e-2 : (R < 0.75e1 ? -0.406396872932042984e-2 + R * 0.541849628623507587e-3 + pow(R - 0.725e1, 2) * (-0.883160784043701837e-3) + pow(R - 0.725e1, 3) * 0.610475472438686017e-3 : (R < 0.775e1 ? -0.165625579201932700e-2 + R * 0.214733387683910249e-3 + pow(R - 0.75e1, 2) * (-0.425304179714687297e-3) + pow(R - 0.75e1, 3) * 0.396096137676185255e-3 : (R < 0.80e1 ? -0.604171804766597898e-3 + R * 0.763493236408513388e-4 + pow(R - 0.775e1, 2) * (-0.128232076457548370e-3) + pow(R - 0.775e1, 3) * 0.683045586165721095e-4 : (R < 0.825e1 ? -0.200647582906975433e-3 + R * 0.250403901526844287e-4 + pow(R - 0.80e1, 2) * (-0.770036574951192841e-4) + pow(R - 0.80e1, 3) * 0.141100929361526254e-3 : (R < 0.85e1 ? -0.103881022417390444e-3 + R * 0.129949856604109628e-4 + pow(R - 0.825e1, 2) * 0.288220395260254169e-4 + pow(R - 0.825e1, 3) * (-0.882816507826770597e-4) : (R < 0.875e1 ? -0.852538327912096146e-4 + R * 0.108531959016717200e-4 + pow(R - 0.85e1, 2) * (-0.373891985609823847e-4) + pow(R - 0.85e1, 3) * 0.832974249182005974e-6 : (R < 0.90e1 ? 0.746335028481061465e-4 + R * (-0.768522070709784624e-5) + pow(R - 0.875e1, 2) * (-0.367644678740958802e-4) + pow(R - 0.875e1, 3) * 0.683948770499490468e-4 : (R < 0.925e1 ? 0.123428143971523015e-3 + R * (-0.132434151972803367e-4) + pow(R - 0.90e1, 2) * 0.145316899133659100e-4 + pow(R - 0.90e1, 3) * (-0.282414053289782360e-4) : (R < 0.95e1 ? 0.105667224150972431e-3 + R * (-0.112728337397808038e-4) + pow(R - 0.925e1, 2) * (-0.664936408336776950e-5) + pow(R - 0.925e1, 3) * 0.379828101859639345e-4 : (R < 0.100e2 ? 0.697727190571662627e-4 + R * (-0.747573887159644876e-5) + pow(R - 0.95e1, 2) * 0.218377435561051839e-4 + pow(R - 0.95e1, 3) * (-0.129482501938245699e-4) : (R < 0.105e2 ? -0.476519354354030625e-4 + R * 0.465081703914030602e-5 + pow(R - 0.100e2, 2) * 0.241536826536832652e-5 + pow(R - 0.100e2, 3) * (-0.768031336729787763e-5) : (R < 0.110e2 ? -0.128870315589698561e-4 + R * 0.130595027903522431e-5 + pow(R - 0.105e2, 2) * (-0.910510178557848908e-5) + pow(R - 0.105e2, 3) * 0.804297944461607955e-5 : (R < 0.120e2 ? 0.196436046484932461e-4 + R * (-0.176691692308120426e-5) + pow(R - 0.110e2, 2) * 0.295936738134563109e-5 + pow(R - 0.110e2, 3) * (-0.110937637266442680e-5) : (R < 0.140e2 ? -0.959367207920132891e-5 + R * 0.823688721616777422e-6 + pow(R - 0.120e2, 2) * (-0.368761736647649146e-6) + pow(R - 0.120e2, 3) * 0.238769959196302033e-7 : (R < 0.160e2 ? 0.576161887933559489e-5 + R * (-0.364834273938256762e-6) + pow(R - 0.140e2, 2) * (-0.225499761129867919e-6) + pow(R - 0.140e2, 3) * 0.892553155369981415e-7 : (R < 0.180e2 ? 0.286862648832001190e-5 + R * (-0.195769532013750741e-6) + pow(R - 0.160e2, 2) * 0.310032132092121009e-6 + pow(R - 0.160e2, 3) * (-0.735339453301228203e-7) : (R < 0.200e2 ? -0.291849786527866905e-5 + R * 0.161951652393259373e-6 + pow(R - 0.180e2, 2) * (-0.131171539888615965e-6) + pow(R - 0.180e2, 3) * 0.253173562584931361e-7 : (R < 0.250e2 ? 0.117691251428573575e-5 + R * (-0.589262320592867896e-7) + pow(R - 0.200e2, 2) * 0.207325976623428775e-7 + pow(R - 0.200e2, 3) * (-0.177927947489710382e-8) : -0.374182878671479960e-6 + R * 0.149537839468591977e-7 + pow(R - 0.250e2, 2) * (-0.595659446111367919e-8) + pow(R - 0.250e2, 3) * 0.595118417548367981e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.5158806080e0 * (R - 0.300e2) * (R - 0.250e2) - 0.5502400888e1 * R - 0.3234476226e3 + 0.2751200444e0 * R * R + 0.75000e3 * (-0.1009119345e-2 * R + 0.4174556175e-1) * R) * pow(R, -6));
}

static double radcoeff_6_8_9_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.389279971099999993e-2 + pow(R - 0.475e1, 2) * 0.100544411926755187e-2 + pow(R - 0.475e1, 3) * (-0.798574236507020724e-2) : (R < 0.525e1 ? 0.880388591308443880e-2 + R * (-0.994604633816887924e-3) + pow(R - 0.50e1, 2) * (-0.498386265453510356e-2) + pow(R - 0.50e1, 3) * 0.469037531921061897e-2 : (R < 0.55e1 ? 0.170312328748453562e-1 + R * (-0.260709058873244848e-2) + pow(R - 0.525e1, 2) * (-0.146608116512713911e-2) + pow(R - 0.525e1, 3) * (-0.358543206377226866e-2) : (R < 0.575e1 ? 0.246127804458932536e-1 + R * (-0.401239968325331833e-2) + pow(R - 0.55e1, 2) * (-0.415515521295634072e-2) + pow(R - 0.55e1, 3) * 0.110486783758784596e-1 : (R < 0.60e1 ? 0.245599337079620943e-1 + R * (-0.401835009425427752e-2) + pow(R - 0.575e1, 2) * 0.413135356895250397e-2 + pow(R - 0.575e1, 3) * (-0.107866150141574385e-3) : (R < 0.625e1 ? 0.125437466094774266e-1 + R * (-0.197289821292957095e-2) + pow(R - 0.60e1, 2) * 0.405045395634632318e-2 + pow(R - 0.60e1, 3) * (-0.460107795451215971e-2) : (R < 0.65e1 ? 0.545922775307149544e-2 + R * (-0.810373351227439251e-3) + pow(R - 0.625e1, 2) * 0.599645490462203290e-3 + pow(R - 0.625e1, 3) * (-0.116724015809785097e-3) : (R < 0.675e1 ? 0.368829133374436961e-2 + R * (-0.532436358960672231e-3) + pow(R - 0.65e1, 2) * 0.512102478604864464e-3 + pow(R - 0.65e1, 3) * (-0.821812206487023170e-4) : (R < 0.70e1 ? 0.209467839917663401e-2 + R * (-0.291794098529871712e-3) + pow(R - 0.675e1, 2) * 0.450466563118337719e-3 + pow(R - 0.675e1, 3) * (-0.313542009115403190e-3) : (R < 0.725e1 ? 0.952824381528886836e-3 + R * (-0.125349943679840971e-3) + pow(R - 0.70e1, 2) * 0.215310056281785300e-3 + pow(R - 0.70e1, 3) * (-0.418711739369685807e-3) : (R < 0.75e1 ? 0.748426205803041987e-3 + R * (-0.962033666707644031e-4) + pow(R - 0.725e1, 2) * (-0.987237482454790684e-4) + pow(R - 0.725e1, 3) * 0.287717675074146699e-3 : (R < 0.775e1 ? 0.712362635558260664e-3 + R * (-0.916181767171014177e-4) + pow(R - 0.75e1, 2) * 0.117064508060130997e-3 + pow(R - 0.75e1, 3) * (-0.212707276446901146e-3) : (R < 0.80e1 ? 0.571820908466431650e-3 + R * (-0.729685370208298876e-4) + pow(R - 0.775e1, 2) * (-0.424659492750448694e-4) + pow(R - 0.775e1, 3) * 0.271648197433457643e-3 : (R < 0.825e1 ? 0.335802790666632001e-3 + R * (-0.432674746395790008e-4) + pow(R - 0.80e1, 2) * 0.161270198800048369e-3 + pow(R - 0.80e1, 3) * (-0.227662745286929315e-3) : (R < 0.85e1 ? 0.292511867620461036e-4 + R * (-0.531913998085407285e-5) + pow(R - 0.825e1, 2) * (-0.947686016514863742e-5) + pow(R - 0.825e1, 3) * 0.162103322594259712e-3 : (R < 0.875e1 ? -0.186883767265460116e-3 + R * 0.203368029229953061e-4 + pow(R - 0.85e1, 2) * 0.112100631780546160e-3 + pow(R - 0.85e1, 3) * (-0.276029019842109519e-3) : (R < 0.90e1 ? -0.221770584575637449e-3 + R * 0.246316775928728514e-4 + pow(R - 0.875e1, 2) * (-0.949211331010359926e-4) + pow(R - 0.875e1, 3) * 0.225698955494178360e-3 : (R < 0.925e1 ? -0.177898497656619645e-3 + R * 0.194896651975132958e-4 + pow(R - 0.90e1, 2) * 0.743530835195977703e-4 + pow(R - 0.90e1, 3) * (-0.289327068438603773e-3) : (R < 0.95e1 ? -0.198535423359341618e-4 + R * 0.241738162507396342e-5 + pow(R - 0.925e1, 2) * (-0.142642217809355086e-3) + pow(R - 0.925e1, 3) * 0.266152179572236877e-3 : (R < 0.100e2 ? 0.178856911588186958e-3 + R * (-0.190001936098091551e-4) + pow(R - 0.95e1, 2) * 0.569719168698225783e-4 + pow(R - 0.95e1, 3) * (-0.375246501964085293e-4) : (R < 0.105e2 ? -0.998749826940702412e-4 + R * 0.982823561270702284e-5 + pow(R - 0.100e2, 2) * 0.684941575209779184e-6 + pow(R - 0.100e2, 3) * (-0.678581397724765516e-5) : (R < 0.110e2 ? -0.543055755163011561e-4 + R * 0.542381670498106245e-5 + pow(R - 0.105e2, 2) * (-0.949377939066170345e-5) + pow(R - 0.105e2, 3) * 0.319928660139915963e-5 : (R < 0.120e2 ? 0.217583492969439934e-4 + R * (-0.167049773463127203e-5) + pow(R - 0.110e2, 2) * (-0.469484948856296380e-5) + pow(R - 0.110e2, 3) * 0.273351137719423507e-5 : (R < 0.140e2 ? 0.340669893324939277e-4 + R * (-0.285966258017449399e-5) + pow(R - 0.120e2, 2) * 0.350568464301974269e-5 + pow(R - 0.120e2, 3) * (-0.885392757216247840e-6) : (R < 0.160e2 ? -0.656577094973303445e-5 + R * 0.538362905309502465e-6 + pow(R - 0.140e2, 2) * (-0.180667190027774414e-5) + pow(R - 0.140e2, 3) * 0.501665699686496467e-6 : (R < 0.180e2 ? 0.952805432501627288e-5 + R * (-0.668336299563517026e-6) + pow(R - 0.160e2, 2) * 0.120332229784123445e-5 + pow(R - 0.160e2, 3) * (-0.290175270529737915e-6) : (R < 0.200e2 ? -0.119414056579021733e-4 + R * 0.662849645444565155e-6 + pow(R - 0.180e2, 2) * (-0.537729325337193253e-6) + pow(R - 0.180e2, 3) * 0.103811603907455321e-6 : (R < 0.250e2 ? 0.484173096119487743e-5 + R * (-0.242328409014743852e-6) + pow(R - 0.200e2, 2) * 0.851402981075386966e-7 + pow(R - 0.200e2, 3) * (-0.730434187531798292e-8) : -0.153223783119485785e-5 + R * 0.612489314117943144e-7 + pow(R - 0.250e2, 2) * (-0.244248300222310587e-7) + pow(R - 0.250e2, 3) * 0.244085993517443875e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1547910112e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1651093704e2 * R - 0.9701149020e3 + 0.8255468520e0 * R * R + 0.75000e3 * (-0.3027190555e-2 * R + 0.1252181380e0) * R) * pow(R, -6));
}

static double radcoeff_6_8_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.446200588699999998e-1 + pow(R - 0.475e1, 2) * (-0.310189105138520993e0) + pow(R - 0.475e1, 3) * 0.315169561674083942e0 : (R < 0.525e1 ? 0.510159062976848765e0 + R * (-0.960002597553697573e-1) + pow(R - 0.50e1, 2) * (-0.738119338829580085e-1) + pow(R - 0.50e1, 3) * 0.255681376417748185e0 : (R < 0.55e1 ? 0.451610810147235031e0 + R * (-0.849659686185209595e-1) + pow(R - 0.525e1, 2) * 0.117949098430353130e0 + pow(R - 0.525e1, 3) * (-0.115819059665077120e0) : (R < 0.575e1 ? 0.252251340588005024e0 + R * (-0.477074930905463657e-1) + pow(R - 0.55e1, 2) * 0.310848036815452901e-1 + pow(R - 0.55e1, 3) * 0.910357793625606870e-1 : (R < 0.60e1 ? 0.680998146609381461e-1 + R * (-0.150958826192935901e-1) + pow(R - 0.575e1, 2) * 0.993616382034658019e-1 + pow(R - 0.575e1, 3) * (-0.628895477051657215e-1) : (R < 0.625e1 ? -0.154006905576324404e0 + R * 0.227931462877207364e-1 + pow(R - 0.60e1, 2) * 0.521944774245915039e-1 + pow(R - 0.60e1, 3) * (-0.100114823997897742e0) : (R < 0.65e1 ? -0.198094727441566587e0 + R * 0.301188555004106573e-1 + pow(R - 0.625e1, 2) * (-0.228916405738318028e-1) + pow(R - 0.625e1, 3) * (-0.992917319924335219e-2) : (R < 0.675e1 ? -0.113181586607138077e0 + R * 0.168113152386366281e-1 + pow(R - 0.65e1, 2) * (-0.303385204732643174e-1) + pow(R - 0.65e1, 3) * 0.231283217868712143e-1 : (R < 0.70e1 ? -0.415956397730390531e-1 + R * 0.597861533704282209e-2 + pow(R - 0.675e1, 2) * (-0.129922791331109067e-1) + pow(R - 0.675e1, 3) * 0.123303337509584766e-1 : (R < 0.725e1 ? -0.129255818362445825e-1 + R * 0.179441334879208323e-2 + pow(R - 0.70e1, 2) * (-0.374452881989204922e-2) + pow(R - 0.70e1, 3) * 0.345347270689486379e-2 : (R < 0.75e1 ? -0.422630186526913327e-2 + R * 0.569675071388845962e-3 + pow(R - 0.725e1, 2) * (-0.115442428972090116e-2) + pow(R - 0.725e1, 3) * 0.106336492802207023e-2 : (R < 0.775e1 ? -0.144810414995200152e-2 + R * 0.191843850532533535e-3 + pow(R - 0.75e1, 2) * (-0.356900593704348435e-3) + pow(R - 0.75e1, 3) * 0.262548100696856812e-3 : (R < 0.80e1 ? -0.464833531207905029e-3 + R * 0.626213225610200040e-4 + pow(R - 0.775e1, 2) * (-0.159989518181705826e-3) + pow(R - 0.775e1, 3) * 0.146403910790503266e-3 : (R < 0.825e1 ? -0.521931084470916455e-4 + R * 0.100772967433864552e-4 + pow(R - 0.80e1, 2) * (-0.501865850888283627e-4) + pow(R - 0.80e1, 3) * 0.156183847811301475e-4 : (R < 0.85e1 ? 0.127774241780168003e-3 + R * (-0.120875486545658184e-4) + pow(R - 0.825e1, 2) * (-0.384727965029807521e-4) + pow(R - 0.825e1, 3) * (-0.197417705550239148e-4) : (R < 0.875e1 ? 0.320034058793547036e-3 + R * (-0.350255288851231806e-4) + pow(R - 0.85e1, 2) * (-0.532791244192486898e-4) + pow(R - 0.85e1, 3) * 0.153787110238965644e-3 : (R < 0.90e1 ? 0.299896228713237873e-3 + R * (-0.328300079249414672e-4) + pow(R - 0.875e1, 2) * 0.620612082599755500e-4 + pow(R - 0.875e1, 3) * (-0.549022354568386753e-4) : (R < 0.925e1 ? 0.116289291963998534e-3 + R * (-0.120935729431109481e-4) + pow(R - 0.90e1, 2) * 0.208845316673465367e-4 + pow(R - 0.90e1, 3) * (-0.763398967316109792e-4) : (R < 0.95e1 ? 0.152212813739186317e-3 + R * (-0.159650377466147367e-4) + pow(R - 0.925e1, 2) * (-0.363703908813616943e-4) + pow(R - 0.925e1, 3) * 0.125733540271282570e-3 : (R < 0.100e2 ? 0.100700738953785946e-3 + R * (-0.105751943864300985e-4) + pow(R - 0.95e1, 2) * 0.579297643221002469e-4 + pow(R - 0.95e1, 3) * (-0.592166891464801062e-4) : (R < 0.105e2 ? -0.273913807311007559e-4 + R * 0.294205307581007552e-5 + pow(R - 0.100e2, 2) * (-0.308952693976199090e-4) + pow(R - 0.100e2, 3) * 0.331733789719995090e-4 : (R < 0.110e2 ? 0.321914435614071041e-4 + R * (-0.307318209281020005e-5) + pow(R - 0.105e2, 2) * 0.188647990603793579e-4 + pow(R - 0.105e2, 3) * (-0.166813495575179123e-4) : (R < 0.120e2 ? -0.350691811827379268e-4 + R * 0.328060479943072104e-5 + pow(R - 0.110e2, 2) * (-0.615722527589751398e-5) + pow(R - 0.110e2, 3) * 0.267564606356679312e-5 : (R < 0.140e2 ? 0.128993879380671407e-4 + R * (-0.100690756166392841e-5) + pow(R - 0.120e2, 2) * 0.186971291480286496e-5 + pow(R - 0.120e2, 3) * (-0.620889909747950405e-6) : (R < 0.160e2 ? 0.150167019279902277e-4 + R * (-0.978734819427873440e-6) + pow(R - 0.140e2, 2) * (-0.185562654368483726e-5) + pow(R - 0.140e2, 3) * 0.654857295199386960e-6 : (R < 0.180e2 ? 0.586055223239326363e-5 + R * (-0.542953451774578966e-6) + pow(R - 0.160e2, 2) * 0.207351722751148429e-5 + pow(R - 0.160e2, 3) * (-0.533409149812097278e-6) : (R < 0.200e2 ? -0.241895160777714276e-4 + R * 0.135020566052619042e-5 + pow(R - 0.180e2, 2) * (-0.112693767136109960e-5) + pow(R - 0.180e2, 3) * 0.218471065074002167e-6 : (R < 0.250e2 ? 0.107724598485036287e-4 + R * (-0.535892244030181429e-6) + pow(R - 0.200e2, 2) * 0.183888719082913514e-6 + pow(R - 0.200e2, 3) * (-0.156873447585754443e-7) : -0.314964861764488467e-5 + R * 0.126444089905795377e-6 + pow(R - 0.250e2, 2) * (-0.514214522957181537e-7) + pow(R - 0.250e2, 3) * 0.516046982771181487e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1747678973e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1864189800e3 * R + 0.1095215597e5 - 0.9320949000e1 * R * R + 0.75000e3 * (0.3417689092e-1 * R - 0.1413681551e1) * R) * pow(R, -6));
}

static double radcoeff_6_8_10_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.440505779300000080e-1 + R * 0.867361737988403547e-18 + pow(R - 0.475e1, 2) * (-0.164744221266195284e0) + pow(R - 0.475e1, 3) * 0.571920828744781007e0 : (R < 0.525e1 ? -0.169726052592744148e0 + R * 0.248630447565488313e-1 + pow(R - 0.50e1, 2) * 0.264196400292390554e0 + pow(R - 0.50e1, 3) * (-0.417144965594343387e0) : (R < 0.55e1 ? -0.442620142922474702e0 + R * 0.787465638538047130e-1 + pow(R - 0.525e1, 2) * (-0.486623239033670205e-1) + pow(R - 0.525e1, 3) * 0.748565798725927822e-1 : (R < 0.575e1 ? -0.387866361365277912e0 + R * 0.684510106282323477e-1 + pow(R - 0.55e1, 2) * 0.748011100107757142e-2 + pow(R - 0.55e1, 3) * (-0.126330471336027761e0) : (R < 0.60e1 ? -0.274678047756279020e0 + R * 0.485041027532659222e-1 + pow(R - 0.575e1, 2) * (-0.872677425009432683e-1) + pow(R - 0.575e1, 3) * 0.842954963151829918e-2 : (R < 0.625e1 ? -0.276805857822237933e-1 + R * 0.645077205870396575e-2 + pow(R - 0.60e1, 2) * (-0.809455802773045435e-1) + pow(R - 0.60e1, 3) * 0.925182951459546932e-1 : (R < 0.65e1 ? 0.113240975054511223e0 + R * (-0.166748377400817958e-1) + pow(R - 0.625e1, 2) * (-0.115568589178385115e-1) + pow(R - 0.625e1, 3) * 0.384957627126628066e-1 : (R < 0.675e1 ? 0.103763248341449066e0 + R * (-0.152353116903767780e-1) + pow(R - 0.65e1, 2) * 0.173149631166585917e-1 + pow(R - 0.65e1, 3) * (-0.566690343660592594e-2) : (R < 0.70e1 ? 0.534910623132748841e-1 + R * (-0.764037452641109366e-2) + pow(R - 0.675e1, 2) * 0.130647855392041472e-1 + pow(R - 0.675e1, 3) * (-0.992402506223907452e-2) : (R < 0.725e1 ? 0.214510820252519253e-1 + R * (-0.296873645597884673e-2) + pow(R - 0.70e1, 2) * 0.562176674252484049e-2 + pow(R - 0.70e1, 3) * (-0.484912250963781457e-2) : (R < 0.75e1 ? 0.793954637733299690e-2 + R * (-0.106706355527351688e-2) + pow(R - 0.725e1, 2) * 0.198492486029647934e-2 + pow(R - 0.725e1, 3) * (-0.155092220480964769e-2) : (R < 0.775e1 ? 0.277688714608314647e-2 + R * (-0.365399038527086174e-3) + pow(R - 0.75e1, 2) * 0.821733206689243467e-3 + pow(R - 0.75e1, 3) * (-0.802247624083594771e-3) : (R < 0.80e1 ? 0.797260255200573178e-3 + R * (-0.104953864698138473e-3) + pow(R - 0.775e1, 2) * 0.220047488626547388e-3 + pow(R - 0.775e1, 3) * (-0.104871552295973975e-3) : (R < 0.825e1 ? 0.864919791728791540e-4 + R * (-0.145935364403598935e-4) + pow(R - 0.80e1, 2) * 0.141393824404566904e-3 + pow(R - 0.80e1, 3) * (-0.133493773772509273e-3) : (R < 0.85e1 ? -0.283508091381518966e-3 + R * 0.310732931795780595e-4 + pow(R - 0.825e1, 2) * 0.412734940751849491e-4 + pow(R - 0.825e1, 3) * (-0.162572935333988797e-3) : (R < 0.875e1 ? -0.199780434247404950e-3 + R * 0.212276148420476415e-4 + pow(R - 0.85e1, 2) * (-0.806562074253066485e-4) + pow(R - 0.85e1, 3) * 0.187265874148464324e-3 : (R < 0.90e1 ? -0.156257585217024585e-3 + R * 0.160118625322313814e-4 + pow(R - 0.875e1, 2) * 0.597931981860416015e-4 + pow(R - 0.875e1, 3) * (-0.643190074678685056e-4) : (R < 0.925e1 ? -0.314056561557241520e-3 + R * 0.338486477250268383e-4 + pow(R - 0.90e1, 2) * 0.115539425851402206e-4 + pow(R - 0.90e1, 3) * (-0.126076848180990236e-3) : (R < 0.95e1 ? -0.150076841790866794e-3 + R * 0.159862099836612768e-4 + pow(R - 0.925e1, 2) * (-0.830036935506024649e-4) + pow(R - 0.925e1, 3) * 0.124040303295829381e-3 : (R < 0.100e2 ? 0.199943112208834306e-4 + R * (-0.225807992367193995e-5) + pow(R - 0.95e1, 2) * 0.100265339212695879e-4 + pow(R - 0.95e1, 3) * (-0.141400373158514147e-4) : (R < 0.105e2 ? 0.265183806929091382e-4 + R * (-0.283657398929091395e-5) + pow(R - 0.100e2, 2) * (-0.111835220525075359e-4) + pow(R - 0.100e2, 3) * 0.221444668541787254e-4 : (R < 0.110e2 ? -0.304701363887737537e-4 + R * 0.258825409883559588e-5 + pow(R - 0.105e2, 2) * 0.220331782287605539e-4 + pow(R - 0.105e2, 3) * (-0.236824833008634932e-4) : (R < 0.120e2 ? -0.749066255287338226e-4 + R * 0.685956985194852988e-5 + pow(R - 0.110e2, 2) * (-0.134905467225346859e-4) + pow(R - 0.110e2, 3) * 0.556998425058615640e-5 : (R < 0.140e2 ? 0.404265003194484776e-4 + R * (-0.341157084136237306e-5) + pow(R - 0.120e2, 2) * 0.321940602922378377e-5 + pow(R - 0.120e2, 3) * (-0.746785748746298561e-6) : (R < 0.160e2 ? -0.749689340078049676e-5 + R * 0.504624290577178335e-6 + pow(R - 0.140e2, 2) * (-0.126130846325400802e-5) + pow(R - 0.140e2, 3) * 0.366495798857709437e-6 : (R < 0.180e2 ? 0.746387404341444707e-6 + R * (-0.142659976146340295e-6) + pow(R - 0.160e2, 2) * 0.937666329892248601e-6 + pow(R - 0.160e2, 3) * (-0.245268496659539209e-6) : (R < 0.200e2 ? -0.119990757228473072e-4 + R * 0.664783383508183707e-6 + pow(R - 0.180e2, 2) * (-0.533944650064986653e-6) + pow(R - 0.180e2, 3) * 0.102926846930447418e-6 : (R < 0.250e2 ? 0.470168919422787791e-5 + R * (-0.235873053586393886e-6) + pow(R - 0.200e2, 2) * 0.836164315176978694e-7 + pow(R - 0.200e2, 3) * (-0.718865012808381744e-8) : -0.153187017310746139e-5 + R * 0.611425019842984580e-7 + pow(R - 0.250e2, 2) * (-0.242133204035593873e-7) + pow(R - 0.250e2, 3) * 0.241604020133993863e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.5047000800e1 * (R - 0.300e2) * (R - 0.250e2) - 0.5383458484e2 * R - 0.3162804592e4 + 0.2691729242e1 * R * R + 0.75000e3 * (-0.986971719e-2 * R + 0.4082479834e0) * R) * pow(R, -6));
}

static double radcoeff_6_8_11_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.182784651399999984e-1 + pow(R - 0.475e1, 2) * 0.107595989858475460e0 + pow(R - 0.475e1, 3) * (-0.176954148873901818e0) : (R < 0.525e1 ? -0.117414084426905707e0 + R * 0.206190920153811394e-1 + pow(R - 0.50e1, 2) * (-0.251196217969509132e-1) + pow(R - 0.50e1, 3) * 0.349891365417054345e-1 : (R < 0.55e1 ? -0.869407795969961150e-1 + R * 0.146197442184754500e-1 + pow(R - 0.525e1, 2) * 0.112223060932816333e-2 + pow(R - 0.525e1, 3) * (-0.143374964289198596e-1) : (R < 0.575e1 ? -0.753952545489438158e-1 + R * 0.124925789427170579e-1 + pow(R - 0.55e1, 2) * (-0.963089171236173290e-2) + pow(R - 0.55e1, 3) * 0.508526427797399878e-2 : (R < 0.60e1 ? -0.537114649032738173e-1 + R * 0.863062013865631590e-2 + pow(R - 0.575e1, 2) * (-0.581694350388123338e-2) + pow(R - 0.575e1, 3) * (-0.607930026976112982e-3) : (R < 0.625e1 ? -0.359497709869460655e-1 + R * 0.560816150665767801e-2 + pow(R - 0.60e1, 2) * (-0.627289102411331817e-2) + pow(R - 0.60e1, 3) * 0.346281077393042862e-2 : (R < 0.65e1 ? -0.207429171829560909e-1 + R * 0.312099301471297462e-2 + pow(R - 0.625e1, 2) * (-0.367578294366549671e-2) + pow(R - 0.625e1, 3) * 0.224603748485439078e-2 : (R < 0.675e1 ? -0.117286228989877603e-1 + R * 0.170423357129042457e-2 + pow(R - 0.65e1, 2) * (-0.199125483002470351e-2) + pow(R - 0.65e1, 3) * 0.997799261052023699e-3 : (R < 0.70e1 ? -0.637984035084595766e-2 + R * 0.895693517725327159e-3 + pow(R - 0.675e1, 2) * (-0.124290538423568568e-2) + pow(R - 0.675e1, 3) * 0.894334162137508815e-3 : (R < 0.725e1 ? -0.326719270905787050e-2 + R * 0.441928481008267249e-3 + pow(R - 0.70e1, 2) * (-0.572154762632554070e-3) + pow(R - 0.70e1, 3) * 0.517034954397941086e-3 : (R < 0.75e1 ? -0.192365708715162972e-2 + R * 0.252795153641604100e-3 + pow(R - 0.725e1, 2) * (-0.184378546834098255e-3) + pow(R - 0.725e1, 3) * (-0.152216212927279264e-5) : (R < 0.775e1 ? -0.124164443898987231e-2 + R * 0.160320474825316310e-3 + pow(R - 0.75e1, 2) * (-0.185520168431052850e-3) + pow(R - 0.75e1, 3) * 0.132026023719149948e-3 : (R < 0.80e1 ? -0.724136205937761642e-3 + R * 0.923152700571305341e-4 + pow(R - 0.775e1, 2) * (-0.865006506416903751e-4) + pow(R - 0.775e1, 3) * (-0.934640300273270586e-4) : (R < 0.825e1 ? -0.244804224463292133e-3 + R * 0.315404391061615197e-4 + pow(R - 0.80e1, 2) * (-0.156598673162185669e-3) + pow(R - 0.80e1, 3) * 0.150588755590158287e-3 : (R < 0.85e1 ? 0.160788853260657204e-3 + R * (-0.185235058017766309e-4) + pow(R - 0.825e1, 2) * (-0.436571064695669467e-4) + pow(R - 0.825e1, 3) * 0.549906050426938643e-4 : (R < 0.875e1 ? 0.256820938018967511e-3 + R * (-0.300413205910550043e-4) + pow(R - 0.85e1, 2) * (-0.241415268754654770e-5) + pow(R - 0.85e1, 3) * 0.122401247535066239e-3 : (R < 0.90e1 ? 0.683299442395293147e-4 + R * (-0.829816302200335121e-5) + pow(R - 0.875e1, 2) * 0.893867829637531457e-4 + pow(R - 0.875e1, 3) * (-0.212132532846958933e-3) : (R < 0.925e1 ? 0.263351731913842054e-4 + R * (-0.337962144893157837e-5) + pow(R - 0.90e1, 2) * (-0.697126166714660611e-4) + pow(R - 0.90e1, 3) * 0.208193025740769505e-3 : (R < 0.95e1 ? -0.134327762369994939e-4 + R * 0.800262541729674997e-6 + pow(R - 0.925e1, 2) * 0.864321526341110677e-4 + pow(R - 0.925e1, 3) * (-0.140542341892119064e-3) : (R < 0.100e2 ? -0.170438419306122372e-3 + R * 0.176646497540128809e-4 + pow(R - 0.95e1, 2) * (-0.189746037849782406e-4) + pow(R - 0.95e1, 3) * 0.466145065904952180e-6 : (R < 0.105e2 ? 0.111261477363664294e-4 + R * (-0.960345231536643023e-6) + pow(R - 0.100e2, 2) * (-0.182753861861208124e-4) + pow(R - 0.100e2, 3) * 0.215370305943881956e-4 : (R < 0.110e2 ? 0.315368690377962311e-4 + R * (-0.308295847186630780e-5) + pow(R - 0.105e2, 2) * 0.140301597054614811e-4 + pow(R - 0.105e2, 3) * (-0.106216631882577286e-4) : (R < 0.120e2 ? -0.329863343913206286e-4 + R * 0.298095384240187519e-5 + pow(R - 0.110e2, 2) * (-0.190233507692511409e-5) + pow(R - 0.110e2, 3) * 0.786336725232388694e-7 : (R < 0.140e2 ? 0.801519384004364129e-5 + R * (-0.587815293878636703e-6) + pow(R - 0.120e2, 2) * (-0.166643405935539748e-5) + pow(R - 0.120e2, 3) * 0.609176707897357847e-6 : (R < 0.160e2 ? -0.279850833755295882e-5 + R * 0.565689634680684809e-7 + pow(R - 0.140e2, 2) * 0.198862618802875002e-5 + pow(R - 0.140e2, 3) * (-0.591468799881391965e-6) : (R < 0.180e2 ? -0.132858204411018149e-4 + R * 0.913448117006363403e-6 + pow(R - 0.160e2, 2) * (-0.156018661125960240e-5) + pow(R - 0.160e2, 3) * 0.375231784253210354e-6 : (R < 0.200e2 ? 0.147586580000833920e-4 + R * (-0.824516916993521747e-6) + pow(R - 0.180e2, 2) * 0.691204094259659720e-6 + pow(R - 0.180e2, 3) * (-0.134083330768949403e-6) : (R < 0.250e2 ? -0.666552042525448157e-5 + R * 0.331299490817724084e-6 + pow(R - 0.200e2, 2) * (-0.113295890354036779e-6) + pow(R - 0.200e2, 3) * 0.965712051329839121e-8 : 0.192609400613160873e-5 + R * (-0.773753742252643589e-7) + pow(R - 0.250e2, 2) * 0.315609173454390781e-7 + pow(R - 0.250e2, 3) * (-0.316935527287724160e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1264979485e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1349306604e3 * R - 0.7927355532e4 + 0.6746533020e1 * R * R + 0.75000e3 * (-0.2473762911e-1 * R + 0.1023242949e1) * R) * pow(R, -6));
}

static double radcoeff_6_8_12_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.828984897099999986e-2 + pow(R - 0.475e1, 2) * 0.479251906408332762e0 + pow(R - 0.475e1, 3) * (-0.733449568673331109e0) : (R < 0.525e1 ? -0.483737851779583949e0 + R * 0.102104159077916798e0 + pow(R - 0.50e1, 2) * (-0.708352700966655840e-1) + pow(R - 0.50e1, 3) * (-0.706743237400064284e-1) : (R < 0.55e1 ? -0.233756721033747200e0 + R * 0.534350883283327971e-1 + pow(R - 0.525e1, 2) * (-0.123841012901670405e0) + pow(R - 0.525e1, 3) * 0.526613327533568057e-1 : (R < 0.575e1 ? 0.455818350618640011e-1 + R * 0.138858176875199940e-2 + pow(R - 0.55e1, 2) * (-0.843450133366527993e-1) + pow(R - 0.55e1, 3) * (-0.143670469534207985e-1) : (R < 0.60e1 ? 0.298067172459209606e0 + R * (-0.434777462033408002e-1) + pow(R - 0.575e1, 2) * (-0.951202985517183991e-1) + pow(R - 0.575e1, 3) * 0.110583160340326406e0 : (R < 0.625e1 ? 0.454804855952332776e0 + R * (-0.703035529153887978e-1) + pow(R - 0.60e1, 2) * (-0.121829282964735879e-1) + pow(R - 0.60e1, 3) * 0.962241239921149405e-1 : (R < 0.65e1 ? 0.380855930494400252e0 + R * (-0.583529938151040387e-1) + pow(R - 0.625e1, 2) * 0.599851646976126140e-1 + pow(R - 0.625e1, 3) * (-0.521994622878587267e-2) : (R < 0.675e1 ? 0.195933465831268055e0 + R * (-0.293391513841950863e-1) + pow(R - 0.65e1, 2) * 0.560702050260232093e-1 + pow(R - 0.65e1, 3) * (-0.431593565489714615e-1) : (R < 0.70e1 ? 0.641501073687805179e-1 + R * (-0.939642822411563064e-2) + pow(R - 0.675e1, 2) * 0.237006876142946132e-1 + pow(R - 0.675e1, 3) * (-0.231002550953283703e-1) : (R < 0.725e1 ? 0.126371370216967465e-1 + R * (-0.187738224734239258e-2) + pow(R - 0.70e1, 2) * 0.637549629279833639e-2 + pow(R - 0.70e1, 3) * (-0.619762834971506263e-2) : (R < 0.75e1 ? -0.174750542646770718e-2 + R * 0.148310583485200987e-3 + pow(R - 0.725e1, 2) * 0.172727503051203920e-2 + pow(R - 0.725e1, 3) * (-0.218648172021137285e-2) : (R < 0.775e1 ? -0.507625595931191116e-2 + R * 0.601982776201588177e-3 + pow(R - 0.75e1, 2) * 0.874137403535093995e-4 + pow(R - 0.75e1, 3) * (-0.393022171039448804e-3) : (R < 0.80e1 ? -0.484455147354045847e-2 + R * 0.571997989308446232e-3 + pow(R - 0.775e1, 2) * (-0.207352887926077231e-3) + pow(R - 0.775e1, 3) * (-0.106767970030830633e-3) : (R < 0.825e1 ? -0.386961577181701467e-2 + R * 0.448302550964626819e-3 + pow(R - 0.80e1, 2) * (-0.287428865449200206e-3) + pow(R - 0.80e1, 3) * 0.367042876277184774e-5 : (R < 0.85e1 ? -0.270755634997263276e-2 + R * 0.305276323633046410e-3 + pow(R - 0.825e1, 2) * (-0.284676043877121320e-3) + pow(R - 0.825e1, 3) * 0.326464469379742482e-3 : (R < 0.875e1 ? -0.203067715697709391e-2 + R * 0.224150389703187499e-3 + pow(R - 0.85e1, 2) * (-0.398276918423144319e-4) + pow(R - 0.85e1, 3) * (-0.303261185001742206e-3) : (R < 0.90e1 ? -0.136612081027928157e-2 + R * 0.147375071594203620e-3 + pow(R - 0.875e1, 2) * (-0.267273580593621086e-3) + pow(R - 0.875e1, 3) * 0.486766109347226282e-3 : (R < 0.925e1 ? -0.993906385459982205e-3 + R * 0.105006926799998011e-3 + pow(R - 0.90e1, 2) * 0.978010014167986387e-4 + pow(R - 0.90e1, 3) * (-0.476669785507162719e-3) : (R < 0.95e1 ? -0.620847260583689826e-3 + R * 0.645318427258043104e-4 + pow(R - 0.925e1, 2) * (-0.259701337713573400e-3) + pow(R - 0.925e1, 3) * 0.376703807081424629e-3 : (R < 0.100e2 ? -0.686148994294548962e-4 + R * 0.531313769678472642e-5 + pow(R - 0.95e1, 2) * 0.228265175974950477e-4 + pow(R - 0.95e1, 3) * (-0.144196559021290036e-4) : (R < 0.105e2 ? -0.184828483726830238e-3 + R * 0.173249133676830226e-4 + pow(R - 0.100e2, 2) * 0.119703374430154134e-5 + pow(R - 0.100e2, 3) * (-0.903378257533517498e-5) : (R < 0.110e2 ? -0.127086264647073403e-3 + R * 0.117466101804831827e-4 + pow(R - 0.105e2, 2) * (-0.123536401187012228e-4) + pow(R - 0.105e2, 3) * 0.732492782746971809e-5 : (R < 0.120e2 ? -0.537996719691267292e-4 + R * 0.488666593238424784e-5 + pow(R - 0.110e2, 2) * (-0.136624837749664589e-5) + pow(R - 0.110e2, 3) * (-0.398827005887601822e-6) : (R < 0.140e2 ? -0.841701408073779734e-5 + R * 0.957688159728149637e-6 + pow(R - 0.120e2, 2) * (-0.256272939515945147e-5) + pow(R - 0.120e2, 3) * 0.599218937147688344e-6 : (R < 0.160e2 ? 0.289698845242235426e-4 + R * (-0.210260217513739589e-5) + pow(R - 0.140e2, 2) * 0.103258422772667881e-5 + pow(R - 0.140e2, 3) * (-0.118132035578990426e-6) : (R < 0.180e2 ? -0.112488745931429483e-4 + R * 0.610150308821434288e-6 + pow(R - 0.160e2, 2) * 0.323792014252736172e-6 + pow(R - 0.160e2, 3) * (-0.119949955581726619e-6) : (R < 0.200e2 ? -0.831714080112986672e-5 + R * 0.465918898851659235e-6 + pow(R - 0.180e2, 2) * (-0.395907719237623646e-6) + pow(R - 0.180e2, 3) * 0.769484504558969812e-7 : (R < 0.250e2 ? 0.391980535516142773e-5 + R * (-0.194330572628071361e-6) + pow(R - 0.200e2, 2) * 0.657829834977583080e-7 + pow(R - 0.200e2, 3) * (-0.559323435282880660e-8) : -0.109320581438377950e-5 + R * 0.440066858873511800e-7 + pow(R - 0.250e2, 2) * (-0.181155317946738018e-7) + pow(R - 0.250e2, 3) * 0.182269053624071348e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1062204883e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1133017252e3 * R + 0.6656540284e4 - 0.5665086260e1 * R * R + 0.75000e3 * (0.2077210470e-1 * R - 0.859211446e0) * R) * pow(R, -6));
}

static double radcoeff_6_8_12_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.249788101399999983e-1 + pow(R - 0.475e1, 2) * (-0.450210808388314787e0) + pow(R - 0.475e1, 3) * 0.748164366993259056e0 : (R < 0.525e1 ? 0.432653629763606384e0 + R * (-0.848245853829212859e-1) + pow(R - 0.50e1, 2) * 0.110912466856629574e0 + pow(R - 0.50e1, 3) * (-0.121505477939777506e0) : (R < 0.55e1 ? 0.266148865195652728e0 + R * (-0.521506290683148022e-1) + pow(R - 0.525e1, 2) * 0.197833584017964373e-1 + pow(R - 0.525e1, 3) * 0.409678346858510095e-1 : (R < 0.575e1 ? 0.171373132391007321e0 + R * (-0.345774808638195166e-1) + pow(R - 0.55e1, 2) * 0.505092344161846979e-1 + pow(R - 0.55e1, 3) * 0.133304220763734438e-1 : (R < 0.60e1 ? 0.151523371393410926e-1 + R * (-0.682340951640714698e-2) + pow(R - 0.575e1, 2) * 0.605070509734647807e-1 + pow(R - 0.575e1, 3) * (-0.128094269913447689e-1) : (R < 0.625e1 ? -0.148376667026688613e0 + R * 0.210283484094481027e-1 + pow(R - 0.60e1, 2) * 0.508999807299562040e-1 + pow(R - 0.60e1, 3) * (-0.722982949109944317e-1) : (R < 0.65e1 ? -0.220662954521342214e0 + R * 0.329224084786147522e-1 + pow(R - 0.625e1, 2) * (-0.332374045328962279e-2) + pow(R - 0.625e1, 3) * (-0.326199001806775080e-1) : (R < 0.675e1 ? -0.170822714421603850e0 + R * 0.251443069680929027e-1 + pow(R - 0.65e1, 2) * (-0.277886655887977542e-1) + pow(R - 0.65e1, 3) * 0.854215131370453587e-2 : (R < 0.70e1 ? -0.894504488008419918e-1 + R * 0.128516275450136289e-1 + pow(R - 0.675e1, 2) * (-0.213820521035193514e-1) + pow(R - 0.675e1, 3) * 0.151220024458593554e-1 : (R < 0.725e1 ? -0.355609916174680699e-1 + R * 0.499597695185258119e-2 + pow(R - 0.70e1, 2) * (-0.100405502691248340e-1) + pow(R - 0.70e1, 3) * 0.782146130285803383e-2 : (R < 0.75e1 ? -0.103016199094263378e-1 + R * 0.144222581157604649e-2 + pow(R - 0.725e1, 2) * (-0.417445429198130824e-2) + pow(R - 0.725e1, 3) * 0.387735122270849164e-2 : (R < 0.775e1 ? -0.300261251824258133e-3 + R * 0.820020198432344150e-4 + pow(R - 0.75e1, 2) * (-0.126644087494993951e-2) + pow(R - 0.75e1, 3) * 0.149727884310800691e-2 : (R < 0.80e1 ? 0.237570624695462602e-2 + R * (-0.270478634548983990e-3) + pow(R - 0.775e1, 2) * (-0.143481742618934246e-3) + pow(R - 0.775e1, 3) * 0.338093238459480979e-3 : (R < 0.825e1 ? 0.243880845767838715e-2 + R * (-0.278827023647298413e-3) + pow(R - 0.80e1, 2) * 0.110088186225676502e-3 + pow(R - 0.80e1, 3) * (-0.797680913459312523e-4) : (R < 0.85e1 ? 0.211372009101003407e-2 + R * (-0.238739447661822290e-3) + pow(R - 0.825e1, 2) * 0.502621177162280557e-4 + pow(R - 0.825e1, 3) * 0.216389761804244081e-3 : (R < 0.875e1 ? 0.156175738022600605e-2 + R * (-0.173035308465412487e-3) + pow(R - 0.85e1, 2) * 0.212554439069411144e-3 + pow(R - 0.85e1, 3) * (-0.243982699871044483e-3) : (R < 0.90e1 ? 0.104158824902961787e-2 + R * (-0.112504845156527762e-3) + pow(R - 0.875e1, 2) * 0.295674141661277850e-4 + pow(R - 0.875e1, 3) * 0.100427915759932911e-3 : (R < 0.925e1 ? 0.742479927006288020e-3 + R * (-0.788909038684764422e-4) + pow(R - 0.90e1, 2) * 0.104888350986077471e-3 + pow(R - 0.90e1, 3) * (-0.110100892768686811e-3) : (R < 0.95e1 ? 0.453162735078490003e-3 + R * (-0.470906457695664877e-4) + pow(R - 0.925e1, 2) * 0.223126814095623601e-4 + pow(R - 0.925e1, 3) * 0.610832901308143905e-4 : (R < 0.100e2 ? 0.240721856833947220e-3 + R * (-0.244811881652576010e-4) + pow(R - 0.95e1, 2) * 0.681251490076731597e-4 + pow(R - 0.95e1, 3) * (-0.534661876743159134e-4) : (R < 0.105e2 ? -0.291852118927862279e-4 + R * 0.354432008667862280e-5 + pow(R - 0.100e2, 2) * (-0.120741325038007155e-4) + pow(R - 0.100e2, 3) * 0.864474768869359408e-7 : (R < 0.110e2 ? 0.939046783252973406e-4 + R * (-0.846497680945688904e-5) + pow(R - 0.105e2, 2) * (-0.119444612884703116e-4) + pow(R - 0.105e2, 3) * 0.175226599507681798e-4 : (R < 0.120e2 ? 0.799360250762617204e-4 + R * (-0.726744313485106658e-5) + pow(R - 0.110e2, 2) * 0.143395286376819616e-4 + pow(R - 0.110e2, 3) * (-0.590642042283089323e-5) : (R < 0.140e2 ? -0.431484187912420695e-4 + R * 0.369235287202017266e-5 + pow(R - 0.120e2, 2) * (-0.337973263081072023e-5) + pow(R - 0.120e2, 3) * 0.705824263600316717e-6 : (R < 0.160e2 ? 0.196657958348646789e-4 + R * (-0.135668648801890554e-5) + pow(R - 0.140e2, 2) * 0.855212950791180601e-6 + pow(R - 0.140e2, 3) * (-0.162742764140863863e-6) : (R < 0.180e2 ? -0.170231261068720502e-5 + R * 0.111252145455450310e-6 + pow(R - 0.160e2, 2) * (-0.121243634054002578e-6) + pow(R - 0.160e2, 3) * 0.265712661131387059e-7 : (R < 0.200e2 ? 0.101543115345211875e-5 + R * (-0.548671974028954871e-7) + pow(R - 0.180e2, 2) * 0.381839626248296634e-7 + pow(R - 0.180e2, 3) * (-0.718951552419095700e-8) : (R < 0.250e2 ? -0.218582404422633231e-6 + R * 0.115944668061316626e-7 + pow(R - 0.200e2, 2) * (-0.495313052031608275e-8) + pow(R - 0.200e2, 3) * 0.442717150217949910e-9 : 0.121116949767072864e-6 + R * (-0.473305213068291502e-8) + pow(R - 0.250e2, 2) * 0.168762673295316631e-8 + pow(R - 0.250e2, 3) * (-0.164297903763316636e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.4258218144e1 * (R - 0.300e2) * (R - 0.250e2) + 0.4542126836e2 * R + 0.2668468558e4 - 0.2271063418e1 * R * R + 0.75000e3 * (0.832717357e-2 * R - 0.3444413754e0) * R) * pow(R, -6));
}

static double radcoeff_6_8_13_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.805264186700000752e-2 + R * 0.173472347597680709e-17 + pow(R - 0.475e1, 2) * 0.110938218304368452e0 + pow(R - 0.475e1, 3) * (-0.241470437121473813e0) : (R < 0.525e1 ? -0.558589897625394113e-1 + R * 0.101934021919078827e-1 + pow(R - 0.50e1, 2) * (-0.701646095367369077e-1) + pow(R - 0.50e1, 3) * 0.109149010500421487e0 : (R < 0.55e1 ? 0.181997182530655860e-1 + R * (-0.442346310763154071e-2) + pow(R - 0.525e1, 2) * 0.116971483385792108e-1 + pow(R - 0.525e1, 3) * (-0.651044929621219688e-2) : (R < 0.575e1 ? -0.662419284040053052e-2 + R * 0.204401818618278304e-3 + pow(R - 0.55e1, 2) * 0.681431136642006267e-2 + pow(R - 0.55e1, 3) * (-0.981673267557270357e-2) : (R < 0.60e1 ? -0.153591650906609589e-1 + R * 0.177092012515842772e-2 + pow(R - 0.575e1, 2) * (-0.548238140259464570e-3) + pow(R - 0.575e1, 3) * 0.346029372650301457e-2 : (R < 0.625e1 ? -0.175874789064880618e-1 + R * 0.214560612874801051e-2 + pow(R - 0.60e1, 2) * 0.204698215461779657e-2 + pow(R - 0.60e1, 3) * 0.101650528956064999e-2 : (R < 0.65e1 ? -0.250316959960595678e-1 + R * 0.335969194784953079e-2 + pow(R - 0.625e1, 2) * 0.280936112178828412e-2 + pow(R - 0.625e1, 3) * (-0.438514662874563144e-2) : (R < 0.675e1 ? -0.287106550340501358e-1 + R * 0.394215751585386739e-2 + pow(R - 0.65e1, 2) * (-0.479498849770940052e-3) + pow(R - 0.65e1, 3) * (-0.188411979857811950e-2) : (R < 0.70e1 ? -0.247671653459612465e-1 + R * 0.334913562873499987e-2 + pow(R - 0.675e1, 2) * (-0.189258869870452973e-2) + pow(R - 0.675e1, 3) * 0.248543030581223692e-4 : (R < 0.725e1 ? -0.182936246184429337e-1 + R * 0.240750146120613301e-2 + pow(R - 0.70e1, 2) * (-0.187394797141093796e-2) + pow(R - 0.70e1, 3) * 0.580970183145623981e-3 : (R < 0.75e1 ? -0.123983636538933933e-1 + R * 0.157945938484046816e-2 + pow(R - 0.725e1, 2) * (-0.143822033405171992e-2) + pow(R - 0.725e1, 3) * 0.866350231559387439e-3 : (R < 0.775e1 ? -0.829969446283994848e-2 + R * 0.102278988623199325e-2 + pow(R - 0.75e1, 2) * (-0.788457660382179282e-3) + pow(R - 0.75e1, 3) * 0.317511533816823566e-3 : (R < 0.80e1 ? -0.575012246249457550e-2 + R * 0.688094468631558136e-3 + pow(R - 0.775e1, 2) * (-0.550324010019561608e-3) + pow(R - 0.775e1, 3) * 0.288811178773315416e-3 : (R < 0.825e1 ? -0.401192576653419154e-2 + R * 0.467084559641773992e-3 + pow(R - 0.80e1, 2) * (-0.333715625939575019e-3) + pow(R - 0.80e1, 3) * 0.715583110899161920e-4 : (R < 0.85e1 ? -0.276577970001110280e-2 + R * 0.313643930001345796e-3 + pow(R - 0.825e1, 2) * (-0.280046892622137875e-3) + pow(R - 0.825e1, 3) * 0.189134732067019210e-3 : (R < 0.875e1 ? -0.189156158619916488e-2 + R * 0.209083245952842935e-3 + pow(R - 0.85e1, 2) * (-0.138195843571873461e-3) + pow(R - 0.85e1, 3) * (-0.529189001579931313e-4) : (R < 0.90e1 ? -0.120959879803872179e-2 + R * 0.130063030387282512e-3 + pow(R - 0.875e1, 2) * (-0.177885018690368313e-3) + pow(R - 0.875e1, 3) * 0.131645131604953068e-3 : (R < 0.925e1 ? -0.640328232002243493e-3 + R * 0.658039832180270487e-4 + pow(R - 0.90e1, 2) * (-0.791511699866535119e-4) + pow(R - 0.90e1, 3) * 0.619097446181812348e-4 : (R < 0.95e1 ? -0.385608392500635846e-3 + R * 0.378364753406092828e-4 + pow(R - 0.925e1, 2) * (-0.327188615230175858e-4) + pow(R - 0.925e1, 3) * 0.383229273623218660e-4 : (R < 0.100e2 ? -0.299902647735590428e-3 + R * 0.286625934595358346e-4 + pow(R - 0.95e1, 2) * (-0.397666600127618800e-5) + pow(R - 0.95e1, 3) * (-0.426828359559095812e-5) : (R < 0.105e2 ? -0.229651562705664278e-3 + R * 0.214847147615664278e-4 + pow(R - 0.100e2, 2) * (-0.103790913946626256e-4) + pow(R - 0.100e2, 3) * (-0.230451976940465787e-6) : (R < 0.110e2 ? -0.121479873089083785e-3 + R * 0.109327843841984554e-4 + pow(R - 0.105e2, 2) * (-0.107247693600733243e-4) + pow(R - 0.105e2, 3) * 0.569672044735282498e-5 : (R < 0.120e2 ? -0.524744561030372552e-4 + R * 0.448055535963975074e-5 + pow(R - 0.110e2, 2) * (-0.217968868904408766e-5) + pow(R - 0.110e2, 3) * 0.538355071404337078e-6 : (R < 0.140e2 ? -0.211840437542750401e-4 + R * 0.173624319576458666e-5 + pow(R - 0.120e2, 2) * (-0.564623474831076314e-6) + pow(R - 0.120e2, 3) * 0.425487619743914507e-7 : (R < 0.160e2 ? 0.136857502113829468e-5 + R * (-0.116655598670210538e-7) + pow(R - 0.140e2, 2) * (-0.309330902984727597e-6) + pow(R - 0.140e2, 3) * 0.688210089091190665e-7 : (R < 0.180e2 ? 0.726536356094404266e-5 + R * (-0.423137064896502642e-6) + pow(R - 0.160e2, 2) * 0.103595150469986803e-6 + pow(R - 0.160e2, 3) * (-0.630446422336774028e-8) : (R < 0.200e2 ? 0.153222188744542965e-5 + R * (-0.844100336969683155e-7) + pow(R - 0.180e2, 2) * 0.657683651297803608e-7 + pow(R - 0.180e2, 3) * (-0.126189931906481010e-7) : (R < 0.250e2 ? -0.538567442187518559e-6 + R * 0.272355085343759259e-7 + pow(R - 0.200e2, 2) * (-0.994559401410824013e-8) + pow(R - 0.200e2, 3) * 0.860863395846611074e-9 : 0.192680268255266185e-6 + R * (-0.765567691821064797e-8) + pow(R - 0.250e2, 2) * 0.296735692359092577e-8 + pow(R - 0.250e2, 3) * (-0.294674587189759233e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1965673120e1 * (R - 0.300e2) * (R - 0.250e2) + 0.2096715808e2 * R + 0.1231925732e4 - 0.1048357904e1 * R * R + 0.75000e3 * (0.3844179350e-2 * R - 0.1590119691e0) * R) * pow(R, -6));
}

static double radcoeff_6_8_14_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.347626791099999999e-1 + pow(R - 0.475e1, 2) * 0.366575050263443503e0 + pow(R - 0.475e1, 3) * (-0.677232575453774022e0) : (R < 0.525e1 ? -0.303965583630695591e0 + R * 0.563064172341391223e-1 + pow(R - 0.50e1, 2) * (-0.141349381326887041e0) + pow(R - 0.50e1, 3) * 0.239325497881322236e0 : (R < 0.55e1 ? -0.173604370053078466e0 + R * 0.305052574234435207e-1 + pow(R - 0.525e1, 2) * 0.381447420841046353e-1 + pow(R - 0.525e1, 3) * (-0.577083172555148474e-1) : (R < 0.575e1 ? -0.217508354691477446e0 + R * 0.387573189800868093e-1 + pow(R - 0.55e1, 2) * (-0.513649585753150114e-2) + pow(R - 0.55e1, 3) * 0.573571690287371164e-1 : (R < 0.60e1 ? -0.264003952188203272e0 + R * 0.469435402442092628e-1 + pow(R - 0.575e1, 2) * 0.378813809140213370e-1 + pow(R - 0.575e1, 3) * (-0.136373770123433630e0) : (R < 0.625e1 ? -0.223990857388456699e0 + R * 0.403141488030761205e-1 + pow(R - 0.60e1, 2) * (-0.643989466785538922e-1) + pow(R - 0.60e1, 3) * 0.126956221849976354e-1 : (R < 0.65e1 ? -0.414483963367889702e-1 + R * 0.104951046234862348e-1 + pow(R - 0.625e1, 2) * (-0.548772300398056648e-1) + pow(R - 0.625e1, 3) * 0.199606657034429105e-1 : (R < 0.675e1 ? 0.109457598490636826e0 + R * (-0.132008855770210515e-1) + pow(R - 0.65e1, 2) * (-0.399067307622234801e-1) + pow(R - 0.65e1, 3) * 0.476194506812307461e-1 : (R < 0.70e1 ? 0.182124330788963673e0 + R * (-0.242256039554020267e-1) + pow(R - 0.675e1, 2) * (-0.419214275130041711e-2) + pow(R - 0.675e1, 3) * 0.223798426116341084e-1 : (R < 0.725e1 ? 0.167510963109595873e0 + R * (-0.221254548413708403e-1) + pow(R - 0.70e1, 2) * 0.125927392074251659e-1 + pow(R - 0.70e1, 3) * 0.585408562327818793e-4 : (R < 0.75e1 ? 0.122570665407580923e0 + R * (-0.158181088271146103e-1) + pow(R - 0.725e1, 2) * 0.126366448495997524e-1 + pow(R - 0.725e1, 3) * (-0.398540405256524177e-2) : (R < 0.775e1 ? 0.815152400352803647e-1 + R * (-0.102470496621707152e-1) + pow(R - 0.75e1, 2) * 0.964759181017582103e-2 + pow(R - 0.75e1, 3) * (-0.420294429397182617e-2) : (R < 0.80e1 ? 0.507755286815695581e-1 + R * (-0.621130581220252342e-2) + pow(R - 0.775e1, 2) * 0.649538358969695140e-2 + pow(R - 0.775e1, 3) * (-0.353580059554743208e-2) : (R < 0.825e1 ? 0.304484098061535285e-1 + R * (-0.362657662901919118e-2) + pow(R - 0.80e1, 2) * 0.384353314303637712e-2 + pow(R - 0.80e1, 3) * (-0.183198968223844479e-2) : (R < 0.85e1 ? 0.176392906134958706e-1 + R * (-0.204830812292071136e-2) + pow(R - 0.825e1, 2) * 0.246954088135754347e-2 + pow(R - 0.825e1, 3) * (-0.159885503069879175e-2) : (R < 0.875e1 ? 0.982128126813268734e-2 + R * (-0.111332300049796326e-2) + pow(R - 0.85e1, 2) * 0.127039960833344955e-2 + pow(R - 0.85e1, 3) * (-0.569202873366386796e-3) : (R < 0.90e1 ? 0.526763762641506601e-2 + R * (-0.584848735087436025e-3) + pow(R - 0.875e1, 2) * 0.843497453308659400e-3 + pow(R - 0.875e1, 3) * (-0.644399075835660703e-3) : (R < 0.925e1 ? 0.260197238228063437e-2 + R * (-0.283924835152292714e-3) + pow(R - 0.90e1, 2) * 0.360198146431913845e-3 + pow(R - 0.90e1, 3) * (-0.381654191309719113e-4) : (R < 0.95e1 ? 0.102416515331438533e-2 + R * (-0.110981778023393012e-3) + pow(R - 0.925e1, 2) * 0.331574082083684908e-3 + pow(R - 0.925e1, 3) * (-0.406702506520451338e-3) : (R < 0.100e2 ? 0.187995756624284241e-3 + R * (-0.214514569541351838e-4) + pow(R - 0.95e1, 2) * 0.265472021933464284e-4 + pow(R - 0.95e1, 3) * (-0.753128721015211969e-5) : (R < 0.105e2 ? -0.152962215859715265e-4 + R * (-0.552720168402847297e-6) + pow(R - 0.100e2, 2) * 0.152502713781182480e-4 + pow(R - 0.100e2, 3) * (-0.146009516826251047e-4) : (R < 0.110e2 ? -0.584541276713390021e-4 + R * 0.374683744774657088e-5 + pow(R - 0.105e2, 2) * (-0.665115614581941078e-5) + pow(R - 0.105e2, 3) * 0.127298083406525379e-4 : (R < 0.120e2 ? -0.903838918715822075e-4 + R * 0.664303755741656354e-5 + pow(R - 0.110e2, 2) * 0.124435563651593953e-4 + pow(R - 0.110e2, 3) * (-0.665643442257595959e-5) : (R < 0.140e2 ? -0.143610483476089664e-3 + R * 0.115608470200074736e-4 + pow(R - 0.120e2, 2) * (-0.752574690256848520e-5) + pow(R - 0.120e2, 3) * 0.151208408653237415e-5 : (R < 0.160e2 ? 0.579490161209166814e-5 + R * (-0.397131551877976303e-6) + pow(R - 0.140e2, 2) * 0.154675761662575993e-5 + pow(R - 0.140e2, 3) * (-0.463763160343385826e-6) : (R < 0.180e2 ? -0.167813388207094277e-5 + R * 0.224740990504433932e-6 + pow(R - 0.160e2, 2) * (-0.123582134543455513e-5) + pow(R - 0.160e2, 3) * 0.322007690341169090e-6 : (R < 0.200e2 ? 0.153801180160156325e-4 + R * (-0.854452107139757417e-6) + pow(R - 0.180e2, 2) * 0.696224796612459405e-6 + pow(R - 0.180e2, 3) * (-0.134498100308790344e-6) : (R < 0.250e2 ? -0.632940725489191740e-5 + R * 0.316469875604595863e-6 + pow(R - 0.200e2, 2) * (-0.110763805240282765e-6) + pow(R - 0.200e2, 3) * 0.949402730627271832e-8 : 0.197790113819444938e-5 + R * (-0.791161288277779755e-7) + pow(R - 0.250e2, 2) * 0.316466043538079963e-7 + pow(R - 0.250e2, 3) * (-0.316466372885047949e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3117696000e-2 * (R - 0.300e2) * (R - 0.250e2) - 0.3310390064e-1 * R - 0.1986379358e1 + 0.1655195032e-2 * R * R + 0.75000e3 * (-0.614814406e-5 * R + 0.2553881718e-3) * R) * pow(R, -6));
}

static double radcoeff_6_10_4_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.191591802300020591e-4 + R * (-0.433680868994201774e-18) + pow(R - 0.475e1, 2) * 0.167618919175410788e-1 + pow(R - 0.475e1, 3) * (-0.459952461661643081e-1) : (R < 0.525e1 ? 0.156391519062634428e-2 + R * (-0.243162697385268891e-3) + pow(R - 0.50e1, 2) * (-0.177345427070821522e-1) + pow(R - 0.50e1, 3) * 0.556714168984929064e-1 : (R < 0.55e1 ? -0.692300424293064865e-2 + R * 0.132795661754107593e-2 + pow(R - 0.525e1, 2) * 0.240190199667875311e-1 + pow(R - 0.525e1, 3) * (-0.590824840710073365e-1) : (R < 0.575e1 ? -0.114684725190153033e-1 + R * 0.225950083762096413e-2 + pow(R - 0.55e1, 2) * (-0.202928430864679696e-1) + pow(R - 0.55e1, 3) * 0.276246590655364367e-1 : (R < 0.60e1 ? 0.162539484045433925e-1 + R * (-0.270729713082493769e-2) + pow(R - 0.575e1, 2) * 0.425651212684359471e-3 + pow(R - 0.575e1, 3) * 0.277154049366156114e-2 : (R < 0.625e1 ? 0.119289202321672914e-1 + R * (-0.197480768192121511e-2) + pow(R - 0.60e1, 2) * 0.250430658293053065e-2 + pow(R - 0.60e1, 3) * (-0.222188534582680675e-3) : (R < 0.65e1 ? 0.451638681501376552e-2 + R * (-0.764314740690202410e-3) + pow(R - 0.625e1, 2) * 0.233766518199352014e-2 + pow(R - 0.625e1, 3) * (-0.163517875330842707e-3) : (R < 0.675e1 ? -0.273818850883316128e-2 + R * 0.373858248682024758e-3 + pow(R - 0.65e1, 2) * 0.221502677549538811e-2 + pow(R - 0.65e1, 3) * (-0.434674025849394758e-2) : (R < 0.70e1 ? -0.464203937954419787e-2 + R * 0.666357837962103369e-3 + pow(R - 0.675e1, 2) * (-0.104502841837507301e-2) + pow(R - 0.675e1, 3) * 0.466388406906638139e-3 : (R < 0.725e1 ? -0.165460165662693090e-2 + R * 0.231291455069561574e-3 + pow(R - 0.70e1, 2) * (-0.695237113195094382e-3) + pow(R - 0.70e1, 3) * 0.811288540627392316e-3 : (R < 0.75e1 ? -0.267988417333465891e-3 + R * 0.357894998396504697e-4 + pow(R - 0.725e1, 2) * (-0.867707077245500501e-4) + pow(R - 0.725e1, 3) * 0.989132952237927116e-4 : (R < 0.775e1 ? -0.855727337697743251e-4 + R * 0.109503888318365764e-4 + pow(R - 0.75e1, 2) * (-0.125857363067055130e-4) + pow(R - 0.75e1, 3) * 0.174137225734368355e-4 : (R < 0.80e1 ? -0.626218402997750026e-4 + R * 0.792259366100322629e-5 + pow(R - 0.775e1, 2) * 0.474555623372114001e-6 + pow(R - 0.775e1, 3) * 0.399200667445991891e-5 : (R < 0.825e1 ? -0.704160379745041409e-4 + R * 0.890837272415051761e-5 + pow(R - 0.80e1, 2) * 0.346856062921705339e-5 + pow(R - 0.80e1, 3) * (-0.545784293352765098e-4) : (R < 0.85e1 ? -0.933845610756267780e-6 + R * 0.409197538394699143e-6 + pow(R - 0.825e1, 2) * (-0.374652613722403264e-4) + pow(R - 0.825e1, 3) * 0.596589386346460930e-4 : (R < 0.875e1 ? 0.618026738526992282e-4 + R * (-0.713738215372932121e-5) + pow(R - 0.85e1, 2) * 0.727894260374424672e-5 + pow(R - 0.85e1, 3) * (-0.749545220673078559e-4) : (R < 0.90e1 ? 0.152213332233427402e-3 + R * (-0.175518837394774191e-4) + pow(R - 0.875e1, 2) * (-0.489369489467366469e-4) + pow(R - 0.875e1, 3) * 0.269935338050585256e-3 : (R < 0.925e1 ? -0.819271001187509668e-4 + R * 0.859251767163899630e-5 + pow(R - 0.90e1, 2) * 0.153514554591202329e-3 + pow(R - 0.90e1, 3) * (-0.346269721847033279e-3) : (R < 0.95e1 ? -0.187186171016523147e-3 + R * 0.204242221209214209e-4 + pow(R - 0.925e1, 2) * (-0.106187736794072617e-3) + pow(R - 0.925e1, 3) * 0.129751935065547695e-3 : (R < 0.100e2 ? 0.814755848555845776e-4 + R * (-0.834115845132469147e-5) + pow(R - 0.95e1, 2) * (-0.887378549491184088e-5) + pow(R - 0.95e1, 3) * 0.205506571871224448e-4 : (R < 0.105e2 ? 0.164338966759469873e-4 + R * (-0.180195105589469875e-5) + pow(R - 0.100e2, 2) * 0.219522002857718263e-4 + pow(R - 0.100e2, 3) * (-0.263294843159648570e-4) : (R < 0.110e2 ? -0.452265280458659935e-5 + R * 0.403135992903485696e-6 + pow(R - 0.105e2, 2) * (-0.175420261881754574e-4) + pow(R - 0.105e2, 3) * 0.162631517247369714e-4 : (R < 0.120e2 ? 0.519160209549116770e-4 + R * (-0.494152640171924319e-5) + pow(R - 0.110e2, 2) * 0.685270139892999881e-5 + pow(R - 0.110e2, 3) * (-0.197613893221075599e-5) : (R < 0.140e2 ? -0.365312485931018393e-4 + R * 0.283545959950848646e-5 + pow(R - 0.120e2, 2) * 0.924284602297730208e-6 + pow(R - 0.120e2, 3) * (-0.530090423150986591e-6) : (R < 0.160e2 ? 0.220419791574065933e-6 + R * 0.171512930887566722e-6 + pow(R - 0.140e2, 2) * (-0.225625793660818976e-5) + pow(R - 0.140e2, 3) * 0.635960379207202983e-6 : (R < 0.180e2 ? 0.185791862143400728e-4 + R * (-0.122199426505875461e-5) + pow(R - 0.160e2, 2) * 0.155950433863502899e-5 + pow(R - 0.160e2, 3) * (-0.357330460965325928e-6) : (R < 0.200e2 ? -0.131423729320541129e-4 + R * 0.728057557897450732e-6 + pow(R - 0.180e2, 2) * (-0.584478427156926474e-6) + pow(R - 0.180e2, 3) * 0.112659730104100565e-6 : (R < 0.250e2 ? 0.514093014772096858e-5 + R * (-0.257939389481048433e-6) + pow(R - 0.200e2, 2) * 0.914799534676769574e-7 + pow(R - 0.200e2, 3) * (-0.786551357749345403e-8) : -0.167741062189280270e-5 + R * 0.669466268837121113e-7 + pow(R - 0.250e2, 2) * (-0.265027501947248432e-7) + pow(R - 0.250e2, 3) * 0.264428341719648413e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.5714445408e1 * (R - 0.300e2) * (R - 0.250e2) - 0.6095402596e2 * R - 0.3580993012e4 + 0.3047701298e1 * R * R + 0.75000e3 * (-0.1117479806e-1 * R + 0.4622288288e0) * R) * pow(R, -6));
}

static double radcoeff_6_10_4_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.244389980200000008e-2 + pow(R - 0.475e1, 2) * 0.448116386738679345e-1 + pow(R - 0.475e1, 3) * (-0.771992851914717337e-1) : (R < 0.525e1 ? -0.405041780334650728e-1 + R * 0.793095336353301546e-2 + pow(R - 0.50e1, 2) * (-0.130878252197358692e-1) + pow(R - 0.50e1, 3) * (-0.148540556895847831e-1) : (R < 0.55e1 ? 0.742324054138334723e-2 + R * (-0.139809468813206599e-2) + pow(R - 0.525e1, 2) * (-0.242283669869244565e-1) + pow(R - 0.525e1, 3) * 0.582306262730108784e-1 : (R < 0.575e1 ? 0.133964970102261483e-1 + R * (-0.259403575540475412e-2) + pow(R - 0.55e1, 2) * 0.194446027178337040e-1 + pow(R - 0.55e1, 3) * (-0.219831188104587412e-1) : (R < 0.60e1 ? -0.179343843975687256e-1 + R * 0.300643082655108283e-2 + pow(R - 0.575e1, 2) * 0.295726360998964681e-2 + pow(R - 0.575e1, 3) * (-0.919607741837591593e-2) : (R < 0.625e1 ? -0.164194478659025339e-1 + R * 0.276079811560042254e-2 + pow(R - 0.60e1, 2) * (-0.393979445379229014e-2) + pow(R - 0.60e1, 3) * (-0.853902869637600454e-3) : (R < 0.65e1 ? -0.336650215814516965e-2 + R * 0.630794100647227157e-3 + pow(R - 0.625e1, 2) * (-0.458022160602049051e-2) + pow(R - 0.625e1, 3) * 0.339039968732632573e-2 : (R < 0.675e1 ? 0.715387958723065834e-2 + R * (-0.102361676098933208e-2) + pow(R - 0.65e1, 2) * (-0.203742184052574599e-2) + pow(R - 0.65e1, 3) * 0.606968568833229655e-2 : (R < 0.70e1 ? 0.631573232355682034e-2 + R * (-0.904261614689899412e-3) + pow(R - 0.675e1, 2) * 0.251484242572347621e-2 + pow(R - 0.675e1, 3) * (-0.364109453665551440e-2) : (R < 0.725e1 ? 0.239300596234749176e-2 + R * (-0.329545627451070257e-3) + pow(R - 0.70e1, 2) * (-0.215978476768159672e-3) + pow(R - 0.70e1, 3) * 0.139059910852976261e-2 : (R < 0.75e1 ? 0.129381173374719209e-2 + R * (-0.176797532985819591e-3) + pow(R - 0.725e1, 2) * 0.826970854629162366e-3 + pow(R - 0.725e1, 3) * (-0.127235829106353581e-2) : (R < 0.775e1 ? 0.137299558168855209e-4 + R * (-0.187928524565140275e-5) + pow(R - 0.75e1, 2) * (-0.127297863668489602e-3) + pow(R - 0.75e1, 3) * 0.244770607020380849e-3 : (R < 0.80e1 ? 0.147195313460704634e-3 + R * (-0.196337282635747909e-4) + pow(R - 0.775e1, 2) * 0.562800915967960489e-4 + pow(R - 0.775e1, 3) * (-0.325484648259874955e-4) : (R < 0.825e1 ? -0.260934197256046098e-4 + R * 0.240348037995057597e-5 + pow(R - 0.80e1, 2) * 0.318687429773054255e-4 + pow(R - 0.80e1, 3) * (-0.174748631724309204e-4) : (R < 0.85e1 ? -0.128801803838123047e-3 + R * 0.150613150237724916e-4 + pow(R - 0.825e1, 2) * 0.187625955979822335e-4 + pow(R - 0.825e1, 3) * (-0.253969368842888029e-4) : (R < 0.875e1 ? -0.167290631883655405e-3 + R * 0.196806871569594578e-4 + pow(R - 0.85e1, 2) * (-0.285107065234368707e-6) + pow(R - 0.85e1, 3) * (-0.877620370984138500e-4) : (R < 0.90e1 ? -0.234477973794096464e-4 + R * 0.308275166838967407e-5 + pow(R - 0.875e1, 2) * (-0.661066348890447595e-4) + pow(R - 0.875e1, 3) * 0.129813741469944226e-3 : (R < 0.925e1 ? 0.528680459206634401e-4 + R * (-0.563048925051816001e-5) + pow(R - 0.90e1, 2) * 0.312536712134134164e-4 + pow(R - 0.90e1, 3) * (-0.789332718213631049e-4) : (R < 0.95e1 ? 0.459397319524325719e-4 + R * (-0.480364211031703482e-5) + pow(R - 0.925e1, 2) * (-0.279462826526089089e-4) + pow(R - 0.925e1, 3) * 0.648308657515081770e-4 : (R < 0.100e2 ? 0.624709345435301984e-4 + R * (-0.662099610821370437e-5) + pow(R - 0.95e1, 2) * 0.206768666610222239e-4 + pow(R - 0.95e1, 3) * (-0.141956006475896277e-4) : (R < 0.105e2 ? -0.344359606254629764e-4 + R * 0.340917006711629789e-5 + pow(R - 0.100e2, 2) * (-0.616534310362219445e-6) + pow(R - 0.100e2, 3) * (-0.235153667174075148e-5) : (R < 0.110e2 ? -0.989207473785940118e-5 + R * 0.102898325294851431e-5 + pow(R - 0.105e2, 2) * (-0.414383931797334698e-5) + pow(R - 0.105e2, 3) * 0.300053017935263570e-5 : (R < 0.120e2 ? 0.102748902231139093e-4 + R * (-0.864458430510355372e-6) + pow(R - 0.110e2, 2) * 0.356955951055607307e-6 + pow(R - 0.110e2, 3) * (-0.221471356245251937e-6) : (R < 0.140e2 ? 0.981640081741875747e-5 + R * (-0.814960597134896490e-6) + pow(R - 0.120e2, 2) * (-0.307458117680148478e-6) + pow(R - 0.120e2, 3) * 0.210193837998798329e-6 : (R < 0.160e2 ? -0.782679114282126072e-5 + R * 0.477532988130089968e-6 + pow(R - 0.140e2, 2) * 0.953704910312641654e-6 + pow(R - 0.140e2, 3) * (-0.320606147313843292e-6) : (R < 0.180e2 ? -0.605755465583258995e-5 + R * 0.445078861614536866e-6 + pow(R - 0.160e2, 2) * (-0.969931973570418312e-6) + pow(R - 0.160e2, 3) * 0.239050769881574948e-6 : (R < 0.200e2 ? 0.101752594112882640e-4 + R * (-0.566039794088236903e-6) + pow(R - 0.180e2, 2) * 0.464372645719031321e-6 + pow(R - 0.180e2, 3) * (-0.897987749624564293e-7) : (R < 0.250e2 ? -0.428374587206822397e-5 + R * 0.213865489238411204e-6 + pow(R - 0.200e2, 2) * (-0.744200040557072545e-7) + pow(R - 0.200e2, 3) * 0.637007244880500284e-8 : 0.131312825505715321e-5 + R * (-0.525791176582861320e-7) + pow(R - 0.250e2, 2) * 0.211310826763677847e-7 + pow(R - 0.250e2, 3) * (-0.211526768574211150e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2059547936e1 * (R - 0.300e2) * (R - 0.250e2) - 0.2196877788e2 * R - 0.1290601346e4 + 0.1098438894e1 * R * R + 0.75000e3 * (-0.4027486700e-2 * R + 0.1665898237e0) * R) * pow(R, -6));
}

static double radcoeff_6_10_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.179764345499999994e-2 + pow(R - 0.475e1, 2) * (-0.495469236857027928e-1) + pow(R - 0.475e1, 3) * 0.973061733988111605e-1 : (R < 0.525e1 ? 0.328641413367715199e-1 + R * (-0.652855433057430469e-2) + pow(R - 0.50e1, 2) * 0.234327063634055775e-1 + pow(R - 0.50e1, 3) * (-0.248905962540334376e-1) : (R < 0.55e1 ? -0.306940359836037477e-2 + R * 0.520812053497214200e-3 + pow(R - 0.525e1, 2) * 0.476475917288049933e-2 + pow(R - 0.525e1, 3) * (-0.697297279867742457e-2) : (R < 0.575e1 ? -0.879276837681995660e-2 + R * 0.159575924018544660e-2 + pow(R - 0.55e1, 2) * (-0.464970426127569525e-3) + pow(R - 0.55e1, 3) * (-0.755177915605686426e-2) : (R < 0.60e1 ? 0.538726299974250956e-3 + R * (-0.526845646390001598e-4) + pow(R - 0.575e1, 2) * (-0.612880479317021772e-2) + pow(R - 0.575e1, 3) * 0.812813849810487161e-2 : (R < 0.625e1 ? 0.952493673356667216e-2 + R * (-0.159306099282944548e-2) + pow(R - 0.60e1, 2) * (-0.327009195915636930e-4) + pow(R - 0.60e1, 3) * 0.462376086283738420e-2 : (R < 0.65e1 ? 0.427885980217011103e-2 + R * (-0.742456290843217844e-3) + pow(R - 0.625e1, 2) * 0.343511972753647457e-2 + pow(R - 0.625e1, 3) * (-0.236614230785441200e-2) : (R < 0.675e1 ? -0.382381936521506089e-2 + R * 0.531451890202317085e-3 + pow(R - 0.65e1, 2) * 0.166051299664566536e-2 + pow(R - 0.65e1, 3) * (-0.333088619781973534e-2) : (R < 0.70e1 ? -0.516066091932915801e-2 + R * 0.737167226433949442e-3 + pow(R - 0.675e1, 2) * (-0.837651651719136469e-3) + pow(R - 0.675e1, 3) * (-0.106833784066646283e-3) : (R < 0.725e1 ? -0.214268330284319479e-2 + R * 0.298310066061885002e-3 + pow(R - 0.70e1, 2) * (-0.917776989769121185e-3) + pow(R - 0.70e1, 3) * 0.119272247328632399e-2 : (R < 0.75e1 ? -0.475823600269199094e-3 + R * 0.630570349185102249e-4 + pow(R - 0.725e1, 2) * (-0.232351348043781030e-4) + pow(R - 0.725e1, 3) * (-0.970561698786511721e-4) : (R < 0.775e1 ? -0.255175304440555565e-3 + R * 0.332414356640740736e-4 + pow(R - 0.75e1, 2) * (-0.960272622133664786e-4) + pow(R - 0.75e1, 3) * 0.165049862356280716e-3 : (R < 0.80e1 ? -0.126330544389649399e-3 + R * 0.161746537491934701e-4 + pow(R - 0.775e1, 2) * 0.277601345538440614e-4 + pow(R - 0.775e1, 3) * (-0.139848282746471750e-3) : (R < 0.825e1 ? -0.280487794932163796e-4 + R * 0.383316801115204760e-5 + pow(R - 0.80e1, 2) * (-0.771260775060097548e-4) + pow(R - 0.80e1, 3) * 0.110788095381606283e-3 : (R < 0.85e1 ? 0.115631639322063610e-3 + R * (-0.139571028578016509e-4) + pow(R - 0.825e1, 2) * 0.596499403019495840e-5 + pow(R - 0.825e1, 3) * 0.743640338280465599e-4 : (R < 0.875e1 ? -0.267025140644637632e-4 + R * 0.296865050005456042e-5 + pow(R - 0.85e1, 2) * 0.617380194012298876e-4 + pow(R - 0.85e1, 3) * (-0.175396645413792505e-3) : (R < 0.90e1 ? -0.792817393515478824e-5 + R * 0.950789185583404438e-6 + pow(R - 0.875e1, 2) * (-0.698094646591144980e-4) + pow(R - 0.875e1, 3) * 0.149862532147123522e-3 : (R < 0.925e1 ? 0.512999045564936372e-4 + R * (-0.585471836638818245e-5) + pow(R - 0.90e1, 2) * 0.425874344512281437e-4 + pow(R - 0.90e1, 3) * (-0.477290051011016462e-4) : (R < 0.95e1 ? -0.609710376097162950e-4 + R * 0.648981040276932904e-5 + pow(R - 0.925e1, 2) * 0.679068062540190397e-5 + pow(R - 0.925e1, 3) * (-0.217740076019168769e-4) : (R < 0.100e2 ? -0.543576208690532263e-4 + R * 0.580252429011086618e-5 + pow(R - 0.95e1, 2) * (-0.953982507603575541e-5) + pow(R - 0.95e1, 3) * (-0.236844947397195363e-5) : (R < 0.105e2 ? 0.561229884928385428e-4 + R * (-0.551363789140385382e-5) + pow(R - 0.100e2, 2) * (-0.130924992869936863e-4) + pow(R - 0.100e2, 3) * 0.251251317076027852e-4 : (R < 0.110e2 ? -0.439866454919780672e-5 + R * 0.237711602304553042e-6 + pow(R - 0.105e2, 2) * 0.245951982744104983e-4 + pow(R - 0.105e2, 3) * (-0.249224623100392055e-4) : (R < 0.120e2 ? -0.663020397300420947e-4 + R * 0.614106314418564472e-5 + pow(R - 0.110e2, 2) * (-0.127884951906483116e-4) + pow(R - 0.110e2, 3) * 0.534792074146266616e-5 : (R < 0.140e2 ? 0.406561237033757476e-4 + R * (-0.339216501272297907e-5) + pow(R - 0.120e2, 2) * 0.325526703373968861e-5 + pow(R - 0.120e2, 3) * (-0.741543639614099443e-6) : (R < 0.160e2 ? -0.997077971283212897e-5 + R * 0.730379446866580676e-6 + pow(R - 0.140e2, 2) * (-0.119399480394490847e-5) + pow(R - 0.140e2, 3) * 0.307300721718309007e-6 : (R < 0.180e2 ? 0.512557572769351779e-5 + R * (-0.357991108293344861e-6) + pow(R - 0.160e2, 2) * 0.649809526364945781e-6 + pow(R - 0.160e2, 3) * (-0.157269314821636654e-6) : (R < 0.200e2 ? -0.634945458222236196e-5 + R * 0.354015219306797885e-6 + pow(R - 0.180e2, 2) * (-0.293806362564874249e-6) + pow(R - 0.180e2, 3) * 0.569113498182376400e-7 : (R < 0.250e2 ? 0.277639581487694810e-5 + R * (-0.138274033133847404e-6) + pow(R - 0.200e2, 2) * 0.476617363445515910e-7 + pow(R - 0.200e2, 3) * (-0.407039370275642138e-8) : -0.824305882823421419e-6 + R * 0.330638026049368562e-7 + pow(R - 0.250e2, 2) * (-0.133941691967947413e-7) + pow(R - 0.250e2, 3) * 0.134307927436147391e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3492848704e1 * (R - 0.300e2) * (R - 0.250e2) + 0.3725709648e2 * R + 0.2188945246e4 - 0.1862854824e1 * R * R + 0.75000e3 * (0.683064069e-2 * R - 0.2825424968e0) * R) * pow(R, -6));
}

static double radcoeff_6_10_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.234944268099999921e-2 + R * (-0.216840434497100887e-18) + pow(R - 0.475e1, 2) * (-0.186967986016769588e-1) + pow(R - 0.475e1, 3) * 0.526220897667078330e-1 : (R < 0.525e1 ? -0.528698509309619407e-2 + R * 0.518242530419238834e-3 + pow(R - 0.50e1, 2) * 0.207697687233539194e-1 + pow(R - 0.50e1, 3) * (-0.381507542921235010e-1) : (R < 0.55e1 ? -0.215509742261959653e-1 + R * 0.374986046232304122e-2 + pow(R - 0.525e1, 2) * (-0.784329699573870810e-2) + pow(R - 0.525e1, 3) * 0.293702357089861699e-1 : (R < 0.575e1 ? -0.303012591920872737e-1 + R * 0.533513115988859532e-2 + pow(R - 0.55e1, 2) * 0.141843797860009193e-1 + pow(R - 0.55e1, 3) * (-0.317907567742211905e-1) : (R < 0.60e1 ? -0.364171482677048408e-1 + R * 0.646655415772258088e-2 + pow(R - 0.575e1, 2) * (-0.965868779466497532e-2) + pow(R - 0.575e1, 3) * (-0.413466460570139239e-2) : (R < 0.625e1 ? -0.345785932392649259e-2 + R * 0.861960646821082095e-3 + pow(R - 0.60e1, 2) * (-0.127596862489410198e-1) + pow(R - 0.60e1, 3) * 0.153227724066267619e-1 : (R < 0.65e1 ? 0.179017242182931864e-1 + R * (-0.264486265140690974e-2) + pow(R - 0.625e1, 2) * (-0.126760694397094753e-2) + pow(R - 0.625e1, 3) * 0.498576665279434894e-2 : (R < 0.675e1 ? 0.159437208480573758e-1 + R * (-0.234383487599344265e-2) + pow(R - 0.65e1, 2) * 0.247171804562481461e-2 + pow(R - 0.65e1, 3) * (-0.462975113804178773e-3) : (R < 0.70e1 ? 0.833487371418040190e-2 + R * (-0.119478368701931865e-2) + pow(R - 0.675e1, 2) * 0.212448671027168053e-2 + pow(R - 0.675e1, 3) * (-0.151311540717762147e-2) : (R < 0.725e1 ? 0.299427219133497832e-2 + R * (-0.416249470729282585e-3) + pow(R - 0.70e1, 2) * 0.989650154888464372e-3 + pow(R - 0.70e1, 3) * (-0.103995853236533639e-2) : (R < 0.75e1 ? 0.866087792410744745e-3 + R * (-0.116416618103551000e-3) + pow(R - 0.725e1, 2) * 0.209681255614461998e-3 + pow(R - 0.725e1, 3) * (-0.174139635201032121e-3) : (R < 0.775e1 ? 0.335051092532851445e-3 + R * (-0.442271718965135251e-4) + pow(R - 0.75e1, 2) * 0.790765292136879001e-4 + pow(R - 0.75e1, 3) * (-0.308132710865352500e-4) : (R < 0.80e1 ? 0.778659020925606991e-4 + R * (-0.104663956183949277e-4) + pow(R - 0.775e1, 2) * 0.559665758987864625e-4 + pow(R - 0.775e1, 3) * (-0.415815840482698934e-5) : (R < 0.825e1 ? -0.136330224126745935e-3 + R * 0.167372376300932413e-4 + pow(R - 0.80e1, 2) * 0.528479570951662203e-4 + pow(R - 0.80e1, 3) * (-0.165577263806156719e-3) : (R < 0.85e1 ? -0.974848646226812352e-4 + R * 0.121154792140219683e-4 + pow(R - 0.825e1, 2) * (-0.713349907594513328e-4) + pow(R - 0.825e1, 3) * 0.108129489661453861e-3 : (R < 0.875e1 ? 0.305885583105393468e-4 + R * (-0.327773685418109950e-5) + pow(R - 0.85e1, 2) * 0.976212648663906501e-5 + pow(R - 0.85e1, 3) * (-0.103893403436586631e-4) : (R < 0.90e1 ? 0.537206589535370851e-5 + R * (-0.344674925297566751e-6) + pow(R - 0.875e1, 2) * 0.197012122889506726e-5 + pow(R - 0.875e1, 3) * (-0.254824816948192023e-4) : (R < 0.925e1 ? 0.392331770256577048e-4 + R * (-0.413757962862863418e-5) + pow(R - 0.90e1, 2) * (-0.171417400422193357e-4) + pow(R - 0.90e1, 3) * 0.315422674429354842e-4 : (R < 0.95e1 ? 0.632290938006380474e-4 + R * (-0.679427450418789748e-5) + pow(R - 0.925e1, 2) * 0.651496053998227911e-5 + pow(R - 0.925e1, 3) * 0.919033883507725647e-5 : (R < 0.100e2 ? 0.164635242642878471e-4 + R * (-0.181360570261977319e-5) + pow(R - 0.95e1, 2) * 0.134077146662902215e-4 + pow(R - 0.95e1, 3) * (-0.168102976981013489e-4) : (R < 0.105e2 ? 0.971425179145563473e-5 + R * (-0.101361430990556340e-5) + pow(R - 0.100e2, 2) * (-0.118077318808618036e-4) + pow(R - 0.100e2, 3) * 0.159837072973458576e-4 : (R < 0.110e2 ? 0.686977201545870273e-5 + R * (-0.833565717757971662e-6) + pow(R - 0.105e2, 2) * 0.121678290651569862e-4 + pow(R - 0.105e2, 3) * (-0.955105067528208635e-5) : (R < 0.120e2 ? -0.463321036984119412e-4 + R * 0.417097534093744892e-5 + pow(R - 0.110e2, 2) * (-0.215874694776614333e-5) + pow(R - 0.110e2, 3) * 0.148380778286937707e-7 : (R < 0.140e2 ? 0.279974337630506428e-5 + R * (-0.102004321108755369e-6) + pow(R - 0.120e2, 2) * (-0.211423271428006202e-5) + pow(R - 0.120e2, 3) * 0.627734991917219814e-6 : (R < 0.160e2 ? 0.123022458121131131e-4 + R * (-0.102611527522236525e-5) + pow(R - 0.140e2, 2) * 0.165217723722325729e-5 + pow(R - 0.140e2, 3) * (-0.376714341681037320e-6) : (R < 0.180e2 ? -0.175129495520714504e-4 + R * 0.106202157349821564e-5 + pow(R - 0.160e2, 2) * (-0.608108812862966632e-6) + pow(R - 0.160e2, 3) * 0.108710113469429377e-6 : (R < 0.200e2 ? 0.122674612096896806e-5 + R * (-0.658923163204982224e-7) + pow(R - 0.180e2, 2) * 0.441518679536096680e-7 + pow(R - 0.180e2, 3) * (-0.825598708418027547e-8) : (R < 0.250e2 ? -0.213406839975542322e-6 + R * 0.116433104837771156e-7 + pow(R - 0.200e2, 2) * (-0.538405455147199151e-8) + pow(R - 0.200e2, 3) * 0.488051023743313610e-9 : 0.143916142554856994e-6 + R * (-0.559340825019427938e-8) + pow(R - 0.250e2, 2) * 0.193671080467771202e-8 + pow(R - 0.250e2, 3) * (-0.187142007727771198e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.6226998304e1 * (R - 0.300e2) * (R - 0.250e2) + 0.6642155484e2 * R + 0.3902262904e4 - 0.3321077742e1 * R * R + 0.75000e3 * (0.1217727849e-1 * R - 0.5036964295e0) * R) * pow(R, -6));
}

static double radcoeff_6_10_10_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.128404318700000002e-2 + pow(R - 0.475e1, 2) * 0.120235506700018646e0 + pow(R - 0.475e1, 3) * (-0.244861402992074595e0) : (R < 0.525e1 ? -0.686264848849766629e-1 + R * 0.142062402889953331e-1 + pow(R - 0.50e1, 2) * (-0.634105455440373000e-1) + pow(R - 0.50e1, 3) * 0.922427135522238262e-1 : (R < 0.55e1 ? 0.450290931790206083e-2 + R * (-0.203523691981344888e-3) + pow(R - 0.525e1, 2) * 0.577148962013057914e-2 + pow(R - 0.525e1, 3) * (-0.341408596648207982e-1) : (R < 0.575e1 ? 0.236663415608847558e-1 + R * (-0.371919006906995574e-2) + pow(R - 0.55e1, 2) * (-0.198341551284850204e-1) + pow(R - 0.55e1, 3) * 0.280649388670593698e-1 : (R < 0.60e1 ? 0.496309053134982928e-1 + R * (-0.837409159573883344e-2) + pow(R - 0.575e1, 2) * 0.121454902180950656e-2 + pow(R - 0.575e1, 3) * 0.142956424365833119e-1 : (R < 0.625e1 ? 0.302039392338482593e-1 + R * (-0.508638412797471004e-2) + pow(R - 0.60e1, 2) * 0.119362808492469909e-1 + pow(R - 0.60e1, 3) * (-0.668201786779261224e-2) : (R < 0.65e1 ? 0.137516229266455804e-2 + R * (-0.371122053562329256e-3) + pow(R - 0.625e1, 2) * 0.692476744840253133e-2 + pow(R - 0.625e1, 3) * (-0.840541719261285632e-2) : (R < 0.675e1 ? -0.105847663892561679e-1 + R * 0.151524594702402574e-2 + pow(R - 0.65e1, 2) * 0.620704553942888872e-3 + pow(R - 0.65e1, 3) * (-0.291407952495596843e-2) : (R < 0.70e1 ? -0.899825081799702532e-2 + R * 0.127920831306622615e-2 + pow(R - 0.675e1, 2) * (-0.156485508977408745e-2) + pow(R - 0.675e1, 3) * 0.427493148436730607e-3 : (R < 0.725e1 ? -0.417346662377748520e-2 + R * 0.576935733511069367e-3 + pow(R - 0.70e1, 2) * (-0.124423522844653947e-2) + pow(R - 0.70e1, 3) * 0.133327344576904781e-2 : (R < 0.75e1 ? -0.153246481518884664e-2 + R * 0.204806890369496099e-3 + pow(R - 0.725e1, 2) * (-0.244280144119753660e-3) + pow(R - 0.725e1, 3) * 0.444764764870767497e-4 : (R < 0.775e1 ? -0.693531883862096303e-3 + R * 0.910061576509461738e-4 + pow(R - 0.75e1, 2) * (-0.210922786754446094e-3) + pow(R - 0.75e1, 3) * 0.198047434842645530e-3 : (R < 0.80e1 ? -0.174081946947073573e-3 + R * 0.226786583067191703e-4 + pow(R - 0.775e1, 2) * (-0.623872106224619466e-4) + pow(R - 0.775e1, 3) * 0.880406478341108072e-6 : (R < 0.825e1 ? 0.702608415125827694e-4 + R * (-0.834987078982284688e-5) + pow(R - 0.80e1, 2) * (-0.617269057637061155e-4) + pow(R - 0.80e1, 3) * 0.160596839787990008e-3 : (R < 0.85e1 ? 0.751124852526791526e-4 + R * (-0.910141621142777647e-5) + pow(R - 0.825e1, 2) * 0.587207240772863971e-4 + pow(R - 0.825e1, 3) * (-0.115720177111901151e-3) : (R < 0.875e1 ? 0.118403576837613819e-4 + R * (-0.143858738126604494e-5) + pow(R - 0.85e1, 2) * (-0.280694087566394694e-4) + pow(R - 0.85e1, 3) * 0.106632109587614596e-3 : (R < 0.90e1 ? -0.403874951331046196e-4 + R * 0.452022878809195662e-5 + pow(R - 0.875e1, 2) * 0.519046734340714773e-4 + pow(R - 0.875e1, 3) * (-0.131419157673757212e-3) : (R < 0.925e1 ? -0.509980792606839421e-4 + R * 0.583147344129821541e-5 + pow(R - 0.90e1, 2) * (-0.466596948212464387e-4) + pow(R - 0.90e1, 3) * 0.525721668418143145e-4 : (R < 0.95e1 ? 0.715283666018845749e-4 + R * (-0.764109268648481999e-5) + pow(R - 0.925e1, 2) * (-0.723056968988570034e-5) + pow(R - 0.925e1, 3) * 0.558491114392999200e-4 : (R < 0.100e2 ? 0.681307463780987641e-5 + R * (-0.784669136558934318e-6) + pow(R - 0.95e1, 2) * 0.346562638895892388e-4 + pow(R - 0.95e1, 3) * (-0.430245882249427334e-4) : (R < 0.105e2 ? -0.137791601272325267e-4 + R * 0.160315358432325269e-5 + pow(R - 0.100e2, 2) * (-0.298806184478248682e-4) + pow(R - 0.100e2, 3) * 0.305744373743567255e-4 : (R < 0.110e2 ? 0.555452893119077345e-4 + R * (-0.534663683273407048e-5) + pow(R - 0.105e2, 2) * 0.159810376137102201e-4 + pow(R - 0.105e2, 3) * (-0.109572070060841562e-4) : (R < 0.120e2 ? -0.272235581110433358e-4 + R * 0.241649552641303078e-5 + pow(R - 0.110e2, 2) * (-0.454772895416016799e-6) + pow(R - 0.110e2, 3) * (-0.319294756997014043e-6) : (R < 0.140e2 ? -0.558846502107945932e-5 + R * 0.549065464589954996e-6 + pow(R - 0.120e2, 2) * (-0.141265716640705893e-5) + pow(R - 0.120e2, 3) * 0.406117081806040668e-6 : (R < 0.160e2 ? 0.289097454302108775e-5 + R * (-0.228158219365791970e-6) + pow(R - 0.140e2, 2) * 0.102404532442918518e-5 + pow(R - 0.140e2, 3) * (-0.298740440248144597e-6) : (R < 0.180e2 ? -0.358350391687141933e-5 + R * 0.283137795373213703e-6 + pow(R - 0.160e2, 2) * (-0.768397317059682292e-6) + pow(R - 0.160e2, 3) * 0.193049959074037676e-6 : (R < 0.200e2 ? 0.851312215578713318e-5 + R * (-0.473851963977062932e-6) + pow(R - 0.180e2, 2) * 0.389902437384543869e-6 + pow(R - 0.180e2, 3) * (-0.754309833730062051e-7) : (R < 0.250e2 ? -0.361947494290076298e-5 + R * 0.180585985085038136e-6 + pow(R - 0.200e2, 2) * (-0.626834628534933482e-7) + pow(R - 0.200e2, 3) * 0.536228324009714386e-8 : 0.110030852896523882e-5 + R * (-0.440774004426095492e-7) + pow(R - 0.250e2, 2) * 0.177507857479638171e-7 + pow(R - 0.250e2, 3) * (-0.177768069268838205e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2481677184e1 * (R - 0.300e2) * (R - 0.250e2) - 0.2647097104e2 * R - 0.1555259818e4 + 0.1323548552e1 * R * R + 0.75000e3 * (-0.485318330e-2 * R + 0.2007476538e0) * R) * pow(R, -6));
}

static double radcoeff_6_10_12_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.656458836699999864e-2 + R * 0.108420217248550443e-18 + pow(R - 0.475e1, 2) * 0.262081263156706754e-1 + pow(R - 0.475e1, 3) * (-0.114720397870682694e0) : (R < 0.525e1 ? 0.484401472595883398e-1 + R * (-0.840601144291766925e-2) + pow(R - 0.50e1, 2) * (-0.598321720873413523e-1) + pow(R - 0.50e1, 3) * 0.123278196172048118e0 : (R < 0.55e1 ? 0.823343356917289326e-1 + R * (-0.152074357043293206e-1) + pow(R - 0.525e1, 2) * 0.326264750416947399e-1 + pow(R - 0.525e1, 3) * (-0.660896914575098277e-1) : (R < 0.575e1 ? 0.617730269041077418e-1 + R * (-0.112860153317650442e-1) + pow(R - 0.55e1, 2) * (-0.169407935514376343e-1) + pow(R - 0.55e1, 3) * 0.534184102979912492e-1 : (R < 0.60e1 ? 0.526619478255103829e-1 + R * (-0.974046017661050166e-2) + pow(R - 0.575e1, 2) * 0.231230141720558044e-1 + pow(R - 0.575e1, 3) * (-0.952133222455177732e-3) : (R < 0.625e1 ? -0.142056335112423285e-1 + R * 0.164252193020705470e-2 + pow(R - 0.60e1, 2) * 0.224089142552144210e-1 + pow(R - 0.60e1, 3) * (-0.310930607041705540e-1) : (R < 0.65e1 ? -0.468815819786392862e-1 + R * 0.701703017578228592e-2 + pow(R - 0.625e1, 2) * (-0.910881272913496376e-3) + pow(R - 0.625e1, 3) * (-0.773059336886258112e-2) : (R < 0.675e1 ? -0.346772777743147229e-1 + R * 0.511210328266380361e-2 + pow(R - 0.65e1, 2) * (-0.670882629956043221e-2) + pow(R - 0.65e1, 3) * 0.346358907882087039e-2 : (R < 0.70e1 ? -0.167837770055468787e-1 + R * 0.240711308516250054e-2 + pow(R - 0.675e1, 2) * (-0.411113449044477920e-2) + pow(R - 0.675e1, 3) * 0.248850888717910487e-2 : (R < 0.725e1 ? -0.587903715770335313e-2 + R * 0.818141256286193316e-3 + pow(R - 0.70e1, 2) * (-0.224475282506045055e-2) + pow(R - 0.70e1, 3) * 0.276050422366270858e-2 : (R < 0.75e1 ? -0.159153276897226314e-2 + R * 0.213359385692725955e-3 + pow(R - 0.725e1, 2) * (-0.174374657313418953e-3) + pow(R - 0.725e1, 3) * (-0.227927475909939659e-3) : (R < 0.775e1 ? -0.631564573937770939e-3 + R * 0.834356553029027919e-4 + pow(R - 0.75e1, 2) * (-0.345320264245873698e-3) + pow(R - 0.75e1, 3) * 0.490227615081050092e-3 : (R < 0.80e1 ? -0.197332631793870280e-4 + R * 0.269320100766284251e-5 + pow(R - 0.775e1, 2) * 0.223504470649139121e-4 + pow(R - 0.775e1, 3) * (-0.767671860782611221e-4) : (R < 0.825e1 ? 0.621314333743330546e-5 + R * (-0.525422849554163114e-6) + pow(R - 0.80e1, 2) * (-0.352249424937819329e-4) + pow(R - 0.80e1, 3) * 0.277201231994326722e-6 : (R < 0.85e1 ? 0.148890007831531070e-3 + R * (-0.180859188654461882e-4) + pow(R - 0.825e1, 2) * (-0.350170415697861878e-4) + pow(R - 0.825e1, 3) * 0.214573709406283791e-3 : (R < 0.875e1 ? -0.431002657513808934e-4 + R * 0.463813086333892874e-5 + pow(R - 0.85e1, 2) * 0.125913240484926662e-3 + pow(R - 0.85e1, 3) * (-0.313001789769129469e-3) : (R < 0.90e1 ? -0.774732069680917213e-4 + R * 0.890691552409048281e-5 + pow(R - 0.875e1, 2) * (-0.108838101841920453e-3) + pow(R - 0.875e1, 3) * 0.235779074143834092e-3 : (R < 0.925e1 ? 0.113027303712076183e-4 + R * (-0.130355899490084644e-5) + pow(R - 0.90e1, 2) * 0.679962037659551224e-4 + pow(R - 0.90e1, 3) * (-0.112252282345406924e-3) : (R < 0.95e1 ? -0.105996339029894442e-3 + R * 0.116472399483129132e-4 + pow(R - 0.925e1, 2) * (-0.161930079931000840e-4) + pow(R - 0.925e1, 3) * (-0.403136502460627424e-5) : (R < 0.100e2 ? -0.229737351906673357e-4 + R * 0.279485500964919302e-5 + pow(R - 0.95e1, 2) * (-0.192165317615547897e-4) + pow(R - 0.95e1, 3) * 0.101803123085128089e-4 : (R < 0.105e2 ? 0.893076462092099122e-4 + R * (-0.878644252052098999e-5) + pow(R - 0.100e2, 2) * (-0.394606329878557548e-5) + pow(R - 0.100e2, 3) * 0.938602378365510713e-5 : (R < 0.110e2 ? 0.570131106984349677e-4 + R * (-0.569298798156523512e-5) + pow(R - 0.105e2, 2) * 0.101329723766970861e-4 + pow(R - 0.105e2, 3) * (-0.366495480313323247e-5) : (R < 0.120e2 ? -0.221385845756012000e-4 + R * 0.169126829278192722e-5 + pow(R - 0.110e2, 2) * 0.463554017199723735e-5 + pow(R - 0.110e2, 3) * (-0.273076310277916438e-5) : (R < 0.140e2 ? -0.331792999340668971e-4 + R * 0.277005932843890856e-5 + pow(R - 0.120e2, 2) * (-0.355674913634025665e-5) + pow(R - 0.120e2, 3) * 0.949952288560401175e-6 : (R < 0.160e2 ? -0.220711014237736097e-6 + R * (-0.575097541973045703e-7) + pow(R - 0.140e2, 2) * 0.214296459502215040e-5 + pow(R - 0.140e2, 3) * (-0.653322183711749034e-6) : (R < 0.180e2 ? -0.858730491260493818e-5 + R * 0.674482421350308616e-6 + pow(R - 0.160e2, 2) * (-0.177696850724834381e-5) + pow(R - 0.160e2, 3) * 0.444806832661594744e-6 : (R < 0.200e2 ? 0.197267323867707338e-4 + R * (-0.109570961570392968e-5) + pow(R - 0.180e2, 2) * 0.891872488721224550e-6 + pow(R - 0.180e2, 3) * (-0.172266962284629842e-6) : (R < 0.250e2 ? -0.808964150600820438e-5 + R * 0.404576791765410252e-6 + pow(R - 0.200e2, 2) * (-0.141729284986554582e-6) + pow(R - 0.200e2, 3) * 0.121508096546945085e-7 : 0.253553072025118906e-5 + R * (-0.101405333998047557e-6) + pow(R - 0.250e2, 2) * 0.405328598338630286e-7 + pow(R - 0.250e2, 3) * (-0.405265032845070279e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.6061853760e0 * (R - 0.300e2) * (R - 0.250e2) + 0.6465766200e1 * R + 0.3799608558e3 - 0.3232883100e0 * R * R + 0.75000e3 * (0.1185575406e-2 * R - 0.4904223185e-1) * R) * pow(R, -6));
}

static double radcoeff_6_10_12_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.437869467700000015e-2 + pow(R - 0.475e1, 2) * (-0.141976945304230773e0) + pow(R - 0.475e1, 3) * 0.310153464032923099e0 : (R < 0.525e1 ? 0.557673848467115096e-1 + R * (-0.128346981459423037e-1) + pow(R - 0.50e1, 2) * 0.906381527204615373e-1 + pow(R - 0.50e1, 3) * (-0.134543610402769270e0) : (R < 0.55e1 ? -0.461537589217884334e-1 + R * 0.725745126376922591e-2 + pow(R - 0.525e1, 2) * (-0.102695550816154207e-1) + pow(R - 0.525e1, 3) * 0.513108388901540660e-1 : (R < 0.575e1 ? -0.706669003877597318e-1 + R * 0.117434560148654051e-1 + pow(R - 0.55e1, 2) * 0.282135740860001323e-1 + pow(R - 0.55e1, 3) * (-0.499850041018470026e-1) : (R < 0.60e1 ? -0.969085106464226548e-1 + R * 0.164780547887691566e-1 + pow(R - 0.575e1, 2) * (-0.927517899038511964e-2) + pow(R - 0.575e1, 3) * (-0.176321887547660344e-1) : (R < 0.625e1 ? -0.501019629623477847e-1 + R * 0.853442990205796441e-2 + pow(R - 0.60e1, 2) * (-0.224993205564596455e-1) + pow(R - 0.60e1, 3) * 0.147045634729111602e-1 : (R < 0.65e1 ? 0.180005472625635902e-2 + R * 0.418752749989825986e-4 + pow(R - 0.625e1, 2) * (-0.114708979517762748e-1) + pow(R - 0.625e1, 3) * 0.140407019671213718e-1 : (R < 0.675e1 ? 0.214708223933503355e-1 + R * (-0.306094208205389762e-2) + pow(R - 0.65e1, 2) * (-0.940371476435245706e-3) + pow(R - 0.65e1, 3) * 0.478391868100334731e-2 : (R < 0.70e1 ? 0.186059045577878987e-1 + R * (-0.263414306758339226e-2) + pow(R - 0.675e1, 2) * 0.264756753431726489e-2 + pow(R - 0.675e1, 3) * 0.117383782465218037e-3 : (R < 0.725e1 ? 0.935265906568772190e-2 + R * (-0.128834984121253176e-2) + pow(R - 0.70e1, 2) * 0.273560537116617842e-2 + pow(R - 0.70e1, 3) * (-0.308463480286420713e-2) : (R < 0.75e1 ? 0.375204294725698956e-2 + R * (-0.498916181166481304e-3) + pow(R - 0.725e1, 2) * 0.422129269018023064e-3 + pow(R - 0.725e1, 3) * 0.316920691071608082e-3 : (R < 0.775e1 ? 0.175472343173157424e-2 + R * (-0.228428917081543222e-3) + pow(R - 0.75e1, 2) * 0.659819787321729153e-3 + pow(R - 0.75e1, 3) * (-0.780780486862225030e-3) : (R < 0.80e1 ? 0.361532442431930251e-3 + R * (-0.449153647073458387e-4) + pow(R - 0.775e1, 2) * 0.742344221750603400e-4 + pow(R - 0.775e1, 3) * (-0.167864905667078493e-4) : (R < 0.825e1 ? 0.941518520525871504e-4 + R * (-0.109456206010733941e-4) + pow(R - 0.80e1, 2) * 0.616445542500294522e-4 + pow(R - 0.80e1, 3) * (-0.925716164069435052e-4) : (R < 0.85e1 ? -0.145288619650252542e-4 + R * 0.251947844763942479e-5 + pow(R - 0.825e1, 2) * (-0.778415805517817501e-5) + pow(R - 0.825e1, 3) * (-0.338330831655181050e-4) : (R < 0.875e1 ? 0.714601342616166325e-4 + R * (-0.771630367348430995e-5) + pow(R - 0.85e1, 2) * (-0.331589704293167554e-4) + pow(R - 0.85e1, 3) * 0.823818716930159423e-4 : (R < 0.90e1 ? 0.805876527368942048e-4 + R * (-0.884918794570219509e-5) + pow(R - 0.875e1, 2) * 0.286274333404452149e-4 + pow(R - 0.875e1, 3) * (-0.230343312865457256e-4) : (R < 0.925e1 ? -0.793606009163778817e-5 + R * 0.114559160829308752e-5 + pow(R - 0.90e1, 2) * 0.113516848755359190e-4 + pow(R - 0.90e1, 3) * (-0.721832963708330771e-4) : (R < 0.95e1 ? 0.643369183010989148e-4 + R * (-0.671293402347015410e-5) + pow(R - 0.925e1, 2) * (-0.427857874025888889e-4) + pow(R - 0.925e1, 3) * 0.122574829537878027e-3 : (R < 0.100e2 ? 0.484741133482184493e-4 + R * (-0.512304718641246839e-5) + pow(R - 0.95e1, 2) * 0.491453347508196249e-4 + pow(R - 0.95e1, 3) * (-0.554205780839893772e-4) : (R < 0.105e2 ? -0.219661371031512700e-4 + R * 0.245685400141512708e-5 + pow(R - 0.100e2, 2) * (-0.339855323751644408e-4) + pow(R - 0.100e2, 3) * 0.374410309206683656e-4 : (R < 0.110e2 ? 0.362175801076043506e-4 + R * (-0.344790518324803360e-5) + pow(R - 0.105e2, 2) * 0.221760140058381144e-4 + pow(R - 0.105e2, 3) * (-0.193362502866840910e-4) : (R < 0.120e2 ? -0.450675368753471108e-4 + R * 0.422592110757700993e-5 + pow(R - 0.110e2, 2) * (-0.682836142418802476e-5) + pow(R - 0.110e2, 3) * 0.257010739761101379e-5 : (R < 0.140e2 ? 0.220310169645919555e-4 + R * (-0.172047954796599609e-5) + pow(R - 0.120e2, 2) * 0.881960768645017784e-6 + pow(R - 0.120e2, 3) * (-0.116837836081009878e-6) : (R < 0.160e2 ? -0.513688923198739171e-5 + R * 0.405309493641956564e-6 + pow(R - 0.140e2, 2) * 0.180933752158958542e-6 + pow(R - 0.140e2, 3) * (-0.110401780489968413e-6) : (R < 0.180e2 ? 0.432101324862928491e-5 + R * (-0.195776863601830276e-6) + pow(R - 0.160e2, 2) * (-0.481476930780851962e-6) + pow(R - 0.160e2, 3) * 0.140195415790883546e-6 : (R < 0.200e2 ? 0.790079805722344037e-5 + R * (-0.439339597234635574e-6) + pow(R - 0.180e2, 2) * 0.359695563964449313e-6 + pow(R - 0.180e2, 3) * (-0.695358033360657695e-7) : (R < 0.250e2 ? -0.330375843010744720e-5 + R * 0.165013018590372365e-6 + pow(R - 0.200e2, 2) * (-0.575192560519453370e-7) + pow(R - 0.200e2, 3) * 0.492544695317417206e-8 : 0.101854201352545235e-5 + R * (-0.407710204410180947e-7) + pow(R - 0.250e2, 2) * 0.163624482456672372e-7 + pow(R - 0.250e2, 3) * (-0.163741844189272386e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1119378656e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1194044516e2 * R - 0.7013956658e3 + 0.5970222580e0 * R * R + 0.75000e3 * (-0.2188880683e-2 * R + 0.905373247e-1) * R) * pow(R, -6));
}

static double radcoeff_6_10_14_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.203684849699999987e-3 + pow(R - 0.475e1, 2) * 0.562183707638917313e-1 + pow(R - 0.475e1, 3) * (-0.529483120475669061e-1) : (R < 0.525e1 ? -0.884242384181353480e-1 + R * 0.181813768730270699e-1 + pow(R - 0.50e1, 2) * 0.165071367282165517e-1 + pow(R - 0.50e1, 3) * (-0.505970747372993107e-1) : (R < 0.55e1 ? -0.817078601324315312e-1 + R * 0.169479937238917223e-1 + pow(R - 0.525e1, 2) * (-0.214406693247579348e-1) + pow(R - 0.525e1, 3) * 0.146037928847641586e-1 : (R < 0.575e1 ? -0.389180384707331975e-1 + R * 0.896587022740603576e-2 + pow(R - 0.55e1, 2) * (-0.104878246611848150e-1) + pow(R - 0.55e1, 3) * (-0.246445110737573032e-1) : (R < 0.60e1 ? 0.167637614047162417e-1 + R * (-0.898887929515868045e-3) + pow(R - 0.575e1, 2) * (-0.289712079665027933e-1) + pow(R - 0.575e1, 3) * 0.140584040502650560e-1 : (R < 0.625e1 ? 0.862706428130554093e-1 + R * (-0.127485411533425665e-1) + pow(R - 0.60e1, 2) * (-0.184274049288040004e-1) + pow(R - 0.60e1, 3) * 0.336175156726970445e-1 : (R < 0.65e1 ? 0.103834317910961690e0 + R * (-0.156589594291138695e-1) + pow(R - 0.625e1, 2) * 0.678573182571878559e-2 + pow(R - 0.625e1, 3) * 0.964810234694676513e-2 : (R < 0.675e1 ? 0.705969245803127338e-1 + R * (-0.104570743262019580e-1) + pow(R - 0.65e1, 2) * 0.140218085859288594e-1 + pow(R - 0.65e1, 3) * (-0.637688589248411319e-2) : (R < 0.70e1 ? 0.321207910050285150e-1 + R * (-0.464183613807829867e-2) + pow(R - 0.675e1, 2) * 0.923914416656577454e-2 + pow(R - 0.675e1, 3) * (-0.745525199941031794e-2) : (R < 0.725e1 ? 0.100297628691939263e-1 + R * (-0.142012380468484667e-2) + pow(R - 0.70e1, 2) * 0.364770516700803609e-2 + pow(R - 0.70e1, 3) * (-0.351207336747459730e-2) : (R < 0.75e1 ? 0.175416179931178751e-2 + R * (-0.254784977582315532e-3) + pow(R - 0.725e1, 2) * 0.101365014140208801e-2 + pow(R - 0.725e1, 3) * (-0.103934307085130320e-2) : (R < 0.775e1 ? -0.538336639205818203e-3 + R * 0.571632673341090951e-4 + pow(R - 0.75e1, 2) * 0.234142838263610552e-3 + pow(R - 0.75e1, 3) * (-0.303158125120187635e-3) : (R < 0.80e1 ? -0.995216405225563764e-3 + R * 0.117392538005879203e-3 + pow(R - 0.775e1, 2) * 0.677424442346980616e-5 + pow(R - 0.775e1, 3) * (-0.119620543867946335e-3) : (R < 0.825e1 ? -0.844328247838993127e-3 + R * 0.983508082423741433e-4 + pow(R - 0.80e1, 2) * (-0.829411634774899586e-4) + pow(R - 0.80e1, 3) * 0.644590519519734449e-4 : (R < 0.85e1 ? -0.606082694513149548e-3 + R * 0.689662987446241891e-4 + pow(R - 0.825e1, 2) * (-0.345968745135098716e-4) + pow(R - 0.825e1, 3) * (-0.873952684199476044e-4) : (R < 0.875e1 ? -0.323287624512597191e-3 + R * 0.352812486591290843e-4 + pow(R - 0.85e1, 2) * (-0.100143325828470575e-3) + pow(R - 0.85e1, 3) * 0.135307007967816901e-3 : (R < 0.90e1 ? -0.111293419825020376e-3 + R * 0.105796497388594726e-4 + pow(R - 0.875e1, 2) * 0.133693014739211151e-5 + pow(R - 0.875e1, 3) * 0.694884109486800021e-4 : (R < 0.925e1 ? -0.233401984408897277e-3 + R * 0.242771918654330311e-4 + pow(R - 0.90e1, 2) * 0.534532383589021194e-4 + pow(R - 0.90e1, 3) * (-0.185115533874536964e-3) : (R < 0.95e1 ? -0.159115060574527799e-3 + R * 0.162946484434084083e-4 + pow(R - 0.925e1, 2) * (-0.853834120470006107e-4) + pow(R - 0.925e1, 3) * 0.176373791365467907e-3 : (R < 0.100e2 ? -0.702902919838666973e-4 + R * 0.667302830093333550e-5 + pow(R - 0.95e1, 2) * 0.468969314771003196e-4 + pow(R - 0.95e1, 3) * (-0.564010132619339815e-4) : (R < 0.105e2 ? -0.111577901078831673e-3 + R * 0.112691998315831673e-4 + pow(R - 0.100e2, 2) * (-0.377045884158006526e-4) + pow(R - 0.100e2, 3) * 0.291231844148686320e-4 : (R < 0.110e2 ? 0.491894509678930940e-4 + R * (-0.459300027306600879e-5) + pow(R - 0.105e2, 2) * 0.598018820650229788e-5 + pow(R - 0.105e2, 3) * (-0.161501368074055716e-5) : (R < 0.120e2 ? -0.197558609558958051e-5 + R * 0.175927672880870947e-6 + pow(R - 0.110e2, 2) * 0.355766768539146203e-5 + pow(R - 0.110e2, 3) * (-0.200731407027233278e-5) : (R < 0.140e2 ? -0.135459504001615563e-4 + R * 0.126932083284679645e-5 + pow(R - 0.120e2, 2) * (-0.246427452542553673e-5) + pow(R - 0.120e2, 3) * 0.619949283751069126e-6 : (R < 0.160e2 ? 0.154044395222952819e-4 + R * (-0.114838586384251991e-5) + pow(R - 0.140e2, 2) * 0.125542117708087845e-5 + pow(R - 0.140e2, 3) * (-0.275192011504809250e-6) : (R < 0.180e2 ? -0.928550098567252801e-5 + R * 0.570994706423282988e-6 + pow(R - 0.160e2, 2) * (-0.395730891947977106e-6) + pow(R - 0.160e2, 3) * 0.769661730806678127e-7 : (R < 0.200e2 ? 0.161523566601100826e-5 + R * (-0.883347844006115650e-7) + pow(R - 0.180e2, 2) * 0.660661465360298098e-7 + pow(R - 0.180e2, 3) * (-0.125933923053620081e-7) : (R < 0.250e2 ? -0.484124455883271065e-6 + R * 0.248090940791635512e-7 + pow(R - 0.200e2, 2) * (-0.949420729614224345e-8) + pow(R - 0.200e2, 3) * 0.830246922461906672e-9 : 0.199140071440397193e-6 + R * (-0.786445969761588790e-8) + pow(R - 0.250e2, 2) * 0.295949654078635538e-8 + pow(R - 0.250e2, 3) * (-0.291904140252635519e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3858376224e1 * (R - 0.300e2) * (R - 0.250e2) + 0.4115627556e2 * R + 0.2417877724e4 - 0.2057813778e1 * R * R + 0.75000e3 * (0.754521535e-2 * R - 0.3120961552e0) * R) * pow(R, -6));
}

static double radcoeff_8_0_8_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.407356531999999993e-1 + pow(R - 0.475e1, 2) * (-0.719665756282430014e0) + pow(R - 0.475e1, 3) * 0.145917622256971979e1 : (R < 0.525e1 ? 0.449742853956962563e0 + R * (-0.862373364093925177e-1) + pow(R - 0.50e1, 2) * 0.374716410644859887e0 + pow(R - 0.50e1, 3) * (-0.575490896829159215e0) : (R < 0.55e1 ? 0.470388579827571290e-1 + R * (-0.678367424242992938e-2) + pow(R - 0.525e1, 2) * (-0.569017619770094962e-1) + pow(R - 0.525e1, 3) * 0.129473788682916841e0 : (R < 0.575e1 ? 0.684655266648827310e-1 + R * (-0.109582198528877690e-1) + pow(R - 0.55e1, 2) * 0.402035795351781480e-1 + pow(R - 0.55e1, 3) * (-0.895368566865082927e-1) : (R < 0.60e1 ? 0.505258694516092441e-1 + R * (-0.764459071401899903e-2) + pow(R - 0.575e1, 2) * (-0.269490629797030715e-1) + pow(R - 0.575e1, 3) * 0.282810993751162615e-1 : (R < 0.625e1 ? 0.983143973352174211e-1 + R * (-0.158164160710362357e-1) + pow(R - 0.60e1, 2) * (-0.573823844836587622e-2) + pow(R - 0.60e1, 3) * 0.217824738420432998e-1 : (R < 0.65e1 ? 0.907017672030753508e-1 + R * (-0.146013214498360560e-1) + pow(R - 0.625e1, 2) * 0.105986169331666012e-1 + pow(R - 0.625e1, 3) * 0.155308282967105086e-1 : (R < 0.675e1 ? 0.382331479345269717e-1 + R * (-0.638998267761953405e-2) + pow(R - 0.65e1, 2) * 0.222467381556994831e-1 + pow(R - 0.65e1, 3) * (-0.205433314768853834e-1) : (R < 0.70e1 ? -0.978000786012083075e-2 + R * 0.881511748314197253e-3 + pow(R - 0.675e1, 2) * 0.683923954803544298e-2 + pow(R - 0.675e1, 3) * (-0.783941982916892301e-2) : (R < 0.725e1 ? -0.231231462155392191e-1 + R * 0.283124030436274557e-2 + pow(R - 0.70e1, 2) * 0.959674676158750180e-3 + pow(R - 0.70e1, 3) * (-0.250834607043892797e-2) : (R < 0.75e1 ? -0.231713972172024572e-1 + R * 0.284076275423482145e-2 + pow(R - 0.725e1, 2) * (-0.921584876670445796e-3) + pow(R - 0.725e1, 3) * (-0.171352625075363047e-3) : (R < 0.775e1 ? -0.195347657402347614e-1 + R * 0.234784169869796822e-2 + pow(R - 0.75e1, 2) * (-0.105009934547696808e-2) + pow(R - 0.75e1, 3) * 0.500764427403806932e-4 : (R < 0.80e1 ? -0.156032468720431177e-1 + R * 0.183218135897330551e-2 + pow(R - 0.775e1, 2) * (-0.101254201342168256e-2) + pow(R - 0.775e1, 3) * 0.279978630113842460e-3 : (R < 0.825e1 ? -0.120319559732704768e-1 + R * 0.137840634540880962e-2 + pow(R - 0.80e1, 2) * (-0.802558040836300686e-3) + pow(R - 0.80e1, 3) * 0.286922969604248509e-3 : (R < 0.85e1 ? -0.921091472957951025e-2 + R * 0.103092538179145590e-2 + pow(R - 0.825e1, 2) * (-0.587365813633114291e-3) + pow(R - 0.825e1, 3) * 0.208366182669161078e-3 : (R < 0.875e1 ? -0.708014826701561586e-2 + R * 0.776311134225366514e-3 + pow(R - 0.85e1, 2) * (-0.431091176631243468e-3) + pow(R - 0.85e1, 3) * (-0.110841068089050717e-5) : (R < 0.90e1 ? -0.521926640043693206e-2 + R * 0.560557718907077904e-3 + pow(R - 0.875e1, 2) * (-0.431922484641911349e-3) + pow(R - 0.875e1, 3) * 0.231420599254399334e-3 : (R < 0.925e1 ? -0.368951668921689829e-2 + R * 0.387987838946322037e-3 + pow(R - 0.90e1, 2) * (-0.258357035201111848e-3) + pow(R - 0.90e1, 3) * (-0.189925353670553120e-5) : (R < 0.95e1 ? -0.250749837409561293e-2 + R * 0.258453211307633839e-3 + pow(R - 0.925e1, 2) * (-0.259781475353640997e-3) + pow(R - 0.925e1, 3) * 0.130880203052422553e-3 : (R < 0.100e2 ? -0.152085806688985470e-2 + R * 0.153102511703142599e-3 + pow(R - 0.95e1, 2) * (-0.161621323064324075e-3) + pow(R - 0.95e1, 3) * 0.643250586760777413e-4 : (R < 0.105e2 ? -0.419447474748768114e-3 + R * 0.397249826458768125e-4 + pow(R - 0.100e2, 2) * (-0.651337350502074564e-4) + pow(R - 0.100e2, 3) * 0.356341226369076528e-4 : (R < 0.110e2 ? -0.279911409201760445e-4 + R * 0.131683957335009938e-5 + pow(R - 0.105e2, 2) * (-0.116825510948459737e-4) + pow(R - 0.105e2, 3) * 0.164646477362915481e-4 : (R < 0.120e2 ? -0.361789795079506859e-4 + R * 0.198277428072278992e-5 + pow(R - 0.110e2, 2) * 0.130144205095913502e-4 + pow(R - 0.110e2, 3) * (-0.599326637831413792e-5) : (R < 0.140e2 ? -0.125746327987556858e-3 + R * 0.100318161649630714e-4 + pow(R - 0.120e2, 2) * (-0.496537862535106699e-5) + pow(R - 0.120e2, 3) * 0.744832587934765543e-6 : (R < 0.160e2 ? 0.132801464615361380e-4 + R * (-0.891707281224009846e-6) + pow(R - 0.140e2, 2) * (-0.496383097742473837e-6) + pow(R - 0.140e2, 3) * 0.188937217427239328e-6 : (R < 0.180e2 ? 0.829868431907253083e-5 + R * (-0.609993063067033147e-6) + pow(R - 0.160e2, 2) * 0.637240206820962292e-6 + pow(R - 0.160e2, 3) * (-0.123837262768722842e-6) : (R < 0.200e2 ? -0.927549908885855052e-5 + R * 0.452920610992141759e-6 + pow(R - 0.180e2, 2) * (-0.105783369791374773e-6) + pow(R - 0.180e2, 3) * 0.128906385601519438e-7 : (R < 0.250e2 ? -0.422659113066931963e-5 + R * 0.184474794548465993e-6 + pow(R - 0.200e2, 2) * (-0.284395384304631035e-7) + pow(R - 0.200e2, 3) * 0.170457869695398031e-8 : -0.810707703484587354e-6 + R * 0.279228125153834942e-7 + pow(R - 0.250e2, 2) * (-0.287085797615339865e-8) + pow(R - 0.250e2, 3) * 0.106877821815339909e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1718704767e3 * (R - 0.300e2) * (R - 0.250e2) - 0.1833284684e4 * R - 0.1077057994e6 + 0.9166423420e2 * R * R + 0.75000e3 * (-0.3361028103e0 * R + 0.1390244285e2) * R) * pow(R, -6));
}

static double radcoeff_8_0_8_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.493119773799999966e-1 + pow(R - 0.475e1, 2) * 0.915134426509000010e0 + pow(R - 0.475e1, 3) * (-0.184811268075599955e1) : (R < 0.525e1 ? -0.576223264423750381e0 + R * 0.111046085612750062e0 + pow(R - 0.50e1, 2) * (-0.470950084057999763e0) + pow(R - 0.50e1, 3) * 0.699132507547998050e0 : (R < 0.55e1 ? -0.466982907122490826e-1 + R * 0.665838874899982603e-2 + pow(R - 0.525e1, 2) * 0.533992966029987748e-1 + pow(R - 0.525e1, 3) * (-0.121621903611992294e0) : (R < 0.575e1 ? -0.666866544768786040e-1 + R * 0.105539301232506558e-1 + pow(R - 0.55e1, 2) * (-0.378171311059954524e-1) + pow(R - 0.55e1, 3) * 0.663250258119713054e-1 : (R < 0.60e1 ? -0.307963131664859245e-1 + R * 0.408130690999755196e-2 + pow(R - 0.575e1, 2) * 0.119266382529830354e-1 + pow(R - 0.575e1, 3) * 0.110604375610702738e-2 : (R < 0.625e1 ? -0.670578303265548237e-1 + R * 0.102520092407591377e-1 + pow(R - 0.60e1, 2) * 0.127561710700633060e-1 + pow(R - 0.60e1, 3) * (-0.105602394283994122e-1) : (R < 0.65e1 ? -0.939133273895368798e-1 + R * 0.146500498829659001e-1 + pow(R - 0.625e1, 2) * 0.483599149876374687e-2 + pow(R - 0.625e1, 3) * (-0.333828594185093808e-1) : (R < 0.675e1 ? -0.691642975539522031e-1 + R * 0.108087594913772629e-1 + pow(R - 0.65e1, 2) * (-0.202011530651182922e-1) + pow(R - 0.65e1, 3) * 0.114153545424369538e-1 : (R < 0.70e1 ? -0.165171712037940656e-1 + R * 0.284856193552504664e-2 + pow(R - 0.675e1, 2) * (-0.116396371582905764e-1) + pow(R - 0.675e1, 3) * 0.104980653127615571e-1 : (R < 0.725e1 ? 0.987940307534214586e-2 + R * (-0.100286939747744937e-2) + pow(R - 0.70e1, 2) * (-0.376608817371940768e-2) + pow(R - 0.70e1, 3) * 0.434542599851681956e-2 : (R < 0.75e1 ? 0.174569260087105577e-1 + R * (-0.207114610961524944e-2) + pow(R - 0.725e1, 2) * (-0.507018674831792365e-3) + pow(R - 0.725e1, 3) * 0.153375594117116003e-2 : (R < 0.775e1 ? 0.171936780164616450e-1 + R * (-0.203707620806155287e-2) + pow(R - 0.75e1, 2) * 0.643298281046577767e-3 + pow(R - 0.75e1, 3) * 0.211864092798536762e-3 : (R < 0.80e1 ? 0.144365486865736751e-1 + R * (-0.167570255013853872e-2) + pow(R - 0.775e1, 2) * 0.802196350645480345e-3 + pow(R - 0.775e1, 3) * (-0.109232664365304429e-3) : (R < 0.825e1 ? 0.114400427920743428e-1 + R * (-0.129508549938429289e-2) + pow(R - 0.80e1, 2) * 0.720271852371502023e-3 + pow(R - 0.80e1, 3) * (-0.235414203337321704e-3) : (R < 0.85e1 ? 0.887441639067539090e-2 + R * (-0.979089736324289779e-3) + pow(R - 0.825e1, 2) * 0.543711199868510738e-3 + pow(R - 0.825e1, 3) * (-0.153489018285406101e-3) : (R < 0.875e1 ? 0.683985059820765851e-2 + R * (-0.736013327318548014e-3) + pow(R - 0.85e1, 2) * 0.428594436154456162e-3 + pow(R - 0.85e1, 3) * (-0.106233832321056326e-3) : (R < 0.90e1 ? 0.516416706981328178e-2 + R * (-0.541634952801517953e-3) + pow(R - 0.875e1, 2) * 0.348919061913663918e-3 + pow(R - 0.875e1, 3) * (-0.173502430030368811e-3) : (R < 0.925e1 ? 0.390591310777842118e-2 + R * (-0.399707127475380146e-3) + pow(R - 0.90e1, 2) * 0.218792239390887310e-3 + pow(R - 0.90e1, 3) * 0.223995844425329471e-4 : (R < 0.95e1 ? 0.286917422979689456e-2 + R * (-0.286111085696961543e-3) + pow(R - 0.925e1, 2) * 0.235591927722787021e-3 + pow(R - 0.925e1, 3) * (-0.122359062939763399e-3) : (R < 0.100e2 ? 0.198087728909935017e-2 + R * (-0.191257446136773671e-3) + pow(R - 0.95e1, 2) * 0.143822630517964465e-3 + pow(R - 0.95e1, 3) * (-0.676886210488342058e-4) : (R < 0.105e2 ? 0.107781022178434892e-2 + R * (-0.982012814054348876e-4) + pow(R - 0.100e2, 2) * 0.422896989447131430e-4 + pow(R - 0.100e2, 3) * 0.874716205231324365e-5 : (R < 0.110e2 ? 0.576550301695611528e-3 + R * (-0.493512109214868148e-4) + pow(R - 0.105e2, 2) * 0.554104420231830093e-4 + pow(R - 0.105e2, 3) * (-0.399891454804187607e-4) : (R < 0.120e2 ? 0.305799856974796618e-3 + R * (-0.239326280086178743e-4) + pow(R - 0.110e2, 2) * (-0.457327619744513430e-5) + pow(R - 0.110e2, 3) * 0.443496923606300961e-5 : (R < 0.140e2 ? 0.255761286253829417e-3 + R * (-0.197742726953191157e-4) + pow(R - 0.120e2, 2) * 0.873163151074389538e-5 + pow(R - 0.120e2, 3) * (-0.137902047154216936e-5) : (R < 0.160e2 ? 0.223597231418939073e-4 + R * (-0.139599231084956485e-5) + pow(R - 0.140e2, 2) * 0.457508681490878891e-6 + pow(R - 0.140e2, 3) * (-0.680597386580482413e-7) : (R < 0.180e2 ? 0.743219416552205317e-5 + R * (-0.382674448782628334e-6) + pow(R - 0.160e2, 2) * 0.491502495425894041e-7 + pow(R - 0.160e2, 3) * (-0.403227325063761602e-8) : (R < 0.200e2 ? 0.492869003275859781e-5 + R * (-0.234460729619922100e-6) + pow(R - 0.180e2, 2) * 0.249566100387637063e-7 + pow(R - 0.180e2, 3) * (-0.612126769013223955e-10) : (R < 0.250e2 ? 0.304618901085366341e-5 + R * (-0.135368841587683163e-6) + pow(R - 0.200e2, 2) * 0.245893339773557719e-7 + pow(R - 0.200e2, 3) * (-0.164519423996382786e-8) : 0.392678785885313628e-6 + R * (-0.128650698114125452e-7) + pow(R - 0.250e2, 2) * (-0.885796221016482650e-10) + pow(R - 0.250e2, 3) * 0.122535920076831477e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1084198973e3 * (R - 0.300e2) * (R - 0.250e2) + 0.1156483744e4 * R + 0.6794143690e5 - 0.5782418720e2 * R * R + 0.75000e3 * (0.2120182427e0 * R - 0.876979399e1) * R) * pow(R, -6));
}

static double radcoeff_8_2_6_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.551378449999998313e-2 + R * 0.346944695195361419e-17 + pow(R - 0.475e1, 2) * (-0.125937138687888361e0) + pow(R - 0.475e1, 3) * 0.294545706623553394e0 : (R < 0.525e1 ? 0.409512367581395878e-1 + R * (-0.774124935202791849e-2) + pow(R - 0.50e1, 2) * 0.949721412797766840e-1 + pow(R - 0.50e1, 3) * (-0.152886508030660007e0) : (R < 0.55e1 ? -0.543060706165862592e-1 + R * 0.110786010321116679e-1 + pow(R - 0.525e1, 2) * (-0.196927397432183279e-1) + pow(R - 0.525e1, 3) * 0.356749640270866003e-1 : (R < 0.575e1 ? -0.376142178966968332e-1 + R * 0.792128691558124237e-2 + pow(R - 0.55e1, 2) * 0.706348327709662577e-2 + pow(R - 0.55e1, 3) * (-0.401297321416864000e-1) : (R < 0.60e1 ? -0.148424242129892928e-1 + R * 0.392870377756335525e-2 + pow(R - 0.575e1, 2) * (-0.230338158291681742e-1) + pow(R - 0.575e1, 3) * 0.630653932365900661e-2 : (R < 0.625e1 ? 0.458230927230080104e-1 + R * (-0.640572801383466894e-2) + pow(R - 0.60e1, 2) * (-0.183039113364239191e-1) + pow(R - 0.60e1, 3) * 0.214470053110503781e-1 : (R < 0.65e1 ? 0.770807212999042590e-1 + R * (-0.115363701862246804e-1) + pow(R - 0.625e1, 2) * (-0.221865735313613423e-2) + pow(R - 0.625e1, 3) * 0.221515394001394403e-1 : (R < 0.675e1 ? 0.575016207722329128e-1 + R * (-0.849228522526660271e-2) + pow(R - 0.65e1, 2) * 0.143949971969684464e-1 + pow(R - 0.65e1, 3) * (-0.111027719996081384e-1) : (R < 0.70e1 ? 0.236966575566851106e-1 + R * (-0.337655637670890556e-2) + pow(R - 0.675e1, 2) * 0.606791819726234215e-2 + pow(R - 0.675e1, 3) * (-0.523303160650687334e-2) : (R < 0.725e1 ? 0.962477661828441480e-2 + R * (-0.132379070429777357e-2) + pow(R - 0.70e1, 2) * 0.214314449238218671e-2 + pow(R - 0.70e1, 3) * (-0.172714162556436785e-2) : (R < 0.75e1 ? 0.431067092352499515e-2 + R * (-0.576057512899999318e-3) + pow(R - 0.725e1, 2) * 0.847788273208910825e-3 + pow(R - 0.725e1, 3) * (-0.656757648035654327e-3) : (R < 0.775e1 ? 0.209775527036671792e-2 + R * (-0.275305435302229044e-3) + pow(R - 0.75e1, 2) * 0.355220037182170107e-3 + pow(R - 0.75e1, 3) * (-0.371705611413015763e-3) : (R < 0.80e1 ? 0.127780569501590455e-2 + R * (-0.167390218851084453e-3) + pow(R - 0.775e1, 2) * 0.764408286224082715e-4 + pow(R - 0.775e1, 3) * 0.120592690167718372e-3 : (R < 0.825e1 ? 0.797815157847464812e-3 + R * (-0.106558675133433105e-3) + pow(R - 0.80e1, 2) * 0.166885346248197051e-3 + pow(R - 0.80e1, 3) * (-0.192370719817858398e-3) : (R < 0.85e1 ? 0.414411103435260086e-3 + R * (-0.591855119751830432e-4) + pow(R - 0.825e1, 2) * 0.226073063848032420e-4 + pow(R - 0.825e1, 3) * 0.100229351343715696e-3 : (R < 0.875e1 ? 0.161568562859595150e-3 + R * (-0.290888554058347274e-4) + pow(R - 0.85e1, 2) * 0.977793198925900106e-4 + pow(R - 0.85e1, 3) * (-0.523403604370043706e-4) : (R < 0.90e1 ? -0.175051668467067088e-3 + R * 0.998698695852195416e-5 + pow(R - 0.875e1, 2) * 0.585240495648367293e-4 + pow(R - 0.875e1, 3) * 0.976706158443018833e-4 : (R < 0.925e1 ? -0.598045199275722182e-3 + R * 0.575622522117469186e-4 + pow(R - 0.90e1, 2) * 0.131777011448063142e-3 + pow(R - 0.90e1, 3) * (-0.302473816220203177e-3) : (R < 0.95e1 ? -0.679400942379036060e-3 + R * 0.667369173944903904e-4 + pow(R - 0.925e1, 2) * (-0.950783507170892408e-4) + pow(R - 0.925e1, 3) * 0.204185024076510761e-3 : (R < 0.100e2 ? -0.594235356527769579e-3 + R * 0.574824340502915344e-4 + pow(R - 0.95e1, 2) * 0.580604173402938302e-4 + pow(R - 0.95e1, 3) * (-0.756553472017537637e-4) : (R < 0.105e2 ? -0.602366239982700499e-3 + R * 0.588013409892700452e-4 + pow(R - 0.100e2, 2) * (-0.554226034623368221e-4) + pow(R - 0.100e2, 3) * 0.152245407275934759e-4 : (R < 0.110e2 ? -0.152274745137597416e-3 + R * 0.147971430726283254e-4 + pow(R - 0.105e2, 2) * (-0.325857923709466074e-4) + pow(R - 0.105e2, 3) * 0.189822204193799144e-4 : (R < 0.120e2 ? 0.437919819426168053e-4 + R * (-0.355198398378334630e-5) + pow(R - 0.110e2, 2) * (-0.411246174187673335e-5) + pow(R - 0.110e2, 3) * 0.270665899266007897e-5 : (R < 0.140e2 ? 0.436455372628788998e-4 + R * (-0.365693048955657523e-5) + pow(R - 0.120e2, 2) * 0.400751523610350400e-5 + pow(R - 0.120e2, 3) * (-0.936698266037608077e-6) : (R < 0.160e2 ? -0.148735324481860016e-4 + R * 0.113275126240614298e-5 + pow(R - 0.140e2, 2) * (-0.161267436012214447e-5) + pow(R - 0.140e2, 3) * 0.396379432959536456e-6 : (R < 0.180e2 ? 0.895311349458795852e-5 + R * (-0.561392982567997415e-6) + pow(R - 0.160e2, 2) * 0.765602237635074270e-6 + pow(R - 0.160e2, 3) * (-0.184178393863037786e-6) : (R < 0.200e2 ? -0.479873274108523055e-5 + R * 0.290875241615846120e-6 + pow(R - 0.180e2, 2) * (-0.339468125543152449e-6) + pow(R - 0.180e2, 3) * 0.685154487176146763e-7 : (R < 0.250e2 ? 0.510526069770775035e-5 + R * (-0.244811875945387507e-6) + pow(R - 0.200e2, 2) * 0.716245667625356222e-7 + pow(R - 0.200e2, 3) * (-0.585394472589162461e-8) : -0.765863553552421734e-6 + R * 0.323879372380968669e-7 + pow(R - 0.250e2, 2) * (-0.161846041258387469e-7) + pow(R - 0.250e2, 3) * 0.168859217724387478e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.6688741722e2 * (R - 0.300e2) * (R - 0.250e2) + 0.7134662220e3 * R + 0.4191572410e5 - 0.3567331110e2 * R * R + 0.75000e3 * (0.1308013474e0 * R - 0.5410408560e1) * R) * pow(R, -6));
}

static double radcoeff_8_2_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.462214341499991768e-3 + R * 0.173472347597680709e-17 + pow(R - 0.475e1, 2) * 0.119490643293348242e0 + pow(R - 0.475e1, 3) * (-0.296119409781392950e0) : (R < 0.525e1 ? -0.178111477933146634e-1 + R * 0.422293231266293242e-2 + pow(R - 0.50e1, 2) * (-0.102598914042696512e0) + pow(R - 0.50e1, 3) * 0.160400839520179112e0 : (R < 0.55e1 ? 0.897102561554216221e-1 + R * (-0.170013672986517386e-1) + pow(R - 0.525e1, 2) * 0.177017155974378317e-1 + pow(R - 0.525e1, 3) * (-0.226231186033235450e-1) : (R < 0.575e1 ? 0.651135003193079043e-1 + R * (-0.123923442380559842e-1) + pow(R - 0.55e1, 2) * 0.734376644945173673e-3 + pow(R - 0.55e1, 3) * 0.182980416131150528e-1 : (R < 0.60e1 ? 0.436063967914648715e-1 + R * (-0.859427311312432538e-2) + pow(R - 0.575e1, 2) * 0.144579078547814634e-1 + pow(R - 0.575e1, 3) * 0.900330696686335065e-2 : (R < 0.625e1 ? -0.885175119831971800e-2 + R * 0.322800870553286400e-3 + pow(R - 0.60e1, 2) * 0.212103880799289768e-1 + pow(R - 0.60e1, 3) * (-0.100729595285684748e-1) : (R < 0.65e1 ? -0.621617052381948990e-1 + R * 0.903931499891118435e-2 + pow(R - 0.625e1, 2) * 0.136556684335026202e-1 + pow(R - 0.625e1, 3) * (-0.336437128845894357e-1) : (R < 0.675e1 ? -0.652115563057128339e-1 + R * 0.955895304980197355e-2 + pow(R - 0.65e1, 2) * (-0.115771162299394582e-1) + pow(R - 0.65e1, 3) * 0.492929234692623692e-2 : (R < 0.70e1 ? -0.330239742276961720e-1 + R * 0.469463724988091434e-2 + pow(R - 0.675e1, 2) * (-0.788014696974478034e-2) + pow(R - 0.675e1, 3) * 0.636618006648449232e-2 : (R < 0.725e1 ? -0.141921087929205679e-1 + R * 0.194822252747436681e-2 + pow(R - 0.70e1, 2) * (-0.310551191988141066e-2) + pow(R - 0.70e1, 3) * 0.224074149913577403e-2 : (R < 0.75e1 ? -0.613971896780673727e-2 + R * 0.815605598621618917e-3 + pow(R - 0.725e1, 2) * (-0.142495579552958003e-2) + pow(R - 0.725e1, 3) * 0.125938658337241606e-2 : (R < 0.775e1 ? -0.263652893924367715e-2 + R * 0.339262685239156980e-3 + pow(R - 0.75e1, 2) * (-0.480415858000267880e-3) + pow(R - 0.75e1, 3) * 0.317957229134559530e-3 : (R < 0.80e1 ? -0.126200699749858566e-2 + R * 0.158671736701752972e-3 + pow(R - 0.775e1, 2) * (-0.241947936149348233e-3) + pow(R - 0.775e1, 3) * 0.279472125689345389e-3 : (R < 0.825e1 ? -0.724178435480648955e-3 + R * 0.900987921938311133e-4 + pow(R - 0.80e1, 2) * (-0.323438418823391769e-4) + pow(R - 0.80e1, 3) * (-0.157420425011941189e-3) : (R < 0.85e1 ? -0.351731552034111115e-3 + R * 0.444105415629225621e-4 + pow(R - 0.825e1, 2) * (-0.150409160641295082e-3) + pow(R - 0.825e1, 3) * 0.229552111958419315e-3 : (R < 0.875e1 ? -0.841551185330684752e-4 + R * 0.122469822344786443e-4 + pow(R - 0.85e1, 2) * 0.217549233275194280e-4 + pow(R - 0.85e1, 3) * (-0.120350839461736043e-3) : (R < 0.90e1 ? 0.175968887423250464e-4 + R * 0.558661499162851864e-6 + pow(R - 0.875e1, 2) * (-0.685082062687826011e-4) + pow(R - 0.875e1, 3) * 0.737748593285247629e-4 : (R < 0.925e1 ? 0.198259711120170480e-3 + R * (-0.198626555111300539e-4) + pow(R - 0.90e1, 2) * (-0.131770617723890289e-4) + pow(R - 0.90e1, 3) * 0.108211992676369779e-4 : (R < 0.95e1 ? 0.239781119215444374e-3 + R * (-0.244222115346426374e-4) + pow(R - 0.925e1, 2) * (-0.506116232166129465e-5) + pow(R - 0.925e1, 3) * 0.214432079209273875e-4 : (R < 0.100e2 ? 0.225644653612844292e-3 + R * (-0.229321912102993979e-4) + pow(R - 0.95e1, 2) * 0.110212436190342476e-4 + pow(R - 0.95e1, 3) * (-0.440260921287090060e-5) : (R < 0.105e2 ? 0.150656771272183261e-3 + R * (-0.152129045009183263e-4) + pow(R - 0.100e2, 2) * 0.441732979972789632e-5 + pow(R - 0.100e2, 3) * 0.118190966362175114e-4 : (R < 0.110e2 ? 0.137811418942866298e-4 + R * (-0.193125222402729813e-5) + pow(R - 0.105e2, 2) * 0.221459747540541643e-4 + pow(R - 0.105e2, 3) * (-0.182690680839991360e-4) : (R < 0.120e2 ? -0.758519085293026419e-4 + R * 0.651292146702751331e-5 + pow(R - 0.110e2, 2) * (-0.525762737194453972e-5) + pow(R - 0.110e2, 3) * 0.147851570691702616e-5 : (R < 0.140e2 ? -0.667452871667414652e-5 + R * 0.433213843889512249e-6 + pow(R - 0.120e2, 2) * (-0.822080251193461555e-6) + pow(R - 0.120e2, 3) * 0.266186174624352665e-6 : (R < 0.160e2 ? -0.651614359451058185e-5 + R * 0.339126934607898753e-6 + pow(R - 0.140e2, 2) * 0.775036796552654754e-6 + pow(R - 0.140e2, 3) * (-0.289682734303302066e-6) : (R < 0.180e2 ? 0.283271723937713990e-6 + R * (-0.369186908211071233e-7) + pow(R - 0.160e2, 2) * (-0.963059609267157640e-6) + pow(R - 0.160e2, 3) * 0.290286217088855585e-6 : (R < 0.200e2 ? 0.539179199982246399e-5 + R * (-0.405722522823470237e-6) + pow(R - 0.180e2, 2) * 0.778657693265975871e-6 + pow(R - 0.180e2, 3) * (-0.163263541752120339e-6) : (R < 0.250e2 ? -0.159090510018997822e-4 + R * 0.749745749214989070e-6 + pow(R - 0.200e2, 2) * (-0.200923557246746191e-6) + pow(R - 0.200e2, 3) * 0.159742929151496710e-7 : 0.134373677710618156e-5 + R * (-0.614178546162472676e-7) + pow(R - 0.250e2, 2) * 0.386908364804989140e-7 + pow(R - 0.250e2, 3) * (-0.417579808504989227e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2925235256e3 * (R - 0.300e2) * (R - 0.250e2) - 0.3120249248e4 * R - 0.1833159035e6 + 0.1560124624e3 * R * R + 0.75000e3 * (-0.572048095e0 * R + 0.2366202212e2) * R) * pow(R, -6));
}

static double radcoeff_8_2_8_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.466834389400000022e-1 + pow(R - 0.475e1, 2) * 0.486999831711896758e0 + pow(R - 0.475e1, 3) * (-0.960733497727586983e0) : (R < 0.525e1 ? -0.348069335520129142e0 + R * 0.633623850320258197e-1 + pow(R - 0.50e1, 2) * (-0.233550291583793479e0) + pow(R - 0.50e1, 3) * 0.361569325182760803e0 : (R < 0.55e1 ? -0.998669971074578611e-1 + R * 0.143814877118967378e-1 + pow(R - 0.525e1, 2) * 0.376267023032771514e-1 + pow(R - 0.525e1, 3) * (-0.881449793234563572e-1) : (R < 0.575e1 ? -0.111466514922129833e0 + R * 0.166676552403872448e-1 + pow(R - 0.55e1, 2) * (-0.284820321893151235e-1) + pow(R - 0.55e1, 3) * 0.631082260310645848e-1 : (R < 0.60e1 ? -0.984132895476871744e-1 + R * 0.142594315265542927e-1 + pow(R - 0.575e1, 2) * 0.188491373339833186e-1 + pow(R - 0.575e1, 3) * (-0.167729481608019371e-1) : (R < 0.625e1 ? -0.135175141100373514e0 + R * 0.205390724133955871e-1 + pow(R - 0.60e1, 2) * 0.626942621338186668e-2 + pow(R - 0.60e1, 3) * (-0.197132934838568780e-1) : (R < 0.65e1 ? -0.131581763288145998e0 + R * 0.199775429918633597e-1 + pow(R - 0.625e1, 2) * (-0.851554389951079092e-2) + pow(R - 0.625e1, 3) * (-0.178823534877705775e-1) : (R < 0.675e1 ? -0.829237605684813583e-1 + R * 0.123668297631509792e-1 + pow(R - 0.65e1, 2) * (-0.219273090153387258e-1) + pow(R - 0.65e1, 3) * 0.167412432429392063e-1 : (R < 0.70e1 ? -0.312161035091458490e-1 + R * 0.454215836353271795e-2 + pow(R - 0.675e1, 2) * (-0.937137658313431932e-2) + pow(R - 0.675e1, 3) * 0.815234385041378393e-2 : (R < 0.725e1 ? -0.957456743562700059e-2 + R * 0.138503454391814300e-2 + pow(R - 0.70e1, 2) * (-0.325711869532398050e-2) + pow(R - 0.70e1, 3) * 0.277243463540563159e-2 : (R < 0.75e1 ? -0.169654112486163815e-2 + R * 0.276306690394708722e-3 + pow(R - 0.725e1, 2) * (-0.117779271876975659e-2) + pow(R - 0.725e1, 3) * 0.115133390876368609e-2 : (R < 0.775e1 ? 0.104549580872733772e-2 + R * (-0.967145610969783782e-4) + pow(R - 0.75e1, 2) * (-0.314292287196991915e-3) + pow(R - 0.75e1, 3) * 0.382911035139621675e-3 : (R < 0.80e1 ? 0.169330054065266328e-2 + R * (-0.182064885606795265e-3) + pow(R - 0.775e1, 2) * (-0.271090108422756458e-4) + pow(R - 0.775e1, 3) * 0.132095838677827071e-3 : (R < 0.825e1 ? 0.160396251030672419e-2 + R * (-0.170851421275840514e-3) + pow(R - 0.80e1, 2) * 0.719628681660946644e-4 + pow(R - 0.80e1, 3) * (-0.160089839450930349e-3) : (R < 0.85e1 ? 0.155675092504120160e-2 + R * (-0.164886832089842605e-3) + pow(R - 0.825e1, 2) * (-0.481045114221031111e-4) + pow(R - 0.825e1, 3) * 0.179520498325894346e-3 : (R < 0.875e1 ? 0.147488278020070640e-2 + R * (-0.155278994364788981e-3) + pow(R - 0.85e1, 2) * 0.865358623223176751e-4 + pow(R - 0.85e1, 3) * (-0.928526978526470864e-4) : (R < 0.90e1 ? 0.125258250794626309e-2 + R * (-0.129420944051001480e-3) + pow(R - 0.875e1, 2) * 0.168963389328323535e-4 + pow(R - 0.875e1, 3) * (-0.977116256353058234e-4) : (R < 0.925e1 ? 0.134096662804084618e-2 + R * (-0.139293704391205137e-3) + pow(R - 0.90e1, 2) * (-0.563873802936470174e-4) + pow(R - 0.90e1, 3) * 0.275709892233870404e-3 : (R < 0.95e1 ? 0.112435767335364615e-2 + R * (-0.115791789744177948e-3) + pow(R - 0.925e1, 2) * 0.150395038881755779e-3 + pow(R - 0.925e1, 3) * (-0.182399257860175730e-3) : (R < 0.100e2 ? 0.741429618254788774e-3 + R * (-0.747941311520830250e-4) + pow(R - 0.95e1, 2) * 0.135955954866239573e-4 + pow(R - 0.95e1, 3) * 0.318733434750841744e-4 : (R < 0.105e2 ? 0.373806654127359394e-3 + R * (-0.372935280591459403e-4) + pow(R - 0.100e2, 2) * 0.614056106992502156e-4 + pow(R - 0.100e2, 3) * (-0.336787621779166714e-4) : (R < 0.110e2 ? 0.540955133899893743e-5 + R * (-0.114698899333323205e-5) + pow(R - 0.105e2, 2) * 0.108874674323752017e-4 + pow(R - 0.105e2, 3) * (-0.668241880341747404e-5) : (R < 0.120e2 ? -0.573360707812674994e-4 + R * 0.472866433647886367e-5 + pow(R - 0.110e2, 2) * 0.863839227248990298e-6 + pow(R - 0.110e2, 3) * (-0.114875163372785404e-5) : (R < 0.140e2 ? -0.369980658274193759e-4 + R * 0.301008788979328129e-5 + pow(R - 0.120e2, 2) * (-0.258241567393457215e-5) + pow(R - 0.120e2, 3) * 0.616996973331465708e-6 : (R < 0.160e2 ? -0.143196651585613663e-5 + R * 0.843888740325811968e-7 + pow(R - 0.140e2, 2) * 0.111956616605422189e-5 + pow(R - 0.140e2, 3) * (-0.329823822160256217e-6) : (R < 0.180e2 ? -0.791835320122229896e-5 + R * 0.604767672326393724e-6 + pow(R - 0.160e2, 2) * (-0.859376766907315625e-6) + pow(R - 0.160e2, 3) * 0.185672236372059387e-6 : (R < 0.200e2 ? 0.118994417830868103e-4 + R * (-0.604672558838156137e-6) + pow(R - 0.180e2, 2) * 0.254656651325040747e-6 + pow(R - 0.180e2, 3) * (-0.423731069154813545e-7) : (R < 0.250e2 ? 0.237609708677538690e-5 + R * (-0.945232365237693489e-7) + pow(R - 0.200e2, 2) * 0.418009832152607475e-9 + pow(R - 0.200e2, 3) * 0.627024699320252773e-9 : 0.118475165073060808e-5 + R * (-0.433162857532243300e-7) + pow(R - 0.250e2, 2) * 0.982338032195639777e-8 + pow(R - 0.250e2, 3) * (-0.819397238262306524e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1554023540e3 * (R - 0.300e2) * (R - 0.250e2) + 0.1657625832e4 * R + 0.9738549688e5 - 0.8288129160e2 * R * R + 0.75000e3 * (0.3038980297e0 * R - 0.1257032705e2) * R) * pow(R, -6));
}

static double radcoeff_8_2_8_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.429187422599999965e-1 + pow(R - 0.475e1, 2) * (-0.541188835095258836e0) + pow(R - 0.475e1, 3) * 0.108315870998103536e1 : (R < 0.525e1 ? 0.363529592040926441e0 + R * (-0.675021594261852875e-1) + pow(R - 0.50e1, 2) * 0.271180197390517685e0 + pow(R - 0.50e1, 3) * (-0.406335854743106073e0) : (R < 0.55e1 ? 0.622681955101088910e-1 + R * (-0.810003349525883695e-2) + pow(R - 0.525e1, 2) * (-0.335716936668118762e-1) + pow(R - 0.525e1, 3) * 0.732326117113889091e-1 : (R < 0.575e1 ? 0.781152509702864595e-1 + R * (-0.111547656327793555e-1) + pow(R - 0.55e1, 2) * 0.213527651167298056e-1 + pow(R - 0.55e1, 3) * (-0.380433543424495146e-1) : (R < 0.60e1 ? 0.584816630683364994e-1 + R * (-0.761151201362373839e-2) + pow(R - 0.575e1, 2) * (-0.717975064010733036e-2) + pow(R - 0.575e1, 3) * (-0.648232714159087137e-2) : (R < 0.625e1 ? 0.867635122463541603e-1 + R * (-0.124168236727256933e-1) + pow(R - 0.60e1, 2) * (-0.120414959963004841e-1) + pow(R - 0.60e1, 3) * 0.665801222081300638e-2 : (R < 0.65e1 ? 0.115942267104709354e0 + R * (-0.171891943794734957e-1) + pow(R - 0.625e1, 2) * (-0.704798683069072888e-2) + pow(R - 0.625e1, 3) * 0.326507964663388245e-1 : (R < 0.675e1 ? 0.991247356289721437e-1 + R * (-0.145911634573803288e-1) + pow(R - 0.65e1, 2) * 0.174401105190633912e-1 + pow(R - 0.65e1, 3) * (-0.702850330216830445e-2) : (R < 0.70e1 ? 0.501399986622850374e-1 + R * (-0.718895256700519125e-2) + pow(R - 0.675e1, 2) * 0.121687330424371624e-1 + pow(R - 0.675e1, 3) * (-0.922897922566558691e-2) : (R < 0.725e1 ? 0.202788112618923558e-1 + R * (-0.283501965059890833e-2) + pow(R - 0.70e1, 2) * 0.524699862318797183e-2 + pow(R - 0.70e1, 3) * (-0.400256380796935526e-2) : (R < 0.75e1 ? 0.696482378371402963e-2 + R * (-0.962001052999176425e-3) + pow(R - 0.725e1, 2) * 0.224507576721095538e-2 + pow(R - 0.725e1, 3) * (-0.202723326725699846e-2) : (R < 0.775e1 ? 0.150522815443289437e-2 + R * (-0.219569407004385921e-3) + pow(R - 0.75e1, 2) * 0.724650816768206531e-3 + pow(R - 0.75e1, 3) * (-0.663221151802651150e-3) : (R < 0.80e1 ? -0.304122678779581899e-3 + R * 0.184020354167202472e-4 + pow(R - 0.775e1, 2) * 0.227234952916218142e-3 + pow(R - 0.775e1, 3) * (-0.184006912732396675e-3) : (R < 0.825e1 ? -0.925725044800039618e-3 + R * 0.975182157375049517e-4 + pow(R - 0.80e1, 2) * 0.892297683669206356e-4 + pow(R - 0.80e1, 3) * (-0.160340592467761564e-3) : (R < 0.85e1 ? -0.104269944657439466e-2 + R * 0.112069238833259973e-3 + pow(R - 0.825e1, 2) * (-0.310256759839005374e-4) + pow(R - 0.825e1, 3) * 0.124143213483442655e-3 : (R < 0.875e1 ? -0.110869293717036940e-2 + R * 0.119833253369455207e-3 + pow(R - 0.85e1, 2) * 0.620817341286814607e-4 + pow(R - 0.85e1, 3) * (-0.253919978586009012e-3) : (R < 0.90e1 ? -0.963800450398043305e-3 + R * 0.103264124448919234e-3 + pow(R - 0.875e1, 2) * (-0.128358249810825339e-3) + pow(R - 0.875e1, 3) * 0.720814106205935608e-4 : (R < 0.925e1 ? -0.514721825243810672e-3 + R * 0.526002640348678538e-4 + pow(R - 0.90e1, 2) * (-0.742971918453801686e-4) + pow(R - 0.90e1, 3) * 0.173104456423634932e-3 : (R < 0.95e1 ? -0.473264171927386269e-3 + R * 0.479087536916093294e-4 + pow(R - 0.925e1, 2) * 0.555311504723460573e-4 + pow(R - 0.925e1, 3) * (-0.151631963355133403e-3) : (R < 0.100e2 ? -0.465841254467600895e-3 + R * 0.472433357986948348e-4 + pow(R - 0.95e1, 2) * (-0.581928220440040085e-4) + pow(R - 0.95e1, 3) * 0.259926688132286672e-4 : (R < 0.105e2 ? -0.901571720391233149e-4 + R * 0.854501536461233173e-5 + pow(R - 0.100e2, 2) * (-0.192038188241610112e-4) + pow(R - 0.100e2, 3) * 0.157334686218726978e-4 : (R < 0.110e2 ? -0.152524109109863595e-4 + R * 0.114129800685584373e-5 + pow(R - 0.105e2, 2) * 0.439638410864803644e-5 + pow(R - 0.105e2, 3) * (-0.636478204471944788e-5) : (R < 0.120e2 ? -0.107996859656072328e-4 + R * 0.764095581964293837e-6 + pow(R - 0.110e2, 2) * (-0.515078895843113538e-5) + pow(R - 0.110e2, 3) * 0.257332747646684107e-5 : (R < 0.140e2 ? 0.176019984019694392e-4 + R * (-0.181749990549745328e-5) + pow(R - 0.120e2, 2) * 0.256919347096938784e-5 + pow(R - 0.120e2, 3) * (-0.523512773735330485e-6) : (R < 0.160e2 ? -0.322340182907858341e-4 + R * 0.217712069355613121e-5 + pow(R - 0.140e2, 2) * (-0.571883171442595703e-6) + pow(R - 0.140e2, 3) * 0.132663315822650501e-7 : (R < 0.180e2 ? -0.362033014866868177e-6 + R * 0.487839867729292615e-7 + pow(R - 0.160e2, 2) * (-0.492285181949005403e-6) + pow(R - 0.160e2, 3) * 0.135820569831270360e-6 : (R < 0.200e2 ? 0.486268083276126236e-5 + R * (-0.290509903047847876e-6) + pow(R - 0.180e2, 2) * 0.322638237038616808e-6 + pow(R - 0.180e2, 3) * (-0.647904677198464237e-7) : (R < 0.250e2 ? -0.462643667116924313e-5 + R * 0.222557432468462164e-6 + pow(R - 0.200e2, 2) * (-0.661045692804617610e-7) + pow(R - 0.200e2, 3) * 0.542684547095386541e-8 : 0.750111842765388603e-6 + R * (-0.314748500146155410e-7) + pow(R - 0.250e2, 2) * 0.152981127838462168e-7 + pow(R - 0.250e2, 3) * (-0.158862369458462180e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.5609216698e2 * (R - 0.300e2) * (R - 0.250e2) - 0.5983198476e3 * R - 0.3515012564e5 + 0.2991599238e2 * R * R + 0.75000e3 * (-0.1096897522e0 * R + 0.4537136751e1) * R) * pow(R, -6));
}

static double radcoeff_8_2_9_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.119043732700000009e-1 + pow(R - 0.475e1, 2) * (-0.897025834470339262e-1) + pow(R - 0.475e1, 3) * 0.160061889692135667e0 : (R < 0.525e1 ? 0.829973658622076005e-1 + R * (-0.148396874062415203e-1) + pow(R - 0.50e1, 2) * 0.303438338220678380e-1 + pow(R - 0.50e1, 3) * (-0.414473567564070250e-1) : (R < 0.55e1 ? 0.453934185509280858e-1 + R * (-0.743914988703392021e-2) + pow(R - 0.525e1, 2) * (-0.741683745237430611e-3) + pow(R - 0.525e1, 3) * 0.942253931749243746e-2 : (R < 0.575e1 ? 0.378169271219254213e-1 + R * (-0.604326563762280344e-2) + pow(R - 0.55e1, 2) * 0.632522074288189781e-2 + pow(R - 0.55e1, 3) * (-0.573746675356273834e-2) : (R < 0.60e1 ? 0.261233022082304929e-1 + R * (-0.395643028247486851e-2) + pow(R - 0.575e1, 2) * 0.202212067770984362e-2 + pow(R - 0.575e1, 3) * (-0.472063663241483107e-3) : (R < 0.625e1 ? 0.207070183438663492e-1 + R * (-0.303388188047772457e-2) + pow(R - 0.60e1, 2) * 0.166807293027873126e-2 + pow(R - 0.60e1, 3) * (-0.102070272147133110e-2) : (R < 0.65e1 ? 0.167787325165889602e-1 + R * (-0.239122717561423333e-2) + pow(R - 0.625e1, 2) * 0.902545889175232941e-3 + pow(R - 0.625e1, 3) * 0.245169397126796776e-3 : (R < 0.675e1 ? 0.136068980639247258e-1 + R * (-0.189398496906534233e-2) + pow(R - 0.65e1, 2) * 0.108642293702033055e-2 + pow(R - 0.65e1, 3) * (-0.152030195035841826e-3) : (R < 0.70e1 ? 0.101981598288396827e-1 + R * (-0.137927916212439742e-2) + pow(R - 0.675e1, 2) * 0.972400290743449173e-3 + pow(R - 0.675e1, 3) * (-0.475511426583440197e-3) : (R < 0.725e1 ? 0.747221271075947449e-2 + R * (-0.982237409237067798e-3) + pow(R - 0.70e1, 2) * 0.615766720805868998e-3 + pow(R - 0.70e1, 3) * (-0.107438850630392279e-3) : (R < 0.75e1 ? 0.542291472342315648e-2 + R * (-0.694498833327331826e-3) + pow(R - 0.725e1, 2) * 0.535187582833074782e-3 + pow(R - 0.725e1, 3) * (-0.239018297294989971e-3) : (R < 0.775e1 ? 0.378179533140203701e-2 + R * (-0.471720972653604973e-3) + pow(R - 0.75e1, 2) * 0.355923859861832304e-3 + pow(R - 0.75e1, 3) * (-0.994891697896496208e-4) : (R < 0.80e1 ? 0.256785129725142303e-2 + R * (-0.312413262058248140e-3) + pow(R - 0.775e1, 2) * 0.281306982519595081e-3 + pow(R - 0.775e1, 3) * (-0.982473595464104224e-4) : (R < 0.825e1 ? 0.160604097790722068e-2 + R * (-0.190181150713402574e-3) + pow(R - 0.80e1, 2) * 0.207621462859787265e-3 + pow(R - 0.80e1, 3) * (-0.162681728024708034e-3) : (R < 0.85e1 ? 0.101168518107716912e-2 + R * (-0.116873243288141698e-3) + pow(R - 0.825e1, 2) * 0.856101668412562259e-4 + pow(R - 0.825e1, 3) * 0.897062748524207756e-5 : (R < 0.875e1 ? 0.639035835929260853e-3 + R * (-0.723861672140306886e-4) + pow(R - 0.85e1, 2) * 0.923381374551877850e-4 + pow(R - 0.85e1, 3) * (-0.118177046236260036e-3) : (R < 0.90e1 ? 0.432865318282686065e-3 + R * (-0.483752946557355513e-4) + pow(R - 0.875e1, 2) * 0.370535277799274616e-5 + pow(R - 0.875e1, 3) * 0.922775555397978774e-4 : (R < 0.925e1 ? 0.262146277160043716e-3 + R * (-0.292205766030270790e-4) + pow(R - 0.90e1, 2) * 0.729135194328411657e-4 + pow(R - 0.90e1, 3) * (-0.724435825149314299e-4) : (R < 0.95e1 ? 0.539907521954442944e-4 + R * (-0.634698860815614008e-5) + pow(R - 0.925e1, 2) * 0.185808325466425898e-4 + pow(R - 0.925e1, 3) * (-0.269197203280721240e-4) : (R < 0.100e2 ? 0.144232308373095001e-4 + R * (-0.210401989634836841e-5) + pow(R - 0.95e1, 2) * (-0.160895769941150443e-5) + pow(R - 0.95e1, 3) * 0.469804499221648161e-5 : (R < 0.105e2 ? -0.453751341102489580e-5 + R * (-0.189443851597510356e-6) + pow(R - 0.100e2, 2) * 0.543810978891321842e-5 + pow(R - 0.100e2, 3) * 0.186997044456360665e-5 : (R < 0.110e2 ? -0.747704096927533324e-4 + R * 0.665114377073841273e-5 + pow(R - 0.105e2, 2) * 0.824306545575862860e-5 + pow(R - 0.105e2, 3) * (-0.148502639144709081e-4) : (R < 0.120e2 ? -0.427249690370824623e-4 + R * 0.375651129064386027e-5 + pow(R - 0.110e2, 2) * (-0.140323304159477344e-4) + pow(R - 0.110e2, 3) * 0.663640924530387315e-5 : (R < 0.140e2 ? 0.477443069440798424e-4 + R * (-0.439892180533998689e-5) + pow(R - 0.120e2, 2) * 0.587689731996388593e-5 + pow(R - 0.120e2, 3) * (-0.128290228752194590e-5) : (R < 0.160e2 ? -0.525899876903308566e-4 + R * 0.371384002425220390e-5 + pow(R - 0.140e2, 2) * (-0.182051640516779033e-5) + pow(R - 0.140e2, 3) * 0.234600701770844132e-6 : (R < 0.180e2 ? 0.134744674937012366e-4 + R * (-0.753017175168827297e-6) + pow(R - 0.160e2, 2) * (-0.412912194542725483e-6) + pow(R - 0.160e2, 3) * 0.157375764438569556e-6 : (R < 0.200e2 ? 0.881833771908410026e-5 + R * (-0.516156780076894449e-6) + pow(R - 0.180e2, 2) * 0.531342392088691801e-6 + pow(R - 0.180e2, 3) * (-0.105820208962622283e-6) : (R < 0.250e2 ? -0.701339560032810645e-5 + R * 0.339370280726405302e-6 + pow(R - 0.200e2, 2) * (-0.103578861687041873e-6) + pow(R - 0.200e2, 3) * 0.856972930195216085e-8 : 0.129482200084003375e-5 + R * (-0.536886384976013457e-7) + pow(R - 0.250e2, 2) * 0.249670778422405366e-7 + pow(R - 0.250e2, 3) * (-0.257253286214405373e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.7231679546e2 * (R - 0.300e2) * (R - 0.250e2) - 0.7713770768e3 * R - 0.4531887670e5 + 0.3856885384e2 * R * R + 0.75000e3 * (-0.1414200323e0 * R + 0.5849659092e1) * R) * pow(R, -6));
}

static double radcoeff_8_2_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.420083361900000021e-1 + R * (-0.650521303491302660e-18) + pow(R - 0.475e1, 2) * (-0.865934265272389897e-1) + pow(R - 0.475e1, 3) * 0.320237978748955987e0 : (R < 0.525e1 ? -0.126156245689048763e0 + R * 0.167479077518097527e-1 + pow(R - 0.50e1, 2) * 0.153585057534477987e0 + pow(R - 0.50e1, 3) * (-0.285273823606867982e0) : (R < 0.55e1 ? -0.243358939001995206e0 + R * 0.400515945927609890e-1 + pow(R - 0.525e1, 2) * (-0.603703101706730139e-1) + pow(R - 0.525e1, 3) * 0.931845227185161828e-1 : (R < 0.575e1 ? -0.175754261304304493e0 + R * 0.273385375171462733e-1 + pow(R - 0.55e1, 2) * 0.951808186821412501e-2 + pow(R - 0.55e1, 3) * (-0.817486506271968699e-1) : (R < 0.60e1 ? -0.115665925267260036e0 + R * 0.167697064586539192e-1 + pow(R - 0.575e1, 2) * (-0.517934061021835326e-1) + pow(R - 0.575e1, 3) * 0.506453437902714132e-1 : (R < 0.625e1 ? -0.197074731094282578e-1 + R * 0.369005368238042863e-3 + pow(R - 0.60e1, 2) * (-0.138093982594799727e-1) + pow(R - 0.60e1, 3) * 0.297309893861112014e-1 : (R < 0.65e1 ? -0.117926474174619156e-1 + R * (-0.961133251606093465e-3) + pow(R - 0.625e1, 2) * 0.848884378010343089e-2 + pow(R - 0.625e1, 3) * 0.216517060252837748e-1 : (R < 0.675e1 ? -0.649005457782111522e-1 + R * 0.734298351818633149e-2 + pow(R - 0.65e1, 2) * 0.247276232990662655e-1 + pow(R - 0.65e1, 3) * (-0.290263875672463617e-1) : (R < 0.70e1 ? -0.110527813497310209e0 + R * 0.142643474988607723e-1 + pow(R - 0.675e1, 2) * 0.295783262363149462e-2 + pow(R - 0.675e1, 3) * (-0.112291976762983539e-1) : (R < 0.725e1 ? -0.106132497404594045e0 + R * 0.136377892463705776e-1 + pow(R - 0.70e1, 2) * (-0.546406563359227125e-2) + pow(R - 0.70e1, 3) * (-0.992172511560153545e-3) : (R < 0.75e1 ? -0.853335317725126136e-1 + R * 0.107197240836569129e-1 + pow(R - 0.725e1, 2) * (-0.620819501726238652e-2) + pow(R - 0.725e1, 3) * 0.109984042653894646e-2 : (R < 0.775e1 ? -0.639702782395132896e-1 + R * 0.782184665500177193e-2 + pow(R - 0.75e1, 2) * (-0.538331469735817657e-2) + pow(R - 0.75e1, 3) * 0.193256722140435150e-2 : (R < 0.80e1 ? -0.462244563366039987e-1 + R * 0.549254566033600001e-2 + pow(R - 0.775e1, 2) * (-0.393388928130491283e-2) + pow(R - 0.775e1, 3) * 0.144877273584364911e-2 : (R < 0.825e1 ? -0.328852893212338224e-1 + R * 0.379724590765422769e-2 + pow(R - 0.80e1, 2) * (-0.284730972942217600e-2) + pow(R - 0.80e1, 3) * 0.124737786722105585e-2 : (R < 0.85e1 ? -0.232281409046384765e-1 + R * 0.260747439304708775e-2 + pow(R - 0.825e1, 2) * (-0.191177632900638400e-2) + pow(R - 0.825e1, 3) * 0.807540819272134329e-3 : (R < 0.875e1 ? -0.164969778823380771e-1 + R * 0.180300013215742077e-2 + pow(R - 0.85e1, 2) * (-0.130612071455228325e-2) + pow(R - 0.85e1, 3) * 0.506290708490398462e-3 : (R < 0.90e1 ? -0.116870547021282554e-1 + R * 0.124486928272322917e-2 + pow(R - 0.875e1, 2) * (-0.926402683184484352e-3) + pow(R - 0.875e1, 3) * 0.413551617166271767e-3 : (R < 0.925e1 ? -0.826754940544696670e-2 + R * 0.859208869349662981e-3 + pow(R - 0.90e1, 2) * (-0.616238970309780512e-3) + pow(R - 0.90e1, 3) * 0.177357869244513692e-3 : (R < 0.95e1 ? -0.576079294117260061e-2 + R * 0.584343984678118962e-3 + pow(R - 0.925e1, 2) * (-0.483220568376395237e-3) + pow(R - 0.925e1, 3) * 0.198894653055676753e-3 : (R < 0.100e2 ? -0.384686989870967715e-2 + R * 0.380026447937860737e-3 + pow(R - 0.95e1, 2) * (-0.334049578584637665e-3) + pow(R - 0.95e1, 3) * 0.143800931017832407e-3 : (R < 0.105e2 ? -0.165041837376597397e-2 + R * 0.153827567616597377e-3 + pow(R - 0.100e2, 2) * (-0.118348182057889027e-3) + pow(R - 0.100e2, 3) * 0.355501880493885034e-4 : (R < 0.110e2 ? -0.712863465055372245e-3 + R * 0.621420265957497341e-4 + pow(R - 0.105e2, 2) * (-0.650228999838062721e-4) + pow(R - 0.105e2, 3) * 0.416168553446135740e-4 : (R < 0.120e2 ? -0.352004239904440172e-3 + R * 0.283317681204036509e-4 + pow(R - 0.110e2, 2) * (-0.259761696688590651e-5) + pow(R - 0.110e2, 3) * (-0.175591800351774230e-5) : (R < 0.140e2 ? -0.230801919542943324e-3 + R * 0.178687801760786097e-4 + pow(R - 0.120e2, 2) * (-0.786537097743913340e-5) + pow(R - 0.120e2, 3) * 0.111745329469991399e-5 : (R < 0.160e2 ? -0.595155863094621116e-6 + R * (-0.183264197278955629e-6) + pow(R - 0.140e2, 2) * (-0.116065120923964860e-5) + pow(R - 0.140e2, 3) * 0.502062903689563202e-6 : (R < 0.180e2 ? -0.233356575875953376e-4 + R * 0.119888581003720852e-5 + pow(R - 0.160e2, 2) * 0.185172621289773062e-5 + pow(R - 0.160e2, 3) * (-0.577157082583167273e-6) : (R < 0.200e2 ? -0.292043668873422201e-4 + R * 0.167990567063012330e-5 + pow(R - 0.180e2, 2) * (-0.161121628260127323e-5) + pow(R - 0.180e2, 3) * 0.318204805930605814e-6 : (R < 0.250e2 ? 0.194245556144540008e-4 + R * (-0.946501788607699962e-6) + pow(R - 0.200e2, 2) * 0.298012552982361653e-6 + pow(R - 0.200e2, 3) * (-0.248689424977643350e-7) : -0.410761943548979061e-5 + R * 0.168453053883591617e-6 + pow(R - 0.250e2, 2) * (-0.750215844841033058e-7) + pow(R - 0.250e2, 3) * 0.766808027907699616e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1582463496e3 * (R - 0.300e2) * (R - 0.250e2) + 0.1687964816e4 * R + 0.9916652580e5 - 0.8439824080e2 * R * R + 0.75000e3 * (0.3094575367e0 * R - 0.1280025246e2) * R) * pow(R, -6));
}

static double radcoeff_8_2_10_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.597534633999999981e-1 + pow(R - 0.475e1, 2) * (-0.807190844955271436e-1) + pow(R - 0.475e1, 3) * (-0.277535992978915069e-1) : (R < 0.525e1 ? 0.282091581210591191e0 + R * (-0.455633421161182328e-1) + pow(R - 0.50e1, 2) * (-0.101534283968945774e0) + pow(R - 0.50e1, 3) * 0.192390655173674846e0 : (R < 0.55e1 ? 0.355894736681517165e0 + R * (-0.602572362555270843e-1) + pow(R - 0.525e1, 2) * 0.427587074113103538e-1 + pow(R - 0.525e1, 3) * (-0.237270290768080080e-1) : (R < 0.575e1 ? 0.265078474419753740e0 + R * (-0.433267005017734103e-1) + pow(R - 0.55e1, 2) * 0.249634356037043460e-1 + pow(R - 0.55e1, 3) * 0.118958745735572163e-1 : (R < 0.60e1 ? 0.182229445049930744e0 + R * (-0.286145062173792583e-1) + pow(R - 0.575e1, 2) * 0.338853415338722583e-1 + pow(R - 0.575e1, 3) * (-0.279773897742086964e-2) : (R < 0.625e1 ? 0.857949959722572458e-1 + R * (-0.121964115087095423e-1) + pow(R - 0.60e1, 2) * 0.317870373008066059e-1 + pow(R - 0.60e1, 3) * (-0.176860501838737375e-1) : (R < 0.65e1 ? 0.889668976364103511e-2 + R * 0.380972732217434292e-3 + pow(R - 0.625e1, 2) * 0.185224996629013011e-1 + pow(R - 0.625e1, 3) * (-0.472481358070841531e-1) : (R < 0.675e1 ? 0.670163548104126157e-2 + R * 0.783197099839805927e-3 + pow(R - 0.65e1, 2) * (-0.169136021924118155e-1) + pow(R - 0.65e1, 3) * 0.809225741221037027e-2 : (R < 0.70e1 ? 0.526126209781424409e-1 + R * (-0.615630573157665770e-2) + pow(R - 0.675e1, 2) * (-0.108444091332540373e-1) + pow(R - 0.675e1, 3) * 0.135167936462426592e-1 : (R < 0.725e1 ? 0.723606856137322396e-1 + R * (-0.904411148953317666e-2) + pow(R - 0.70e1, 2) * (-0.706813898572041682e-3) + pow(R - 0.70e1, 3) * 0.504198797081900889e-2 : (R < 0.75e1 ? 0.681035387916071044e-1 + R * (-0.845214569429063485e-2) + pow(R - 0.725e1, 2) * 0.307467707954221531e-2 + pow(R - 0.725e1, 3) * 0.113334490248129813e-2 : (R < 0.775e1 ? 0.551896093057821155e-1 + R * (-0.670230498530428268e-2) + pow(R - 0.75e1, 2) * 0.392468575640318902e-2 + pow(R - 0.75e1, 3) * (-0.967075036744233273e-3) : (R < 0.80e1 ? 0.416169152248147961e-1 + R * (-0.492128867649223138e-2) + pow(R - 0.775e1, 2) * 0.319937947884501401e-2 + pow(R - 0.775e1, 3) * (-0.863055827504354044e-3) : (R < 0.825e1 ? 0.303004570208143323e-1 + R * (-0.348342190472679131e-2) + pow(R - 0.80e1, 2) * 0.255208760821674843e-2 + pow(R - 0.80e1, 3) * (-0.122491202123833258e-2) : (R < 0.85e1 ? 0.218082476449549846e-1 + R * (-0.243704910460060438e-2) + pow(R - 0.825e1, 2) * 0.163340359228799888e-2 + pow(R - 0.825e1, 3) * (-0.392004567542326662e-3) : (R < 0.875e1 ? 0.155870023104017243e-1 + R * (-0.169384816487079103e-2) + pow(R - 0.85e1, 2) * 0.133940016663125386e-2 + pow(R - 0.85e1, 3) * (-0.746772300592356817e-3) : (R < 0.90e1 ? 0.110243440802670241e-1 + R * (-0.116416788791623123e-2) + pow(R - 0.875e1, 2) * 0.779320941186986216e-3 + pow(R - 0.875e1, 3) * (-0.212539298888247356e-3) : (R < 0.925e1 ? 0.792144654407856037e-2 + R * (-0.814358535864284422e-3) + pow(R - 0.90e1, 2) * 0.619916467020800699e-3 + pow(R - 0.90e1, 3) * (-0.322901876654652087e-3) : (R < 0.95e1 ? 0.564806526379634053e-2 + R * (-0.564944404226631392e-3) + pow(R - 0.925e1, 2) * 0.377740059529811634e-3 + pow(R - 0.925e1, 3) * (-0.100343671293144469e-3) : (R < 0.100e2 ? 0.405457802937730580e-2 + R * (-0.394888812829190109e-3) + pow(R - 0.95e1, 2) * 0.302482306059953282e-3 + pow(R - 0.95e1, 3) * (-0.132718813603146103e-3) : (R < 0.105e2 ? 0.208417679561596425e-2 + R * (-0.191945616971596431e-3) + pow(R - 0.100e2, 2) * 0.103404085655234100e-3 + pow(R - 0.100e2, 3) * (-0.200572197440824591e-4) : (R < 0.110e2 ? 0.117972837066645402e-2 + R * (-0.103584446124424190e-3) + pow(R - 0.105e2, 2) * 0.733182560391104101e-4 + pow(R - 0.105e2, 3) * (-0.311526180605240207e-4) : (R < 0.120e2 ? 0.644672139987774733e-3 + R * (-0.536306536307067967e-4) + pow(R - 0.110e2, 2) * 0.265893289483243722e-4 + pow(R - 0.110e2, 3) * (-0.649864148761757359e-5) : (R < 0.140e2 ? 0.260570026242929278e-3 + R * (-0.199479201969107731e-4) + pow(R - 0.120e2, 2) * 0.709340448547165229e-5 + pow(R - 0.120e2, 3) * (-0.884651209758132302e-6) : (R < 0.160e2 ? 0.332571865637045454e-4 + R * (-0.219011677212175364e-5) + pow(R - 0.140e2, 2) * 0.178549722692285806e-5 + pow(R - 0.140e2, 3) * (-0.430913076055990598e-6) : (R < 0.180e2 ? 0.541535894263533590e-5 + R * (-0.219084777102208492e-6) + pow(R - 0.160e2, 2) * (-0.799981229413085533e-6) + pow(R - 0.160e2, 3) * 0.226075432982094888e-6 : (R < 0.200e2 ? 0.127903924823494138e-4 + R * (-0.706104498969411858e-6) + pow(R - 0.180e2, 2) * 0.556471368479483744e-6 + pow(R - 0.180e2, 3) * (-0.106959328272388905e-6) : (R < 0.250e2 ? -0.468686736289712642e-5 + R * 0.236269035679856309e-6 + pow(R - 0.200e2, 2) * (-0.852846011548497005e-7) + pow(R - 0.200e2, 3) * 0.736267337577568863e-8 : 0.161748948933660143e-5 + R * (-0.643764726854640580e-7) + pow(R - 0.250e2, 2) * 0.251554994817856265e-7 + pow(R - 0.250e2, 3) * (-0.250262730413856290e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1232427222e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1314571512e3 * R + 0.7723915004e4 - 0.6572857560e1 * R * R + 0.75000e3 * (0.2410201554e-1 * R - 0.996967976e0) * R) * pow(R, -6));
}

static double radcoeff_8_4_4_3_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.407522816900000016e-3 + pow(R - 0.475e1, 2) * (-0.677973732537676954e-1) + pow(R - 0.475e1, 3) * 0.144210111383070771e0 : (R < 0.525e1 ? 0.327199236917903868e-1 + R * (-0.685929074255807805e-2) + pow(R - 0.50e1, 2) * 0.403602102835353832e-1 + pow(R - 0.50e1, 3) * (-0.559872848692122907e-1) : (R < 0.55e1 ? -0.164654329427196267e-1 + R * 0.282319848623230991e-2 + pow(R - 0.525e1, 2) * (-0.163025336837383330e-2) + pow(R - 0.525e1, 3) * 0.104387585961783717e-1 : (R < 0.575e1 ? -0.226859912144586062e-1 + R * 0.396533903882883773e-2 + pow(R - 0.55e1, 2) * 0.619881557875994610e-2 + pow(R - 0.55e1, 3) * (-0.132210057203011912e-1) : (R < 0.60e1 ? -0.260728414521009394e-1 + R * 0.458580825565233722e-2 + pow(R - 0.575e1, 2) * (-0.371693871146594901e-2) + pow(R - 0.575e1, 3) * (-0.544522114217360371e-2) : (R < 0.625e1 ? -0.911354178257087373e-2 + R * 0.170635993576181240e-2 + pow(R - 0.60e1, 2) * (-0.780085456809615201e-2) + pow(R - 0.60e1, 3) * 0.340457520419560917e-2 : (R < 0.65e1 ? 0.108400352523724177e-1 + R * (-0.155570949749958684e-2) + pow(R - 0.625e1, 2) * (-0.524742316494944492e-2) + pow(R - 0.625e1, 3) * 0.111393665205911669e-1 : (R < 0.675e1 ? 0.141641462455625224e-1 + R * (-0.209078985736346496e-2) + pow(R - 0.65e1, 2) * 0.310710172549393112e-2 + pow(R - 0.65e1, 3) * (-0.180703221136028483e-2) : (R < 0.70e1 ? 0.613066204406423169e-2 + R * (-0.876057534246552885e-3) + pow(R - 0.675e1, 2) * 0.175182756697371740e-2 + pow(R - 0.675e1, 3) * (-0.170331798875002238e-2) : (R < 0.725e1 ? 0.231774529928226430e-2 + R * (-0.319515873650323451e-3) + pow(R - 0.70e1, 2) * 0.474339075411200559e-3 + pow(R - 0.70e1, 3) * (-0.240781020199626989e-3) : (R < 0.75e1 ? 0.951461839023110879e-3 + R * (-0.127492777232153222e-3) + pow(R - 0.725e1, 2) * 0.293753310261480303e-3 + pow(R - 0.725e1, 3) * (-0.265759603411469623e-3) : (R < 0.775e1 ? 0.237818455929977114e-3 + R * (-0.304460477410636145e-4) + pow(R - 0.75e1, 2) * 0.944336077028780591e-4 + pow(R - 0.75e1, 3) * (-0.345397304424943817e-4) : (R < 0.80e1 ? -0.725588109261597917e-4 + R * 0.102945566524077146e-4 + pow(R - 0.775e1, 2) * 0.685288098710072711e-4 + pow(R - 0.775e1, 3) * (-0.113953888002552538e-3) : (R < 0.825e1 ? -0.173240697289461971e-3 + R * 0.231926075874327459e-4 + pow(R - 0.80e1, 2) * (-0.169366061309071390e-4) + pow(R - 0.80e1, 3) * (-0.569726946352953521e-4) : (R < 0.85e1 ? -0.171962962223557192e-4 + R * 0.404192427786129960e-5 + pow(R - 0.825e1, 2) * (-0.596661271073786531e-4) + pow(R - 0.825e1, 3) * 0.112703703983733810e-3 : (R < 0.875e1 ? 0.547950781904624594e-4 + R * (-0.465919477887793664e-5) + pow(R - 0.85e1, 2) * 0.248616508804217047e-4 + pow(R - 0.85e1, 3) * (-0.136256434899639838e-3) : (R < 0.90e1 ? 0.168995915480558593e-3 + R * (-0.177764508823495539e-4) + pow(R - 0.875e1, 2) * (-0.773306752943081770e-4) + pow(R - 0.875e1, 3) * 0.806380704948255899e-4 : (R < 0.925e1 ? 0.377334012990514591e-3 + R * (-0.413221503117238443e-4) + pow(R - 0.90e1, 2) * (-0.168521224231889880e-4) + pow(R - 0.90e1, 3) * 0.113241669208337463e-3 : (R < 0.95e1 ? 0.259587702594484308e-3 + R * (-0.285153985467550640e-4) + pow(R - 0.925e1, 2) * 0.680791294830641191e-4 + pow(R - 0.925e1, 3) * (-0.109408489664175411e-3) : (R < 0.100e2 ? 0.133641147705931026e-3 + R * (-0.149899256172558974e-4) + pow(R - 0.95e1, 2) * (-0.139772377650674512e-4) + pow(R - 0.95e1, 3) * 0.386286512631584976e-4 : (R < 0.105e2 ? -0.149670871504552103e-4 + R * 0.432506504552111716e-8 + pow(R - 0.100e2, 2) * 0.439657391296702934e-4 + pow(R - 0.100e2, 3) * (-0.360972694795226641e-4) : (R < 0.110e2 ? -0.185862074763275015e-3 + R * 0.168971120850738114e-4 + pow(R - 0.105e2, 2) * (-0.101801650896137078e-4) + pow(R - 0.105e2, 3) * (-0.110806848106783415e-5) : (R < 0.120e2 ? -0.674222436412514942e-4 + R * 0.588589563465922784e-5 + pow(R - 0.110e2, 2) * (-0.118422678112154593e-4) + pow(R - 0.110e2, 3) * 0.503991060555623050e-5 : (R < 0.140e2 ? 0.285530448222359692e-4 + R * (-0.267890817110299749e-5) + pow(R - 0.120e2, 2) * 0.327746400545323308e-5 + pow(R - 0.120e2, 3) * (-0.672386049200866997e-6) : (R < 0.160e2 ? -0.342933155891934078e-4 + R * 0.236231526029952917e-5 + pow(R - 0.140e2, 2) * (-0.756852289751969218e-6) + pow(R - 0.140e2, 3) * 0.593970944261022693e-7 : (R < 0.180e2 ? 0.188756421121922020e-6 + R * 0.476712344048798750e-7 + pow(R - 0.160e2, 2) * (-0.400469723195355589e-6) + pow(R - 0.160e2, 3) * 0.101793031108957829e-6 : (R < 0.200e2 ? 0.624774712774287233e-5 + R * (-0.332691285069048484e-6) + pow(R - 0.180e2, 2) * 0.210288463458391383e-6 + pow(R - 0.180e2, 3) * (-0.388816190869335570e-7) : (R < 0.250e2 ? -0.713640466926285452e-6 + R * 0.418831397213142723e-7 + pow(R - 0.200e2, 2) * (-0.230012510632099951e-7) + pow(R - 0.200e2, 3) * 0.214081872138942783e-8 : 0.715208259864464085e-6 + R * (-0.275679668065785659e-7) + pow(R - 0.250e2, 2) * 0.911102975763142610e-8 + pow(R - 0.250e2, 3) * (-0.869490828863142652e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3968714480e2 * (R - 0.300e2) * (R - 0.250e2) + 0.4233289924e3 * R + 0.2487037020e5 - 0.2116644962e2 * R * R + 0.75000e3 * (0.776099188e-1 * R - 0.3210223053e1) * R) * pow(R, -6));
}

static double radcoeff_8_4_4_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.137613043600000816e-2 + R * 0.173472347597680709e-17 + pow(R - 0.475e1, 2) * 0.847688433025061278e-1 + pow(R - 0.475e1, 3) * (-0.177110556634024474e0) : (R < 0.525e1 ? -0.447263915888673411e-1 + R * 0.917619228237346804e-2 + pow(R - 0.50e1, 2) * (-0.480640741730122487e-1) + pow(R - 0.50e1, 3) * 0.667758547980734918e-1 : (R < 0.55e1 ? 0.137486891438428488e-1 + R * (-0.233537202949387571e-2) + pow(R - 0.525e1, 2) * 0.201781692554287451e-2 + pow(R - 0.525e1, 3) * (-0.966712299986949297e-2) : (R < 0.575e1 ? 0.181439779531888251e-1 + R * (-0.313904912919796839e-2) + pow(R - 0.55e1, 2) * (-0.523252532435924522e-2) + pow(R - 0.55e1, 3) * 0.776783242700447574e-2 : (R < 0.60e1 ? 0.246071334742569495e-1 + R * (-0.429884321131425180e-2) + pow(R - 0.575e1, 2) * 0.593348995894111913e-3 + pow(R - 0.575e1, 3) * 0.747430805665158168e-2 : (R < 0.625e1 ? 0.145723602984701439e-1 + R * (-0.260073595274502379e-2) + pow(R - 0.60e1, 2) * 0.619908003838279785e-2 + pow(R - 0.60e1, 3) * 0.227922552238919241e-2 : (R < 0.65e1 ? -0.704767682933967778e-2 + R * 0.926158851894348309e-3 + pow(R - 0.625e1, 2) * 0.790849918017469226e-2 + pow(R - 0.625e1, 3) * (-0.135402201878083439e-1) : (R < 0.675e1 ? -0.159654405526895929e-1 + R * 0.234161715676762952e-2 + pow(R - 0.65e1, 2) * (-0.224666596068156523e-2) + pow(R - 0.65e1, 3) * (-0.144730748755812294e-3) : (R < 0.70e1 ? -0.834244612198714423e-2 + R * 0.119114716103513232e-2 + pow(R - 0.675e1, 2) * (-0.235521402224842446e-2) + pow(R - 0.675e1, 3) * 0.218105463883158180e-2 : (R < 0.725e1 ? -0.307495315524289239e-2 + R * 0.422487894691841808e-3 + pow(R - 0.70e1, 2) * (-0.719423043124738115e-3) + pow(R - 0.70e1, 3) * 0.527658196629483714e-3 : (R < 0.75e1 ? -0.122104926583188156e-2 + R * 0.161712284997500913e-3 + pow(R - 0.725e1, 2) * (-0.323679395652625302e-3) + pow(R - 0.725e1, 3) * 0.270191930810486443e-3 : (R < 0.775e1 ? -0.403217148146158683e-3 + R * 0.505335741981544903e-4 + pow(R - 0.75e1, 2) * (-0.121035447544760429e-3) + pow(R - 0.75e1, 3) * 0.505731847685697732e-4 : (R < 0.80e1 ? -0.144684574865785893e-4 + R * (-0.501677430118891527e-6) + pow(R - 0.775e1, 2) * (-0.831055589683330978e-4) + pow(R - 0.775e1, 3) * 0.195612635715234669e-3 : (R < 0.825e1 ? 0.223971748114315411e-4 + R * (-0.537708771767894261e-5) + pow(R - 0.80e1, 2) * 0.636039178180928969e-4 + pow(R - 0.80e1, 3) * (-0.874139887495084951e-4) : (R < 0.85e1 ? -0.102141071051885956e-3 + R * 0.100347483008346613e-4 + pow(R - 0.825e1, 2) * (-0.195657374403848291e-5) + pow(R - 0.825e1, 3) * 0.175442703227993522e-4 : (R < 0.875e1 ? -0.121634970101892529e-3 + R * 0.123460121143402978e-4 + pow(R - 0.85e1, 2) * 0.112016289980610321e-4 + pow(R - 0.85e1, 3) * (-0.154109741416888873e-4) : (R < 0.90e1 ? -0.144899162175786292e-3 + R * 0.150572689618041479e-4 + pow(R - 0.875e1, 2) * (-0.356601608205635684e-6) + pow(R - 0.875e1, 3) * (-0.253976284760438315e-4) : (R < 0.925e1 ? -0.100855082430988002e-3 + R * 0.101169128184431111e-4 + pow(R - 0.90e1, 2) * (-0.194048229652385104e-4) + pow(R - 0.90e1, 3) * 0.373821898058642585e-4 : (R < 0.95e1 ? -0.765712163809164899e-4 + R * 0.742366192442340479e-5 + pow(R - 0.925e1, 2) * 0.863181938915968521e-5 + pow(R - 0.925e1, 3) * (-0.728895698741321226e-5) : (R < 0.100e2 ? -0.104163305086701059e-3 + R * 0.103728921838632701e-4 + pow(R - 0.95e1, 2) * 0.316510164859977644e-5 + pow(R - 0.95e1, 3) * (-0.104837344966526362e-4) : (R < 0.105e2 ? -0.577055042482356998e-4 + R * 0.567519295997357022e-5 + pow(R - 0.100e2, 2) * (-0.125605000963791775e-4) + pow(R - 0.100e2, 3) * 0.541664004006407331e-5 : (R < 0.110e2 ? 0.290606614291542955e-4 + R * (-0.282282710635755184e-5) + pow(R - 0.105e2, 2) * (-0.443554003628306750e-5) + pow(R - 0.105e2, 3) * 0.549141198599634221e-5 : (R < 0.120e2 ? 0.321249944325769938e-4 + R * (-0.313980815314336268e-5) + pow(R - 0.110e2, 2) * 0.380157794271144582e-5 + pow(R - 0.110e2, 3) * (-0.127531091956808298e-5) : (R < 0.140e2 ? -0.106754160649033557e-4 + R * 0.637414973575279713e-6 + pow(R - 0.120e2, 2) * (-0.243548159928034787e-7) + pow(R - 0.120e2, 3) * 0.703187608525818192e-7 : (R < 0.160e2 ? -0.206599673696906691e-4 + R * 0.138382083983504773e-5 + pow(R - 0.140e2, 2) * 0.397557749122687437e-6 + pow(R - 0.140e2, 3) * (-0.228738613895105634e-6) : (R < 0.180e2 ? -0.242552736035247460e-5 + R * 0.229188469584529663e-6 + pow(R - 0.160e2, 2) * (-0.974873934247946525e-6) + pow(R - 0.160e2, 3) * 0.253843441477840816e-6 : (R < 0.200e2 ? 0.110664643413169910e-4 + R * (-0.624185969673166221e-6) + pow(R - 0.180e2, 2) * 0.548186714619098478e-6 + pow(R - 0.180e2, 3) * (-0.107034261428757647e-6) : (R < 0.250e2 ? -0.576377731826271476e-5 + R * 0.284149751658135716e-6 + pow(R - 0.200e2, 2) * (-0.940188539534474955e-7) + pow(R - 0.200e2, 3) * 0.794850074836407108e-8 : 0.148058851162584787e-5 + R * (-0.599012317490339144e-7) + pow(R - 0.250e2, 2) * 0.252086572720135707e-7 + pow(R - 0.250e2, 3) * (-0.254797067564135702e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2585033123e2 * (R - 0.300e2) * (R - 0.250e2) - 0.2757347716e3 * R - 0.1620039002e5 + 0.1378673858e2 * R * R + 0.75000e3 * (-0.505532266e-1 * R + 0.2091090532e1) * R) * pow(R, -6));
}

static double radcoeff_8_4_6_5_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.692491282800041191e-4 + R * (-0.867361737988403547e-18) + pow(R - 0.475e1, 2) * 0.491898965876207822e-1 + pow(R - 0.475e1, 3) * (-0.111133826222483134e0) : (R < 0.525e1 ? -0.173796277554740218e-1 + R * 0.375735587709480389e-2 + pow(R - 0.50e1, 2) * (-0.341604730792415615e-1) + pow(R - 0.50e1, 3) * 0.495253087154493912e-1 : (R < 0.55e1 ? 0.221789416919908819e-1 + R * (-0.403688527837921599e-2) + pow(R - 0.525e1, 2) * 0.298350845734548240e-2 + pow(R - 0.525e1, 3) * (-0.934687811771446955e-2) : (R < 0.575e1 ? 0.236536858011786588e-1 + R * (-0.429767069677793826e-2) + pow(R - 0.55e1, 2) * (-0.402665013094037107e-2) + pow(R - 0.55e1, 3) * 0.127466655602085019e-1 : (R < 0.60e1 ? 0.214353071368269185e-1 + R * (-0.392099596970902926e-2) + pow(R - 0.575e1, 2) * 0.553334903921600535e-2 + pow(R - 0.575e1, 3) * 0.302930223848045174e-2 : (R < 0.625e1 ? 0.182046216331565257e-2 + R * (-0.586327280385942097e-3) + pow(R - 0.60e1, 2) * 0.780532571807634416e-2 + pow(R - 0.60e1, 3) * (-0.443821397013030236e-2) : (R < 0.65e1 ? -0.169516629453299872e-1 + R * 0.248417045925279807e-2 + pow(R - 0.625e1, 2) * 0.447666524047861739e-2 + pow(R - 0.625e1, 3) * (-0.113812489179592347e-1) : (R < 0.675e1 ? -0.175279682949358757e-1 + R * 0.258851890737475014e-2 + pow(R - 0.65e1, 2) * (-0.405927144799080909e-2) + pow(R - 0.65e1, 3) * 0.270530193636723312e-2 : (R < 0.70e1 ? -0.746325904392536495e-2 + R * 0.106612729644820219e-2 + pow(R - 0.675e1, 2) * (-0.203029499571538404e-2) + pow(R - 0.675e1, 3) * 0.182948002049030290e-2 : (R < 0.725e1 ? -0.285672689773709297e-2 + R * 0.394007302432441866e-3 + pow(R - 0.70e1, 2) * (-0.658184980347656812e-3) + pow(R - 0.70e1, 3) * 0.386872901991557419e-3 : (R < 0.75e1 ? -0.103180336729972099e-2 + R * 0.137453481382030510e-3 + pow(R - 0.725e1, 2) * (-0.368030303853988721e-3) + pow(R - 0.725e1, 3) * 0.376246927703466783e-3 : (R < 0.775e1 ? -0.197910005675771221e-3 + R * 0.239846283994361645e-4 + pow(R - 0.75e1, 2) * (-0.858451080763886611e-4) + pow(R - 0.75e1, 3) * 0.102590810554576019e-3 : (R < 0.80e1 ? -0.180998213067424920e-4 + R * 0.297851340224837935e-6 + pow(R - 0.775e1, 2) * (-0.890200016045663992e-5) + pow(R - 0.775e1, 3) * (-0.109917257617708515e-4) : (R < 0.825e1 ? 0.332676472526841329e-4 + R * (-0.621409732033551648e-5) + pow(R - 0.80e1, 2) * (-0.171457944817847794e-4) + pow(R - 0.80e1, 3) * 0.109980008652507368e-3 : (R < 0.85e1 ? -0.654844509142171234e-4 + R * 0.583425706111722700e-5 + pow(R - 0.825e1, 2) * 0.653392120075957567e-4 + pow(R - 0.825e1, 3) * (-0.110700166768258647e-3) : (R < 0.875e1 ? -0.164393700514866176e-3 + R * 0.177475817958666081e-4 + pow(R - 0.85e1, 2) * (-0.176859130685982356e-4) + pow(R - 0.85e1, 3) * 0.564790541325272020e-4 : (R < 0.90e1 ? -0.179901663371893005e-3 + R * 0.194944479114163446e-4 + pow(R - 0.875e1, 2) * 0.246733775307971677e-4 + pow(R - 0.875e1, 3) * 0.193818470701498219e-4 : (R < 0.925e1 ? -0.321793801735212142e-3 + R * 0.354652330024680143e-4 + pow(R - 0.90e1, 2) * 0.392097628334095349e-4 + pow(R - 0.90e1, 3) * (-0.161416821421126323e-3) : (R < 0.95e1 ? -0.223253182845082200e-3 + R * 0.248044604027115894e-4 + pow(R - 0.925e1, 2) * (-0.818528532324352140e-4) + pow(R - 0.925e1, 3) * 0.922299613663554339e-4 : (R < 0.100e2 ? -0.241145885551343161e-5 + R * 0.117115154268562456e-5 + pow(R - 0.95e1, 2) * (-0.126803822076686420e-4) + pow(R - 0.95e1, 3) * 0.145172814059478232e-5 : (R < 0.105e2 ? 0.110515772632369293e-3 + R * (-0.104204345595369298e-4) + pow(R - 0.100e2, 2) * (-0.105027899967764685e-4) + pow(R - 0.100e2, 3) * 0.156128990397006560e-4 : (R < 0.110e2 ? 0.971694025420479982e-4 + R * (-0.921355027653790469e-5) + pow(R - 0.105e2, 2) * 0.129165585627745171e-4 + pow(R - 0.105e2, 3) * (-0.517780448339741183e-5) : (R < 0.120e2 ? 0.386059419425908350e-6 + R * (-0.180345076311446208e-6) + pow(R - 0.110e2, 2) * 0.514985183767839982e-5 + pow(R - 0.110e2, 3) * (-0.274726663336695280e-5) : (R < 0.140e2 ? -0.219062006795339137e-4 + R * 0.187755869894449290e-5 + pow(R - 0.120e2, 2) * (-0.309194806242246028e-5) + pow(R - 0.120e2, 3) * 0.793712425850106817e-6 : (R < 0.160e2 ? 0.118811104306169064e-4 + R * (-0.965684440544064735e-6) + pow(R - 0.140e2, 2) * 0.167032649267818125e-5 + pow(R - 0.140e2, 3) * (-0.382211921203074415e-6) : (R < 0.180e2 ? -0.180114856292082783e-4 + R * 0.112907847573176730e-5 + pow(R - 0.160e2, 2) * (-0.622945034540265237e-6) + pow(R - 0.160e2, 3) * 0.100573586249690812e-6 : (R < 0.200e2 ? 0.342947077959406903e-5 + R * (-0.155818627433003849e-6) + pow(R - 0.180e2, 2) * (-0.195035170421203300e-7) + pow(R - 0.180e2, 3) * 0.796532056681112342e-8 : (R < 0.250e2 ? 0.306378370329503308e-5 + R * (-0.138248848799751661e-6) + pow(R - 0.200e2, 2) * 0.282884063587464171e-7 + pow(R - 0.200e2, 3) * (-0.201686904775921652e-8) : 0.228413106155718758e-6 + R * (-0.662996379422874980e-8) + pow(R - 0.250e2, 2) * (-0.196462935764183309e-8) + pow(R - 0.250e2, 3) * 0.296719231297516664e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.9561815270e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1019925904e4 * R + 0.5992044510e5 - 0.5099629520e2 * R * R + 0.75000e3 * (0.1869860315e0 * R - 0.773441696e1) * R) * pow(R, -6));
}

static double radcoeff_8_4_6_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.232412342000000004e-2 + pow(R - 0.475e1, 2) * (-0.286889579574035221e-1) + pow(R - 0.475e1, 3) * 0.719615595736140812e-1 : (R < 0.525e1 ? 0.126564886924559724e-2 + R * (-0.851686558649119522e-3) + pow(R - 0.50e1, 2) * 0.252822117228070423e-1 + pow(R - 0.50e1, 3) * (-0.357811936648422466e-1) : (R < 0.55e1 ? -0.288569873076315181e-1 + R * 0.508044549059647951e-2 + pow(R - 0.525e1, 2) * (-0.155368352582464591e-2) + pow(R - 0.525e1, 3) * 0.364046500575491289e-2 : (R < 0.575e1 ? -0.283788101031476094e-1 + R * 0.498619091626320218e-2 + pow(R - 0.55e1, 2) * 0.117666522849153876e-2 + pow(R - 0.55e1, 3) * (-0.377235826217739781e-2) : (R < 0.60e1 ? -0.276800504044165778e-1 + R * 0.486720635635070915e-2 + pow(R - 0.575e1, 2) * (-0.165260346814150982e-2) + pow(R - 0.575e1, 3) * (-0.707411650104531643e-2) : (R < 0.625e1 ? -0.149776797230037461e-1 + R * 0.271450777833395773e-2 + pow(R - 0.60e1, 2) * (-0.695819084392549757e-2) + pow(R - 0.60e1, 3) * (-0.189825202164133414e-2) : (R < 0.65e1 ? 0.852663363654088471e-2 + R * (-0.112050989768654142e-2) + pow(R - 0.625e1, 2) * (-0.838187986015649818e-2) + pow(R - 0.625e1, 3) * 0.141393010676106531e-1 : (R < 0.675e1 ? 0.182325290938206569e-1 + R * (-0.266033087758779305e-2) + pow(R - 0.65e1, 2) * 0.222259594055149168e-2 + pow(R - 0.65e1, 3) * 0.248839047198729998e-3 : (R < 0.70e1 ? 0.105591312317454260e-1 + R * (-0.150237558596228544e-2) + pow(R - 0.675e1, 2) * 0.240922522595053918e-2 + pow(R - 0.675e1, 3) * (-0.168731582280558798e-2) : (R < 0.725e1 ? 0.446565722524144663e-2 + R * (-0.614134689763063844e-3) + pow(R - 0.70e1, 2) * 0.114373835884634808e-2 + pow(R - 0.70e1, 3) * (-0.102272341037637103e-2) : (R < 0.75e1 ? 0.176537390454458050e-2 + R * (-0.234026149785459371e-3) + pow(R - 0.725e1, 2) * 0.376695801064069811e-3 + pow(R - 0.725e1, 3) * (-0.177969731208929305e-3) : (R < 0.775e1 ? 0.623797295583240438e-3 + R * (-0.790475738550987250e-4) + pow(R - 0.75e1, 2) * 0.243218502657372825e-3 + pow(R - 0.75e1, 3) * (-0.369762209427911741e-3) : (R < 0.80e1 ? 0.228059930254629587e-3 + R * (-0.267687367941457535e-4) + pow(R - 0.775e1, 2) * (-0.341031544135609869e-4) + pow(R - 0.775e1, 3) * 0.125532414680575987e-3 : (R < 0.825e1 ? 0.176003922716546008e-3 + R * (-0.202829862483182495e-4) + pow(R - 0.80e1, 2) * 0.600461565968710235e-4 + pow(R - 0.80e1, 3) * (-0.123864164814392093e-3) : (R < 0.85e1 ? 0.121733413913795350e-3 + R * (-0.134844388525812551e-4) + pow(R - 0.825e1, 2) * (-0.328519670139230596e-4) + pow(R - 0.825e1, 3) * 0.606410556489922953e-4 : (R < 0.875e1 ? 0.163601859838532197e-3 + R * (-0.185402244253567287e-4) + pow(R - 0.85e1, 2) * 0.126288247228211669e-4 + pow(R - 0.85e1, 3) * (-0.133008554775770134e-4) : (R < 0.90e1 ? 0.130753943372428569e-3 + R * (-0.147197224659918344e-4) + pow(R - 0.875e1, 2) * 0.265318311463840641e-5 + pow(R - 0.875e1, 3) * 0.517447992853157268e-4 : (R < 0.925e1 ? 0.324696069963833903e-4 + R * (-0.369098104267593266e-5) + pow(R - 0.90e1, 2) * 0.414617825786252019e-4 + pow(R - 0.90e1, 3) * (-0.934532076156858885e-4) : (R < 0.95e1 ? 0.392292457086601595e-5 + R * (-0.482566181304434100e-6) + pow(R - 0.925e1, 2) * (-0.286281231331392077e-4) + pow(R - 0.925e1, 3) * 0.318597648094277788e-4 : (R < 0.100e2 ? 0.818648545160101170e-4 + R * (-0.882292184610632772e-5) + pow(R - 0.95e1, 2) * (-0.473329952606837021e-5) + pow(R - 0.95e1, 3) * 0.204175810685620524e-4 : (R < 0.105e2 ? -0.225651354854684237e-4 + R * 0.175696442924684224e-5 + pow(R - 0.100e2, 2) * 0.258930720767747118e-4 + pow(R - 0.100e2, 3) * (-0.286008797025367888e-4) : (R < 0.110e2 ? -0.663123065777490930e-4 + R * 0.619937672911896076e-5 + pow(R - 0.105e2, 2) * (-0.170082474770304731e-4) + pow(R - 0.105e2, 3) * 0.137772161055851010e-4 : (R < 0.120e2 ? 0.458647294244954701e-5 + R * (-0.475958668722686149e-6) + pow(R - 0.110e2, 2) * 0.365757668134717841e-5 + pow(R - 0.110e2, 3) * (-0.190298509362449226e-5) : (R < 0.140e2 ? -0.129333124514783253e-4 + R * 0.113023941309819370e-5 + pow(R - 0.120e2, 2) * (-0.205137859952629835e-5) + pow(R - 0.120e2, 3) * 0.524384841488600764e-6 : (R < 0.160e2 ? 0.983680008601306388e-5 + R * (-0.782656887143790333e-6) + pow(R - 0.140e2, 2) * 0.109493044940530623e-5 + pow(R - 0.140e2, 3) * (-0.258998766541705469e-6) : (R < 0.180e2 ? -0.820325383463149516e-5 + R * 0.489079711976968430e-6 + pow(R - 0.160e2, 2) * (-0.459062149844926849e-6) + pow(R - 0.160e2, 3) * 0.104600395353221316e-6 : (R < 0.200e2 ? 0.125609012135349627e-5 + R * (-0.919641431640831244e-7) + pow(R - 0.180e2, 2) * 0.168540222274401072e-6 + pow(R - 0.180e2, 3) * (-0.352415857211797486e-7) : (R < 0.250e2 ? -0.337691888418728207e-5 + R * 0.159297717279364099e-6 + pow(R - 0.200e2, 2) * (-0.429092920526774400e-7) + pow(R - 0.200e2, 3) * 0.341728430016092317e-8 : 0.297424302383525680e-6 + R * (-0.134988807353410276e-7) + pow(R - 0.250e2, 2) * 0.834997244973641127e-8 + pow(R - 0.250e2, 3) * (-0.899069939733641039e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.6110865235e2 * (R - 0.300e2) * (R - 0.250e2) - 0.6518275232e3 * R - 0.3829438252e5 + 0.3259137616e2 * R * R + 0.75000e3 * (-0.1195007897e0 * R + 0.4942974628e1) * R) * pow(R, -6));
}

static double radcoeff_8_4_8_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.254193407099999975e-3 + pow(R - 0.475e1, 2) * 0.486999248498638446e-3 + pow(R - 0.475e1, 3) * 0.185952208364054475e-1 : (R < 0.525e1 ? -0.180753364696767047e-1 + R * 0.373010353107534149e-2 + pow(R - 0.50e1, 2) * 0.144334148758027241e-1 + pow(R - 0.50e1, 3) * (-0.269242159044163522e-1) : (R < 0.55e1 ? -0.289781279312178383e-1 + R * 0.589852048689863597e-2 + pow(R - 0.525e1, 2) * (-0.575974705250954008e-2) + pow(R - 0.525e1, 3) * 0.851382585965997779e-2 : (R < 0.575e1 ? -0.221456621163156203e-1 + R * 0.461498930933011264e-2 + pow(R - 0.55e1, 2) * 0.625622342235444351e-3 + pow(R - 0.55e1, 3) * (-0.140211956302235784e-1) : (R < 0.60e1 ? -0.900770459674025276e-2 + R * 0.229882629978091354e-2 + pow(R - 0.575e1, 2) * (-0.989027438043224051e-2) + pow(R - 0.575e1, 3) * (-0.495994250765657840e-3) : (R < 0.625e1 ? 0.205952200177226055e-1 + R * (-0.273930981245376712e-2) + pow(R - 0.60e1, 2) * (-0.102622700685064839e-1) + pow(R - 0.60e1, 3) * 0.902753756128620716e-2 : (R < 0.65e1 ? 0.415853317972865316e-1 + R * (-0.617778155396584566e-2) + pow(R - 0.625e1, 2) * (-0.349161689754182896e-2) + pow(R - 0.625e1, 3) * 0.150928141176208345e-1 : (R < 0.675e1 ? 0.345563186729385477e-1 + R * (-0.509368735568285335e-2) + pow(R - 0.65e1, 2) * 0.782799369067379777e-2 + pow(R - 0.65e1, 3) * (-0.510993200296953713e-2) : (R < 0.70e1 ? 0.150135045762935099e-1 + R * (-0.213780276090274213e-2) + pow(R - 0.675e1, 2) * 0.399554468844664449e-2 + pow(R - 0.675e1, 3) * (-0.352424739854269873e-2) : (R < 0.725e1 ? 0.584932805474323511e-2 + R * (-0.800826803906176362e-3) + pow(R - 0.70e1, 2) * 0.135235913953962034e-2 + pow(R - 0.70e1, 3) * (-0.955115004459659183e-3) : (R < 0.75e1 ? 0.231498440737600486e-2 + R * (-0.303731297472552351e-3) + pow(R - 0.725e1, 2) * 0.636022886194875922e-3 + pow(R - 0.725e1, 3) * (-0.647317106498666124e-3) : (R < 0.775e1 ? 0.869825365757107179e-3 + R * (-0.107091811843614275e-3) + pow(R - 0.75e1, 2) * 0.150535056320876248e-3 + pow(R - 0.75e1, 3) * (-0.112451374025676490e-3) : (R < 0.80e1 ? 0.457559313695676438e-3 + R * (-0.529089163129905067e-4) + pow(R - 0.775e1, 2) * 0.661965258016188800e-4 + pow(R - 0.775e1, 3) * (-0.190993170198627441e-3) : (R < 0.825e1 ? 0.480415980365389605e-3 + R * (-0.556218728244237001e-4) + pow(R - 0.80e1, 2) * (-0.770483518473517078e-4) + pow(R - 0.80e1, 3) * 0.159354017060186088e-3 : (R < 0.85e1 ? 0.549414071121846065e-3 + R * (-0.642671705493146745e-4) + pow(R - 0.825e1, 2) * 0.424671609477878580e-4 + pow(R - 0.825e1, 3) * (-0.543346023621166192e-4) : (R < 0.875e1 ? 0.457329629007699630e-3 + R * (-0.532213280183176039e-4) + pow(R - 0.85e1, 2) * 0.171620917620039213e-5 + pow(R - 0.85e1, 3) * 0.292126067882801656e-4 : (R < 0.90e1 ? 0.402457990908380251e-3 + R * (-0.468858596574148835e-4) + pow(R - 0.875e1, 2) * 0.236256642674105186e-4 + pow(R - 0.875e1, 3) * 0.203514452249960161e-4 : (R < 0.925e1 ? 0.263594033236205858e-3 + R * (-0.312571315440228692e-4) + pow(R - 0.90e1, 2) * 0.388892481861575316e-4 + pow(R - 0.90e1, 3) * 0.448254959597358370e-4 : (R < 0.95e1 ? 0.911801720606614791e-5 + R * (-0.340772695849363742e-5) + pow(R - 0.925e1, 2) * 0.725083701559594093e-4 + pow(R - 0.925e1, 3) * (-0.995179158479394003e-4) : (R < 0.100e2 ? -0.155053647730975540e-3 + R * 0.141868488979974263e-4 + pow(R - 0.95e1, 2) * (-0.213006672999514604e-5) + pow(R - 0.95e1, 3) * 0.648002786800058496e-5 : (R < 0.105e2 ? -0.182075702640027210e-3 + R * 0.169168030690027211e-4 + pow(R - 0.100e2, 2) * 0.758997507200573225e-5 + pow(R - 0.100e2, 3) * (-0.170121768520223344e-4) : (R < 0.110e2 ? -0.128028576524912853e-3 + R * 0.117476455019917000e-4 + pow(R - 0.105e2, 2) * (-0.179282902060277693e-4) + pow(R - 0.105e2, 3) * 0.130368347400887323e-4 : (R < 0.120e2 ? -0.412237390733353025e-4 + R * 0.359698135103048201e-5 + pow(R - 0.110e2, 2) * 0.162696190410532911e-5 + pow(R - 0.110e2, 3) * (-0.147600747913581121e-5) : (R < 0.140e2 ? -0.269836010980044629e-4 + R * 0.242288272183370533e-5 + pow(R - 0.120e2, 2) * (-0.280106053330210409e-5) + pow(R - 0.120e2, 3) * 0.573058228317625446e-6 : (R < 0.160e2 ? 0.269822301024848568e-4 + R * (-0.190466067156320397e-5) + pow(R - 0.140e2, 2) * 0.637288836603649118e-6 + pow(R - 0.140e2, 3) * (-0.328378610360235615e-7) : (R < 0.180e2 ? -0.521293366270575804e-5 + R * 0.250440342419109872e-6 + pow(R - 0.160e2, 2) * 0.440261670387507749e-6 + pow(R - 0.160e2, 3) * (-0.131807335673531305e-6) : (R < 0.200e2 ? -0.773480142886176850e-5 + R * 0.429798995886764885e-6 + pow(R - 0.180e2, 2) * (-0.350582343653680189e-6) + pow(R - 0.180e2, 3) * 0.677370249551488554e-7 : (R < 0.250e2 ? 0.319446689922338923e-5 + R * (-0.159686079266169476e-6) + pow(R - 0.200e2, 2) * 0.558398060772129825e-7 + pow(R - 0.200e2, 3) * (-0.478524460639581812e-8) : -0.995311406956850876e-6 + R * 0.398186360262740394e-7 + pow(R - 0.250e2, 2) * (-0.159388630187242794e-7) + pow(R - 0.250e2, 3) * 0.159413522189389458e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2385004480e0 * (R - 0.300e2) * (R - 0.250e2) + 0.2548154632e1 * R + 0.1479396262e3 - 0.1274077316e0 * R * R + 0.75000e3 * (0.463800809e-3 * R - 0.1913865792e-1) * R) * pow(R, -6));
}

static double radcoeff_8_4_8_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.285306833599999980e-2 + pow(R - 0.475e1, 2) * 0.696167507162320006e-2 + pow(R - 0.475e1, 3) * (-0.375282516464928023e-1) : (R < 0.525e1 ? 0.204803423355290060e-1 + R * (-0.355570964790580127e-2) + pow(R - 0.50e1, 2) * (-0.211845136632464008e-1) + pow(R - 0.50e1, 3) * 0.332560450514784167e-1 : (R < 0.55e1 ? 0.425488649539781799e-1 + R * (-0.791245803237679637e-2) + pow(R - 0.525e1, 2) * 0.375752012536241433e-2 + pow(R - 0.525e1, 3) * (-0.250027441542090756e-2) : (R < 0.575e1 ? 0.349898708204285577e-1 + R * (-0.650249942258701065e-2) + pow(R - 0.55e1, 2) * 0.188231431379673356e-2 + pow(R - 0.55e1, 3) * 0.177276409820523130e-2 : (R < 0.60e1 ? 0.278122999583321831e-1 + R * (-0.522894899727516238e-2) + pow(R - 0.575e1, 2) * 0.321188738745065714e-2 + pow(R - 0.575e1, 3) * 0.878025405459998028e-2 : (R < 0.625e1 ? 0.863678641587402839e-2 + R * (-0.197670766831233805e-2) + pow(R - 0.60e1, 2) * 0.979707792840064234e-2 + pow(R - 0.60e1, 3) * 0.171447997139483966e-2 : (R < 0.65e1 ? -0.233491322067782212e-1 + R * 0.324329629052451558e-2 + pow(R - 0.625e1, 2) * 0.110829379069467722e-1 + pow(R - 0.625e1, 3) * (-0.197759621641793379e-1) : (R < 0.675e1 ? -0.348830423063927891e-1 + R * 0.507677233821427539e-2 + pow(R - 0.65e1, 2) * (-0.374903371618773166e-2) + pow(R - 0.65e1, 3) * (-0.112453595467747929e-2) : (R < 0.70e1 ? -0.210586981779740806e-1 + R * 0.299140498861838206e-2 + pow(R - 0.675e1, 2) * (-0.459243568219584123e-2) + pow(R - 0.675e1, 3) * 0.332328138768925134e-2 : (R < 0.725e1 ? -0.958208107008537251e-2 + R * 0.131830240771219596e-2 + pow(R - 0.70e1, 2) * (-0.209997464142890273e-2) + pow(R - 0.70e1, 3) * 0.142822482312047333e-2 : (R < 0.75e1 ? -0.402009851606304272e-2 + R * 0.536107241332833460e-3 + pow(R - 0.725e1, 2) * (-0.102880602408854773e-2) + pow(R - 0.725e1, 3) * 0.800672685588855104e-3 : (R < 0.775e1 ? -0.133981175563352428e-2 + R * 0.171830357836469914e-3 + pow(R - 0.75e1, 2) * (-0.428301509896906346e-3) + pow(R - 0.75e1, 3) * 0.603687788764106217e-3 : (R < 0.80e1 ? -0.574713445499971790e-3 + R * 0.708710632812866841e-4 + pow(R - 0.775e1, 2) * 0.244643316761733544e-4 + pow(R - 0.775e1, 3) * (-0.279317100805280311e-3) : (R < 0.825e1 ? -0.256430429967066328e-3 + R * 0.307312727183832912e-4 + pow(R - 0.80e1, 2) * (-0.185023493927786916e-3) + pow(R - 0.80e1, 3) * 0.489703411769014905e-3 : (R < 0.85e1 ? -0.254630835156736133e-3 + R * 0.300389154611801382e-4 + pow(R - 0.825e1, 2) * 0.182254064898974317e-3 + pow(R - 0.825e1, 3) * (-0.456707004254779461e-3) : (R < 0.875e1 ? -0.297078990831617102e-3 + R * 0.355333846128961310e-4 + pow(R - 0.85e1, 2) * (-0.160276188292110306e-3) + pow(R - 0.85e1, 3) * 0.182925858562103154e-3 : (R < 0.90e1 ? 0.968575510146909581e-4 + R * (-0.103061110527646820e-4) + pow(R - 0.875e1, 2) * (-0.230817943705329399e-4) + pow(R - 0.875e1, 3) * 0.111897899158366662e-3 : (R < 0.925e1 ? 0.122037133785365799e-4 + R * (-0.866152145837397745e-6) + pow(R - 0.90e1, 2) * 0.608416299982420669e-4 + pow(R - 0.90e1, 3) * (-0.113416779419569873e-3) : (R < 0.95e1 ? -0.704511338610571065e-4 + R * 0.828901671211428192e-5 + pow(R - 0.925e1, 2) * (-0.242209545664353415e-4) + pow(R - 0.925e1, 3) * 0.115160233839128543e-4 : (R < 0.100e2 ? 0.227516118818874290e-4 + R * (-0.166220618661972969e-5) + pow(R - 0.95e1, 2) * (-0.155839370285006999e-4) + pow(R - 0.95e1, 3) * 0.176264974674803159e-4 : (R < 0.105e2 ? 0.446995790871019199e-4 + R * (-0.402627011451019219e-5) + pow(R - 0.100e2, 2) * 0.108558091727197757e-4 + pow(R - 0.100e2, 3) * (-0.211793610233987795e-4) : (R < 0.110e2 ? 0.975675829980647915e-4 + R * (-0.905498170933950367e-5) + pow(R - 0.105e2, 2) * (-0.209132323623783970e-4) + pow(R - 0.105e2, 3) * 0.269040606901148043e-4 : (R < 0.120e2 ? 0.103789337786449736e-3 + R * (-0.979016855413179404e-5) + pow(R - 0.110e2, 2) * 0.194428586727938128e-4 + pow(R - 0.110e2, 3) * (-0.788745799266201846e-5) : (R < 0.140e2 ? -0.673353819446372996e-4 + R * 0.543317481346977457e-5 + pow(R - 0.120e2, 2) * (-0.421951530519224338e-5) + pow(R - 0.120e2, 3) * 0.895434390478677861e-6 : (R < 0.160e2 ? 0.880991144907089036e-5 + R * (-0.699673721555063565e-6) + pow(R - 0.140e2, 2) * 0.115309103767982379e-5 + pow(R - 0.140e2, 3) * (-0.276618376826145945e-6) : (R < 0.180e2 ? -0.947776947530768095e-5 + R * 0.593269907250480028e-6 + pow(R - 0.160e2, 2) * (-0.506619223277052096e-6) + pow(R - 0.160e2, 3) * 0.105811632438406052e-6 : (R < 0.200e2 ? 0.296351816034340187e-5 + R * (-0.163467396596855650e-6) + pow(R - 0.180e2, 2) * 0.128250571353384244e-6 + pow(R - 0.180e2, 3) * (-0.246340249774782067e-7) : (R < 0.250e2 ? -0.106843146773885659e-5 + R * 0.539265890869428317e-7 + pow(R - 0.200e2, 2) * (-0.195535785114849931e-7) + pow(R - 0.200e2, 3) * 0.168980322761928529e-8 : 0.373968049011517765e-6 + R * (-0.148739539564607115e-7) + pow(R - 0.250e2, 2) * 0.579346990280428478e-8 + pow(R - 0.250e2, 3) * (-0.575957463102428467e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3232100480e1 * (R - 0.300e2) * (R - 0.250e2) + 0.3447319276e2 * R + 0.2026297384e4 - 0.1723659638e1 * R * R + 0.75000e3 * (0.632198498e-2 * R - 0.2615261919e0) * R) * pow(R, -6));
}

static double radcoeff_8_4_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.429798307699999979e-1 + pow(R - 0.475e1, 2) * 0.351518677008066771e0 + pow(R - 0.475e1, 3) * (-0.664924458432267107e0) : (R < 0.525e1 ? -0.286829370859916444e0 + R * 0.510860025479832891e-1 + pow(R - 0.50e1, 2) * (-0.147174666816133587e0) + pow(R - 0.50e1, 3) * 0.223278571456801689e0 : (R < 0.55e1 ? -0.125995403242350812e0 + R * 0.193634012880668192e-1 + pow(R - 0.525e1, 2) * 0.202842617764676832e-1 + pow(R - 0.525e1, 3) * (-0.591694510749398231e-1) : (R < 0.575e1 ? -0.120415383018621938e0 + R * 0.184112600997494436e-1 + pow(R - 0.55e1, 2) * (-0.240928265297371859e-1) + pow(R - 0.55e1, 3) * 0.456594139629576679e-1 : (R < 0.60e1 ? -0.101167435739378628e0 + R * 0.149259869529354133e-1 + pow(R - 0.575e1, 2) * 0.101517339424810667e-1 + pow(R - 0.575e1, 3) * (-0.940585725689087326e-2) : (R < 0.625e1 ? -0.120553531301053424e0 + R * 0.182382556885089045e-1 + pow(R - 0.60e1, 2) * 0.309734099981291222e-2 + pow(R - 0.60e1, 3) * (-0.107344082313941477e-1) : (R < 0.65e1 ? -0.117627478595431004e0 + R * 0.177742246450289590e-1 + pow(R - 0.625e1, 2) * (-0.495346517373269814e-2) + pow(R - 0.625e1, 3) * (-0.191573324735325665e-1) : (R < 0.675e1 ? -0.787896427219391404e-1 + R * 0.117054922193752520e-1 + pow(R - 0.65e1, 2) * (-0.193214645288821256e-1) + pow(R - 0.65e1, 3) * 0.134164039815244541e-1 : (R < 0.70e1 ? -0.315577964471226574e-1 + R * 0.456033570147002399e-2 + pow(R - 0.675e1, 2) * (-0.925916154273878460e-2) + pow(R - 0.675e1, 3) * 0.804718521303474967e-2 : (R < 0.725e1 ? -0.101656219671225345e-1 + R * 0.143960215754464780e-2 + pow(R - 0.70e1, 2) * (-0.322377263296272192e-2) + pow(R - 0.70e1, 3) * 0.272947092953652404e-2 : (R < 0.75e1 ? -0.234865852374754273e-2 + R * 0.339491640351385177e-3 + pow(R - 0.725e1, 2) * (-0.117666943581032878e-2) + pow(R - 0.725e1, 3) * 0.129179352641915226e-2 : (R < 0.775e1 ? 0.193909648126411186e-3 + R * (-0.663179135018815560e-5) + pow(R - 0.75e1, 2) * (-0.207824290995964502e-3) + pow(R - 0.75e1, 3) * 0.185594337586868398e-3 : (R < 0.80e1 ? 0.719447897267402425e-3 + R * (-0.757449985506325734e-4) + pow(R - 0.775e1, 2) * (-0.686285378058131831e-4) + pow(R - 0.775e1, 3) * 0.195926281633374005e-3 : (R < 0.825e1 ? 0.698844690578252249e-3 + R * (-0.733230896472815305e-4) + pow(R - 0.80e1, 2) * 0.783161734192173412e-4 + pow(R - 0.80e1, 3) * (-0.506587326003648278e-4) : (R < 0.85e1 ? 0.458256420356990520e-3 + R * (-0.436635153002412710e-4) + pow(R - 0.825e1, 2) * 0.403221239689437170e-4 + pow(R - 0.825e1, 3) * (-0.863139283191447794e-5) : (R < 0.875e1 ? 0.303028943049903684e-3 + R * (-0.251208394717533755e-4) + pow(R - 0.85e1, 2) * 0.338485793450078585e-4 + pow(R - 0.85e1, 3) * (-0.136950074951977399e-3) : (R < 0.90e1 ? 0.379600816421520623e-3 + R * (-0.338746888527452120e-4) + pow(R - 0.875e1, 2) * (-0.688639768689751911e-4) + pow(R - 0.875e1, 3) * 0.930344689598240485e-4 : (R < 0.925e1 ? 0.529642710985392179e-3 + R * (-0.508627143572658002e-4) + pow(R - 0.90e1, 2) * 0.911874850892845402e-6 + pow(R - 0.90e1, 3) * (-0.484528735273185158e-4) : (R < 0.95e1 ? 0.608760658353272254e-3 + R * (-0.594916907181915967e-4) + pow(R - 0.925e1, 2) * (-0.354277802945960450e-4) + pow(R - 0.925e1, 3) * 0.575680881894496819e-4 : (R < 0.100e2 ? 0.673184722774694219e-3 + R * (-0.664115643299678047e-4) + pow(R - 0.95e1, 2) * 0.774828584749121813e-5 + pow(R - 0.95e1, 3) * 0.212859918648888062e-4 : (R < 0.105e2 ? 0.440654745758099818e-3 + R * (-0.426987845838099794e-4) + pow(R - 0.100e2, 2) * 0.396772736448244308e-4 + pow(R - 0.100e2, 3) * (-0.192696119144089356e-4) : (R < 0.110e2 ? 0.183302183234918654e-3 + R * (-0.174737198747922536e-4) + pow(R - 0.105e2, 2) * 0.107728557732110291e-4 + pow(R - 0.105e2, 3) * 0.270990161674695179e-5 : (R < 0.120e2 ? 0.454760330372310688e-4 + R * (-0.466843788902100617e-5) + pow(R - 0.110e2, 2) * 0.148377081983314573e-4 + pow(R - 0.110e2, 3) * (-0.634067126531044898e-5) : (R < 0.140e2 ? -0.738677612385266983e-4 + R * 0.598496471171055802e-5 + pow(R - 0.120e2, 2) * (-0.418430559759989222e-5) + pow(R - 0.120e2, 3) * 0.852855264372306504e-6 : (R < 0.160e2 ? 0.725928753699864147e-5 + R * (-0.517994506221331544e-6) + pow(R - 0.140e2, 2) * 0.932825988633947331e-6 + pow(R - 0.140e2, 3) * (-0.241020088361640742e-6) : (R < 0.180e2 ? -0.436257552249629555e-5 + R * 0.321068387974768455e-6 + pow(R - 0.160e2, 2) * (-0.513294541535897332e-6) + pow(R - 0.160e2, 3) * 0.117477743461756526e-6 : (R < 0.200e2 ? 0.610608266189936218e-5 + R * (-0.322376856627742347e-6) + pow(R - 0.180e2, 2) * 0.191571919234641904e-6 + pow(R - 0.180e2, 3) * (-0.349704403228853690e-7) : (R < 0.250e2 ? -0.340241045024017262e-6 + R * 0.242655364362008662e-7 + pow(R - 0.200e2, 2) * (-0.182507227026703029e-7) + pow(R - 0.200e2, 3) * 0.176235581908602611e-8 : 0.682048879676255388e-6 + R * (-0.260650041590502155e-7) + pow(R - 0.250e2, 2) * 0.818461458362008653e-8 + pow(R - 0.250e2, 3) * (-0.769786970362008700e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.4642229878e2 * (R - 0.300e2) * (R - 0.250e2) + 0.4951696704e3 * R + 0.2909168908e5 - 0.2475848352e2 * R * R + 0.75000e3 * (0.907820033e-1 * R - 0.3755086006e1) * R) * pow(R, -6));
}

static double radcoeff_8_4_10_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.241640900899999997e-1 + pow(R - 0.475e1, 2) * (-0.230629546211154668e0) + pow(R - 0.475e1, 3) * 0.457062728844618626e0 : (R < 0.525e1 ? 0.164968905826056639e0 + R * (-0.296155114472113276e-1) + pow(R - 0.50e1, 2) * 0.112167500422309344e0 + pow(R - 0.50e1, 3) * (-0.170255716133856039e0) : (R < 0.55e1 ? 0.424749109985620293e-1 + R * (-0.545470801115467176e-2) + pow(R - 0.525e1, 2) * (-0.155242866780826941e-1) + pow(R - 0.525e1, 3) * 0.322847955308055157e-1 : (R < 0.575e1 ? 0.514071859849349194e-1 + R * (-0.716345218816998551e-2) + pow(R - 0.55e1, 2) * 0.868930997002144087e-2 + pow(R - 0.55e1, 3) * (-0.123170519093659912e-1) : (R < 0.60e1 ? 0.400553693479509879e-1 + R * (-0.512824443616538908e-2) + pow(R - 0.575e1, 2) * (-0.548478962003054178e-3) + pow(R - 0.575e1, 3) * (-0.856215134934157004e-2) : (R < 0.625e1 ? 0.511651629520107690e-1 + R * (-0.700788729516846082e-2) + pow(R - 0.60e1, 2) * (-0.697009247400923182e-2) + pow(R - 0.60e1, 3) * (-0.423738218126769751e-2) : (R < 0.65e1 ? 0.774105443007548077e-1 + R * (-0.112874426911607692e-1) + pow(R - 0.625e1, 2) * (-0.101481291099600052e-1) + pow(R - 0.625e1, 3) * 0.265477414504123391e-1 : (R < 0.675e1 ? 0.778174544062249784e-1 + R * (-0.113838057241884578e-1) + pow(R - 0.65e1, 2) * 0.976267697784924914e-2 + pow(R - 0.65e1, 3) * 0.316970363618348128e-3 : (R < 0.70e1 ? 0.450823739625764025e-1 + R * (-0.644303529208539293e-2) + pow(R - 0.675e1, 2) * 0.100004047505630102e-1 + pow(R - 0.675e1, 3) * (-0.680144504888574586e-2) : (R < 0.725e1 ? 0.195266066798897610e-1 + R * (-0.271810386346996559e-2) + pow(R - 0.70e1, 2) * 0.489932096389870085e-2 + pow(R - 0.70e1, 3) * (-0.368865639527535000e-2) : (R < 0.75e1 ? 0.702940777720189106e-2 + R * (-0.960066455634743564e-3) + pow(R - 0.725e1, 2) * 0.213282866744218813e-2 + pow(R - 0.725e1, 3) * (-0.177596312361285734e-2) : (R < 0.775e1 ? 0.163430078480295135e-2 + R * (-0.226645207591060155e-3) + pow(R - 0.75e1, 2) * 0.800856324732545180e-3 + pow(R - 0.75e1, 3) * (-0.895491446273218245e-3) : (R < 0.80e1 ? -0.131694999222126146e-3 + R * 0.587830859898402037e-5 + pow(R - 0.775e1, 2) * 0.129237740027631415e-3 + pow(R - 0.775e1, 3) * (-0.199286711134269922e-3) : (R < 0.825e1 ? -0.344752388740992882e-3 + R * 0.331309202751241071e-4 + pow(R - 0.80e1, 2) * (-0.202272933230710541e-4) + pow(R - 0.80e1, 3) * 0.149600367610298516e-3 : (R < 0.85e1 ? -0.491654572519286326e-3 + R * 0.510673425405195534e-4 + pow(R - 0.825e1, 2) * 0.919729823846528394e-4 + pow(R - 0.825e1, 3) * (-0.218474678666924222e-3) : (R < 0.875e1 ? -0.532011083983780311e-3 + R * 0.560898314827976781e-4 + pow(R - 0.85e1, 2) * (-0.718830266155403409e-4) + pow(R - 0.85e1, 3) * 0.126427207217398460e-3 : (R < 0.90e1 ? -0.427459743432535085e-3 + R * 0.438534195282897207e-4 + pow(R - 0.875e1, 2) * 0.229373787975085044e-4 + pow(R - 0.875e1, 3) * (-0.102599738042669498e-3) : (R < 0.925e1 ? -0.357710424806390926e-3 + R * 0.360846580440434385e-4 + pow(R - 0.90e1, 2) * (-0.540124247344936261e-4) + pow(R - 0.90e1, 3) * 0.129406647353279476e-3 : (R < 0.95e1 ? -0.333696412093712912e-3 + R * 0.333421920555365271e-4 + pow(R - 0.925e1, 2) * 0.430425607804659738e-4 + pow(R - 0.925e1, 3) * (-0.120757973290448286e-3) : (R < 0.100e2 ? -0.322245119161199329e-3 + R * 0.322213524538104561e-4 + pow(R - 0.95e1, 2) * (-0.475259191873702512e-4) + pow(R - 0.95e1, 3) * 0.407480870554986844e-4 : (R < 0.105e2 ? -0.159384549118642149e-3 + R * 0.152564985580642166e-4 + pow(R - 0.100e2, 2) * 0.135962113958777789e-4 + pow(R - 0.100e2, 3) * (-0.244120514880124173e-4) : (R < 0.110e2 ? -0.109552316894293139e-3 + R * 0.105436713379326807e-4 + pow(R - 0.105e2, 2) * (-0.230218658361408471e-4) + pow(R - 0.105e2, 3) * 0.147119926005509629e-4 : (R < 0.120e2 ? 0.183978009647443556e-4 + R * (-0.144420004779494141e-5) + pow(R - 0.110e2, 2) * (-0.953876935314401863e-6) + pow(R - 0.110e2, 3) * 0.777544652109343219e-6 : (R < 0.140e2 ? 0.131229076533485895e-4 + R * (-0.101931996209571569e-5) + pow(R - 0.120e2, 2) * 0.137875702101362779e-5 + pow(R - 0.120e2, 3) * (-0.395257165882884934e-6) : (R < 0.160e2 ? 0.466868910190154125e-5 + R * (-0.247377868635824360e-6) + pow(R - 0.140e2, 2) * (-0.992785974283682126e-6) + pow(R - 0.140e2, 3) * 0.299316188925797163e-6 : (R < 0.180e2 ? 0.916166879647579003e-5 + R * (-0.626727498660986903e-6) + pow(R - 0.160e2, 2) * 0.803111159271100960e-6 + pow(R - 0.160e2, 3) * (-0.179356857407803741e-6) : (R < 0.200e2 ? -0.814366369313589200e-5 + R * 0.433434849529771778e-6 + pow(R - 0.180e2, 2) * (-0.273029985175721487e-6) + pow(R - 0.180e2, 3) * 0.504477921429177808e-7 : (R < 0.250e2 ? 0.902727403062014075e-6 + R * (-0.533115854581007077e-7) + pow(R - 0.200e2, 2) * 0.296567676817852472e-7 + pow(R - 0.200e2, 3) * (-0.276517721003302140e-8) : -0.930985207781879257e-6 + R * 0.358678006072751725e-7 + pow(R - 0.250e2, 2) * (-0.118208904687100705e-7) + pow(R - 0.250e2, 3) * 0.112722906545100711e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.5232137795e2 * (R - 0.300e2) * (R - 0.250e2) - 0.5580926632e3 * R - 0.3278878084e5 + 0.2790463316e2 * R * R + 0.75000e3 * (-0.1023185823e0 * R + 0.4232290364e1) * R) * pow(R, -6));
}

static double radcoeff_8_4_11_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.347947772300000093e-2 + R * (-0.216840434497100887e-18) + pow(R - 0.475e1, 2) * (-0.118856831627770169e-1) + pow(R - 0.475e1, 3) * 0.176157242031080678e-1 : (R < 0.525e1 ? 0.162113346825287288e-1 + R * (-0.263989329330574550e-2) + pow(R - 0.50e1, 2) * 0.132610998955403508e-2 + pow(R - 0.50e1, 3) * (-0.545288385324206788e-3) : (R < 0.55e1 ? 0.133414259575793358e-1 + R * (-0.207907987077701664e-2) + pow(R - 0.525e1, 2) * 0.917143700560879961e-3 + pow(R - 0.525e1, 3) * 0.616564314188750755e-3 : (R < 0.575e1 ? 0.102504041307240230e-1 + R * (-0.150490221158618587e-2) + pow(R - 0.55e1, 2) * 0.137956693620244308e-2 + pow(R - 0.55e1, 3) * (-0.123144560743079778e-2) : (R < 0.60e1 ? 0.767878308054987385e-2 + R * (-0.104601479487823881e-2) + pow(R - 0.575e1, 2) * 0.455982730629344744e-3 + pow(R - 0.575e1, 3) * (-0.108952562846555655e-2) : (R < 0.625e1 ? 0.754802630340515104e-2 + R * (-0.102230948490085851e-2) + pow(R - 0.60e1, 2) * (-0.361161490719822721e-3) + pow(R - 0.60e1, 3) * 0.438935932930269724e-4 : (R < 0.65e1 ? 0.860333140148954525e-2 + R * (-0.119466018151832723e-2) + pow(R - 0.625e1, 2) * (-0.328241295750052490e-3) + pow(R - 0.625e1, 3) * 0.904116874493446029e-3 : (R < 0.675e1 ? 0.856183491706791026e-2 + R * (-0.118925891542583225e-2) + pow(R - 0.65e1, 2) * 0.349846360120032059e-3 + pow(R - 0.65e1, 3) * 0.348831030333188836e-3 : (R < 0.70e1 ? 0.696693006125381764e-2 + R * (-0.948929917178343305e-3) + pow(R - 0.675e1, 2) * 0.611469632869923686e-3 + pow(R - 0.675e1, 3) * (-0.128637815026200197e-3) : (R < 0.725e1 ? 0.503183036462555907e-2 + R * (-0.667314691060794107e-3) + pow(R - 0.70e1, 2) * 0.514991271600273538e-3 + pow(R - 0.70e1, 3) * (-0.215229203828388272e-3) : (R < 0.75e1 ? 0.348638820219398116e-2 + R * (-0.450174530978480114e-3) + pow(R - 0.725e1, 2) * 0.353569368728982327e-3 + pow(R - 0.725e1, 3) * (-0.752986112602472489e-4) : (R < 0.775e1 ? 0.228731328628964002e-2 + R * (-0.287508336225285311e-3) + pow(R - 0.75e1, 2) * 0.297095410283796887e-3 + pow(R - 0.75e1, 3) * (-0.140306096410622874e-3) : (R < 0.80e1 ? 0.135632704817293466e-2 + R * (-0.165268024160378658e-3) + pow(R - 0.775e1, 2) * 0.191865837975829724e-3 + pow(R - 0.775e1, 3) * (-0.101889712217260184e-3) : (R < 0.825e1 ? 0.752097852715600786e-3 + R * (-0.884394262132000937e-4) + pow(R - 0.80e1, 2) * 0.115448553812884586e-3 + pow(R - 0.80e1, 3) * (-0.137412691840336978e-3) : (R < 0.85e1 ? 0.493501287231273085e-3 + R * (-0.564800290268209804e-4) + pow(R - 0.825e1, 2) * 0.123890349326318480e-4 + pow(R - 0.825e1, 3) * 0.105912287578608237e-3 : (R < 0.875e1 ? 0.274479374615886108e-3 + R * (-0.304269576395160086e-4) + pow(R - 0.85e1, 2) * 0.918232506165880341e-4 + pow(R - 0.85e1, 3) * (-0.175593895914095933e-3) : (R < 0.90e1 ? 0.163831687192256140e-3 + R * (-0.174391878151149892e-4) + pow(R - 0.875e1, 2) * (-0.398721713189839359e-4) + pow(R - 0.875e1, 3) * 0.122540342285775545e-3 : (R < 0.925e1 ? 0.135892312661216368e-3 + R * (-0.143989592960240425e-4) + pow(R - 0.90e1, 2) * 0.520330853953477295e-4 + pow(R - 0.90e1, 3) * (-0.136878566477006226e-3) : (R < 0.95e1 ? 0.133751396677296819e-3 + R * (-0.140471478127888451e-4) + pow(R - 0.925e1, 2) * (-0.506258394624069469e-4) + pow(R - 0.925e1, 3) * 0.101440998118249311e-3 : (R < 0.100e2 ? 0.191953256854795432e-3 + R * (-0.203398803968205703e-4) + pow(R - 0.95e1, 2) * 0.254549091262800328e-4 + pow(R - 0.95e1, 3) * (-0.111024629212777790e-4) : (R < 0.105e2 ? 0.256485569179887278e-4 + R * (-0.321181846149887302e-5) + pow(R - 0.100e2, 2) * 0.880121474436336170e-5 + pow(R - 0.100e2, 3) * 0.786300133268768583e-6 : (R < 0.110e2 ? -0.706577202445686823e-4 + R * 0.617912138281606511e-5 + pow(R - 0.105e2, 2) * 0.998066494426651457e-5 + pow(R - 0.105e2, 3) * (-0.109708775317972869e-4) : (R < 0.120e2 ? -0.888114884495807638e-4 + R * 0.793162817823461452e-5 + pow(R - 0.110e2, 2) * (-0.647565135342941493e-5) + pow(R - 0.110e2, 3) * 0.181280245819479985e-5 : (R < 0.140e2 ? -0.331959335752221391e-5 + R * 0.418732845960184520e-6 + pow(R - 0.120e2, 2) * (-0.103724397884501560e-5) + pow(R - 0.120e2, 3) * 0.214504242057461634e-6 : (R < 0.160e2 ? 0.162964148134247334e-4 + R * (-0.115619216473033806e-5) + pow(R - 0.140e2, 2) * 0.249781473499754310e-6 + pow(R - 0.140e2, 3) * 0.120599049327073596e-7 : (R < 0.180e2 ? -0.909496104378679195e-6 + R * (-0.123474115388325515e-7) + pow(R - 0.160e2, 2) * 0.322140903095998471e-6 + pow(R - 0.160e2, 3) * (-0.792364299507910853e-7) : (R < 0.200e2 ? -0.633390008514202522e-5 + R * 0.325379041435668096e-6 + pow(R - 0.180e2, 2) * (-0.153277676608748094e-6) + pow(R - 0.180e2, 3) * 0.264051342454570127e-7 : (R < 0.250e2 ? -0.810787807823199619e-6 + R * 0.291299459461599780e-7 + pow(R - 0.200e2, 2) * 0.515312886399400794e-8 + pow(R - 0.200e2, 3) * (-0.753155746645200697e-9) : -0.652219245592750070e-6 + R * 0.241745535877100017e-7 + pow(R - 0.250e2, 2) * (-0.614420733568400189e-8) + pow(R - 0.250e2, 3) * 0.537857674828400167e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.7302044442e2 * (R - 0.300e2) * (R - 0.250e2) - 0.7788830248e3 * R - 0.4576008940e5 + 0.3894415124e2 * R * R + 0.75000e3 * (-0.1427965766e0 * R + 0.5906604160e1) * R) * pow(R, -6));
}

static double radcoeff_8_4_12_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.331938797200000135e-1 + R * 0.346944695195361419e-17 + pow(R - 0.475e1, 2) * 0.210619428783027862e0 + pow(R - 0.475e1, 3) * (-0.355738229052111443e0) : (R < 0.525e1 ? -0.218632557471215155e0 + R * 0.386087964442430320e-1 + pow(R - 0.50e1, 2) * (-0.561842430060557133e-1) + pow(R - 0.50e1, 3) * 0.439119325963342813e-1 : (R < 0.55e1 ? -0.117200119470896258e0 + R * 0.187501623030278571e-1 + pow(R - 0.525e1, 2) * (-0.232502935588049971e-1) + pow(R - 0.525e1, 3) * 0.367567265067742580e-1 : (R < 0.575e1 ? -0.920460058900504086e-1 + R * 0.140169017436455306e-1 + pow(R - 0.55e1, 2) * 0.431725132127569640e-2 + pow(R - 0.55e1, 3) * (-0.513789179834312840e-1) : (R < 0.60e1 ? -0.495981748737425732e-1 + R * 0.654198028239001261e-2 + pow(R - 0.575e1, 2) * (-0.342169371662977700e-1) + pow(R - 0.575e1, 3) * 0.387629524669508702e-1 : (R < 0.625e1 ? 0.791142765923349457e-2 + R * (-0.329843471320558253e-2) + pow(R - 0.60e1, 2) * (-0.514472281608461396e-2) + pow(R - 0.60e1, 3) * 0.150379631556277794e-1 : (R < 0.65e1 ? 0.627949638479800322e-2 + R * (-0.305117802956768065e-2) + pow(R - 0.625e1, 2) * 0.613374955063622062e-2 + pow(R - 0.625e1, 3) * 0.222929747505380138e-1 : (R < 0.675e1 ? -0.400930655545959982e-1 + R * 0.419562951147630769e-2 + pow(R - 0.65e1, 2) * 0.228534806135397318e-1 + pow(R - 0.65e1, 3) * (-0.243163018377798509e-1) : (R < 0.70e1 ? -0.853998427897215417e-1 + R * 0.110630632236624511e-1 + pow(R - 0.675e1, 2) * 0.461625423520484104e-2 + pow(R - 0.675e1, 3) * (-0.121563570314185999e-1) : (R < 0.725e1 ? -0.855029411981171744e-1 + R * 0.110918733978738835e-1 + pow(R - 0.70e1, 2) * (-0.450101353835910892e-2) + pow(R - 0.70e1, 3) * (-0.143088981254570419e-2) : (R < 0.75e1 ? -0.675453222821045668e-1 + R * 0.857307478884200905e-2 + pow(R - 0.725e1, 2) * (-0.557418089776838717e-2) + pow(R - 0.725e1, 3) * 0.136015077760139264e-2 : (R < 0.775e1 ? -0.488819898966855737e-1 + R * 0.604101261075807704e-2 + pow(R - 0.75e1, 2) * (-0.455406781456734258e-2) + pow(R - 0.75e1, 3) * 0.137837719814014607e-2 : (R < 0.80e1 ? -0.335010235759740441e-1 + R * 0.402242442812568348e-2 + pow(R - 0.775e1, 2) * (-0.352028491596223297e-2) + pow(R - 0.775e1, 3) * 0.180730337383799887e-2 : (R < 0.825e1 ? -0.223226176649135334e-1 + R * 0.260115135273919149e-2 + pow(R - 0.80e1, 2) * (-0.216480738558373371e-2) + pow(R - 0.80e1, 3) * 0.900081223307873770e-3 : (R < 0.85e1 ? -0.149063370341697941e-1 + R * 0.168751288931755076e-2 + pow(R - 0.825e1, 2) * (-0.148974646810282833e-2) + pow(R - 0.825e1, 3) * 0.822712840130498447e-3 : (R < 0.875e1 ? -0.996636739982014429e-2 + R * 0.109689831279060528e-2 + pow(R - 0.85e1, 2) * (-0.872711838004954464e-3) + pow(R - 0.85e1, 3) * 0.406262731370135685e-3 : (R < 0.90e1 ? -0.686297453690024907e-2 + R * 0.736716655920028468e-3 + pow(R - 0.875e1, 2) * (-0.568014789477352673e-3) + pow(R - 0.875e1, 3) * 0.279889891988955154e-3 : (R < 0.925e1 ? -0.481034982176352984e-2 + R * 0.505188615929281159e-3 + pow(R - 0.90e1, 2) * (-0.358097370485636294e-3) + pow(R - 0.90e1, 3) * 0.682121838740474206e-4 : (R < 0.95e1 ? -0.329377025995633435e-2 + R * 0.338929715162846932e-3 + pow(R - 0.925e1, 2) * (-0.306938232580100721e-3) + pow(R - 0.925e1, 3) * 0.202430029154851600e-3 : (R < 0.100e2 ? -0.221241281496364689e-2 + R * 0.223416229339331234e-3 + pow(R - 0.95e1, 2) * (-0.155115710713962015e-3) + pow(R - 0.95e1, 3) * 0.256647158305991252e-4 : (R < 0.105e2 ? -0.889311914753185793e-3 + R * 0.875490554983185718e-4 + pow(R - 0.100e2, 2) * (-0.116618636968063324e-3) + pow(R - 0.100e2, 3) * 0.478920745828523333e-4 : (R < 0.110e2 ? -0.651344638496422390e-4 + R * 0.684947446739449887e-5 + pow(R - 0.105e2, 2) * (-0.447805250937848205e-4) + pow(R - 0.105e2, 3) * 0.365584749659916380e-4 : (R < 0.120e2 ? 0.119218571809862490e-3 + R * (-0.105121944018965889e-4) + pow(R - 0.110e2, 2) * 0.100571873552026450e-4 + pow(R - 0.110e2, 3) * (-0.344045006130605538e-5) : (R < 0.140e2 ? 0.831901478611360358e-5 + R * (-0.719169875409466973e-6) + pow(R - 0.120e2, 2) * (-0.264162828715522128e-6) + pow(R - 0.120e2, 3) * 0.125906820835127819e-6 : (R < 0.160e2 ? 0.191039054550030325e-5 + R * (-0.264939340250021657e-6) + pow(R - 0.140e2, 2) * 0.491278096295244786e-6 + pow(R - 0.140e2, 3) * (-0.758216182351169633e-7) : (R < 0.180e2 ? -0.136151174769528593e-4 + R * 0.790313626109553718e-6 + pow(R - 0.160e2, 2) * 0.363483868845429539e-7 + pow(R - 0.160e2, 3) * (-0.552867073446599098e-7) : (R < 0.200e2 ? -0.458717265731251886e-5 + R * 0.272266685511806616e-6 + pow(R - 0.180e2, 2) * (-0.295371857183416505e-6) + pow(R - 0.180e2, 3) * 0.591675333762565921e-7 : (R < 0.250e2 ? 0.413422074533560327e-5 + R * (-0.199210342706780191e-6) + pow(R - 0.200e2, 2) * 0.596333430741230745e-7 + pow(R - 0.200e2, 3) * (-0.490667543375340727e-8) : -0.696599437273626370e-6 + R * 0.291224305029450550e-7 + pow(R - 0.250e2, 2) * (-0.139667884321780213e-7) + pow(R - 0.250e2, 3) * 0.144701265911780217e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.4800444518e2 * (R - 0.300e2) * (R - 0.250e2) + 0.5120451636e3 * R + 0.3008373894e5 - 0.2560225818e2 * R * R + 0.75000e3 * (0.938770145e-1 * R - 0.3883122887e1) * R) * pow(R, -6));
}

static double radcoeff_8_4_12_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.318040941799999990e-1 + pow(R - 0.475e1, 2) * (-0.264205140174638808e0) + pow(R - 0.475e1, 3) * 0.455598908858555252e0 : (R < 0.525e1 ? 0.255798879251701472e0 + R * (-0.466777746763402945e-1) + pow(R - 0.50e1, 2) * 0.774940414692776303e-1 + pow(R - 0.50e1, 3) * (-0.888025665756657367e-1) : (R < 0.55e1 ? 0.143247884356853761e0 + R * (-0.245812351746388102e-1) + pow(R - 0.525e1, 2) * 0.108921165375283156e-1 + pow(R - 0.525e1, 3) * 0.105223464361076727e-1 : (R < 0.575e1 ? 0.103288563063074518e0 + R * (-0.171622369491044591e-1) + pow(R - 0.55e1, 2) * 0.187838763646090701e-1 + pow(R - 0.55e1, 3) * (-0.953579100876490900e-2) : (R < 0.60e1 ? 0.605906887344242473e-1 + R * (-0.955825958094334675e-2) + pow(R - 0.575e1, 2) * 0.116320331080353879e-1 + pow(R - 0.575e1, 3) * 0.139948249495200805e-2 : (R < 0.625e1 ? 0.248690405867329108e-1 + R * (-0.347984005912215216e-2) + pow(R - 0.60e1, 2) * 0.126816449792493940e-1 + pow(R - 0.60e1, 3) * 0.160809923695686080e-2 : (R < 0.65e1 ? -0.158278619049497249e-1 + R * 0.316250103743195583e-2 + pow(R - 0.625e1, 2) * 0.138877194069670397e-1 + pow(R - 0.625e1, 3) * (-0.298366926907794386e-1) : (R < 0.675e1 ? -0.241976966210631431e-1 + R * 0.451198086139432963e-2 + pow(R - 0.65e1, 2) * (-0.848980011111754099e-2) + pow(R - 0.65e1, 3) * (-0.282903298583911389e-2) : (R < 0.70e1 ? 0.746105747931260707e-2 + R * (-0.263362879009275148e-3) + pow(R - 0.675e1, 2) * (-0.106115748504968764e-1) + pow(R - 0.675e1, 3) * 0.911942981813589938e-2 : (R < 0.725e1 ? 0.321115854825006208e-1 + R * (-0.385925721335723167e-2) + pow(R - 0.70e1, 2) * (-0.377200248689495100e-2) + pow(R - 0.70e1, 3) * 0.556723665729550940e-2 : (R < 0.75e1 ? 0.380683700838230429e-1 + R * (-0.470140158356179873e-2) + pow(R - 0.725e1, 2) * 0.403425006076680995e-3 + pow(R - 0.725e1, 3) * 0.216649926468205157e-2 : (R < 0.775e1 ? 0.335679523339668037e-1 + R * (-0.409347046839557416e-2) + pow(R - 0.75e1, 2) * 0.202829945458821983e-2 + pow(R - 0.75e1, 3) * 0.625925239763052560e-4 : (R < 0.80e1 ? 0.257450839101332797e-1 + R * (-0.306758464285590690e-2) + pow(R - 0.775e1, 2) * 0.207524384757044877e-2 + pow(R - 0.775e1, 3) * (-0.595064944587284442e-3) : (R < 0.825e1 ? 0.184571107874463847e-1 + R * (-0.214153739618079802e-2) + pow(R - 0.80e1, 2) * 0.162894513912998544e-2 + pow(R - 0.80e1, 3) * (-0.675147766427171476e-3) : (R < 0.85e1 ? 0.128733411770724261e-1 + R * (-0.145365503282090017e-2) + pow(R - 0.825e1, 2) * 0.112258431430960681e-2 + pow(R - 0.825e1, 3) * (-0.464674856904022122e-3) : (R < 0.875e1 ? 0.890583436945260702e-2 + R * (-0.979489411335600834e-3) + pow(R - 0.85e1, 2) * 0.774078171631590217e-3 + pow(R - 0.85e1, 3) * (-0.305705689156746834e-3) : (R < 0.90e1 ? 0.606439399917108827e-2 + R * (-0.649770142236695872e-3) + pow(R - 0.875e1, 2) * 0.544798904764030065e-3 + pow(R - 0.875e1, 3) * (-0.329168428068985657e-3) : (R < 0.925e1 ? 0.419717732495854083e-2 + R * (-0.439089770117615658e-3) + pow(R - 0.90e1, 2) * 0.297922583712290794e-3 + pow(R - 0.90e1, 3) * 0.264736798326871258e-4 : (R < 0.95e1 ? 0.279240389955878309e-2 + R * (-0.285164663292841410e-3) + pow(R - 0.925e1, 2) * 0.317777843586806140e-3 + pow(R - 0.925e1, 3) * (-0.283625114941761861e-3) : (R < 0.100e2 ? 0.180359585131467789e-2 + R * (-0.179455450551018717e-3) + pow(R - 0.95e1, 2) * 0.105059007380484758e-3 + pow(R - 0.95e1, 3) * (-0.121451832768946371e-4) : (R < 0.105e2 ? 0.868841256022049452e-3 + R * (-0.835053306282049435e-4) + pow(R - 0.100e2, 2) * 0.868412324651428021e-4 + pow(R - 0.100e2, 3) * (-0.349940850574658355e-4) : (R < 0.110e2 ? 0.249922782447696014e-3 + R * (-0.229096619561615231e-4) + pow(R - 0.105e2, 2) * 0.343501048789440454e-4 + pow(R - 0.105e2, 3) * (-0.213618305172419954e-4) : (R < 0.120e2 ? 0.542240279516387127e-4 + R * (-0.458092996514897426e-5) + pow(R - 0.110e2, 2) * 0.230735910308104974e-5 + pow(R - 0.110e2, 3) * (-0.344953213932075462e-6) : (R < 0.140e2 ? 0.132281310683972136e-4 + R * (-0.100107140078310128e-5) + pow(R - 0.120e2, 2) * 0.127249946128482324e-5 + pow(R - 0.120e2, 3) * (-0.411919139571636277e-6) : (R < 0.160e2 ? 0.129652214130482136e-4 + R * (-0.854103230503443742e-6) + pow(R - 0.140e2, 2) * (-0.119901537614499442e-5) + pow(R - 0.140e2, 3) * 0.439149966448358197e-6 : (R < 0.180e2 ? 0.410255015524997725e-5 + R * (-0.380365137703123584e-6) + pow(R - 0.160e2, 2) * 0.143588442254515455e-5 + pow(R - 0.160e2, 3) * (-0.368717677721796293e-6) : (R < 0.200e2 ? -0.168443136112868860e-4 + R * 0.938560419815938043e-6 + pow(R - 0.180e2, 2) * (-0.776421643785623632e-6) + pow(R - 0.180e2, 3) * 0.150324944451327291e-6 : (R < 0.250e2 ? 0.728834420371257886e-5 + R * (-0.363226821910628935e-6) + pow(R - 0.200e2, 2) * 0.125528022922340117e-6 + pow(R - 0.200e2, 3) * (-0.107270495968428666e-7) : -0.218312415933893005e-5 + R * 0.875246875495572004e-7 + pow(R - 0.250e2, 2) * (-0.353777210303028829e-7) + pow(R - 0.250e2, 3) * 0.354576026647828819e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.7618484960e1 * (R - 0.300e2) * (R - 0.250e2) + 0.8126330480e2 * R + 0.4774400284e4 - 0.4063165240e1 * R * R + 0.75000e3 * (0.1489861752e-1 * R - 0.6162657018e0) * R) * pow(R, -6));
}

static double radcoeff_8_6_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.469688612400002081e-3 + R * 0.433680868994201774e-18 + pow(R - 0.475e1, 2) * 0.136988264820364063e-1 + pow(R - 0.475e1, 3) * (-0.227864734737456276e-1) : (R < 0.525e1 ? -0.128542979287944916e-1 + R * 0.257694946469089799e-2 + pow(R - 0.50e1, 2) * (-0.339102862327281523e-2) + pow(R - 0.50e1, 3) * 0.464958305163689408e-2 : (R < 0.55e1 ? -0.866907066289114049e-2 + R * 0.175323197523640775e-2 + pow(R - 0.525e1, 2) * 0.961586654548553737e-4 + pow(R - 0.525e1, 3) * 0.206825567998053565e-3 : (R < 0.575e1 ? -0.913755429379908661e-2 + R * 0.184009110196347030e-2 + pow(R - 0.55e1, 2) * 0.251277841453395568e-3 + pow(R - 0.55e1, 3) * (-0.223994755722910915e-2) : (R < 0.60e1 ? -0.746432894333083283e-2 + R * 0.154573985570971009e-2 + pow(R - 0.575e1, 2) * (-0.142868282646843635e-2) + pow(R - 0.575e1, 3) * (-0.391492091348161816e-2) : (R < 0.625e1 ? 0.107554224781386738e-2 + R * 0.973507711976887794e-4 + pow(R - 0.60e1, 2) * (-0.436487351157965019e-2) + pow(R - 0.60e1, 3) * 0.894973231555772493e-4 : (R < 0.65e1 ? 0.143394860971279084e-1 + R * (-0.206830523650046536e-2) + pow(R - 0.625e1, 2) * (-0.429775051921296725e-2) + pow(R - 0.625e1, 3) * 0.932584438245931402e-2 : (R < 0.675e1 ? 0.168184093544728810e-1 + R * (-0.246858467439582761e-2) + pow(R - 0.65e1, 2) * 0.269663276763151827e-2 + pow(R - 0.65e1, 3) * (-0.664114046592830659e-3) : (R < 0.70e1 ? 0.871595586993451250e-2 + R * (-0.124478967431622400e-2) + pow(R - 0.675e1, 2) * 0.219854723268689527e-2 + pow(R - 0.675e1, 3) * (-0.184851856408799631e-2) : (R < 0.725e1 ? 0.355574727037493007e-2 + R * (-0.492113288739275730e-3) + pow(R - 0.70e1, 2) * 0.812158309620898038e-3 + pow(R - 0.70e1, 3) * (-0.517971150495179136e-3) : (R < 0.75e1 ? 0.135845702582837826e-2 + R * (-0.183153724646672881e-3) + pow(R - 0.725e1, 2) * 0.423679946749513686e-3 + pow(R - 0.725e1, 3) * (-0.406700404491288519e-3) : (R < 0.775e1 ? 0.361704972189244925e-3 + R * (-0.475700771140326551e-4) + pow(R - 0.75e1, 2) * 0.118654643381047243e-3 + pow(R - 0.75e1, 3) * (-0.210780263556664765e-4) : (R < 0.80e1 ? -0.603661928149271150e-4 + R * 0.780511463480349838e-5 + pow(R - 0.775e1, 2) * 0.102846123614297385e-3 + pow(R - 0.775e1, 3) * (-0.163418483750045528e-3) : (R < 0.825e1 ? -0.222748492729549262e-3 + R * 0.285872107388186576e-4 + pow(R - 0.80e1, 2) * (-0.197177391982367713e-4) + pow(R - 0.80e1, 3) * 0.156172156278485942e-4 : (R < 0.85e1 ? -0.166559038666855513e-3 + R * 0.216565690699218791e-4 + pow(R - 0.825e1, 2) * (-0.800482747735032397e-5) + pow(R - 0.825e1, 3) * (-0.293698598493487753e-4) : (R < 0.875e1 ? -0.866895135306974948e-4 + R * 0.121473066094938239e-4 + pow(R - 0.85e1, 2) * (-0.300322223643619088e-4) + pow(R - 0.85e1, 3) * (-0.299315017344535567e-4) : (R < 0.90e1 ? 0.914631357341002713e-4 + R * (-0.848096114789717431e-5) + pow(R - 0.875e1, 2) * (-0.524808486652020772e-4) + pow(R - 0.875e1, 3) * 0.789628613471630628e-4 : (R < 0.925e1 ? 0.192330867871146256e-3 + R * (-0.199158489779051395e-4) + pow(R - 0.90e1, 2) * 0.674129734517021990e-5 + pow(R - 0.90e1, 3) * (-0.362899951741986338e-4) : (R < 0.95e1 ? 0.223947127939460976e-3 + R * (-0.233495744004822696e-4) + pow(R - 0.925e1, 2) * (-0.204761990354787571e-4) + pow(R - 0.925e1, 3) * 0.821458544536313374e-4 : (R < 0.100e2 ? 0.174890536648574863e-3 + R * (-0.181853262081657749e-4) + pow(R - 0.95e1, 2) * 0.411331918047447425e-4 + pow(R - 0.95e1, 3) * (-0.350251049048263733e-4) : (R < 0.105e2 ? 0.321520652254081839e-4 + R * (-0.332096308204081827e-5) + pow(R - 0.100e2, 2) * (-0.114044655524948276e-4) + pow(R - 0.100e2, 3) * 0.182645577291529274e-4 : (R < 0.110e2 ? 0.749751473754498120e-5 + R * (-0.102701033767095067e-5) + pow(R - 0.105e2, 2) * 0.159923710412345636e-4 + pow(R - 0.105e2, 3) * (-0.129921764277853249e-4) : (R < 0.120e2 ? -0.588590404799708023e-4 + R * 0.522122838272461881e-5 + pow(R - 0.110e2, 2) * (-0.349589360044342506e-5) + pow(R - 0.110e2, 3) * 0.989932460718806401e-6 : (R < 0.140e2 ? -0.131011237949302484e-4 + R * 0.119923856399418746e-5 + pow(R - 0.120e2, 2) * (-0.526096218287005651e-6) + pow(R - 0.120e2, 3) * 0.262146531449559531e-7 : (R < 0.160e2 ? 0.100615350528010939e-4 + R * (-0.590570471414363794e-6) + pow(R - 0.140e2, 2) * (-0.368808299417269925e-6) + pow(R - 0.140e2, 3) * 0.128870638937225916e-6 : (R < 0.180e2 ? 0.847783545348771916e-5 + R * (-0.519356001836732404e-6) + pow(R - 0.160e2, 2) * 0.404415534206085568e-6 + pow(R - 0.160e2, 3) * (-0.835243854063596833e-7) : (R < 0.200e2 ? -0.164934870800328427e-5 + R * 0.960135101112935760e-7 + pow(R - 0.180e2, 2) * (-0.967307782320725583e-7) + pow(R - 0.180e2, 3) * 0.192167737882128781e-7 : (R < 0.250e2 ? 0.124389891876884160e-5 + R * (-0.603083173584420805e-7) + pow(R - 0.200e2, 2) * 0.185698644972047268e-7 + pow(R - 0.200e2, 3) * (-0.154019890990326249e-8) : -0.238972500771512963e-6 + R * 0.987540937086051703e-8 + pow(R - 0.250e2, 2) * (-0.453311915134420726e-8) + pow(R - 0.250e2, 3) * 0.465971821034420723e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1207442291e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1287936660e3 * R + 0.7566329384e4 - 0.6439683300e1 * R * R + 0.75000e3 * (0.2361160353e-1 * R - 0.976654029e0) * R) * pow(R, -6));
}

static double radcoeff_8_6_10_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.115304595399999999e-2 + R * 0.135525271560688054e-19 + pow(R - 0.475e1, 2) * 0.315166439558818741e-2 + pow(R - 0.475e1, 3) * (-0.107096015823527485e-1) : (R < 0.525e1 ? 0.334377794848523570e-2 + R * (-0.432218098897047182e-3) + pow(R - 0.50e1, 2) * (-0.488053679117637484e-2) + pow(R - 0.50e1, 3) * 0.639813153745825286e-2 : (R < 0.55e1 ? 0.965196354896201252e-2 + R * (-0.167283683121181208e-2) + pow(R - 0.525e1, 2) * (-0.819381380826850300e-4) + pow(R - 0.525e1, 3) * 0.926124629197303402e-4 : (R < 0.575e1 ? 0.977811276240637961e-2 + R * (-0.169644106345570524e-2) + pow(R - 0.55e1, 2) * (-0.124787908928872732e-4) + pow(R - 0.55e1, 3) * (-0.267238618273716883e-2) : (R < 0.60e1 ? 0.126526196809308676e-1 + R * (-0.220375286816536838e-2) + pow(R - 0.575e1, 2) * (-0.201676842794576427e-2) + pow(R - 0.575e1, 3) * 0.420770512562894730e-2 : (R < 0.625e1 ? 0.139089540642969370e-1 + R * (-0.242319237108282268e-2) + pow(R - 0.60e1, 2) * 0.113901041627594620e-2 + pow(R - 0.60e1, 3) * 0.740117388502137697e-2 : (R < 0.65e1 ? 0.186312735989588329e-2 + R * (-0.465967059503341347e-3) + pow(R - 0.625e1, 2) * 0.668989083004197915e-2 + pow(R - 0.625e1, 3) * (-0.737010314251445274e-2) : (R < 0.675e1 ? -0.105937443175252201e-1 + R * 0.149708401629618779e-2 + pow(R - 0.65e1, 2) * 0.116231347315613894e-2 + pow(R - 0.65e1, 3) * (-0.357257124776355845e-2) : (R < 0.70e1 ? -0.997819363765048428e-2 + R * 0.140838364391859014e-2 + pow(R - 0.675e1, 2) * (-0.151711496266653022e-2) + pow(R - 0.675e1, 3) * 0.646486072768679581e-3 : (R < 0.725e1 ? -0.560152257910616781e-2 + R * 0.771042301229452509e-3 + pow(R - 0.70e1, 2) * (-0.103225040809002051e-2) + pow(R - 0.70e1, 3) * 0.473421555088841665e-3 : (R < 0.75e1 ? -0.256029071488610063e-2 + R * 0.343683638763600074e-3 + pow(R - 0.725e1, 2) * (-0.677184241773389232e-3) + pow(R - 0.725e1, 3) * 0.618332676475955197e-3 : (R < 0.775e1 ? -0.923042701571103190e-3 + R * 0.121028894716147098e-3 + pow(R - 0.75e1, 2) * (-0.213434734416422780e-3) + pow(R - 0.75e1, 3) * 0.274102721273376555e-4 : (R < 0.80e1 ? -0.148725042793539298e-3 + R * 0.194509535318115218e-4 + pow(R - 0.775e1, 2) * (-0.192877030320919539e-3) + pow(R - 0.775e1, 3) * 0.336304738758693756e-3 : (R < 0.825e1 ? 0.111525917499845278e-3 + R * (-0.139304231113931598e-4) + pow(R - 0.80e1, 2) * 0.593515237481007920e-4 + pow(R - 0.80e1, 3) * (-0.114691793754112585e-3) : (R < 0.85e1 ? 0.460321614594707347e-4 + R * (-0.575937256623887693e-5) + pow(R - 0.825e1, 2) * (-0.266673215674836503e-4) + pow(R - 0.825e1, 3) * 0.736560425937566205e-4 : (R < 0.875e1 ? 0.414631283050363267e-4 + R * (-0.528252536365133321e-5) + pow(R - 0.85e1, 2) * 0.285747103778338184e-4 + pow(R - 0.85e1, 3) * (-0.524101308609139236e-4) : (R < 0.90e1 ? 0.340115244961313404e-5 + R * (-0.822069711155786789e-6) + pow(R - 0.875e1, 2) * (-0.107328877678516259e-4) + pow(R - 0.875e1, 3) * (-0.113251006210090876e-5) : (R < 0.925e1 ? 0.529217571795296778e-4 + R * (-0.640085923172552016e-5) + pow(R - 0.90e1, 2) * (-0.115822703144273075e-4) + pow(R - 0.90e1, 3) * 0.930399405173175386e-4 : (R < 0.95e1 ? -0.541465322750352791e-4 + R * 0.525299445805786797e-5 + pow(R - 0.925e1, 2) * 0.581976850735608532e-4 + pow(R - 0.925e1, 3) * (-0.127142476007169292e-3) : (R < 0.100e2 ? -0.102462246857193482e-3 + R * 0.105126227434940506e-4 + pow(R - 0.95e1, 2) * (-0.371591719318161161e-4) + pow(R - 0.95e1, 3) * 0.326369476976560318e-4 : (R < 0.105e2 ? 0.191421902078004250e-4 + R * (-0.216883841508004250e-5) + pow(R - 0.100e2, 2) * 0.117962496146679350e-4 + pow(R - 0.100e2, 3) * (-0.585206433701569718e-5) : (R < 0.110e2 ? -0.564158697306742473e-4 + R * 0.523836294682611860e-5 + pow(R - 0.105e2, 2) * 0.301815310914438842e-5 + pow(R - 0.105e2, 3) * (-0.813687431759325074e-5) : (R < 0.120e2 ? -0.227489118233312663e-4 + R * 0.215386031777556939e-5 + pow(R - 0.110e2, 2) * (-0.918715836724548726e-5) + pow(R - 0.110e2, 3) * 0.415165142646991712e-5 : (R < 0.140e2 ? 0.432479306966678263e-4 + R * (-0.376550213730565206e-5) + pow(R - 0.120e2, 2) * 0.326779591216426623e-5 + pow(R - 0.120e2, 3) * (-0.613322903005720104e-6) : (R < 0.160e2 ? -0.285457922549588027e-4 + R * 0.194580667528277161e-5 + pow(R - 0.140e2, 2) * (-0.412141505870054657e-6) + pow(R - 0.140e2, 3) * (-0.210123151356655326e-7) : (R < 0.180e2 ? 0.489640827069390122e-7 + R * 0.450928701745663142e-7 + pow(R - 0.160e2, 2) * (-0.538215396684047860e-6) + pow(R - 0.160e2, 3) * 0.144936490810882321e-6 : (R < 0.200e2 ? 0.650082096855866515e-5 + R * (-0.368530826831036952e-6) + pow(R - 0.180e2, 2) * 0.331403548181246173e-6 + pow(R - 0.180e2, 3) * (-0.649129895453638374e-7) : (R < 0.250e2 ? -0.362603511869163100e-5 + R * 0.178127491349581560e-6 + pow(R - 0.200e2, 2) * (-0.580743890909368908e-7) + pow(R - 0.200e2, 3) * 0.489115115220411452e-8 : 0.881187910411968457e-6 + R * (-0.357800631444787377e-7) + pow(R - 0.250e2, 2) * 0.152928781921248279e-7 + pow(R - 0.250e2, 3) * (-0.155058848544581591e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2031529334e2 * (R - 0.300e2) * (R - 0.250e2) - 0.2166969244e3 * R - 0.1273078124e5 + 0.1083484622e2 * R * R + 0.75000e3 * (-0.3972745886e-1 * R + 0.1643267926e1) * R) * pow(R, -6));
}

static double radcoeff_8_6_12_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.166097929799999995e-1 + pow(R - 0.475e1, 2) * 0.700347684964185146e-1 + pow(R - 0.475e1, 3) * (-0.116068906945674066e0) : (R < 0.525e1 ? -0.803185175994768630e-1 + R * 0.132544641958953699e-1 + pow(R - 0.50e1, 2) * (-0.170169117128370351e-1) + pow(R - 0.50e1, 3) * 0.227085006770222017e-1 : (R < 0.55e1 ? -0.587115413661972035e-1 + R * 0.900385221641851474e-2 + pow(R - 0.525e1, 2) * 0.144637949296179402e-4 + pow(R - 0.525e1, 3) * (-0.112965015864146950e-1) : (R < 0.575e1 ? -0.472774033913681349e-1 + R * 0.689299006643056926e-2 + pow(R - 0.55e1, 2) * (-0.845791239488140334e-2) + pow(R - 0.55e1, 3) * 0.165474076846365038e-1 : (R < 0.60e1 ? -0.410711454456904740e-1 + R * 0.576667280985921227e-2 + pow(R - 0.575e1, 2) * 0.395264336859597627e-2 + pow(R - 0.575e1, 3) * (-0.760020800131303909e-3) : (R < 0.625e1 ? -0.518388872657954830e-1 + R * 0.760049059413257962e-2 + pow(R - 0.60e1, 2) * 0.338262776849749831e-2 + pow(R - 0.60e1, 3) * (-0.489768900111260176e-3) : (R < 0.65e1 ? -0.616318895160654287e-1 + R * 0.919997280961046791e-2 + pow(R - 0.625e1, 2) * 0.301530109341405315e-2 + pow(R - 0.625e1, 3) * (-0.171944454874236943e-1) : (R < 0.675e1 ? -0.505560945242660847e-1 + R * 0.748366482742555093e-2 + pow(R - 0.65e1, 2) * (-0.988053302215372020e-2) + pow(R - 0.65e1, 3) * 0.435188729780606066e-2 : (R < 0.70e1 ? -0.232666880103394591e-1 + R * 0.335937718468732769e-2 + pow(R - 0.675e1, 2) * (-0.661661754879917449e-2) + pow(R - 0.675e1, 3) * 0.552717420979945313e-2 : (R < 0.725e1 ? -0.769011923970596995e-2 + R * 0.108741357462513845e-2 + pow(R - 0.70e1, 2) * (-0.247123689144958377e-2) + pow(R - 0.70e1, 3) * 0.209482482299611691e-2 : (R < 0.75e1 ? -0.170125866981786066e-2 + R * 0.244574783212118702e-3 + pow(R - 0.725e1, 2) * (-0.900118274202495769e-3) + pow(R - 0.725e1, 3) * 0.847040413096084108e-3 : (R < 0.775e1 ? 0.440011891842100847e-3 + R * (-0.466642764336134527e-4) + pow(R - 0.75e1, 2) * (-0.264837964380432687e-3) + pow(R - 0.75e1, 3) * 0.335949219979545855e-3 : (R < 0.80e1 ? 0.966779627321903267e-3 + R * (-0.116092779877664942e-3) + pow(R - 0.775e1, 2) * (-0.128760493957732502e-4) + pow(R - 0.775e1, 3) * 0.667035748257321541e-4 : (R < 0.825e1 ? 0.918465952935814279e-3 + R * (-0.110023884295726786e-3) + pow(R - 0.80e1, 2) * 0.371516317235258704e-4 + pow(R - 0.80e1, 3) * 0.154004522317525207e-3 : (R < 0.85e1 ? 0.531718024260280017e-3 + R * (-0.625722204994278765e-4) + pow(R - 0.825e1, 2) * 0.152655023461669776e-3 + pow(R - 0.825e1, 3) * (-0.171827189599833060e-3) : (R < 0.875e1 ? 0.163639897101774360e-3 + R * (-0.184623068185616906e-4) + pow(R - 0.85e1, 2) * 0.237846312617949674e-4 + pow(R - 0.85e1, 3) * 0.304466237938071964e-4 : (R < 0.90e1 ? 0.115929111203468601e-4 + R * (-0.861249226325355477e-6) + pow(R - 0.875e1, 2) * 0.466195991071503664e-4 + pow(R - 0.875e1, 3) * (-0.418174072713957764e-4) : (R < 0.925e1 ? -0.125368082135768073e-3 + R * 0.146077864638631188e-4 + pow(R - 0.90e1, 2) * 0.152565436536035290e-4 + pow(R - 0.90e1, 3) * (-0.681611109962240258e-4) : (R < 0.95e1 ? -0.778241530305741260e-4 + R * 0.945584997887287930e-5 + pow(R - 0.925e1, 2) * (-0.358642895935644887e-4) + pow(R - 0.925e1, 3) * 0.705856499762918805e-4 : (R < 0.100e2 ? -0.343380838001309467e-4 + R * 0.475851455264536256e-5 + pow(R - 0.95e1, 2) * 0.170749478886544183e-4 + pow(R - 0.95e1, 3) * (-0.379371396678902830e-4) : (R < 0.105e2 ? 0.789675793361793081e-4 + R * (-0.661939230961793133e-5) + pow(R - 0.100e2, 2) * (-0.398307616131810129e-4) + pow(R - 0.100e2, 3) * 0.438260092808337480e-4 : (R < 0.110e2 ? 0.147581313944823136e-3 + R * (-0.135806469621736315e-4) + pow(R - 0.105e2, 2) * 0.259082523080696159e-4 + pow(R - 0.105e2, 3) * (-0.195818875514447041e-4) : (R < 0.120e2 ? 0.281704379885629828e-4 + R * (-0.235881031768754408e-5) + pow(R - 0.110e2, 2) * (-0.346457901909744061e-5) + pow(R - 0.110e2, 3) * 0.227032979978498470e-5 : (R < 0.140e2 ? 0.283942124353296587e-4 + R * (-0.247697895652747162e-5) + pow(R - 0.120e2, 2) * 0.334641038025751349e-5 + pow(R - 0.120e2, 3) * (-0.836158351996888790e-6) : (R < 0.160e2 ? -0.118337910184588271e-4 + R * 0.874762340539916215e-6 + pow(R - 0.140e2, 2) * (-0.167053973172381968e-5) + pow(R - 0.140e2, 3) * 0.444274651851930787e-6 : (R < 0.180e2 ? 0.665205694441508839e-5 + R * (-0.476100764132193044e-6) + pow(R - 0.160e2, 2) * 0.995108179387765046e-6 + pow(R - 0.160e2, 3) * (-0.245510220910834258e-6) : (R < 0.200e2 ? -0.994917330489940511e-5 + R * 0.558209302488855830e-6 + pow(R - 0.180e2, 2) * (-0.477953146077240609e-6) + pow(R - 0.180e2, 3) * 0.929943589414063212e-7 : (R < 0.250e2 ? 0.480057452256461178e-5 + R * (-0.237670974523230565e-6) + pow(R - 0.200e2, 2) * 0.800130075711973715e-7 + pow(R - 0.200e2, 3) * (-0.679389291491025158e-8) : -0.131303957986185779e-5 + R * 0.529171325704743067e-7 + pow(R - 0.250e2, 2) * (-0.218953861524563906e-7) + pow(R - 0.250e2, 3) * 0.220535996047230540e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1508961027e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1609569724e3 * R + 0.9455827360e4 - 0.8047848620e1 * R * R + 0.75000e3 * (0.2950802633e-1 * R - 0.1220549017e1) * R) * pow(R, -6));
}

static double radcoeff_8_6_12_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.521492758800000140e-2 + R * (-0.433680868994201774e-18) + pow(R - 0.475e1, 2) * (-0.184556637382681590e-1) + pow(R - 0.475e1, 3) * 0.359164496410726355e-1 : (R < 0.525e1 ? 0.170901309371647991e-1 + R * (-0.249349756143295992e-2) + pow(R - 0.50e1, 2) * 0.848167349253632109e-2 + pow(R - 0.50e1, 3) * (-0.141640696912179211e-1) : (R < 0.55e1 ? 0.907728512590784235e-2 + R * (-0.908423882268160439e-3) + pow(R - 0.525e1, 2) * (-0.214137877587712057e-2) + pow(R - 0.525e1, 3) * 0.281046739579904900e-2 : (R < 0.575e1 ? 0.119778596372191945e-1 + R * (-0.145215063349439901e-2) + pow(R - 0.55e1, 2) * (-0.335282290278338157e-4) + pow(R - 0.55e1, 3) * 0.269164625202171709e-2 : (R < 0.60e1 ? 0.921228363858690030e-2 + R * (-0.964231075754243662e-3) + pow(R - 0.575e1, 2) * 0.198520645998845422e-2 + pow(R - 0.575e1, 3) * (-0.315739371588591661e-2) : (R < 0.625e1 ? 0.688347331593175751e-2 + R * (-0.563639167488626160e-3) + pow(R - 0.60e1, 2) * (-0.382838826925983291e-3) + pow(R - 0.60e1, 3) * (-0.985599254047804865e-2) : (R < 0.65e1 ? 0.194519085983203277e-1 + R * (-0.260305718229125261e-2) + pow(R - 0.625e1, 2) * (-0.777483323228452070e-2) + pow(R - 0.625e1, 3) * 0.102370379257981162e-1 : (R < 0.675e1 ? 0.319177532717513784e-1 + R * (-0.457102918734636574e-2) + pow(R - 0.65e1, 2) * (-0.970547879359332113e-4) + pow(R - 0.65e1, 3) * 0.534705018128558713e-2 : (R < 0.70e1 ? 0.255554345301821709e-1 + R * (-0.361698467232328446e-2) + pow(R - 0.675e1, 2) * 0.391323284802825699e-2 + pow(R - 0.675e1, 3) * (-0.141491372934047588e-2) : (R < 0.725e1 ? 0.139386628578234695e-1 + R * (-0.192566457256049565e-2) + pow(R - 0.70e1, 2) * 0.285204755102289997e-2 + pow(R - 0.70e1, 3) * (-0.159396719352367230e-2) : (R < 0.75e1 ? 0.592013687360182228e-2 + R * (-0.798509645834734197e-3) + pow(R - 0.725e1, 2) * 0.165657215588014563e-2 + pow(R - 0.725e1, 3) * (-0.140004038936483656e-2) : (R < 0.775e1 ? 0.175845821530426125e-2 + R * (-0.232731140900568168e-3) + pow(R - 0.75e1, 2) * 0.606541863856518049e-3 + pow(R - 0.75e1, 3) * (-0.474782319096981134e-3) : (R < 0.80e1 ? 0.128516943053196800e-3 + R * (-0.184818938029931336e-4) + pow(R - 0.775e1, 2) * 0.250455124533782172e-3 + pow(R - 0.775e1, 3) * (-0.502840747687238461e-3) : (R < 0.825e1 ? -0.111245874950325837e-3 + R * 0.124630282725407289e-4 + pow(R - 0.80e1, 2) * (-0.126675436231646701e-3) + pow(R - 0.80e1, 3) * 0.321958292245935144e-3 : (R < 0.85e1 ? -0.896255502608492657e-4 + R * 0.949248995283021441e-5 + pow(R - 0.825e1, 2) * 0.114793282952804657e-3 + pow(R - 0.825e1, 3) * (-0.247557166640502045e-3) : (R < 0.875e1 ? -0.179646269021176450e-3 + R * 0.204721626841384043e-4 + pow(R - 0.85e1, 2) * (-0.708745920275718767e-4) + pow(R - 0.85e1, 3) * 0.911157814200730279e-4 : (R < 0.90e1 ? -0.220627357098913814e-4 + R * 0.211907568661615788e-5 + pow(R - 0.875e1, 2) * (-0.253775596251710832e-5) + pow(R - 0.875e1, 3) * 0.813801216209907058e-6 : (R < 0.925e1 ? -0.121620175345726536e-4 + R * 0.100278543339696151e-5 + pow(R - 0.90e1, 2) * (-0.192740505035967800e-5) + pow(R - 0.90e1, 3) * 0.387255048308732829e-5 : (R < 0.95e1 ? -0.100241781351129676e-4 + R * 0.765186123795996515e-6 + pow(R - 0.925e1, 2) * 0.977007811955818433e-6 + pow(R - 0.925e1, 3) * (-0.185435324925592172e-4) : (R < 0.100e2 ? 0.181370223035189994e-4 + R * (-0.222322231258094749e-5) + pow(R - 0.95e1, 2) * (-0.129306415574635957e-4) + pow(R - 0.95e1, 3) * 0.188098009492509799e-4 : (R < 0.105e2 ? 0.548849548806309103e-5 + R * (-0.104651315810630913e-5) + pow(R - 0.100e2, 2) * 0.152840598664128742e-4 + pow(R - 0.100e2, 3) * (-0.912682528440050962e-5) : (R < 0.110e2 ? -0.804402221885649056e-4 + R * 0.739242774500618154e-5 + pow(R - 0.105e2, 2) * 0.159382193981210931e-5 + pow(R - 0.105e2, 3) * (-0.628590144364894717e-5) : (R < 0.120e2 ? -0.465008588121973543e-4 + R * 0.427182360208157793e-5 + pow(R - 0.110e2, 2) * (-0.783503022566131272e-5) + pow(R - 0.110e2, 3) * 0.328794211567973451e-5 : (R < 0.140e2 ? 0.186268623292221356e-4 + R * (-0.153441050220184441e-5) + pow(R - 0.120e2, 2) * 0.202879612137788995e-5 + pow(R - 0.120e2, 3) * (-0.576351088700983846e-6) : (R < 0.160e2 ? 0.534563820972927093e-5 + R * (-0.335439081102090757e-6) + pow(R - 0.140e2, 2) * (-0.142931041082801291e-5) + pow(R - 0.140e2, 3) * 0.469917242314529078e-6 : (R < 0.180e2 ? 0.463949027323669233e-5 + R * (-0.413673816639793257e-6) + pow(R - 0.160e2, 2) * 0.139019304305916177e-5 + pow(R - 0.160e2, 3) * (-0.352897473119632586e-6) : (R < 0.200e2 ? -0.164909622457027277e-4 + R * 0.912328678161262778e-6 + pow(R - 0.180e2, 2) * (-0.727191795658633856e-6) + pow(R - 0.180e2, 3) * 0.140016336964001212e-6 : (R < 0.250e2 ? 0.629182404870515624e-5 + R * (-0.316242460905257788e-6) + pow(R - 0.200e2, 2) * 0.112906226125373560e-6 + pow(R - 0.200e2, 3) * (-0.972275320486439890e-8) : -0.209725872099119413e-5 + R * 0.836133099836477595e-7 + pow(R - 0.250e2, 2) * (-0.329350719475924436e-7) + pow(R - 0.250e2, 3) * 0.328242643337257730e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1056805421e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1127260888e3 * R - 0.6622726518e4 + 0.5636304440e1 * R * R + 0.75000e3 * (-0.2066658065e-1 * R + 0.854846714e0) * R) * pow(R, -6));
}

static double radcoeff_8_6_14_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.263083089200000057e-2 + R * 0.108420217248550443e-18 + pow(R - 0.475e1, 2) * 0.808138877598922438e-2 + pow(R - 0.475e1, 3) * (-0.170761568319568943e-1) : (R < 0.525e1 ? -0.658713395401346914e-2 + R * 0.838914982002693745e-3 + pow(R - 0.50e1, 2) * (-0.472572884797844896e-2) + pow(R - 0.50e1, 3) * 0.227241078387069653e-2 : (R < 0.55e1 ? 0.332114827205656901e-2 + R * (-0.109787242001077503e-2) + pow(R - 0.525e1, 2) * (-0.302142076007542656e-2) + pow(R - 0.525e1, 3) * 0.156491338564741060e-1 : (R < 0.575e1 ? -0.445243500822223651e-2 + R * 0.325629798040406567e-3 + pow(R - 0.55e1, 2) * 0.871542963228015381e-2 + pow(R - 0.55e1, 3) * (-0.269609644497671164e-1) : (R < 0.60e1 ? -0.318556121132602434e-3 + R * (-0.371836220150851713e-3) + pow(R - 0.575e1, 2) * (-0.115052937050451852e-1) + pow(R - 0.575e1, 3) * 0.154495063425943678e-1 : (R < 0.625e1 ? 0.163389480386219969e-1 + R * (-0.322770063343699991e-2) + pow(R - 0.60e1, 2) * 0.818360519005914571e-4 + pow(R - 0.60e1, 3) * (-0.202401906461036627e-2) : (R < 0.65e1 ? 0.184285971731321767e-1 + R * (-0.356628618210114851e-2) + pow(R - 0.625e1, 2) * (-0.143617824655718328e-2) + pow(R - 0.625e1, 3) * 0.169885651798471066e-1 : (R < 0.675e1 ? 0.256704785202964501e-2 + R * (-0.109901933415840702e-2) + pow(R - 0.65e1, 2) * 0.113052456383281475e-1 + pow(R - 0.65e1, 3) * (-0.754524907877807561e-2) : (R < 0.70e1 ? -0.254500169764597522e-1 + R * 0.313886928273477772e-2 + pow(R - 0.675e1, 2) * 0.564630882924459059e-2 + pow(R - 0.675e1, 3) * (-0.814860848073479735e-2) : (R < 0.725e1 ? -0.342914769535350855e-1 + R * 0.443415960721929830e-2 + pow(R - 0.70e1, 2) * (-0.465147531306508457e-3) + pow(R - 0.70e1, 3) * (-0.205427040628273702e-2) : (R < 0.75e1 ? -0.298739630148132269e-1 + R * 0.381641014038803118e-2 + pow(R - 0.725e1, 2) * (-0.200585033601856149e-2) + pow(R - 0.725e1, 3) * (-0.284210694134248904e-3) : (R < 0.775e1 ? -0.220821594042143396e-1 + R * 0.276019546722857875e-2 + pow(R - 0.75e1, 2) * (-0.221900835661924820e-2) + pow(R - 0.75e1, 3) * 0.684448242019739363e-3 : (R < 0.80e1 ? -0.146060843925068309e-1 + R * 0.177902533429765558e-2 + pow(R - 0.775e1, 2) * (-0.170567217510444362e-2) + pow(R - 0.775e1, 3) * 0.774947479655281970e-3 : (R < 0.825e1 ? -0.904031286814639332e-2 + R * 0.107149189918079920e-2 + pow(R - 0.80e1, 2) * (-0.112446156536298212e-2) + pow(R - 0.80e1, 3) * 0.426695272959140581e-3 : (R < 0.85e1 ? -0.512556489557796334e-2 + R * 0.589266480179147061e-3 + pow(R - 0.825e1, 2) * (-0.804440110643626655e-3) + pow(R - 0.825e1, 3) * 0.614703895708154429e-3 : (R < 0.875e1 ? -0.272705151767220792e-2 + R * 0.302303405302612675e-3 + pow(R - 0.85e1, 2) * (-0.343412188862510779e-3) + pow(R - 0.85e1, 3) * 0.207971224208240479e-3 : (R < 0.90e1 ? -0.158403969254102103e-2 + R * 0.169591915410402397e-3 + pow(R - 0.875e1, 2) * (-0.187433770706330413e-3) + pow(R - 0.875e1, 3) * 0.566685776988830751e-4 : (R < 0.925e1 ? -0.847045113371999768e-3 + R * 0.865003883757777610e-4 + pow(R - 0.90e1, 2) * (-0.144932337432168105e-3) + pow(R - 0.90e1, 3) * 0.253061145956228178e-3 : (R < 0.95e1 ? -0.620740168449999984e-3 + R * 0.614831845264864920e-4 + pow(R - 0.925e1, 2) * 0.448635220350030624e-4 + pow(R - 0.925e1, 3) * (-0.122445348403796153e-3) : (R < 0.100e2 ? -0.614845359713624378e-3 + R * 0.609564427182762410e-4 + pow(R - 0.95e1, 2) * (-0.469704892678440595e-4) + pow(R - 0.95e1, 3) * 0.264205285425831654e-4 : (R < 0.105e2 ? -0.351734487353695571e-3 + R * 0.338013498573695598e-4 + pow(R - 0.100e2, 2) * (-0.733969645396930803e-5) + pow(R - 0.100e2, 3) * (-0.120442390815396307e-4) : (R < 0.110e2 ? -0.183159745816578051e-3 + R * 0.174284740922455300e-4 + pow(R - 0.105e2, 2) * (-0.254060550762787533e-4) + pow(R - 0.105e2, 3) * 0.131113353355753820e-4 : (R < 0.120e2 ? -0.165742533481314761e-4 + R * 0.185592051764831614e-5 + pow(R - 0.110e2, 2) * (-0.573905207291568034e-5) + pow(R - 0.110e2, 3) * 0.224339020426736428e-5 : (R < 0.140e2 ? 0.369052871795714168e-4 + R * (-0.289201301538095127e-5) + pow(R - 0.120e2, 2) * 0.991118539886412506e-6 + pow(R - 0.120e2, 3) * (-0.156040480347968395e-6) : (R < 0.160e2 ? 0.103335999612529103e-4 + R * (-0.800024620010922189e-6) + pow(R - 0.140e2, 2) * 0.548756577986020528e-7 + pow(R - 0.140e2, 3) * 0.827617690909295223e-7 : (R < 0.180e2 ? -0.818710501939424601e-5 + R * 0.412619240274640369e-6 + pow(R - 0.160e2, 2) * 0.551446272344179193e-6 + pow(R - 0.160e2, 3) * (-0.171294902740749676e-6) : (R < 0.200e2 ? -0.100561117685225004e-4 + R * 0.562865496762361129e-6 + pow(R - 0.180e2, 2) * (-0.476323144100318919e-6) + pow(R - 0.180e2, 3) * 0.925239829220691900e-7 : (R < 0.250e2 ? 0.467888314518168640e-5 + R * (-0.232139284574084319e-6) + pow(R - 0.200e2, 2) * 0.788207534320961817e-7 + pow(R - 0.200e2, 3) * (-0.670679520105586313e-8) : -0.131889477519219409e-5 + R * 0.530586096676877595e-7 + pow(R - 0.250e2, 2) * (-0.217811745837417694e-7) + pow(R - 0.250e2, 3) * 0.219022916124084306e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1155118518e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1232122304e3 * R + 0.7238980928e4 - 0.6160611520e1 * R * R + 0.75000e3 * (0.2258940869e-1 * R - 0.934386901e0) * R) * pow(R, -6));
}

static double radcoeff_8_8_14_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.228711665900000046e-2 + R * 0.108420217248550443e-18 + pow(R - 0.475e1, 2) * (-0.957399454376274550e-2) + pow(R - 0.475e1, 3) * 0.256184280310509799e-1 : (R < 0.525e1 ? -0.256749329970343190e-2 + R * 0.164579839406864097e-4 + pow(R - 0.50e1, 2) * 0.963982647952548941e-2 + pow(R - 0.50e1, 3) * (-0.170935207651529350e-1) : (R < 0.55e1 ? -0.107102004122455897e-1 + R * 0.163133608023725515e-2 + pow(R - 0.525e1, 2) * (-0.318031409433921315e-2) + pow(R - 0.525e1, 3) * 0.255552728556076962e-2 : (R < 0.575e1 ? -0.475856368310661158e-2 + R * 0.520340399110292987e-3 + pow(R - 0.55e1, 2) * (-0.126366863016863593e-2) + pow(R - 0.55e1, 3) * 0.206407696690985489e-2 : (R < 0.60e1 ? -0.339757743809904460e-2 + R * 0.275520515321572975e-3 + pow(R - 0.575e1, 2) * 0.284389095013755562e-3 + pow(R - 0.575e1, 3) * (-0.253765777200189440e-3) : (R < 0.625e1 ? -0.395144899562049120e-2 + R * 0.370133979603415179e-3 + pow(R - 0.60e1, 2) * 0.940647621136134546e-4 + pow(R - 0.60e1, 3) * 0.643051830189090429e-2 : (R < 0.65e1 ? -0.116748091161547902e-1 + R * 0.162288854226476657e-2 + pow(R - 0.625e1, 2) * 0.491695348853179136e-2 + pow(R - 0.625e1, 3) * (-0.815213182076343114e-2) : (R < 0.675e1 ? -0.175395647639938687e-1 + R * 0.255284057013751859e-2 + pow(R - 0.65e1, 2) * (-0.119714537704078200e-2) + pow(R - 0.65e1, 3) * (-0.179350923323717522e-2) : (R < 0.70e1 ? -0.113321341609998131e-1 + R * 0.161798490038515732e-2 + pow(R - 0.675e1, 2) * (-0.254227730196866352e-2) + pow(R - 0.675e1, 3) * 0.187473490411213550e-2 : (R < 0.725e1 ? -0.502435276425295795e-2 + R * 0.698359043921851141e-3 + pow(R - 0.70e1, 2) * (-0.113622612388456184e-2) + pow(R - 0.70e1, 3) * 0.720731274388630369e-3 : (R < 0.75e1 ? -0.194502984785392772e-2 + R * 0.265383095927438305e-3 + pow(R - 0.725e1, 2) * (-0.595677668093089066e-3) + pow(R - 0.725e1, 3) * 0.503754619133343039e-3 : (R < 0.775e1 ? -0.449002213992967221e-3 + R * 0.619982529683956325e-4 + pow(R - 0.75e1, 2) * (-0.217861703743081760e-3) + pow(R - 0.75e1, 3) * 0.241409861237996899e-3 : (R < 0.80e1 ? 0.345688559979114674e-4 + R * (-0.166824992102083416e-5) + pow(R - 0.775e1, 2) * (-0.368043078145840859e-4) + pow(R - 0.775e1, 3) * 0.866926839466967321e-5 : (R < 0.825e1 ? 0.166617372744498496e-3 + R * (-0.184449160043123132e-4) + pow(R - 0.80e1, 2) * (-0.303023565185818301e-4) + pow(R - 0.80e1, 3) * 0.657060168633242787e-4 : (R < 0.85e1 ? 0.189108357779271873e-3 + R * (-0.212762161017299226e-4) + pow(R - 0.825e1, 2) * 0.189771561289113789e-4 + pow(R - 0.825e1, 3) * (-0.755278559759667533e-4) : (R < 0.875e1 ? 0.228833914201527993e-3 + R * (-0.259491110327680002e-4) + pow(R - 0.85e1, 2) * (-0.376687358530636895e-4) + pow(R - 0.85e1, 3) * 0.172452490624542778e-3 : (R < 0.90e1 ? 0.111045040302983137e-3 + R * (-0.124486369671980724e-4) + pow(R - 0.875e1, 2) * 0.916706321153434075e-4 + pow(R - 0.875e1, 3) * (-0.184176968858204473e-3) : (R < 0.925e1 ? 0.121774801009574031e-4 + R * (-0.114650257043971149e-5) + pow(R - 0.90e1, 2) * (-0.464620945283099538e-4) + pow(R - 0.90e1, 3) * 0.816580877202751861e-4 : (R < 0.95e1 ? 0.838109481172485829e-4 + R * (-0.906665838704309013e-5) + pow(R - 0.925e1, 2) * 0.147814712618964375e-4 + pow(R - 0.925e1, 3) * 0.734225477710367572e-5 : (R < 0.100e2 ? 0.155913298618535965e-5 + R * (-0.299249985387932601e-6) + pow(R - 0.95e1, 2) * 0.202881623447241943e-4 + pow(R - 0.95e1, 3) * (-0.193837668598966597e-4) : (R < 0.105e2 ? -0.532951692831376621e-4 + R * 0.545108721441376605e-5 + pow(R - 0.100e2, 2) * (-0.878748794512079699e-5) + pow(R - 0.100e2, 3) * 0.337943502458652859e-5 : (R < 0.110e2 ? 0.105859607138049109e-4 + R * (-0.801824462267134394e-6) + pow(R - 0.105e2, 2) * (-0.371833540824100348e-5) + pow(R - 0.105e2, 3) * 0.510797295355054482e-5 : (R < 0.120e2 ? 0.905578610479752066e-5 + R * (-0.689180155345229256e-6) + pow(R - 0.110e2, 2) * 0.394362402208481333e-5 + pow(R - 0.110e2, 3) * (-0.212810809673958400e-5) : (R < 0.140e2 ? -0.716378301726773996e-5 + R * 0.813743598605644977e-6 + pow(R - 0.120e2, 2) * (-0.244070026813393868e-5) + pow(R - 0.120e2, 3) * 0.639925897415558102e-6 : (R < 0.160e2 ? 0.173644873392077851e-4 + R * (-0.126994670494341314e-5) + pow(R - 0.140e2, 2) * 0.139885511635940972e-5 + pow(R - 0.140e2, 3) * (-0.318558229706351571e-6) : (R < 0.180e2 ? -0.795210537638810931e-5 + R * 0.502775004018006797e-6 + pow(R - 0.160e2, 2) * (-0.512494261878699807e-6) + pow(R - 0.160e2, 3) * 0.113089103922348170e-6 : (R < 0.200e2 ? 0.337497081551505404e-5 + R * (-0.190132796428614104e-6) + pow(R - 0.180e2, 2) * 0.166040361655389290e-6 + pow(R - 0.180e2, 3) * (-0.323945913330411112e-7) : (R < 0.250e2 ? -0.172855148102899344e-5 + R * 0.852935541964496708e-7 + pow(R - 0.200e2, 2) * (-0.283271863428573866e-7) + pow(R - 0.200e2, 3) * 0.239708722151349037e-8 : 0.450162808465310268e-6 + R * (-0.181967676186124103e-7) + pow(R - 0.250e2, 2) * 0.762912197984496603e-8 + pow(R - 0.250e2, 3) * (-0.770521964024496710e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.7257727072e1 * (R - 0.300e2) * (R - 0.250e2) - 0.7741589484e2 * R - 0.4548140608e4 + 0.3870794742e1 * R * R + 0.75000e3 * (-0.1419283174e-1 * R + 0.5870660082e0) * R) * pow(R, -6));
}

static double radcoeff_10_0_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.207732919299999999e-1 + pow(R - 0.475e1, 2) * (-0.191798680445756986e0) + pow(R - 0.475e1, 3) * 0.350306240503027944e0 : (R < 0.525e1 ? 0.165344010052803775e0 + R * (-0.302169201285607536e-1) + pow(R - 0.50e1, 2) * 0.709309999315139855e-1 + pow(R - 0.50e1, 3) * (-0.927939401330839103e-1) : (R < 0.55e1 ? 0.734774522322242107e-1 + R * (-0.121502839377569932e-1) + pow(R - 0.525e1, 2) * 0.133554483170105279e-2 + pow(R - 0.525e1, 3) * 0.128446129573076776e-1 : (R < 0.575e1 ? 0.568428654622620266e-1 + R * (-0.907414659241127797e-2) + pow(R - 0.55e1, 2) * 0.109690045496818114e-1 + pow(R - 0.55e1, 3) * (-0.726551752014681102e-2) : (R < 0.60e1 ? 0.337121525314379167e-1 + R * (-0.495192885259789894e-2) + pow(R - 0.575e1, 2) * 0.551986640957170295e-2 + pow(R - 0.575e1, 3) * (-0.995174716472043558e-2) : (R < 0.625e1 ? 0.285377644641827723e-1 + R * (-0.405794824119712870e-2) + pow(R - 0.60e1, 2) * (-0.194394396396862438e-2) + pow(R - 0.60e1, 3) * (-0.702764556497143759e-2) : (R < 0.65e1 ? 0.426168080383349177e-1 + R * (-0.634760376661358625e-2) + pow(R - 0.625e1, 2) * (-0.721467813769720301e-2) + pow(R - 0.625e1, 3) * 0.187680664486061868e-1 : (R < 0.675e1 ? 0.430332646562654186e-1 + R * (-0.643593037634852642e-2) + pow(R - 0.65e1, 2) * 0.686137169875743799e-2 + pow(R - 0.65e1, 3) * (-0.423633093453329196e-3) : (R < 0.70e1 ? 0.208345122711980704e-1 + R * (-0.308467573199230644e-2) + pow(R - 0.675e1, 2) * 0.654364687866744107e-2 + pow(R - 0.675e1, 3) * (-0.513263524599285800e-2) : (R < 0.725e1 ? 0.499711246047572933e-2 + R * (-0.775221401282246998e-3) + pow(R - 0.70e1, 2) * 0.269417044417279757e-2 + pow(R - 0.70e1, 3) * (-0.246643638017523831e-2) : (R < 0.75e1 ? -0.128659586102938556e-2 + R * 0.109406999521294550e-3 + pow(R - 0.725e1, 2) * 0.844343159041368511e-3 + pow(R - 0.725e1, 3) * (-0.781873479706186219e-3) : (R < 0.775e1 ? -0.331281845227801661e-2 + R * 0.384977301597068877e-3 + pow(R - 0.75e1, 2) * 0.257938049261728739e-3 + pow(R - 0.75e1, 3) * (-0.534911365000017192e-3) : (R < 0.80e1 ? -0.352727217790083309e-2 + R * 0.413650445290430070e-3 + pow(R - 0.775e1, 2) * (-0.143245474488284209e-3) + pow(R - 0.775e1, 3) * 0.482302741062565159e-4 : (R < 0.825e1 ? -0.303483493522968767e-2 + R * 0.351070884441210954e-3 + pow(R - 0.80e1, 2) * (-0.107072768908591821e-3) + pow(R - 0.80e1, 3) * (-0.143382089825008411e-3) : (R < 0.85e1 ? -0.238029798649398976e-2 + R * 0.270650358144725999e-3 + pow(R - 0.825e1, 2) * (-0.214609336277348135e-3) + pow(R - 0.825e1, 3) * 0.953596589537764928e-4 : (R < 0.875e1 ? -0.163211085261902311e-2 + R * 0.181225626059885059e-3 + pow(R - 0.85e1, 2) * (-0.143089592062015759e-3) + pow(R - 0.85e1, 3) * 0.142408978489902231e-3 : (R < 0.90e1 ? -0.124645157689767089e-2 + R * 0.136382513495733832e-3 + pow(R - 0.875e1, 2) * (-0.362828581945890785e-4) + pow(R - 0.875e1, 3) * (-0.170537368753385070e-3) : (R < 0.925e1 ? -0.800329230274616338e-3 + R * 0.862653277571795934e-4 + pow(R - 0.90e1, 2) * (-0.164185884759627881e-3) + pow(R - 0.90e1, 3) * 0.149579235723637955e-3 : (R < 0.95e1 ? -0.308320442458816875e-3 + R * 0.322184920755477712e-4 + pow(R - 0.925e1, 2) * (-0.520014579668994010e-4) + pow(R - 0.925e1, 3) * 0.341704289308331598e-4 : (R < 0.100e2 ? -0.124895771819978266e-3 + R * 0.126247185166292915e-4 + pow(R - 0.95e1, 2) * (-0.263736362687745278e-4) + pow(R - 0.95e1, 3) * 0.301898886303188588e-5 : (R < 0.105e2 ? 0.109982138935713213e-3 + R * (-0.114846761048713217e-4) + pow(R - 0.100e2, 2) * (-0.218451529742266986e-4) + pow(R - 0.100e2, 3) * 0.432680698319386865e-4 : (R < 0.110e2 ? -0.143258427598792531e-5 + R * (-0.878776705144007086e-6) + pow(R - 0.105e2, 2) * 0.430569517736813278e-4 + pow(R - 0.105e2, 3) * (-0.377315786707866171e-4) : (R < 0.120e2 ? -0.157725739142920913e-3 + R * 0.138794910654473562e-4 + pow(R - 0.110e2, 2) * (-0.135404162324985996e-4) + pow(R - 0.110e2, 3) * 0.464720738005124151e-5 : (R < 0.140e2 ? -0.894842409684662119e-5 + R * 0.740280740603885092e-6 + pow(R - 0.120e2, 2) * 0.401205907655127316e-6 + pow(R - 0.120e2, 3) * (-0.169180961228534918e-6) : (R < 0.160e2 ? -0.274217749874764685e-5 + R * 0.314932836481974763e-6 + pow(R - 0.140e2, 2) * (-0.613879859716082242e-6) + pow(R - 0.140e2, 3) * 0.110110388462547437e-6 : (R < 0.180e2 ? 0.138303026071085585e-4 + R * (-0.819261940831784913e-6) + pow(R - 0.160e2, 2) * 0.467824710592023649e-7 + pow(R - 0.160e2, 3) * 0.362124710533450579e-7 : (R < 0.200e2 ? 0.311690059618702467e-5 + R * (-0.197582403954834706e-6) + pow(R - 0.180e2, 2) * 0.264057297379272752e-6 + pow(R - 0.180e2, 3) * (-0.539649193134276853e-7) : (R < 0.250e2 ? -0.443159272392247904e-5 + R * 0.211067753801123972e-6 + pow(R - 0.200e2, 2) * (-0.597322185012933865e-7) + pow(R - 0.200e2, 3) * 0.483293475541371848e-8 : 0.550520616894524702e-6 + R * (-0.237843245557809898e-7) + pow(R - 0.250e2, 2) * 0.127618028299123949e-7 + pow(R - 0.250e2, 3) * (-0.134671825575123950e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.6727604736e2 * (R - 0.300e2) * (R - 0.250e2) - 0.7176225084e3 * R - 0.4215756248e5 + 0.3588112542e2 * R * R + 0.75000e3 * (-0.1315588696e0 * R + 0.5441681558e1) * R) * pow(R, -6));
}

static double radcoeff_10_0_10_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.394258548400000380e-1 + R * 0.693889390390722838e-17 + pow(R - 0.475e1, 2) * 0.466370911105305486e0 + pow(R - 0.475e1, 3) * (-0.865775138821221923e0) : (R < 0.525e1 ? -0.378068494558368107e0 + R * 0.708526170236736252e-1 + pow(R - 0.50e1, 2) * (-0.182960443010610957e0) + pow(R - 0.50e1, 3) * 0.243203106063665797e0 : (R < 0.55e1 ? -0.144835368342853793e0 + R * 0.249729779053054837e-1 + pow(R - 0.525e1, 2) * (-0.558113462861604026e-3) + pow(R - 0.525e1, 3) * (-0.370562426814413509e-1) : (R < 0.575e1 ? -0.105700191938074339e0 + R * 0.177458756711044267e-1 + pow(R - 0.55e1, 2) * (-0.283502954739426223e-1) + pow(R - 0.55e1, 3) * 0.254614862300996288e-1 : (R < 0.60e1 ? -0.530178150370915757e-1 + R * 0.834475660227679619e-2 + pow(R - 0.575e1, 2) * (-0.925418080136789986e-2) + pow(R - 0.575e1, 3) * 0.286918377704286015e-2 : (R < 0.625e1 ? -0.290166596857302922e-1 + R * 0.425563815978838213e-2 + pow(R - 0.60e1, 2) * (-0.710229296858575464e-2) + pow(R - 0.60e1, 3) * 0.141818642937289064e-1 : (R < 0.65e1 ? -0.236636680590604671e-1 + R * 0.336359123056967487e-2 + pow(R - 0.625e1, 2) * 0.353410525171092603e-2 + pow(R - 0.625e1, 3) * (-0.415142418395849505e-2) : (R < 0.675e1 ? -0.299339463275639789e-1 + R * 0.435225182193291985e-2 + pow(R - 0.65e1, 2) * 0.420537113742054419e-3 + pow(R - 0.65e1, 3) * (-0.568186157389493143e-2) : (R < 0.70e1 ? -0.242246485490658706e-1 + R * 0.349717133369864758e-2 + pow(R - 0.675e1, 2) * (-0.384085906667914426e-2) + pow(R - 0.675e1, 3) * 0.772571215538213688e-3 : (R < 0.725e1 ? -0.120236238024674317e-1 + R * 0.172159890327249041e-2 + pow(R - 0.70e1, 2) * (-0.326143065502548400e-2) + pow(R - 0.70e1, 3) * 0.205497269254208744e-2 : (R < 0.75e1 ? -0.316614664958257729e-2 + R * 0.476190955611389966e-3 + pow(R - 0.725e1, 2) * (-0.172020113561891820e-2) + pow(R - 0.725e1, 3) * 0.143792909269343226e-2 : (R < 0.775e1 ? 0.117747489348537897e-2 + R * (-0.114297907318050519e-3) + pow(R - 0.75e1, 2) * (-0.641754316098843954e-3) + pow(R - 0.75e1, 3) * 0.645262463084183809e-3 : (R < 0.80e1 ? 0.269659843292870734e-2 + R * (-0.314188353539188018e-3) + pow(R - 0.775e1, 2) * (-0.157807468785706016e-3) + pow(R - 0.775e1, 3) * 0.560357701369831613e-3 : (R < 0.825e1 ? 0.248618437830158082e-2 + R * (-0.288025018925197585e-3) + pow(R - 0.80e1, 2) * 0.262460807241667667e-3 + pow(R - 0.80e1, 3) * (-0.327374394963509286e-3) : (R < 0.85e1 ? 0.192122939117017914e-2 + R * (-0.218177314360021719e-3) + pow(R - 0.825e1, 2) * 0.169300110190357024e-4 + pow(R - 0.825e1, 3) * 0.279242377684204787e-3 : (R < 0.875e1 ? 0.140965559274508143e-2 + R * (-0.157354363034715474e-3) + pow(R - 0.85e1, 2) * 0.226361794282189320e-3 + pow(R - 0.85e1, 3) * (-0.215308104573309748e-3) : (R < 0.90e1 ? 0.783346024834768659e-3 + R * (-0.845437355011164119e-4) + pow(R - 0.875e1, 2) * 0.648807158522070088e-4 + pow(R - 0.875e1, 3) * (-0.339757833909656016e-4) : (R < 0.925e1 ? 0.552241111097370534e-3 + R * (-0.584738369608189497e-4) + pow(R - 0.90e1, 2) * 0.393988783089828059e-4 + pow(R - 0.90e1, 3) * 0.471103107771719424e-4 : (R < 0.95e1 ? 0.291512882164372269e-3 + R * (-0.299412145356078118e-4) + pow(R - 0.925e1, 2) * 0.747316113918617661e-4 + pow(R - 0.925e1, 3) * (-0.861616798777220636e-4) : (R < 0.100e2 ? 0.933376697991232469e-4 + R * (-0.873072381674981570e-5) + pow(R - 0.95e1, 2) * 0.101103514835702150e-4 + pow(R - 0.95e1, 3) * (-0.366280761214116395e-5) : (R < 0.105e2 ? 0.217749489738547369e-4 + R * (-0.136747804228547382e-5) + pow(R - 0.100e2, 2) * 0.461614006535846912e-5 + pow(R - 0.100e2, 3) * (-0.841682450557504293e-5) : (R < 0.110e2 ? 0.396899032221370153e-4 + R * (-0.306395635610828754e-5) + pow(R - 0.105e2, 2) * (-0.800909669300409527e-5) + pow(R - 0.105e2, 3) * 0.954834806644133995e-5 : (R < 0.120e2 ? 0.482073646320951488e-4 + R * (-0.391179199928137742e-5) + pow(R - 0.110e2, 2) * 0.631342540665791550e-5 + pow(R - 0.110e2, 3) * (-0.251795260937653813e-5) : (R < 0.140e2 ? -0.887307839285806659e-5 + R * 0.116120098590483900e-5 + pow(R - 0.120e2, 2) * (-0.124043242147169930e-5) + pow(R - 0.120e2, 3) * 0.901625235096399398e-7 : (R < 0.160e2 ? 0.412034037621279104e-4 + R * (-0.271857841786627929e-5) + pow(R - 0.140e2, 2) * (-0.699457280413859634e-6) + pow(R - 0.140e2, 3) * 0.389897656548499611e-6 : (R < 0.180e2 ? 0.114296717820355546e-4 + R * (-0.837635660939722182e-6) + pow(R - 0.160e2, 2) * 0.163992865887713814e-5 + pow(R - 0.160e2, 3) * (-0.395679060078638471e-6) : (R < 0.200e2 ? -0.177842325252530274e-4 + R * 0.973930253625168182e-6 + pow(R - 0.180e2, 2) * (-0.734145701594692689e-6) + pow(R - 0.180e2, 3) * 0.140120529716054257e-6 : (R < 0.250e2 ? 0.550287790181902459e-5 + R * (-0.281206196160951222e-6) + pow(R - 0.200e2, 2) * 0.106577476701632934e-6 + pow(R - 0.200e2, 3) * (-0.930070190828853599e-8) : -0.220082601654344543e-5 + R * 0.870159277337378069e-7 + pow(R - 0.250e2, 2) * (-0.329330519226951257e-7) + pow(R - 0.250e2, 3) * 0.325262394958951276e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3879872685e2 * (R - 0.300e2) * (R - 0.250e2) - 0.4138496960e3 * R - 0.2431443690e5 + 0.2069248480e2 * R * R + 0.75000e3 * (-0.758739056e-1 * R + 0.3138440570e1) * R) * pow(R, -6));
}

static double radcoeff_10_2_8_7_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.564022154200000819e-2 + R * 0.173472347597680709e-17 + pow(R - 0.475e1, 2) * 0.113705568500676382e0 + pow(R - 0.475e1, 3) * (-0.222938593426705550e0) : (R < 0.525e1 ? -0.772760289471545042e-1 + R * 0.150517979828309004e-1 + pow(R - 0.50e1, 2) * (-0.534983765693527805e-1) + pow(R - 0.50e1, 3) * 0.773159320881166845e-1 : (R < 0.55e1 ? -0.150862481987510573e-1 + R * 0.279934696467639202e-2 + pow(R - 0.525e1, 2) * 0.448857249673473985e-2 + pow(R - 0.525e1, 3) * (-0.123959303817612280e-1) : (R < 0.575e1 ? -0.145596699897494204e-1 + R * 0.271939626646353115e-2 + pow(R - 0.55e1, 2) * (-0.480837528958618244e-2) + pow(R - 0.55e1, 3) * 0.905242486932823255e-2 : (R < 0.60e1 ? -0.106543159114495314e-1 + R * 0.201253828466948365e-2 + pow(R - 0.575e1, 2) * 0.198094336240999241e-2 + pow(R - 0.575e1, 3) * (-0.646759287795170730e-2) : (R < 0.625e1 ? -0.929835118955120790e-2 + R * 0.179033630125853462e-2 + pow(R - 0.60e1, 2) * (-0.286975129605378894e-2) + pow(R - 0.60e1, 3) * (-0.585509589192139725e-2) : (R < 0.65e1 ? 0.626021677964763539e-2 + R * (-0.742369826503621721e-3) + pow(R - 0.625e1, 2) * (-0.726107321499483687e-2) + pow(R - 0.625e1, 3) * 0.104542075240372945e-1 : (R < 0.675e1 ? 0.168271692250863067e-1 + R * (-0.241274252324404732e-2) + pow(R - 0.65e1, 2) * 0.579582428033133712e-3 + pow(R - 0.65e1, 3) * 0.231198363257221909e-2 : (R < 0.70e1 ? 0.120173228915112767e-1 + R * (-0.168945437812018920e-2) + pow(R - 0.675e1, 2) * 0.231357015246229803e-2 + pow(R - 0.675e1, 3) * (-0.160424378232616174e-2) : (R < 0.725e1 ? 0.614492914762636896e-2 + R * (-0.833465011075195587e-3) + pow(R - 0.70e1, 2) * 0.111038731571767662e-2 + pow(R - 0.70e1, 3) * (-0.946185341667577472e-3) : (R < 0.75e1 ? 0.346061088824795287e-2 + R * (-0.455681104779028000e-3) + pow(R - 0.725e1, 2) * 0.400748309466993514e-3 + pow(R - 0.725e1, 3) * (-0.142830612923526210e-3) : (R < 0.775e1 ? 0.218147531818519303e-2 + R * (-0.282087689968692408e-3) + pow(R - 0.75e1, 2) * 0.293625349774348857e-3 + pow(R - 0.75e1, 3) * (-0.175967388718316884e-3) : (R < 0.80e1 ? 0.131498179345306866e-2 + R * (-0.168268900466202398e-3) + pow(R - 0.775e1, 2) * 0.161649808235611180e-3 + pow(R - 0.775e1, 3) * (-0.218064645232062581e-4) : (R < 0.825e1 ? 0.710854644301983966e-3 + R * (-0.915327084464979891e-4) + pow(R - 0.80e1, 2) * 0.145294959843206484e-3 + pow(R - 0.80e1, 3) * (-0.938419928688579558e-4) : (R < 0.85e1 ? 0.264289421519396390e-3 + R * (-0.364806021878056187e-4) + pow(R - 0.825e1, 2) * 0.749134651915630108e-4 + pow(R - 0.825e1, 3) * 0.308245537586378164e-4 : (R < 0.875e1 ? -0.980557128706240988e-4 + R * 0.675573423772048110e-5 + pow(R - 0.85e1, 2) * 0.980318805105413749e-4 + pow(R - 0.85e1, 3) * (-0.130578861525693188e-3) : (R < 0.90e1 ? -0.308627547593082327e-3 + R * 0.312881379569236923e-4 + pow(R - 0.875e1, 2) * 0.977343662714848570e-7 + pow(R - 0.875e1, 3) * 0.786018625841350079e-4 : (R < 0.925e1 ? -0.440473732851262784e-3 + R * 0.460748543745847516e-4 + pow(R - 0.90e1, 2) * 0.590491313043727464e-4 + pow(R - 0.90e1, 3) * (-0.213586901130847009e-3) : (R < 0.95e1 ? -0.342782908108820155e-3 + R * 0.355518760647373139e-4 + pow(R - 0.925e1, 2) * (-0.101141044543762504e-3) + pow(R - 0.925e1, 3) * 0.156559324787252936e-3 : (R < 0.100e2 ? -0.145109319637426969e-3 + R * 0.143362271904659958e-4 + pow(R - 0.95e1, 2) * 0.162784490466772080e-4 + pow(R - 0.95e1, 3) * (-0.283835649672183965e-4) : (R < 0.105e2 ? -0.944954062092940482e-4 + R * 0.932700251172940476e-5 + pow(R - 0.100e2, 2) * (-0.262968984041503902e-4) + pow(R - 0.100e2, 3) * 0.253121065933831621e-4 : (R < 0.110e2 ? -0.211210236656720661e-4 + R * 0.201418405261638745e-5 + pow(R - 0.105e2, 2) * 0.116712614859243547e-4 + pow(R - 0.105e2, 3) * (-0.134705575343142566e-4) : (R < 0.120e2 ? -0.371388046728555245e-4 + R * 0.358252738780504757e-5 + pow(R - 0.110e2, 2) * (-0.853457481554703188e-5) + pow(R - 0.110e2, 3) * 0.363825911874198445e-5 : (R < 0.140e2 ? 0.318173469290567552e-4 + R * (-0.257184488706306285e-5) + pow(R - 0.120e2, 2) * 0.238020254067892104e-5 + pow(R - 0.120e2, 3) * (-0.554231632086194706e-6) : (R < 0.160e2 ? -0.327612405245597760e-5 + R * 0.298185690618284111e-6 + pow(R - 0.140e2, 2) * (-0.945187251838247405e-6) + pow(R - 0.140e2, 3) * 0.255687648264552662e-6 : (R < 0.180e2 ? 0.638858377686117727e-5 + R * (-0.414311537560073563e-6) + pow(R - 0.160e2, 2) * 0.588938637749068568e-6 + pow(R - 0.160e2, 3) * (-0.140060093634515893e-6) : (R < 0.200e2 ? -0.452674411409618137e-5 + R * 0.260721889822010103e-6 + pow(R - 0.180e2, 2) * (-0.251421924058026735e-6) + pow(R - 0.180e2, 3) * 0.496874467360108467e-7 : (R < 0.250e2 ? 0.305383447155933364e-5 + R * (-0.148716445577966677e-6) + pow(R - 0.200e2, 2) * 0.467027563580383450e-7 + pow(R - 0.200e2, 3) * (-0.389456588208900036e-8) : -0.638795415343541760e-6 + R * 0.262186768457416694e-7 + pow(R - 0.250e2, 2) * (-0.117157318732966687e-7) + pow(R - 0.250e2, 3) * 0.119824785602966670e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2544177920e2 * (R - 0.300e2) * (R - 0.250e2) + 0.2713858100e3 * R + 0.1594183275e5 - 0.1356929050e2 * R * R + 0.75000e3 * (0.497500964e-1 * R - 0.2057790780e1) * R) * pow(R, -6));
}

static double radcoeff_10_2_8_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.158629773800000049e-2 + R * 0.108420217248550443e-18 + pow(R - 0.475e1, 2) * 0.499108953132876114e-2 + pow(R - 0.475e1, 3) * (-0.443698359731504489e-2) : (R < 0.525e1 ? -0.966173421683904667e-2 + R * 0.166361034116780954e-2 + pow(R - 0.50e1, 2) * 0.166335183334247747e-2 + pow(R - 0.50e1, 3) * (-0.633525256805486138e-2) : (R < 0.55e1 ? -0.778679736447599781e-2 + R * 0.130742640132876144e-2 + pow(R - 0.525e1, 2) * (-0.308808759269866943e-2) + pow(R - 0.525e1, 3) * 0.334981993033449214e-2 : (R < 0.575e1 ? -0.288972282584429264e-2 + R * 0.391473841917144058e-3 + pow(R - 0.55e1, 2) * (-0.575722644947800218e-3) + pow(R - 0.55e1, 3) * (-0.187818585408310425e-2) : (R < 0.60e1 ? 0.725069583034695020e-3 + R * (-0.248547328197338288e-3) + pow(R - 0.575e1, 2) * (-0.198436203551012862e-2) + pow(R - 0.575e1, 3) * 0.486796964397925782e-3 : (R < 0.625e1 ? 0.601409267996674910e-2 + R * (-0.114945391512779140e-2) + pow(R - 0.60e1, 2) * (-0.161926431221168427e-2) + pow(R - 0.60e1, 3) * 0.747132346209139920e-2 : (R < 0.65e1 ? 0.233437188307185134e-2 + R * (-0.558212922091496245e-3) + pow(R - 0.625e1, 2) * 0.398422828435686556e-2 + pow(R - 0.625e1, 3) * (-0.192741172796352255e-2) : (R < 0.675e1 ? -0.804643853810954428e-2 + R * 0.107251152109377615e-2 + pow(R - 0.65e1, 2) * 0.253866948838422360e-2 + pow(R - 0.65e1, 3) * (-0.432038102383731221e-2) : (R < 0.70e1 ? -0.110553049385856451e-1 + R * 0.153177482331639191e-2 + pow(R - 0.675e1, 2) * (-0.701616279493760776e-3) + pow(R - 0.675e1, 3) * (-0.442696887087226502e-3) : (R < 0.725e1 ? -0.806937645238459469e-2 + R * 0.109796101724065633e-2 + pow(R - 0.70e1, 2) * (-0.103363894480918068e-2) + pow(R - 0.70e1, 3) * 0.263158735386219520e-3 : (R < 0.75e1 ? -0.474065726217712084e-2 + R * 0.630483807720982263e-3 + pow(R - 0.725e1, 2) * (-0.836269893269516026e-3) + pow(R - 0.725e1, 3) * 0.500826483142346665e-3 : (R < 0.775e1 ? -0.235337385889560716e-2 + R * 0.306253826675414304e-3 + pow(R - 0.75e1, 2) * (-0.460650030912755973e-3) + pow(R - 0.75e1, 3) * 0.243896378444394973e-3 : (R < 0.80e1 ? -0.947746660055542737e-3 + R * 0.121659382177360351e-3 + pow(R - 0.775e1, 2) * (-0.277727747079459730e-3) + pow(R - 0.775e1, 3) * 0.274600737160073333e-3 : (R < 0.825e1 ? -0.261804125151153901e-3 + R * 0.342831468551442394e-4 + pow(R - 0.80e1, 2) * (-0.717771942094047030e-4) + pow(R - 0.80e1, 3) * 0.818939164353109356e-4 : (R < 0.85e1 ? -0.956093332170171830e-4 + R * 0.137496590820626892e-4 + pow(R - 0.825e1, 2) * (-0.103567568829215013e-4) + pow(R - 0.825e1, 3) * (-0.623247453013169950e-4) : (R < 0.875e1 ? 0.461158249088574980e-4 + R * (-0.311460910339499972e-5) + pow(R - 0.85e1, 2) * (-0.571003158589092577e-4) + pow(R - 0.85e1, 3) * 0.725779396499570255e-4 : (R < 0.90e1 ? 0.174421785119223475e-3 + R * (-0.180564033484826837e-4) + pow(R - 0.875e1, 2) * (-0.266686112144148473e-5) + pow(R - 0.875e1, 3) * 0.162593902148888154e-5 : (R < 0.925e1 ? 0.183537614544068358e-3 + R * (-0.190849703426742624e-4) + pow(R - 0.90e1, 2) * (-0.144740685532482347e-5) + pow(R - 0.90e1, 3) * 0.847060858408745918e-5 : (R < 0.95e1 ? 0.175582549817587536e-3 + R * (-0.182204346608202743e-4) + pow(R - 0.925e1, 2) * 0.490554958274077134e-5 + pow(R - 0.925e1, 3) * 0.215176699701613030e-4 : (R < 0.100e2 ? 0.114595650107424108e-3 + R * (-0.117330967500446427e-4) + pow(R - 0.95e1, 2) * 0.210438020603617486e-4 + pow(R - 0.95e1, 3) * (-0.226988003925449242e-4) : (R < 0.105e2 ? 0.768222329140158912e-4 + R * (-0.771339498409158897e-5) + pow(R - 0.100e2, 2) * (-0.130043985284556395e-4) + pow(R - 0.100e2, 3) * 0.264050803532776362e-4 : (R < 0.110e2 ? 0.547794509268451378e-5 + R * (-0.913983247589001256e-6) + pow(R - 0.105e2, 2) * 0.266032220014608132e-4 + pow(R - 0.105e2, 3) * (-0.245512543405656230e-4) : (R < 0.120e2 ? -0.810277499058235093e-4 + R * 0.727579799844759213e-5 + pow(R - 0.110e2, 2) * (-0.102236595093876214e-4) + pow(R - 0.110e2, 3) * 0.383257302644002741e-5 : (R < 0.140e2 ? 0.199763628846907718e-4 + R * (-0.167380194100756455e-5) + pow(R - 0.120e2, 2) * 0.127405956993246341e-5 + pow(R - 0.120e2, 3) * (-0.231822183964340497e-6) : (R < 0.160e2 ? -0.918318531750283900e-5 + R * 0.640570131150202682e-6 + pow(R - 0.140e2, 2) * (-0.116873533853579643e-6) + pow(R - 0.140e2, 3) * (-0.228684601607608624e-7) : (R < 0.180e2 ? 0.203702338329194044e-5 + R * (-0.101345526193246266e-6) + pow(R - 0.160e2, 2) * (-0.254084294818144804e-6) + pow(R - 0.160e2, 3) * 0.766528112198839637e-7 : (R < 0.200e2 ? 0.337097069718992120e-5 + R * (-0.197848970827217840e-6) + pow(R - 0.180e2, 2) * 0.205832572501159004e-6 + pow(R - 0.180e2, 3) * (-0.410420480062750318e-7) : (R < 0.250e2 ? -0.275054967544235497e-5 + R * 0.132976743102117744e-6 + pow(R - 0.200e2, 2) * (-0.404197155364912126e-7) + pow(R - 0.200e2, 3) * 0.334031032801353242e-8 : 0.498343246244485813e-6 + R * (-0.206971376617794341e-7) + pow(R - 0.250e2, 2) * 0.968493938371177405e-8 + pow(R - 0.250e2, 3) * (-0.999030262271177331e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2912474029e2 * (R - 0.300e2) * (R - 0.250e2) - 0.3106739908e3 * R - 0.1824986270e5 + 0.1553369954e2 * R * R + 0.75000e3 * (-0.569526427e-1 * R + 0.2355710368e1) * R) * pow(R, -6));
}

static double radcoeff_10_2_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.110382893499999992e-1 + pow(R - 0.475e1, 2) * 0.212335484609997432e-1 + pow(R - 0.475e1, 3) * (-0.218447141639989684e-1) : (R < 0.525e1 ? -0.426569678537503244e-1 + R * 0.652089032475006505e-2 + pow(R - 0.50e1, 2) * 0.485001283800051697e-2 + pow(R - 0.50e1, 3) * (-0.117291990120031060e-1) : (R < 0.55e1 ? -0.437224642082486431e-1 + R * 0.674667192899974094e-2 + pow(R - 0.525e1, 2) * (-0.394688642100181255e-2) + pow(R - 0.525e1, 3) * 0.259625325201140369e-2 : (R < 0.575e1 ? -0.357520266608803497e-1 + R * 0.526002620325097259e-2 + pow(R - 0.55e1, 2) * (-0.199969648199325957e-2) + pow(R - 0.55e1, 3) * (-0.293513502004252337e-2) : (R < 0.60e1 ? -0.270092993464791271e-1 + R * 0.370984014599636978e-2 + pow(R - 0.575e1, 2) * (-0.420104774702515209e-2) + pow(R - 0.575e1, 3) * 0.819605623615869000e-2 : (R < 0.625e1 ? -0.237612214765812874e-1 + R * 0.314607681676354811e-2 + pow(R - 0.60e1, 2) * 0.194599443009386584e-2 + pow(R - 0.60e1, 3) * 0.694742617140776692e-2 : (R < 0.65e1 ? -0.377537909294339766e-1 + R * 0.542171643894943673e-2 + pow(R - 0.625e1, 2) * 0.715656405864969081e-2 + pow(R - 0.625e1, 3) * (-0.154626704257897485e-1) : (R < 0.675e1 ? -0.419618135103515810e-1 + R * 0.610074776343870473e-2 + pow(R - 0.65e1, 2) * (-0.444043876069262142e-2) + pow(R - 0.65e1, 3) * (-0.123408546024878743e-2) : (R < 0.70e1 ? -0.257102532902462842e-1 + R * 0.364913735929574571e-2 + pow(R - 0.675e1, 2) * (-0.536600285587921205e-2) + pow(R - 0.675e1, 3) * 0.379494388918491521e-2 : (R < 0.725e1 ? -0.121861863294481804e-1 + R * 0.167768791057831151e-2 + pow(R - 0.70e1, 2) * (-0.251979493899052564e-2) + pow(R - 0.70e1, 3) * 0.184631316110911740e-2 : (R < 0.75e1 ? -0.569040016953480891e-2 + R * 0.763974158791008175e-3 + pow(R - 0.725e1, 2) * (-0.113506006815868748e-2) + pow(R - 0.725e1, 3) * 0.792501847178618416e-3 : (R < 0.775e1 ? -0.260693904940241571e-2 + R * 0.345038221057655456e-3 + pow(R - 0.75e1, 2) * (-0.540683682774723614e-3) + pow(R - 0.75e1, 3) * 0.315079134656406695e-3 : (R < 0.80e1 ? -0.998508764892367057e-3 + R * 0.133773717418369945e-3 + pow(R - 0.775e1, 2) * (-0.304374331782418593e-3) + pow(R - 0.775e1, 3) * 0.297807773555755506e-3 : (R < 0.825e1 ? -0.242093247370918265e-3 + R * 0.374255090688647822e-4 + pow(R - 0.80e1, 2) * (-0.810185016156019633e-4) + pow(R - 0.80e1, 3) * (-0.128830260239428719e-3) : (R < 0.85e1 ? 0.284315751434089856e-3 + R * (-0.272394155338290741e-4) + pow(R - 0.825e1, 2) * (-0.177641196795173502e-3) + pow(R - 0.825e1, 3) * 0.269952302921959170e-3 : (R < 0.875e1 ? 0.602169784965162153e-3 + R * (-0.654439571335484877e-4) + pow(R - 0.85e1, 2) * 0.248230303962958855e-4 + pow(R - 0.85e1, 3) * (-0.118719620084078610e-4) : (R < 0.90e1 ? 0.514412404644798904e-3 + R * (-0.552584348119770105e-4) + pow(R - 0.875e1, 2) * 0.159190588899899893e-4 + pow(R - 0.875e1, 3) * (-0.201553233683277670e-4) : (R < 0.925e1 ? 0.477468762076891273e-3 + R * (-0.510780284985434786e-4) + pow(R - 0.90e1, 2) * 0.802566363744164192e-6 + pow(R - 0.90e1, 3) * 0.106430653881719003e-3 : (R < 0.95e1 ? 0.290879366688103999e-3 + R * (-0.307209977138490827e-4) + pow(R - 0.925e1, 2) * 0.806255567750334211e-4 + pow(R - 0.925e1, 3) * (-0.113267469310548362e-3) : (R < 0.100e2 ? 0.112934944806571846e-3 + R * (-0.116458698220601933e-4) + pow(R - 0.95e1, 2) * (-0.432504520787785168e-5) + pow(R - 0.95e1, 3) * 0.144491540159964761e-4 : (R < 0.105e2 ? 0.485416247154068752e-4 + R * (-0.513404951794068794e-5) + pow(R - 0.100e2, 2) * 0.173486858161168624e-4 + pow(R - 0.100e2, 3) * (-0.115198946324709719e-4) : (R < 0.110e2 ? -0.400032214981409175e-4 + R * 0.357471532382294423e-5 + pow(R - 0.105e2, 2) * 0.688438674104040709e-7 + pow(R - 0.105e2, 3) * (-0.135528140611258557e-5) : (R < 0.120e2 ? -0.297316316482380007e-4 + R * 0.262709813664890922e-5 + pow(R - 0.110e2, 2) * (-0.196407824175847451e-5) + pow(R - 0.110e2, 3) * 0.671831189109565114e-6 : (R < 0.140e2 ? -0.807192370672786979e-5 + R * 0.714435220460655859e-6 + pow(R - 0.120e2, 2) * 0.514153255702210070e-7 + pow(R - 0.120e2, 3) * (-0.151956629587774472e-6) : (R < 0.160e2 ? 0.135675400976645568e-4 + R * (-0.903383032311754044e-6) + pow(R - 0.140e2, 2) * (-0.860324451956425786e-6) + pow(R - 0.140e2, 3) * 0.332198102806151399e-6 : (R < 0.180e2 ? 0.406255629841824491e-5 + R * (-0.358303606463640296e-6) + pow(R - 0.160e2, 2) * 0.113286416488048250e-5 + pow(R - 0.160e2, 3) * (-0.285271099324331115e-6) : (R < 0.200e2 ? -0.136358182537936834e-4 + R * 0.749899861166315803e-6 + pow(R - 0.180e2, 2) * (-0.578762431065504293e-6) + pow(R - 0.180e2, 3) * 0.110881579528673160e-6 : (R < 0.250e2 ? 0.462560005653246229e-5 + R * (-0.234570908751623130e-6) + pow(R - 0.200e2, 2) * 0.865270461065347609e-7 + pow(R - 0.200e2, 3) * (-0.750644483364202680e-8) : -0.170670685856431135e-5 + R * 0.677161897905724505e-7 + pow(R - 0.250e2, 2) * (-0.260696263980956461e-7) + pow(R - 0.250e2, 3) * 0.258487975359623119e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2106179792e2 * (R - 0.300e2) * (R - 0.250e2) - 0.2246615828e3 * R - 0.1319793330e5 + 0.1123307914e2 * R * R + 0.75000e3 * (-0.4118617652e-1 * R + 0.1703585751e1) * R) * pow(R, -6));
}

static double radcoeff_10_2_10_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.210791070800000167e-1 + R * (-0.346944695195361419e-17) + pow(R - 0.475e1, 2) * (-0.178377841621476907e0) + pow(R - 0.475e1, 3) * 0.318520686165907563e0 : (R < 0.525e1 ? 0.162238838473153874e0 + R * (-0.294662921546307750e-1) + pow(R - 0.50e1, 2) * 0.605126730029537999e-1 + pow(R - 0.50e1, 3) * (-0.780653474577227835e-1) : (R < 0.55e1 ? 0.828009192527537213e-1 + R * (-0.138472083014768987e-1) + pow(R - 0.525e1, 2) * 0.196366240966171137e-2 + pow(R - 0.525e1, 3) * 0.136597896809835338e-1 : (R < 0.575e1 ? 0.636503526320389562e-1 + R * (-0.103041665314616299e-1) + pow(R - 0.55e1, 2) * 0.122085046703993613e-1 + pow(R - 0.55e1, 3) * (-0.885570566621135535e-2) : (R < 0.60e1 ? 0.387231205168903359e-1 + R * (-0.586035900867657930e-2) + pow(R - 0.575e1, 2) * 0.556672542074084387e-2 + pow(R - 0.575e1, 3) * (-0.101806794413810547e-2) : (R < 0.625e1 ? 0.235002837189923139e-1 + R * (-0.326788403783205214e-2) + pow(R - 0.60e1, 2) * 0.480317446263726477e-2 + pow(R - 0.60e1, 3) * (-0.103326968612362270e-1) : (R < 0.65e1 ? 0.207377426729700755e-1 + R * (-0.280367746799521211e-2) + pow(R - 0.625e1, 2) * (-0.294634818328990593e-2) + pow(R - 0.625e1, 3) * 0.223399266908301747e-2 : (R < 0.675e1 ? 0.274414550772161432e-1 + R * (-0.385797793418709905e-2) + pow(R - 0.65e1, 2) * (-0.127085368147764272e-2) + pow(R - 0.65e1, 3) * 0.506549104890415946e-2 : (R < 0.70e1 ? 0.253192940859806384e-1 + R * (-0.354362520325639078e-2) + pow(R - 0.675e1, 2) * 0.252826460520047709e-2 + pow(R - 0.675e1, 3) * 0.273405407300347097e-3 : (R < 0.725e1 ? 0.162738118680113633e-1 + R * (-0.222822938678733738e-2) + pow(R - 0.70e1, 2) * 0.273331866067573741e-2 + pow(R - 0.70e1, 3) * (-0.137961549410555362e-2) : (R < 0.75e1 ? 0.839022245955838367e-2 + R * (-0.112024796159425994e-2) + pow(R - 0.725e1, 2) * 0.169860704009657209e-2 + pow(R - 0.725e1, 3) * (-0.982148115678131966e-3) : (R < 0.775e1 ? 0.349240872255717535e-2 + R * (-0.455097213235623396e-3) + pow(R - 0.75e1, 2) * 0.961995953337973012e-3 + pow(R - 0.75e1, 3) * (-0.847717348781917087e-3) : (R < 0.80e1 ? 0.104339283933015938e-2 + R * (-0.133046239463246378e-3) + pow(R - 0.775e1, 2) * 0.326207941751535170e-3 + pow(R - 0.775e1, 3) * (-0.306115529834198683e-3) : (R < 0.825e1 ? 0.213339308285128326e-3 + R * (-0.273389304313910396e-4) + pow(R - 0.80e1, 2) * 0.966212943758861708e-4 + pow(R - 0.80e1, 3) * (-0.533684218652880451e-4) : (R < 0.85e1 ? -0.974643041356869453e-4 + R * 0.109651376568105390e-4 + pow(R - 0.825e1, 2) * 0.565949779769201369e-4 + pow(R - 0.825e1, 3) * (-0.116638438128649155e-3) : (R < 0.875e1 ? -0.150385739242265551e-3 + R * 0.173929194961488876e-4 + pow(R - 0.85e1, 2) * (-0.308838506195667292e-4) + pow(R - 0.85e1, 3) * 0.170846410038846976e-4 : (R < 0.90e1 ? -0.449616750762966606e-4 + R * 0.515436437459390465e-5 + pow(R - 0.875e1, 2) * (-0.180703698666532060e-4) + pow(R - 0.875e1, 3) * 0.319527385547103580e-4 : (R < 0.925e1 ? -0.181953935641794535e-4 + R * 0.211031792027549465e-5 + pow(R - 0.90e1, 2) * 0.589418404937956339e-5 + pow(R - 0.90e1, 3) * 0.505485658140738349e-4 : (R < 0.95e1 ? -0.131967955782713098e-3 + R * 0.145352660351041200e-4 + pow(R - 0.925e1, 2) * 0.438056084099349455e-4 + pow(R - 0.925e1, 3) * (-0.119055235417405721e-3) : (R < 0.100e2 ? -0.127099845170426169e-3 + R * 0.141152135993080166e-4 + pow(R - 0.95e1, 2) * (-0.454858181531193453e-4) + pow(R - 0.95e1, 3) * 0.295235531010066167e-4 : (R < 0.105e2 ? 0.986506777025636356e-4 + R * (-0.922793972805636358e-5) + pow(R - 0.100e2, 2) * (-0.120048850160941637e-5) + pow(R - 0.100e2, 3) * 0.806870802744428226e-5 : (R < 0.110e2 ? 0.484231976313669469e-4 + R * (-0.437689720908256614e-5) + pow(R - 0.105e2, 2) * 0.109025735395570083e-4 + pow(R - 0.105e2, 3) * (-0.987321601878375117e-5) : (R < 0.120e2 ? 0.114404122337470928e-4 + R * (-0.879235683613372067e-6) + pow(R - 0.110e2, 2) * (-0.390725048861862016e-5) + pow(R - 0.110e2, 3) * 0.207720484523199205e-5 : (R < 0.140e2 ? 0.286050038885556302e-4 + R * (-0.246212212515463582e-5) + pow(R - 0.120e2, 2) * 0.232436404707735598e-5 + pow(R - 0.120e2, 3) * (-0.501539454325018884e-6) : (R < 0.160e2 ? -0.120156138674638439e-4 + R * 0.816860611254560204e-6 + pow(R - 0.140e2, 2) * (-0.684872678872757647e-6) + pow(R - 0.140e2, 3) * 0.149696592260238746e-6 : (R < 0.180e2 ? 0.153257388901768265e-5 + R * (-0.126270997113605166e-6) + pow(R - 0.160e2, 2) * 0.213306874688674908e-6 + pow(R - 0.160e2, 3) * (-0.471364852409361446e-7) : (R < 0.200e2 ? -0.316790465969749166e-5 + R * 0.161318678749860626e-6 + pow(R - 0.180e2, 2) * (-0.695120367569419859e-7) + pow(R - 0.180e2, 3) * 0.116535386785058374e-7 : (R < 0.250e2 ? -0.588610839583254606e-6 + R * 0.231129958641627311e-7 + pow(R - 0.200e2, 2) * 0.409195314093043203e-9 + pow(R - 0.200e2, 3) * (-0.207533780585117985e-9) : -0.317495669230232862e-6 + R * 0.116399154612093154e-7 + pow(R - 0.250e2, 2) * (-0.270381139468372636e-8) + pow(R - 0.250e2, 3) * 0.227987478088372627e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4043229514e2 * (R - 0.300e2) * (R - 0.250e2) - 0.4312759076e3 * R - 0.2533762272e5 + 0.2156379538e2 * R * R + 0.75000e3 * (-0.790675606e-1 * R + 0.3270526060e1) * R) * pow(R, -6));
}

static double radcoeff_10_2_12_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.700118235600001668e-2 + R * (-0.346944695195361419e-17) + pow(R - 0.475e1, 2) * (-0.183203918931648502e0) + pow(R - 0.475e1, 3) * 0.371636038158594029e0 : (R < 0.525e1 ? 0.110958762074439304e0 + R * (-0.219202023110878601e-1) + pow(R - 0.50e1, 2) * 0.955231096872970475e-1 + pow(R - 0.50e1, 3) * (-0.133928561259782392e0) : (R < 0.55e1 ? -0.407591277884516556e-2 + R * 0.729747296351460073e-3 + pow(R - 0.525e1, 2) * (-0.492331125753975914e-2) + pow(R - 0.525e1, 3) * 0.117607808005356744e-1 : (R < 0.575e1 ? -0.278905677475110815e-2 + R * 0.473238067682019668e-3 + pow(R - 0.55e1, 2) * 0.389727434286199752e-2 + pow(R - 0.55e1, 3) * (-0.708027700796030370e-2) : (R < 0.60e1 ? -0.622734654310265132e-2 + R * 0.109432330012046116e-2 + pow(R - 0.575e1, 2) * (-0.141293341310823068e-2) + pow(R - 0.575e1, 3) * (-0.596643140485445759e-2) : (R < 0.625e1 ? 0.454215519766318788e-2 + R * (-0.730849294843864596e-3) + pow(R - 0.60e1, 2) * (-0.588775696674907409e-2) + pow(R - 0.60e1, 3) * (-0.733971395630186874e-2) : (R < 0.65e1 ? 0.310599551703062624e-1 + R * (-0.505092414502500246e-2) + pow(R - 0.625e1, 2) * (-0.113925424339754756e-1) + pow(R - 0.625e1, 3) * 0.272374528243019449e-1 : (R < 0.675e1 ? 0.346036237494648097e-1 + R * (-0.564017295745612539e-2) + pow(R - 0.65e1, 2) * 0.903554718425098220e-2 + pow(R - 0.65e1, 3) * (-0.565329697059154397e-4) : (R < 0.70e1 ? 0.474403991376583407e-2 + R * (-0.113299929715049387e-2) + pow(R - 0.675e1, 2) * 0.899314745697154562e-2 + pow(R - 0.675e1, 3) * (-0.872533361747827516e-2) : (R < 0.725e1 ? -0.148542374344067148e-1 + R * 0.172757437805810235e-2 + pow(R - 0.70e1, 2) * 0.244914724386283925e-2 + pow(R - 0.70e1, 3) * (-0.324059848038099532e-2) : (R < 0.75e1 ? -0.192247702826561159e-1 + R * 0.234453578491808498e-2 + pow(R - 0.725e1, 2) * 0.186983835770925532e-4 + pow(R - 0.725e1, 3) * (-0.122908142099773009e-2) : (R < 0.775e1 ? -0.175845292210216782e-1 + R * 0.212343221026955716e-2 + pow(R - 0.75e1, 2) * (-0.903112682171205126e-3) + pow(R - 0.75e1, 3) * 0.446298037190742421e-5 : (R < 0.80e1 ? -0.141478276545285754e-1 + R * 0.167271267800368707e-2 + pow(R - 0.775e1, 2) * (-0.899765446892274558e-3) + pow(R - 0.775e1, 3) * 0.170890299510105721e-3 : (R < 0.825e1 ? -0.108586664957255573e-1 + R * 0.125487188571569465e-2 + pow(R - 0.80e1, 2) * (-0.771597722259695254e-3) + pow(R - 0.80e1, 3) * 0.187801235987668941e-3 : (R < 0.85e1 ? -0.801162139165166251e-2 + R * 0.904285756333534762e-3 + pow(R - 0.825e1, 2) * (-0.630746795268943535e-3) + pow(R - 0.825e1, 3) * 0.232091175739216525e-3 : (R < 0.875e1 ? -0.573663807317641161e-2 + R * 0.632429454150166149e-3 + pow(R - 0.85e1, 2) * (-0.456678413464531134e-3) + pow(R - 0.85e1, 3) * 0.132020589055465755e-3 : (R < 0.90e1 ? -0.398174587232575424e-2 + R * 0.428844107865800496e-3 + pow(R - 0.875e1, 2) * (-0.357662971672931805e-3) + pow(R - 0.875e1, 3) * 0.138206500038919354e-3 : (R < 0.925e1 ? -0.262568042777968757e-2 + R * 0.275926340786631947e-3 + pow(R - 0.90e1, 2) * (-0.254008096643742283e-3) + pow(R - 0.90e1, 3) * 0.103269427428857909e-3 : (R < 0.95e1 ? -0.164426281523596301e-2 + R * 0.168285310107671671e-3 + pow(R - 0.925e1, 2) * (-0.176556026072098848e-3) + pow(R - 0.925e1, 3) * 0.912364808056485827e-4 : (R < 0.100e2 ? -0.977745854445472842e-3 + R * 0.971141372226813572e-4 + pow(R - 0.95e1, 2) * (-0.108128665467862407e-3) + pow(R - 0.95e1, 3) * 0.548632784449994181e-4 : (R < 0.105e2 ? -0.328108044665685020e-3 + R * 0.301329305885685035e-4 + pow(R - 0.100e2, 2) * (-0.258337478003632868e-4) + pow(R - 0.100e2, 3) * 0.151783064464525620e-4 : (R < 0.110e2 ? -0.180944004671968698e-3 + R * 0.156829126230446369e-4 + pow(R - 0.105e2, 2) * (-0.306628813068444297e-5) + pow(R - 0.105e2, 3) * (-0.165138030280967021e-5) : (R < 0.120e2 ? -0.134563942306782387e-3 + R * 0.113780892652529434e-4 + pow(R - 0.110e2, 2) * (-0.554335858489894829e-5) + pow(R - 0.110e2, 3) * 0.104972779764600452e-5 : (R < 0.140e2 ? -0.438071677717167217e-4 + R * 0.344055548839306017e-5 + pow(R - 0.120e2, 2) * (-0.239417519196093451e-5) + pow(R - 0.120e2, 3) * 0.443749452632202056e-6 : (R < 0.160e2 ? 0.969002978909953054e-5 + R * (-0.811151847864252158e-6) + pow(R - 0.140e2, 2) * 0.268321523832278086e-6 + pow(R - 0.140e2, 3) * 0.358129620499240017e-7 : (R < 0.180e2 ? -0.129988466580231685e-4 + R * 0.691889792063948046e-6 + pow(R - 0.160e2, 2) * 0.483199296131822122e-6 + pow(R - 0.160e2, 3) * (-0.166950622831898033e-6) : (R < 0.200e2 ? -0.111306692455522800e-4 + R * 0.621279502608460038e-6 + pow(R - 0.180e2, 2) * (-0.518504440859566179e-6) + pow(R - 0.180e2, 3) * 0.100517484227668091e-6 : (R < 0.250e2 ? 0.495561191895575203e-5 + R * (-0.246528450097787585e-6) + pow(R - 0.200e2, 2) * 0.846004645064423414e-7 + pow(R - 0.200e2, 3) * (-0.721728544057696216e-8) : -0.144924307398408934e-5 + R * 0.581797869233635663e-7 + pow(R - 0.250e2, 2) * (-0.236588171022120926e-7) + pow(R - 0.250e2, 3) * 0.237428400430787580e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.8013733440e1 * (R - 0.300e2) * (R - 0.250e2) + 0.8548056120e2 * R + 0.5021703906e4 - 0.4274028060e1 * R * R + 0.75000e3 * (0.1567090465e-1 * R - 0.6481983538e0) * R) * pow(R, -6));
}

static double radcoeff_10_2_12_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.105594129700000323e-1 + R * 0.693889390390722838e-17 + pow(R - 0.475e1, 2) * 0.289715641678814195e0 + pow(R - 0.475e1, 3) * (-0.569983693179256790e0) : (R < 0.525e1 ? -0.191287572412482232e0 + R * 0.379858783682964427e-1 + pow(R - 0.50e1, 2) * (-0.137772128205628425e0) + pow(R - 0.50e1, 3) * 0.184357507377770569e0 : (R < 0.55e1 ? -0.168428291577746442e-1 + R * 0.366684689881421845e-2 + pow(R - 0.525e1, 2) * 0.496002327699505171e-3 + pow(R - 0.525e1, 3) * (-0.189733267958255153e-1) : (R < 0.575e1 ? 0.109394961354322522e-2 + R * 0.357349288446686319e-3 + pow(R - 0.55e1, 2) * (-0.137339927691696329e-1) + pow(R - 0.55e1, 3) * 0.187840961255315506e-1 : (R < 0.60e1 ? 0.197627021434555461e-1 + R * (-0.298762907260096463e-2) + pow(R - 0.575e1, 2) * 0.354079324979029780e-3 + pow(R - 0.575e1, 3) * (-0.178954749830068614e-2) : (R < 0.625e1 ? 0.207078733822569708e-1 + R * (-0.314612956604282861e-2) + pow(R - 0.60e1, 2) * (-0.988081298746484827e-3) + pow(R - 0.60e1, 3) * 0.111551356596711979e-1 : (R < 0.65e1 ? 0.108357467531732567e-1 + R * (-0.154858227922772098e-2) + pow(R - 0.625e1, 2) * 0.737827044600691383e-2 + pow(R - 0.625e1, 3) * (-0.427999558838411832e-2) : (R < 0.675e1 ? -0.753312060119913640e-2 + R * 0.133805377095371327e-2 + pow(R - 0.65e1, 2) * 0.416827375471882488e-2 + pow(R - 0.65e1, 3) * (-0.929997154613471100e-2) : (R < 0.70e1 ? -0.971556298103685469e-2 + R * 0.167844598341286740e-2 + pow(R - 0.675e1, 2) * (-0.280670490488220880e-2) + pow(R - 0.675e1, 3) * (-0.580788691077043298e-3) : (R < 0.725e1 ? 0.685695463236278384e-3 + R * 0.166195651394817376e-3 + pow(R - 0.70e1, 2) * (-0.324229642318999128e-2) + pow(R - 0.70e1, 3) * 0.206197482244288750e-2 : (R < 0.75e1 ? 0.946559780319299049e-2 + R * (-0.106833228099213664e-2) + pow(R - 0.725e1, 2) * (-0.169581530635782565e-2) + pow(R - 0.725e1, 3) * 0.216678264930548819e-2 : (R < 0.775e1 ? 0.127057346236970296e-1 + R * (-0.150996818742627045e-2) + pow(R - 0.75e1, 2) * (-0.707283193787094645e-4) + pow(R - 0.75e1, 3) * 0.833561844335165719e-3 : (R < 0.80e1 ? 0.117771411900965597e-1 + R * (-0.138903950130278174e-2) + pow(R - 0.775e1, 2) * 0.554443063872664811e-3 + pow(R - 0.775e1, 3) * 0.273080405353848612e-3 : (R < 0.825e1 ? 0.918866789940082224e-2 + R * (-0.106061539336260269e-2) + pow(R - 0.80e1, 2) * 0.759253367888051284e-3 + pow(R - 0.80e1, 3) * (-0.283728617750563829e-3) : (R < 0.85e1 ? 0.653866053828616386e-2 + R * (-0.734187825246807708e-3) + pow(R - 0.825e1, 2) * 0.546456904575128412e-3 + pow(R - 0.825e1, 3) * (-0.190278638351589141e-3) : (R < 0.875e1 ? 0.455065572652641609e-2 + R * (-0.496636617650166533e-3) + pow(R - 0.85e1, 2) * 0.403747925811436556e-3 + pow(R - 0.85e1, 3) * (-0.257782345643082372e-3) : (R < 0.90e1 ? 0.322838910813460448e-2 + R * (-0.343096844552526203e-3) + pow(R - 0.875e1, 2) * 0.210411166579124764e-3 + pow(R - 0.875e1, 3) * (-0.177560787607974283e-5) : (R < 0.925e1 ? 0.229765815085755882e-2 + R * (-0.238224187739728753e-3) + pow(R - 0.90e1, 2) * 0.209079460672064956e-3 + pow(R - 0.90e1, 3) * (-0.110316995652599489e-3) : (R < 0.95e1 ? 0.153334044781916826e-2 + R * (-0.154368894088558720e-3) + pow(R - 0.925e1, 2) * 0.126341713932615339e-3 + pow(R - 0.925e1, 3) * (-0.917543077535217931e-4) : (R < 0.100e2 ? 0.110311736338734542e-2 + R * (-0.108401969826036368e-3) + pow(R - 0.95e1, 2) * 0.575259831174739945e-4 + pow(R - 0.95e1, 3) * 0.661634770919751774e-5 : (R < 0.105e2 ? 0.493443463636642518e-3 + R * (-0.459137259266642516e-4) + pow(R - 0.100e2, 2) * 0.674505046812702715e-4 + pow(R - 0.100e2, 3) * (-0.528177866158835270e-4) : (R < 0.110e2 ? 0.211413636926719649e-3 + R * (-0.180765612073066338e-4) + pow(R - 0.105e2, 2) * (-0.117761752425550274e-4) + pow(R - 0.105e2, 3) * 0.180176915543365897e-4 : (R < 0.120e2 ? 0.191613776905201396e-3 + R * (-0.163394677841092190e-4) + pow(R - 0.110e2, 2) * 0.152503620889498622e-4 + pow(R - 0.110e2, 3) * (-0.534392081084064514e-5) : (R < 0.140e2 ? 0.278926772387771328e-4 + R * (-0.187050603873142757e-5) + pow(R - 0.120e2, 2) * (-0.781400343572073158e-6) + pow(R - 0.120e2, 3) * 0.289003401343893480e-6 : (R < 0.160e2 ? 0.222849508896019712e-4 + R * (-0.152806659689299802e-5) + pow(R - 0.140e2, 2) * 0.952620064491287828e-6 + pow(R - 0.140e2, 3) * (-0.185932894109894386e-6) : (R < 0.180e2 ? -0.660600463654727733e-6 + R * 0.512189317534204853e-7 + pow(R - 0.160e2, 2) * (-0.162977300168078542e-6) + pow(R - 0.160e2, 3) * 0.421447488456841501e-7 : (R < 0.200e2 ? 0.165574818787230955e-5 + R * (-0.949532827706838662e-7) + pow(R - 0.180e2, 2) * 0.898911929060263592e-7 + pow(R - 0.180e2, 3) * (-0.177242049603422115e-7) : (R < 0.250e2 ? -0.106396692218630000e-5 + R * 0.519210293293149996e-7 + pow(R - 0.200e2, 2) * (-0.164540368560269196e-7) + pow(R - 0.200e2, 3) * 0.137547711563278362e-8 : 0.231106418062385445e-6 + R * (-0.945855555849541816e-8) + pow(R - 0.250e2, 2) * 0.417811987846483460e-8 + pow(R - 0.250e2, 3) * (-0.426383376553150115e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.8174827392e1 * (R - 0.300e2) * (R - 0.250e2) - 0.8719783760e2 * R - 0.5122903520e4 + 0.4359891880e1 * R * R + 0.75000e3 * (-0.1598632842e-1 * R + 0.6612534695e0) * R) * pow(R, -6));
}

static double radcoeff_10_4_10_9_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.223857826700000432e-2 + R * 0.867361737988403547e-18 + pow(R - 0.475e1, 2) * 0.354177777661798324e-1 + pow(R - 0.475e1, 3) * (-0.673709179767193328e-1) : (R < 0.525e1 ? -0.264618465622752028e-1 + R * 0.507684176245504042e-2 + pow(R - 0.50e1, 2) * (-0.151104107163596690e-1) + pow(R - 0.50e1, 3) * 0.220242439013580218e-1 : (R < 0.55e1 ? -0.907740538104413741e-2 + R * 0.165118213577983568e-2 + pow(R - 0.525e1, 2) * 0.140777220965884829e-2 + pow(R - 0.525e1, 3) * (-0.402183949751276117e-2) : (R < 0.575e1 ? -0.877611245486089285e-2 + R * 0.160097333482561678e-2 + pow(R - 0.55e1, 2) * (-0.160860741347572302e-2) + pow(R - 0.55e1, 3) * 0.272200617829302521e-2 : (R < 0.60e1 ? -0.714403566887676037e-2 + R * 0.130704578651769749e-2 + pow(R - 0.575e1, 2) * 0.432897220244045995e-3 + pow(R - 0.575e1, 3) * (-0.155676260445934277e-2) : (R < 0.625e1 ? -0.668863773902156258e-2 + R * 0.123160140830359376e-2 + pow(R - 0.60e1, 2) * (-0.734674733100461135e-3) + pow(R - 0.60e1, 3) * (-0.458727594605565746e-2) : (R < 0.65e1 ? 0.865341443725453239e-3 + R * 0.414980186792747625e-5 + pow(R - 0.625e1, 2) * (-0.417513169264220434e-2) + pow(R - 0.625e1, 3) * 0.481966307988197784e-2 : (R < 0.675e1 ? 0.837491657103947573e-2 + R * (-0.117972921697530385e-2) + pow(R - 0.65e1, 2) * (-0.560384382730720739e-3) + pow(R - 0.65e1, 3) * 0.248575384092774481e-2 : (R < 0.70e1 ? 0.712399753767530616e-2 + R * (-0.993842563166712038e-3) + pow(R - 0.675e1, 2) * 0.130393099796508797e-2 + pow(R - 0.675e1, 3) * (-0.850660696392957667e-3) : (R < 0.725e1 ? 0.374493532280493384e-2 + R * (-0.501375944757847668e-3) + pow(R - 0.70e1, 2) * 0.665935475670369724e-3 + pow(R - 0.70e1, 3) * (-0.509636520955916586e-3) : (R < 0.75e1 ? 0.205736426576375465e-2 + R * (-0.263965054601897179e-3) + pow(R - 0.725e1, 2) * 0.283708084953432284e-3 + pow(R - 0.725e1, 3) * (-0.292456934343374338e-3) : (R < 0.775e1 ? 0.141788862681922799e-2 + R * (-0.176946687314563726e-3) + pow(R - 0.75e1, 2) * 0.643653841959015310e-4 + pow(R - 0.75e1, 3) * 0.264427984894134599e-4 : (R < 0.80e1 ? 0.113448407674382164e-2 + R * (-0.139805970499847946e-3) + pow(R - 0.775e1, 2) * 0.841974830629616276e-4 + pow(R - 0.775e1, 3) * (-0.252620074542794691e-4) : (R < 0.825e1 ? 0.840454779498356081e-3 + R * (-0.102443855366044509e-3) + pow(R - 0.80e1, 2) * 0.652509774722520250e-4 + pow(R - 0.80e1, 3) * 0.180582591677040574e-4 : (R < 0.85e1 ? 0.547720974165085534e-3 + R * (-0.664324430359739996e-4) + pow(R - 0.825e1, 2) * 0.787946718480300680e-4 + pow(R - 0.825e1, 3) * (-0.903247881653635116e-5) : (R < 0.875e1 ? 0.232022666435506005e-3 + R * (-0.287286968900595281e-4) + pow(R - 0.85e1, 2) * 0.720203127356278046e-4 + pow(R - 0.85e1, 3) * (-0.544482626215587545e-4) : (R < 0.90e1 ? 0.991349452314405804e-5 + R * (-0.292758976378789222e-5) + pow(R - 0.875e1, 2) * 0.311841157694587353e-4 + pow(R - 0.875e1, 3) * (-0.394842620572286496e-4) : (R < 0.925e1 ? -0.624532685768999167e-4 + R * 0.526116898521110111e-5 + pow(R - 0.90e1, 2) * 0.157091922653724794e-5 + pow(R - 0.90e1, 3) * 0.628388065304733858e-4 : (R < 0.95e1 ? -0.177624786272227237e-3 + R * 0.178289048229434850e-4 + pow(R - 0.925e1, 2) * 0.487000241243922875e-4 + pow(R - 0.925e1, 3) * (-0.111551922848664880e-3) : (R < 0.100e2 ? -0.208947285575642144e-3 + R * 0.212629313510149604e-4 + pow(R - 0.95e1, 2) * (-0.349639180121063793e-4) + pow(R - 0.95e1, 3) * 0.233109788841529201e-4 : (R < 0.105e2 ? -0.399675542282327032e-4 + R * 0.378224750202326982e-5 + pow(R - 0.100e2, 2) * 0.255031412300276965e-8 + pow(R - 0.100e2, 3) * (-0.213726314833908465e-5) : (R < 0.110e2 ? -0.234299055486655690e-4 + R * 0.218185045489195902e-5 + pow(R - 0.105e2, 2) * (-0.320334440838562408e-5) + pow(R - 0.105e2, 3) * 0.211146087480341094e-5 : (R < 0.120e2 ? -0.614957276629782700e-5 + R * 0.562101702608893357e-6 + pow(R - 0.110e2, 2) * (-0.361530961805077143e-7) + pow(R - 0.110e2, 3) * (-0.381725654728385683e-6) : (R < 0.140e2 ? 0.804234636134734703e-5 + R * (-0.655381453937278868e-6) + pow(R - 0.120e2, 2) * (-0.118133006036566477e-5) + pow(R - 0.120e2, 3) * 0.420434325667152086e-6 : (R < 0.160e2 ? 0.220201739351758302e-5 + R * (-0.335489787394113118e-6) + pow(R - 0.140e2, 2) * 0.134127589363724775e-5 + pow(R - 0.140e2, 3) * (-0.328652977720095552e-6) : (R < 0.180e2 ? -0.178023883238196942e-4 + R * 0.108577805451373084e-5 + pow(R - 0.160e2, 2) * (-0.630641972683325772e-6) + pow(R - 0.160e2, 3) * 0.112412075438230146e-6 : (R < 0.200e2 ? 0.169955412749458332e-5 + R * (-0.878449309608101856e-7) + pow(R - 0.180e2, 2) * 0.438304799460552081e-7 + pow(R - 0.180e2, 3) * (-0.767202397032505949e-8) : (R < 0.250e2 ? 0.148347212709801195e-6 + R * (-0.458729882049005880e-8) + pow(R - 0.200e2, 2) * (-0.220166387589514634e-8) + pow(R - 0.200e2, 3) * 0.265972503198631570e-9 : 0.178269704188603803e-6 + R * (-0.665599983954415181e-8) + pow(R - 0.250e2, 2) * 0.178792367208432761e-8 + pow(R - 0.250e2, 3) * (-0.159801640835099442e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1811239562e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1931982856e3 * R + 0.1135006222e5 - 0.9659914280e1 * R * R + 0.75000e3 * (0.3541904359e-1 * R - 0.1465051685e1) * R) * pow(R, -6));
}

static double radcoeff_10_4_12_11_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.158392456399999923e-1 + R * (-0.173472347597680709e-17) + pow(R - 0.475e1, 2) * 0.106627457522532110e0 + pow(R - 0.475e1, 3) * (-0.190991668170128387e0) : (R < 0.525e1 ? -0.996732292568348610e-1 + R * 0.175027909793669736e-1 + pow(R - 0.50e1, 2) * (-0.366162936050642013e-1) + pow(R - 0.50e1, 3) * 0.484202620463851999e-1 : (R < 0.55e1 ? -0.527511057512935269e-1 + R * 0.827344331053210015e-2 + pow(R - 0.525e1, 2) * (-0.301097070275297308e-3) + pow(R - 0.525e1, 3) * (-0.609755095941239087e-2) : (R < 0.575e1 ? -0.457490821817754523e-1 + R * 0.697960397050462721e-2 + pow(R - 0.55e1, 2) * (-0.487426028983459041e-2) + pow(R - 0.55e1, 3) * 0.101214665526432501e-2 : (R < 0.60e1 ? -0.331156309378340119e-1 + R * 0.473225132344939382e-2 + pow(R - 0.575e1, 2) * (-0.411515029838634659e-2) + pow(R - 0.575e1, 3) * 0.527611281835508195e-2 : (R < 0.625e1 ? -0.268805645941867857e-1 + R * 0.366394732769779801e-2 + pow(R - 0.60e1, 2) * (-0.158065684620034721e-3) + pow(R - 0.60e1, 3) * 0.824266050331537263e-2 : (R < 0.65e1 ? -0.359270646419963327e-1 + R * 0.513041332975941369e-2 + pow(R - 0.625e1, 2) * 0.602392969286649500e-2 + pow(R - 0.625e1, 3) * (-0.120935468956165949e-1) : (R < 0.675e1 ? -0.405782919292195648e-1 + R * 0.587483813326454898e-2 + pow(R - 0.65e1, 2) * (-0.304623047884595164e-2) + pow(R - 0.65e1, 3) * (-0.300856936884896830e-2) : (R < 0.70e1 ? -0.267269417569811416e-1 + R * 0.378761613718239147e-2 + pow(R - 0.675e1, 2) * (-0.530265750548267797e-2) + pow(R - 0.675e1, 3) * 0.367061341421244742e-2 : (R < 0.725e1 ? -0.132593833534412047e-1 + R * 0.182452739960588641e-2 + pow(R - 0.70e1, 2) * (-0.254969744482334230e-2) + pow(R - 0.70e1, 3) * 0.162536951039918536e-2 : (R < 0.75e1 ? -0.636017648585695400e-2 + R * 0.854435460394062569e-3 + pow(R - 0.725e1, 2) * (-0.133067031202395328e-2) + pow(R - 0.725e1, 3) * 0.105736795539081163e-2 : (R < 0.775e1 ? -0.292373202323397384e-2 + R * 0.387356796017863166e-3 + pow(R - 0.75e1, 2) * (-0.537644345480844553e-3) + pow(R - 0.75e1, 3) * 0.275078256517567439e-3 : (R < 0.80e1 ? -0.126938794983225719e-2 + R * 0.170111796374484801e-3 + pow(R - 0.775e1, 2) * (-0.331335653092668960e-3) + pow(R - 0.775e1, 3) * 0.256889702698918855e-3 : (R < 0.825e1 ? -0.346074468223580981e-3 + R * 0.526107890841976205e-4 + pow(R - 0.80e1, 2) * (-0.138668376068479791e-3) + pow(R - 0.80e1, 3) * (-0.783020637932427119e-4) : (R < 0.85e1 ? 0.337165844738021017e-3 + R * (-0.314050359112752776e-4) + pow(R - 0.825e1, 2) * (-0.197394923913411829e-3) + pow(R - 0.825e1, 3) * 0.387347063194051734e-3 : (R < 0.875e1 ? 0.552475004522320098e-3 + R * (-0.574749235190964884e-4) + pow(R - 0.85e1, 2) * 0.931153734821269988e-4 + pow(R - 0.85e1, 3) * (-0.268924390582964113e-3) : (R < 0.90e1 ? 0.587917091077964156e-3 + R * (-0.613405600123387670e-4) + pow(R - 0.875e1, 2) * (-0.108577919455096113e-3) + pow(R - 0.875e1, 3) * 0.268316258497804702e-3 : (R < 0.925e1 ? 0.621140363983935934e-3 + R * (-0.653202212715484385e-4) + pow(R - 0.90e1, 2) * 0.926592744182574269e-4 + pow(R - 0.90e1, 3) * (-0.156944459728254712e-3) : (R < 0.95e1 ? 0.468130714608574116e-3 + R * (-0.484176702614674768e-4) + pow(R - 0.925e1, 2) * (-0.250490703779336006e-4) + pow(R - 0.925e1, 3) * 0.134085255935214036e-3 : (R < 0.100e2 ? 0.348803951995525611e-3 + R * (-0.358012199625816420e-4) + pow(R - 0.95e1, 2) * 0.755148715734769196e-4 + pow(R - 0.95e1, 3) * (-0.651374574406272440e-4) : (R < 0.105e2 ? 0.929227027787516455e-4 + R * (-0.913944146957516383e-5) + pow(R - 0.100e2, 2) * (-0.221913145874639565e-4) + pow(R - 0.100e2, 3) * 0.362485439972285665e-4 : (R < 0.110e2 ? 0.394574613217358152e-4 + R * (-0.414434805911769631e-5) + pow(R - 0.105e2, 2) * 0.321815014083788898e-4 + pow(R - 0.105e2, 3) * (-0.268009774202869912e-4) : (R < 0.120e2 ? -0.887357372785054150e-4 + R * 0.793642028404594671e-5 + pow(R - 0.110e2, 2) * (-0.801996472205159872e-5) + pow(R - 0.110e2, 3) * 0.274157489800565091e-5 : (R < 0.140e2 ? -0.231670101516450710e-6 + R * 0.121215533959704229e-6 + pow(R - 0.120e2, 2) * 0.204759971965355287e-6 + pow(R - 0.120e2, 3) * (-0.362095437226036960e-7) : (R < 0.160e2 ? -0.508566164809833467e-5 + R * 0.505740897149880997e-6 + pow(R - 0.140e2, 2) * (-0.124972903702669045e-7) + pow(R - 0.140e2, 3) * (-0.891388476023367912e-7) : (R < 0.180e2 ? 0.120657237329476567e-4 + R * (-0.613914435559228533e-6) + pow(R - 0.160e2, 2) * (-0.547330375984287650e-6) + pow(R - 0.160e2, 3) * 0.175983914631950928e-6 : (R < 0.200e2 ? 0.126795350563334172e-4 + R * (-0.691428963912967569e-6) + pow(R - 0.180e2, 2) * 0.508573111807418027e-6 + pow(R - 0.180e2, 3) * (-0.966762558879671083e-7) : (R < 0.250e2 ? -0.354313007502198172e-5 + R * 0.182748412661099079e-6 + pow(R - 0.200e2, 2) * (-0.714844235203846893e-7) + pow(R - 0.200e2, 3) * 0.627988377923297312e-8 : 0.155106860340686952e-5 + R * (-0.611045391002747767e-7) + pow(R - 0.250e2, 2) * 0.227138331681099082e-7 + pow(R - 0.250e2, 3) * (-0.223385843521099075e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3578821702e2 * (R - 0.300e2) * (R - 0.250e2) + 0.3817391024e3 * R + 0.2242809122e5 - 0.1908695512e2 * R * R + 0.75000e3 * (0.699872525e-1 * R - 0.2894951133e1) * R) * pow(R, -6));
}

static double radcoeff_10_4_12_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.103321345400000080e-1 + R * (-0.173472347597680709e-17) + pow(R - 0.475e1, 2) * (-0.783686297317168074e-1) + pow(R - 0.475e1, 3) * 0.140855986638867253e0 : (R < 0.525e1 ? 0.715040568283539790e-1 + R * (-0.127738173710707954e-1) + pow(R - 0.50e1, 2) * 0.272733602474336360e-1 + pow(R - 0.50e1, 3) * (-0.373387824446018354e-1) : (R < 0.55e1 ? 0.377880166875133039e-1 + R * (-0.613815895571682025e-2) + pow(R - 0.525e1, 2) * (-0.730726586017743131e-3) + pow(R - 0.525e1, 3) * 0.826262627554010670e-2 : (R < 0.575e1 ? 0.313601145763405739e-1 + R * (-0.495427982206192268e-2) + pow(R - 0.55e1, 2) * 0.546624312063733776e-2 + pow(R - 0.55e1, 3) * (-0.405295228955859094e-2) : (R < 0.60e1 ? 0.202925676072040623e-1 + R * (-0.298108681603548916e-2) + pow(R - 0.575e1, 2) * 0.242652890346839413e-2 + pow(R - 0.575e1, 3) * 0.778196514694249664e-3 : (R < 0.625e1 ? 0.123013271947767216e-1 + R * (-0.162191051779612028e-2) + pow(R - 0.60e1, 2) * 0.301017628948908140e-2 + pow(R - 0.60e1, 3) * (-0.569808560921840086e-2) : (R < 0.65e1 ? 0.967107379387518659e-2 + R * (-0.118521342478002979e-2) + pow(R - 0.625e1, 2) * (-0.126338791742471924e-2) + pow(R - 0.625e1, 3) * (-0.149959423782064592e-2) : (R < 0.675e1 ? 0.155023220980444430e-1 + R * (-0.209808130308376068e-2) + pow(R - 0.65e1, 2) * (-0.238808359579020368e-2) + pow(R - 0.65e1, 3) * 0.378846294450098592e-2 : (R < 0.70e1 ? 0.186772703284732618e-1 + R * (-0.258178629888492763e-2) + pow(R - 0.675e1, 2) * 0.453263612585535873e-3 + pow(R - 0.675e1, 3) * 0.183434324701669659e-2 : (R < 0.725e1 ? 0.147402627617357011e-1 + R * (-0.201121513377652871e-2) + pow(R - 0.70e1, 2) * 0.182902104784805832e-2 + pow(R - 0.70e1, 3) * (-0.225466338967772510e-3) : (R < 0.75e1 ? 0.852734567176493923e-2 + R * (-0.113897954840895717e-2) + pow(R - 0.725e1, 2) * 0.165992129362222893e-2 + pow(R - 0.725e1, 3) * (-0.989444367945600551e-3) : (R < 0.775e1 ? 0.378233197573732112e-2 + R * (-0.494539720587642835e-3) + pow(R - 0.75e1, 2) * 0.917838017663028406e-3 + pow(R - 0.75e1, 3) * (-0.626967990209827846e-3) : (R < 0.80e1 ? 0.118434101932365335e-2 + R * (-0.153177209920471414e-3) + pow(R - 0.775e1, 2) * 0.447612025005657494e-3 + pow(R - 0.775e1, 3) * (-0.521356919215087348e-3) : (R < 0.825e1 ? 0.195757847823772277e-3 + R * (-0.271256197704715351e-4) + pow(R - 0.80e1, 2) * 0.565943355943419622e-4 + pow(R - 0.80e1, 3) * (-0.308416922898232848e-4) : (R < 0.85e1 ? 0.130697007905499693e-4 + R * (-0.461126927764242075e-5) + pow(R - 0.825e1, 2) * 0.334630663769744952e-4 + pow(R - 0.825e1, 3) * (-0.291378981856192461e-4) : (R < 0.875e1 ? -0.810736440888503438e-4 + R * 0.665690800104121775e-5 + pow(R - 0.85e1, 2) * 0.116096427377600572e-4 + pow(R - 0.85e1, 3) * 0.409215051923002957e-4 : (R < 0.90e1 ? -0.197637674332928545e-3 + R * 0.201345115934775497e-4 + pow(R - 0.875e1, 2) * 0.423007716319852823e-4 + pow(R - 0.875e1, 3) * (-0.160626279383581919e-3) : (R < 0.925e1 ? -0.116800287605437275e-3 + R * 0.111674700250485860e-4 + pow(R - 0.90e1, 2) * (-0.781689379057011572e-4) + pow(R - 0.90e1, 3) * 0.254040257462027257e-3 : (R < 0.95e1 ? -0.196786200923535116e-3 + R * 0.197155493463281215e-4 + pow(R - 0.925e1, 2) * 0.112361255190819286e-3 + pow(R - 0.925e1, 3) * (-0.248487297152527012e-3) : (R < 0.100e2 ? -0.284744200595569909e-3 + R * 0.293048087256389360e-4 + pow(R - 0.95e1, 2) * (-0.740042176735760142e-4) + pow(R - 0.95e1, 3) * 0.646339225325962702e-4 : (R < 0.105e2 ? -0.398782569561013144e-4 + R * 0.377603295151013123e-5 + pow(R - 0.100e2, 2) * 0.229466661253184012e-4 + pow(R - 0.100e2, 3) * (-0.254982537526773268e-4) : (R < 0.110e2 ? -0.774701181573655940e-4 + R * 0.759900876232053317e-5 + pow(R - 0.105e2, 2) * (-0.153007145036975940e-4) + pow(R - 0.105e2, 3) * 0.699945927011304959e-5 : (R < 0.120e2 ? 0.301419561877149864e-4 + R * (-0.245211128879227149e-5) + pow(R - 0.110e2, 2) * (-0.480152559852801789e-5) + pow(R - 0.110e2, 3) * 0.282187231032028832e-5 : (R < 0.140e2 ? 0.418115140926492864e-4 + R * (-0.358954555488744020e-5) + pow(R - 0.120e2, 2) * 0.366409133243284834e-5 + pow(R - 0.120e2, 3) * (-0.742982881619564018e-6) : (R < 0.160e2 ? -0.298439741349285773e-4 + R * 0.215102519540918409e-5 + pow(R - 0.140e2, 2) * (-0.793805957284536192e-6) + pow(R - 0.140e2, 3) * 0.469823785399720406e-7 : (R < 0.180e2 ? 0.913962565098873499e-5 + R * (-0.460410091249295975e-6) + pow(R - 0.160e2, 2) * (-0.511911686044703921e-6) + pow(R - 0.160e2, 3) * 0.160636508834675927e-6 : (R < 0.200e2 ? 0.105372264645159980e-4 + R * (-0.580418729411999844e-6) + pow(R - 0.180e2, 2) * 0.451907366963351802e-6 + pow(R - 0.180e2, 3) * (-0.866977116286759106e-7) : (R < 0.250e2 ? -0.369386432684592618e-5 + R * 0.186838198897296305e-6 + pow(R - 0.200e2, 2) * (-0.682789028087037012e-7) + pow(R - 0.200e2, 3) * 0.591103130264888876e-8 : 0.132458402547685177e-5 + R * (-0.526234814910740665e-7) + pow(R - 0.250e2, 2) * 0.203865667310296276e-7 + pow(R - 0.250e2, 3) * (-0.202426268416296236e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1372788835e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1464297520e3 * R + 0.8603042072e4 - 0.7321487600e1 * R * R + 0.75000e3 * (0.2684601484e-1 * R - 0.1110456436e1) * R) * pow(R, -6));
}

static double radcoeff_10_4_14_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.274833831800000016e-3 + pow(R - 0.475e1, 2) * (-0.245560725919981848e-1) + pow(R - 0.475e1, 3) * 0.595388739519927337e-1 : (R < 0.525e1 ? 0.469319368670226798e-2 + R * (-0.111449743000045353e-2) + pow(R - 0.50e1, 2) * 0.200980828719963707e-1 + pow(R - 0.50e1, 3) * (-0.338303081087782259e-1) : (R < 0.55e1 ? -0.140350326924095267e-1 + R * 0.259136123560181446e-2 + pow(R - 0.525e1, 2) * (-0.527464820958729787e-2) + pow(R - 0.525e1, 3) * 0.412438760952016023e-2 : (R < 0.575e1 ? -0.404824679511257401e-2 + R * 0.727359807593195348e-3 + pow(R - 0.55e1, 2) * (-0.218135750244717727e-2) + pow(R - 0.55e1, 3) * 0.231091241897582206e-3 : (R < 0.60e1 ? 0.184128673600592995e-2 + R * (-0.319989335774596511e-3) + pow(R - 0.575e1, 2) * (-0.200803907102399060e-2) + pow(R - 0.575e1, 3) * 0.416839634089507583e-3 : (R < 0.625e1 ? 0.727747003806885392e-2 + R * (-0.124585143989480902e-2) + pow(R - 0.60e1, 2) * (-0.169540934545685988e-2) + pow(R - 0.60e1, 3) * (-0.811236082785561641e-2) : (R < 0.65e1 ? 0.218495783657385416e-1 + R * (-0.361462376784616683e-2) + pow(R - 0.625e1, 2) * (-0.777967996634857176e-2) + pow(R - 0.625e1, 3) * 0.170787843109329596e-1 : (R < 0.675e1 ? 0.260993958846833934e-1 + R * (-0.430219169272052192e-2) + pow(R - 0.65e1, 2) * 0.502940826685114879e-2 + pow(R - 0.65e1, 3) * 0.346780252812376247e-2 : (R < 0.70e1 ? 0.510472784058426179e-2 + R * (-0.113727458527174250e-2) + pow(R - 0.675e1, 2) * 0.763026016294397064e-2 + pow(R - 0.675e1, 3) * (-0.672717983142799743e-2) : (R < 0.725e1 ? -0.123999801256524517e-1 + R * 0.141650927780749298e-2 + pow(R - 0.70e1, 2) * 0.258487528937297213e-2 + pow(R - 0.70e1, 3) * (-0.308228633841177609e-2) : (R < 0.75e1 ? -0.174667760768028417e-1 + R * 0.213101823404177135e-2 + pow(R - 0.725e1, 2) * 0.273160535564140122e-3 + pow(R - 0.725e1, 3) * (-0.147220083092489671e-2) : (R < 0.775e1 ? -0.164267762711906747e-1 + R * 0.199156084602542319e-2 + pow(R - 0.75e1, 2) * (-0.830990087629532412e-3) + pow(R - 0.75e1, 3) * (-0.280818578886387130e-4) : (R < 0.80e1 ? -0.132182588913881596e-1 + R * 0.157080045385653679e-2 + pow(R - 0.775e1, 2) * (-0.852051481046011447e-3) + pow(R - 0.775e1, 3) * 0.186891904079458063e-3 : (R < 0.825e1 ? -0.101407238548874377e-1 + R * 0.117981694534842973e-2 + pow(R - 0.80e1, 2) * (-0.711882552986417886e-3) + pow(R - 0.80e1, 3) * 0.469428815707960100e-4 : (R < 0.85e1 ? -0.732058227078539667e-2 + R * 0.832677459149745009e-3 + pow(R - 0.825e1, 2) * (-0.676675391808320877e-3) + pow(R - 0.825e1, 3) * 0.439835385637363805e-3 : (R < 0.875e1 ? -0.518111928554701624e-2 + R * 0.576808898052590135e-3 + pow(R - 0.85e1, 2) * (-0.346798852580298023e-3) + pow(R - 0.85e1, 3) * (-0.888404497202505920e-4) : (R < 0.90e1 ? -0.354118350299907408e-2 + R * 0.386751887439894205e-3 + pow(R - 0.875e1, 2) * (-0.413429189870485967e-3) + pow(R - 0.875e1, 3) * 0.293746305083636742e-3 : (R < 0.925e1 ? -0.219769857676049797e-2 + R * 0.235114724707833104e-3 + pow(R - 0.90e1, 2) * (-0.193119461057758411e-3) + pow(R - 0.90e1, 3) * (-0.168219366942962889e-4) : (R < 0.95e1 ? -0.128767833199115332e-2 + R * 0.135400881048773337e-3 + pow(R - 0.925e1, 2) * (-0.205735913578480628e-3) + pow(R - 0.925e1, 3) * 0.177547730333549292e-3 : (R < 0.100e2 ? -0.636773948462198303e-3 + R * 0.658231236970735088e-4 + pow(R - 0.95e1, 2) * (-0.725751158283186590e-4) + pow(R - 0.95e1, 3) * 0.222879527883432636e-4 : (R < 0.105e2 ? -0.935402209541229610e-4 + R * 0.996397246001229581e-5 + pow(R - 0.100e2, 2) * (-0.391431866458037602e-4) + pow(R - 0.100e2, 3) * 0.348969868275583281e-4 : (R < 0.110e2 ? 0.372257942517885147e-4 + R * (-0.300647406512271536e-5) + pow(R - 0.105e2, 2) * 0.132022935955337336e-4 + pow(R - 0.105e2, 3) * (-0.133511240585766047e-4) : (R < 0.120e2 ? 0.377902107573579767e-5 + R * 0.182476486478563863e-6 + pow(R - 0.110e2, 2) * (-0.682439249233117434e-5) + pow(R - 0.110e2, 3) * 0.303640560485261008e-5 : (R < 0.140e2 ? 0.544658522295114359e-4 + R * (-0.435709168362595287e-5) + pow(R - 0.120e2, 2) * 0.228482432222665675e-5 + pow(R - 0.120e2, 3) * (-0.419460202456840090e-6) : (R < 0.160e2 ? 0.276861986691970235e-5 + R * (-0.251316824201407305e-6) + pow(R - 0.140e2, 2) * (-0.231936892514383891e-6) + pow(R - 0.140e2, 3) * 0.114792759045043770e-6 : (R < 0.180e2 ? -0.443703424650531865e-5 + R * 0.198448714281582419e-6 + pow(R - 0.160e2, 2) * 0.456819661755878727e-6 + pow(R - 0.160e2, 3) * (-0.132157666948334955e-6) : (R < 0.200e2 ? -0.801197652085139608e-5 + R * 0.439835357925077549e-6 + pow(R - 0.180e2, 2) * (-0.336126339934131109e-6) + pow(R - 0.180e2, 3) * 0.642956118732961573e-7 : (R < 0.250e2 ? 0.261704335953785782e-5 + R * (-0.133122659331892894e-6) + pow(R - 0.200e2, 2) * 0.496473313056458477e-7 + pow(R - 0.200e2, 3) * (-0.431746662625345340e-8) : -0.998039588288914306e-6 + R * 0.395406567555565713e-7 + pow(R - 0.250e2, 2) * (-0.151146680881559599e-7) + pow(R - 0.250e2, 3) * 0.149623074820892913e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1453114467e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1549987736e3 * R - 0.9106216180e4 + 0.7749938680e1 * R * R + 0.75000e3 * (-0.2841651468e-1 * R + 0.1175411373e1) * R) * pow(R, -6));
}

static double radcoeff_10_6_14_13_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.814089016000000068e-2 + pow(R - 0.475e1, 2) * 0.677233823535736412e-1 + pow(R - 0.475e1, 3) * (-0.124113848070294547e0) : (R < 0.525e1 ? -0.587991809570329454e-1 + R * 0.105903446636065896e-1 + pow(R - 0.50e1, 2) * (-0.253620036991472793e-1) + pow(R - 0.50e1, 3) * 0.329919143868836820e-1 : (R < 0.55e1 ? -0.257699635402616201e-1 + R * 0.409532676157364165e-2 + pow(R - 0.525e1, 2) * (-0.618067908984515726e-3) + pow(R - 0.525e1, 3) * (-0.272060966924020115e-2) : (R < 0.575e1 ? -0.213457868395436484e-1 + R * 0.327617849409884542e-2 + pow(R - 0.55e1, 2) * (-0.265852516091466670e-2) + pow(R - 0.55e1, 3) * (-0.136053949922864889e-3) : (R < 0.60e1 ? -0.137241275026781084e-1 + R * 0.192140579803097545e-2 + pow(R - 0.575e1, 2) * (-0.276056562335681537e-2) + pow(R - 0.575e1, 3) * 0.228919487693165363e-2 : (R < 0.625e1 ? -0.815454155066351778e-2 + R * 0.970347025777252821e-3 + pow(R - 0.60e1, 2) * (-0.104366946565807492e-2) + pow(R - 0.60e1, 3) * 0.638795783419625687e-2 : (R < 0.65e1 ? -0.123443800578750852e-1 + R * 0.164625438686001341e-2 + pow(R - 0.625e1, 2) * 0.374729890998911751e-2 + pow(R - 0.625e1, 3) * (-0.439828880571668454e-2) : (R < 0.675e1 ? -0.189972041140875104e-1 + R * 0.269522469078269360e-2 + pow(R - 0.65e1, 2) * 0.448582305701603892e-3 + pow(R - 0.65e1, 3) * (-0.377272880652951281e-2) : (R < 0.70e1 ? -0.157672219935621818e-1 + R * 0.221212919240921201e-2 + pow(R - 0.675e1, 2) * (-0.238096429919553050e-2) + pow(R - 0.675e1, 3) * 0.108608188783472547e-2 : (R < 0.725e1 ? -0.899116966336320489e-2 + R * 0.122528739678045792e-2 + pow(R - 0.70e1, 2) * (-0.156640288331948629e-2) + pow(R - 0.70e1, 3) * 0.839903207190618854e-3 : (R < 0.75e1 ? -0.453947932619992896e-2 + R * 0.599567806468955813e-3 + pow(R - 0.725e1, 2) * (-0.936475477926522124e-3) + pow(R - 0.725e1, 3) * 0.828297417802795156e-3 : (R < 0.775e1 ? -0.223807709797789120e-2 + R * 0.286635833343718829e-3 + pow(R - 0.75e1, 2) * (-0.315252414574425702e-3) + pow(R - 0.75e1, 3) * 0.110908310718200860e-3 : (R < 0.80e1 ? -0.119560796407030710e-2 + R * 0.149804934316168667e-3 + pow(R - 0.775e1, 2) * (-0.232071181535775054e-3) + pow(R - 0.775e1, 3) * 0.256903963964401686e-3 : (R < 0.825e1 ? -0.663169508280851672e-3 + R * 0.819388367916064526e-4 + pow(R - 0.80e1, 2) * (-0.393932085624737764e-4) + pow(R - 0.80e1, 3) * (-0.117827324975808045e-3) : (R < 0.85e1 ? -0.322711507127595824e-3 + R * 0.401496090774055542e-4 + pow(R - 0.825e1, 2) * (-0.127763702294329817e-3) + pow(R - 0.825e1, 3) * 0.215306410434830398e-3 : (R < 0.875e1 ? -0.127481432737556463e-3 + R * 0.166377098867713485e-4 + pow(R - 0.85e1, 2) * 0.337161055317929876e-4 + pow(R - 0.85e1, 3) * (-0.173169648475513503e-3) : (R < 0.90e1 ? 0.851854092929576482e-5 + R * 0.102645356350905541e-5 + pow(R - 0.875e1, 2) * (-0.961611308248421599e-4) + pow(R - 0.875e1, 3) * 0.150654332523223757e-3 : (R < 0.925e1 ? 0.183358346777268144e-3 + R * (-0.188064245008075718e-4) + pow(R - 0.90e1, 2) * 0.168296185675756545e-4 + pow(R - 0.90e1, 3) * (-0.261304353738147830e-5) : (R < 0.95e1 ? 0.111064380642578647e-3 + R * (-0.108815608802787718e-4) + pow(R - 0.925e1, 2) * 0.148698359145395455e-4 + pow(R - 0.925e1, 3) * (-0.353244891256978397e-4) : (R < 0.100e2 ? 0.103731825905734753e-3 + R * (-0.100699846340773427e-4) + pow(R - 0.95e1, 2) * (-0.116235309297338359e-4) + pow(R - 0.95e1, 3) * 0.197015787557770474e-4 : (R < 0.105e2 ? 0.717621091467839317e-4 + R * (-0.691733149697839308e-5) + pow(R - 0.100e2, 2) * 0.179288372039317385e-4 + pow(R - 0.100e2, 3) * (-0.153440967399499037e-4) : (R < 0.110e2 ? 0.690827754109537776e-5 + R * (-0.496566848009083641e-6) + pow(R - 0.105e2, 2) * (-0.508730790599311878e-5) + pow(R - 0.105e2, 3) * 0.308788418802257124e-5 : (R < 0.120e2 ? 0.365077785031380005e-4 + R * (-0.326796161298527293e-5) + pow(R - 0.110e2, 2) * (-0.455481623959261224e-6) + pow(R - 0.110e2, 3) * 0.116188139294453458e-5 : (R < 0.140e2 ? 0.631800710084230421e-5 + R * (-0.693280682070191937e-6) + pow(R - 0.120e2, 2) * 0.303016255487434269e-5 + pow(R - 0.120e2, 3) * (-0.903217293419623230e-6) : (R < 0.160e2 ? -0.673567880548377083e-5 + R * 0.588762016391697939e-6 + pow(R - 0.140e2, 2) * (-0.238914120564339690e-5) + pow(R - 0.140e2, 3) * 0.671102344473773850e-6 : (R < 0.180e2 ? 0.131299621499456491e-4 + R * (-0.914574672496603052e-6) + pow(R - 0.160e2, 2) * 0.163747286119924620e-5 + pow(R - 0.160e2, 3) * (-0.395593171975472337e-6) : (R < 0.200e2 ? -0.159348126402048435e-4 + R * 0.888198708594713688e-6 + pow(R - 0.180e2, 2) * (-0.736086170653587721e-6) + pow(R - 0.180e2, 3) * 0.142552901028115410e-6 : (R < 0.250e2 ? 0.693546329094503757e-5 + R * (-0.345511161682251903e-6) + pow(R - 0.200e2, 2) * 0.119231235515104845e-6 + pow(R - 0.200e2, 3) * (-0.101853712773308894e-7) : -0.206716496462449097e-5 + R * 0.828983476689796407e-7 + pow(R - 0.250e2, 2) * (-0.335493336448585261e-7) + pow(R - 0.250e2, 3) * 0.336340230461251967e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.8076818336e1 * (R - 0.300e2) * (R - 0.250e2) + 0.8615208120e2 * R + 0.5061898944e4 - 0.4307604060e1 * R * R + 0.75000e3 * (0.1579543239e-1 * R - 0.6533685780e0) * R) * pow(R, -6));
}

static double radcoeff_3_0_3_2_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.484677640600000181e1 + R * 0.444089209850062616e-15 + pow(R - 0.475e1, 2) * 0.172094462712361178e2 + pow(R - 0.475e1, 3) * (-0.380532281569444706e2) : (R < 0.525e1 ? -0.117144819849548512e2 + R * 0.146974285619097023e1 + pow(R - 0.50e1, 2) * (-0.113304748464722387e2) + pow(R - 0.50e1, 3) * 0.212215351588334329e2 : (R < 0.55e1 ? -0.323850237598962742e1 + R * (-0.216456724763880559e0) + pow(R - 0.525e1, 2) * 0.458567652265283598e1 + pow(R - 0.525e1, 3) * (-0.499831433438925288e1) : (R < 0.575e1 ? -0.104860950347550386e2 + R * 0.113919759886455241e1 + pow(R - 0.55e1, 2) * 0.836940771860895771e0 + pow(R - 0.55e1, 3) * 0.122358835472357774e1 : (R < 0.60e1 ? -0.141400535825076066e2 + R * 0.178709080130567077e1 + pow(R - 0.575e1, 2) * 0.175463203790357913e1 + pow(R - 0.575e1, 3) * (-0.117507806050504948e1) : (R < 0.625e1 ? -0.179906829704765840e2 + R * 0.244407968391276409e1 + pow(R - 0.60e1, 2) * 0.873323492524792022e0 + pow(R - 0.60e1, 3) * (-0.139237460870339125e1) : (R < 0.65e1 ? -0.190553030250204607e2 + R * 0.261967119104327395e1 + pow(R - 0.625e1, 2) * (-0.170957464002751386e0) + pow(R - 0.625e1, 3) * (-0.849182352681378760e0) : (R < 0.675e1 ? -0.174887035904419115e2 + R * 0.237497076791414008e1 + pow(R - 0.65e1, 2) * (-0.807844228513785456e0) + pow(R - 0.65e1, 3) * (-0.207599852571095422e0) : (R < 0.70e1 ? -0.145532197677761257e2 + R * 0.193212368130016676e1 + pow(R - 0.675e1, 2) * (-0.963544117942107037e0) + pow(R - 0.675e1, 3) * 0.151554690965758937e0 : (R < 0.725e1 ? -0.114375843521963514e2 + R * 0.147876812688519310e1 + pow(R - 0.70e1, 2) * (-0.849878099717787827e0) + pow(R - 0.70e1, 3) * 0.224742362308063992e0 : (R < 0.75e1 ? -0.871189117130319346e1 + R * 0.109596826995906116e1 + pow(R - 0.725e1, 2) * (-0.681321327986739833e0) + pow(R - 0.725e1, 3) * 0.210036403801980853e0 : (R < 0.775e1 ? -0.649160064838921880e1 + R * 0.794689431678562541e0 + pow(R - 0.75e1, 2) * (-0.523794025135254193e0) + pow(R - 0.75e1, 3) * 0.176633820884016135e0 : (R < 0.80e1 ? -0.474854704508183545e1 + R * 0.565911260526688498e0 + pow(R - 0.775e1, 2) * (-0.391318659472242092e0) + pow(R - 0.775e1, 3) * 0.140009048661951990e0 : (R < 0.825e1 ? -0.341555575501746800e1 + R * 0.396503627414683479e0 + pow(R - 0.80e1, 2) * (-0.286311872975778092e0) + pow(R - 0.80e1, 3) * 0.107363757268176666e0 : (R < 0.85e1 ? -0.241681452437026500e1 + R * 0.273478395414577580e0 + pow(R - 0.825e1, 2) * (-0.205789055024645590e0) + pow(R - 0.825e1, 3) * 0.805588598653410592e-1 : (R < 0.875e1 ? -0.168220480717955279e1 + R * 0.185688654127006220e0 + pow(R - 0.85e1, 2) * (-0.145369910125639795e0) + pow(R - 0.85e1, 3) * 0.589704467904595755e-1 : (R < 0.90e1 ? -0.115112404579722782e1 + R * 0.124060657837397476e0 + pow(R - 0.875e1, 2) * (-0.101142075032795112e0) + pow(R - 0.875e1, 3) * 0.429317286528207581e-1 : (R < 0.925e1 ? -0.774082571680634435e0 + R * 0.815393194434038265e-1 + pow(R - 0.90e1, 2) * (-0.689432785431795397e-1) + pow(R - 0.90e1, 3) * 0.298028792382568526e-1 : (R < 0.95e1 ? -0.510752562018131795e0 + R * 0.526557200289872185e-1 + pow(R - 0.925e1, 2) * (-0.465911191144868994e-1) + pow(R - 0.925e1, 3) * 0.220951486341521459e-1 : (R < 0.100e2 ? -0.331368437976149399e0 + R * 0.335030008406472998e-1 + pow(R - 0.95e1, 2) * (-0.300197576388727891e-1) + pow(R - 0.95e1, 3) * 0.118980987951563810e-1 : (R < 0.105e2 ? -0.126424279615417967e0 + R * 0.124068172981417965e-1 + pow(R - 0.100e2, 2) * (-0.121726094461382193e-1) + pow(R - 0.100e2, 3) * 0.482633180370925074e-2 : (R < 0.110e2 ? -0.390591042712479242e-1 + R * 0.385395670478551680e-2 + pow(R - 0.105e2, 2) * (-0.493311174057434274e-2) + pow(R - 0.105e2, 3) * 0.223628098200661903e-2 : (R < 0.120e2 ? -0.419793603887752553e-2 + R * 0.598055700716138656e-3 + pow(R - 0.110e2, 2) * (-0.157869026756441398e-2) + pow(R - 0.110e2, 3) * 0.569253019848275292e-3 : (R < 0.140e2 ? 0.121880844204143596e-1 + R * (-0.851565774867863324e-3) + pow(R - 0.120e2, 2) * 0.129068791980411948e-3 + pow(R - 0.120e2, 3) * (-0.332456764824015487e-5) : (R < 0.160e2 ? 0.600843806075136277e-2 + R * (-0.375185418725097340e-3) + pow(R - 0.140e2, 2) * 0.109121386090971017e-3 + pow(R - 0.140e2, 3) * (-0.219071530517111758e-4) : (R < 0.180e2 ? 0.349207105680795788e-2 + R * (-0.201585710981747382e-3) + pow(R - 0.160e2, 2) * (-0.223215322192960378e-4) + pow(R - 0.160e2, 3) * 0.175651510925848669e-4 : (R < 0.200e2 ? 0.135638382050243603e-2 + R * (-0.800900267479131162e-4) + pow(R - 0.180e2, 2) * 0.830693743362131639e-4 + pow(R - 0.180e2, 3) * (-0.165219395886282996e-4) : (R < 0.250e2 ? -0.112379864448799841e-2 + R * 0.539241955333999174e-4 + pow(R - 0.200e2, 2) * (-0.160622631955566403e-4) + pow(R - 0.200e2, 3) * 0.132290860097533105e-5 : 0.175120522805416191e-3 + R * (-0.748029134901664848e-5) + pow(R - 0.250e2, 2) * 0.378136581907332607e-5 + pow(R - 0.250e2, 3) * (-0.393828127853999272e-6))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1450071482e5 * (R - 0.300e2) * (R - 0.250e2) + 0.5062144000e3 * R - 0.1015398052e8 - 0.253107200e2 * R * R + 0.75000e3 * (-0.1930475707e2 * R + 0.1063027175e4) * R) * pow(R, -6));
}

static double radcoeff_3_0_3_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.586858360699999970e1 + pow(R - 0.475e1, 2) * (-0.324195333439528142e2) + pow(R - 0.475e1, 3) * 0.685314352638112325e2 : (R < 0.525e1 ? 0.217137792490589874e2 + R * (-0.336012256001179743e1) + pow(R - 0.50e1, 2) * 0.189790431039056209e2 + pow(R - 0.50e1, 3) * (-0.310765972474337246e2) : (R < 0.55e1 ? 0.318543487875225573e1 + R * 0.302537008047189471e0 + pow(R - 0.525e1, 2) * (-0.432840483166967349e1) + pow(R - 0.525e1, 3) * 0.527846022192366249e1 : (R < 0.575e1 ? 0.945708670097328152e1 + R * (-0.871954116176960503e0) + pow(R - 0.55e1, 2) * (-0.369559665226926681e0) + pow(R - 0.55e1, 3) * (-0.231535845626092573e1) : (R < 0.60e1 ? 0.129565416192012464e2 + R * (-0.149086365933934717e1) + pow(R - 0.575e1, 2) * (-0.210607850742262093e1) + pow(R - 0.575e1, 3) * 0.144309097912003925e1 : (R < 0.625e1 ? 0.175422181797939025e2 + R * (-0.227332335446565059e1) + pow(R - 0.60e1, 2) * (-0.102376027308259143e1) + pow(R - 0.60e1, 3) * 0.131086269978077263e1 : (R < 0.65e1 ? 0.191617990194878196e2 + R * (-0.253941673479805097e1) + pow(R - 0.625e1, 2) * (-0.406132482470118530e-1) + pow(R - 0.625e1, 3) * 0.920208429756868895e0 : (R < 0.675e1 ? 0.181841279812239378e2 + R * (-0.238718427834214442e1) + pow(R - 0.65e1, 2) * 0.649543074070639825e0 + pow(R - 0.65e1, 3) * 0.280860893191750560e0 : (R < 0.70e1 ? 0.156814404318752558e2 + R * (-0.200975132383337129e1) + pow(R - 0.675e1, 2) * 0.860188743964452773e0 + pow(R - 0.675e1, 3) * (-0.100513250523875566e0) : (R < 0.725e1 ? 0.128548947462705989e2 + R * (-0.159850318632437127e1) + pow(R - 0.70e1, 2) * 0.784803806071546095e0 + pow(R - 0.70e1, 3) * (-0.192344467096242866e0) : (R < 0.75e1 ? 0.103174940648012932e2 + R * (-0.124216587086914387e1) + pow(R - 0.725e1, 2) * 0.640545455749363946e0 + pow(R - 0.725e1, 3) * (-0.185199953091154168e0) : (R < 0.775e1 ? 0.821302638149289876e1 + R * (-0.956618134199053172e0) + pow(R - 0.75e1, 2) * 0.501645490930998306e0 + pow(R - 0.75e1, 3) * (-0.155915272539142225e0) : (R < 0.80e1 ? 0.652463115159348472e1 + R * (-0.735029502334643259e0) + pow(R - 0.775e1, 2) * 0.384709036526641623e0 + pow(R - 0.775e1, 3) * (-0.123185983952273606e0) : (R < 0.825e1 ? 0.519269351519898947e1 + R * (-0.565772356062373749e0) + pow(R - 0.80e1, 2) * 0.292319548562436415e0 + pow(R - 0.80e1, 3) * (-0.949559660517647064e-1) : (R < 0.85e1 ? 0.415054667218085704e1 + R * (-0.437416825415861465e0) + pow(R - 0.825e1, 2) * 0.221102574023612886e0 + pow(R - 0.825e1, 3) * (-0.720919118406676135e-1) : (R < 0.875e1 ? 0.333844969183053131e1 + R * (-0.340382771874180146e0) + pow(R - 0.85e1, 2) * 0.167033640143112172e0 + pow(R - 0.85e1, 3) * (-0.542797081855658226e-1) : (R < 0.90e1 ? 0.270632164451490453e1 + R * (-0.267043397087417644e0) + pow(R - 0.875e1, 2) * 0.126323859003937805e0 + pow(R - 0.875e1, 3) * (-0.411412362170687218e-1) : (R < 0.925e1 ? 0.221454252448534250e1 + R * (-0.211595449376149158e0) + pow(R - 0.90e1, 2) * 0.954679318411362637e-1 + pow(R - 0.90e1, 3) * (-0.299585597461585543e-1) : (R < 0.95e1 ? 0.183046136002386839e1 + R * (-0.169478713407985759e0) + pow(R - 0.925e1, 2) * 0.729990120315173463e-1 + pow(R - 0.925e1, 3) * (-0.237186303982972087e-1) : (R < 0.100e2 ? 0.153015669792312425e1 + R * (-0.137426450591907806e0) + pow(R - 0.95e1, 2) * 0.552100392327944389e-1 + pow(R - 0.95e1, 3) * (-0.146619256979576371e-1) : (R < 0.105e2 ? 0.109999051742581622e1 + R * (-0.932128556325816093e-1) + pow(R - 0.100e2, 2) * 0.332171506858579824e-1 + pow(R - 0.100e2, 3) * (-0.781284284138951748e-2) : (R < 0.110e2 ? 0.820064254916540558e0 + R * (-0.658553370777657660e-1) + pow(R - 0.105e2, 2) * 0.214978864237737044e-1 + pow(R - 0.105e2, 3) * (-0.490252293648435825e-2) : (R < 0.120e2 ? 0.628794974719908750e0 + R * (-0.480343428563553346e-1) + pow(R - 0.110e2, 2) * 0.141441020190471670e-1 + pow(R - 0.110e2, 3) * (-0.253831318269182949e-2) : (R < 0.140e2 ? 0.392321589676037807e0 + R * (-0.273610783663364859e-1) + pow(R - 0.120e2, 2) * 0.652916247097167814e-2 + pow(R - 0.120e2, 3) * (-0.759563653901717270e-3) : (R < 0.160e2 ? 0.174335325809785391e0 + R * (-0.103591923292703850e-1) + pow(R - 0.140e2, 2) * 0.197178054756137365e-2 + pow(R - 0.140e2, 3) * (-0.182187223963090717e-3) : (R < 0.180e2 ? 0.895509421653116616e-1 + R * (-0.465831682658197910e-2) + pow(R - 0.160e2, 2) * 0.878657203782829289e-3 + pow(R - 0.160e2, 3) * (-0.938386739959197632e-4) : (R < 0.200e2 ? 0.493206964992305846e-1 + R * (-0.226975209940169943e-2) + pow(R - 0.180e2, 2) * 0.315625159807310656e-3 + pow(R - 0.180e2, 3) * (-0.236902928032304618e-4) : (R < 0.250e2 ? 0.308293322842244470e-1 + R * (-0.129153497381122241e-2) + pow(R - 0.200e2, 2) * 0.173483402987927878e-3 + pow(R - 0.200e2, 3) * (-0.992056219713667504e-5) : 0.915655045692985795e-2 + R * (-0.300743108717194335e-3) + pow(R - 0.250e2, 2) * 0.246749700308777472e-4 + pow(R - 0.250e2, 3) * (-0.742899287887775096e-6))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1599562499e7 * (R - 0.300e2) * (R - 0.250e2) - 0.3199297540e8 * R + 0.1199678812e10 + 0.1599648770e7 * R * R + 0.75000e3 * (-0.11003e0 * R - 0.799763870e5) * R) * pow(R, -6));
}

static double radcoeff_3_2_1_0_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.208761782799999907e1 + R * 0.222044604925031308e-15 + pow(R - 0.475e1, 2) * 0.157512644106816779e2 + pow(R - 0.475e1, 3) * (-0.430097510827267087e2) : (R < 0.525e1 ? 0.334352510635209876e1 + R * (-0.188696122670419797e0) + pow(R - 0.50e1, 2) * (-0.165060489013633571e2) + pow(R - 0.50e1, 3) * 0.265218584961801369e2 : (R < 0.55e1 ? 0.199472249979211860e2 + R * (-0.346887210531832135e1) + pow(R - 0.525e1, 2) * 0.338534497077174779e1 + pow(R - 0.525e1, 3) * (-0.452954824599384942e1) : (R < 0.575e1 ? 0.154494328263096214e2 + R * (-0.262548991605629478e1) + pow(R - 0.55e1, 2) * (-0.118162137236394252e-1) + pow(R - 0.55e1, 3) * 0.281273161419527451e1 : (R < 0.60e1 ? 0.124941385873248763e2 + R * (-0.210401084525650006e1) + pow(R - 0.575e1, 2) * 0.209773249692281682e1 + pow(R - 0.575e1, 3) * (-0.457670569187263454e0) : (R < 0.625e1 ? 0.683977766529922349e1 + R * (-0.114095782851770378e1) + pow(R - 0.60e1, 2) * 0.175447957003236921e1 + pow(R - 0.60e1, 3) * (-0.831331411046214663e0) : (R < 0.65e1 ? 0.242791092610427883e1 + R * (-0.419592683072684602e0) + pow(R - 0.625e1, 2) * 0.113098101174770815e1 + pow(R - 0.625e1, 3) * (-0.889603351427878941e0) : (R < 0.675e1 ? -0.106787016654874112e0 + R * (-0.209028055915578270e-1) + pow(R - 0.65e1, 2) * 0.463778498176798948e0 + pow(R - 0.65e1, 3) * (-0.457736764042270372e0) : (R < 0.70e1 ? -0.107088233681268274e1 + R * 0.125160800238915959e0 + pow(R - 0.675e1, 2) * 0.120475925145096141e0 + pow(R - 0.675e1, 3) * (-0.155983269203039787e0) : (R < 0.725e1 ? -0.128272752725125838e1 + R * 0.156151899835894059e0 + pow(R - 0.70e1, 2) * 0.348847324281629503e-2 + pow(R - 0.70e1, 3) * (-0.515543511455700681e-1) : (R < 0.75e1 ? -0.122587905382693152e1 + R * 0.148229695617507817e0 + pow(R - 0.725e1, 2) * (-0.351772901163612609e-1) + pow(R - 0.725e1, 3) * (-0.157497518146798368e-1) : (R < 0.775e1 ? -0.107426079790556028e1 + R * 0.127687972094074703e0 + pow(R - 0.75e1, 2) * (-0.469896039773711402e-1) + pow(R - 0.75e1, 3) * 0.379024042891362711e-4 : (R < 0.80e1 ? -0.895167417447998437e0 + R * 0.104200276806193343e0 + pow(R - 0.775e1, 2) * (-0.469611771741542880e-1) + pow(R - 0.775e1, 3) * 0.688664651752378832e-2 : (R < 0.825e1 ? -0.720480148249215357e0 + R * 0.820109344411519142e-1 + pow(R - 0.80e1, 2) * (-0.417961922860114465e-1) + pow(R - 0.80e1, 3) * 0.855613232561519554e-2 : (R < 0.85e1 ? -0.563784694710892098e0 + R * 0.627171131091990436e-1 + pow(R - 0.825e1, 2) * (-0.353790930418000499e-1) + pow(R - 0.825e1, 3) * 0.915311218001554905e-2 : (R < 0.875e1 ? -0.430079497757441420e0 + R * 0.467437751220519324e-1 + pow(R - 0.85e1, 2) * (-0.285142589067883881e-1) + pow(R - 0.85e1, 3) * 0.807139783432267444e-2 : (R < 0.90e1 ? -0.320227777702690841e0 + R * 0.340000327625932380e-1 + pow(R - 0.875e1, 2) * (-0.224607105310463823e-1) + pow(R - 0.875e1, 3) * 0.748736816269370432e-2 : (R < 0.925e1 ? -0.233076318368176078e0 + R * 0.241735590275751200e-1 + pow(R - 0.90e1, 2) * (-0.168451844090261038e-1) + pow(R - 0.90e1, 3) * 0.578104375490253071e-2 : (R < 0.95e1 ? -0.166156333455733191e0 + R * 0.168349125271062897e-1 + pow(R - 0.925e1, 2) * (-0.125094015928492053e-1) + pow(R - 0.925e1, 3) * 0.512865208169617243e-2 : (R < 0.100e2 ? -0.116573789820997351e0 + R * 0.115418339959997215e-1 + pow(R - 0.95e1, 2) * (-0.866291253157707580e-2) + pow(R - 0.95e1, 3) * 0.311830782315526689e-2 : (R < 0.105e2 ? -0.551079128338909582e-1 + R * 0.521765233178909590e-2 + pow(R - 0.100e2, 2) * (-0.398545079684417547e-2) + pow(R - 0.100e2, 3) * 0.142951299453196825e-2 : (R < 0.110e2 ? -0.253357678738609163e-1 + R * 0.230433628084389689e-2 + pow(R - 0.105e2, 2) * (-0.184118130504622298e-2) + pow(R - 0.105e2, 3) * 0.673404092316858536e-3 : (R < 0.120e2 ? -0.110144770946884983e-1 + R * 0.968208045035318056e-3 + pow(R - 0.110e2, 2) * (-0.831075166570935235e-3) + pow(R - 0.110e2, 3) * 0.257385023435617219e-3 : (R < 0.140e2 ? -0.908224083793589916e-3 + R * 0.782127822002991635e-4 + pow(R - 0.120e2, 2) * (-0.589200962640835829e-4) + pow(R - 0.120e2, 3) * 0.112484226694669986e-4 : (R < 0.160e2 ? 0.355873294824036372e-3 + R * (-0.224865308224311711e-4) + pow(R - 0.140e2, 2) * 0.857043975271841219e-5 + pow(R - 0.140e2, 3) * (-0.183517156575141299e-5) : (R < 0.180e2 ? 0.179318477759191671e-3 + R * (-0.102268306005744799e-4) + pow(R - 0.160e2, 2) * (-0.244058964179006531e-5) + pow(R - 0.160e2, 3) * 0.124727239228865265e-5 : (R < 0.200e2 ? 0.858459158088763544e-4 + R * (-0.502192046027090849e-5) + pow(R - 0.180e2, 2) * 0.504304471194185143e-5 + pow(R - 0.180e2, 3) * (-0.999572103278198497e-6) : (R < 0.250e2 ? -0.655247543381622788e-4 + R * 0.315539314815811397e-5 + pow(R - 0.200e2, 2) * (-0.954387907727339982e-6) + pow(R - 0.200e2, 3) * 0.789300888671434228e-7 : 0.110848693833882146e-4 + R * (-0.468729264079528578e-6) + pow(R - 0.250e2, 2) * 0.229563425279811440e-6 + pow(R - 0.250e2, 3) * (-0.237931334295811429e-7))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.7734052403e3 * (R - 0.300e2) * (R - 0.250e2) - 0.1374596000e2 * R - 0.5412889790e6 + 0.68729800e0 * R * R + 0.75000e3 * (-0.1032008483e1 * R + 0.567261017e2) * R) * pow(R, -6));
}

static double radcoeff_3_2_1_2_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.210312485399999982e1 + pow(R - 0.475e1, 2) * (-0.392001764567912545e2) + pow(R - 0.475e1, 3) * 0.925996514911650195e2 : (R < 0.525e1 ? 0.808200154101093027e1 + R * (-0.223765357380218610e1) + pow(R - 0.50e1, 2) * 0.302495621615825101e2 + pow(R - 0.50e1, 3) * (-0.460522429214950648e2) : (R < 0.55e1 ? -0.248193911678459074e2 + R * 0.425233195920874429e1 + pow(R - 0.525e1, 2) * (-0.428962002953878851e1) + pow(R - 0.525e1, 3) * 0.668690630681524745e1 : (R < 0.575e1 ? -0.200824265563196498e2 + R * 0.336131687696720904e1 + pow(R - 0.55e1, 2) * 0.725559700572647071e0 + pow(R - 0.55e1, 3) * (-0.468195134256593359e1) : (R < 0.60e1 ? -0.171484899127039121e2 + R * 0.284623085052241986e1 + pow(R - 0.575e1, 2) * (-0.278590380635180335e1) + pow(R - 0.575e1, 3) * 0.792026577048500657e0 : (R < 0.625e1 ? -0.984355196545867273e1 + R * 0.160178393054311208e1 + pow(R - 0.60e1, 2) * (-0.219188387356542780e1) + pow(R - 0.60e1, 3) * 0.958955427971920238e0 : (R < 0.65e1 ? -0.423969981624708137e1 + R * 0.685646136505133064e0 + pow(R - 0.625e1, 2) * (-0.147266730258648759e1) + pow(R - 0.625e1, 3) * 0.113084307042382015e1 : (R < 0.675e1 ? -0.906118358356311715e0 + R * 0.161345560916355629e0 + pow(R - 0.65e1, 2) * (-0.624534999768622368e0) + pow(R - 0.65e1, 3) * 0.588851446812799217e0 : (R < 0.70e1 ? 0.426589519861250932e0 + R * (-0.405122926905556874e-1) + pow(R - 0.675e1, 2) * (-0.182896414659022927e0) + pow(R - 0.675e1, 3) * 0.199855116084982687e0 : (R < 0.725e1 ? 0.796108841578930249e0 + R * (-0.944876657541328935e-1) + pow(R - 0.70e1, 2) * (-0.330050775952859046e-1) + pow(R - 0.70e1, 3) * 0.630564216472698225e-1 : (R < 0.75e1 ? 0.828957363923617518e0 + R * (-0.991671254929127610e-1) + pow(R - 0.725e1, 2) * 0.142872386401664622e-1 + pow(R - 0.725e1, 3) * 0.198389899659382231e-1 : (R < 0.775e1 ? 0.748684576016620862e0 + R * (-0.883036955542161051e-1) + pow(R - 0.75e1, 2) * 0.291664811146201304e-1 + pow(R - 0.75e1, 3) * 0.236321400897718682e-2 : (R < 0.80e1 ? 0.634090246629226861e0 + R * (-0.732773523702228147e-1) + pow(R - 0.775e1, 2) * 0.309388916213530207e-1 + pow(R - 0.775e1, 3) * (-0.376238488184702869e-2) : (R < 0.825e1 ? 0.517853150929140971e0 + R * (-0.585133537248926222e-1) + pow(R - 0.80e1, 2) * 0.281171029599677491e-1 + pow(R - 0.80e1, 3) * (-0.556011160158908103e-2) : (R < 0.85e1 ? 0.412141341044205300e0 + R * (-0.454973231702067021e-1) + pow(R - 0.825e1, 2) * 0.239470192587759381e-1 + pow(R - 0.825e1, 3) * (-0.567140359179658937e-2) : (R < 0.875e1 ? 0.320813381691385013e0 + R * (-0.345872017142805910e-1) + pow(R - 0.85e1, 2) * 0.196934665649284961e-1 + pow(R - 0.85e1, 3) * (-0.531051467122455913e-2) : (R < 0.90e1 ? 0.244514893470870798e0 + R * (-0.257361899326709505e-1) + pow(R - 0.875e1, 2) * 0.157105805615100763e-1 + pow(R - 0.875e1, 3) * (-0.482209420330510091e-2) : (R < 0.925e1 ? 0.182861130975320557e0 + R * (-0.187850423150356174e-1) + pow(R - 0.90e1, 2) * 0.120940099090312506e-1 + pow(R - 0.90e1, 3) * (-0.398279856355515140e-2) : (R < 0.95e1 ? 0.134527645796475886e0 + R * (-0.134848120911865831e-1) + pow(R - 0.925e1, 2) * 0.910691098636488665e-2 + pow(R - 0.925e1, 3) * (-0.344202463047419902e-2) : (R < 0.100e2 ? 0.979163252860714983e-1 + R * (-0.957673621621805277e-2) + pow(R - 0.95e1, 2) * 0.652539251350923739e-2 + pow(R - 0.95e1, 3) * (-0.226164886614626474e-2) : (R < 0.105e2 ? 0.509734086671851244e-1 + R * (-0.474758035231851241e-2) + pow(R - 0.100e2, 2) * 0.313291921428984028e-2 + pow(R - 0.100e2, 3) * (-0.105381919530562942e-2) : (R < 0.110e2 ? 0.270280854843328935e-1 + R * (-0.240502553450789485e-2) + pow(R - 0.105e2, 2) * 0.155219042133139615e-2 + pow(R - 0.105e2, 3) * (-0.489556096631213380e-3) : (R < 0.120e2 ? 0.143196817401489949e-1 + R * (-0.122000218564990862e-2) + pow(R - 0.110e2, 2) * 0.817856276384576085e-3 + pow(R - 0.110e2, 3) * (-0.231175164434667320e-3) : (R < 0.140e2 ? 0.360011813851710298e-2 + R * (-0.277815126184758601e-3) + pow(R - 0.120e2, 2) * 0.124330783080574042e-3 + pow(R - 0.120e2, 3) * (-0.202275902440973570e-4) : (R < 0.160e2 ? 0.371331857402831215e-3 + R * (-0.232230767916307980e-4) + pow(R - 0.140e2, 2) * 0.296524161598988958e-5 + pow(R - 0.140e2, 3) * (-0.467667133724486891e-8) : (R < 0.180e2 ? 0.194277867969490847e-3 + R * (-0.114182303837181772e-4) + pow(R - 0.160e2, 2) * 0.293718158796642037e-5 + pow(R - 0.160e2, 3) * (-0.189574744303666208e-6) : (R < 0.200e2 ? 0.339810668069367921e-4 + R * (-0.194440096349648854e-5) + pow(R - 0.180e2, 2) * 0.179973312214442312e-5 + pow(R - 0.180e2, 3) * (-0.353463111710589279e-6) : (R < 0.250e2 ? -0.207952085591826328e-4 + R * 0.101297418455413174e-5 + pow(R - 0.200e2, 2) * (-0.321045548119112767e-6) + pow(R - 0.200e2, 3) * 0.268726840032572887e-7 : 0.441284276191749076e-5 + R * (-0.182029996392699623e-6) + pow(R - 0.250e2, 2) * 0.820447119297465103e-7 + pow(R - 0.250e2, 3) * (-0.838944536224131559e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1714319578e3 * (R - 0.300e2) * (R - 0.250e2) - 0.1647023560e3 * R - 0.1188699704e6 + 0.8235117800e1 * R * R + 0.75000e3 * (-0.238183445e0 * R + 0.1268833356e2) * R) * pow(R, -6));
}

static double radcoeff_3_2_2_2_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.252943491700000023e0 + pow(R - 0.475e1, 2) * (-0.100433501803281260e2) + pow(R - 0.475e1, 3) * 0.195921695853125044e2 : (R < 0.525e1 ? 0.667207821979984494e1 + R * (-0.134814329291796886e1) + pow(R - 0.50e1, 2) * 0.465077700865625321e1 + pow(R - 0.50e1, 3) * (-0.618556267593751308e1) : (R < 0.55e1 ? 0.746725977422661447e0 + R * (-0.182547790328125986e0) + pow(R - 0.525e1, 2) * 0.116050017031180050e-1 + pow(R - 0.525e1, 3) * 0.558300683237543560e0 : (R < 0.575e1 ? 0.148513403932401478e0 + R * (-0.720639113695275418e-1) + pow(R - 0.55e1, 2) * 0.430330514131275710e0 + pow(R - 0.55e1, 3) * (-0.551014943412661995e0) : (R < 0.60e1 ? -0.476337789685858048e0 + R * 0.397860438062361821e-1 + pow(R - 0.575e1, 2) * 0.170693065717791650e-1 + pow(R - 0.575e1, 3) * 0.142762456813104427e0 : (R < 0.625e1 ? -0.684855978267497001e0 + R * 0.750886577445828429e-1 + pow(R - 0.60e1, 2) * 0.124141149181607485e0 + pow(R - 0.60e1, 3) * (-0.863613094397552850e-1) : (R < 0.65e1 ? -0.965182983596452826e0 + R * 0.120966486815432456e0 + pow(R - 0.625e1, 2) * 0.593701671017910215e-1 + pow(R - 0.625e1, 3) * (-0.729002334540834185e-1) : (R < 0.675e1 ? -0.106671729785896785e1 + R * 0.136982776593687350e0 + pow(R - 0.65e1, 2) * 0.469499201122845333e-2 + pow(R - 0.65e1, 3) * (-0.395832799439112953e-1) : (R < 0.70e1 ? -0.103279035896627280e1 + R * 0.131908407609818201e0 + pow(R - 0.675e1, 2) * (-0.249924679467050173e-1) + pow(R - 0.675e1, 3) * (-0.151151523702711295e-1) : (R < 0.725e1 ? -0.927276287169278901e0 + R * 0.116578082567039845e0 + pow(R - 0.70e1, 2) * (-0.363288322244083653e-1) + pow(R - 0.70e1, 3) * (-0.334986865500408459e-2) : (R < 0.75e1 ? -0.793353436364662268e0 + R * 0.977855660820223932e-1 + pow(R - 0.725e1, 2) * (-0.388412337156614287e-1) + pow(R - 0.725e1, 3) * 0.254381035028736213e-2 : (R < 0.775e1 ? -0.653663873306529197e0 + R * 0.788419136648705610e-1 + pow(R - 0.75e1, 2) * (-0.369333759529459071e-1) + pow(R - 0.75e1, 3) * 0.560988485385460756e-2 : (R < 0.80e1 ? -0.520919586963338954e0 + R * 0.614270790984953463e-1 + pow(R - 0.775e1, 2) * (-0.327259623125549515e-1) + pow(R - 0.775e1, 3) * 0.734356863429425945e-2 : (R < 0.825e1 ? -0.402961720049184347e0 + R * 0.464410170611480461e-1 + pow(R - 0.80e1, 2) * (-0.272182858368342565e-1) + pow(R - 0.80e1, 3) * 0.693061180896830265e-2 : (R < 0.85e1 ? -0.302999933169527946e0 + R * 0.341313638569124764e-1 + pow(R - 0.825e1, 2) * (-0.220203269801080292e-1) + pow(R - 0.825e1, 3) * 0.670022988983247358e-2 : (R < 0.875e1 ? -0.221363614235217415e0 + R * 0.243774934712020497e-1 + pow(R - 0.85e1, 2) * (-0.169951545627336741e-1) + pow(R - 0.85e1, 3) * 0.562174383170185605e-2 : (R < 0.90e1 ? -0.157207343909944008e0 + R * 0.169339931582793146e-1 + pow(R - 0.875e1, 2) * (-0.127788466889572818e-1) + pow(R - 0.875e1, 3) * 0.459177782336010493e-2 : (R < 0.925e1 ? -0.108178090276126224e0 + R * 0.114055281556806921e-1 + pow(R - 0.90e1, 2) * (-0.933501332143720289e-2) + pow(R - 0.90e1, 3) * 0.380952266685773491e-2 : (R < 0.95e1 ? -0.721347090807307190e-1 + R * 0.745230699499791534e-2 + pow(R - 0.925e1, 2) * (-0.647787132129390170e-2) + pow(R - 0.925e1, 3) * 0.282621605320895492e-2 : (R < 0.100e2 ? -0.467597249811126173e-1 + R * 0.474328684432764359e-2 + pow(R - 0.95e1, 2) * (-0.435820928138718530e-2) + pow(R - 0.95e1, 3) * 0.174175320946379567e-2 : (R < 0.105e2 ? -0.171126144077830486e-1 + R * 0.169139247003830483e-2 + pow(R - 0.100e2, 2) * (-0.174557946719149180e-2) + pow(R - 0.100e2, 3) * 0.687956141429764260e-3 : (R < 0.110e2 ? -0.455208496515093104e-2 + R * 0.461780108919136257e-3 + pow(R - 0.105e2, 2) * (-0.713645255046845462e-3) + pow(R - 0.105e2, 3) * 0.338321304017145919e-3 : (R < 0.120e2 ? 0.370740931463347579e-3 + R * 0.187583188515022070e-5 + pow(R - 0.110e2, 2) * (-0.206163299021126556e-3) + pow(R - 0.110e2, 3) * 0.827700285359763116e-4 : (R < 0.140e2 ? 0.221554581019008708e-2 + R * (-0.162140680549173916e-3) + pow(R - 0.120e2, 2) * 0.421467865868024058e-4 + pow(R - 0.120e2, 3) * (-0.463115969360772160e-5) : (R < 0.160e2 ? 0.764898458643597460e-3 + R * (-0.491274505252569586e-4) + pow(R - 0.140e2, 2) * 0.143598284251560745e-4 + pow(R - 0.140e2, 3) * (-0.190635269876379863e-5) : (R < 0.180e2 ? 0.254077649706771903e-3 + R * (-0.145643692097982441e-4) + pow(R - 0.160e2, 2) * 0.292171223257328230e-5 + pow(R - 0.160e2, 3) * (-0.764035600870800088e-7) : (R < 0.200e2 ? 0.712931583859013689e-4 + R * (-0.379436300055007556e-5) + pow(R - 0.180e2, 2) * 0.246329087205080219e-5 + pow(R - 0.180e2, 3) * (-0.459073792137882232e-6) : (R < 0.250e2 ? -0.941182811397093275e-5 + R * 0.549914981998546649e-6 + pow(R - 0.200e2, 2) * (-0.291151880776491302e-6) + pow(R - 0.200e2, 3) * 0.268502232513563989e-7 : 0.910945437056591547e-5 + R * (-0.347837081914636681e-6) + pow(R - 0.250e2, 2) * 0.111601467993854655e-6 + pow(R - 0.250e2, 3) * (-0.106113224245854639e-7))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.5076708883e3 * (R - 0.300e2) * (R - 0.250e2) + 0.1534264400e3 * R + 0.3543147818e6 - 0.767132200e1 * R * R + 0.75000e3 * (0.685844330e0 * R - 0.3733787202e2) * R) * pow(R, -6));
}

static double radcoeff_3_2_3_2_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.339799674800000018e1 + pow(R - 0.475e1, 2) * 0.423434051434023928e1 + pow(R - 0.475e1, 3) * 0.684859000663904283e1 : (R < 0.525e1 ? -0.200327456640747030e2 + R * 0.340128088341494017e1 + pow(R - 0.50e1, 2) * 0.937078301931952140e1 + pow(R - 0.50e1, 3) * (-0.171738529639171276e2) : (R < 0.55e1 ? -0.274082070922862577e2 + R * 0.486657496234023945e1 + pow(R - 0.525e1, 2) * (-0.350960670361832650e1) + pow(R - 0.525e1, 3) * 0.237094824902948220e1 : (R < 0.575e1 ? -0.203841333912325702e2 + R * 0.355632440722410337e1 + pow(R - 0.55e1, 2) * (-0.173139551684621473e1) + pow(R - 0.55e1, 3) * (-0.162716759700080194e1) : (R < 0.60e1 ? -0.137857179282492393e2 + R * 0.238553272436334574e1 + pow(R - 0.575e1, 2) * (-0.295177121459681624e1) + pow(R - 0.575e1, 3) * 0.856693102173734844e0 : (R < 0.625e1 ? -0.606528389563507719e1 + R * 0.107027707372251291e1 + pow(R - 0.60e1, 2) * (-0.230925138796651508e1) + pow(R - 0.60e1, 3) * 0.140941332590585322e1 : (R < 0.65e1 ? -0.622835678066268050e0 + R * 0.179916378346602901e0 + pow(R - 0.625e1, 2) * (-0.125219139353712516e1) + pow(R - 0.625e1, 3) * 0.110507838780285406e1 : (R < 0.675e1 ? 0.203897695350800934e1 + R * (-0.238977120708924490e0) + pow(R - 0.65e1, 2) * (-0.423382602684984566e0) + pow(R - 0.65e1, 3) * 0.539137961282729616e0 : (R < 0.70e1 ? 0.276750937329860847e1 + R * (-0.349580054310904942e0) + pow(R - 0.675e1, 2) * (-0.190291317229372946e-1) + pow(R - 0.675e1, 3) * 0.151115309466228087e0 : (R < 0.725e1 ? 0.263694434663219068e1 + R * (-0.330760499647455797e0) + pow(R - 0.70e1, 2) * 0.943073503767337673e-1 + pow(R - 0.70e1, 3) * 0.291006856523581617e-1 : (R < 0.75e1 ? 0.226187036456972024e1 + R * (-0.278150445899271792e0) + pow(R - 0.725e1, 2) * 0.116132864616002390e0 + pow(R - 0.725e1, 3) * (-0.893925527566058475e-2) : (R < 0.775e1 ? 0.184606157816592731e1 + R * (-0.221760123955456995e0) + pow(R - 0.75e1, 2) * 0.109428423159256952e0 + pow(R - 0.75e1, 3) * (-0.216877669497159697e-1) : (R < 0.80e1 ? 0.146004187986147693e1 + R * (-0.171112368678900256e0) + pow(R - 0.775e1, 2) * 0.931625979469699744e-1 + pow(R - 0.775e1, 3) * (-0.236410100454760470e-1) : (R < 0.825e1 ? 0.112830627473153600e1 + R * (-0.128963759088942004e0) + pow(R - 0.80e1, 2) * 0.754318404128629383e-1 + pow(R - 0.80e1, 3) * (-0.217848840683795078e-1) : (R < 0.85e1 ? 0.855222526783986581e0 + R * (-0.953325046453317032e-1) + pow(R - 0.825e1, 2) * 0.590931773615783057e-1 + pow(R - 0.825e1, 3) * (-0.184547682410059755e-1) : (R < 0.875e1 ? 0.636893777712715048e0 + R * (-0.692461850097311760e-1) + pow(R - 0.85e1, 2) * 0.452521011808238241e-1 + pow(R - 0.85e1, 3) * (-0.150489184875965305e-1) : (R < 0.90e1 ? 0.466198583912756648e0 + R * (-0.494418066357436153e-1) + pow(R - 0.875e1, 2) * 0.339654123151264253e-1 + pow(R - 0.875e1, 3) * (-0.123189357286078889e-1) : (R < 0.925e1 ? 0.336072787435649445e0 + R * (-0.347689009272943786e-1) + pow(R - 0.90e1, 2) * 0.247262105186705078e-1 + pow(R - 0.90e1, 3) * (-0.907662691797191459e-2) : (R < 0.95e1 ? 0.238859904459479494e0 + R * (-0.241076632150788624e-1) + pow(R - 0.925e1, 2) * 0.179187403301915710e-1 + pow(R - 0.925e1, 3) * (-0.764379371950444503e-2) : (R < 0.100e2 ? 0.168361882447706501e0 + R * (-0.165815043723901573e-1) + pow(R - 0.95e1, 2) * 0.121858950405632372e-1 + pow(R - 0.95e1, 3) * (-0.438267542356583599e-2) : (R < 0.105e2 ? 0.818716370510129965e-1 + R * (-0.768261589950129924e-2) + pow(R - 0.100e2, 2) * 0.561188190521448322e-2 + pow(R - 0.100e2, 3) * (-0.199814082042376780e-2) : (R < 0.110e2 ? 0.398354388808487489e-1 + R * (-0.356933960960464230e-2) + pow(R - 0.105e2, 2) * 0.261467067457883109e-2 + pow(R - 0.105e2, 3) * (-0.938166078739093305e-3) : (R < 0.120e2 ? 0.193503285188814447e-1 + R * (-0.165829349408013133e-2) + pow(R - 0.110e2, 2) * 0.120742155647019108e-2 + pow(R - 0.110e2, 3) * (-0.356756393590059806e-3) : (R < 0.140e2 ? 0.406610649571914184e-2 + R * (-0.313719561909928536e-3) + pow(R - 0.120e2, 2) * 0.137152375700011714e-3 + pow(R - 0.120e2, 3) * (-0.216910930100237140e-4) : (R < 0.160e2 ? 0.404757840952327849e-3 + R * (-0.254031752301662746e-4) + pow(R - 0.140e2, 2) * 0.700581763986942262e-5 + pow(R - 0.140e2, 3) * (-0.125636617364314275e-5) : (R < 0.180e2 ? 0.215580158510500725e-3 + R * (-0.124562987544062954e-4) + pow(R - 0.160e2, 2) * (-0.532379401989434542e-6) + pow(R - 0.160e2, 3) * 0.839856567096291544e-6 : (R < 0.200e2 ? 0.770917918907536656e-4 + R * (-0.450753755720853720e-5) + pow(R - 0.180e2, 2) * 0.450676000058831472e-5 + pow(R - 0.180e2, 3) * (-0.892633621992022779e-6) : (R < 0.250e2 ? -0.583309678518089094e-4 + R * 0.280789898124044539e-5 + pow(R - 0.200e2, 2) * (-0.849041731363822691e-6) + pow(R - 0.200e2, 3) * 0.702289758711467064e-7 : 0.980271393054445552e-5 + R * (-0.415345142061778166e-6) + pow(R - 0.250e2, 2) * 0.204392906703377932e-6 + pow(R - 0.250e2, 3) * (-0.211939812374044605e-7))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.6953562330e3 * (R - 0.300e2) * (R - 0.250e2) + 0.7343034000e3 * R - 0.4917976100e6 - 0.3671517000e2 * R * R + 0.75000e3 * (-0.884307109e0 * R + 0.504726495e2) * R) * pow(R, -6));
}

static double radcoeff_3_2_3_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.281846717699999960e1 + R * 0.832667268468867405e-16 + pow(R - 0.475e1, 2) * 0.845646624122377233e1 + pow(R - 0.475e1, 3) * (-0.316972538288950894e2) : (R < 0.525e1 ? 0.114267365875297173e2 + R * (-0.171500197230594376e1) + pow(R - 0.50e1, 2) * (-0.153164741304475456e2) + pow(R - 0.50e1, 3) * 0.246850423826852854e2 : (R < 0.55e1 ? 0.267615667385751834e2 + R * (-0.474479359077622576e1) + pow(R - 0.525e1, 2) * 0.319730765656641802e1 + pow(R - 0.525e1, 3) * (-0.252096376584605864e1) : (R < 0.575e1 ? 0.207291562364403390e2 + R * (-0.361882046858915229e1) + pow(R - 0.55e1, 2) * 0.130658483218187382e1 + pow(R - 0.55e1, 3) * 0.238030107109894074e1 : (R < 0.60e1 ? 0.145253165079061937e2 + R * (-0.251922160166716402e1) + pow(R - 0.575e1, 2) * 0.309181063550607949e1 + pow(R - 0.575e1, 3) * (-0.984023424149694792e0) : (R < 0.625e1 ? 0.653477375225315260e1 + R * (-0.115782067594219207e1) + pow(R - 0.60e1, 2) * 0.235379306739380834e1 + pow(R - 0.60e1, 3) * (-0.132147451050015796e1) : (R < 0.65e1 ? 0.854237386125422993e0 + R * (-0.228700612964067657e0) + pow(R - 0.625e1, 2) * 0.136268718451868986e1 + pow(R - 0.625e1, 3) * (-0.116900629704967618e1) : (R < 0.675e1 ? -0.208286731339000930e1 + R * 0.233454298598462950e0 + pow(R - 0.65e1, 2) * 0.485932461731432619e0 + pow(R - 0.65e1, 3) * (-0.594129888501137793e0) : (R < 0.70e1 ? -0.294985623224895743e1 + R * 0.365021175370215945e0 + pow(R - 0.675e1, 2) * 0.403350453555792465e-1 + pow(R - 0.675e1, 3) * (-0.177586276945771449e0) : (R < 0.725e1 ? -0.285820074774471378e1 + R * 0.351891271120673366e0 + pow(R - 0.70e1, 2) * (-0.928546623537493399e-1) + pow(R - 0.70e1, 3) * (-0.333628661157758938e-1) : (R < 0.75e1 ? -0.248257466176640751e1 + R * 0.299208402547090691e0 + pow(R - 0.725e1, 2) * (-0.117876811940581264e0) + pow(R - 0.725e1, 3) * 0.915858620887392318e-2 : (R < 0.775e1 ? -0.206064007668222970e1 + R * 0.241987231490963961e0 + pow(R - 0.75e1, 2) * (-0.111007872283925821e0) + pow(R - 0.75e1, 3) * 0.225232924802800660e-1 : (R < 0.80e1 ? -0.166979979654016519e1 + R * 0.190706412689053556e0 + pow(R - 0.775e1, 2) * (-0.941154029237157713e-1) + pow(R - 0.775e1, 3) * 0.239059782700064734e-1 : (R < 0.825e1 ? -0.133470583402257503e1 + R * 0.148131082152821891e0 + pow(R - 0.80e1, 2) * (-0.761859192212109154e-1) + pow(R - 0.80e1, 3) * 0.210668808396937482e-1 : (R < 0.85e1 ? -0.105745919847218683e1 + R * 0.113988162699659001e0 + pow(R - 0.825e1, 2) * (-0.603857585914406025e-1) + pow(R - 0.825e1, 3) * 0.178759921312184947e-1 : (R < 0.875e1 ? -0.832804384452608293e0 + R * 0.871470319285421596e-1 + pow(R - 0.85e1, 2) * (-0.469787644930267298e-1) + pow(R - 0.85e1, 3) * 0.144869835954324240e-1 : (R < 0.90e1 ? -0.653749810919008412e0 + R * 0.663739591061723866e-1 + pow(R - 0.875e1, 2) * (-0.361135267964524109e-1) + pow(R - 0.875e1, 3) * 0.117047870870515720e-1 : (R < 0.925e1 ? -0.513064976670915107e0 + R * 0.505118432867683459e-1 + pow(R - 0.90e1, 2) * (-0.273349364811637310e-1) + pow(R - 0.90e1, 3) * 0.899098869636142696e-2 : (R < 0.95e1 ? -0.403802590797476824e0 + R * 0.385301854267542515e-1 + pow(R - 0.925e1, 2) * (-0.205916949588926604e-1) + pow(R - 0.925e1, 3) * 0.750577780750269485e-2 : (R < 0.100e2 ? -0.320531409619039365e0 + R * 0.296416712862146749e-1 + pow(R - 0.95e1, 2) * (-0.149623616032656392e-1) + pow(R - 0.95e1, 3) * 0.457068838167258400e-2 : (R < 0.105e2 ? -0.208357210802034759e0 + R * 0.181073259692034749e-1 + pow(R - 0.100e2, 2) * (-0.810632903075676238e-2) + pow(R - 0.100e2, 3) * 0.231614634469962848e-2 : (R < 0.110e2 ? -0.143217472408200042e0 + R * 0.117381066969714318e-1 + pow(R - 0.105e2, 2) * (-0.463210951370731944e-2) + pow(R - 0.105e2, 3) * 0.120051007952891439e-2 : (R < 0.120e2 ? -0.103176439532018771e0 + R * 0.800637974291079808e-2 + pow(R - 0.110e2, 2) * (-0.283134439441394764e-2) + pow(R - 0.110e2, 3) * 0.597933435503149205e-3 : (R < 0.140e2 ? -0.589831887031082164e-1 + R * 0.413749126059235160e-2 + pow(R - 0.120e2, 2) * (-0.103754408790449992e-2) + pow(R - 0.120e2, 3) * 0.125359630429162043e-3 : (R < 0.160e2 ? -0.250884370007401457e-1 + R * 0.149163047412429611e-2 + pow(R - 0.140e2, 2) * (-0.285386305329527661e-3) + pow(R - 0.140e2, 3) * 0.276459113836897865e-4 : (R < 0.180e2 ? -0.130521063755674061e-1 + R * 0.681836189410462909e-3 + pow(R - 0.160e2, 2) * (-0.119510837027388955e-3) + pow(R - 0.160e2, 3) * 0.105263661610787428e-4 : (R < 0.200e2 ? -0.711485361920933743e-2 + R * 0.330109235233852071e-3 + pow(R - 0.180e2, 2) * (-0.563526400609164912e-4) + pow(R - 0.180e2, 3) * 0.571601038449523091e-5 : (R < 0.250e2 ? -0.415816738378257771e-2 + R * 0.173290799604128884e-3 + pow(R - 0.200e2, 2) * (-0.220565777539451058e-4) + pow(R - 0.200e2, 3) * 0.120460965302386626e-5 : -0.130350428193669451e-2 + R * 0.430707460414677786e-4 + pow(R - 0.250e2, 2) * (-0.398743295858711205e-5) + pow(R - 0.250e2, 3) * 0.159870026058711218e-6)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2215524453e6 * (R - 0.300e2) * (R - 0.250e2) + 0.4417934600e7 * R - 0.1661317338e9 - 0.2208967300e6 * R * R + 0.75000e3 * (-0.874641e0 * R + 0.1109294178e5) * R) * pow(R, -6));
}

static double radcoeff_3_2_4_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.194550697400000105e1 + R * (-0.222044604925031308e-15) + pow(R - 0.475e1, 2) * (-0.683744121299509544e1) + pow(R - 0.475e1, 3) * 0.111720356359803823e2 : (R < 0.525e1 ? 0.831254957875612988e1 + R * (-0.132396392475122582e1) + pow(R - 0.50e1, 2) * 0.154158551399019239e1 + pow(R - 0.50e1, 3) * (-0.264409359594115445e1) : (R < 0.55e1 ? 0.692370237022425439e1 + R * (-0.104893871699509611e1) + pow(R - 0.525e1, 2) * (-0.441484682965673558e0) + pow(R - 0.525e1, 3) * 0.118956396378423102e1 : (R < 0.575e1 ? 0.690204155497614202e1 + R * (-0.104663781526838950e1) + pow(R - 0.55e1, 2) * 0.450688289872499814e0 + pow(R - 0.55e1, 3) * (-0.126275052795766562e0) : (R < 0.60e1 ? 0.576864798330523953e1 + R * (-0.844970242731345911e0) + pow(R - 0.575e1, 2) * 0.355982000275674892e0 + pow(R - 0.575e1, 3) * (-0.143430683801165360e0) : (R < 0.625e1 ? 0.488206927233736110e1 + R * (-0.693872495806226897e0) + pow(R - 0.60e1, 2) * 0.248408987424800859e0 + pow(R - 0.60e1, 3) * (-0.504618279995726199e-1) : (R < 0.65e1 ? 0.417966323697341480e1 + R * (-0.579129594843746376e0) + pow(R - 0.625e1, 2) * 0.210562616425121391e0 + pow(R - 0.625e1, 3) * (-0.142960100054356776e-2) : (R < 0.675e1 ? 0.351021488582211960e1 + R * (-0.474116336818787620e0) + pow(R - 0.65e1, 2) * 0.209490415674713715e0 + pow(R - 0.65e1, 3) * (-0.324321391982530863e-1) : (R < 0.70e1 ? 0.285681805789744647e1 + R * (-0.375452155081103189e0) + pow(R - 0.675e1, 2) * 0.185166311276023898e0 + pow(R - 0.675e1, 3) * (-0.399901110064448187e-1) : (R < 0.725e1 ? 0.227217103809759724e1 + R * (-0.290367145256799630e0) + pow(R - 0.70e1, 2) * 0.155173728021190283e0 + pow(R - 0.70e1, 3) * (-0.399042103759674333e-1) : (R < 0.75e1 ? 0.177298591471481370e1 + R * (-0.220262320691698432e0) + pow(R - 0.725e1, 2) * 0.125245570239214704e0 + pow(R - 0.725e1, 3) * (-0.354240810896839578e-1) : (R < 0.775e1 ? 0.136040448722305118e1 + R * (-0.164281550776406798e0) + pow(R - 0.75e1, 2) * 0.986775094219517340e-1 + pow(R - 0.75e1, 3) * (-0.303621967852978902e-1) : (R < 0.80e1 ? 0.102784214043072564e1 + R * (-0.120635707962674282e0) + pow(R - 0.775e1, 2) * 0.759058618329783164e-1 + pow(R - 0.775e1, 3) * (-0.248100936891247244e-1) : (R < 0.825e1 ? 0.765790292283168084e0 + R * (-0.873346696128960154e-1) + pow(R - 0.80e1, 2) * 0.572982915661347722e-1 + pow(R - 0.80e1, 3) * (-0.198890630182028405e-1) : (R < 0.85e1 ? 0.563471110542368647e0 + R * (-0.624147231457416601e-1) + pow(R - 0.825e1, 2) * 0.423814943024826418e-1 + pow(R - 0.825e1, 3) * (-0.154023390380639783e-1) : (R < 0.875e1 ? 0.410305419445167352e0 + R * (-0.441119145641373361e-1) + pow(R - 0.85e1, 2) * 0.308297400239346577e-1 + pow(R - 0.85e1, 3) * (-0.117349158695412743e-1) : (R < 0.90e1 ? 0.296421403879953749e0 + R * (-0.308973412777089965e-1) + pow(R - 0.875e1, 2) * 0.220285531217787010e-1 + pow(R - 0.875e1, 3) * (-0.872847300377089380e-2) : (R < 0.925e1 ? 0.213262615205240175e0 + R * (-0.215196534050266855e-1) + pow(R - 0.90e1, 2) * 0.154821983689505307e-1 + pow(R - 0.90e1, 3) * (-0.638953003537514209e-2) : (R < 0.95e1 ? 0.153607089895204385e0 + R * (-0.149765911021842585e-1) + pow(R - 0.925e1, 2) * 0.106900508424191739e-1 + pow(R - 0.925e1, 3) * (-0.479197389472857480e-2) : (R < 0.100e2 ? 0.111958305479244652e0 + R * (-0.105300607862362800e-1) + pow(R - 0.95e1, 2) * 0.709607042137274258e-2 + pow(R - 0.95e1, 3) * (-0.266677584980036519e-2) : (R < 0.105e2 ? 0.624390907631381040e-1 + R * (-0.543407225221381046e-2) + pow(R - 0.100e2, 2) * 0.309590664667219522e-2 + pow(R - 0.100e2, 3) * (-0.108289737248914910e-2) : (R < 0.110e2 ? 0.390985022715390138e-1 + R * (-0.315033863490847728e-2) + pow(R - 0.105e2, 2) * 0.147156058793847136e-2 + pow(R - 0.105e2, 3) * (-0.513258796243032606e-3) : (R < 0.120e2 ? 0.274494536706750905e-1 + R * (-0.206372214415228086e-2) + pow(R - 0.110e2, 2) * 0.701672393573922340e-3 + pow(R - 0.110e2, 3) * (-0.161076161421641639e-3) : (R < 0.140e2 ? 0.169486542682323327e-1 + R * (-0.114360584126936104e-2) + pow(R - 0.120e2, 2) * 0.218443909308997343e-3 + pow(R - 0.120e2, 3) * (-0.214607369621584039e-4) : (R < 0.160e2 ? 0.902328889810981652e-2 + R * (-0.527359047579272584e-3) + pow(R - 0.140e2, 2) * 0.896794875360469135e-4 + pow(R - 0.140e2, 3) * (-0.706644362320532266e-5) : (R < 0.180e2 ? 0.494274527261677997e-2 + R * (-0.253438420913548734e-3) + pow(R - 0.160e2, 2) * 0.472808257968149775e-4 + pow(R - 0.160e2, 3) * (-0.572214882002030453e-5) : (R < 0.200e2 ? 0.291785607299758490e-2 + R * (-0.132980903566532485e-3) + pow(R - 0.180e2, 2) * 0.129479328766931469e-4 + pow(R - 0.180e2, 3) * (-0.174704984213448832e-6) : (R < 0.250e2 ? 0.197434473070642533e-2 + R * (-0.832856318703212837e-4) + pow(R - 0.200e2, 2) * 0.118997029714124539e-4 + pow(R - 0.200e2, 3) * (-0.712761999469638989e-6) : 0.544245061210491812e-3 + R * (-0.177457521164196751e-4) + pow(R - 0.250e2, 2) * 0.120827297936786986e-5 + pow(R - 0.250e2, 3) * (-0.143357096967869809e-7))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.9876226982e5 * (R - 0.300e2) * (R - 0.250e2) - 0.1923452104e7 * R + 0.7394141356e8 + 0.9617260520e5 * R * R + 0.75000e3 * (0.34513518e1 * R - 0.499845461e4) * R) * pow(R, -6));
}

static double radcoeff_3_2_5_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.987152404100000425e1 + R * (-0.888178419700125232e-15) + pow(R - 0.475e1, 2) * (-0.502642976680031381e2) + pow(R - 0.475e1, 3) * 0.100566861968012546e3 : (R < 0.525e1 ? 0.396806737299960730e2 + R * (-0.627586221499921493e1) + pow(R - 0.50e1, 2) * 0.251608488080062784e2 + pow(R - 0.50e1, 3) * (-0.407405854560376639e2) : (R < 0.55e1 ? 0.146734408200164808e2 + R * (-0.133429758400313947e1) + pow(R - 0.525e1, 2) * (-0.539459028402197394e1) + pow(R - 0.525e1, 3) * 0.717878526413812246e1 : (R < 0.575e1 ? 0.218804484244352579e2 + R * (-0.268557048898822837e1) + pow(R - 0.55e1, 2) * (-0.105013359183817583e-1) + pow(R - 0.55e1, 3) * (-0.282218408051481884e1) : (R < 0.60e1 ? 0.249085540172527011e2 + R * (-0.321998067204394767e1) + pow(R - 0.575e1, 2) * (-0.212713939630449600e1) + pow(R - 0.575e1, 3) * 0.183295528192114721e1 : (R < 0.625e1 ? 0.291235912280158793e2 + R * (-0.393987125483598000e1) + pow(R - 0.60e1, 2) * (-0.752422934863635540e0) + pow(R - 0.60e1, 3) * 0.160703156083022769e1 : (R < 0.65e1 ? 0.295697562238258165e2 + R * (-0.401476430461213063e1) + pow(R - 0.625e1, 2) * 0.452850735759035339e0 + pow(R - 0.625e1, 3) * 0.104036410675794744e1 : (R < 0.675e1 ? 0.268746064376507334e2 + R * (-0.359327066671549744e1) + pow(R - 0.65e1, 2) * 0.123312381582749597e1 + pow(R - 0.65e1, 3) * 0.232490188137980752e0 : (R < 0.70e1 ? 0.224992710625496812e2 + R * (-0.293311684852587851e1) + pow(R - 0.675e1, 2) * 0.140749145693098154e1 + pow(R - 0.675e1, 3) * (-0.242209979309869233e0) : (R < 0.725e1 ? 0.179751352462669161e2 + R * (-0.227478549118098794e1) + pow(R - 0.70e1, 2) * 0.122583397244857961e1 + pow(R - 0.70e1, 3) * (-0.339151902898511104e0) : (R < 0.75e1 ? 0.140638370889387261e2 + R * (-0.172545948675016891e1) + pow(R - 0.725e1, 2) * 0.971470045274696270e0 + pow(R - 0.725e1, 3) * (-0.304009097096081593e0) : (R < 0.775e1 ? 0.109043039476375210e2 + R * (-0.129672616981833611e1) + pow(R - 0.75e1, 2) * 0.743463222452635075e0 + pow(R - 0.75e1, 3) * (-0.245803049517164862e0) : (R < 0.80e1 ? 0.842319229571777228e1 + R * (-0.971082630376486788e0) + pow(R - 0.775e1, 2) * 0.559110935314761415e0 + pow(R - 0.775e1, 3) * (-0.189392362435256839e0) : (R < 0.825e1 ? 0.650282227590573569e1 + R * (-0.727038230675716934e0) + pow(R - 0.80e1, 2) * 0.417066663488318778e0 + pow(R - 0.80e1, 3) * (-0.142299295941804932e0) : (R < 0.85e1 ? 0.502638475239532845e1 + R * (-0.545186016920645944e0) + pow(R - 0.825e1, 2) * 0.310342191531965073e0 + pow(R - 0.825e1, 3) * (-0.106531138597525277e0) : (R < 0.875e1 ? 0.389494627845444441e1 + R * (-0.409989509641699335e0) + pow(R - 0.85e1, 2) * 0.230443837583821115e0 + pow(R - 0.85e1, 3) * (-0.791589336680948163e-1) : (R < 0.90e1 ? 0.302979049608487028e1 + R * (-0.309609890912556585e0) + pow(R - 0.875e1, 2) * 0.171074637332749996e0 + pow(R - 0.875e1, 3) * (-0.585813251300941751e-1) : (R < 0.925e1 ? 0.236858744587266834e1 + R * (-0.235056570708074258e0) + pow(R - 0.90e1, 2) * 0.127138643485179365e0 + pow(R - 0.90e1, 3) * (-0.434697178115293209e-1) : (R < 0.95e1 ? 0.186323096246010356e1 + R * (-0.179637821055146335e0) + pow(R - 0.925e1, 2) * 0.945363551265323704e-1 + pow(R - 0.925e1, 3) * (-0.333412884237881402e-1) : (R < 0.100e2 ? 0.147896001017773404e1 + R * (-0.138621135071340412e0) + pow(R - 0.95e1, 2) * 0.695303888086912653e-1 + pow(R - 0.95e1, 3) * (-0.205986061320208858e-1) : (R < 0.105e2 ? 0.952953439516648015e0 + R * (-0.845397008616648044e-1) + pow(R - 0.100e2, 2) * 0.386324796106599366e-1 + pow(R - 0.100e2, 3) * (-0.104317264946606654e-1) : (R < 0.110e2 ? 0.637816403841003909e0 + R * (-0.537310161220003746e-1) + pow(R - 0.105e2, 2) * 0.229848898686689368e-1 + pow(R - 0.105e2, 3) * (-0.613816676933637978e-2) : (R < 0.120e2 ? 0.440601442753670969e0 + R * (-0.353497513303337244e-1) + pow(R - 0.110e2, 2) * 0.137776397146643671e-1 + pow(R - 0.110e2, 3) * (-0.291071966433063909e-2) : (R < 0.140e2 ? 0.225590917567962901e0 + R * (-0.165266308939969082e-1) + pow(R - 0.120e2, 2) * 0.504548072167244812e-2 + pow(R - 0.120e2, 3) * (-0.669169397336996695e-3) : (R < 0.160e2 ? 0.702930236109150924e-1 + R * (-0.437474077535107784e-2) + pow(R - 0.140e2, 2) * 0.103046433765046730e-2 + pow(R - 0.140e2, 3) * (-0.112614366237464187e-3) : (R < 0.180e2 ? 0.291862067395804656e-1 + R * (-0.160425581959877921e-2) + pow(R - 0.160e2, 2) * 0.354778140225682124e-3 + pow(R - 0.160e2, 3) * (-0.345095193381462294e-4) : (R < 0.200e2 ? 0.122392732265685054e-1 + R * (-0.599257490753805824e-3) + pow(R - 0.180e2, 2) * 0.147721024196804734e-3 + pow(R - 0.180e2, 3) * (-0.187768834974509132e-4) : (R < 0.250e2 ? 0.536871235901995730e-2 + R * (-0.233695995935997861e-3) + pow(R - 0.200e2, 2) * 0.350597232120992408e-4 + pow(R - 0.200e2, 3) * (-0.205677604257993515e-5) : 0.107963271081251374e-2 + R * (-0.373569670085005496e-4) + pow(R - 0.250e2, 2) * 0.420808257340021776e-5 + pow(R - 0.250e2, 3) * (-0.187689494340021709e-6))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2223335809e6 * (R - 0.300e2) * (R - 0.250e2) + 0.2371558196e7 * R + 0.1393290439e9 - 0.1185779098e6 * R * R + 0.75000e3 * (0.4347856694e3 * R - 0.1798431633e5) * R) * pow(R, -6));
}

static double radcoeff_3_4_1_0_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.913816536800004187e0 + R * (-0.888178419700125232e-15) + pow(R - 0.475e1, 2) * (-0.495382746014929012e2) + pow(R - 0.475e1, 3) * 0.103673775589971598e3 : (R < 0.525e1 ? 0.260890990055338641e2 + R * (-0.533030437762677245e1) + pow(R - 0.50e1, 2) * 0.282170570909858114e2 + pow(R - 0.50e1, 3) * (-0.421733997747148734e2) : (R < 0.55e1 ? -0.536162875836224018e1 + R * 0.870711710107093362e0 + pow(R - 0.525e1, 2) * (-0.341299274005034459e1) + pow(R - 0.525e1, 3) * 0.776730381608788356e1 : (R < 0.575e1 ? -0.407787870769119642e1 + R * 0.620584805598399347e0 + pow(R - 0.55e1, 2) * 0.241248512201556853e1 + pow(R - 0.55e1, 3) * (-0.423938780323666276e1) : (R < 0.60e1 ? -0.635864357242102773e1 + R * 0.103194215349930918e1 + pow(R - 0.575e1, 2) * (-0.767055730411928760e0) + pow(R - 0.575e1, 3) * 0.162031774458766709e0 : (R < 0.625e1 ? -0.428517136412618260e1 + R * 0.678795246004363695e0 + pow(R - 0.60e1, 2) * (-0.645531899567853729e0) + pow(R - 0.60e1, 3) * 0.298241998015960803e-1 : (R < 0.65e1 ? -0.234271415268022576e1 + R * 0.361621333683236068e0 + pow(R - 0.625e1, 2) * (-0.623163749716656667e0) + pow(R - 0.625e1, 3) * 0.457766698014849427e0 : (R < 0.675e1 ? -0.907130259007498108e0 + R * 0.135870714702692019e0 + pow(R - 0.65e1, 2) * (-0.279838726205519583e0) + pow(R - 0.65e1, 3) * 0.251612844299006044e0 : (R < 0.70e1 ? -0.294680533822472057e0 + R * 0.431287599059958643e-1 + pow(R - 0.675e1, 2) * (-0.911290929812650502e-1) + pow(R - 0.675e1, 3) * 0.827865629331263758e-1 : (R < 0.725e1 ? -0.887881005032717247e-1 + R * 0.130866939653245321e-1 + pow(R - 0.70e1, 2) * (-0.290391707814202649e-1) + pow(R - 0.70e1, 3) * 0.234020488644885206e-1 : (R < 0.75e1 ? -0.167825577561184908e-1 + R * 0.295499273670599876e-2 + pow(R - 0.725e1, 2) * (-0.114876341330538735e-1) + pow(R - 0.725e1, 3) * 0.100685483609195096e-1 : (R < 0.775e1 ? 0.115765180451139690e-1 + R * (-0.900971512148529292e-3) + pow(R - 0.75e1, 2) * (-0.393622286236424129e-2) + pow(R - 0.75e1, 3) * 0.368114149983343481e-2 : (R < 0.80e1 ? 0.212917268018670766e-1 + R * (-0.217886891211188085e-2) + pow(R - 0.775e1, 2) * (-0.117536673748916496e-2) + pow(R - 0.775e1, 3) * 0.129454240774675355e-2 : (R < 0.825e1 ? 0.239981469442315763e-1 + R * (-0.252382557940394707e-2) + pow(R - 0.80e1, 2) * (-0.204459931679099662e-3) + pow(R - 0.80e1, 3) * 0.668399013179550952e-3 : (R < 0.85e1 ? 0.238052794277467360e-1 + R * (-0.250073073027233138e-2) + pow(R - 0.825e1, 2) * 0.296839328205563606e-3 + pow(R - 0.825e1, 3) * 0.115420451535050997e-3 : (R < 0.875e1 ? 0.223801168408071793e-1 + R * (-0.233066973150672721e-2) + pow(R - 0.85e1, 2) * 0.383404666856851861e-3 + pow(R - 0.85e1, 3) * 0.292886348680230862e-3 : (R < 0.90e1 ? 0.202507438983816346e-1 + R * (-0.208405120770075846e-2) + pow(R - 0.875e1, 2) * 0.603069428367025034e-3 + pow(R - 0.875e1, 3) * 0.627150497440327574e-4 : (R < 0.925e1 ? 0.174697715862121572e-1 + R * (-0.177075742169023956e-2) + pow(R - 0.90e1, 2) * 0.650105715675049602e-3 + pow(R - 0.90e1, 3) * 0.724166523436341680e-4 : (R < 0.95e1 ? 0.143791981372291214e-1 + R * (-0.143212644153828329e-2) + pow(R - 0.925e1, 2) * 0.704418204932775235e-3 + pow(R - 0.925e1, 3) * (-0.528840911185681322e-4) : (R < 0.100e2 ? 0.111706112749879582e-1 + R * (-0.108983310615662723e-2) + pow(R - 0.95e1, 2) * 0.664755136593849134e-3 + pow(R - 0.95e1, 3) * (-0.165611777361189630e-3) : (R < 0.105e2 ? 0.591063555123670214e-2 + R * (-0.549286802583670271e-3) + pow(R - 0.100e2, 2) * 0.416337470552064675e-3 + pow(R - 0.100e2, 3) * (-0.191262013169447967e-3) : (R < 0.110e2 ? 0.312545708014126244e-2 + R * (-0.276395841908691660e-3) + pow(R - 0.105e2, 2) * 0.129444450797892711e-3 + pow(R - 0.105e2, 3) * (-0.309116459610189574e-4) : (R < 0.120e2 ? 0.198508635749719466e-2 + R * (-0.170135125581563130e-3) + pow(R - 0.110e2, 2) * 0.830769818563642677e-4 + pow(R - 0.110e2, 3) * (-0.149092379748011223e-4) : (R < 0.140e2 ? 0.596139103958855609e-3 + R * (-0.487088757932379682e-4) + pow(R - 0.120e2, 2) * 0.383492679319609008e-4 + pow(R - 0.120e2, 3) * (-0.793964931292095554e-5) : (R < 0.160e2 ? -0.127678938435758050e-3 + R * 0.941240417955414663e-5 + pow(R - 0.140e2, 2) * (-0.928862794556484089e-5) + pow(R - 0.140e2, 3) * 0.197833917489388381e-5 : (R < 0.180e2 ? 0.656243301176577857e-4 + R * (-0.400203750397861121e-5) + pow(R - 0.160e2, 2) * 0.258140710379846197e-5 + pow(R - 0.160e2, 3) * (-0.490072294154577958e-6) : (R < 0.200e2 ? -0.797631575658539650e-5 + R * 0.442723381360299777e-6 + pow(R - 0.180e2, 2) * (-0.359026661129005994e-6) + pow(R - 0.180e2, 3) * 0.693083747869280529e-7 : (R < 0.250e2 ? 0.323016753865175097e-5 + R * (-0.161682765712587537e-6) + pow(R - 0.200e2, 2) * 0.568235875925623169e-7 + pow(R - 0.200e2, 3) * (-0.487535459560896005e-8) : -0.102326912735908896e-5 + R * 0.409015155423635528e-7 + pow(R - 0.250e2, 2) * (-0.163067313415720863e-7) + pow(R - 0.250e2, 3) * 0.162950303781987544e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1116088192e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1190471424e2 * R - 0.6992423054e3 + 0.5952357120e0 * R * R + 0.75000e3 * (-0.2182226836e-2 * R + 0.902606904e-1) * R) * pow(R, -6));
}

static double radcoeff_3_4_1_2_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.776012592400000090e0 + pow(R - 0.475e1, 2) * 0.588002800413315896e2 + pow(R - 0.475e1, 3) * (-0.123892212197326359e3) : (R < 0.525e1 ? -0.298885620735355069e2 + R * 0.617035023366710167e1 + pow(R - 0.50e1, 2) * (-0.341188791066631794e2) + pow(R - 0.50e1, 3) * 0.514996705247790842e2 : (R < 0.55e1 ? 0.765075981640914904e1 + R * (-0.123290109626840927e1) + pow(R - 0.525e1, 2) * 0.450587378692113294e1 + pow(R - 0.525e1, 3) * (-0.103290319177899832e2) : (R < 0.575e1 ? 0.603164705556405600e1 + R * (-0.916657687393464760e0) + pow(R - 0.55e1, 2) * (-0.324090015142135401e1) + pow(R - 0.55e1, 3) * 0.555928898638085123e1 : (R < 0.60e1 ? 0.923993418340695882e1 + R * (-0.149474107815773194e1) + pow(R - 0.575e1, 2) * 0.928566588364285073e0 + pow(R - 0.575e1, 3) * (-0.151040853334290688e-1) : (R < 0.625e1 ? 0.652902592475364330e1 + R * (-0.103328979997560721e1) + pow(R - 0.60e1, 2) * 0.917238524364213270e0 + pow(R - 0.60e1, 3) * 0.297504013528630332e-1 : (R < 0.65e1 ? 0.368558404232399317e1 + R * (-0.569092337539838899e0) + pow(R - 0.625e1, 2) * 0.939551325378860547e0 + pow(R - 0.625e1, 3) * (-0.663560956878020525e0) : (R < 0.675e1 ? 0.148911096892274353e1 + R * (-0.223734354265037461e0) + pow(R - 0.65e1, 2) * 0.441880607720345153e0 + pow(R - 0.65e1, 3) * (-0.383258794000781333e0) : (R < 0.70e1 ? 0.504454948354377097e0 + R * (-0.746550742800114187e-1) + pow(R - 0.675e1, 2) * 0.154436512219759098e0 + pow(R - 0.675e1, 3) * (-0.134402405358853783e0) : (R < 0.725e1 ? 0.147882557044418661e0 + R * (-0.226372691749169505e-1) + pow(R - 0.70e1, 2) * 0.536347082006187609e-1 + pow(R - 0.70e1, 3) * (-0.417638386438038550e-1) : (R < 0.75e1 ? 0.129290672573257621e-1 + R * (-0.365063482032079462e-2) + pow(R - 0.725e1, 2) * 0.223118292177658627e-1 + pow(R - 0.725e1, 3) * (-0.183370080659307280e-1) : (R < 0.775e1 ? -0.438459011415009356e-1 + R * 0.406709077620012478e-2 + pow(R - 0.75e1, 2) * 0.855907316831781666e-2 + pow(R - 0.75e1, 3) * (-0.761815661247325793e-2) : (R < 0.80e1 ? -0.655262674652822980e-1 + R * 0.691822299552029632e-2 + pow(R - 0.775e1, 2) * 0.284545570896287299e-2 + pow(R - 0.775e1, 3) * (-0.355136004417623118e-2) : (R < 0.825e1 ? -0.714586992537495219e-1 + R * 0.767507084171868952e-2 + pow(R - 0.80e1, 2) * 0.181935675830699196e-3 + pow(R - 0.80e1, 3) * (-0.164794842682182939e-2) : (R < 0.85e1 ? -0.696743919082408042e-1 + R * 0.745704834960494566e-2 + pow(R - 0.825e1, 2) * (-0.105402564428567287e-2) + pow(R - 0.825e1, 3) * (-0.900600936536438560e-3) : (R < 0.875e1 ? -0.638393986698229804e-1 + R * 0.676117285186152769e-2 + pow(R - 0.85e1, 2) * (-0.172947634668800185e-2) + pow(R - 0.85e1, 3) * (-0.514367763032427664e-3) : (R < 0.90e1 ? -0.555451843098032777e-1 + R * 0.579999072294894603e-2 + pow(R - 0.875e1, 2) * (-0.211525216896232262e-2) + pow(R - 0.875e1, 3) * (-0.247794955333840051e-3) : (R < 0.925e1 ? -0.457444706190842099e-1 + R * 0.469590308434269035e-2 + pow(R - 0.90e1, 2) * (-0.230109838546270267e-2) + pow(R - 0.90e1, 3) * 0.217478912367762456e-3 : (R < 0.95e1 ? -0.356195011160427288e-1 + R * 0.358613118768029426e-2 + pow(R - 0.925e1, 2) * (-0.213798920118688082e-2) + pow(R - 0.925e1, 3) * 0.443716169862814710e-3 : (R < 0.100e2 ? -0.263811130978932502e-1 + R * 0.260033336893613146e-2 + pow(R - 0.95e1, 2) * (-0.180520207378976976e-2) + pow(R - 0.95e1, 3) * 0.565923617435013459e-3 : (R < 0.105e2 ? -0.129540795570262188e-1 + R * 0.121957400822262198e-2 + pow(R - 0.100e2, 2) * (-0.956316647637249517e-3) + pow(R - 0.100e2, 3) * 0.383369622384010914e-3 : (R < 0.110e2 ? -0.612294849222049745e-2 + R * 0.550784577373380677e-3 + pow(R - 0.105e2, 2) * (-0.381262214061233091e-3) + pow(R - 0.105e2, 3) * 0.146757825028943564e-3 : (R < 0.120e2 ? -0.321678701942240859e-2 + R * 0.279590732083855314e-3 + pow(R - 0.110e2, 2) * (-0.161125476517817717e-3) + pow(R - 0.110e2, 3) * 0.338434014339624071e-4 : (R < 0.140e2 ? -0.695420109701285470e-3 + R * 0.588699833501071205e-4 + pow(R - 0.120e2, 2) * (-0.595952722159304892e-4) + pow(R - 0.120e2, 3) * 0.132476064154384608e-4 : (R < 0.160e2 ? 0.283917019061945882e-3 + R * (-0.205398285283532767e-4) + pow(R - 0.140e2, 2) * 0.198903662767002856e-4 + pow(R - 0.140e2, 3) * (-0.433259343238682272e-5) : (R < 0.180e2 ? -0.112307765980895757e-3 + R * 0.703051538980598455e-5 + pow(R - 0.160e2, 2) * (-0.610519431762065327e-5) + pow(R - 0.160e2, 3) * 0.128369576285883039e-5 : (R < 0.200e2 ? 0.358367289426719102e-4 + R * (-0.198591272637066174e-5) + pow(R - 0.180e2, 2) * 0.159698025953232949e-5 + pow(R - 0.180e2, 3) * (-0.307900805110999227e-6) : (R < 0.250e2 ? -0.141007839960332991e-4 + R * 0.707198650426664954e-6 + pow(R - 0.200e2, 2) * (-0.250424571133666087e-6) + pow(R - 0.200e2, 3) * 0.215239138968666154e-7 : 0.457789518952499023e-5 + R * (-0.182753518644999597e-6) + pow(R - 0.250e2, 2) * 0.724341373193331740e-7 + pow(R - 0.250e2, 3) * (-0.722892293966665051e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1382048400e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1474184068e3 * R + 0.8660691668e4 - 0.7370920340e1 * R * R + 0.75000e3 * (0.2702644176e-1 * R - 0.1117908280e1) * R) * pow(R, -6));
}

static double radcoeff_3_4_2_2_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.475209388799998966e0 + R * (-0.222044604925031308e-15) + pow(R - 0.475e1, 2) * 0.843634842656117812e1 + pow(R - 0.475e1, 3) * (-0.164057953318447076e2) : (R < 0.525e1 ? -0.591471610699853034e1 + R * 0.114208758855970616e1 + pow(R - 0.50e1, 2) * (-0.386799807232235304e1) + pow(R - 0.50e1, 3) * 0.504768227713411388e1 : (R < 0.55e1 ? -0.892913252606173935e0 + R * 0.154528979361175989e0 + pow(R - 0.525e1, 2) * (-0.822363644717676034e-1) + pow(R - 0.525e1, 3) * (-0.887985754117456560e-1) : (R < 0.575e1 ? -0.581716969935744177e0 + R * 0.967610642355898609e-1 + pow(R - 0.55e1, 2) * (-0.148835296030576852e0) + pow(R - 0.55e1, 3) * 0.252921988032869471e0 : (R < 0.60e1 ? -0.431847312134670702e0 + R * 0.697662889764644745e-1 + pow(R - 0.575e1, 2) * 0.408561949940752789e-1 + pow(R - 0.575e1, 3) * (-0.136491455439732762e0) : (R < 0.625e1 ? -0.400442176551313256e0 + R * 0.646022385785522124e-1 + pow(R - 0.60e1, 2) * (-0.615123965857242994e-1) + pow(R - 0.60e1, 3) * 0.855438156606169731e-2 : (R < 0.65e1 ? -0.221951465697591499e0 + R * 0.354499868293266379e-1 + pow(R - 0.625e1, 2) * (-0.550966104111780264e-1) + pow(R - 0.625e1, 3) * 0.348224989034858629e-1 : (R < 0.675e1 ? -0.882268390049179702e-1 + R * 0.144309001681412266e-1 + pow(R - 0.65e1, 2) * (-0.289797362335636292e-1) + pow(R - 0.65e1, 3) * 0.213997656679948758e-1 : (R < 0.70e1 ? -0.189811698162320464e-1 + R * 0.395348811410845165e-2 + pow(R - 0.675e1, 2) * (-0.129299119825674706e-1) + pow(R - 0.675e1, 3) * 0.886153301653465168e-2 : (R < 0.725e1 ? 0.139731019930252505e-1 + R * (-0.849930436575035931e-3) + pow(R - 0.70e1, 2) * (-0.628376222016648143e-2) + pow(R - 0.70e1, 3) * 0.432735416986649961e-2 : (R < 0.75e1 ? 0.305441227366102276e-1 + R * (-0.318043263980830743e-2) + pow(R - 0.725e1, 2) * (-0.303824659276660672e-2) + pow(R - 0.725e1, 3) * 0.272220281599934878e-2 : (R < 0.775e1 ? 0.379620937564379979e-1 + R * (-0.418914290819173349e-2) + pow(R - 0.75e1, 2) * (-0.996594480767094707e-3) + pow(R - 0.75e1, 3) * 0.116179917413611940e-2 : (R < 0.80e1 ? 0.400915239015418798e-1 + R * (-0.446960280342475862e-2) + pow(R - 0.775e1, 2) * (-0.125245100165005181e-3) + pow(R - 0.775e1, 3) * 0.129191754345615775e-2 : (R < 0.825e1 ? 0.386669863798738481e-1 + R * (-0.428999081410923102e-2) + pow(R - 0.80e1, 2) * 0.843693057427113155e-3 + pow(R - 0.80e1, 3) * 0.189471964039240583e-3 : (R < 0.85e1 ? 0.349493543891411101e-1 + R * (-0.383261829213831689e-2) + pow(R - 0.825e1, 2) * 0.985797030456543599e-3 + pow(R - 0.825e1, 3) * 0.537393000386898788e-3 : (R < 0.875e1 ? 0.299732559953687638e-1 + R * (-0.323895858933750166e-2) + pow(R - 0.85e1, 2) * 0.138884178074671774e-2 + pow(R - 0.85e1, 3) * (-0.111462333586850225e-3) : (R < 0.90e1 ? 0.241650021079771772e-1 + R * (-0.256543688651167737e-2) + pow(R - 0.875e1, 2) * 0.130524503055658007e-2 + pow(R - 0.875e1, 3) * (-0.936027380394862177e-4) : (R < 0.925e1 ? 0.185294693625421211e-1 + R * (-0.193036488461579094e-2) + pow(R - 0.90e1, 2) * 0.123504297702696541e-2 + pow(R - 0.90e1, 3) * (-0.258068967055204873e-3) : (R < 0.95e1 ? 0.133381418169827223e-1 + R * (-0.136123132742515911e-2) + pow(R - 0.925e1, 2) * 0.104149125173556172e-2 + pow(R - 0.925e1, 3) * (-0.407166699339703915e-3) : (R < 0.100e2 ? 0.917505527799394177e-2 + R * (-0.916829457683572655e-3) + pow(R - 0.95e1, 2) * 0.736116227230783761e-3 + pow(R - 0.95e1, 3) * (-0.259143945327276889e-3) : (R < 0.105e2 ? 0.390910865928246511e-2 + R * (-0.375071189448246520e-3) + pow(R - 0.100e2, 2) * 0.347400309239868400e-3 + pow(R - 0.100e2, 3) * (-0.159011541486750728e-3) : (R < 0.110e2 ? 0.158059493607613246e-2 + R * (-0.146929536323441186e-3) + pow(R - 0.105e2, 2) * 0.108882997009742294e-3 + pow(R - 0.105e2, 3) * (-0.241537938457198089e-4) : (R < 0.120e2 ? 0.606352293217876192e-3 + R * (-0.561618846979887500e-4) + pow(R - 0.110e2, 2) * 0.726523062411625777e-4 + pow(R - 0.110e2, 3) * (-0.250050978031738157e-4) : (R < 0.140e2 ? -0.189472327217779285e-3 + R * 0.141274343748149380e-4 + pow(R - 0.120e2, 2) * (-0.236298716835887400e-5) + pow(R - 0.120e2, 3) * (-0.163920255774297646e-6) : (R < 0.160e2 ? -0.403697535392301857e-4 + R * 0.270844263208787061e-5 + pow(R - 0.140e2, 2) * (-0.334650870300465993e-5) + pow(R - 0.140e2, 3) * 0.882665091355362226e-6 : (R < 0.180e2 ? -0.198960816833725206e-5 + R * (-0.856110836664217478e-7) + pow(R - 0.160e2, 2) * 0.194948184512751343e-5 + pow(R - 0.160e2, 3) * (-0.523076366022151125e-6) : (R < 0.200e2 ? -0.257544895040006993e-4 + R * 0.143539990457781657e-5 + pow(R - 0.180e2, 2) * (-0.118897635100539395e-5) + pow(R - 0.180e2, 3) * 0.230244358758242754e-6 : (R < 0.250e2 ? 0.111910219404969132e-4 + R * (-0.557573194344845670e-6) + pow(R - 0.200e2, 2) * 0.192489801544062647e-6 + pow(R - 0.200e2, 3) * (-0.164451311006187044e-7) : -0.334020398083445223e-5 + R * 0.133939988549378082e-6 + pow(R - 0.250e2, 2) * (-0.541871649652179060e-7) + pow(R - 0.250e2, 3) * 0.543198900226845687e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1265857715e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1350246112e3 * R + 0.7932542772e4 - 0.6751230560e1 * R * R + 0.75000e3 * (0.2475422036e-1 * R - 0.1023920592e1) * R) * pow(R, -6));
}

static double radcoeff_3_4_3_2_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.208470492399995794e0 + R * 0.888178419700125232e-15 + pow(R - 0.475e1, 2) * 0.405803570283200301e2 + pow(R - 0.475e1, 3) * (-0.884715807532801364e2) : (R < 0.525e1 ? -0.171464112575999579e2 + R * 0.370175712291999126e1 + pow(R - 0.50e1, 2) * (-0.257733285366400686e2) + pow(R - 0.50e1, 3) * 0.393690211078404104e2 : (R < 0.55e1 ? 0.107590039193198166e2 + R * (-0.180321568767996521e1) + pow(R - 0.525e1, 2) * 0.375343729424024186e1 + pow(R - 0.525e1, 3) * (-0.757306390848152677e1) : (R < 0.575e1 ? 0.836303422310071909e1 + R * (-0.134644652340013060e1) + pow(R - 0.55e1, 2) * (-0.192636063712090322e1) + pow(R - 0.55e1, 3) * 0.425247656128570117e1 : (R < 0.60e1 ? 0.926266716863720063e1 + R * (-0.151228748671951307e1) + pow(R - 0.575e1, 2) * 0.126299678384337311e1 + pow(R - 0.575e1, 3) * (-0.301760275861281735e0) : (R < 0.625e1 ? 0.588737942213090104e1 + R * (-0.937369146521816798e0) + pow(R - 0.60e1, 2) * 0.103667657694741178e1 + pow(R - 0.60e1, 3) * (-0.268839381040578307e0) : (R < 0.65e1 ? 0.302340293953762052e1 + R * (-0.469438241993219318e0) + pow(R - 0.625e1, 2) * 0.835047041166978032e0 + pow(R - 0.625e1, 3) * (-0.624038601256403203e0) : (R < 0.675e1 ? 0.111248693795448816e1 + R * (-0.168921959145305889e0) + pow(R - 0.65e1, 2) * 0.367018090224675630e0 + pow(R - 0.65e1, 3) * (-0.330354677933808294e0) : (R < 0.70e1 ? 0.309682861506510698e0 + R * (-0.473544161455571391e-1) + pow(R - 0.675e1, 2) * 0.119252081774319396e0 + pow(R - 0.675e1, 3) * (-0.108325178144363335e0) : (R < 0.725e1 ? 0.402380458132589880e-1 + R * (-0.803934616046557068e-2) + pow(R - 0.70e1, 2) * 0.380081981660468984e-1 + pow(R - 0.70e1, 3) * (-0.325875337767384601e-1) : (R < 0.75e1 ? -0.513766616407907717e-1 + R * 0.485459033941941683e-2 + pow(R - 0.725e1, 2) * 0.135675478334930499e-1 + pow(R - 0.725e1, 3) * (-0.140067138846828674e-1) : (R < 0.775e1 ? -0.819289077809092908e-1 + R * 0.901210540278790488e-2 + pow(R - 0.75e1, 2) * 0.306251241998089932e-2 + pow(R - 0.75e1, 3) * (-0.496910508453006928e-2) : (R < 0.80e1 ? -0.864616478230744862e-1 + R * 0.961165440942896541e-2 + pow(R - 0.775e1, 2) * (-0.664316393416653070e-3) + pow(R - 0.775e1, 3) * (-0.199420580919684384e-2) : (R < 0.825e1 ? -0.808857527759698491e-1 + R * 0.890558262349623077e-2 + pow(R - 0.80e1, 2) * (-0.215997075031428617e-2) + pow(R - 0.80e1, 3) * (-0.334886334682542753e-3) : (R < 0.85e1 ? -0.715980769028354141e-1 + R * 0.776280606058611135e-2 + pow(R - 0.825e1, 2) * (-0.241113550132619325e-2) + pow(R - 0.825e1, 3) * (-0.979936200730154169e-4) : (R < 0.875e1 ? -0.613468008093542641e-1 + R * 0.653886450615932466e-2 + pow(R - 0.85e1, 2) * (-0.248463071638095482e-2) + pow(R - 0.85e1, 3) * 0.832400789746318566e-4 : (R < 0.90e1 ? -0.507670959732951579e-1 + R * 0.531215666277658986e-2 + pow(R - 0.875e1, 2) * (-0.242220065714998092e-2) + pow(R - 0.875e1, 3) * 0.274921752174489651e-3 : (R < 0.925e1 ? -0.404782153616088450e-1 + R * 0.415260416273431632e-2 + pow(R - 0.90e1, 2) * (-0.221600934301911367e-2) + pow(R - 0.90e1, 3) * 0.509767760327395391e-3 : (R < 0.95e1 ? -0.312438360721468550e-1 + R * 0.314018094628614646e-2 + pow(R - 0.925e1, 2) * (-0.183368352277356707e-2) + pow(R - 0.925e1, 3) * 0.303239398515925678e-3 : (R < 0.100e2 ? -0.231838516221504372e-1 + R * 0.228019657212109872e-2 + pow(R - 0.95e1, 2) * (-0.160625397388662280e-2) + pow(R - 0.95e1, 3) * 0.544891989688849792e-3 : (R < 0.105e2 ? -0.115414538007111364e-1 + R * 0.108261159050111353e-2 + pow(R - 0.100e2, 2) * (-0.788915989353348003e-3) + pow(R - 0.100e2, 3) * 0.307283495102241369e-3 : (R < 0.110e2 ? -0.583651199688169000e-2 + R * 0.524158222474446680e-3 + pow(R - 0.105e2, 2) * (-0.327990746699985923e-3) + pow(R - 0.105e2, 3) * 0.102794324302185033e-3 : (R < 0.120e2 ? -0.314581535481209479e-2 + R * 0.273263219001099525e-3 + pow(R - 0.110e2, 2) * (-0.173799260246708360e-3) + pow(R - 0.110e2, 3) * 0.420704302456088226e-4 : (R < 0.140e2 ? -0.620897427718112042e-3 + R * 0.518759892445093342e-4 + pow(R - 0.120e2, 2) * (-0.475879695098818716e-4) + pow(R - 0.120e2, 3) * 0.102428938180636012e-4 : (R < 0.160e2 ? 0.214813975905568791e-3 + R * (-0.155611629782549141e-4) + pow(R - 0.140e2, 2) * 0.138693933984997474e-4 + pow(R - 0.140e2, 3) * (-0.289367002631114467e-5) : (R < 0.180e2 ? -0.849143431631653852e-4 + R * 0.519237030001033622e-5 + pow(R - 0.160e2, 2) * (-0.349262675936712145e-5) + pow(R - 0.160e2, 3) * 0.675021798305976441e-6 : (R < 0.200e2 ? 0.121797424265557476e-4 + R * (-0.677875157786430374e-6) + pow(R - 0.180e2, 2) * 0.557504030468737726e-6 + pow(R - 0.180e2, 3) * (-0.107847585287761263e-6) : (R < 0.250e2 ? -0.516992410230770401e-5 + R * 0.257969940635385216e-6 + pow(R - 0.200e2, 2) * (-0.895814812578298521e-7) + pow(R - 0.200e2, 3) * 0.766404507575055960e-8 : 0.157383029814053322e-5 + R * (-0.630414912616213289e-7) + pow(R - 0.250e2, 2) * 0.253791948784285286e-7 + pow(R - 0.250e2, 3) * (-0.254145074682085289e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3368092672e1 * (R - 0.300e2) * (R - 0.250e2) - 0.3592604588e2 * R - 0.2110387862e4 + 0.1796302294e1 * R * R + 0.75000e3 * (-0.658593254e-2 * R + 0.2724111749e0) * R) * pow(R, -6));
}

static double radcoeff_3_4_3_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.513266516199999967e-1 + pow(R - 0.475e1, 2) * (-0.449329517063903623e2) + pow(R - 0.475e1, 3) * 0.965626104735614490e2 : (R < 0.525e1 ? 0.204540866020120475e2 + R * (-0.436098638940240946e1) + pow(R - 0.50e1, 2) * 0.274890061487807209e2 + pow(R - 0.50e1, 3) * (-0.411974890846843351e2) : (R < 0.55e1 ? -0.100764241034506004e2 + R * 0.165898748160963816e1 + pow(R - 0.525e1, 2) * (-0.340911066473252999e1) + pow(R - 0.525e1, 3) * 0.752692781717590709e1 : (R < 0.575e1 ? -0.855897525630120803e1 + R * 0.136573111496385602e1 + pow(R - 0.55e1, 2) * 0.223608519814940054e1 + pow(R - 0.55e1, 3) * (-0.456848645281929677e1) : (R < 0.60e1 ? -0.999394801997589433e1 + R * 0.162718250413493815e1 + pow(R - 0.575e1, 2) * (-0.119027964146507204e1) + pow(R - 0.575e1, 3) * 0.168794154101279098e0 : (R < 0.625e1 ? -0.668475758787835073e1 + R * 0.106369158729639168e1 + pow(R - 0.60e1, 2) * (-0.106368402588911271e1) + pow(R - 0.60e1, 3) * 0.141813663614183572e0 : (R < 0.65e1 ? -0.359119730714684238e1 + R * 0.558439636279494778e0 + pow(R - 0.625e1, 2) * (-0.957323778178475027e0) + pow(R - 0.625e1, 3) * 0.678075131921982543e0 : (R < 0.675e1 ? -0.135553690729658860e1 + R * 0.206916834425628998e0 + pow(R - 0.65e1, 2) * (-0.448767429236988091e0) + pow(R - 0.65e1, 3) * 0.391422798137888273e0 : (R < 0.70e1 ? -0.358273295621425847e0 + R * 0.559248944579890106e-1 + pow(R - 0.675e1, 2) * (-0.155200330633571859e0) + pow(R - 0.675e1, 3) * 0.141727170566463195e0 : (R < 0.725e1 ? -0.857458339690455457e-2 + R * 0.489857362241493625e-2 + pow(R - 0.70e1, 2) * (-0.489049527087244557e-1) + pow(R - 0.70e1, 3) * 0.446568901562588438e-1 : (R < 0.75e1 ? 0.105641614480453491e0 + R * (-0.111807358276487575e-1) + pow(R - 0.725e1, 2) * (-0.154122850915303193e-1) + pow(R - 0.725e1, 3) * 0.179631664085013812e-1 : (R < 0.775e1 ? 0.137494387468649282e0 + R * (-0.155187846718199060e-1) + pow(R - 0.75e1, 2) * (-0.193991028515428407e-2) + pow(R - 0.75e1, 3) * 0.612103172973563984e-2 : (R < 0.80e1 ? 0.136091312319305047e0 + R * (-0.153410463650716176e-1) + pow(R - 0.775e1, 2) * 0.265086351214744581e-2 + pow(R - 0.775e1, 3) * 0.191070795255610104e-2 : (R < 0.825e1 ? 0.122817330123149007e0 + R * (-0.136573568678936257e-1) + pow(R - 0.80e1, 2) * 0.408389447656452159e-2 + pow(R - 0.80e1, 3) * 0.215605260039925418e-3 : (R < 0.85e1 ? 0.105896363257669504e0 + R * (-0.115749836433538793e-1) + pow(R - 0.825e1, 2) * 0.424559842159446567e-2 + pow(R - 0.825e1, 3) * (-0.173661728715776093e-3) : (R < 0.875e1 ? 0.883919797828722764e-1 + R * (-0.948474600669085496e-2) + pow(R - 0.85e1, 2) * 0.411535212505763359e-2 + pow(R - 0.85e1, 3) * (-0.521485065176861872e-3) : (R < 0.90e1 ? 0.714919369744736188e-1 + R * (-0.752484839388269967e-2) + pow(R - 0.875e1, 2) * 0.372423832617498713e-2 + pow(R - 0.875e1, 3) * (-0.454114746576753201e-3) : (R < 0.925e1 ? 0.557248524940051268e-1 + R * (-0.574787574577834744e-2) + pow(R - 0.90e1, 2) * 0.338365226624242222e-2 + pow(R - 0.90e1, 3) * (-0.892628044516126915e-3) : (R < 0.95e1 ? 0.418211434807861729e-1 + R * (-0.422341737100391003e-2) + pow(R - 0.925e1, 2) * 0.271418123285532701e-2 + pow(R - 0.925e1, 3) * (-0.690650195358748068e-3) : (R < 0.100e2 ? 0.303178482029571109e-1 + R * (-0.299582366620601169e-2) + pow(R - 0.95e1, 2) * 0.219619358633626593e-2 + pow(R - 0.95e1, 3) * (-0.748983659848484820e-3) : (R < 0.105e2 ? 0.144287152277610964e-1 + R * (-0.136136782475610959e-2) + pow(R - 0.100e2, 2) * 0.107271809656353870e-2 + pow(R - 0.100e2, 3) * (-0.431311754102639089e-3) : (R < 0.110e2 ? 0.677602083228027747e-2 + R * (-0.612133543769550169e-3) + pow(R - 0.105e2, 2) * 0.425750465409580037e-3 + pow(R - 0.105e2, 3) * (-0.149883346140959037e-3) : (R < 0.120e2 ? 0.341700551652258412e-2 + R * (-0.298795587965689456e-3) + pow(R - 0.110e2, 2) * 0.200925446198141469e-3 + pow(R - 0.110e2, 3) * (-0.499653117324520130e-4) : (R < 0.140e2 ? 0.544506164591150544e-3 + R * (-0.468406307667625508e-4) + pow(R - 0.120e2, 2) * 0.510295110007854299e-4 + pow(R - 0.120e2, 3) * (-0.114704523399520758e-4) : (R < 0.160e2 ? -0.273756033061359476e-3 + R * 0.196319851569542463e-4 + pow(R - 0.140e2, 2) * (-0.177932030389270246e-4) + pow(R - 0.140e2, 3) * 0.382195958984994997e-5 : (R < 0.180e2 ? 0.905955847421711696e-4 + R * (-0.567731192055444816e-5) + pow(R - 0.160e2, 2) * 0.513855450017267691e-5 + pow(R - 0.160e2, 3) * (-0.109671500168522648e-5) : (R < 0.200e2 ? -0.307094009190437458e-4 + R * 0.171632605991354130e-5 + pow(R - 0.180e2, 2) * (-0.144173550993868197e-5) + pow(R - 0.180e2, 3) * 0.279756515165955588e-6 : (R < 0.250e2 ? 0.139589863177943813e-4 + R * (-0.693537797849719105e-6) + pow(R - 0.200e2, 2) * 0.236803581057051689e-6 + pow(R - 0.200e2, 3) * (-0.201770214230215741e-7) : -0.401203192975449287e-5 + R * 0.161221405994179721e-6 + pow(R - 0.250e2, 2) * (-0.658517402882718970e-7) + pow(R - 0.250e2, 3) * 0.661477731708719001e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2823371546e2 * (R - 0.300e2) * (R - 0.250e2) + 0.3011596608e3 * R + 0.1769310490e5 - 0.1505798304e2 * R * R + 0.75000e3 * (0.552125566e-1 * R - 0.2283791458e1) * R) * pow(R, -6));
}

static double radcoeff_3_4_4_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.164703636699999989e0 + pow(R - 0.475e1, 2) * (-0.505608428741199756e1) + pow(R - 0.475e1, 3) * 0.100851804968479897e2 : (R < 0.525e1 ? 0.319163331677800466e1 + R * (-0.637070800547000937e0) + pow(R - 0.50e1, 2) * 0.250780108522399425e1 + pow(R - 0.50e1, 3) * (-0.328116182526396205e1) : (R < 0.55e1 ? -0.559814458870170895e-1 + R * 0.161189982800325447e-2 + pow(R - 0.525e1, 2) * 0.469297162760225206e-1 + pow(R - 0.525e1, 3) * (-0.133194101921421289e-1) : (R < 0.575e1 ? -0.168577532402433228e0 + R * 0.225793685549878637e-1 + pow(R - 0.55e1, 2) * 0.369401586319159231e-1 + pow(R - 0.55e1, 3) * (-0.186976500047469518e0) : (R < 0.60e1 ? -0.738091972542603975e-1 + R * 0.599135411204528706e-2 + pow(R - 0.575e1, 2) * (-0.103292216403686229e0) + pow(R - 0.575e1, 3) * 0.185274949582020315e0 : (R < 0.625e1 ? 0.240722912390141028e-1 + R * (-0.109157010431690168e-1) + pow(R - 0.60e1, 2) * 0.356639957828290069e-1 + pow(R - 0.60e1, 3) * 0.792534491938824172e-2 : (R < 0.65e1 ? -0.943123759089423974e-1 + R * 0.840229902063078203e-2 + pow(R - 0.625e1, 2) * 0.416080044723701886e-1 + pow(R - 0.625e1, 3) * (-0.371776009395732437e-1) : (R < 0.675e1 ? -0.182208589034198287e0 + R * 0.222355010806458905e-1 + pow(R - 0.65e1, 2) * 0.137248037676902523e-1 + pow(R - 0.65e1, 3) * (-0.195742762010952739e-1) : (R < 0.70e1 ? -0.203204156263303126e0 + R * 0.254277261767856498e-1 + pow(R - 0.675e1, 2) * (-0.955903383131204956e-3) + pow(R - 0.675e1, 3) * (-0.673548689604557688e-2) : (R < 0.725e1 ? -0.191183153815480539e0 + R * 0.236868706922115056e-1 + pow(R - 0.70e1, 2) * (-0.600751855516538751e-2) + pow(R - 0.70e1, 3) * (-0.135633621472255753e-2) : (R < 0.75e1 ? -0.167958792174170424e0 + R * 0.204287983743683330e-1 + pow(R - 0.725e1, 2) * (-0.702477071620730576e-2) + pow(R - 0.725e1, 3) * 0.306560394935898484e-3 : (R < 0.775e1 ? -0.142481260707363694e0 + R * 0.169738930903151584e-1 + pow(R - 0.75e1, 2) * (-0.679485042000538188e-2) + pow(R - 0.75e1, 3) * 0.812725034978980577e-3 : (R < 0.80e1 ? -0.117744185718875460e0 + R * 0.137288538243710272e-1 + pow(R - 0.775e1, 2) * (-0.618530664377114642e-2) + pow(R - 0.775e1, 3) * 0.114813972114815449e-2 : (R < 0.825e1 ? -0.950938107076058636e-1 + R * 0.108514767002007330e-1 + pow(R - 0.80e1, 2) * (-0.532420185291003056e-2) + pow(R - 0.80e1, 3) * 0.102059800042840249e-2 : (R < 0.85e1 ? -0.750270313683148449e-1 + R * 0.838073789882604232e-2 + pow(R - 0.825e1, 2) * (-0.455875335258872864e-2) + pow(R - 0.825e1, 3) * 0.989703477138235369e-3 : (R < 0.875e1 ? -0.574991275042083250e-1 + R * 0.628693062449509760e-2 + pow(R - 0.85e1, 2) * (-0.381647574473505200e-2) + pow(R - 0.85e1, 3) * 0.943162939018635628e-3 : (R < 0.90e1 ? -0.425732156309437115e-1 + R * 0.455553580319356666e-2 + pow(R - 0.875e1, 2) * (-0.310910354047107523e-2) + pow(R - 0.875e1, 3) * 0.991469662787237667e-3 : (R < 0.925e1 ? -0.304341820125757188e-1 + R * 0.318688459473063547e-2 + pow(R - 0.90e1, 2) * (-0.236550129338064692e-2) + pow(R - 0.90e1, 3) * 0.750200073832413836e-3 : (R < 0.95e1 ? -0.209309887384259811e-1 + R * 0.214479646188388967e-2 + pow(R - 0.925e1, 2) * (-0.180285123800633649e-2) + pow(R - 0.925e1, 3) * 0.739926707483107814e-3 : (R < 0.100e2 ? -0.137865566531711389e-1 + R * 0.138210710053380420e-2 + pow(R - 0.95e1, 2) * (-0.124790620739400563e-2) + pow(R - 0.95e1, 3) * 0.515802987052794634e-3 : (R < 0.105e2 ? -0.542351816059394656e-2 + R * 0.521053133429394649e-3 + pow(R - 0.100e2, 2) * (-0.474201726814813625e-3) + pow(R - 0.100e2, 3) * 0.196025084712048636e-3 : (R < 0.110e2 ? -0.208214486728048372e-2 + R * 0.193870220148617501e-3 + pow(R - 0.105e2, 2) * (-0.180164099746740644e-3) + pow(R - 0.105e2, 3) * 0.638520336190112863e-4 : (R < 0.120e2 ? -0.664178568157488256e-3 + R * 0.615951456161353020e-4 + pow(R - 0.110e2, 2) * (-0.843860493182237143e-4) + pow(R - 0.110e2, 3) * 0.297623384920884005e-4 : (R < 0.140e2 ? 0.235018718938562795e-3 + R * (-0.178899375440469013e-4) + pow(R - 0.120e2, 2) * 0.490096615804149997e-5 + pow(R - 0.120e2, 3) * (-0.422376771759024517e-6) : (R < 0.160e2 ? 0.477487621993487454e-4 + R * (-0.335459417298919606e-5) + pow(R - 0.140e2, 2) * 0.236670552748735266e-5 + pow(R - 0.140e2, 3) * (-0.457616722696377191e-6) : (R < 0.180e2 ? -0.100520924737589983e-4 + R * 0.620827264603687432e-6 + pow(R - 0.160e2, 2) * (-0.378994808690910751e-6) + pow(R - 0.160e2, 3) * 0.680073740070335117e-7 : (R < 0.200e2 ? 0.157402072375995964e-5 + R * (-0.790634820755533134e-7) + pow(R - 0.180e2, 2) * 0.290494353512903520e-7 + pow(R - 0.180e2, 3) * (-0.459807996925684809e-8) : (R < 0.250e2 ? 0.433018189929481643e-6 + R * (-0.180427003014740824e-7) + pow(R - 0.200e2, 2) * 0.146095553574926180e-8 + pow(R - 0.200e2, 3) * (-0.267255158908890844e-10) : 0.151072847194953679e-6 + R * (-0.543755863579814637e-8) + pow(R - 0.250e2, 2) * 0.106007279738592553e-8 + pow(R - 0.250e2, 3) * (-0.817945740452592131e-10))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2309253885e2 * (R - 0.300e2) * (R - 0.250e2) + 0.2463203304e3 * R + 0.1447128539e5 - 0.1231601652e2 * R * R + 0.75000e3 * (0.451586625e-1 * R - 0.1867925611e1) * R) * pow(R, -6));
}

static double radcoeff_3_4_5_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.319478610399999985e1 + R * (-0.277555756156289135e-16) + pow(R - 0.475e1, 2) * (-0.515767455009482489e1) + pow(R - 0.475e1, 3) * 0.232023871603792955e2 : (R < 0.525e1 ? -0.120126550516185340e2 + R * 0.177161031752370679e1 + pow(R - 0.50e1, 2) * 0.122441158201896503e2 + pow(R - 0.50e1, 3) * (-0.204952155611379041e2) : (R < 0.55e1 ? -0.235334617660021586e2 + R * 0.405081530990517358e1 + pow(R - 0.525e1, 2) * (-0.312729585066377958e1) + pow(R - 0.525e1, 3) * 0.338754740417233347e1 : (R < 0.575e1 ? -0.185693319997057813e2 + R * 0.312233252285559715e1 + pow(R - 0.55e1, 2) * (-0.586635297534529365e0) + pow(R - 0.55e1, 3) * (-0.234616081395143539e1) : (R < 0.60e1 ? -0.144266243605665174e2 + R * 0.238910972147243772e1 + pow(R - 0.575e1, 2) * (-0.234625590799810579e1) + pow(R - 0.575e1, 3) * 0.570056587633415157e0 : (R < 0.625e1 ? -0.816690415772790246e1 + R * 0.132286737765465046e1 + pow(R - 0.60e1, 2) * (-0.191871346727304437e1) + pow(R - 0.60e1, 3) * 0.998503231417770309e0 : (R < 0.65e1 ? -0.344536352557100134e1 + R * 0.550729999908960210e0 + pow(R - 0.625e1, 2) * (-0.116983604370971661e1) + pow(R - 0.625e1, 3) * 0.910257056935503073e0 : (R < 0.675e1 ? -0.811664157871806569e0 + R * 0.136485176229508703e0 + pow(R - 0.65e1, 2) * (-0.487143251008089306e0) + pow(R - 0.65e1, 3) * 0.476027045800217818e0 : (R < 0.70e1 ? 0.206964053842216916e0 + R * (-0.178313781869950984e-1) + pow(R - 0.675e1, 2) * (-0.130122966657925943e0) + pow(R - 0.675e1, 3) * 0.145304603063625248e0 : (R < 0.725e1 ? 0.465819844630698365e0 + R * (-0.556482484415283321e-1) + pow(R - 0.70e1, 2) * (-0.211445143602069993e-1) + pow(R - 0.70e1, 3) * 0.411139870652813336e-1 : (R < 0.75e1 ? 0.485900256919963913e0 + R * (-0.585116330468915744e-1) + pow(R - 0.725e1, 2) * 0.969097593875400259e-2 + pow(R - 0.725e1, 3) * 0.121682032352491646e-1 : (R < 0.775e1 ? 0.433243375521790153e0 + R * (-0.513846069709053554e-1) + pow(R - 0.75e1, 2) * 0.188171283651908765e-1 + pow(R - 0.75e1, 3) * 0.281763833722215918e-3 : (R < 0.80e1 ? 0.361098038118524312e0 + R * (-0.419232120694870078e-1) + pow(R - 0.775e1, 2) * 0.190284512404825384e-1 + pow(R - 0.775e1, 3) * (-0.324874017013805638e-2) : (R < 0.825e1 ? 0.290995860049172939e0 + R * (-0.330181252311466181e-1) + pow(R - 0.80e1, 2) * 0.165918961128789962e-1 + pow(R - 0.80e1, 3) * (-0.377956539317008972e-2) : (R < 0.85e1 ? 0.229378741598893737e0 + R * (-0.254308456859265140e-1) + pow(R - 0.825e1, 2) * 0.137572220680014286e-1 + pow(R - 0.825e1, 3) * (-0.360134257718147882e-2) : (R < 0.875e1 ? 0.177453742943752296e0 + R * (-0.192274863851473292e-1) + pow(R - 0.85e1, 2) * 0.110562151351153194e-1 + pow(R - 0.85e1, 3) * (-0.306227319410401488e-2) : (R < 0.90e1 ? 0.134750009113986519e0 + R * (-0.142735550414841723e-1) + pow(R - 0.875e1, 2) * 0.875951023953730826e-2 + pow(R - 0.875e1, 3) * (-0.253148215040247676e-2) : (R < 0.925e1 ? 0.100112004146243827e0 + R * (-0.103684528249159812e-1) + pow(R - 0.90e1, 2) * 0.686089862673545069e-2 + pow(R - 0.90e1, 3) * (-0.211956863628611847e-2) : (R < 0.95e1 ? 0.724521627553801062e-1 + R * (-0.733542263085190313e-2) + pow(R - 0.925e1, 2) * 0.527122214952086172e-2 + pow(R - 0.925e1, 3) * (-0.197406768845298378e-2) : (R < 0.100e2 ? 0.512287721919258629e-1 + R * (-0.506994924767640697e-2) + pow(R - 0.95e1, 2) * 0.379067138318112378e-2 + pow(R - 0.95e1, 3) * (-0.133335443165661966e-2) : (R < 0.105e2 ? 0.241032151393774825e-1 + R * (-0.227929368823774842e-2) + pow(R - 0.100e2, 2) * 0.179063973569619397e-2 + pow(R - 0.100e2, 3) * (-0.704872945641393908e-3) : (R < 0.110e2 ? 0.112119231772123008e-1 + R * (-0.101730866177260001e-2) + pow(R - 0.105e2, 2) * 0.733330317234103055e-3 + pow(R - 0.105e2, 3) * (-0.237531562577805928e-3) : (R < 0.120e2 ? 0.525856621289036517e-2 + R * (-0.462127016471851392e-3) + pow(R - 0.110e2, 2) * 0.377032973367394137e-3 + pow(R - 0.110e2, 3) * (-0.110320265895542713e-3) : (R < 0.140e2 ? 0.448017131744295964e-3 + R * (-0.390218674236913313e-4) + pow(R - 0.120e2, 2) * 0.460721756807659573e-4 + pow(R - 0.120e2, 3) * (-0.106494390369601438e-4) : (R < 0.160e2 ? -0.243825757745210468e-3 + R * 0.174735668558507485e-4 + pow(R - 0.140e2, 2) * (-0.178244585409949123e-4) + pow(R - 0.140e2, 3) * 0.403060841040976893e-5 : (R < 0.180e2 ? 0.840098071993867471e-4 + R * (-0.545696638321167199e-5) + pow(R - 0.160e2, 2) * 0.635919192146370210e-5 + pow(R - 0.160e2, 3) * (-0.143144488967893276e-5) : (R < 0.200e2 ? -0.506747064065269181e-4 + R * 0.280246262649593992e-5 + pow(R - 0.180e2, 2) * (-0.222947741660989530e-5) + pow(R - 0.180e2, 3) * 0.429146629293462719e-6 : (R < 0.250e2 ? 0.192035592597417738e-4 + R * (-0.965687488422088648e-6) + pow(R - 0.200e2, 2) * 0.345402359150881069e-6 + pow(R - 0.200e2, 3) * (-0.297563182980926629e-7) : -0.643841452754430583e-5 + R * 0.256612230729772203e-6 + pow(R - 0.250e2, 2) * (-0.100942415320508865e-6) + pow(R - 0.250e2, 3) * 0.100572700061108848e-7)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3526096278e2 * (R - 0.300e2) * (R - 0.250e2) - 0.3761170036e3 * R - 0.2209698556e5 + 0.1880585018e2 * R * R + 0.75000e3 * (-0.689549965e-1 * R + 0.2852232301e1) * R) * pow(R, -6));
}

static double radcoeff_3_4_5_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.243125660099999985e1 + pow(R - 0.475e1, 2) * 0.126818511596917354e2 + pow(R - 0.475e1, 3) * (-0.360368429747669410e2) : (R < 0.525e1 ? 0.474070901661466859e1 + R * (-0.415982477922933747e0) + pow(R - 0.50e1, 2) * (-0.143457810713834704e2) + pow(R - 0.50e1, 3) * 0.221775552283008111e2 : (R < 0.55e1 ? 0.200172663846183951e2 + R * (-0.343058140830826597e1) + pow(R - 0.525e1, 2) * 0.228738534984214015e1 + pow(R - 0.525e1, 3) * (-0.276772654643630078e1) : (R < 0.575e1 ? 0.166808905306420137e2 + R * (-0.280583746084400243e1) + pow(R - 0.55e1, 2) * 0.211590440014914449e0 + pow(R - 0.55e1, 3) * 0.250980981184438345e1 : (R < 0.60e1 ? 0.134191194930154118e2 + R * (-0.222945290111572358e1) + pow(R - 0.575e1, 2) * 0.209394779889820226e1 + pow(R - 0.575e1, 3) * (-0.453726428941236493e0) : (R < 0.625e1 ? 0.777150059085862388e1 + R * (-0.126755270709310408e1) + pow(R - 0.60e1, 2) * 0.175365297719227486e1 + pow(R - 0.60e1, 3) * (-0.755763411279433250e0) : (R < 0.65e1 ? 0.327478979245912694e1 + R * (-0.532431858111860334e0) + pow(R - 0.625e1, 2) * 0.118683041873269990e1 + pow(R - 0.625e1, 3) * (-0.893638016181035444e0) : (R < 0.675e1 ? 0.566926070966454199e0 + R * (-0.106573776779454496e0) + pow(R - 0.65e1, 2) * 0.516601906596923288e0 + pow(R - 0.65e1, 3) * (-0.506643447516421097e0) : (R < 0.70e1 ? -0.511013435240327607e0 + R * 0.567315301096781646e-1 + pow(R - 0.675e1, 2) * 0.136619320959607438e0 + pow(R - 0.675e1, 3) * (-0.171751787993280280e0) : (R < 0.725e1 ? -0.757901750985192857e0 + R * 0.928377303407418308e-1 + pow(R - 0.70e1, 2) * 0.780547996464722987e-2 + pow(R - 0.70e1, 3) * (-0.451901915504580934e-1) : (R < 0.75e1 ? -0.724984453463320522e0 + R * 0.882673094073545550e-1 + pow(R - 0.725e1, 2) * (-0.260871636981963410e-1) + pow(R - 0.725e1, 3) * (-0.910494788488750220e-2) : (R < 0.775e1 ? -0.616126469173799762e0 + R * 0.735165498298399750e-1 + pow(R - 0.75e1, 2) * (-0.329158746118619686e-1) + pow(R - 0.75e1, 3) * 0.442356773000820991e-2 : (R < 0.80e1 ? -0.496993575827962886e0 + R * 0.578880314732855283e-1 + pow(R - 0.775e1, 2) * (-0.295981988143558111e-1) + pow(R - 0.775e1, 3) * 0.708305840485474493e-2 : (R < 0.825e1 ? -0.390964582816143102e0 + R * 0.444170055170178893e-1 + pow(R - 0.80e1, 2) * (-0.242859050107147520e-1) + pow(R - 0.80e1, 3) * 0.672436953057276455e-2 : (R < 0.85e1 ? -0.302599784553803985e0 + R * 0.335348722986429093e-1 + pow(R - 0.825e1, 2) * (-0.192426278627851784e-1) + pow(R - 0.825e1, 3) * 0.571932459285417506e-2 : (R < 0.875e1 ? -0.231047089501489028e0 + R * 0.249859317284104737e-1 + pow(R - 0.85e1, 2) * (-0.149531344181445466e-1) + pow(R - 0.85e1, 3) * 0.457612025801059242e-2 : (R < 0.90e1 ? -0.173997892742507904e0 + R * 0.183673870677151865e-1 + pow(R - 0.875e1, 2) * (-0.115210442246366021e-1) + pow(R - 0.875e1, 3) * 0.353050727110338237e-2 : (R < 0.925e1 ? -0.128775825839558933e0 + R * 0.132688350687287706e-1 + pow(R - 0.90e1, 2) * (-0.887316377130906511e-2) + pow(R - 0.90e1, 3) * 0.304426825757593425e-2 : (R < 0.95e1 ? -0.935243522006699718e-1 + R * 0.940305348136972682e-2 + pow(R - 0.925e1, 2) * (-0.658996257812711431e-2) + pow(R - 0.925e1, 3) * 0.242689041859281765e-2 : (R < 0.100e2 ? -0.669188810110270677e-1 + R * 0.656311414579232276e-2 + pow(R - 0.95e1, 2) * (-0.476979476418250108e-2) + pow(R - 0.95e1, 3) * 0.171368670519570746e-2 : (R < 0.105e2 ? -0.330518215110660318e-1 + R * 0.307858441050660320e-2 + pow(R - 0.100e2, 2) * (-0.219926470638893978e-2) + pow(R - 0.100e2, 3) * 0.810441570751467858e-3 : (R < 0.110e2 ? -0.167902804439032695e-1 + R * 0.148715088218126382e-2 + pow(R - 0.105e2, 2) * (-0.983602350261737887e-3) + pow(R - 0.105e2, 3) * 0.343635771798420271e-3 : (R < 0.120e2 ? -0.900859582445175285e-2 + R * 0.761275360768341259e-3 + pow(R - 0.110e2, 2) * (-0.468148692564107399e-3) + pow(R - 0.110e2, 3) * 0.122742572195766149e-3 : (R < 0.140e2 ? -0.253716592232909903e-2 + R * 0.193205692227424908e-3 + pow(R - 0.120e2, 2) * (-0.999209759768089650e-4) + pow(R - 0.120e2, 3) * 0.185081627065482464e-4 : (R < 0.160e2 ? -0.302581204542752861e-3 + R * 0.156197407987680595e-4 + pow(R - 0.140e2, 2) * 0.111280002624805204e-4 + pow(R - 0.140e2, 3) * (-0.320033682968227462e-5) : (R < 0.180e2 ? -0.381399243630045431e-3 + R * 0.217276998925028407e-4 + pow(R - 0.160e2, 2) * (-0.807402071561312986e-5) + pow(R - 0.160e2, 3) * 0.124525899468085469e-5 : (R < 0.200e2 ? -0.913797058619703891e-4 + R * 0.437472496622057749e-5 + pow(R - 0.180e2, 2) * (-0.602466747528001931e-6) + pow(R - 0.180e2, 3) * 0.314946139588564478e-7 : (R < 0.250e2 ? -0.528989834882969534e-4 + R * 0.234279334361484759e-5 + pow(R - 0.200e2, 2) * (-0.413499063774863231e-6) + pow(R - 0.200e2, 3) * 0.271943451383787528e-7 : -0.745179813111553832e-5 + R * 0.247378591244621533e-6 + pow(R - 0.250e2, 2) * (-0.558388669918196803e-8) + pow(R - 0.250e2, 3) * (-0.146921531314846925e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1933797317e4 * (R - 0.300e2) * (R - 0.250e2) - 0.2062717144e5 * R - 0.1211846267e7 + 0.1031358572e4 * R * R + 0.75000e3 * (-0.3781647998e1 * R + 0.1564227112e3) * R) * pow(R, -6));
}

static double radcoeff_3_4_6_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.974936222700000021e0 + pow(R - 0.475e1, 2) * (-0.846064893434769871e1) + pow(R - 0.475e1, 3) * 0.155844313021907936e2 : (R < 0.525e1 ? 0.723087039346537797e1 + R * (-0.130824359801307555e1) + pow(R - 0.50e1, 2) * 0.322767454229539652e1 + pow(R - 0.50e1, 3) * (-0.477979671617237756e1) : (R < 0.55e1 ? 0.359038244762541492e1 + R * (-0.590618211147698080e0) + pow(R - 0.525e1, 2) * (-0.357172994833886592e0) + pow(R - 0.525e1, 3) * 0.124666884889871654e1 : (R < 0.575e1 ? 0.328413682157872566e1 + R * (-0.535454299396131983e0) + pow(R - 0.55e1, 2) * 0.577828641840150814e0 + pow(R - 0.55e1, 3) * (-0.373577399422491241e0) : (R < 0.60e1 ? 0.205591975328969845e1 + R * (-0.316585740867773635e0) + pow(R - 0.575e1, 2) * 0.297645592273282356e0 + pow(R - 0.575e1, 3) * (-0.218617772808751110e0) : (R < 0.625e1 ? 0.142411491769664011e1 + R * (-0.208753777132773349e0) + pow(R - 0.60e1, 2) * 0.133682262666719009e0 + pow(R - 0.60e1, 3) * (-0.937167445425025752e-1) : (R < 0.65e1 ? 0.112307297415708174e1 + R * (-0.159484535401133082e0) + pow(R - 0.625e1, 2) * 0.633947042598420746e-1 + pow(R - 0.625e1, 3) * 0.481146649876087063e-2 : (R < 0.675e1 ? 0.915213558697513418e0 + R * (-0.126885033302694378e0) + pow(R - 0.65e1, 2) * 0.670033041339127278e-1 + pow(R - 0.65e1, 3) * (-0.131100308925409421e-1) : (R < 0.70e1 ? 0.709652652369603731e0 + R * (-0.958415120280894373e-1) + pow(R - 0.675e1, 2) * 0.571707809645070203e-1 + pow(R - 0.675e1, 3) * (-0.151021352485971126e-1) : (R < 0.725e1 ? 0.532713674454635133e0 + R * (-0.700877719049478737e-1) + pow(R - 0.70e1, 2) * 0.458441795280591854e-1 + pow(R - 0.70e1, 3) * (-0.150303183530707159e-1) : (R < 0.75e1 ? 0.389590775172863057e0 + R * (-0.499838668321190421e-1) + pow(R - 0.725e1, 2) * 0.345714407632561477e-1 + pow(R - 0.725e1, 3) * (-0.119119065391198771e-1) : (R < 0.775e1 ? 0.278673582389319607e0 + R * (-0.349316289265759472e-1) + pow(R - 0.75e1, 2) * 0.256375108589162390e-1 + pow(R - 0.75e1, 3) * (-0.917630905844975600e-2) : (R < 0.80e1 ? 0.194121516511222975e0 + R * (-0.238334314455771572e-1) + pow(R - 0.775e1, 2) * 0.187552790650789211e-1 + pow(R - 0.775e1, 3) * (-0.711199271508114461e-2) : (R < 0.825e1 ? 0.130829469378923285e0 + R * (-0.157892905471154095e-1) + pow(R - 0.80e1, 2) * 0.134212845287680627e-1 + pow(R - 0.80e1, 3) * (-0.512907112122569508e-2) : (R < 0.85e1 ? 0.841593911351798812e-1 + R * (-0.100403491179611969e-1) + pow(R - 0.825e1, 2) * 0.957448118784879135e-2 + pow(R - 0.825e1, 3) * (-0.387679953601599309e-2) : (R < 0.875e1 ? 0.501843254287383106e-1 + R * (-0.598000843703980125e-2) + pow(R - 0.85e1, 2) * 0.666688153583679631e-2 + pow(R - 0.85e1, 3) * (-0.288515550271036545e-2) : (R < 0.90e1 ? 0.261217764974464688e-1 + R * (-0.318753432587959643e-2) + pow(R - 0.875e1, 2) * 0.450301490880402212e-2 + pow(R - 0.875e1, 3) * (-0.208506958914254307e-2) : (R < 0.925e1 ? 0.962562355897630777e-2 + R * (-0.132697741944181203e-2) + pow(R - 0.90e1, 2) * 0.293921271694711460e-2 + pow(R - 0.90e1, 3) * (-0.159485810871946247e-2) : (R < 0.95e1 ? -0.104337208773332395e-2 + R * (-0.156406956353154160e-3) + pow(R - 0.925e1, 2) * 0.174306913540751775e-2 + pow(R - 0.925e1, 3) * (-0.112213176797960413e-2) : (R < 0.100e2 ? -0.723274475711707492e-2 + R * 0.504727904854428968e-3 + pow(R - 0.95e1, 2) * 0.901470309422814655e-3 + pow(R - 0.95e1, 3) * (-0.584920966263345219e-3) : (R < 0.105e2 ? -0.117082881477973463e-1 + R * 0.967507489579734654e-3 + pow(R - 0.100e2, 2) * 0.240888600277967004e-4 + pow(R - 0.100e2, 3) * (-0.136674374374531714e-3) : (R < 0.110e2 ? -0.108959725616796423e-1 + R * 0.889090568826632539e-3 + pow(R - 0.105e2, 2) * (-0.180922701534000894e-3) + pow(R - 0.105e2, 3) * (-0.462804823852854290e-5) : (R < 0.120e2 ? -0.891345062825108642e-2 + R * 0.704696831113735224e-3 + pow(R - 0.110e2, 2) * (-0.187864773891793709e-3) + pow(R - 0.110e2, 3) * 0.216273093780584651e-4 : (R < 0.140e2 ? -0.534951665697187741e-2 + R * 0.393849211464323147e-3 + pow(R - 0.120e2, 2) * (-0.122982845757618314e-3) + pow(R - 0.120e2, 3) * 0.164855108877283714e-4 : (R < 0.160e2 ? -0.159209041961226485e-2 + R * 0.997439590865903489e-4 + pow(R - 0.140e2, 2) * (-0.240697804312480851e-4) + pow(R - 0.140e2, 3) * 0.264184285647645548e-5 : (R < 0.180e2 ? -0.634002679369047393e-3 + R * 0.351669516393154607e-4 + pow(R - 0.160e2, 2) * (-0.821872329238935222e-5) + pow(R - 0.160e2, 3) * 0.809610488865810799e-6 : (R < 0.200e2 ? -0.243528477170660017e-3 + R * 0.120073843361477788e-4 + pow(R - 0.180e2, 2) * (-0.336106035919448743e-5) + pow(R - 0.180e2, 3) * 0.465227701810298626e-6 : (R < 0.250e2 ? -0.960207166918682791e-4 + R * 0.414587532109341432e-5 + pow(R - 0.200e2, 2) * (-0.569694148332695457e-6) + pow(R - 0.200e2, 3) * 0.309459609828024672e-7 : -0.219949650399161494e-4 + R * 0.769880911476646011e-6 + pow(R - 0.250e2, 2) * (-0.105504733590658403e-6) + pow(R - 0.250e2, 3) * 0.615404632306584031e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4193027286e4 * (R - 0.300e2) * (R - 0.250e2) - 0.4472562424e5 * R - 0.2627630342e7 + 0.2236281212e4 * R * R + 0.75000e3 * (-0.819969761e1 * R + 0.3391693081e3) * R) * pow(R, -6));
}

static double radcoeff_3_4_7_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.638124072199999937e1 + pow(R - 0.475e1, 2) * (-0.896060302668463038e2) + pow(R - 0.475e1, 3) * 0.160056712363385202e3 : (R < 0.525e1 ? 0.772436577874421317e2 + R * (-0.147923815652884265e2) + pow(R - 0.50e1, 2) * 0.304365040056926048e2 + pow(R - 0.50e1, 3) * (-0.382527509781556176e2) : (R < 0.55e1 ? 0.363074687832430882e2 + R * (-0.674652037084630152e1) + pow(R - 0.525e1, 2) * 0.174694077207589205e1 + pow(R - 0.525e1, 3) * 0.728321916523726021e1 : (R < 0.575e1 ? 0.242155459936950308e2 + R * (-0.450744639132636937e1) + pow(R - 0.55e1, 2) * 0.720935514600383698e1 + pow(R - 0.55e1, 3) * (-0.446058817239343597e1) : (R < 0.60e1 ? 0.867860957872726679e1 + R * (-0.173912910064822013e1) + pow(R - 0.575e1, 2) * 0.386391401670875956e1 + pow(R - 0.575e1, 3) * (-0.118326885646351454e1) : (R < 0.625e1 ? -0.135894895771550472e1 + R * (-0.290350028807492277e-1) + pow(R - 0.60e1, 2) * 0.297646237436112360e1 + pow(R - 0.60e1, 3) * (-0.277390596335250539e1) : (R < 0.65e1 ? -0.726703620907011238e1 + R * 0.939088816171217866e0 + pow(R - 0.625e1, 2) * 0.896032901846744334e0 + pow(R - 0.625e1, 3) * (-0.125871868212646154e1) : (R < 0.675e1 ? -0.860874516927320954e1 + R * 0.115109551419587830e1 + pow(R - 0.65e1, 2) * (-0.480061097481017940e-1) + pow(R - 0.65e1, 3) * (-0.544110616941647085e0) : (R < 0.70e1 ? -0.776958665955556338e1 + R * 0.102507171864526869e1 + pow(R - 0.675e1, 2) * (-0.456089072454337163e0) + pow(R - 0.675e1, 3) * 0.369791789305118357e-2 : (R < 0.725e1 ? -0.620657621026133111e1 + R * 0.797720542023047208e0 + pow(R - 0.70e1, 2) * (-0.453315634034548776e0) + pow(R - 0.70e1, 3) * 0.114075943769438443e0 : (R < 0.75e1 ? -0.474492881345343243e1 + R * 0.592451964462542446e0 + pow(R - 0.725e1, 2) * (-0.367758676207469937e0) + pow(R - 0.725e1, 3) * 0.118155804629200084e0 : (R < 0.775e1 ? -0.355312911075086957e1 + R * 0.430726839726782607e0 + pow(R - 0.75e1, 2) * (-0.279141822735569867e0) + pow(R - 0.75e1, 3) * 0.987508025137580348e-1 : (R < 0.80e1 ? -0.263085519018503655e1 + R * 0.309671703830327272e0 + pow(R - 0.775e1, 2) * (-0.205078720850251334e0) + pow(R - 0.775e1, 3) * 0.754785405157690770e-1 : (R < 0.825e1 ? -0.193539618541526637e1 + R * 0.221284569751908300e0 + pow(R - 0.80e1, 2) * (-0.148469815463424526e0) + pow(R - 0.80e1, 3) * 0.559400786231654470e-1 : (R < 0.85e1 ? -0.141789580548682648e1 + R * 0.157538426762039580e0 + pow(R - 0.825e1, 2) * (-0.106514756496050439e0) + pow(R - 0.825e1, 3) * 0.404399533115682441e-1 : (R < 0.875e1 ? -0.103568456397943409e1 + R * 0.111863539759933406e0 + pow(R - 0.85e1, 2) * (-0.761847915123742558e-1) + pow(R - 0.85e1, 3) * 0.291430162905623805e-1 : (R < 0.90e1 ? -0.754495052054483861e0 + R * 0.792354595582267229e-1 + pow(R - 0.875e1, 2) * (-0.543275292944524688e-1) + pow(R - 0.875e1, 3) * 0.210677722461822814e-1 : (R < 0.925e1 ? -0.548639322534437035e0 + R * 0.560219022071596698e-1 + pow(R - 0.90e1, 2) * (-0.385267001098157577e-1) + pow(R - 0.90e1, 3) * 0.147265884847083035e-1 : (R < 0.95e1 ? -0.398172577241495074e0 + R * 0.395197874931346033e-1 + pow(R - 0.925e1, 2) * (-0.274817587462845292e-1) + pow(R - 0.925e1, 3) * 0.118117694949843900e-1 : (R < 0.100e2 ? -0.290206988632868146e0 + R * 0.279936149003019094e-1 + pow(R - 0.95e1, 2) * (-0.186229316250462358e-1) + pow(R - 0.95e1, 3) * 0.656349644888482367e-2 : (R < 0.105e2 ? -0.157039191599192940e0 + R * 0.142933056119192922e-1 + pow(R - 0.100e2, 2) * (-0.877768695171900031e-2) + pow(R - 0.100e2, 3) * 0.301880727176083007e-2 : (R < 0.110e2 ? -0.904636567002195802e-1 + R * 0.777972411402091339e-2 + pow(R - 0.105e2, 2) * (-0.424947604407775476e-2) + pow(R - 0.105e2, 3) * 0.135448831207185647e-2 : (R < 0.120e2 ? -0.557870067619675586e-1 + R * 0.454611430399705103e-2 + pow(R - 0.110e2, 2) * (-0.221774357596996995e-2) + pow(R - 0.110e2, 3) * 0.551676675972918992e-3 : (R < 0.140e2 ? -0.240875881737104142e-1 + R * 0.176565717997586788e-2 + pow(R - 0.120e2, 2) * (-0.562713548051212869e-3) + pow(R - 0.120e2, 3) * 0.783597315316394765e-4 : (R < 0.160e2 ? -0.736404072050966200e-2 + R * 0.455119766150690122e-3 + pow(R - 0.140e2, 2) * (-0.925551588613760098e-4) + pow(R - 0.140e2, 3) * 0.864641963051547395e-5 : (R < 0.180e2 ? -0.340167240084194872e-2 + R * 0.188656166271371797e-3 + pow(R - 0.160e2, 2) * (-0.406766410782831661e-4) + pow(R - 0.160e2, 3) * 0.334510940879863411e-5 : (R < 0.200e2 ? -0.133144356454880904e-2 + R * 0.660909148638227320e-4 + pow(R - 0.180e2, 2) * (-0.206059846254913598e-4) + pow(R - 0.180e2, 3) * 0.302791383303999684e-5 : (R < 0.250e2 ? -0.467864742276745296e-3 + R * 0.200019423583372652e-4 + pow(R - 0.200e2, 2) * (-0.243850162725137577e-5) + pow(R - 0.200e2, 3) * 0.116436822476784591e-6 : -0.122966315479558752e-3 + R * 0.434968777158235023e-5 + pow(R - 0.250e2, 2) * (-0.691949290099607016e-6) + pow(R - 0.250e2, 3) * 0.464377873166273779e-7)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2170428644e5 * (R - 0.300e2) * (R - 0.250e2) - 0.2315123884e6 * R - 0.1360135286e8 + 0.1157561942e5 * R * R + 0.75000e3 * (-0.4244393797e2 * R + 0.1755635617e4) * R) * pow(R, -6));
}

static double radcoeff_3_4_7_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.136366026399999996e1 + pow(R - 0.475e1, 2) * 0.304761081977395634e2 + pow(R - 0.475e1, 3) * (-0.502171738469582465e2) : (R < 0.525e1 ? -0.293552168556255531e2 + R * 0.582233400256511047e1 + pow(R - 0.50e1, 2) * (-0.718677218747912150e1) + pow(R - 0.50e1, 3) * 0.715909773287471030e1 : (R < 0.55e1 ? -0.178744890539326775e2 + R * 0.357127873373955751e1 + pow(R - 0.525e1, 2) * (-0.181744888782308900e1) + pow(R - 0.525e1, 3) * (-0.269442784934055890e1) : (R < 0.575e1 ? -0.102535668834216231e2 + R * 0.215734906807665849e1 + pow(R - 0.55e1, 2) * (-0.383826977482850840e1) + pow(R - 0.55e1, 3) * 0.135569285808749851e1 : (R < 0.60e1 ? -0.898856803434409324e0 + R * 0.492406591553810280e0 + pow(R - 0.575e1, 2) * (-0.282150013126288446e1) + pow(R - 0.575e1, 3) * 0.117118357219057323e1 : (R < 0.625e1 ? 0.609001805675139707e1 + R * (-0.698746554291899469e0) + pow(R - 0.60e1, 2) * (-0.194311245211995454e1) + pow(R - 0.60e1, 3) * 0.183248306115020920e1 : (R < 0.65e1 ? 0.992199140191382867e1 + R * (-0.132671220638621268e1) + pow(R - 0.625e1, 2) * (-0.568750156257297634e0) + pow(R - 0.625e1, 3) * 0.107505416720859071e1 : (R < 0.675e1 ? 0.104414579800611271e2 + R * (-0.140951462816325046e1) + pow(R - 0.65e1, 2) * 0.237540469149145478e0 + pow(R - 0.65e1, 3) * 0.450665486015424943e0 : (R < 0.70e1 ? 0.909127331848530318e1 + R * (-0.120624461496078550e1) + pow(R - 0.675e1, 2) * 0.575539583660714227e0 + pow(R - 0.675e1, 3) * (-0.261195352702879476e-1) : (R < 0.725e1 ? 0.714672977195525228e1 + R * (-0.923372235993607404e0) + pow(R - 0.70e1, 2) * 0.555949932207998265e0 + pow(R - 0.70e1, 3) * (-0.152106039334273690e0) : (R < 0.75e1 ? 0.537055062881968848e1 + R * (-0.673917152264784658e0) + pow(R - 0.725e1, 2) * 0.441870402707292997e0 + pow(R - 0.725e1, 3) * (-0.151474579392617242e0) : (R < 0.775e1 ? 0.395179785580440379e1 + R * (-0.481383434547253852e0) + pow(R - 0.75e1, 2) * 0.328264468162830059e0 + pow(R - 0.75e1, 3) * (-0.122849518295258545e0) : (R < 0.80e1 ? 0.287688575348304854e1 + R * (-0.340285485146199829e0) + pow(R - 0.775e1, 2) * 0.236127329441386147e0 + pow(R - 0.775e1, 3) * (-0.915191170263479625e-1) : (R < 0.825e1 ? 0.208298308314357561e1 + R * (-0.239381654867946964e0) + pow(R - 0.80e1, 2) * 0.167487991671625175e0 + pow(R - 0.80e1, 3) * (-0.656675687993491519e-1) : (R < 0.85e1 ? 0.150311658170160189e1 + R * (-0.167950328182012332e0) + pow(R - 0.825e1, 2) * 0.118237315072113311e0 + pow(R - 0.825e1, 3) * (-0.464692253762558974e-1) : (R < 0.875e1 ? 0.108133207113403107e1 + R * (-0.117544650404003651e0) + pow(R - 0.85e1, 2) * 0.833853960399213862e-1 + pow(R - 0.85e1, 3) * (-0.326421242556270419e-1) : (R < 0.90e1 ? 0.774776002627263982e0 + R * (-0.819723506819730330e-1) + pow(R - 0.875e1, 2) * 0.589038028482011047e-1 + pow(R - 0.875e1, 3) * (-0.237513982412359721e-1) : (R < 0.925e1 ? 0.553099746422938132e0 + R * (-0.569738364281042325e-1) + pow(R - 0.90e1, 2) * 0.410902541672741248e-1 + pow(R - 0.90e1, 3) * (-0.161918526994288131e-1) : (R < 0.95e1 ? 0.393455208611893148e0 + R * (-0.394646817256100665e-1) + pow(R - 0.925e1, 2) * 0.289463646427025149e-1 + pow(R - 0.925e1, 3) * (-0.124829548010490406e-1) : (R < 0.100e2 ? 0.279809341419827273e0 + R * (-0.273320534294555044e-1) + pow(R - 0.95e1, 2) * 0.195841485419157336e-1 + pow(R - 0.95e1, 3) * (-0.716216952600944121e-2) : (R < 0.105e2 ? 0.141684893390468525e0 + R * (-0.131195320320468527e-1) + pow(R - 0.100e2, 2) * 0.884089425290157140e-2 + pow(R - 0.100e2, 3) * (-0.310546305761573134e-2) : (R < 0.110e2 ? 0.751330659947493373e-1 + R * (-0.660773507235708039e-2) + pow(R - 0.105e2, 2) * 0.418269966647797416e-2 + pow(R - 0.105e2, 3) * (-0.143793093952762890e-2) : (R < 0.120e2 ? 0.418522334637730989e-1 + R * (-0.350348361052482725e-2) + pow(R - 0.110e2, 2) * 0.202580325718653082e-2 + pow(R - 0.110e2, 3) * (-0.534333507661703374e-3) : (R < 0.140e2 ? 0.139604313166425114e-1 + R * (-0.105487761913687595e-2) + pow(R - 0.120e2, 2) * 0.422802734201420372e-3 + pow(R - 0.120e2, 3) * (-0.666080876164911666e-4) : (R < 0.160e2 ? 0.263198315680724087e-2 + R * (-0.162963733729088654e-3) + pow(R - 0.140e2, 2) * 0.231542085024732982e-4 + pow(R - 0.140e2, 3) * (-0.126641766896448316e-5) : (R < 0.180e2 ? 0.147575149774830825e-2 + R * (-0.855439117467692603e-4) + pow(R - 0.160e2, 2) * 0.155557024886863988e-4 + pow(R - 0.160e2, 3) * 0.219360967349115999e-6 : (R < 0.200e2 ? 0.372336647323317040e-3 + R * (-0.206887701838342800e-4) + pow(R - 0.180e2, 2) * 0.168718682927810948e-4 + pow(R - 0.180e2, 3) * (-0.325974950253197618e-5) : (R < 0.250e2 ? -0.153663458340627505e-3 + R * 0.768170895690637476e-5 + pow(R - 0.200e2, 2) * (-0.268662872241076486e-5) + pow(R - 0.200e2, 3) * 0.230242497729897960e-6 : 0.479036331744731782e-4 + R * (-0.191639093745892714e-5) + pow(R - 0.250e2, 2) * 0.767008743537704221e-6 + pow(R - 0.250e2, 3) * (-0.767106981755837567e-7))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.9369344800e1 * (R - 0.300e2) * (R - 0.250e2) - 0.9993963640e2 * R - 0.5871428638e4 + 0.4996981820e1 * R * R + 0.75000e3 * (-0.1832221905e-1 * R + 0.757872957e0) * R) * pow(R, -6));
}

static double radcoeff_3_6_3_2_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.133152503700000002e1 + pow(R - 0.475e1, 2) * (-0.443867025678188369e2) + pow(R - 0.475e1, 3) * 0.917659264952753517e2 : (R < 0.525e1 ? 0.249273990579894473e2 + R * (-0.498724006604529002e1) + pow(R - 0.50e1, 2) * 0.244377423036376804e2 + pow(R - 0.50e1, 3) * (-0.372529980970260723e2) : (R < 0.55e1 ? -0.160547368855109029e1 + R * 0.246693942581160092e0 + pow(R - 0.525e1, 2) * (-0.350200626913187607e1) + pow(R - 0.525e1, 3) * 0.787080336482894172e1 : (R < 0.575e1 ? -0.187616507663568244e0 + R * (-0.285335610793512329e-1) + pow(R - 0.55e1, 2) * 0.240109625448983088e1 + pow(R - 0.55e1, 3) * (-0.348016693348970296e1) : (R < 0.60e1 ? -0.324302235658340754e1 + R * 0.519483266136244848e0 + pow(R - 0.575e1, 2) * (-0.209028945627446505e0) + pow(R - 0.575e1, 3) * (-0.442475476701306505e-1) : (R < 0.625e1 ? -0.257991270560623231e1 + R * 0.406672378134372070e0 + pow(R - 0.60e1, 2) * (-0.242214606380044495e0) + pow(R - 0.60e1, 3) * (-0.221810670389775144e0) : (R < 0.65e1 ? -0.158166188592916845e1 + R * 0.243975574246266952e0 + pow(R - 0.625e1, 2) * (-0.408572609172375867e0) + pow(R - 0.625e1, 3) * 0.277293214189232085e0 : (R < 0.675e1 ? -0.612955092513640221e0 + R * 0.916817473205600308e-1 + pow(R - 0.65e1, 2) * (-0.200602698530451790e0) + pow(R - 0.65e1, 3) * 0.186364526592846746e0 : (R < 0.70e1 ? -0.181414311867577061e0 + R * 0.263237467914928976e-1 + pow(R - 0.675e1, 2) * (-0.608293035858167297e-1) + pow(R - 0.675e1, 3) * 0.603755757593805176e-1 : (R < 0.725e1 ? -0.506131556046976877e-1 + R * 0.722951545346838323e-2 + pow(R - 0.70e1, 2) * (-0.155476217662813380e-1) + pow(R - 0.70e1, 3) * 0.125828782736312206e-1 : (R < 0.75e1 ? -0.121329957420933717e-1 + R * 0.181499424663356850e-2 + pow(R - 0.725e1, 2) * (-0.611046306105792175e-2) + pow(R - 0.725e1, 3) * 0.564004375409459142e-2 : (R < 0.775e1 ? 0.255615095001992306e-2 + R * (-0.182729080002656374e-3) + pow(R - 0.75e1, 2) * (-0.188043024548697753e-2) + pow(R - 0.75e1, 3) * 0.186152290199041335e-2 : (R < 0.80e1 ? 0.704935208932780562e-2 + R * (-0.773908658622942660e-3) + pow(R - 0.775e1, 2) * (-0.484288068994167403e-3) + pow(R - 0.775e1, 3) * 0.109594247474375248e-2 : (R < 0.825e1 ? 0.732944675004458188e-2 + R * (-0.810563479105572745e-3) + pow(R - 0.80e1, 2) * 0.337668787063646956e-3 + pow(R - 0.80e1, 3) * 0.276455798345755059e-4 : (R < 0.85e1 ? 0.591533500847682241e-2 + R * (-0.636545539354766332e-3) + pow(R - 0.825e1, 2) * 0.358402971939578586e-3 + pow(R - 0.825e1, 3) * 0.215435195179468440e-4 : (R < 0.875e1 ? 0.438052419674057718e-2 + R * (-0.453304643475362047e-3) + pow(R - 0.85e1, 2) * 0.374560611578038719e-3 + pow(R - 0.85e1, 3) * (-0.232844265906361717e-3) : (R < 0.90e1 ? 0.314360349140812342e-2 + R * (-0.309682637543785540e-3) + pow(R - 0.875e1, 2) * 0.199927412148267418e-3 + pow(R - 0.875e1, 3) * (-0.371756587092501346e-3) : (R < 0.925e1 ? 0.287795614404546228e-2 + R * (-0.279423291549495806e-3) + pow(R - 0.90e1, 2) * (-0.788900281711085651e-4) + pow(R - 0.90e1, 3) * 0.327135702276367584e-3 : (R < 0.95e1 ? 0.267562740928863800e-2 + R * (-0.257530361458231140e-3) + pow(R - 0.925e1, 2) * 0.166461748536167123e-3 + pow(R - 0.925e1, 3) * (-0.361154714812970566e-3) : (R < 0.100e2 ? 0.253300175636700592e-2 + R * (-0.242015996217579587e-3) + pow(R - 0.95e1, 2) * (-0.104404287573560802e-3) + pow(R - 0.95e1, 3) * 0.176258051217440030e-3 : (R < 0.105e2 ? 0.225104043248060357e-2 + R * (-0.214226745378060359e-3) + pow(R - 0.100e2, 2) * 0.159982789252599230e-3 + pow(R - 0.100e2, 3) * (-0.329913853929569509e-4) : (R < 0.110e2 ? 0.866900079436877849e-3 + R * (-0.789874951701788482e-4) + pow(R - 0.105e2, 2) * 0.110495711163163804e-3 + pow(R - 0.105e2, 3) * (-0.650183293256121838e-4) : (R < 0.120e2 ? 0.207345110203466064e-3 + R * (-0.172555310012241888e-4) + pow(R - 0.110e2, 2) * 0.129682171747455317e-4 + pow(R - 0.110e2, 3) * (-0.448897935752134211e-5) : (R < 0.140e2 ? 0.661903926975658459e-4 + R * (-0.478603472429715331e-5) + pow(R - 0.120e2, 2) * (-0.498720897818495011e-6) + pow(R - 0.120e2, 3) * 0.429286639983535786e-6 : (R < 0.160e2 ? 0.234380169871618280e-4 + R * (-0.162947863576870202e-5) + pow(R - 0.140e2, 2) * 0.207699894208271992e-5 + pow(R - 0.140e2, 3) * (-0.526743962649184357e-6) : (R < 0.180e2 ? -0.426103041035143433e-5 + R * 0.357589580771964625e-6 + pow(R - 0.160e2, 2) * (-0.108346483381238644e-5) + pow(R - 0.160e2, 3) * 0.273567853838202021e-6 : (R < 0.200e2 ? 0.125124646909448149e-4 + R * (-0.693455508419156452e-6) + pow(R - 0.180e2, 2) * 0.557942289216825688e-6 + pow(R - 0.180e2, 3) * (-0.107580957441123713e-6) : (R < 0.250e2 ? -0.493236716319323446e-5 + R * 0.247342159154661691e-6 + pow(R - 0.200e2, 2) * (-0.875434554299166029e-7) + pow(R - 0.200e2, 3) * 0.752348343499685119e-8 : 0.159881429729351039e-5 + R * (-0.638311375197404140e-7) + pow(R - 0.250e2, 2) * 0.253087960950361699e-7 + pow(R - 0.250e2, 3) * (-0.252602256221761679e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.4632326368e1 * (R - 0.300e2) * (R - 0.250e2) + 0.4941142668e2 * R + 0.2902939468e4 - 0.2470571334e1 * R * R + 0.75000e3 * (0.905879614e-2 * R - 0.3747052209e0) * R) * pow(R, -6));
}

static double radcoeff_3_6_3_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.126347214199999991e1 + pow(R - 0.475e1, 2) * 0.411801189931738278e2 + pow(R - 0.475e1, 3) * (-0.848551993646953093e2) : (R < 0.525e1 ? -0.234141252735027194e2 + R * 0.467970961570654431e1 + pow(R - 0.50e1, 2) * (-0.224612805303476541e2) + pow(R - 0.50e1, 3) * 0.346805551820859037e2 : (R < 0.55e1 ? 0.546118252837417772e0 + R * (-0.483265528261748178e-1) + pow(R - 0.525e1, 2) * 0.354913585621677719e1 + pow(R - 0.525e1, 3) * (-0.834151552044831135e1) : (R < 0.575e1 ? -0.520332660289854143e0 + R * 0.162207215198155286e0 + pow(R - 0.55e1, 2) * (-0.270700078411945677e1) + pow(R - 0.55e1, 3) * 0.365749475890734210e1 : (R < 0.60e1 ? 0.320701886370706735e1 + R * (-0.505512909566446456e0) + pow(R - 0.575e1, 2) * 0.361202850610496257e-1 + pow(R - 0.575e1, 3) * 0.149691512018945788e0 : (R < 0.625e1 ? 0.293485150519421589e1 + R * (-0.459385608532369316e0) + pow(R - 0.60e1, 2) * 0.148388919075258974e0 + pow(R - 0.60e1, 3) * 0.418285182776872988e0 : (R < 0.65e1 ? 0.199676819794047611e1 + R * (-0.306762677224076186e0) + pow(R - 0.625e1, 2) * 0.462102806157913715e0 + pow(R - 0.625e1, 3) * (-0.275155221046435694e0) : (R < 0.675e1 ? 0.854861628633619253e0 + R * (-0.127302878091326038e0) + pow(R - 0.65e1, 2) * 0.255736390373086930e0 + pow(R - 0.65e1, 3) * (-0.223525590751131126e0) : (R < 0.70e1 ? 0.287141823961682696e0 + R * (-0.413457311706196609e-1) + pow(R - 0.675e1, 2) * 0.880921973097385791e-1 + pow(R - 0.675e1, 3) * (-0.840185080450396998e-1) : (R < 0.725e1 ? 0.932863983303672262e-1 + R * (-0.130531027741953177e-1) + pow(R - 0.70e1, 2) * 0.250783162759588008e-1 + pow(R - 0.70e1, 3) * (-0.204272279487101305e-1) : (R < 0.75e1 ? 0.313939841533432337e-1 + R * (-0.434404987659906677e-2) + pow(R - 0.725e1, 2) * 0.975789531442620116e-2 + pow(R - 0.725e1, 3) * (-0.868056988811972616e-2) : (R < 0.775e1 ? 0.748316268206311586e-2 + R * (-0.109270907340841550e-2) + pow(R - 0.75e1, 2) * 0.324746789833640654e-2 + pow(R - 0.75e1, 3) * (-0.278325213401097804e-2) : (R < 0.80e1 ? -0.896883737703652842e-3 + R * 0.916510063272938801e-5 + pow(R - 0.775e1, 2) * 0.116002879782817290e-2 + pow(R - 0.775e1, 3) * (-0.158140349583636187e-2) : (R < 0.825e1 ? -0.311710131501998422e-2 + R * 0.292666344077498013e-3 + pow(R - 0.80e1, 2) * (-0.260238240490984363e-4) + pow(R - 0.80e1, 3) * 0.543505909564253892e-4 : (R < 0.85e1 ? -0.309460387222254812e-2 + R * 0.289845167857278533e-3 + pow(R - 0.825e1, 2) * 0.147391191682206056e-4 + pow(R - 0.825e1, 3) * (-0.130087008789339621e-3) : (R < 0.875e1 ? -0.295103037299379502e-2 + R * 0.272823413293387686e-3 + pow(R - 0.85e1, 2) * (-0.828261374237841133e-4) + pow(R - 0.85e1, 3) * 0.438790340200933334e-3 : (R < 0.90e1 ? -0.330687695818024244e-2 + R * 0.313683533369170592e-3 + pow(R - 0.875e1, 2) * 0.246266617726915874e-3 + pow(R - 0.875e1, 3) * (-0.394157276814392874e-3) : (R < 0.925e1 ? -0.374070337716936882e-2 + R * 0.362912352829929889e-3 + pow(R - 0.90e1, 2) * (-0.493513398838788089e-4) + pow(R - 0.90e1, 3) * 0.194624482256637414e-3 : (R < 0.95e1 ? -0.385004871782776686e-2 + R * 0.374728773311109925e-3 + pow(R - 0.925e1, 2) * 0.966170218085992381e-4 + pow(R - 0.925e1, 3) * (-0.184576569012156094e-3) : (R < 0.100e2 ? -0.397704800289348792e-2 + R * 0.388429177525630295e-3 + pow(R - 0.95e1, 2) * (-0.418154049505178462e-4) + pow(R - 0.95e1, 3) * (-0.124495974601485581e-3) : (R < 0.105e2 ? -0.265118999193998325e-2 + R * 0.253241791623998310e-3 + pow(R - 0.100e2, 2) * (-0.228559366852746238e-3) + pow(R - 0.100e2, 3) * 0.788375509694992497e-4 : (R < 0.110e2 ? -0.919447501712953295e-3 + R * 0.838105879983764960e-4 + pow(R - 0.105e2, 2) * (-0.110303040398497350e-3) + pow(R - 0.105e2, 3) * 0.616201375234887410e-4 : (R < 0.120e2 ? -0.234353434807452627e-3 + R * 0.197226507424956950e-4 + pow(R - 0.110e2, 2) * (-0.178728341132642351e-4) + pow(R - 0.110e2, 3) * 0.663368233676854178e-5 : (R < 0.140e2 ? -0.554571319892741867e-4 + R * 0.387802952627284851e-5 + pow(R - 0.120e2, 2) * 0.202821289704138942e-5 + pow(R - 0.120e2, 3) * (-0.795307485088906883e-6) : (R < 0.160e2 ? -0.336750050212013556e-4 + R * 0.244719129337152529e-5 + pow(R - 0.140e2, 2) * (-0.274363201349205145e-5) + pow(R - 0.140e2, 3) * 0.631305802278144416e-6 : (R < 0.180e2 ? 0.147826481689431601e-4 + R * (-0.951667133258947528e-6) + pow(R - 0.160e2, 2) * 0.104420280017681504e-5 + pow(R - 0.160e2, 3) * (-0.232307546523670588e-6) : (R < 0.200e2 ? -0.790317256615677203e-5 + R * 0.437453509164265113e-6 + pow(R - 0.180e2, 2) * (-0.349642478965208590e-6) + pow(R - 0.180e2, 3) * 0.673496569290380190e-7 : (R < 0.250e2 ? 0.304453542766226002e-5 + R * (-0.152920523548113022e-6) + pow(R - 0.200e2, 2) * 0.544554626090195564e-7 + pow(R - 0.200e2, 3) * (-0.468654959347939023e-8) : -0.100648187077820612e-5 + R * 0.401428830311282457e-7 + pow(R - 0.250e2, 2) * (-0.158427812931712995e-7) + pow(R - 0.250e2, 3) * 0.157962274218912995e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4440013856e1 * (R - 0.300e2) * (R - 0.250e2) - 0.4736023092e2 * R - 0.2782398538e4 + 0.2368011546e1 * R * R + 0.75000e3 * (-0.868268038e-2 * R + 0.3591468435e0) * R) * pow(R, -6));
}

static double radcoeff_3_6_4_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.216964954600000537e0 + R * 0.111022302462515654e-15 + pow(R - 0.475e1, 2) * 0.416591747183090622e1 + pow(R - 0.475e1, 3) * (-0.813429702972362456e1) : (R < 0.525e1 ? -0.287258371792136735e1 + R * 0.557778042842273392e0 + pow(R - 0.50e1, 2) * (-0.193480530046181243e1) + pow(R - 0.50e1, 3) * 0.242767891061087449e1 : (R < 0.55e1 ? -0.266459080142257720e0 + R * 0.455651883509062272e-1 + pow(R - 0.525e1, 2) * (-0.114046117503656425e0) + pow(R - 0.525e1, 3) * 0.142552055440125974e0 : (R < 0.575e1 ? -0.104739570657559039e0 + R * 0.152706399941016438e-1 + pow(R - 0.55e1, 2) * (-0.713207592356193687e-2) + pow(R - 0.55e1, 3) * 0.422375517886214441e-1 : (R < 0.60e1 ? -0.129558005897951384e0 + R * 0.196241429926871970e-1 + pow(R - 0.575e1, 2) * 0.245460879179041462e-1 + pow(R - 0.575e1, 3) * (-0.447297985946117083e-1) : (R < 0.625e1 ? -0.152040018840897434e0 + R * 0.235103497151495748e-1 + pow(R - 0.60e1, 2) * (-0.900126102805463325e-2) + pow(R - 0.60e1, 3) * (-0.152547683541746654e-1) : (R < 0.65e1 ? -0.106835331032965664e0 + R * 0.161494501347145061e-1 + pow(R - 0.625e1, 2) * (-0.204423372936856328e-1) + pow(R - 0.625e1, 3) * 0.110593307633104296e-1 : (R < 0.675e1 ? -0.549811382339505730e-1 + R * 0.800190600599239542e-2 + pow(R - 0.65e1, 2) * (-0.121478392212028101e-1) + pow(R - 0.65e1, 3) * 0.936952651693290575e-2 : (R < 0.70e1 ? -0.264533289598823974e-1 + R * 0.368477261731591042e-2 + pow(R - 0.675e1, 2) * (-0.512069433350313078e-2) + pow(R - 0.675e1, 3) * 0.414510211935795268e-2 : (R < 0.725e1 ? -0.142266214995077304e-1 + R * 0.190163209794396164e-2 + pow(R - 0.70e1, 2) * (-0.201186774398466606e-2) + pow(R - 0.70e1, 3) * 0.128663784403527958e-2 : (R < 0.75e1 ? -0.878826226448476723e-2 + R * 0.113694282170824371e-2 + pow(R - 0.725e1, 2) * (-0.104688936095820632e-2) + pow(R - 0.725e1, 3) * 0.587308206900927525e-3 : (R < 0.775e1 ? -0.574458322117298199e-2 + R * 0.723618430023064340e-3 + pow(R - 0.75e1, 2) * (-0.606408205782510618e-3) + pow(R - 0.75e1, 3) * 0.277430249961013536e-3 : (R < 0.80e1 ? -0.383145792094611703e-2 + R * 0.472432498999499008e-3 + pow(R - 0.775e1, 2) * (-0.398335518311750440e-3) + pow(R - 0.775e1, 3) * 0.171378578215016826e-3 : (R < 0.825e1 ? -0.251740189463151584e-2 + R * 0.305398223258939458e-3 + pow(R - 0.80e1, 2) * (-0.269801584650487813e-3) + pow(R - 0.80e1, 3) * 0.133812182138919858e-3 : (R < 0.85e1 ? -0.162623286088912997e-2 + R * 0.195587215084743035e-3 + pow(R - 0.825e1, 2) * (-0.169442448046297907e-3) + pow(R - 0.825e1, 3) * (-0.802966552506972529e-4) : (R < 0.875e1 ? -0.789974450627750862e-3 + R * 0.958103682020883317e-4 + pow(R - 0.85e1, 2) * (-0.229664939484320853e-3) + pow(R - 0.85e1, 3) * 0.192196231503869867e-3 : (R < 0.90e1 ? -0.111863275295405771e-3 + R * 0.170146918669035172e-4 + pow(R - 0.875e1, 2) * (-0.855177658564184456e-4) + pow(R - 0.875e1, 3) * (-0.535506688447825514e-4) : (R < 0.925e1 ? 0.357151835167321798e-3 + R * (-0.357849414697024247e-4) + pow(R - 0.90e1, 2) * (-0.125680767490005363e-3) + pow(R - 0.90e1, 3) * 0.147466256355260222e-3 : (R < 0.95e1 ? 0.677112708729867875e-3 + R * (-0.709754021480938144e-4) + pow(R - 0.925e1, 2) * (-0.150810752235602013e-4) + pow(R - 0.925e1, 3) * 0.133902295583741734e-3 : (R < 0.100e2 ? 0.511384008203262324e-3 + R * (-0.534092593379223424e-4) + pow(R - 0.95e1, 2) * 0.853456464642461112e-4 + pow(R - 0.95e1, 3) * (-0.504247601368028778e-4) : (R < 0.105e2 ? 0.511465611867838321e-4 + R * (-0.588218297627838273e-5) + pow(R - 0.100e2, 2) * 0.970850625904179624e-5 + pow(R - 0.100e2, 3) * 0.863560107502993302e-5 : (R < 0.110e2 ? -0.115291536299876596e-3 + R * 0.103030240890358667e-4 + pow(R - 0.105e2, 2) * 0.226619078715866975e-4 + pow(R - 0.105e2, 3) * (-0.280905522113168585e-4) : (R < 0.120e2 ? -0.130671309201984095e-3 + R * 0.118970178021349169e-4 + pow(R - 0.110e2, 2) * (-0.194739204453885903e-4) + pow(R - 0.110e2, 3) * 0.768248303175367265e-5 : (R < 0.140e2 ? 0.483419549305749325e-4 + R * (-0.400337399338124410e-5) + pow(R - 0.120e2, 2) * 0.357352864987243019e-5 + pow(R - 0.120e2, 3) * (-0.774258536415904065e-6) : (R < 0.160e2 ? -0.136001690362467785e-4 + R * 0.999638169117627040e-6 + pow(R - 0.140e2, 2) * (-0.107202256862299420e-5) + pow(R - 0.140e2, 3) * 0.236466487157090295e-6 : (R < 0.180e2 ? 0.721135144422825986e-5 + R * (-0.450854259489266223e-6) + pow(R - 0.160e2, 2) * 0.346776354319547568e-6 + pow(R - 0.160e2, 3) * (-0.692732177124572201e-7) : (R < 0.200e2 ? -0.196061136530987086e-5 + R * 0.104972545239437275e-6 + pow(R - 0.180e2, 2) * (-0.688629519551958057e-7) + pow(R - 0.180e2, 3) * 0.128253223927385826e-7 : (R < 0.250e2 ? 0.297498188169658742e-6 + R * (-0.165753938684829357e-7) + pow(R - 0.200e2, 2) * 0.808898240123569519e-8 + pow(R - 0.200e2, 3) * (-0.739762130307821424e-9) : -0.227939124069684991e-6 + R * 0.883227037078739978e-8 + pow(R - 0.250e2, 2) * (-0.300744955338162710e-8) + pow(R - 0.250e2, 3) * 0.289333914244829378e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1088310054e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1160865552e3 * R - 0.6820090974e4 + 0.5804327760e1 * R * R + 0.75000e3 * (-0.2128254625e-1 * R + 0.880323656e0) * R) * pow(R, -6));
}

static double radcoeff_3_6_5_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.540674121599997837e0 + R * (-0.444089209850062616e-15) + pow(R - 0.475e1, 2) * 0.338699158711990904e2 + pow(R - 0.475e1, 3) * (-0.716740899679963519e2) : (R < 0.525e1 ? -0.170240423684011404e2 + R * 0.349606606660022834e1 + pow(R - 0.50e1, 2) * (-0.198856516047981735e2) + pow(R - 0.50e1, 3) * 0.307262780703890428e2 : (R < 0.55e1 ? 0.416685798820479381e1 + R * (-0.685582597600913113e0) + pow(R - 0.525e1, 2) * 0.315905694799360814e1 + pow(R - 0.525e1, 3) * (-0.686174051515982075e1) : (R < 0.575e1 ? 0.264584765118116660e1 + R * (-0.392630470196575709e0) + pow(R - 0.55e1, 2) * (-0.198724843837625809e1) + pow(R - 0.55e1, 3) * 0.337116733745024266e1 : (R < 0.60e1 ? 0.465311858807350909e1 + R * (-0.754160813612784198e0) + pow(R - 0.575e1, 2) * 0.541127064711424022e0 + pow(R - 0.575e1, 3) * (-0.148605193041148553e0) : (R < 0.625e1 ? 0.322841672151372538e1 + R * (-0.511460754952287489e0) + pow(R - 0.60e1, 2) * 0.429673169930562593e0 + pow(R - 0.60e1, 3) * 0.846198519943497374e-1 : (R < 0.65e1 ? 0.181470093473291039e1 + R * (-0.280757947738065672e0) + pow(R - 0.625e1, 2) * 0.493138058926324896e0 + pow(R - 0.625e1, 3) * (-0.356212214296248775e0) : (R < 0.675e1 ? 0.671391192230424316e0 + R * (-0.100978708455449886e0) + pow(R - 0.65e1, 2) * 0.225978898204138273e0 + pow(R - 0.65e1, 3) * (-0.209870062969354981e0) : (R < 0.70e1 ? 0.185173670637509974e0 + R * (-0.273398961601348106e-1) + pow(R - 0.675e1, 2) * 0.685763509771220164e-1 + pow(R - 0.675e1, 3) * (-0.675976821783310228e-1) : (R < 0.725e1 ? 0.371082082290761089e-1 + R * (-0.572628608001087263e-2) + pow(R - 0.70e1, 2) * 0.178780893433737459e-1 + pow(R - 0.70e1, 3) * (-0.153190759013210141e-1) : (R < 0.75e1 ? -0.599747681429274419e-2 + R * 0.340431860178309637e-3 + pow(R - 0.725e1, 2) * 0.638878241738298405e-2 + pow(R - 0.725e1, 3) * (-0.691734976838488756e-2) : (R < 0.775e1 ? -0.199366724567322622e-1 + R * 0.223781998729763497e-2 + pow(R - 0.75e1, 2) * 0.120077009109431838e-2 + pow(R - 0.75e1, 3) * (-0.215348048113943704e-2) : (R < 0.80e1 ? -0.214189802373914127e-1 + R * 0.243442744263114991e-2 + pow(R - 0.775e1, 2) * (-0.414340269760259453e-3) + pow(R - 0.775e1, 3) * (-0.706565299057355088e-3) : (R < 0.825e1 ? -0.187387075594221270e-1 + R * 0.209477631417776585e-2 + pow(R - 0.80e1, 2) * (-0.944264244053275741e-3) + pow(R - 0.80e1, 3) * (-0.138389970631155494e-3) : (R < 0.85e1 ? -0.146907244254267377e-1 + R * 0.159669607265778657e-2 + pow(R - 0.825e1, 2) * (-0.104805672202664237e-2) + pow(R - 0.825e1, 3) * 0.647237565581982883e-3 : (R < 0.875e1 ? -0.113234086851242421e-1 + R * 0.119402475519108731e-2 + pow(R - 0.85e1, 2) * (-0.562628547840155206e-3) + pow(R - 0.85e1, 3) * 0.160452521103226272e-3 : (R < 0.90e1 ? -0.915780841935631522e-2 + R * 0.942795328977864659e-3 + pow(R - 0.875e1, 2) * (-0.442289157012735502e-3) + pow(R - 0.875e1, 3) * 0.174601188405107410e-3 : (R < 0.925e1 ? -0.748706164697708967e-2 + R * 0.754388473297454439e-3 + pow(R - 0.90e1, 2) * (-0.311338265708904945e-3) + pow(R - 0.90e1, 3) * 0.191463691676348636e-3 : (R < 0.95e1 ? -0.639565902974893654e-2 + R * 0.634618782632317448e-3 + pow(R - 0.925e1, 2) * (-0.167740496951643454e-3) + pow(R - 0.925e1, 3) * (-0.540746303105039700e-4) : (R < 0.100e2 ? -0.551389993114612294e-2 + R * 0.540609540973276104e-3 + pow(R - 0.95e1, 2) * (-0.208296469684521432e-3) + pow(R - 0.95e1, 3) * (-0.277988901240615091e-4) : (R < 0.105e2 ? -0.327799253705708541e-2 + R * 0.311463903695708539e-3 + pow(R - 0.100e2, 2) * (-0.249994804870613699e-3) + pow(R - 0.100e2, 3) * 0.649147981583931470e-4 : (R < 0.110e2 ? -0.121863547288084194e-2 + R * 0.110155197443889707e-3 + pow(R - 0.105e2, 2) * (-0.152622607633023965e-3) + pow(R - 0.105e2, 3) * 0.974360849304891350e-4 : (R < 0.120e2 ? -0.369610630886058490e-3 + R * 0.306096535087325866e-4 + pow(R - 0.110e2, 2) * (-0.646848023729026906e-5) + pow(R - 0.110e2, 3) * (-0.741055811442319749e-6) : (R < 0.140e2 ? -0.194898632027901088e-3 + R * 0.154495255998250908e-4 + pow(R - 0.120e2, 2) * (-0.869164767161722842e-5) + pow(R - 0.120e2, 3) * 0.150736893272734202e-5 : (R < 0.160e2 ? 0.158880176598200964e-4 + R * (-0.122863789391572107e-5) + pow(R - 0.140e2, 2) * 0.352565924746823521e-6 + pow(R - 0.140e2, 3) * 0.397724664805185518e-7 : (R < 0.180e2 ? -0.125840716574047296e-4 + R * 0.658895402837795630e-6 + pow(R - 0.160e2, 2) * 0.591200723629934832e-6 + pow(R - 0.160e2, 3) * (-0.194843807524416318e-6) : (R < 0.200e2 ? -0.122582088991617088e-4 + R * 0.685572607064539356e-6 + pow(R - 0.180e2, 2) * (-0.577862121516562969e-6) + pow(R - 0.180e2, 3) * 0.112184063004646635e-6 : (R < 0.250e2 ? 0.563260971901905768e-5 + R * (-0.279667122945952901e-6) + pow(R - 0.200e2, 2) * 0.952422565113168408e-7 + pow(R - 0.200e2, 3) * (-0.811002492762525247e-8) : -0.160435437268303860e-5 + R * 0.645035725953215450e-7 + pow(R - 0.250e2, 2) * (-0.264081174030619530e-7) + pow(R - 0.250e2, 3) * 0.265398680639952837e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1256552323e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1340323600e3 * R + 0.7874396028e4 - 0.6701618000e1 * R * R + 0.75000e3 * (0.2457258955e-1 * R - 0.1016411526e1) * R) * pow(R, -6));
}

static double radcoeff_3_6_5_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.744190343099997986e0 + R * 0.444089209850062616e-15 + pow(R - 0.475e1, 2) * (-0.328012947299093653e2) + pow(R - 0.475e1, 3) * 0.678846801228374517e2 : (R < 0.525e1 ? 0.181161567590133039e2 + R * (-0.367226984192266093e1) + pow(R - 0.50e1, 2) * 0.181122153622187234e2 + pow(R - 0.50e1, 3) * (-0.274217322597123179e2) : (R < 0.55e1 ? -0.173159198007586346e1 + R * 0.242263040490640652e0 + pow(R - 0.525e1, 2) * (-0.245408383256551677e1) + pow(R - 0.525e1, 3) * 0.615258162001181574e1 : (R < 0.575e1 ? -0.138495738788053879e1 + R * 0.168830177960097971e0 + pow(R - 0.55e1, 2) * 0.216035238244334549e1 + pow(R - 0.55e1, 3) * (-0.321573109073494878e1) : (R < 0.60e1 ? -0.404423417959656462e1 + R * 0.646056789668967735e0 + pow(R - 0.575e1, 2) * (-0.251445935607866267e0) + pow(R - 0.575e1, 3) * (-0.310742746720189533e-1) : (R < 0.625e1 ? -0.327113872028418662e1 + R * 0.514507395364031117e0 + pow(R - 0.60e1, 2) * (-0.274751641611880482e0) + pow(R - 0.60e1, 3) * (-0.295615464976975106e0) : (R < 0.65e1 ? -0.208790643649817520e1 + R * 0.321703674874907974e0 + pow(R - 0.625e1, 2) * (-0.496463240344611811e0) + pow(R - 0.625e1, 3) * 0.307869836339919323e0 : (R < 0.675e1 ? -0.875835754746190132e0 + R * 0.131197649016336931e0 + pow(R - 0.65e1, 2) * (-0.265560863089672305e0) + pow(R - 0.65e1, 3) * 0.227313369537298415e0 : (R < 0.70e1 ? -0.280307107683273549e0 + R * 0.410384742597442315e-1 + pow(R - 0.675e1, 2) * (-0.950758359366984940e-1) + pow(R - 0.675e1, 3) * 0.894413368388861790e-1 : (R < 0.725e1 ? -0.694781553638030847e-1 + R * 0.102708069486861543e-1 + pow(R - 0.70e1, 2) * (-0.279948333075338493e-1) + pow(R - 0.70e1, 3) * 0.248289772511569307e-1 : (R < 0.75e1 ? -0.311049988695586994e-2 + R * 0.928823529511154495e-3 + pow(R - 0.725e1, 2) * (-0.937310036916614957e-2) + pow(R - 0.725e1, 3) * 0.962985086048612215e-2 : (R < 0.775e1 ? 0.180612963714807916e-1 + R * (-0.195212961873077228e-2) + pow(R - 0.75e1, 2) * (-0.215071222380155752e-2) + pow(R - 0.75e1, 3) * 0.311563101889858864e-2 : (R < 0.80e1 ? 0.217821671350575050e-1 + R * (-0.244330491458806531e-2) + pow(R - 0.775e1, 2) * 0.186011040372384152e-3 + pow(R - 0.775e1, 3) * 0.933415143919507436e-3 : (R < 0.825e1 ? 0.196642105593357250e-1 + R * (-0.217528405491696549e-2) + pow(R - 0.80e1, 2) * 0.886072398312014783e-3 + pow(R - 0.80e1, 3) * (-0.114674826576610048e-3) : (R < 0.85e1 ? 0.162401372693885999e-1 + R * (-0.175374938574407273e-2) + pow(R - 0.825e1, 2) * 0.800066278379557246e-3 + pow(R - 0.825e1, 3) * (-0.225277885613063913e-3) : (R < 0.875e1 ? 0.132453763919073205e-1 + R * (-0.139595585010674362e-2) + pow(R - 0.85e1, 2) * 0.631107864169759298e-3 + pow(R - 0.85e1, 3) * (-0.334586558971140910e-3) : (R < 0.90e1 ? 0.110674268860033384e-1 + R * (-0.114313689782895300e-2) + pow(R - 0.875e1, 2) * 0.380167944941403602e-3 + pow(R - 0.875e1, 3) * 0.259353918976319726e-4 : (R < 0.925e1 ? 0.933707089699700732e-2 + R * (-0.948190039377445112e-3) + pow(R - 0.90e1, 2) * 0.399619488864627582e-3 + pow(R - 0.90e1, 3) * (-0.205284071019389393e-3) : (R < 0.95e1 ? 0.786663897611671742e-2 + R * (-0.786871058261266656e-3) + pow(R - 0.925e1, 2) * 0.245656435600085537e-3 + pow(R - 0.925e1, 3) * 0.112114114579925874e-3 : (R < 0.100e2 ? 0.651717295068613561e-2 + R * (-0.643021443977487934e-3) + pow(R - 0.95e1, 2) * 0.329742021535029946e-3 + pow(R - 0.95e1, 3) * (-0.235794231601083593e-4) : (R < 0.105e2 ? 0.347608648652539222e-2 + R * (-0.330963989812539205e-3) + pow(R - 0.100e2, 2) * 0.294372886794867404e-3 + pow(R - 0.100e2, 3) * (-0.101049426339577846e-3) : (R < 0.110e2 ? 0.124189745098972977e-2 + R * (-0.112378172772355220e-3) + pow(R - 0.105e2, 2) * 0.142798747285500621e-3 + pow(R - 0.105e2, 3) * (-0.830761255615803274e-4) : (R < 0.120e2 ? 0.381804437858438328e-3 + R * (-0.318865196580398516e-4) + pow(R - 0.110e2, 2) * 0.181845589431301129e-4 + pow(R - 0.110e2, 3) * (-0.544296478509025885e-5) : (R < 0.140e2 ? 0.154063349644604873e-3 + R * (-0.118462961270504065e-4) + pow(R - 0.120e2, 2) * 0.185566458785933530e-5 + pow(R - 0.120e2, 3) * 0.233921486582933908e-6 : (R < 0.160e2 ? 0.201413532246500119e-4 + R * (-0.161657993661785820e-5) + pow(R - 0.140e2, 2) * 0.325919350735693875e-5 + pow(R - 0.140e2, 3) * (-0.829375078149004708e-6) : (R < 0.180e2 ? -0.228052428373494342e-4 + R * 0.146769315502183968e-5 + pow(R - 0.160e2, 2) * (-0.171705696153708971e-5) + pow(R - 0.160e2, 3) * 0.389762526013084881e-6 : (R < 0.200e2 ? 0.128840251364509980e-4 + R * (-0.723384378969499838e-6) + pow(R - 0.180e2, 2) * 0.621518194541419684e-6 + pow(R - 0.180e2, 3) * (-0.120985786503334863e-6) : (R < 0.250e2 ? -0.628265517992320931e-5 + R * 0.310858961156160485e-6 + pow(R - 0.200e2, 2) * (-0.104396524478589496e-6) + pow(R - 0.200e2, 3) * 0.885890350867148073e-8 : 0.170348168758433609e-5 + R * (-0.686885204793734456e-7) + pow(R - 0.250e2, 2) * 0.284870281514827118e-7 + pow(R - 0.250e2, 3) * (-0.287067151112160467e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2095230618e2 * (R - 0.300e2) * (R - 0.250e2) - 0.2234912384e3 * R - 0.1313012967e5 + 0.1117456192e2 * R * R + 0.75000e3 * (-0.4097343063e-1 * R + 0.1694810590e1) * R) * pow(R, -6));
}

static double radcoeff_3_6_6_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.844210116600002530e-1 + R * (-0.555111512312578270e-16) + pow(R - 0.475e1, 2) * (-0.194290283741185954e1) + pow(R - 0.475e1, 3) * 0.395278598900743816e1 : (R < 0.525e1 ? 0.117627209423517542e1 + R * (-0.230304045767035087e0) + pow(R - 0.50e1, 2) * 0.102168665434371930e1 + pow(R - 0.50e1, 3) * (-0.129662000606231542e1) : (R < 0.55e1 ? -0.185699326647737001e0 + R * 0.374230302681403809e-1 + pow(R - 0.525e1, 2) * 0.492216497969826458e-1 + pow(R - 0.525e1, 3) * (-0.172934583638176625e0) : (R < 0.575e1 ? -0.142345823969604712e0 + R * 0.296086207344735813e-1 + pow(R - 0.55e1, 2) * (-0.804792879316498372e-1) + pow(R - 0.55e1, 3) * (-0.657110578497795573e-2) : (R < 0.60e1 ? 0.909839732346995611e-1 + R * (-0.118631055660347075e-1) + pow(R - 0.575e1, 2) * (-0.854076172703833042e-1) + pow(R - 0.575e1, 3) * 0.115193317178088520e0 : (R < 0.625e1 ? 0.214076262722008553e0 + R * (-0.329681672303347578e-1) + pow(R - 0.60e1, 2) * 0.987370613183095013e-3 + pow(R - 0.60e1, 3) * 0.397272523686237958e-1 : (R < 0.65e1 ? 0.165117804667914037e0 + R * (-0.250256221046262460e-1) + pow(R - 0.625e1, 2) * 0.307828098896509444e-1 + pow(R - 0.625e1, 3) * (-0.160329944925838297e-1) : (R < 0.675e1 ? 0.862872946435415678e-1 + R * (-0.126404036271602419e-1) + pow(R - 0.65e1, 2) * 0.187580640202130722e-1 + pow(R - 0.65e1, 3) * (-0.136015472302884154e-1) : (R < 0.70e1 ? 0.411531416144462897e-1 + R * (-0.581166172273278429e-2) + pow(R - 0.675e1, 2) * 0.855690359749675979e-2 + pow(R - 0.675e1, 3) * (-0.654403418626248352e-2) : (R < 0.725e1 ? 0.202255798331603467e-1 + R * (-0.276021633390862060e-2) + pow(R - 0.70e1, 2) * 0.364887795779989628e-2 + pow(R - 0.70e1, 3) * (-0.249921839906165361e-2) : (R < 0.75e1 ? 0.105847768322373109e-1 + R * (-0.140438080483273257e-2) + pow(R - 0.725e1, 2) * 0.177446415850365607e-2 + pow(R - 0.725e1, 3) * (-0.115623393269090281e-2) : (R < 0.775e1 ? 0.564932806040336580e-2 + R * (-0.733942587960448789e-3) + pow(R - 0.75e1, 2) * 0.907288708985478959e-3 + pow(R - 0.75e1, 3) * (-0.547274465374735213e-3) : (R < 0.80e1 ? 0.297699690137340949e-2 + R * (-0.382912195725472189e-3) + pow(R - 0.775e1, 2) * 0.496832859954427549e-3 + pow(R - 0.775e1, 3) * (-0.197722991730154868e-3) : (R < 0.825e1 ? 0.131421258115129976e-2 + R * (-0.171568826697662482e-3) + pow(R - 0.80e1, 2) * 0.348540616156811384e-3 + pow(R - 0.80e1, 3) * (-0.276414768344645557e-3) : (R < 0.85e1 ? 0.321526442041992350e-3 + R * (-0.491262876838778628e-4) + pow(R - 0.825e1, 2) * 0.141229539898327203e-3 + pow(R - 0.825e1, 3) * 0.350727851087370208e-4 : (R < 0.875e1 ? -0.325221495281978457e-3 + R * 0.280646294731739376e-4 + pow(R - 0.85e1, 2) * 0.167534128729879972e-3 + pow(R - 0.85e1, 3) * (-0.125919821690302766e-3) : (R < 0.90e1 ? -0.843092715182843649e-3 + R * 0.882217272711821414e-4 + pow(R - 0.875e1, 2) * 0.730942624621528975e-4 + pow(R - 0.875e1, 3) * (-0.116665769707525861e-3) : (R < 0.925e1 ? -0.972397921128877337e-3 + R * 0.102894026682097484e-3 + pow(R - 0.90e1, 2) * (-0.144050648184915032e-4) + pow(R - 0.90e1, 3) * 0.245104038804061977e-4 : (R < 0.95e1 ? -0.948802069563958218e-3 + R * 0.100287195000427911e-3 + pow(R - 0.925e1, 2) * 0.397773809181314766e-5 + pow(R - 0.925e1, 3) * (-0.175852682294099199e-3) : (R < 0.100e2 ? -0.656957824693813245e-3 + R * 0.693036861161908639e-4 + pow(R - 0.95e1, 2) * (-0.127911773628761261e-3) + pow(R - 0.95e1, 3) * 0.609542138327590755e-4 : (R < 0.105e2 ? 0.140644641170010955e-3 + R * (-0.128924271380010956e-4) + pow(R - 0.100e2, 2) * (-0.364804528796226478e-4) + pow(R - 0.100e2, 3) * 0.334527707112496666e-4 : (R < 0.110e2 ? 0.255310310177458066e-3 + R * (-0.242833019841864850e-4) + pow(R - 0.105e2, 2) * 0.136987031872518572e-4 + pow(R - 0.105e2, 3) * 0.746951833024222306e-5 : (R < 0.120e2 ? 0.473594144817825733e-4 + R * (-0.498246004925296085e-5) + pow(R - 0.110e2, 2) * 0.249029806826151927e-4 + pow(R - 0.110e2, 3) * (-0.112357925653622303e-4) : (R < 0.140e2 ? -0.132156401430688766e-3 + R * 0.111161236198907301e-4 + pow(R - 0.120e2, 2) * (-0.880439701347150343e-5) + pow(R - 0.120e2, 3) * 0.181206483226306884e-5 : (R < 0.160e2 ? 0.357418701077383578e-4 + R * (-0.235668644683845418e-5) + pow(R - 0.140e2, 2) * 0.206799198010691087e-5 + pow(R - 0.140e2, 3) * (-0.515736085968841920e-6) : (R < 0.180e2 ? 0.655779111959061977e-5 + R * (-0.273551558036913747e-6) + pow(R - 0.160e2, 2) * (-0.102642453570614065e-5) + pow(R - 0.160e2, 3) * 0.293101020112298773e-6 : (R < 0.200e2 ? 0.153896473639500381e-4 + R * (-0.862037459513891080e-6) + pow(R - 0.180e2, 2) * 0.732181584967651985e-6 + pow(R - 0.180e2, 3) * (-0.142297648430353236e-6) : (R < 0.250e2 ? -0.724309865774956471e-5 + R * 0.359117099192478246e-6 + pow(R - 0.200e2, 2) * (-0.121604305614467375e-6) + pow(R - 0.200e2, 3) * 0.103402976439943462e-7 : 0.202234922851548938e-5 + R * (-0.814036336526195606e-7) + pow(R - 0.250e2, 2) * 0.335001590454478207e-7 + pow(R - 0.250e2, 3) * (-0.337040116938478225e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1944213565e2 * (R - 0.300e2) * (R - 0.250e2) - 0.2073827840e3 * R - 0.1218375100e5 + 0.1036913920e2 * R * R + 0.75000e3 * (-0.3802020077e-1 * R + 0.1572654082e1) * R) * pow(R, -6));
}

static double radcoeff_3_6_7_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.139040436999999995e1 + pow(R - 0.475e1, 2) * (-0.989958681345945557e1) + pow(R - 0.475e1, 3) * 0.265008185498378204e2 : (R < 0.525e1 ? -0.169060361282431981e1 + R * 0.191100713648639786e-1 + pow(R - 0.50e1, 2) * 0.997602709891891060e1 + pow(R - 0.50e1, 3) * (-0.161894078415134608e2) : (R < 0.55e1 ? -0.115706842073378606e2 + R * 0.197160965054054493e1 + pow(R - 0.525e1, 2) * (-0.216602878221618678e1) + pow(R - 0.525e1, 3) * 0.340158829781603034e1 : (R < 0.575e1 ? -0.920421997010126702e1 + R * 0.152639306527295737e1 + pow(R - 0.55e1, 2) * 0.385162441145836254e0 + pow(R - 0.55e1, 3) * (-0.206512955455066383e1) : (R < 0.60e1 ? -0.809328918411384812e1 + R * 0.133176249436762584e1 + pow(R - 0.575e1, 2) * (-0.116368472476716156e1) + pow(R - 0.575e1, 3) * 0.191811750786632068e0 : (R < 0.625e1 ? -0.488775646613923165e1 + R * 0.785884835256538627e0 + pow(R - 0.60e1, 2) * (-0.101982591167718750e1) + pow(R - 0.60e1, 3) * 0.414069937004132971e0 : (R < 0.65e1 ? -0.224330797632887391e1 + R * 0.353609992606219836e0 + pow(R - 0.625e1, 2) * (-0.709273458924087774e0) + pow(R - 0.625e1, 3) * 0.531420825676833575e0 : (R < 0.675e1 ? -0.621864506900784542e0 + R * 0.986146679585822444e-1 + pow(R - 0.65e1, 2) * (-0.310707839666462593e0) + pow(R - 0.65e1, 3) * 0.309178253408534387e0 : (R < 0.70e1 ? 0.208823952337047793e-1 + R * 0.123167063945114376e-2 + pow(R - 0.675e1, 2) * (-0.788241496100617889e-1) + pow(R - 0.675e1, 3) * 0.913629293290288413e-1 : (R < 0.725e1 ? 0.173354110544707896e0 + R * (-0.210498549163868412e-1) + pow(R - 0.70e1, 2) * (-0.103019526132901527e-1) + pow(R - 0.70e1, 3) * 0.204711556753500445e-1 : (R < 0.75e1 ? 0.182546701290802416e0 + R * (-0.223624895339037816e-1) + pow(R - 0.725e1, 2) * 0.505141414322238073e-2 + pow(R - 0.725e1, 3) * 0.515600316957100929e-2 : (R < 0.775e1 ? 0.156749544729985230e0 + R * (-0.188700318679980300e-1) + pow(R - 0.75e1, 2) * 0.891841652040063770e-2 + pow(R - 0.75e1, 3) * (-0.551896673634112212e-3) : (R < 0.80e1 ? 0.123541433214306828e0 + R * (-0.145143042341041063e-1) + pow(R - 0.775e1, 2) * 0.850449401517505352e-2 + pow(R - 0.775e1, 3) * (-0.213577289103453281e-2) : (R < 0.825e1 ? 0.932252759146844356e-1 + R * (-0.106625146435855543e-1) + pow(R - 0.80e1, 2) * 0.690266434689915370e-2 + pow(R - 0.80e1, 3) * (-0.242830136222776114e-2) : (R < 0.85e1 ? 0.689015384663178715e-1 + R * (-0.766648897555368206e-2) + pow(R - 0.825e1, 2) * 0.508143832522833273e-2 + pow(R - 0.825e1, 3) * (-0.197662524405441565e-2) : (R < 0.875e1 ? 0.507423771926976061e-1 + R * (-0.549638704619971868e-2) + pow(R - 0.85e1, 2) * 0.359896939218752078e-2 + pow(R - 0.85e1, 3) * (-0.144399375755458262e-2) : (R < 0.90e1 ? 0.375683115449151270e-1 + R * (-0.396765117964744275e-2) + pow(R - 0.875e1, 2) * 0.251597407402158382e-2 + pow(R - 0.875e1, 3) * (-0.981190893727244828e-3) : (R < 0.925e1 ? 0.280441051168945840e-1 + R * (-0.289363743521050924e-2) + pow(R - 0.90e1, 2) * 0.178008090372615019e-2 + pow(R - 0.90e1, 3) * (-0.558365355536456298e-3) : (R < 0.95e1 ? 0.208821764484723102e-1 + R * (-0.210829048751051988e-2) + pow(R - 0.925e1, 2) * 0.136130688707380792e-2 + pow(R - 0.925e1, 3) * (-0.506364669726914367e-3) : (R < 0.100e2 ? 0.153951005353004152e-1 + R * (-0.152258041954741216e-2) + pow(R - 0.95e1, 2) * 0.981533384778622087e-3 + pow(R - 0.95e1, 3) * (-0.224475613767595363e-3) : (R < 0.105e2 ? 0.748065768524486599e-2 + R * (-0.709403745094486595e-3) + pow(R - 0.100e2, 2) * 0.644819964127229042e-3 + pow(R - 0.100e2, 3) * (-0.254558561476511550e-3) : (R < 0.110e2 ? 0.284408190438373374e-2 + R * (-0.255502702074641324e-3) + pow(R - 0.105e2, 2) * 0.262982121912461663e-3 + pow(R - 0.105e2, 3) * (-0.143006035926357964e-3) : (R < 0.120e2 ? 0.117894813572642964e-2 + R * (-0.997751071069481608e-4) + pow(R - 0.110e2, 2) * 0.484730680229246902e-4 + pow(R - 0.110e2, 3) * (-0.101182500859765251e-4) : (R < 0.140e2 ? 0.418206324208340364e-3 + R * (-0.331837213190283624e-4) + pow(R - 0.120e2, 2) * 0.181183177649951115e-4 + pow(R - 0.120e2, 3) * (-0.322269438024046378e-5) : (R < 0.160e2 ? -0.831509873123114001e-5 + R * 0.617217178066510031e-6 + pow(R - 0.140e2, 2) * (-0.121784851644767304e-5) + pow(R - 0.140e2, 3) * 0.327312403707209002e-6 : (R < 0.180e2 ? 0.453032997350278081e-5 + R * (-0.326428043237673779e-6) + pow(R - 0.160e2, 2) * 0.746025905795580975e-6 + pow(R - 0.160e2, 3) * (-0.186691663125872044e-6) : (R < 0.200e2 ? -0.736756569041534201e-5 + R * 0.417375622434185697e-6 + pow(R - 0.180e2, 2) * (-0.374124072959651290e-6) + pow(R - 0.180e2, 3) * 0.732495210087792122e-7 : (R < 0.250e2 ? 0.407197498048137520e-5 + R * (-0.200126417299068731e-6) + pow(R - 0.200e2, 2) * 0.653730530930240628e-7 + pow(R - 0.200e2, 3) * (-0.550861479544206313e-8) : -0.996886073425430051e-6 + R * 0.404580039730171950e-7 + pow(R - 0.250e2, 2) * (-0.172561688386068783e-7) + pow(R - 0.250e2, 3) * 0.174891782640068781e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2222292304e2 * (R - 0.300e2) * (R - 0.250e2) + 0.2370444704e3 * R + 0.1392637426e5 - 0.1185222352e2 * R * R + 0.75000e3 * (0.4345817507e-1 * R - 0.1797588454e1) * R) * pow(R, -6));
}

static double radcoeff_3_6_7_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.953392274300000064e0 + pow(R - 0.475e1, 2) * 0.121663310252241406e2 + pow(R - 0.475e1, 3) * (-0.289007426800965632e2) : (R < 0.525e1 ? -0.205916744146982644e1 + R * 0.664276260093965343e0 + pow(R - 0.50e1, 2) * (-0.950922598484828185e1) + pow(R - 0.50e1, 3) * 0.143317132178896820e2 : (R < 0.55e1 ? 0.842437696487326448e1 + R * (-0.140314050397585977e1) + pow(R - 0.525e1, 2) * 0.123955892856898031e1 + pow(R - 0.525e1, 3) * (-0.238938797066216368e1) : (R < 0.575e1 ? 0.751978450204788995e1 + R * (-0.123137128419052555e1) + pow(R - 0.55e1, 2) * (-0.552482049427642674e0) + pow(R - 0.55e1, 3) * 0.182571796075897774e1 : (R < 0.60e1 ? 0.713381493275672174e1 + R * (-0.116529019126203859e1) + pow(R - 0.575e1, 2) * 0.816806421141590633e0 + pow(R - 0.575e1, 3) * (-0.243145347737447892e-1) : (R < 0.625e1 ? 0.476142000766792250e1 + R * (-0.761445955961320475e0) + pow(R - 0.60e1, 2) * 0.798570520061282041e0 + pow(R - 0.60e1, 3) * (-0.148258452064000512e0) : (R < 0.65e1 ? 0.248722162513924694e1 + R * (-0.389959155692679471e0) + pow(R - 0.625e1, 2) * 0.687376681013281643e0 + pow(R - 0.625e1, 3) * (-0.451996805130255197e0) : (R < 0.675e1 ? 0.840017110581749438e0 + R * (-0.131020216147961444e0) + pow(R - 0.65e1, 2) * 0.348379077165590245e0 + pow(R - 0.65e1, 3) * (-0.315218214774977412e0) : (R < 0.70e1 ? 0.800341859394536476e-1 + R * (-0.159340928354746135e-1) + pow(R - 0.675e1, 2) * 0.111965416084357186e0 + pow(R - 0.675e1, 3) * (-0.119607430169834911e0) : (R < 0.725e1 ? -0.149731045849019528e0 + R * 0.176222220498599355e-1 + pow(R - 0.70e1, 2) * 0.222598434569809996e-1 + pow(R - 0.70e1, 3) * (-0.327034955856829596e-1) : (R < 0.75e1 ? -0.185086415971252860e0 + R * 0.226202383560348795e-1 + pow(R - 0.725e1, 2) * (-0.226777823228122141e-2) + pow(R - 0.725e1, 3) * (-0.909098300743321243e-2) : (R < 0.775e1 ? -0.164081835495004047e0 + R * 0.197817899260005411e-1 + pow(R - 0.75e1, 2) * (-0.908601548785613160e-2) + pow(R - 0.75e1, 3) * 0.133738655415898772e-3 : (R < 0.80e1 ? -0.129633650764712893e0 + R * 0.152638581799629525e-1 + pow(R - 0.775e1, 2) * (-0.898571149629420751e-2) + pow(R - 0.775e1, 3) * 0.226410953776958000e-2 : (R < 0.825e1 ? -0.976131993431811756e-1 + R * 0.111955229701476474e-1 + pow(R - 0.80e1, 2) * (-0.728762934296702230e-2) + pow(R - 0.80e1, 3) * 0.257600508150573285e-2 : (R < 0.85e1 ? -0.719517129184332888e-1 + R * 0.803470925144646013e-2 + pow(R - 0.825e1, 2) * (-0.535562553183772244e-2) + pow(R - 0.825e1, 3) * 0.199136460020751978e-2 : (R < 0.875e1 ? -0.526676532635653311e-1 + R * 0.573027734806650941e-2 + pow(R - 0.85e1, 2) * (-0.386210208168208261e-2) + pow(R - 0.85e1, 3) * 0.163241894966418633e-2 : (R < 0.90e1 ? -0.386650188295156530e-1 + R * 0.410530486028750329e-2 + pow(R - 0.875e1, 2) * (-0.263778786943394275e-2) + pow(R - 0.875e1, 3) * 0.867194353135720269e-3 : (R < 0.925e1 ? -0.284096757180513117e-1 + R * 0.294900986678347903e-2 + pow(R - 0.90e1, 2) * (-0.198739210458215255e-2) + pow(R - 0.90e1, 3) * 0.793131573792941851e-3 : (R < 0.95e1 ? -0.207053941333518628e-1 + R * 0.210402598457857951e-2 + pow(R - 0.925e1, 2) * (-0.139254342423744616e-2) + pow(R - 0.925e1, 3) * 0.392637918092514978e-3 : (R < 0.100e2 ? -0.148710981563709276e-1 + R * 0.148137388210220293e-2 + pow(R - 0.95e1, 2) * (-0.109806498566805992e-2) + pow(R - 0.95e1, 3) * 0.316030015727308258e-3 : (R < 0.105e2 ? -0.649568591209624246e-2 + R * 0.620331408229624266e-3 + pow(R - 0.100e2, 2) * (-0.624019962077097530e-3) + pow(R - 0.100e2, 3) * 0.268684063235697919e-3 : (R < 0.110e2 ? -0.218178279088265207e-2 + R * 0.197824493579300189e-3 + pow(R - 0.105e2, 2) * (-0.220993867223550624e-3) + pow(R - 0.105e2, 3) * 0.121997035329900360e-3 : (R < 0.120e2 ? -0.797324630284923508e-3 + R * 0.683284028531748645e-4 + pow(R - 0.110e2, 2) * (-0.379983142287000715e-4) + pow(R - 0.110e2, 3) * 0.921976029552520943e-5 : (R < 0.140e2 ? -0.246055013366204317e-3 + R * 0.199910552823503584e-4 + pow(R - 0.120e2, 2) * (-0.103390333421244398e-4) + pow(R - 0.120e2, 3) * 0.163409418922463075e-5 : (R < 0.160e2 ? 0.301196501463256689e-4 + R * (-0.175594781545183354e-5) + pow(R - 0.140e2, 2) * (-0.534468206776655307e-6) + pow(R - 0.140e2, 3) * 0.190456569376286043e-6 : (R < 0.180e2 ? 0.271437337876883546e-4 + R * (-0.160834181004302225e-5) + pow(R - 0.160e2, 2) * 0.608271209481060952e-6 + pow(R - 0.160e2, 3) * (-0.808460574797749227e-7) : (R < 0.200e2 ? 0.259727149866939515e-5 + R * (-0.145409661876077513e-6) + pow(R - 0.180e2, 2) * 0.123194864602411336e-6 + pow(R - 0.180e2, 3) * (-0.239340751196862801e-7) : (R < 0.250e2 ? -0.121283278334664874e-5 + R * 0.601608950973324317e-7 + pow(R - 0.200e2, 2) * (-0.204095861157063508e-7) + pow(R - 0.200e2, 3) * 0.173626942884797314e-8 : 0.340852592203327629e-6 + R * (-0.137147588961331060e-7) + pow(R - 0.250e2, 2) * 0.563445531701324296e-8 + pow(R - 0.250e2, 3) * (-0.566671540357324244e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3076762048e1 * (R - 0.300e2) * (R - 0.250e2) - 0.3281880704e2 * R - 0.1928098672e4 + 0.1640940352e1 * R * R + 0.75000e3 * (-0.601676940e-2 * R + 0.2488752995e0) * R) * pow(R, -6));
}

static double radcoeff_3_6_8_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.145363805599999993e-1 + pow(R - 0.475e1, 2) * (-0.110086872538916314e1) + pow(R - 0.475e1, 3) * 0.237072196779665223e1 : (R < 0.525e1 ? 0.483321823513546134e0 + R * (-0.105923993732709221e0) + pow(R - 0.50e1, 2) * 0.677172750458326256e0 + pow(R - 0.50e1, 3) * (-0.110690382338995752e1) : (R < 0.55e1 ? -0.179620270626893563e0 + R * 0.251179146108368688e-1 + pow(R - 0.525e1, 2) * (-0.153005117084141884e0) + pow(R - 0.525e1, 3) * 0.330545605443177570e0 : (R < 0.575e1 ? -0.104129398991489527e0 + R * 0.105926570893617317e-1 + pow(R - 0.55e1, 2) * 0.949040869982413077e-1 + pow(R - 0.55e1, 3) * (-0.272865267027529064e-1) : (R < 0.60e1 ? -0.342055209052368192e0 + R * 0.529284768317162119e-1 + pow(R - 0.575e1, 2) * 0.744391919711766270e-1 + pow(R - 0.575e1, 3) * (-0.149168914312165918e0) : (R < 0.625e1 ? -0.395236071152640478e0 + R * 0.621789013837734106e-1 + pow(R - 0.60e1, 2) * (-0.374374937629478183e-1) + pow(R - 0.60e1, 3) * (-0.221789424485832609e-1) : (R < 0.65e1 ? -0.254939344298438397e0 + R * 0.393016027931901435e-1 + pow(R - 0.625e1, 2) * (-0.540717005993852640e-1) + pow(R - 0.625e1, 3) * 0.319234773224987903e-1 : (R < 0.675e1 ? -0.120993732291529210e0 + R * 0.182514044914660334e-1 + pow(R - 0.65e1, 2) * (-0.301290926075111695e-1) + pow(R - 0.65e1, 3) * 0.210961586625881270e-1 : (R < 0.70e1 ? -0.475613113576836347e-1 + R * 0.714238793694572417e-2 + pow(R - 0.675e1, 2) * (-0.143069736105700760e-1) + pow(R - 0.675e1, 3) * 0.109272482831487220e-1 : (R < 0.725e1 ? -0.125523646882575012e-1 + R * 0.203776018475107165e-2 + pow(R - 0.70e1, 2) * (-0.611153739820853494e-2) + pow(R - 0.70e1, 3) * 0.473247463681699451e-2 : (R < 0.75e1 ? 0.286072449963756898e-2 + R * (-0.130669519950009512e-3) + pow(R - 0.725e1, 2) * (-0.256218142059578885e-2) + pow(R - 0.725e1, 3) * 0.223388676958330640e-2 : (R < 0.775e1 ? 0.920226969913275419e-2 + R * (-0.992906460951033850e-3) + pow(R - 0.75e1, 2) * (-0.886766343408308829e-3) + pow(R - 0.75e1, 3) * 0.114885489284977625e-2 : (R < 0.80e1 ? 0.109315874749053785e-1 + R * (-0.122087934024585516e-2) + pow(R - 0.775e1, 2) * (-0.251251737709765044e-4) + pow(R - 0.775e1, 3) * 0.459093403017588747e-3 : (R < 0.825e1 ? 0.103490510765243647e-1 + R * (-0.114736191406554565e-2) + pow(R - 0.80e1, 2) * 0.319194878492215029e-3 + pow(R - 0.80e1, 3) * (-0.519628089201289549e-4) : (R < 0.85e1 ? 0.913188993380868730e-2 + R * (-0.997507501491962231e-3) + pow(R - 0.825e1, 2) * 0.280222771802118311e-3 + pow(R - 0.825e1, 3) * 0.226253243862921925e-3 : (R < 0.875e1 ? 0.760140117641614453e-2 + R * (-0.814973632366605238e-3) + pow(R - 0.85e1, 2) * 0.449912704699309768e-3 + pow(R - 0.85e1, 3) * (-0.235181027331555446e-3) : (R < 0.90e1 ? 0.604332180681414841e-2 + R * (-0.634113722641616961e-3) + pow(R - 0.875e1, 2) * 0.273526934200643177e-3 + pow(R - 0.875e1, 3) * 0.594582226329915496e-5 : (R < 0.925e1 ? 0.481960536470234149e-2 + R * (-0.496235413866926768e-3) + pow(R - 0.90e1, 2) * 0.277986300898117543e-3 + pow(R - 0.90e1, 3) * 0.614160486783576055e-4 : (R < 0.95e1 ? 0.344573403318875317e-2 + R * (-0.345726754290676011e-3) + pow(R - 0.925e1, 2) * 0.324048337406885754e-3 + pow(R - 0.925e1, 3) * (-0.171579015376726793e-3) : (R < 0.100e2 ? 0.222970165061850889e-2 + R * (-0.215873650970369350e-3) + pow(R - 0.95e1, 2) * 0.195364075874340646e-3 + pow(R - 0.95e1, 3) * (-0.783496542672038553e-4) : (R < 0.105e2 ? 0.902730611064316143e-3 + R * (-0.792718157964316088e-4) + pow(R - 0.100e2, 2) * 0.778395944735348495e-4 + pow(R - 0.100e2, 3) * (-0.628042328013432837e-4) : (R < 0.110e2 ? 0.591607571920994358e-3 + R * (-0.485353959239042255e-4) + pow(R - 0.105e2, 2) * (-0.163667547284800896e-4) + pow(R - 0.105e2, 3) * 0.156419628325770897e-4 : (R < 0.120e2 ? 0.640459237237466558e-3 + R * (-0.531706785279514979e-4) + pow(R - 0.110e2, 2) * 0.709618952038554570e-5 + pow(R - 0.110e2, 3) * 0.411409700756595350e-5 : (R < 0.140e2 ? 0.333253483003790544e-3 + R * (-0.266360084644825469e-4) + pow(R - 0.120e2, 2) * 0.194384805430834062e-4 + pow(R - 0.120e2, 3) * (-0.404683815517106632e-5) : (R < 0.160e2 ? -0.300534004091759781e-4 + R * 0.255585584579828385e-5 + pow(R - 0.140e2, 2) * (-0.484254838794299001e-5) + pow(R - 0.140e2, 3) * 0.115843761852192379e-5 : (R < 0.180e2 ? 0.473469810591694261e-4 + R * (-0.291308628371058908e-5) + pow(R - 0.160e2, 2) * 0.210807732318855355e-5 + pow(R - 0.160e2, 3) * (-0.418569246679129457e-6) : (R < 0.200e2 ? -0.893987360839327626e-5 + R * 0.496392048894070888e-6 + pow(R - 0.180e2, 2) * (-0.403338156886223512e-6) + pow(R - 0.180e2, 3) * 0.778852257445940213e-7 : (R < 0.250e2 ? 0.364445394221389531e-5 + R * (-0.182337869715694774e-6) + pow(R - 0.200e2, 2) * 0.639731975813406682e-7 + pow(R - 0.200e2, 3) * (-0.548656121164034252e-8) : -0.114803339321715486e-5 + R * 0.459020152246861941e-7 + pow(R - 0.250e2, 2) * (-0.183252205932644779e-7) + pow(R - 0.250e2, 3) * 0.183174923526544765e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.7371046720e0 * (R - 0.300e2) * (R - 0.250e2) - 0.7862423160e1 * R - 0.4618706376e3 + 0.3931211580e0 * R * R + 0.75000e3 * (-0.1441355252e-2 * R + 0.5961848095e-1) * R) * pow(R, -6));
}

static double radcoeff_3_6_9_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.348153978700000444e1 + R * (-0.888178419700125232e-15) + pow(R - 0.475e1, 2) * (-0.498674487806478268e2) + pow(R - 0.475e1, 3) * 0.906593270265913134e2 : (R < 0.525e1 ? 0.414568790871902024e2 + R * (-0.793510057283804038e1) + pow(R - 0.50e1, 2) * 0.181270464892956653e2 + pow(R - 0.50e1, 3) * (-0.234995874797740214e2) : (R < 0.55e1 ? 0.177715478293011451e2 + R * (-0.327774998064783674e1) + pow(R - 0.525e1, 2) * 0.502355879465148036e0 + pow(R - 0.525e1, 3) * 0.403162733410479657e1 : (R < 0.575e1 ? 0.123268448920383733e2 + R * (-0.227064191577061347e1) + pow(R - 0.55e1, 2) * 0.352607638004374557e1 + pow(R - 0.55e1, 3) * (-0.221682924224516675e1) : (R < 0.60e1 ? 0.476513614305082900e1 + R * (-0.923259208669709341e0) + pow(R - 0.575e1, 2) * 0.186345444835987051e1 + pow(R - 0.575e1, 3) * (-0.331225782724133389e0) : (R < 0.625e1 ? -0.341307696296705765e0 + R * (-0.536368187505490424e-1) + pow(R - 0.60e1, 2) * 0.161503511131677047e1 + pow(R - 0.60e1, 3) * (-0.154281681085829714e1) : (R < 0.65e1 ? -0.350347078714940929e1 + R * 0.464602584871905477e0 + pow(R - 0.625e1, 2) * 0.457922503173047613e0 + pow(R - 0.625e1, 3) * (-0.658477956242678131e0) : (R < 0.675e1 ? -0.417086747490902710e1 + R * 0.570099219662927204e0 + pow(R - 0.65e1, 2) * (-0.359359640089609925e-1) + pow(R - 0.65e1, 3) * (-0.318758781770990762e0) : (R < 0.70e1 ? -0.365338111691560474e1 + R * 0.492363966076385884e0 + pow(R - 0.675e1, 2) * (-0.275005050337204071e0) + pow(R - 0.675e1, 3) * 0.253323985266421144e-1 : (R < 0.725e1 ? -0.274090421072070445e1 + R * 0.359611265631529231e0 + pow(R - 0.70e1, 2) * (-0.256005751442222484e0) + pow(R - 0.70e1, 3) * 0.862455268644223561e-1 : (R < 0.75e1 ? -0.194477614793185438e1 + R * 0.247779426197497155e0 + pow(R - 0.725e1, 2) * (-0.191321606293905710e0) + pow(R - 0.725e1, 3) * 0.761517135356683667e-1 : (R < 0.775e1 ? -0.134517620135861593e1 + R * 0.166397069338482112e0 + pow(R - 0.75e1, 2) * (-0.134207821142154432e0) + pow(R - 0.75e1, 3) * 0.575821085929040591e-1 : (R < 0.80e1 ? -0.916283164356451518e0 + R * 0.110089804128574387e0 + pow(R - 0.775e1, 2) * (-0.910212396974763860e-1) + pow(R - 0.775e1, 3) * 0.405254879327150985e-1 : (R < 0.825e1 ? -0.618042054197762258e0 + R * 0.721777132672202781e-1 + pow(R - 0.80e1, 2) * (-0.606271237479400621e-1) + pow(R - 0.80e1, 3) * 0.275987895962358301e-1 : (R < 0.85e1 ? -0.414005010540991869e0 + R * 0.470389244425444691e-1 + pow(R - 0.825e1, 2) * (-0.399280315507631878e-1) + pow(R - 0.825e1, 3) * 0.185233856823412285e-1 : (R < 0.875e1 ? -0.276038596452115814e0 + R * 0.305480434826018582e-1 + pow(R - 0.85e1, 2) * (-0.260354922890072664e-1) + pow(R - 0.85e1, 3) * 0.122882372743993752e-1 : (R < 0.90e1 ? -0.183728921526670919e0 + R * 0.198343418270481055e-1 + pow(R - 0.875e1, 2) * (-0.168193143332077341e-1) + pow(R - 0.875e1, 3) * 0.735934618006125509e-2 : (R < 0.925e1 ? -0.121397121067851527e0 + R * 0.128045620692057247e-1 + pow(R - 0.90e1, 2) * (-0.112998046981617924e-1) + pow(R - 0.90e1, 3) * 0.539067170135557570e-2 : (R < 0.95e1 ? -0.791069791191932464e-1 + R * 0.816541066412899974e-2 + pow(R - 0.925e1, 2) * (-0.725680092214511015e-2) + pow(R - 0.925e1, 3) * 0.316519050251644687e-2 : (R < 0.100e2 ? -0.506792642776436458e-1 + R * 0.513048342227827824e-2 + pow(R - 0.95e1, 2) * (-0.488290804525777500e-2) + pow(R - 0.95e1, 3) * 0.195357448140243617e-2 : (R < 0.105e2 ? -0.174785226372233017e-1 + R * 0.171275623807233025e-2 + pow(R - 0.100e2, 2) * (-0.195254632315412053e-2) + pow(R - 0.100e2, 3) * 0.853744448418919757e-3 : (R < 0.110e2 ? -0.408144230014019765e-2 + R * 0.400518251232399782e-3 + pow(R - 0.105e2, 2) * (-0.671929650525740843e-3) + pow(R - 0.105e2, 3) * 0.391851999321882378e-3 : (R < 0.120e2 ? -0.419960514787788499e-4 + R * 0.224776001980708041e-4 + pow(R - 0.110e2, 2) * (-0.841516515429172485e-4) + pow(R - 0.110e2, 3) * 0.271998361448464441e-4 : (R < 0.140e2 ? 0.941497668938692323e-3 + R * (-0.642261944532243606e-4) + pow(R - 0.120e2, 2) * (-0.255214310837792046e-5) + pow(R - 0.120e2, 3) * 0.295719256749505102e-5 : (R < 0.160e2 ? 0.601058299765135908e-3 + R * (-0.389484560767954234e-4) + pow(R - 0.140e2, 2) * 0.151910122965923882e-4 + pow(R - 0.140e2, 3) * (-0.265946836034733656e-5) : (R < 0.180e2 ? 0.178939740273502683e-3 + R * (-0.100980272145939179e-4) + pow(R - 0.160e2, 2) * (-0.765797865491633301e-6) + pow(R - 0.160e2, 3) * 0.729049218894296276e-6 : (R < 0.200e2 ? 0.793717575965201413e-4 + R * (-0.441262804982889660e-5) + pow(R - 0.180e2, 2) * 0.360849744787414436e-5 + pow(R - 0.180e2, 3) * (-0.697469314142347868e-6) : (R < 0.250e2 ? -0.330611675608901109e-4 + R * 0.165172997195950556e-5 + pow(R - 0.200e2, 2) * (-0.576318436979943593e-6) + pow(R - 0.200e2, 3) * 0.493624595544084945e-7 : 0.102261765393823254e-4 + R * (-0.409269931259293010e-6) + pow(R - 0.250e2, 2) * 0.164118456336183857e-6 + pow(R - 0.250e2, 3) * (-0.164207598488650509e-7))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.8501798944e1 * (R - 0.300e2) * (R - 0.250e2) - 0.9068586680e2 * R - 0.5327796762e4 + 0.4534293340e1 * R * R + 0.75000e3 * (-0.1662574622e-1 * R + 0.6877013748e0) * R) * pow(R, -6));
}

static double radcoeff_3_6_9_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.117700600799999999e1 + pow(R - 0.475e1, 2) * 0.187942257328386404e2 + pow(R - 0.475e1, 3) * (-0.326264885313545534e2) : (R < 0.525e1 ? -0.169103871169516999e2 + R * 0.327964626679034010e1 + pow(R - 0.50e1, 2) * (-0.567564066567727998e1) + pow(R - 0.50e1, 3) * 0.706972446126367338e1 : (R < 0.55e1 ? -0.921535348300285406e1 + R * 0.176739927043863898e1 + pow(R - 0.525e1, 2) * (-0.373347319729524396e0) + pow(R - 0.525e1, 3) * (-0.193040847530012560e1) : (R < 0.575e1 ? -0.625141145350306715e1 + R * 0.121877402145510327e1 + pow(R - 0.55e1, 2) * (-0.182115367620461877e1) + pow(R - 0.55e1, 3) * 0.776864691136820995e0 : (R < 0.60e1 ? -0.195483547351045006e1 + R * 0.453859312940947834e0 + pow(R - 0.575e1, 2) * (-0.123850515785200299e1) + pow(R - 0.575e1, 3) * 0.287260232352846701e0 : (R < 0.625e1 ? 0.136459410741336939e1 + R * (-0.111531972418894898e0) + pow(R - 0.60e1, 2) * (-0.102305998358736794e1) + pow(R - 0.60e1, 3) * 0.837420235451790340e0 : (R < 0.65e1 ? 0.352944815990855076e1 + R * (-0.466045670065368123e0) + pow(R - 0.625e1, 2) * (-0.394994806998525183e0) + pow(R - 0.625e1, 3) * 0.548888758639990648e0 : (R < 0.675e1 ? 0.412811231947761126e1 + R * (-0.560626431319632523e0) + pow(R - 0.65e1, 2) * 0.166717619814678343e-1 + pow(R - 0.65e1, 3) * 0.294330720388248479e0 : (R < 0.70e1 ? 0.370497370742868881e1 + R * (-0.497103540256102039e0) + pow(R - 0.675e1, 2) * 0.237419802272654218e0 + pow(R - 0.675e1, 3) * 0.180914766070154505e-1 : (R < 0.725e1 ? 0.286538075339171661e1 + R * (-0.375001487255959498e0) + pow(R - 0.70e1, 2) * 0.250988409727915807e0 + pow(R - 0.70e1, 3) * (-0.707618620163108086e-1) : (R < 0.75e1 ? 0.206632079582043415e1 + R * (-0.262775131520059879e0) + pow(R - 0.725e1, 2) * 0.197917013215682697e0 + pow(R - 0.725e1, 3) * (-0.748387485417728593e-1) : (R < 0.775e1 ? 0.144057444427850712e1 + R * (-0.177848890263800935e0) + pow(R - 0.75e1, 2) * 0.141787951809353052e0 + pow(R - 0.75e1, 3) * (-0.599809255765972466e-1) : (R < 0.80e1 ? 0.986230458521706987e0 + R * (-0.118201337904736387e0) + pow(R - 0.775e1, 2) * 0.968022576269051138e-1 + pow(R - 0.775e1, 3) * (-0.433808681918382288e-1) : (R < 0.825e1 ? 0.669465045338027864e0 + R * (-0.779341218772534872e-1) + pow(R - 0.80e1, 2) * 0.642666064830264422e-1 + pow(R - 0.80e1, 3) * (-0.291857629360499811e-1) : (R < 0.85e1 ? 0.453072655996559603e0 + R * (-0.512731491862496447e-1) + pow(R - 0.825e1, 2) * 0.423772842809889555e-1 + pow(R - 0.825e1, 3) * (-0.195158266239615560e-1) : (R < 0.875e1 ? 0.306416191960857676e0 + R * (-0.337437245377479600e-1) + pow(R - 0.85e1, 2) * 0.277404143130177867e-1 + pow(R - 0.85e1, 3) * (-0.125010656081038264e-1) : (R < 0.90e1 ? 0.207099886849137105e0 + R * (-0.222174671827585282e-1) + pow(R - 0.875e1, 2) * 0.183646151069399161e-1 + pow(R - 0.875e1, 3) * (-0.833246339162316274e-2) : (R < 0.925e1 ? 0.139537744544961262e0 + R * (-0.145974965152179167e-1) + pow(R - 0.90e1, 2) * 0.121152675632225440e-1 + pow(R - 0.90e1, 3) * (-0.530036076140349022e-2) : (R < 0.95e1 ? 0.933718313464206445e-1 + R * (-0.953368037636979915e-2) + pow(R - 0.925e1, 2) * 0.813999699216992612e-2 + pow(R - 0.925e1, 3) * (-0.377288159476291563e-2) : (R < 0.100e2 ? 0.618770895113773881e-1 + R * (-0.617109717930288283e-2) + pow(R - 0.95e1, 2) * 0.531033579609773917e-2 + pow(R - 0.95e1, 3) * (-0.204837712298394647e-2) : (R < 0.105e2 ? 0.252080967814310303e-1 + R * (-0.239704422544310307e-2) + pow(R - 0.100e2, 2) * 0.223777011162181946e-2 + pow(R - 0.100e2, 3) * (-0.958059041471226555e-3) : (R < 0.110e2 ? 0.969591070870938834e-2 + R * (-0.877818394924703661e-3) + pow(R - 0.105e2, 2) * 0.800681549414979576e-3 + pow(R - 0.105e2, 3) * (-0.376216150331144849e-3) : (R < 0.120e2 ? 0.414534027393890885e-2 + R * (-0.359298958258082667e-3) + pow(R - 0.110e2, 2) * 0.236357323918262303e-3 + pow(R - 0.110e2, 3) * (-0.614849626601796486e-4) : (R < 0.140e2 ? 0.861095516974164088e-3 + R * (-0.710391984020970063e-4) + pow(R - 0.120e2, 2) * 0.519024359377233372e-4 + pow(R - 0.120e2, 3) * (-0.101210583508374135e-4) : (R < 0.160e2 ? -0.218461815657463047e-3 + R * 0.151178451387473621e-4 + pow(R - 0.140e2, 2) * (-0.882391416730115045e-5) + pow(R - 0.140e2, 3) * 0.157956049096373452e-5 : (R < 0.180e2 ? 0.203339040430787637e-4 + R * (-0.122308563889242267e-5) + pow(R - 0.160e2, 2) * 0.653448778481257842e-6 + pow(R - 0.160e2, 3) * (-0.113585277805023230e-6) : (R < 0.200e2 ? -0.474875110201934426e-6 + R * 0.276861413723296928e-7 + pow(R - 0.180e2, 2) * (-0.280628883488816067e-7) + pow(R - 0.180e2, 3) * 0.557897551885837826e-8 : (R < 0.250e2 ? 0.363582083937923622e-6 + R * (-0.176177057968961816e-7) + pow(R - 0.200e2, 2) * 0.541096476426866452e-8 + pow(R - 0.200e2, 3) * (-0.448471413777885519e-9) : -0.690600139112261516e-7 + R * 0.285658581244904616e-8 + pow(R - 0.250e2, 2) * (-0.131610644239961847e-8) + pow(R - 0.250e2, 3) * 0.135377856781961833e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3592949760e1 * (R - 0.300e2) * (R - 0.250e2) + 0.3832492724e2 * R + 0.2251544932e4 - 0.1916246362e1 * R * R + 0.75000e3 * (0.702615182e-2 * R - 0.2906260319e0) * R) * pow(R, -6));
}

static double radcoeff_3_8_5_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.723725676699999987e0 + pow(R - 0.475e1, 2) * (-0.220916710196987474e2) + pow(R - 0.475e1, 3) * 0.459583814867949911e2 : (R < 0.525e1 ? 0.122042908540765680e2 + R * (-0.242863898107531373e1) + pow(R - 0.50e1, 2) * 0.123771150953974960e2 + pow(R - 0.50e1, 3) * (-0.194704146171849644e2) : (R < 0.55e1 ? -0.650102417531577492e0 + R * 0.109215825901252866e0 + pow(R - 0.525e1, 2) * (-0.222569586749122950e1) + pow(R - 0.525e1, 3) * 0.454558880594487125e1 : (R < 0.575e1 ? 0.714841595313341127e0 + R * (-0.151334206729698384e0) + pow(R - 0.55e1, 2) * 0.118349573696742416e1 + pow(R - 0.55e1, 3) * (-0.152096110579452182e1) : (R < 0.60e1 ? -0.997718990000859396e0 + R * 0.155233454417540773e0 + pow(R - 0.575e1, 2) * 0.427749076215326665e-1 + pow(R - 0.575e1, 3) * (-0.823706886867831556e-1) : (R < 0.625e1 ? -0.103199029837721157e1 + R * 0.161176404099535264e0 + pow(R - 0.60e1, 2) * (-0.190031088935547002e-1) + pow(R - 0.60e1, 3) * (-0.195626601538345324e0) : (R < 0.65e1 ? -0.747600019361988499e0 + R * 0.114994861864318176e0 + pow(R - 0.625e1, 2) * (-0.165723060047313686e0) + pow(R - 0.625e1, 3) * 0.831394417201638120e-1 : (R < 0.675e1 ? -0.319384906277748348e0 + R * 0.477219771631920489e-1 + pow(R - 0.65e1, 2) * (-0.103368478757190824e0) + pow(R - 0.65e1, 3) * 0.922160648656905058e-1 : (R < 0.70e1 ? -0.922469014766668510e-1 + R * 0.133282499469136069e-1 + pow(R - 0.675e1, 2) * (-0.342064301079229444e-1) + pow(R - 0.675e1, 3) * 0.367040925450740491e-1 : (R < 0.725e1 ? -0.222629180001746446e-1 + R * 0.310705224515352065e-2 + pow(R - 0.70e1, 2) * (-0.667836069911740843e-2) + pow(R - 0.70e1, 3) * 0.610640368681330051e-2 : (R < 0.75e1 ? -0.667673796373425155e-2 + R * 0.912822586872310605e-3 + pow(R - 0.725e1, 2) * (-0.209855793400743305e-2) + pow(R - 0.725e1, 3) * 0.218463642607276192e-2 : (R < 0.775e1 ? -0.197631561213927739e-2 + R * 0.273162949757236966e-3 + pow(R - 0.75e1, 2) * (-0.460080614452861502e-3) + pow(R - 0.75e1, 3) * 0.220412308735654355e-3 : (R < 0.80e1 ? -0.539100963345245845e-3 + R * 0.844499504187414061e-4 + pow(R - 0.775e1, 2) * (-0.294771382901120736e-3) + pow(R - 0.775e1, 3) * 0.209926395304620589e-3 : (R < 0.825e1 ? 0.309951863797620821e-3 + R * (-0.235745419122026067e-4) + pow(R - 0.80e1, 2) * (-0.137326586422655288e-3) + pow(R - 0.80e1, 3) * 0.127228117085862824e-3 : (R < 0.85e1 ? 0.673023066851930482e-3 + R * (-0.683825631699309743e-4) + pow(R - 0.825e1, 2) * (-0.419054986082581559e-4) + pow(R - 0.825e1, 3) * (-0.446918774080719614e-4) : (R < 0.875e1 ? 0.919031711308625015e-3 + R * (-0.977150394880735323e-4) + pow(R - 0.85e1, 2) * (-0.754244066643121303e-4) + pow(R - 0.85e1, 3) * 0.208188967586425092e-3 : (R < 0.90e1 ? 0.905992392720530245e-3 + R * (-0.963918113977748893e-4) + pow(R - 0.875e1, 2) * 0.807173190255067158e-4 + pow(R - 0.875e1, 3) * (-0.754945951776284877e-4) : (R < 0.925e1 ? 0.674026815857441705e-3 + R * (-0.701883884808268661e-4) + pow(R - 0.90e1, 2) * 0.240963726422853500e-4 + pow(R - 0.90e1, 3) * 0.953232960040885586e-4 : (R < 0.95e1 ? 0.400250200669987732e-3 + R * (-0.402670841589175931e-4) + pow(R - 0.925e1, 2) * 0.955888446453517689e-4 + pow(R - 0.925e1, 3) * (-0.111155317798725543e-3) : (R < 0.100e2 ? 0.148436099383276104e-3 + R * (-0.133142839235027487e-4) + pow(R - 0.95e1, 2) * 0.122223562963076101e-4 + pow(R - 0.95e1, 3) * (-0.111896077786042263e-4) : (R < 0.105e2 ? 0.111791482861483098e-3 + R * (-0.948413346114831092e-5) + pow(R - 0.100e2, 2) * (-0.456205537159873277e-5) + pow(R - 0.100e2, 3) * 0.417219682779070280e-5 : (R < 0.110e2 ? 0.126218025004992153e-3 + R * (-0.109170412119040141e-4) + pow(R - 0.105e2, 2) * 0.169623987008732206e-5 + pow(R - 0.105e2, 3) * 0.192140099441408602e-6 : (R < 0.120e2 ? 0.106422308093591985e-3 + R * (-0.907669626723563521e-5) + pow(R - 0.110e2, 2) * 0.198445001924943498e-5 + pow(R - 0.110e2, 3) * 0.487704109986201396e-6 : (R < 0.140e2 ? 0.437103138017379378e-4 + R * (-0.364468389877816181e-5) + pow(R - 0.120e2, 2) * 0.344756234920803927e-5 + pow(R - 0.120e2, 3) * (-0.759671909584479166e-6) : (R < 0.160e2 ? -0.140154228235634395e-4 + R * 0.102950258304024571e-5 + pow(R - 0.140e2, 2) * (-0.111046910829883530e-5) + pow(R - 0.140e2, 3) * 0.247967520139356210e-6 : (R < 0.180e2 ? 0.698669996872513331e-5 + R * (-0.436763608482820811e-6) + pow(R - 0.160e2, 2) * 0.377336012537301958e-6 + pow(R - 0.160e2, 3) * (-0.793050391854457575e-7) : (R < 0.200e2 ? -0.217670073323868061e-5 + R * 0.120919971441037801e-6 + pow(R - 0.180e2, 2) * (-0.984942225753726129e-7) + pow(R - 0.180e2, 3) * 0.190263415024268544e-7 : (R < 0.250e2 ? 0.894748953926607142e-6 + R * (-0.447408208313303583e-7) + pow(R - 0.200e2, 2) * 0.156638264391885267e-7 + pow(R - 0.200e2, 3) * (-0.134270582978449075e-8) : -0.279876792767952256e-6 + R * 0.111945063267180894e-7 + pow(R - 0.250e2, 2) * (-0.447676100757883563e-8) + pow(R - 0.250e2, 3) * 0.447653474047043599e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2158806400e-1 * (R - 0.300e2) * (R - 0.250e2) - 0.2302907912e0 * R - 0.1351722272e2 + 0.1151453956e-1 * R * R + 0.75000e3 * (-0.4219643310e-4 * R + 0.1745076843e-2) * R) * pow(R, -6));
}

static double radcoeff_3_8_5_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.661500656499997897e0 + R * (-0.444089209850062616e-15) + pow(R - 0.475e1, 2) * 0.179520134168382199e2 + pow(R - 0.475e1, 3) * (-0.371348611041528756e2) : (R < 0.525e1 ? -0.101858332796522237e2 + R * 0.201322025139044491e1 + pow(R - 0.50e1, 2) * (-0.989913241127643673e1) + pow(R - 0.50e1, 3) * 0.159411880228586256e2 : (R < 0.55e1 ? -0.262332372890649812e0 + R * 0.526268000382190126e-1 + pow(R - 0.525e1, 2) * 0.205675860586753156e1 + pow(R - 0.525e1, 3) * (-0.438232725352163044e1) : (R < 0.575e1 ? -0.133907000930173492e1 + R * 0.259319742936679087e0 + pow(R - 0.55e1, 2) * (-0.122998683427369127e1) + pow(R - 0.55e1, 3) * 0.148911457714789930e1 : (R < 0.60e1 ? 0.538083723873378550e0 + R * (-0.764646909849353990e-1) + pow(R - 0.575e1, 2) * (-0.113150901412766791e0) + pow(R - 0.575e1, 3) * (-0.521350109966456365e-3) : (R < 0.625e1 ? 0.871042869551625021e0 + R * (-0.133137894836937498e0) + pow(R - 0.60e1, 2) * (-0.113541913995241633e0) + pow(R - 0.60e1, 3) * 0.337501310331966509e0 : (R < 0.65e1 ? 0.828529091090716485e0 + R * (-0.126627356147314629e0) + pow(R - 0.625e1, 2) * 0.139584068753733248e0 + pow(R - 0.625e1, 3) * (-0.281806668978992203e-1) : (R < 0.675e1 ? 0.417509736799726583e0 + R * (-0.621191968138040951e-1) + pow(R - 0.65e1, 2) * 0.118448568580308833e0 + pow(R - 0.65e1, 3) * (-0.944371519243698693e-1) : (R < 0.70e1 ? 0.143195293282915942e0 + R * (-0.206018785094690265e-1) + pow(R - 0.675e1, 2) * 0.476207046370314274e-1 + pow(R - 0.675e1, 3) * (-0.478933069726212579e-1) : (R < 0.725e1 ? 0.416107535732386166e-1 + R * (-0.577152124831980216e-2) + pow(R - 0.70e1, 2) * 0.117007244075654857e-1 + pow(R - 0.70e1, 3) * (-0.106494501627451069e-1) : (R < 0.75e1 ? 0.142371215274753118e-1 + R * (-0.191793095005176706e-2) + pow(R - 0.725e1, 2) * 0.371363678550665557e-2 + pow(R - 0.725e1, 3) * (-0.323560150279834794e-2) : (R < 0.775e1 ? 0.504259422078847091e-2 + R * (-0.667787839073129535e-3) + pow(R - 0.75e1, 2) * 0.128693565840789451e-2 + pow(R - 0.75e1, 3) * (-0.952125394061505170e-3) : (R < 0.80e1 ? 0.150483227711178729e-2 + R * (-0.202843521255714477e-3) + pow(R - 0.775e1, 2) * 0.572841612861765609e-3 + pow(R - 0.775e1, 3) * (-0.455566128635630490e-3) : (R < 0.825e1 ? -0.745006013379006116e-4 + R * (-0.184136394401242378e-5) + pow(R - 0.80e1, 2) * 0.231167016385042741e-3 + pow(R - 0.80e1, 3) * (-0.131609578115972174e-3) : (R < 0.85e1 ? -0.812089438912054267e-3 + R * 0.890653483517641573e-4 + pow(R - 0.825e1, 2) * 0.132459832798063610e-3 + pow(R - 0.825e1, 3) * (-0.271771260020480865e-3) : (R < 0.875e1 ? -0.937875969034124334e-3 + R * 0.104338153496955804e-3 + pow(R - 0.85e1, 2) * (-0.713686122172970522e-4) + pow(R - 0.85e1, 3) * 0.140263212378953601e-4 : (R < 0.90e1 ? -0.652891600858610649e-3 + R * 0.712837826204126509e-4 + pow(R - 0.875e1, 2) * (-0.608488712888755317e-4) + pow(R - 0.875e1, 3) * (-0.138408761311003300e-4) : (R < 0.925e1 ? -0.359734519732542223e-3 + R * 0.382641827013935766e-4 + pow(R - 0.90e1, 2) * (-0.712295283872007792e-4) + pow(R - 0.90e1, 3) * (-0.559834368734941635e-4) : (R < 0.95e1 ? 0.614717356603794647e-4 + R * (-0.784747590598696955e-5) + pow(R - 0.925e1, 2) * (-0.113217106042321405e-3) + pow(R - 0.925e1, 3) * 0.198136135945077097e-3 : (R < 0.100e2 ? 0.242342805205734220e-3 + R * (-0.273055034374457064e-4) + pow(R - 0.95e1, 2) * 0.353849959164864375e-4 + pow(R - 0.95e1, 3) * 0.593080671680996365e-5 : (R < 0.105e2 ? -0.146400604516481965e-3 + R * 0.125275975166481971e-4 + pow(R - 0.100e2, 2) * 0.442812059917013830e-4 + pow(R - 0.100e2, 3) * (-0.429122350099955390e-4) : (R < 0.110e2 ? -0.267713144599955588e-3 + R * 0.246246272508529156e-4 + pow(R - 0.105e2, 2) * (-0.200871465232919356e-4) + pow(R - 0.105e2, 3) * 0.546111474717220384e-5 : (R < 0.120e2 ? -0.961478767953414631e-4 + R * 0.863331678794013374e-5 + pow(R - 0.110e2, 2) * (-0.118954744025336299e-4) + pow(R - 0.110e2, 3) * 0.453071123059349562e-5 : (R < 0.140e2 ? 0.188731413923596502e-4 + R * (-0.156549832534663748e-5) + pow(R - 0.120e2, 2) * 0.169665928924685930e-5 + pow(R - 0.120e2, 3) * (-0.407535742774270244e-6) : (R < 0.160e2 ? -0.414742280459378663e-5 + R * 0.330709918349556146e-6 + pow(R - 0.140e2, 2) * (-0.748555167398762272e-6) + pow(R - 0.140e2, 3) * 0.195907668286992097e-6 : (R < 0.180e2 ? 0.471887627452540941e-5 + R * (-0.312618731801588100e-6) + pow(R - 0.160e2, 2) * 0.426890842323190202e-6 + pow(R - 0.160e2, 3) * (-0.991826466236980813e-7) : (R < 0.200e2 ? -0.367971050572232216e-5 + R * 0.204752878006795680e-6 + pow(R - 0.180e2, 2) * (-0.168205037418998339e-6) + pow(R - 0.180e2, 3) * 0.325333968328002441e-7 : (R < 0.250e2 ? 0.155612427291189426e-5 + R * (-0.776665096755947052e-7) + pow(R - 0.200e2, 2) * 0.269953435778031458e-7 + pow(R - 0.200e2, 3) * (-0.231007300453684101e-8) : -0.475200274154341799e-6 + R * 0.190314507621736707e-7 + pow(R - 0.250e2, 2) * (-0.765575149024946896e-8) + pow(R - 0.250e2, 3) * 0.766512648362946899e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.8941054080e0 * (R - 0.300e2) * (R - 0.250e2) + 0.9537071440e1 * R + 0.5603347606e3 - 0.4768535720e0 * R * R + 0.75000e3 * (0.1748523695e-2 * R - 0.7232612465e-1) * R) * pow(R, -6));
}

static double radcoeff_3_8_6_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.765303820599999990e-1 + pow(R - 0.475e1, 2) * 0.150542003823077764e1 + pow(R - 0.475e1, 3) * (-0.292736226620311024e1) : (R < 0.525e1 ? -0.104732963609152807e1 + R * 0.203829594202305620e0 + pow(R - 0.50e1, 2) * (-0.690101661421555157e0) + pow(R - 0.50e1, 3) * 0.837239766929330775e0 : (R < 0.55e1 ? -0.900201529115822324e-1 + R * 0.157612197907775684e-1 + pow(R - 0.525e1, 2) * (-0.621718362245570338e-1) + pow(R - 0.525e1, 3) * 0.987342266457870710e-1 : (R < 0.575e1 ? -0.232102919952126840e-1 + R * 0.318796917458412420e-2 + pow(R - 0.55e1, 2) * 0.118788337597832677e-1 + pow(R - 0.55e1, 3) * (-0.196207818644790616e-1) : (R < 0.60e1 ? -0.357724312135941219e-1 + R * 0.544848945488593441e-2 + pow(R - 0.575e1, 2) * (-0.283675263857602810e-2) + pow(R - 0.575e1, 3) * 0.749139220412916185e-2 : (R < 0.625e1 ? -0.357502335642328264e-1 + R * 0.543474917387213804e-2 + pow(R - 0.60e1, 2) * 0.278179151452084307e-2 + pow(R - 0.60e1, 3) * (-0.985221472803757617e-2) : (R < 0.65e1 ? -0.328778467981594644e-1 + R * 0.497835466962551383e-2 + pow(R - 0.625e1, 2) * (-0.460736953150733906e-2) + pow(R - 0.625e1, 3) * 0.150705352211349016e-4 : (R < 0.675e1 ? -0.182099881541677479e-1 + R * 0.267749562922580753e-2 + pow(R - 0.65e1, 2) * (-0.459606663009148788e-2) + pow(R - 0.65e1, 3) * 0.346187050715303021e-2 : (R < 0.70e1 ? -0.731285557593098177e-2 + R * 0.102856303427125654e-2 + pow(R - 0.675e1, 2) * (-0.199966374972671522e-2) + pow(R - 0.675e1, 3) * 0.206262234176675429e-2 : (R < 0.725e1 ? -0.311397478572415874e-2 + R * 0.415472848489165493e-3 + pow(R - 0.70e1, 2) * (-0.452696993401649451e-3) + pow(R - 0.70e1, 3) * 0.349169994579949625e-3 : (R < 0.75e1 ? -0.197043892694758957e-2 + R * 0.254593725772081329e-3 + pow(R - 0.725e1, 2) * (-0.190819497466687205e-3) + pow(R - 0.725e1, 3) * (-0.263873248865522685e-4) : (R < 0.775e1 ? -0.123009715636881881e-2 + R * 0.154236353622509183e-3 + pow(R - 0.75e1, 2) * (-0.210609991131601408e-3) + pow(R - 0.75e1, 3) * 0.167262455046258892e-3 : (R < 0.80e1 ? -0.667586344308585726e-3 + R * 0.802930683778820225e-4 + pow(R - 0.775e1, 2) * (-0.851631498469072461e-4) + pow(R - 0.775e1, 3) * 0.102336269415168120e-4 : (R < 0.825e1 ? -0.347446981777702329e-3 + R * 0.396302985059627917e-4 + pow(R - 0.80e1, 2) * (-0.774879296407696367e-4) + pow(R - 0.80e1, 3) * 0.295736458276738236e-4 : (R < 0.85e1 ? -0.779369127857012654e-4 + R * 0.643139227826681887e-5 + pow(R - 0.825e1, 2) * (-0.553076952700142681e-4) + pow(R - 0.825e1, 3) * 0.140174765107787961e-3 : (R < 0.875e1 ? -0.675492400282443913e-4 + R * 0.506031310096992911e-5 + pow(R - 0.85e1, 2) * 0.498233785608267091e-4 + pow(R - 0.85e1, 3) * (-0.650732067388256897e-4) : (R < 0.90e1 ? -0.176668599121217830e-3 + R * 0.177707761178534677e-4 + pow(R - 0.875e1, 2) * 0.101847350670743969e-5 + pow(R - 0.875e1, 3) * 0.521844016875147601e-4 : (R < 0.925e1 ? -0.268433871878545811e-3 + R * 0.280645881876162015e-4 + pow(R - 0.90e1, 2) * 0.401567747723435102e-4 + pow(R - 0.90e1, 3) * (-0.107417323979233257e-3) : (R < 0.95e1 ? -0.267025631188055976e-3 + R * 0.280022273276817242e-4 + pow(R - 0.925e1, 2) * (-0.404062182120814328e-4) + pow(R - 0.925e1, 3) * 0.256419525334181496e-4 : (R < 0.100e2 ? -0.122895555760740605e-3 + R * 0.126069843216569053e-4 + pow(R - 0.95e1, 2) * (-0.211747538120178189e-4) + pow(R - 0.95e1, 3) * 0.594297711340800729e-5 : (R < 0.105e2 ? 0.397288376950490592e-4 + R * (-0.411053665530490598e-5) + pow(R - 0.100e2, 2) * (-0.122602881419058071e-4) + pow(R - 0.100e2, 3) * 0.211535406250312389e-4 : (R < 0.110e2 ? 0.145685130559147236e-5 + R * (-0.505669328437283087e-6) + pow(R - 0.105e2, 2) * 0.194700227956410512e-4 + pow(R - 0.105e2, 3) * (-0.193374116135329661e-4) : (R < 0.120e2 ? -0.507294243875944516e-4 + R * 0.446129475705404102e-5 + pow(R - 0.110e2, 2) * (-0.953609462465840129e-5) + pow(R - 0.110e2, 3) * 0.418217278760435973e-5 : (R < 0.140e2 ? 0.222247044133961868e-4 + R * (-0.206437612944968238e-5) + pow(R - 0.120e2, 2) * 0.301042373815467789e-5 + pow(R - 0.120e2, 3) * (-0.676495829464918398e-6) : (R < 0.160e2 ? -0.260779972565601186e-4 + R * 0.185936886959000840e-5 + pow(R - 0.140e2, 2) * (-0.104855123863483250e-5) + pow(R - 0.140e2, 3) * 0.162942430769914120e-6 : (R < 0.180e2 ? 0.685366979986562908e-5 + R * (-0.379526915710351837e-6) + pow(R - 0.160e2, 2) * (-0.708966540153476994e-7) + pow(R - 0.160e2, 3) * 0.380945330977617946e-7 : (R < 0.200e2 ? 0.375097938857481894e-5 + R * (-0.205979134598601047e-6) + pow(R - 0.180e2, 2) * 0.157670544571223081e-6 + pow(R - 0.180e2, 3) * (-0.301677858734612720e-7) : (R < 0.250e2 ? -0.123305567619511895e-5 + R * 0.626896132047559477e-7 + pow(R - 0.200e2, 2) * (-0.233361706695445808e-7) + pow(R - 0.200e2, 3) * 0.202854716971867835e-8 : 0.467625177444724630e-6 + R * (-0.185310557617889841e-7) + pow(R - 0.250e2, 2) * 0.709203687623559409e-8 + pow(R - 0.250e2, 3) * (-0.702246083975559313e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.6635708128e1 * (R - 0.300e2) * (R - 0.250e2) + 0.7078087320e2 * R + 0.4158381902e4 - 0.3539043660e1 * R * R + 0.75000e3 * (0.1297650409e-1 * R - 0.5367555420e0) * R) * pow(R, -6));
}

static double radcoeff_3_8_7_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.416099038200002103e0 + R * 0.444089209850062616e-15 + pow(R - 0.475e1, 2) * 0.176708445859003298e2 + pow(R - 0.475e1, 3) * (-0.372120501836013204e2) : (R < 0.525e1 ? -0.918392395332458555e1 + R * 0.185816288352491688e1 + pow(R - 0.50e1, 2) * (-0.102381930518006623e2) + pow(R - 0.50e1, 3) * 0.162445334756039799e2 : (R < 0.55e1 ? 0.131455393742325799e1 + R * (-0.215083615699668163e0) + pow(R - 0.525e1, 2) * 0.194520705490232215e1 + pow(R - 0.525e1, 3) * (-0.415191765161459703e1) : (R < 0.575e1 ? 0.303601342294343102e0 + R * (-0.209646479262441954e-1) + pow(R - 0.55e1, 2) * (-0.116873118380862606e1) + pow(R - 0.55e1, 3) * 0.176670679485441084e1 : (R < 0.60e1 ? 0.171353182722329200e1 + R * (-0.274072715795355137e0) + pow(R - 0.575e1, 2) * 0.156298912332182155e0 + pow(R - 0.575e1, 3) * (-0.987001076430460006e-1) : (R < 0.625e1 ? 0.136389920416401145e1 + R * (-0.214429529812335234e0) + pow(R - 0.60e1, 2) * 0.822738315998976510e-1 + pow(R - 0.60e1, 3) * 0.190887679237773111e0 : (R < 0.65e1 ? 0.891221715770649570e0 + R * (-0.137501174155303940e0) + pow(R - 0.625e1, 2) * 0.225439591028227498e0 + pow(R - 0.625e1, 3) * (-0.146104699548047196e0) : (R < 0.675e1 ? 0.348415236010918616e0 + R * (-0.521760098064490210e-1) + pow(R - 0.65e1, 2) * 0.115861066367192095e0 + pow(R - 0.65e1, 3) * (-0.105941670613584060e0) : (R < 0.70e1 ? 0.970525419365748793e-1 + R * (-0.141095398628999814e-1) + pow(R - 0.675e1, 2) * 0.364048134070040566e-1 + pow(R - 0.675e1, 3) * (-0.387218544136165091e-1) : (R < 0.725e1 ? 0.221284007926173601e-1 + R * (-0.316748086195105163e-2) + pow(R - 0.70e1, 2) * 0.736342259679167131e-2 + pow(R - 0.70e1, 3) * (-0.629330719434986058e-2) : (R < 0.75e1 ? 0.435283933399465729e-2 + R * (-0.665764662495814722e-3) + pow(R - 0.725e1, 2) * 0.264344220102927631e-2 + pow(R - 0.725e1, 3) * (-0.286359384578406930e-2) : (R < 0.775e1 ? -0.141266859050732745e-2 + R * 0.119032591934310333e-3 + pow(R - 0.75e1, 2) * 0.495746816691224122e-3 + pow(R - 0.75e1, 3) * (-0.262147425713861633e-3) : (R < 0.80e1 ? -0.292586640467894362e-2 + R * 0.317753357958573365e-3 + pow(R - 0.775e1, 2) * 0.299136247405827897e-3 + pow(R - 0.775e1, 3) * (-0.523892982560485209e-3) : (R < 0.825e1 ? -0.332606173285117032e-2 + R * 0.369091547431396269e-3 + pow(R - 0.80e1, 2) * (-0.937834895145359956e-4) + pow(R - 0.80e1, 3) * 0.702589527558031296e-4 : (R < 0.85e1 ? -0.305265032810569156e-2 + R * 0.335373356315841391e-3 + pow(R - 0.825e1, 2) * (-0.410892749476836450e-4) + pow(R - 0.825e1, 3) * (-0.139859090862727841e-3) : (R < 0.875e1 ? -0.265987386149452425e-2 + R * 0.288605139305238127e-3 + pow(R - 0.85e1, 2) * (-0.145983593094729526e-3) + pow(R - 0.85e1, 3) * (-0.332031730489150629e-5) : (R < 0.90e1 ? -0.202492410065305446e-2 + R * 0.214990783263206220e-3 + pow(R - 0.875e1, 2) * (-0.148473831073398156e-3) + pow(R - 0.875e1, 3) * 0.328259242422932656e-4 : (R < 0.925e1 ? -0.142095231735743380e-2 + R * 0.146908728521937096e-3 + pow(R - 0.90e1, 2) * (-0.123854387891678206e-3) + pow(R - 0.90e1, 3) * 0.165608136157192384e-4 : (R < 0.95e1 ? -0.884330571003669706e-3 + R * 0.880866871290453637e-4 + pow(R - 0.925e1, 2) * (-0.111433777679888777e-3) + pow(R - 0.925e1, 3) * 0.109406896174829240e-3 : (R < 0.100e2 ? -0.555156289187873852e-3 + R * 0.528835913218814630e-4 + pow(R - 0.95e1, 2) * (-0.293786055487668363e-4) + pow(R - 0.95e1, 3) * 0.143254706900078296e-4 : (R < 0.105e2 ? -0.374365231426205007e-3 + R * 0.342490887906205031e-4 + pow(R - 0.100e2, 2) * (-0.789039951375509188e-5) + pow(R - 0.100e2, 3) * 0.403251970502818475e-5 : (R < 0.110e2 ? -0.324740664124183772e-3 + R * 0.293830790556365485e-4 + pow(R - 0.105e2, 2) * (-0.184161995621281496e-5) + pow(R - 0.105e2, 3) * (-0.153909509501205691e-4) : (R < 0.120e2 ? -0.179891773121166346e-3 + R * 0.159982458868333028e-4 + pow(R - 0.110e2, 2) * (-0.249280463813936726e-4) + pow(R - 0.110e2, 3) * 0.967705223256036778e-5 : (R < 0.140e2 ? 0.547564655112752068e-4 + R * (-0.482669017827293396e-5) + pow(R - 0.120e2, 2) * 0.410311031628743416e-5 + pow(R - 0.120e2, 3) * (-0.740720209575483497e-6) : (R < 0.160e2 ? -0.400900374035940065e-4 + R * 0.269710857197100029e-5 + pow(R - 0.140e2, 2) * (-0.341210941165466981e-6) + pow(R - 0.140e2, 3) * (-0.860766680350165907e-7) : (R < 0.180e2 ? -0.377927401522292959e-5 + R * 0.299344790888933117e-6 + pow(R - 0.160e2, 2) * (-0.857670949375566499e-6) + pow(R - 0.160e2, 3) * 0.217309205465549961e-6 : (R < 0.200e2 ? 0.934203580548119757e-5 + R * (-0.523628541026733246e-6) + pow(R - 0.180e2, 2) * 0.446184283417733265e-6 + pow(R - 0.180e2, 3) * (-0.867542246521833169e-7) : (R < 0.250e2 ? -0.444098961495999849e-5 + R * 0.220057896817999931e-6 + pow(R - 0.200e2, 2) * (-0.743410644953666499e-7) + pow(R - 0.200e2, 3) * 0.631772385355333254e-8 : 0.122973315277916680e-5 + R * (-0.495234591191666667e-7) + pow(R - 0.250e2, 2) * 0.204247933079333316e-7 + pow(R - 0.250e2, 3) * (-0.205584378161999982e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1274613715e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1359587648e3 * R - 0.7987593412e4 + 0.6797938240e1 * R * R + 0.75000e3 * (-0.2492580397e-1 * R + 0.1031022306e1) * R) * pow(R, -6));
}

static double radcoeff_3_8_7_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.490018206800001077e0 + R * (-0.222044604925031308e-15) + pow(R - 0.475e1, 2) * (-0.142645739406369394e2) + pow(R - 0.475e1, 3) * 0.291978925497477562e2 : (R < 0.525e1 ? 0.834310999280382326e1 + R * (-0.165768211724076497e1) + pow(R - 0.50e1, 2) * 0.763384547167388039e1 + pow(R - 0.50e1, 3) * (-0.120110227308432833e2) : (R < 0.55e1 ? 0.417059242173937250e0 + R * (-0.928261434369404281e-1) + pow(R - 0.525e1, 2) * (-0.137442157645858232e1) + pow(R - 0.525e1, 3) * 0.334009404530537601e1 : (R < 0.575e1 ? 0.718534214143104588e0 + R * (-0.153769298171473556e0) + pow(R - 0.55e1, 2) * 0.113064895752044969e1 + pow(R - 0.55e1, 3) * (-0.145920921613822174e1) : (R < 0.60e1 ? -0.911006186736299739e0 + R * 0.137953452562834727e0 + pow(R - 0.575e1, 2) * 0.362420454167833583e-1 + pow(R - 0.575e1, 3) * 0.459855462875111698e-1 : (R < 0.625e1 ? -0.106848241056080839e1 + R * 0.164696765200134737e0 + pow(R - 0.60e1, 2) * 0.707312051324167357e-1 + pow(R - 0.60e1, 3) * (-0.322145555891822755e0) : (R < 0.65e1 ? -0.912615927278914607e0 + R * 0.139660076036626335e0 + pow(R - 0.625e1, 2) * (-0.170877961786450344e0) + pow(R - 0.625e1, 3) * 0.646353275197800725e-1 : (R < 0.675e1 ? -0.445706802506839583e0 + R * 0.663402190533599334e-1 + pow(R - 0.65e1, 2) * (-0.122401466146615290e0) + pow(R - 0.65e1, 3) * 0.951284717327023355e-1 : (R < 0.70e1 ? -0.159162535566054308e0 + R * 0.229760744299339695e-1 + pow(R - 0.675e1, 2) * (-0.510551123470885451e-1) + pow(R - 0.675e1, 3) * 0.489644489734106653e-1 : (R < 0.725e1 ? -0.471613566354293842e-1 + R * 0.662935243890419752e-2 + pow(R - 0.70e1, 2) * (-0.143317756170305427e-1) + pow(R - 0.70e1, 3) * 0.124766766872550089e-1 : (R < 0.75e1 ? -0.128699402982569936e-1 + R * 0.180284150924924034e-2 + pow(R - 0.725e1, 2) * (-0.497426810158928517e-2) + pow(R - 0.725e1, 3) * 0.481241291116929308e-2 : (R < 0.775e1 ? -0.121958837824130391e-2 + R * 0.218034879298840506e-3 + pow(R - 0.75e1, 2) * (-0.136495841821231492e-2) + pow(R - 0.75e1, 3) * 0.111849727446781109e-2 : (R < 0.80e1 ? 0.237647575914566762e-2 + R * (-0.254726090844602281e-3) + pow(R - 0.775e1, 2) * (-0.526085462361456551e-3) + pow(R - 0.775e1, 3) * 0.795579437359462374e-3 : (R < 0.825e1 ? 0.326699903986345111e-2 + R * (-0.368597677520431381e-3) + pow(R - 0.80e1, 2) * 0.705991156581402301e-4 + pow(R - 0.80e1, 3) * 0.822277280943412578e-4 : (R < 0.85e1 ? 0.285427892385779628e-2 + R * (-0.317880420673672260e-3) + pow(R - 0.825e1, 2) * 0.132269911728896173e-3 + pow(R - 0.825e1, 3) * 0.289899254631715443e-4 : (R < 0.875e1 ? 0.225464894237147571e-2 + R * (-0.246309853784879495e-3) + pow(R - 0.85e1, 2) * 0.154012355826274832e-3 + pow(R - 0.85e1, 3) * (-0.152323707470269788e-4) : (R < 0.90e1 ? 0.161522326033458467e-2 + R * (-0.172159745386809665e-3) + pow(R - 0.875e1, 2) * 0.142588077766004598e-3 + pow(R - 0.875e1, 3) * 0.113622397649361350e-4 : (R < 0.925e1 ? 0.963492420640936508e-3 + R * (-0.987352865478818267e-4) + pow(R - 0.90e1, 2) * 0.151109757589706700e-3 + pow(R - 0.90e1, 3) * (-0.167456041112717361e-3) : (R < 0.95e1 ? 0.561869222300382634e-3 + R * (-0.545784154616629888e-4) + pow(R - 0.925e1, 2) * 0.255177267551686826e-4 + pow(R - 0.925e1, 3) * 0.441209749259331265e-4 : (R < 0.100e2 ? 0.364353781781928785e-3 + R * (-0.335468692854661875e-4) + pow(R - 0.95e1, 2) * 0.586084579496185326e-4 + pow(R - 0.95e1, 3) * (-0.719703164373723214e-4) : (R < 0.105e2 ? 0.323702400498768954e-3 + R * (-0.289161486638768960e-4) + pow(R - 0.100e2, 2) * (-0.493470167064399563e-4) + pow(R - 0.100e2, 3) * 0.531617267083875052e-4 : (R < 0.110e2 ? 0.417505939749775374e-3 + R * (-0.383918703390262234e-4) + pow(R - 0.105e2, 2) * 0.303955733561412947e-4 + pow(R - 0.105e2, 3) * (-0.795322127617768891e-5) : (R < 0.120e2 ? 0.155373449040200197e-3 + R * (-0.139612129400181987e-4) + pow(R - 0.110e2, 2) * 0.184657414418747614e-4 + pow(R - 0.110e2, 3) * (-0.674403576685656087e-5) : (R < 0.140e2 ? -0.332973522832396651e-4 + R * 0.273816264316163888e-5 + pow(R - 0.120e2, 2) * (-0.176636585869492231e-5) + pow(R - 0.120e2, 3) * 0.317486453882051371e-6 : (R < 0.160e2 ? 0.775583974776806640e-5 + R * (-0.517463345033433277e-6) + pow(R - 0.140e2, 2) * 0.138552864597386020e-6 + pow(R - 0.140e2, 3) * (-0.807723485283466331e-8) : (R < 0.180e2 ? 0.928879084846484761e-6 + R * (-0.601787048779052971e-7) + pow(R - 0.160e2, 2) * 0.900894554803780366e-7 + pow(R - 0.160e2, 3) * (-0.216944965832126921e-7) : (R < 0.200e2 ? -0.684748598510981185e-6 + R * 0.398451580450545108e-7 + pow(R - 0.180e2, 2) * (-0.400775240188981227e-7) + pow(R - 0.180e2, 3) * 0.796037507318543193e-8 : (R < 0.250e2 ? 0.514336209946255602e-6 + R * (-0.249404371523127803e-7) + pow(R - 0.200e2, 2) * 0.768472642021447384e-8 + pow(R - 0.200e2, 3) * (-0.637496875550383395e-9) : -0.991077023888298730e-7 + R * 0.409456138355319477e-8 + pow(R - 0.250e2, 2) * (-0.187772671304127833e-8) + pow(R - 0.250e2, 3) * 0.192982483266127843e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.4968789408e1 * (R - 0.300e2) * (R - 0.250e2) + 0.5300044768e2 * R + 0.3113763220e4 - 0.2650022384e1 * R * R + 0.75000e3 * (0.971672383e-2 * R - 0.4019186914e0) * R) * pow(R, -6));
}

static double radcoeff_3_8_8_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.105143254800000654e-1 + R * (-0.138777878078144568e-16) + pow(R - 0.475e1, 2) * (-0.652726024458130771e0) + pow(R - 0.475e1, 3) * 0.139295370487252335e1 : (R < 0.525e1 ? 0.317404813413336595e0 + R * (-0.651841925654673138e-1) + pow(R - 0.50e1, 2) * 0.391989254196261627e0 + pow(R - 0.50e1, 3) * (-0.488554491257569445e0) : (R < 0.55e1 ? -0.213780487058813418e0 + R * 0.392064674218692219e-1 + pow(R - 0.525e1, 2) * 0.255733857530845259e-1 + pow(R - 0.525e1, 3) * (-0.103699734210245614e0) : (R < 0.575e1 ? -0.177188918712947341e0 + R * 0.325494601339904252e-1 + pow(R - 0.55e1, 2) * (-0.522014149045996884e-1) + pow(R - 0.55e1, 3) * 0.108677436825519256e-1 : (R < 0.60e1 ? -0.419194169564721525e-1 + R * 0.848645462216907065e-2 + pow(R - 0.575e1, 2) * (-0.440506071426857437e-1) + pow(R - 0.575e1, 3) * 0.346388763440378389e-1 : (R < 0.625e1 ? 0.490517380810002387e-1 + R * (-0.704405963466670643e-2) + pow(R - 0.60e1, 2) * (-0.180714498846573611e-1) + pow(R - 0.60e1, 3) * 0.333394976292967285e-1 : (R < 0.65e1 ? 0.658467592188890644e-1 + R * (-0.982862877150224995e-2) + pow(R - 0.625e1, 2) * 0.693317333731518787e-2 + pow(R - 0.625e1, 3) * 0.122311259477523551e-2 : (R < 0.675e1 ? 0.422757118656079470e-1 + R * (-0.613270849132429956e-2) + pow(R - 0.65e1, 2) * 0.785050778339661456e-2 + pow(R - 0.65e1, 3) * (-0.464682109639766739e-2) : (R < 0.70e1 ? 0.220794312036037450e-1 + R * (-0.307873355520055497e-2) + pow(R - 0.675e1, 2) * 0.436539196109836380e-2 + pow(R - 0.675e1, 3) * (-0.345858192438458023e-2) : (R < 0.725e1 ? 0.115587447705143738e-1 + R * (-0.154452168547348188e-2) + pow(R - 0.70e1, 2) * 0.177145551780992830e-2 + pow(R - 0.70e1, 3) * (-0.114548301406400136e-2) : (R < 0.75e1 ? 0.678717728846500723e-2 + R * (-0.873571991705518122e-3) + pow(R - 0.725e1, 2) * 0.912343257261927177e-3 + pow(R - 0.725e1, 3) * (-0.484448150559418944e-3) : (R < 0.775e1 ? 0.409659723668334176e-2 + R * (-0.508234391304445538e-3) + pow(R - 0.75e1, 2) * 0.549007144342362943e-3 + pow(R - 0.75e1, 3) * (-0.316498502098323006e-3) : (R < 0.80e1 ? 0.245847409564442163e-2 + R * (-0.293074288276699596e-3) + pow(R - 0.775e1, 2) * 0.311633267768620661e-3 + pow(R - 0.775e1, 3) * (-0.169350199447288840e-3) : (R < 0.825e1 ? 0.148279730611004779e-2 + R * (-0.169010816788755971e-3) + pow(R - 0.80e1, 2) * 0.184620618183154031e-3 + pow(R - 0.80e1, 3) * (-0.913996722725205944e-4) : (R < 0.85e1 ? 0.872731792908281747e-3 + R * (-0.938379462482765689e-4) + pow(R - 0.825e1, 2) * 0.116070863978763578e-3 + pow(R - 0.825e1, 3) * (-0.287883839782629241e-3) : (R < 0.875e1 ? 0.841001734654170906e-3 + R * (-0.897807342181377557e-4) + pow(R - 0.85e1, 2) * (-0.998420158582083526e-4) + pow(R - 0.85e1, 3) * 0.270741221483037546e-3 : (R < 0.90e1 ? 0.831615943132758264e-3 + R * (-0.889377631191723785e-4) + pow(R - 0.875e1, 2) * 0.103213900254069834e-3 + pow(R - 0.875e1, 3) * (-0.130148427909521362e-3) : (R < 0.925e1 ? 0.591196163666554480e-3 + R * (-0.617336432251727236e-4) + pow(R - 0.90e1, 2) * 0.560257932192881249e-5 + pow(R - 0.90e1, 3) * 0.818572799150483468e-4 : (R < 0.95e1 ? 0.424942195656264883e-3 + R * (-0.435841135801367456e-4) + pow(R - 0.925e1, 2) * 0.669955392582150726e-4 + pow(R - 0.925e1, 3) * (-0.622594226306723357e-4) : (R < 0.100e2 ? 0.220827398465662611e-3 + R * (-0.217599856942802731e-4) + pow(R - 0.95e1, 2) * 0.203009722852108174e-4 + pow(R - 0.95e1, 3) * (-0.533653641300539509e-6) : (R < 0.105e2 ? 0.268286142894486079e-4 + R * (-0.185925364004486109e-5) + pow(R - 0.100e2, 2) * 0.195004918232600082e-4 + pow(R - 0.100e2, 3) * (-0.300328753343405671e-4) : (R < 0.110e2 ? 0.597033569421729767e-4 + R * (-0.488341831754028332e-5) + pow(R - 0.105e2, 2) * (-0.255488211782508493e-4) + pow(R - 0.105e2, 3) * 0.258498236666628316e-4 : (R < 0.120e2 ? 0.124323367316734072e-3 + R * (-0.110448717457940047e-4) + pow(R - 0.110e2, 2) * 0.132259143217433998e-4 + pow(R - 0.110e2, 3) * (-0.467958354594939346e-5) : (R < 0.140e2 ? -0.160872379756353426e-4 + R * 0.136820625984461194e-5 + pow(R - 0.120e2, 2) * (-0.812836316104781676e-6) + pow(R - 0.120e2, 3) * 0.147493464816237845e-6 : (R < 0.160e2 ? 0.258129609121524893e-5 + R * (-0.113217426779660632e-6) + pow(R - 0.140e2, 2) * 0.721244727926454607e-7 + pow(R - 0.140e2, 3) * (-0.353310588514075738e-7) : (R < 0.180e2 ? 0.475474255231551529e-5 + R * (-0.248692241825969688e-6) + pow(R - 0.160e2, 2) * (-0.139861880315799982e-6) + pow(R - 0.160e2, 3) * 0.489575444393923932e-7 : (R < 0.200e2 ? 0.408218117039629342e-5 + R * (-0.220649229816460739e-6) + pow(R - 0.180e2, 2) * 0.153883386320554430e-6 + pow(R - 0.180e2, 3) * (-0.289850704561620303e-7) : (R < 0.250e2 ? -0.888419844136252370e-6 + R * 0.470634699918126195e-7 + pow(R - 0.200e2, 2) * (-0.200270364164177514e-7) + pow(R - 0.200e2, 3) * 0.178873900521104539e-8 : 0.487370090438412195e-6 + R * (-0.190514687815364885e-7) + pow(R - 0.250e2, 2) * 0.680404866174792912e-8 + pow(R - 0.250e2, 3) * (-0.662672619488126198e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1691185782e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1803932048e3 * R + 0.1059811138e5 - 0.9019660240e1 * R * R + 0.75000e3 * (0.3307210767e-1 * R - 0.1367982911e1) * R) * pow(R, -6));
}

static double radcoeff_3_8_9_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.428595846999999974e0 + pow(R - 0.475e1, 2) * (-0.645901513968196994e1) + pow(R - 0.475e1, 3) * 0.154265553747278776e2 : (R < 0.525e1 ? 0.109389781989753665e1 + R * (-0.337028437079507304e0) + pow(R - 0.50e1, 2) * 0.511090139136393962e1 + pow(R - 0.50e1, 3) * (-0.825518085058363837e1) : (R < 0.55e1 ? -0.400558054646965722e1 + R * 0.670575849118029921e0 + pow(R - 0.525e1, 2) * (-0.108048424657379027e1) + pow(R - 0.525e1, 3) * 0.206511303880668162e1 : (R < 0.575e1 ? -0.319915956384063227e1 + R * 0.517542420607387643e0 + pow(R - 0.55e1, 2) * 0.468350532531221220e0 + pow(R - 0.55e1, 3) * (-0.110751876704308727e1) : (R < 0.60e1 ? -0.333965674660141154e1 + R * 0.544057918052419431e0 + pow(R - 0.575e1, 2) * (-0.362288542751094289e0) + pow(R - 0.575e1, 3) * (-0.106203834343338386e-1) : (R < 0.625e1 ? -0.226365216443760753e1 + R * 0.360922324782934623e0 + pow(R - 0.60e1, 2) * (-0.370253830326844668e0) + pow(R - 0.60e1, 3) * 0.548146943804249248e-1 : (R < 0.65e1 ? -0.119312929943901258e1 + R * 0.186073164815842018e0 + pow(R - 0.625e1, 2) * (-0.329142809541525971e0) + pow(R - 0.625e1, 3) * 0.215387888792631765e0 : (R < 0.675e1 ? -0.403125147732333600e0 + R * 0.618869891936974781e-1 + pow(R - 0.65e1, 2) * (-0.167601892947052133e0) + pow(R - 0.65e1, 3) * 0.161841948913048761e0 : (R < 0.70e1 ? -0.502463134862344354e-1 + R * 0.843140814136806444e-2 + pow(R - 0.675e1, 2) * (-0.462204312622655419e-1) + pow(R - 0.675e1, 3) * 0.532865899231731235e-1 : (R < 0.725e1 ? 0.395303726711882103e-1 + R * (-0.468757187916974457e-2) + pow(R - 0.70e1, 2) * (-0.625548881988569668e-2) + pow(R - 0.70e1, 3) * 0.959307833825869677e-2 : (R < 0.75e1 ? 0.489248525749958821e-1 + R * (-0.601661410068908727e-2) + pow(R - 0.725e1, 2) * 0.939319933808325570e-3 + pow(R - 0.725e1, 3) * 0.229206203579209464e-2 : (R < 0.775e1 ? 0.422737115505543021e-1 + R * (-0.511719250207390633e-2) + pow(R - 0.75e1, 2) * 0.265836646065239655e-2 + pow(R - 0.75e1, 3) * (-0.587883793427079445e-3) : (R < 0.80e1 ? 0.329837723723684639e-1 + R * (-0.389823748301528546e-2) + pow(R - 0.775e1, 2) * 0.221745361558208691e-2 + pow(R - 0.775e1, 3) * (-0.459933518083783057e-3) : (R < 0.825e1 ? 0.249352625769196125e-1 + R * (-0.287574820986495139e-2) + pow(R - 0.80e1, 2) * 0.187250347701924959e-2 + pow(R - 0.80e1, 3) * (-0.562741686237782160e-3) : (R < 0.85e1 ? 0.181899154085805141e-1 + R * (-0.204501053752491075e-2) + pow(R - 0.825e1, 2) * 0.145044721234091297e-2 + pow(R - 0.825e1, 3) * (-0.560438680965081324e-3) : (R < 0.875e1 ? 0.130006100003009582e-1 + R * (-0.142486918403540675e-2) + pow(R - 0.85e1, 2) * 0.103011820161710193e-2 + pow(R - 0.85e1, 3) * (-0.312120581901898994e-3) : (R < 0.90e1 ? 0.906542120141779102e-2 + R * (-0.968332692333461853e-3) + pow(R - 0.875e1, 2) * 0.796027765190677680e-3 + pow(R - 0.875e1, 3) * (-0.425736380227320730e-3) : (R < 0.925e1 ? 0.624482600407671052e-2 + R * (-0.650144381030745653e-3) + pow(R - 0.90e1, 2) * 0.476725480020187119e-3 + pow(R - 0.90e1, 3) * (-0.195791771888176175e-4) : (R < 0.95e1 ? 0.410341771227788841e-2 + R * (-0.415452736743555451e-3) + pow(R - 0.925e1, 2) * 0.462041097128573905e-3 + pow(R - 0.925e1, 3) * (-0.425422111017408761e-3) : (R < 0.100e2 ? 0.268873598425281015e-2 + R * (-0.264198833995032641e-3) + pow(R - 0.95e1, 2) * 0.142974513865517334e-3 + pow(R - 0.95e1, 3) * (-0.257858205509040534e-4) : (R < 0.105e2 ? 0.148490490062693371e-2 + R * (-0.140563685542693375e-3) + pow(R - 0.100e2, 2) * 0.104295783039161252e-3 + pow(R - 0.100e2, 3) * (-0.382857000675490599e-4) : (R < 0.110e2 ? 0.712587299999036016e-3 + R * (-0.649821775541939043e-4) + pow(R - 0.105e2, 2) * 0.468672329378376626e-4 + pow(R - 0.105e2, 3) * (-0.118347482988997277e-4) : (R < 0.120e2 ? 0.304921875846841386e-3 + R * (-0.269910058405310308e-4) + pow(R - 0.110e2, 2) * 0.291151104894880709e-4 + pow(R - 0.110e2, 3) * (-0.997154489695704005e-5) : (R < 0.140e2 ? -0.157215940180878725e-4 + R * 0.132458044757398944e-5 + pow(R - 0.120e2, 2) * (-0.799524201383050475e-6) + pow(R - 0.120e2, 3) * 0.103960035135527873e-6 : (R < 0.160e2 ? 0.922005883214629253e-5 + R * (-0.625995936331877986e-6) + pow(R - 0.140e2, 2) * (-0.175763990569883266e-6) + pow(R - 0.140e2, 3) * 0.101666771492911126e-6 : (R < 0.180e2 ? 0.105921231164364132e-5 + R * (-0.109050640696477585e-6) + pow(R - 0.160e2, 2) * 0.434236638387583519e-6 + pow(R - 0.160e2, 3) * (-0.110801771007172362e-6) : (R < 0.200e2 ? -0.542211072922018409e-5 + R * 0.298274660767787986e-6 + pow(R - 0.180e2, 2) * (-0.230573987655450707e-6) + pow(R - 0.180e2, 3) * 0.441854815357783553e-7 : (R < 0.250e2 ? 0.185048061629349130e-5 + R * (-0.937955114246745674e-7) + pow(R - 0.200e2, 2) * 0.345389015592194308e-7 + pow(R - 0.200e2, 3) * (-0.299518686845690386e-8) : -0.679195214731299338e-6 + R * 0.269544890332519738e-7 + pow(R - 0.250e2, 2) * (-0.103889014676341229e-7) + pow(R - 0.250e2, 3) * 0.103035792179674567e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.8137475904e1 * (R - 0.300e2) * (R - 0.250e2) - 0.8679969480e2 * R - 0.5099495448e4 + 0.4339984740e1 * R * R + 0.75000e3 * (-0.1591330287e-1 * R + 0.6582324205e0) * R) * pow(R, -6));
}

static double radcoeff_3_8_9_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.175027685799999999e0 + pow(R - 0.475e1, 2) * 0.595420710818727628e1 + pow(R - 0.475e1, 3) * (-0.129649274407491042e2) : (R < 0.525e1 ? -0.238630965596590405e1 + R * 0.546179658953180769e0 + pow(R - 0.50e1, 2) * (-0.376948847237455320e1) + pow(R - 0.50e1, 3) * 0.564043299104731943e1 : (R < 0.55e1 ? 0.180883509441679702e1 + R * (-0.280983391412723271e0) + pow(R - 0.525e1, 2) * 0.460836270910936485e0 + pow(R - 0.525e1, 3) * (-0.122398753144017336e1) : (R < 0.575e1 ? 0.181344995296258160e1 + R * (-0.280062918102287561e0) + pow(R - 0.55e1, 2) * (-0.457154377669193590e0) + pow(R - 0.55e1, 3) * 0.767217422713375452e0 : (R < 0.60e1 ? 0.228402812852422743e1 + R * (-0.364786840178126515e0) + pow(R - 0.575e1, 2) * 0.118258689365837971e0 + pow(R - 0.575e1, 3) * 0.704925733866718085e-1 : (R < 0.625e1 ? 0.185844052991123920e1 + R * (-0.292440137985206516e0) + pow(R - 0.60e1, 2) * 0.171128119405841828e0 + pow(R - 0.60e1, 3) * 0.107876914139937302e0 : (R < 0.65e1 ? 0.120962798225654589e1 + R * (-0.186649156881047357e0) + pow(R - 0.625e1, 2) * 0.252035805010794811e0 + pow(R - 0.625e1, 3) * (-0.113117571386421645e0) : (R < 0.675e1 ? 0.542358431858926071e0 + R * (-0.818407990106040095e-1) + pow(R - 0.65e1, 2) * 0.167197626470978578e0 + pow(R - 0.65e1, 3) * (-0.134486294514250176e0) : (R < 0.70e1 ? 0.156624162313622278e0 + R * (-0.234581659965366340e-1) + pow(R - 0.675e1, 2) * 0.663329055852909383e-1 + pow(R - 0.675e1, 3) * (-0.640143107805776351e-1) : (R < 0.725e1 ? 0.116233586577463126e-1 + R * (-0.229439647524947322e-2) + pow(R - 0.70e1, 2) * 0.183221724998577119e-1 + pow(R - 0.70e1, 3) * (-0.195395892114392719e-1) : (R < 0.75e1 ? -0.273930578701252619e-1 + R * 0.320301679753451883e-2 + pow(R - 0.725e1, 2) * 0.366748059127825713e-2 + pow(R - 0.725e1, 3) * (-0.586068533366533324e-2) : (R < 0.775e1 ? -0.327668770083354779e-1 + R * 0.393787859311139736e-2 + pow(R - 0.75e1, 2) * (-0.728033408970743122e-3) + pow(R - 0.75e1, 3) * (-0.137272564589938475e-2) : (R < 0.80e1 ? -0.280179565206541553e-1 + R * 0.331647583001989108e-2 + pow(R - 0.775e1, 2) * (-0.175757764339528168e-2) + pow(R - 0.775e1, 3) * 0.178539341262873123e-3 : (R < 0.825e1 ? -0.213625138844723145e-1 + R * 0.247116313480903911e-2 + pow(R - 0.80e1, 2) * (-0.162367313744812684e-2) + pow(R - 0.80e1, 3) * 0.384902616847878937e-3 : (R < 0.85e1 ? -0.153557238956376144e-1 + R * 0.173149580674395310e-2 + pow(R - 0.825e1, 2) * (-0.133499617481221762e-2) + pow(R - 0.825e1, 3) * 0.536535656945619959e-3 : (R < 0.875e1 ? -0.106121477472287569e-1 + R * 0.116459815501514783e-2 + pow(R - 0.85e1, 2) * (-0.932594432103002599e-3) + pow(R - 0.85e1, 3) * 0.411853334569644452e-3 : (R < 0.90e1 ? -0.725959592746023077e-2 + R * 0.775523439195455037e-3 + pow(R - 0.875e1, 2) * (-0.623704431175769233e-3) + pow(R - 0.875e1, 3) * 0.160819484775796579e-3 : (R < 0.925e1 ? -0.476077759022729054e-2 + R * 0.493824877003032283e-3 + pow(R - 0.90e1, 2) * (-0.503089817593921785e-3) + pow(R - 0.90e1, 3) * 0.401086383927170588e-3 : (R < 0.95e1 ? -0.315479751982984669e-2 + R * 0.317483665192415875e-3 + pow(R - 0.925e1, 2) * (-0.202275029648543844e-3) + pow(R - 0.925e1, 3) * 0.631631651155213446e-4 : (R < 0.100e2 ? -0.231815578175939042e-2 + R * 0.228189243827304220e-3 + pow(R - 0.95e1, 2) * (-0.154902655811902832e-3) + pow(R - 0.95e1, 3) * 0.662424686345887566e-4 : (R < 0.105e2 ? -0.129639309377342963e-2 + R * 0.122968439491342969e-3 + pow(R - 0.100e2, 2) * (-0.555389528600196903e-4) + pow(R - 0.100e2, 3) * (-0.387321336533249910e-5) : (R < 0.110e2 ? -0.697101423376900804e-3 + R * 0.645245766073238936e-4 + pow(R - 0.105e2, 2) * (-0.613487729080184398e-4) + pow(R - 0.105e2, 3) * 0.221374333067412617e-4 : (R < 0.120e2 ? -0.217468760231675557e-3 + R * 0.197788786793614145e-4 + pow(R - 0.110e2, 2) * (-0.281426229479065421e-4) + pow(R - 0.110e2, 3) * 0.104116769955451278e-4 : (R < 0.140e2 ? 0.654028727257954481e-4 + R * (-0.527133622981628635e-5) + pow(R - 0.120e2, 2) * 0.309240803872884005e-5 + pow(R - 0.120e2, 3) * (-0.644839431660348523e-6) : (R < 0.160e2 ? 0.777196377755150874e-5 + R * (-0.639777254825107784e-6) + pow(R - 0.140e2, 2) * (-0.776628551233251087e-6) + pow(R - 0.140e2, 3) * 0.340576200697902450e-6 : (R < 0.180e2 ? -0.829634407686748021e-5 + R * 0.340622948616717478e-6 + pow(R - 0.160e2, 2) * 0.126682865295416382e-5 + pow(R - 0.160e2, 3) * (-0.359914878756261308e-6) : (R < 0.200e2 ? -0.195783976965482579e-4 + R * 0.108895901535823666e-5 + pow(R - 0.180e2, 2) * (-0.892660619583404024e-6) + pow(R - 0.180e2, 3) * 0.172599437252142802e-6 : (R < 0.250e2 ? 0.822073994929330960e-5 + R * (-0.410490215949665445e-6) + pow(R - 0.200e2, 2) * 0.142936003929452920e-6 + pow(R - 0.200e2, 3) * (-0.122367308231039644e-7) : -0.252558199440165976e-5 + R * 0.101115011612066381e-6 + pow(R - 0.250e2, 2) * (-0.406149584171065550e-7) + pow(R - 0.250e2, 3) * 0.406516495013865530e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3499401696e1 * (R - 0.300e2) * (R - 0.250e2) + 0.3732709104e2 * R + 0.2192897750e4 - 0.1866354552e1 * R * R + 0.75000e3 * (0.684316888e-2 * R - 0.2830565609e0) * R) * pow(R, -6));
}

static double radcoeff_3_8_10_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.960520318400000239e-1 + R * 0.693889390390722838e-17 + pow(R - 0.475e1, 2) * 0.397995013075760240e0 + pow(R - 0.475e1, 3) * (-0.612930394703041004e0) : (R < 0.525e1 ? -0.501119668595299661e0 + R * 0.840730575310599249e-1 + pow(R - 0.50e1, 2) * (-0.617027829515205545e-1) + pow(R - 0.50e1, 3) * 0.149403841091234422e-1 : (R < 0.55e1 ? -0.357479784387741528e0 + R * 0.560229880757602827e-1 + pow(R - 0.525e1, 2) * (-0.504974948696779724e-1) + pow(R - 0.525e1, 3) * 0.603930189065472744e-1 : (R < 0.575e1 ? -0.283104426752444072e0 + R * 0.420979316858989192e-1 + pow(R - 0.55e1, 2) * (-0.520273068976751397e-2) + pow(R - 0.55e1, 3) * 0.467246506646873255e-1 : (R < 0.60e1 ? -0.318116688018703186e0 + R * 0.482574383406440405e-1 + pow(R - 0.575e1, 2) * 0.298407573087479810e-1 + pow(R - 0.575e1, 3) * (-0.710156516452966069e-1) : (R < 0.625e1 ? -0.326990924069149536e0 + R * 0.498623823115249207e-1 + pow(R - 0.60e1, 2) * (-0.234209814252244811e-1) + pow(R - 0.60e1, 3) * (-0.118991679235008196e-1) : (R < 0.65e1 ? -0.241505755542851697e0 + R * 0.359207976132562695e-1 + pow(R - 0.625e1, 2) * (-0.323453573678500958e-1) + pow(R - 0.625e1, 3) * 0.117817977712999962e-1 : (R < 0.675e1 ? -0.152579904376424824e0 + R * 0.219572060114499729e-1 + pow(R - 0.65e1, 2) * (-0.235090090393750978e-1) + pow(R - 0.65e1, 3) * 0.127272465343008807e-1 : (R < 0.70e1 ? -0.906153701013708984e-1 + R * 0.125890602169438370e-1 + pow(R - 0.675e1, 2) * (-0.139635741386494368e-1) + pow(R - 0.675e1, 3) * 0.828232725949636442e-2 : (R < 0.725e1 ? -0.533567271644228083e-1 + R * 0.716020950877468716e-2 + pow(R - 0.70e1, 2) * (-0.775182869402716267e-2) + pow(R - 0.70e1, 3) * 0.449796737171365840e-2 : (R < 0.75e1 ? -0.317849810976912756e-1 + R * 0.412766404395741721e-2 + pow(R - 0.725e1, 2) * (-0.437835316524191887e-2) + pow(R - 0.725e1, 3) * 0.228842539764900809e-2 : (R < 0.775e1 ? -0.188221453694673441e-1 + R * 0.236756722339564584e-2 + pow(R - 0.75e1, 2) * (-0.266203411700516269e-2) + pow(R - 0.75e1, 3) * 0.166518985369031405e-2 : (R < 0.80e1 ? -0.110668507130649886e-1 + R * 0.134877326245999856e-2 + pow(R - 0.775e1, 2) * (-0.141314172673742710e-2) + pow(R - 0.775e1, 3) * 0.766121286789728500e-3 : (R < 0.825e1 ? -0.663981644911487267e-2 + R * 0.785850140364359072e-3 + pow(R - 0.80e1, 2) * (-0.838550761645130726e-3) + pow(R - 0.80e1, 3) * 0.601727315950776427e-3 : (R < 0.85e1 ? -0.415459893248115632e-2 + R * 0.479398631282564383e-3 + pow(R - 0.825e1, 2) * (-0.387255274682048352e-3) + pow(R - 0.825e1, 3) * 0.508288222071632563e-4 : (R < 0.875e1 ? -0.261318170479575866e-2 + R * 0.295301398105383387e-3 + pow(R - 0.85e1, 2) * (-0.349133658026675906e-3) + pow(R - 0.85e1, 3) * 0.276722801300570030e-3 : (R < 0.90e1 ? -0.155721735666914502e-2 + R * 0.172620094335902301e-3 + pow(R - 0.875e1, 2) * (-0.141591557051248357e-3) + pow(R - 0.875e1, 3) * (-0.381196689443341815e-6) : (R < 0.925e1 ? -0.928267509039067281e-3 + R * 0.101752841431007482e-3 + pow(R - 0.90e1, 2) * (-0.141877454568330863e-3) + pow(R - 0.90e1, 3) * 0.645122171372038557e-4 : (R < 0.95e1 ? -0.391831995774626963e-3 + R * 0.429101548600677768e-4 + pow(R - 0.925e1, 2) * (-0.934932917154279714e-4) + pow(R - 0.925e1, 3) * 0.747851677566274198e-4 : (R < 0.100e2 ? -0.856247526788536434e-4 + R * 0.101857279567214357e-4 + pow(R - 0.95e1, 2) * (-0.374044158979573997e-4) + pow(R - 0.95e1, 3) * 0.243225676410290588e-4 : (R < 0.105e2 ? 0.996893659736416916e-4 + R * (-0.897676221046416992e-5) + pow(R - 0.100e2, 2) * (-0.920564436413809453e-6) + pow(R - 0.100e2, 3) * 0.104193635306842944e-4 : (R < 0.110e2 ? 0.283750840840799513e-4 + R * (-0.208280399886475720e-5) + pow(R - 0.105e2, 2) * 0.147084808596126352e-4 + pow(R - 0.105e2, 3) * (-0.156685531237662375e-4) : (R < 0.120e2 ? -0.243409102615517090e-5 + R * 0.874262017923197309e-6 + pow(R - 0.110e2, 2) * (-0.879434882603672280e-5) + pow(R - 0.110e2, 3) * 0.396604394111352514e-5 : (R < 0.140e2 ? 0.610243940337160736e-4 + R * (-0.481630381080967287e-5) + pow(R - 0.120e2, 2) * 0.310378299730385262e-5 + pow(R - 0.120e2, 3) * (-0.622939222199507892e-6) : (R < 0.160e2 ? -0.702046274162988568e-6 + R * 0.123557512011642048e-6 + pow(R - 0.140e2, 2) * (-0.633852335893194735e-6) + pow(R - 0.140e2, 3) * 0.165529907643686840e-6 : (R < 0.180e2 ? 0.687159087299031399e-5 + R * (-0.425492939836894599e-6) + pow(R - 0.160e2, 2) * 0.359327109968926465e-6 + pow(R - 0.160e2, 3) * (-0.756890827377395747e-7) : (R < 0.200e2 ? -0.181932339544685217e-5 + R * 0.103546507185936231e-6 + pow(R - 0.180e2, 2) * (-0.948073864575110099e-7) + pow(R - 0.180e2, 3) * 0.186141552197714433e-7 : (R < 0.250e2 ? 0.106755396433700882e-5 + R * (-0.523131760068504483e-7) + pow(R - 0.200e2, 2) * 0.168775448611176601e-7 + pow(R - 0.200e2, 3) * (-0.141758650714951372e-8) : -0.249117241902815355e-6 + R * 0.101432845681126142e-7 + pow(R - 0.250e2, 2) * (-0.438625274612504582e-8) + pow(R - 0.250e2, 3) * 0.445768669700504548e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.6812942144e1 * (R - 0.300e2) * (R - 0.250e2) + 0.7267153128e2 * R + 0.4269395566e4 - 0.3633576564e1 * R * R + 0.75000e3 * (0.1332300569e-1 * R - 0.5510864845e0) * R) * pow(R, -6));
}

static double radcoeff_3_8_11_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.704703668600000999e0 + R * (-0.222044604925031308e-15) + pow(R - 0.475e1, 2) * (-0.116230566172855490e2) + pow(R - 0.475e1, 3) * 0.211866550707421908e2 : (R < 0.525e1 ? 0.950445652989306566e1 + R * (-0.183903048287861304e1) + pow(R - 0.50e1, 2) * 0.426693468577109591e1 + pow(R - 0.50e1, 3) * (-0.548791264262657386e1) : (R < 0.55e1 ? 0.388685177011912675e1 + R * (-0.734546760485548011e0) + pow(R - 0.525e1, 2) * 0.151000203801165023e0 + pow(R - 0.525e1, 3) * 0.680279256564108259e0 : (R < 0.575e1 ? 0.279013010248557380e1 + R * (-0.531494297979195229e0) + pow(R - 0.55e1, 2) * 0.661209646224246161e0 + pow(R - 0.55e1, 3) * (-0.221410802829861503e0) : (R < 0.60e1 ? 0.116572695048660901e1 + R * (-0.242404000397671127e0) + pow(R - 0.575e1, 2) * 0.495151544101850027e0 + pow(R - 0.575e1, 3) * 0.622162427553378805e-1 : (R < 0.625e1 ? -0.357801854619278270e0 + R * 0.168373171698797119e-1 + pow(R - 0.60e1, 2) * 0.541813726168353438e0 + pow(R - 0.60e1, 3) * (-0.514040049791489206e0) : (R < 0.65e1 ? -0.142274758343845131e1 + R * 0.191361670918152205e0 + pow(R - 0.625e1, 2) * 0.156283688824736505e0 + pow(R - 0.625e1, 3) * (-0.218350494789381289e0) : (R < 0.675e1 ? -0.165819890252382440e1 + R * 0.228562797557511438e0 + pow(R - 0.65e1, 2) * (-0.747918226729945949e-2) + pow(R - 0.65e1, 3) * (-0.149287052650985186e0) : (R < 0.70e1 ? -0.144681529544966336e1 + R * 0.196831884051801992e0 + pow(R - 0.675e1, 2) * (-0.119444471755538364e0) + pow(R - 0.675e1, 3) * 0.884216971332128267e-2 : (R < 0.725e1 ? -0.104769211263696382e1 + R * 0.138767554995280540e0 + pow(R - 0.70e1, 2) * (-0.112812844470547402e0) + pow(R - 0.70e1, 3) * 0.440812384377007663e-1 : (R < 0.75e1 ? -0.705030518361299152e0 + R * 0.906263649670757399e-1 + pow(R - 0.725e1, 2) * (-0.797519156422718256e-1) + pow(R - 0.725e1, 3) * 0.363096784558753632e-1 : (R < 0.775e1 ? -0.461438476033123490e0 + R * 0.575584718564164655e-1 + pow(R - 0.75e1, 2) * (-0.525196568003652997e-1) + pow(R - 0.75e1, 3) * 0.254646826187977515e-1 : (R < 0.80e1 ? -0.297812765746252539e0 + R * 0.360732714472583940e-1 + pow(R - 0.775e1, 2) * (-0.334211448362669861e-1) + pow(R - 0.775e1, 3) * 0.163135117089336368e-1 : (R < 0.825e1 ? -0.190432376896399636e0 + R * 0.224214824745499544e-1 + pow(R - 0.80e1, 2) * (-0.211860110545667585e-1) + pow(R - 0.80e1, 3) * 0.105646670254677527e-1 : (R < 0.85e1 ? -0.120541353369969698e0 + R * 0.138093520145417814e-1 + pow(R - 0.825e1, 2) * (-0.132625107854659439e-1) + pow(R - 0.825e1, 3) * 0.660562722919524632e-2 : (R < 0.875e1 ? -0.754290949269048050e-1 + R * 0.841665172728291860e-2 + pow(R - 0.85e1, 2) * (-0.830829036356950899e-2) + pow(R - 0.85e1, 3) * 0.430201208975133746e-2 : (R < 0.90e1 ? -0.465903623798572253e-1 + R * 0.506913381232653934e-2 + pow(R - 0.875e1, 2) * (-0.508178129625600546e-2) + pow(R - 0.875e1, 3) * 0.260300946779939806e-2 : (R < 0.925e1 ? -0.283918643316983139e-1 + R * 0.301630743941092364e-2 + pow(R - 0.90e1, 2) * (-0.312952419540645692e-2) + pow(R - 0.90e1, 3) * 0.165106747265105110e-2 : (R < 0.95e1 ? -0.169511824087753456e-1 + R * 0.176112049282976715e-2 + pow(R - 0.925e1, 2) * (-0.189122359091816860e-2) + pow(R - 0.925e1, 3) * 0.110857117599639913e-2 : (R < 0.100e2 ? -0.100433928089650737e-1 + R * 0.102336579287000775e-2 + pow(R - 0.95e1, 2) * (-0.105979520892086920e-2) + pow(R - 0.95e1, 3) * 0.477482271961707162e-3 : (R < 0.105e2 ? -0.323182127765419061e-2 + R * 0.321682287920419061e-3 + pow(R - 0.100e2, 2) * (-0.343571800978308345e-3) + pow(R - 0.100e2, 3) * 0.115720976834940501e-3 : (R < 0.110e2 ? -0.607047888097318766e-3 + R * 0.649012195683160782e-4 + pow(R - 0.105e2, 2) * (-0.169990335725897593e-3) + pow(R - 0.105e2, 3) * 0.980592271785308742e-4 : (R < 0.120e2 ? 0.423617000130516955e-3 + R * (-0.315446957736833594e-4) + pow(R - 0.110e2, 2) * (-0.229014949581012922e-4) + pow(R - 0.110e2, 3) * 0.135360022617846491e-4 : (R < 0.140e2 ? 0.476591305004383842e-3 + R * (-0.367396789045319863e-4) + pow(R - 0.120e2, 2) * 0.177065118272526619e-4 + pow(R - 0.120e2, 3) * (-0.308405427874333302e-5) : (R < 0.160e2 ? 0.493013745881787409e-4 + R * (-0.292228294044133880e-5) + pow(R - 0.140e2, 2) * (-0.797813845207335395e-6) + pow(R - 0.140e2, 3) * 0.310655508089002425e-6 : (R < 0.180e2 ? 0.400095918122424167e-4 + R * (-0.238567222420265085e-5) + pow(R - 0.160e2, 2) * 0.106611920332667937e-5 + pow(R - 0.160e2, 3) * (-0.164800024737676971e-6) : (R < 0.200e2 ? 0.179189113106502784e-5 + R * (-0.987957077480570970e-7) + pow(R - 0.180e2, 2) * 0.773190549006175118e-7 + pow(R - 0.180e2, 3) * (-0.148454647507944805e-7) : (R < 0.250e2 ? -0.640209219197583471e-6 + R * 0.323349348448791709e-7 + pow(R - 0.200e2, 2) * (-0.117537336041493778e-7) + pow(R - 0.200e2, 3) * 0.101632072223470862e-8 : 0.225819577825286456e-6 + R * (-0.897834702901145829e-8) + pow(R - 0.250e2, 2) * 0.349107722937125027e-8 + pow(R - 0.250e2, 3) * (-0.346930379913791699e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2076632864e1 * (R - 0.300e2) * (R - 0.250e2) + 0.2215085740e2 * R + 0.1301323070e4 - 0.1107542870e1 * R * R + 0.75000e3 * (0.4060914710e-2 * R - 0.1679731656e0) * R) * pow(R, -6));
}

static double radcoeff_3_8_11_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.174512480000000247e0 + R * 0.555111512312578270e-16 + pow(R - 0.475e1, 2) * 0.280385220533248214e1 + pow(R - 0.475e1, 3) * (-0.475246523732992898e1) : (R < 0.525e1 ? -0.262772333980439621e1 + R * 0.510838870666879274e0 + pow(R - 0.50e1, 2) * (-0.760496722664964930e0) + pow(R - 0.50e1, 3) * 0.989990854389791286e0 : (R < 0.55e1 ? -0.163800412816553442e1 + R * 0.316213794532482717e0 + pow(R - 0.525e1, 2) * (-0.180035818726214207e-1) + pow(R - 0.525e1, 3) * (-0.303631675909238008e0) : (R < 0.575e1 ? -0.128124358103754443e1 + R * 0.250281064363189865e0 + pow(R - 0.55e1, 2) * (-0.245727338804549916e0) + pow(R - 0.55e1, 3) * 0.446060367671614194e-1 : (R < 0.60e1 ? -0.637529354714856611e0 + R * 0.135781026854757680e0 + pow(R - 0.575e1, 2) * (-0.212272811229178848e0) + pow(R - 0.575e1, 3) * (-0.453835015594076588e-1) : (R < 0.625e1 ? 0.363693503133240836e-1 + R * 0.211352146977793198e-1 + pow(R - 0.60e1, 2) * (-0.246310437398734594e0) + pow(R - 0.60e1, 3) * 0.131638820030469172e0 : (R < 0.65e1 ? 0.638487679186718782e0 + R * (-0.773377252458750108e-1) + pow(R - 0.625e1, 2) * (-0.147581322375882701e0) + pow(R - 0.625e1, 3) * 0.127360432637530940e0 : (R < 0.675e1 ? 0.955672623742815475e0 + R * (-0.127248305314279303e0) + pow(R - 0.65e1, 2) * (-0.520609978977344956e-1) + pow(R - 0.65e1, 3) * 0.118460954699406651e0 : (R < 0.70e1 ? 0.980048485904802869e0 + R * (-0.131067375257007818e0) + pow(R - 0.675e1, 2) * 0.367847181268204856e-1 + pow(R - 0.675e1, 3) * 0.369399514448431748e-1 : (R < 0.725e1 ? 0.805694517813826394e0 + R * (-0.105748775297689473e0) + pow(R - 0.70e1, 2) * 0.644896817104528702e-1 + pow(R - 0.70e1, 3) * (-0.100319783987799505e-1) : (R < 0.75e1 ? 0.589430497693698596e0 + R * (-0.753849303922342895e-1) + pow(R - 0.725e1, 2) * 0.569656979113679074e-1 + pow(R - 0.725e1, 3) * (-0.191613402497230745e-1) : (R < 0.775e1 ? 0.406015725430300511e0 + R * (-0.504948327333734001e-1) + pow(R - 0.75e1, 2) * 0.425946927240756015e-1 + pow(R - 0.75e1, 3) * (-0.179773390023279939e-1) : (R < 0.80e1 ? 0.269465884235608799e0 + R * (-0.325682374342721043e-1) + pow(R - 0.775e1, 2) * 0.291116884723296061e-1 + pow(R - 0.775e1, 3) * (-0.134575584609647921e-1) : (R < 0.825e1 ? 0.174814674216305588e0 + R * (-0.205356854095381999e-1) + pow(R - 0.80e1, 2) * 0.190185196266060112e-1 + pow(R - 0.80e1, 3) * (-0.935096462581286314e-2) : (R < 0.85e1 ? 0.111870602816494608e0 + R * (-0.127797314635751044e-1) + pow(R - 0.825e1, 2) * 0.120052961572463639e-1 + pow(R - 0.825e1, 3) * (-0.575275852378377434e-2) : (R < 0.875e1 ? 0.706769972033717275e-1 + R * (-0.785572560816137980e-2) + pow(R - 0.85e1, 2) * 0.769072726440853290e-2 + pow(R - 0.85e1, 3) * (-0.409515788705204584e-2) : (R < 0.90e1 ? 0.441653674420695169e-1 + R * (-0.477820407977937265e-2) + pow(R - 0.875e1, 2) * 0.461935884911949830e-2 + pow(R - 0.875e1, 3) * (-0.229665722400803187e-2) : (R < 0.925e1 ? 0.275066863454901597e-1 + R * (-0.289914788472112918e-2) + pow(R - 0.90e1, 2) * 0.289686593111347429e-2 + pow(R - 0.90e1, 3) * (-0.161663785051583222e-2) : (R < 0.95e1 ? 0.170683318403590210e-1 + R * (-0.175383451613611054e-2) + pow(R - 0.925e1, 2) * 0.168438754322660007e-2 + pow(R - 0.925e1, 3) * (-0.963092545128631716e-3) : (R < 0.100e2 ? 0.108732255064770775e-1 + R * (-0.109222059673442910e-2) + pow(R - 0.95e1, 2) * 0.962068134380126227e-3 + pow(R - 0.95e1, 3) * (-0.388130105822536103e-3) : (R < 0.105e2 ? 0.435552072671204979e-2 + R * (-0.421250041721204962e-3) + pow(R - 0.100e2, 2) * 0.379872975646322044e-3 + pow(R - 0.100e2, 3) * (-0.115384650007824331e-3) : (R < 0.110e2 ? 0.135605376392788717e-2 + R * (-0.127915553580751156e-3) + pow(R - 0.105e2, 2) * 0.206796000634585541e-3 + pow(R - 0.105e2, 3) * (-0.118880253186166409e-3) : (R < 0.120e2 ? 0.988988142436947814e-4 + R * (-0.102797428357904339e-4) + pow(R - 0.110e2, 2) * 0.284756208553359270e-4 + pow(R - 0.110e2, 3) * (-0.116197490125454903e-4) : (R < 0.140e2 ? -0.149349249989939295e-3 + R * 0.118122518372449408e-4 + pow(R - 0.120e2, 2) * (-0.638362618230054557e-5) + pow(R - 0.120e2, 3) * 0.111480901133903688e-5 : (R < 0.160e2 ? 0.422986967534314591e-5 + R * (-0.344544755888796096e-6) + pow(R - 0.140e2, 2) * 0.305227885733676055e-6 + pow(R - 0.140e2, 3) * (-0.501109350571390099e-7) : (R < 0.180e2 ? -0.486339141816384062e-5 + R * 0.275035566360240058e-6 + pow(R - 0.160e2, 2) * 0.456227539084200372e-8 + pow(R - 0.160e2, 3) * (-0.151964883104810147e-7) : (R < 0.200e2 ? -0.201275657616104643e-5 + R * 0.110926808197835917e-6 + pow(R - 0.180e2, 2) * (-0.866166544720440793e-7) + pow(R - 0.180e2, 3) * 0.166247793365630597e-7 : (R < 0.250e2 ? 0.713160357631673324e-6 + R * (-0.360424576515836709e-7) + pow(R - 0.200e2, 2) * 0.131320215473342839e-7 + pow(R - 0.200e2, 3) * (-0.113609611060351002e-8) : -0.253376296962397902e-6 + R * 0.100705495264959152e-7 + pow(R - 0.250e2, 2) * (-0.390942011171836619e-8) + pow(R - 0.250e2, 3) * 0.388362178883836688e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2460414528e1 * (R - 0.300e2) * (R - 0.250e2) - 0.2624431476e2 * R - 0.1541945864e4 + 0.1312215738e1 * R * R + 0.75000e3 * (-0.481163365e-2 * R + 0.1990290639e0) * R) * pow(R, -6));
}

static double radcoeff_3_10_7_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.222134387200000533e0 + R * (-0.111022302462515654e-15) + pow(R - 0.475e1, 2) * (-0.703185348219500916e1) + pow(R - 0.475e1, 3) * 0.148681679319800395e2 : (R < 0.525e1 ? 0.365568493775623615e1 + R * (-0.728145253851247287e0) + pow(R - 0.50e1, 2) * 0.411927246679001957e1 + pow(R - 0.50e1, 3) * (-0.669829432074011955e1) : (R < 0.55e1 ? -0.410978135176196968e0 + R * 0.755607944049898894e-1 + pow(R - 0.525e1, 2) * (-0.904448273765070199e0) + pow(R - 0.525e1, 3) * 0.163947292474044226e1 : (R < 0.575e1 ? 0.354636911377917252e0 + R * (-0.692621690887122304e-1) + pow(R - 0.55e1, 2) * 0.325156419790261608e0 + pow(R - 0.55e1, 3) * (-0.372767443501650642e0) : (R < 0.60e1 ? -0.163800110561689694e0 + R * 0.234221451498590749e-1 + pow(R - 0.575e1, 2) * 0.455808371640236340e-1 + pow(R - 0.575e1, 3) * (-0.393927302538397001e-1) : (R < 0.625e1 ? -0.253992509605655614e0 + R * 0.388264268092759421e-1 + pow(R - 0.60e1, 2) * 0.160362894736438590e-1 + pow(R - 0.60e1, 3) * (-0.608440809229905955e-1) : (R < 0.65e1 ? -0.232752677551482101e0 + R * 0.354363063730371367e-1 + pow(R - 0.625e1, 2) * (-0.295967712185990876e-1) + pow(R - 0.625e1, 3) * (-0.533320045419787003e-2) : (R < 0.675e1 ? -0.131996462495740707e0 + R * 0.196379456785754948e-1 + pow(R - 0.65e1, 2) * (-0.335966715592474902e-1) + pow(R - 0.65e1, 3) * 0.217612177797820508e-1 : (R < 0.70e1 ? -0.479090101804609675e-1 + R * 0.691983823266088469e-2 + pow(R - 0.675e1, 2) * (-0.172757582244109503e-1) + pow(R - 0.675e1, 3) * 0.178714248742696535e-1 : (R < 0.725e1 ? -0.117005954178667822e-1 + R * 0.163285128438096869e-2 + pow(R - 0.70e1, 2) * (-0.387218956870871017e-2) + pow(R - 0.70e1, 3) * 0.357438369593934173e-2 : (R < 0.75e1 ? -0.270899817078049197e-2 + R * 0.366953443015240318e-3 + pow(R - 0.725e1, 2) * (-0.119140179675420376e-2) + pow(R - 0.725e1, 3) * 0.155222560021297065e-2 : (R < 0.775e1 ? -0.474267770547527807e-3 + R * 0.622948446780703782e-4 + pow(R - 0.75e1, 2) * (-0.272325965944758132e-4) + pow(R - 0.75e1, 3) * (-0.216963484951222926e-3) : (R < 0.80e1 ? -0.585584864147057726e-4 + R * 0.799789295247816446e-5 + pow(R - 0.775e1, 2) * (-0.189955210307893015e-3) + pow(R - 0.775e1, 3) * 0.415766546567921378e-3 : (R < 0.825e1 ? 0.722366866104646148e-4 + R * (-0.902348471998307769e-5) + pow(R - 0.80e1, 2) * 0.121869699618048046e-3 + pow(R - 0.80e1, 3) * (-0.173831913672462879e-3) : (R < 0.85e1 ? -0.156678850276496719e-3 + R * 0.193178812754541470e-4 + pow(R - 0.825e1, 2) * (-0.850423563629913045e-5) + pow(R - 0.825e1, 3) * (-0.422892309500698334e-4) : (R < 0.875e1 ? -0.543296709564151370e-4 + R * 0.713653265416648714e-5 + pow(R - 0.85e1, 2) * (-0.402211588488515123e-4) + pow(R - 0.85e1, 3) * 0.114571180448742237e-3 : (R < 0.90e1 ? -0.670540916499491303e-4 + R * 0.850804956387990038e-5 + pow(R - 0.875e1, 2) * 0.457072264877051720e-4 + pow(R - 0.875e1, 3) * (-0.123742634908899065e-3) : (R < 0.925e1 ? -0.629976914508251787e-4 + R * 0.815991876231390838e-5 + pow(R - 0.90e1, 2) * (-0.470997496939691400e-4) + pow(R - 0.90e1, 3) * 0.524562217788540305e-4 : (R < 0.95e1 ? 0.617357853455036533e-4 + R * (-0.555441450113553089e-5) + pow(R - 0.925e1, 2) * (-0.775758335982861882e-5) + pow(R - 0.925e1, 3) * (-0.269872221905170238e-4) : (R < 0.100e2 ? 0.145748771524831965e-3 + R * (-0.144933103417717867e-4) + pow(R - 0.95e1, 2) * (-0.279980000027163892e-4) + pow(R - 0.95e1, 3) * 0.467185288765199124e-4 : (R < 0.105e2 ? 0.741801210869823984e-4 + R * (-0.745241368709823909e-5) + pow(R - 0.100e2, 2) * 0.420797933120634827e-4 + pow(R - 0.100e2, 3) * (-0.389891856837340023e-4) : (R < 0.110e2 ? -0.549715713127297493e-4 + R * 0.538549036216473766e-5 + pow(R - 0.105e2, 2) * (-0.164039852135375242e-4) + pow(R - 0.105e2, 3) * 0.117990856184160926e-4 : (R < 0.120e2 ? 0.255036990831678663e-4 + R * (-0.216918063756071536e-5) + pow(R - 0.110e2, 2) * 0.129464321408661581e-5 + pow(R - 0.110e2, 3) * (-0.396707172525900491e-6) : (R < 0.140e2 ? 0.961165619788222044e-5 + R * (-0.770015726965185060e-6) + pow(R - 0.120e2, 2) * 0.104521696508914359e-6 + pow(R - 0.120e2, 3) * 0.114639530686839087e-6 : (R < 0.160e2 ? -0.141657969304755824e-4 + R * 0.102374542731254158e-5 + pow(R - 0.140e2, 2) * 0.792358880629948934e-6 + pow(R - 0.140e2, 3) * (-0.354560421268109921e-6) : (R < 0.180e2 ? 0.353178774515969760e-5 + R * (-0.615441053849811022e-7) + pow(R - 0.160e2, 2) * (-0.133500364697871038e-5) + pow(R - 0.160e2, 3) * 0.363666081585600408e-6 : (R < 0.200e2 ? 0.186694907698071042e-4 + R * (-0.103756571427261688e-5) + pow(R - 0.180e2, 2) * 0.846992842534892282e-6 + pow(R - 0.180e2, 3) * (-0.163668581036791852e-6) : (R < 0.250e2 ? -0.773085446230899015e-5 + R * 0.386382683425449497e-6 + pow(R - 0.200e2, 2) * (-0.135018643685858990e-6) + pow(R - 0.200e2, 3) * 0.115686577313538189e-7 : 0.240318933714010125e-5 + R * (-0.961544235816040570e-7) + pow(R - 0.250e2, 2) * 0.385112222844482861e-7 + pow(R - 0.250e2, 3) * (-0.385219616642549500e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1024254016e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1092539780e2 * R - 0.6418636670e3 + 0.5462698900e0 * R * R + 0.75000e3 * (-0.2002983019e-2 * R + 0.828505716e-1) * R) * pow(R, -6));
}

static double radcoeff_3_10_7_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.203897595699999462e0 + R * (-0.111022302462515654e-15) + pow(R - 0.475e1, 2) * 0.535969753471176702e1 + pow(R - 0.475e1, 3) * (-0.112868561164470638e2) : (R < 0.525e1 ? -0.286308985418029227e1 + R * 0.563563245522058498e0 + pow(R - 0.50e1, 2) * (-0.310544455262353214e1) + pow(R - 0.50e1, 3) * 0.520284066806119139e1 : (R < 0.55e1 ? 0.543599147332286051e-1 + R * (-0.136264055282340202e-1) + pow(R - 0.525e1, 2) * 0.796685948422361734e0 + pow(R - 0.525e1, 3) * (-0.149645843291770242e1) : (R < 0.575e1 ? -0.566892975721826842e0 + R * 0.104130612510877615e0 + pow(R - 0.55e1, 2) * (-0.325657876265915192e0) + pow(R - 0.55e1, 3) * 0.404023910969618760e0 : (R < 0.60e1 ? -0.802556041271604154e-1 + R * 0.170561576847235510e-1 + pow(R - 0.575e1, 2) * (-0.226399430387010728e-1) + pow(R - 0.575e1, 3) * (-0.852539597607725463e-1) : (R < 0.625e1 ? 0.808278401586310091e-1 + R * (-0.102489312897718343e-1) + pow(R - 0.60e1, 2) * (-0.865804128592804895e-1) + pow(R - 0.60e1, 3) * 0.115813428873471305e0 : (R < 0.65e1 ? 0.212071077405226294e0 + R * (-0.318241198056362085e-1) + pow(R - 0.625e1, 2) * 0.279658795822990038e-3 + pow(R - 0.625e1, 3) * 0.436859210028874359e-1 : (R < 0.675e1 ? 0.158620041286941599e0 + R * (-0.234931802196833225e-1) + pow(R - 0.65e1, 2) * 0.330440995479885716e-1 + pow(R - 0.65e1, 3) * (-0.146798424850211086e-1) : (R < 0.70e1 ? 0.675112646405058164e-1 + R * (-0.972360091163049223e-2) + pow(R - 0.675e1, 2) * 0.220342176842227393e-1 + pow(R - 0.675e1, 3) * (-0.214366028388030573e-1) : (R < 0.725e1 ? 0.195692356574628835e-1 + R * (-0.272585510179469736e-2) + pow(R - 0.70e1, 2) * 0.595676555512044629e-2 + pow(R - 0.70e1, 3) * (-0.515819608616662449e-2) : (R < 0.75e1 ? 0.527958435814269381e-2 + R * (-0.714634090390716412e-3) + pow(R - 0.725e1, 2) * 0.208811849049547792e-2 + pow(R - 0.725e1, 3) * (-0.240012264181044916e-2) : (R < 0.775e1 ? 0.917317973208275428e-3 + R * (-0.120597840482436724e-3) + pow(R - 0.75e1, 2) * 0.288026509137640939e-3 + pow(R - 0.75e1, 3) * (-0.188812523551576042e-3) : (R < 0.80e1 ? 0.906349097304099815e-4 + R * (-0.119869340795367716e-4) + pow(R - 0.775e1, 2) * 0.146417116473958900e-3 + pow(R - 0.775e1, 3) * (-0.278312183983247272e-3) : (R < 0.825e1 ? -0.727628382860705020e-4 + R * 0.903808966058381332e-5 + pow(R - 0.80e1, 2) * (-0.623170215134765537e-4) + pow(R - 0.80e1, 3) * 0.675279455901652025e-4 : (R < 0.85e1 ? 0.769978949274875251e-4 + R * (-0.945893129799848805e-5) + pow(R - 0.825e1, 2) * (-0.116710623208526535e-4) + pow(R - 0.825e1, 3) * 0.210985790433864277e-4 : (R < 0.875e1 ? 0.925742733432137981e-4 + R * (-0.113384788877898583e-4) + pow(R - 0.85e1, 2) * 0.415287196168717063e-5 + pow(R - 0.85e1, 3) * (-0.345831479411092709e-5) : (R < 0.90e1 ? 0.802847745488681236e-4 + R * (-0.991047693084207037e-5) + pow(R - 0.875e1, 2) * 0.155913586610397532e-5 + pow(R - 0.875e1, 3) * 0.943295822770572431e-4 : (R < 0.925e1 ? -0.843411612264233094e-4 + R * 0.855588767915814570e-5 + pow(R - 0.90e1, 2) * 0.723063225738969102e-4 + pow(R - 0.90e1, 3) * (-0.151274529514117953e-3) : (R < 0.95e1 ? -0.154235660367437670e-3 + R * 0.163450746822094796e-4 + pow(R - 0.925e1, 2) * (-0.411495745616915679e-4) + pow(R - 0.925e1, 3) * 0.741515385314145463e-4 : (R < 0.100e2 ? -0.922708398293373220e-4 + R * 0.967370087600392898e-5 + pow(R - 0.95e1, 2) * 0.144640793368693452e-4 + pow(R - 0.95e1, 3) * (-0.318248122257543993e-4) : (R < 0.105e2 ? 0.141237680142528703e-5 + R * 0.269171043557471339e-6 + pow(R - 0.100e2, 2) * (-0.332731390017622605e-4) + pow(R - 0.100e2, 3) * 0.372808523012946332e-4 : (R < 0.110e2 ? 0.535354462344550148e-4 + R * (-0.504332873223381084e-5) + pow(R - 0.105e2, 2) * 0.226481394501796928e-4 + pow(R - 0.105e2, 3) * (-0.208348931714241408e-4) : (R < 0.120e2 ? -0.206485458371555135e-4 + R * 0.197864083937777374e-5 + pow(R - 0.110e2, 2) * (-0.860420030695652019e-5) + pow(R - 0.110e2, 3) * 0.382491021357874637e-5 : (R < 0.140e2 ? 0.433762037475883262e-4 + R * (-0.375502913379902752e-5) + pow(R - 0.120e2, 2) * 0.287053033377971850e-5 + pow(R - 0.120e2, 3) * (-0.473624782440102184e-6) : (R < 0.160e2 ? -0.301114084185406663e-4 + R * 0.204359481203861923e-5 + pow(R - 0.140e2, 2) * 0.287816391391051868e-7 + pow(R - 0.140e2, 3) * (-0.162990655329207401e-6) : (R < 0.180e2 ? -0.184802618631281546e-5 + R * 0.202833504644550968e-6 + pow(R - 0.160e2, 2) * (-0.949162292836139428e-6) + pow(R - 0.160e2, 3) * 0.246121337631931963e-6 : (R < 0.200e2 ? 0.115017714992028193e-4 + R * (-0.640359615116823291e-6) + pow(R - 0.180e2, 2) * 0.527565732955452352e-6 + pow(R - 0.180e2, 3) * (-0.102082079448520326e-6) : (R < 0.250e2 ? -0.491018177335483890e-5 + R * 0.244918363322741936e-6 + pow(R - 0.200e2, 2) * (-0.849267437356696851e-7) + pow(R - 0.200e2, 3) * 0.726330907422425920e-8 : 0.148754468727838749e-5 + R * (-0.596008934671354951e-7) + pow(R - 0.250e2, 2) * 0.240228923776941962e-7 + pow(R - 0.250e2, 3) * (-0.240625325525341936e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3780642208e1 * (R - 0.300e2) * (R - 0.250e2) - 0.4032698848e2 * R - 0.2369175732e4 + 0.2016349424e1 * R * R + 0.75000e3 * (-0.739321486e-2 * R + 0.3058093461e0) * R) * pow(R, -6));
}

static double radcoeff_3_10_8_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.140910856000000008e-1 + pow(R - 0.475e1, 2) * 0.270219204398805535e0 + pow(R - 0.475e1, 3) * (-0.523024464187222038e0) : (R < 0.525e1 ? -0.190587218399493080e0 + R * 0.370425151642986145e-1 + pow(R - 0.50e1, 2) * (-0.122049143741611035e0) + pow(R - 0.50e1, 3) * 0.144927455921666254e0 : (R < 0.55e1 ? -0.182347604857290013e-1 + R * 0.319184127880552376e-2 + pow(R - 0.525e1, 2) * (-0.133535518003613345e-1) + pow(R - 0.525e1, 3) * 0.256244442765569576e-1 : (R < 0.575e1 ? -0.837191624063607365e-2 + R * 0.131964868047928629e-2 + pow(R - 0.55e1, 2) * 0.586478140705638373e-2 + pow(R - 0.55e1, 3) * (-0.158495359398941119e-1) : (R < 0.60e1 ? -0.802648201184465518e-2 + R * 0.128025139527733153e-2 + pow(R - 0.575e1, 2) * (-0.602237054786420277e-2) + pow(R - 0.575e1, 3) * 0.109883988302195076e-1 : (R < 0.625e1 ? -0.252602347976832713e-2 + R * 0.329390902011387826e-3 + pow(R - 0.60e1, 2) * 0.221892857480042796e-2 + pow(R - 0.60e1, 3) * (-0.242406160818391505e-2) : (R < 0.65e1 ? -0.651867100563198465e-2 + R * 0.984343637877117600e-3 + pow(R - 0.625e1, 2) * 0.400882368662491568e-3 + pow(R - 0.625e1, 3) * (-0.220655183428384704e-2) : (R < 0.675e1 ? -0.514172588012092296e-2 + R * 0.771056353280142009e-3 + pow(R - 0.65e1, 2) * (-0.125403150705039393e-2) + pow(R - 0.65e1, 3) * 0.609664522919304641e-3 : (R < 0.70e1 ? -0.174982716665262445e-2 + R * 0.258352697802314733e-3 + pow(R - 0.675e1, 2) * (-0.796783114860915393e-3) + pow(R - 0.675e1, 3) * 0.822043484046625647e-3 : (R < 0.725e1 ? -0.769728526941955063e-4 + R * 0.140942936305993587e-4 + pow(R - 0.70e1, 2) * (-0.180250501825946158e-3) + pow(R - 0.70e1, 3) * 0.149219375774194851e-3 : (R < 0.75e1 ? 0.364656023864163399e-3 + R * (-0.480523243247121874e-4) + pow(R - 0.725e1, 2) * (-0.683359699953000130e-4) + pow(R - 0.725e1, 3) * 0.249348333816594957e-3 : (R < 0.775e1 ? 0.269894886509129683e-3 + R * (-0.354674967317506260e-4) + pow(R - 0.75e1, 2) * 0.118675280367146218e-3 + pow(R - 0.75e1, 3) * (-0.167660399296574785e-3) : (R < 0.80e1 ? 0.584572040986110176e-4 + R * (-0.756618141628529256e-5) + pow(R - 0.775e1, 2) * (-0.707001910528486589e-5) + pow(R - 0.775e1, 3) * 0.267547810017041301e-4 : (R < 0.825e1 ? 0.465812762758656087e-4 + R * (-0.608466953110820090e-5) + pow(R - 0.80e1, 2) * 0.129960666459932325e-4 + pow(R - 0.80e1, 3) * (-0.326816251262417268e-4) : (R < 0.85e1 ? 0.438284940010757378e-4 + R * (-0.571444091928190757e-5) + pow(R - 0.825e1, 2) * (-0.115151521986880626e-4) + pow(R - 0.825e1, 3) * 0.140044030799262747e-3 : (R < 0.875e1 ? -0.128958792272004574e-3 + R * 0.147862387562358313e-4 + pow(R - 0.85e1, 2) * 0.935178709007590130e-4 + pow(R - 0.85e1, 3) * (-0.363049334166809349e-3) : (R < 0.90e1 ? 0.577005574899373857e-4 + R * (-0.652657594966141522e-5) + pow(R - 0.875e1, 2) * (-0.178769129724347999e-3) + pow(R - 0.875e1, 3) * 0.438091026827974674e-3 : (R < 0.925e1 ? 0.118555135163311512e-3 + R * (-0.137690732815901668e-4) + pow(R - 0.90e1, 2) * 0.149799140396633006e-3 + pow(R - 0.90e1, 3) * (-0.306448230617089299e-3) : (R < 0.95e1 ? -0.381955465232042992e-4 + R * 0.367145367602208597e-5 + pow(R - 0.925e1, 2) * (-0.800370325661839817e-4) + pow(R - 0.925e1, 3) * 0.159107638424382553e-3 : (R < 0.100e2 ? 0.560536195377326732e-4 + R * (-0.651438040249817533e-5) + pow(R - 0.95e1, 2) * 0.392936962521029331e-4 + pow(R - 0.95e1, 3) * (-0.276209434702131588e-4) : (R < 0.105e2 ? -0.123355460827448860e-3 + R * 0.120636082469448861e-4 + pow(R - 0.100e2, 2) * (-0.213771895321680901e-5) + pow(R - 0.100e2, 3) * (-0.147141790253459275e-4) : (R < 0.110e2 ? 0.125910458890543568e-4 + R * (-0.110974497528136733e-5) + pow(R - 0.105e2, 2) * (-0.242089874912356999e-4) + pow(R - 0.105e2, 3) * 0.263383758035968674e-4 : (R < 0.120e2 ? 0.588383580160135313e-4 + R * (-0.556495061381941160e-5) + pow(R - 0.110e2, 2) * 0.152985762141596029e-4 + pow(R - 0.110e2, 3) * (-0.669162092934019005e-5) : (R < 0.140e2 ? -0.588221623824506800e-4 + R * 0.495733902647922314e-5 + pow(R - 0.120e2, 2) * (-0.477628657386096729e-5) + pow(R - 0.120e2, 3) * 0.101048804056067792e-5 : (R < 0.160e2 ? 0.278666529685111675e-4 + R * (-0.202195078223651177e-5) + pow(R - 0.140e2, 2) * 0.128664166950310004e-5 + pow(R - 0.140e2, 3) * (-0.209186738592422104e-6) : (R < 0.180e2 ? -0.108414873006691700e-4 + R * 0.614375032666823145e-6 + pow(R - 0.160e2, 2) * 0.315212379485673633e-7 + pow(R - 0.160e2, 3) * (-0.405223712659894481e-7) : (R < 0.200e2 ? -0.455627825754594504e-5 + R * 0.254191529269219168e-6 + pow(R - 0.180e2, 2) * (-0.211612989647369325e-6) + pow(R - 0.180e2, 3) * 0.410085700563798650e-7 : (R < 0.250e2 ? 0.201232070257399369e-5 + R * (-0.100157588643699674e-6) + pow(R - 0.200e2, 2) * 0.344384306909098909e-7 + pow(R - 0.200e2, 3) * (-0.293935073243399088e-8) : -0.592462421121248101e-6 + R * 0.237754133328499235e-7 + pow(R - 0.250e2, 2) * (-0.965183029559996974e-8) + pow(R - 0.250e2, 3) * 0.968259446605996836e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2934057504e1 * (R - 0.300e2) * (R - 0.250e2) + 0.3129658384e2 * R + 0.1838717101e4 - 0.1564829192e1 * R * R + 0.75000e3 * (0.573778856e-2 * R - 0.2373369113e0) * R) * pow(R, -6));
}

static double radcoeff_3_10_9_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.154821670400000527e0 + R * 0.111022302462515654e-15 + pow(R - 0.475e1, 2) * 0.599098458526907329e1 + pow(R - 0.475e1, 3) * (-0.126950262962762910e2) : (R < 0.525e1 ? -0.305461923008365899e1 + R * 0.615174862082731755e0 + pow(R - 0.50e1, 2) * (-0.353028513693814627e1) + pow(R - 0.50e1, 3) * 0.578501232626887685e1 : (R < 0.55e1 ? 0.387505742247365892e0 + R * (-0.652778952109268340e-1) + pow(R - 0.525e1, 2) * 0.808474107763511585e0 + pow(R - 0.525e1, 3) * (-0.164177090639921675e1) : (R < 0.575e1 ? -0.117844845555366784e0 + R * 0.311271137209757770e-1 + pow(R - 0.55e1, 2) * (-0.422854072035901085e0) + pow(R - 0.55e1, 3) * 0.609221877887991758e0 : (R < 0.60e1 ? 0.424133986789613782e0 + R * (-0.660708201929763039e-1) + pow(R - 0.575e1, 2) * 0.340623363800927476e-1 + pow(R - 0.575e1, 3) * (-0.753972675527502245e-1) : (R < 0.625e1 ? 0.407719717364423584e0 + R * (-0.631766396690705972e-1) + pow(R - 0.60e1, 2) * (-0.224856142844699208e-1) + pow(R - 0.60e1, 3) * 0.125673999363009159e0 : (R < 0.65e1 ? 0.331271349347133370e0 + R * (-0.508555719307413404e-1) + pow(R - 0.625e1, 2) * 0.717698852377869484e-1 + pow(R - 0.625e1, 3) * (-0.381967577392863522e-1) : (R < 0.675e1 ? 0.148460314306766372e0 + R * (-0.221325213879640589e-1) + pow(R - 0.65e1, 2) * 0.431223169333221842e-1 + pow(R - 0.65e1, 3) * (-0.343202718298638298e-1) : (R < 0.70e1 ? 0.485179792524664186e-1 + R * (-0.700641388940243318e-2) + pow(R - 0.675e1, 2) * 0.173821130609243084e-1 + pow(R - 0.675e1, 3) * (-0.184704255012583009e-1) : (R < 0.725e1 ? 0.127207986774834740e-1 + R * (-0.177856214042621040e-2) + pow(R - 0.70e1, 2) * 0.352929393498058273e-2 + pow(R - 0.70e1, 3) * (-0.240619519550296351e-2) : (R < 0.75e1 ? 0.338101382807825352e-2 + R * (-0.465076772092724638e-3) + pow(R - 0.725e1, 2) * 0.172464753835335988e-2 + pow(R - 0.725e1, 3) * (-0.230350940952984496e-2) : (R < 0.775e1 ? 0.224693803031680010e-3 + R * (-0.346610172028906680e-4) + pow(R - 0.75e1, 2) * (-0.298451879402392716e-5) + pow(R - 0.75e1, 3) * 0.194256944982346407e-3 : (R < 0.80e1 ? -0.431720774782268907e-4 + R * 0.269900584287340842e-6 + pow(R - 0.775e1, 2) * 0.142708189942735900e-3 + pow(R - 0.775e1, 3) * (-0.212869643359540986e-3) : (R < 0.825e1 ? -0.289107198515930780e-3 + R * 0.317109374257413474e-4 + pow(R - 0.80e1, 2) * (-0.169440425769198466e-4) + pow(R - 0.80e1, 3) * (-0.500480694641821270e-4) : (R < 0.85e1 ? -0.143635919180165036e-3 + R * 0.138549031127472783e-4 + pow(R - 0.825e1, 2) * (-0.544800946750564435e-4) + pow(R - 0.825e1, 3) * 0.903282591362693341e-4 : (R < 0.875e1 ? -0.580498066777912421e-4 + R * 0.355140436326955748e-5 + pow(R - 0.85e1, 2) * 0.132660996771455621e-4 + pow(R - 0.85e1, 3) * 0.310303250791048356e-4 : (R < 0.90e1 ? -0.165684139789026825e-3 + R * 0.160026401541744952e-4 + pow(R - 0.875e1, 2) * 0.365388434864741905e-4 + pow(R - 0.875e1, 3) * (-0.403873847326886580e-4) : (R < 0.925e1 ? -0.260302598910292198e-3 + R * 0.266994272600324650e-4 + pow(R - 0.90e1, 2) * 0.624830493695769619e-5 + pow(R - 0.90e1, 3) * 0.369758057164976142e-5 : (R < 0.95e1 ? -0.295165706792684720e-3 + R * 0.305168760856956448e-4 + pow(R - 0.925e1, 2) * 0.902149036569501725e-5 + pow(R - 0.925e1, 3) * (-0.740073161779104030e-4) : (R < 0.100e2 ? -0.206784775255257022e-3 + R * 0.211512494851849504e-4 + pow(R - 0.95e1, 2) * (-0.464839967677377884e-4) + pow(R - 0.95e1, 3) * 0.377315844427357724e-4 : (R < 0.105e2 ? -0.318362420349899283e-4 + R * 0.296594104949899260e-5 + pow(R - 0.100e2, 2) * 0.101133798963658754e-4 + pow(R - 0.100e2, 3) * (-0.161895466867277206e-4) : (R < 0.110e2 ? -0.100293991504003016e-4 + R * 0.937160930819076248e-6 + pow(R - 0.105e2, 2) * (-0.141709401337257073e-4) + pow(R - 0.105e2, 3) * 0.122347688481751095e-4 : (R < 0.120e2 ? 0.429007103955282771e-4 + R * (-0.405770256677529806e-5) + pow(R - 0.110e2, 2) * 0.418121313853695779e-5 + pow(R - 0.110e2, 3) * (-0.120052326976165944e-5) : (R < 0.140e2 ? -0.112488773491636678e-4 + R * 0.703153901013639093e-6 + pow(R - 0.120e2, 2) * 0.579643329251979146e-6 + pow(R - 0.120e2, 3) * (-0.105859522004399326e-6) : (R < 0.160e2 ? -0.244528069499626906e-4 + R * 0.175141295396876360e-5 + pow(R - 0.140e2, 2) * (-0.555138027744167992e-7) + pow(R - 0.140e2, 3) * (-0.149126138604982462e-6) : (R < 0.180e2 ? 0.631723072021909598e-5 + R * (-0.260155920388693511e-6) + pow(R - 0.160e2, 2) * (-0.950270634404311612e-6) + pow(R - 0.160e2, 3) * 0.270056020299329148e-6 : (R < 0.200e2 ? 0.147639816369518078e-4 + R * (-0.820566214413989337e-6) + pow(R - 0.180e2, 2) * 0.670065487391663593e-6 + pow(R - 0.180e2, 3) * (-0.129486196454834453e-6) : (R < 0.250e2 ? -0.612019782729303372e-5 + R * 0.305861377694651700e-6 + pow(R - 0.200e2, 2) * (-0.106851691337343087e-6) + pow(R - 0.200e2, 3) * 0.915466214208255036e-8 : 0.190077397496469801e-5 + R * (-0.760558750225879197e-7) + pow(R - 0.250e2, 2) * 0.304682407938951648e-7 + pow(R - 0.250e2, 3) * (-0.304782066747551654e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.9504874880e0 * (R - 0.300e2) * (R - 0.250e2) - 0.1013859684e2 * R - 0.5956299262e3 + 0.5069298420e0 * R * R + 0.75000e3 * (-0.1858718682e-2 * R + 0.768830354e-1) * R) * pow(R, -6));
}

static double radcoeff_3_10_9_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.162053195000000011e0 + pow(R - 0.475e1, 2) * (-0.385633603897843091e1) + pow(R - 0.475e1, 3) * 0.795577971431372255e1 : (R < 0.525e1 ? 0.222763786590696178e1 + R * (-0.436459323055392368e0) + pow(R - 0.50e1, 2) * 0.211049874675686144e1 + pow(R - 0.50e1, 3) * (-0.354603458998116849e1) : (R < 0.55e1 ? 0.254705836386761475e0 + R * (-0.460914352984307524e-1) + pow(R - 0.525e1, 2) * (-0.549027195729014927e0) + pow(R - 0.525e1, 3) * 0.119633130801095167e1 : (R < 0.575e1 ? 0.515192440209866320e0 + R * (-0.962929129108847925e-1) + pow(R - 0.55e1, 2) * 0.348221285279198822e0 + pow(R - 0.55e1, 3) * (-0.447313235342638449e0) : (R < 0.60e1 ? 0.110903879136730991e-1 + R * (-0.605350189803010447e-2) + pow(R - 0.575e1, 2) * 0.127363587722199474e-1 + pow(R - 0.575e1, 3) * 0.104473546319601887e0 : (R < 0.625e1 ? -0.142223006428031373e0 + R * 0.199034674230052257e-1 + pow(R - 0.60e1, 2) * 0.910915185119213627e-1 + pow(R - 0.60e1, 3) * (-0.148252627375768997e0) : (R < 0.65e1 ? -0.249773681467557629e0 + R * 0.376518590460092201e-1 + pow(R - 0.625e1, 2) * (-0.200979520199054025e-1) + pow(R - 0.625e1, 3) * (-0.175387219365258293e-1) : (R < 0.675e1 ? -0.164610184574226492e0 + R * 0.243143726729579228e-1 + pow(R - 0.65e1, 2) * (-0.332519934722997762e-1) + pow(R - 0.65e1, 3) * 0.156403570418723326e-1 : (R < 0.70e1 ? -0.740134024995738882e-1 + R * 0.106209428821590936e-1 + pow(R - 0.675e1, 2) * (-0.215217256908955268e-1) + pow(R - 0.675e1, 3) * 0.194564617050365860e-1 : (R < 0.725e1 ? -0.252650692104398403e-1 + R * 0.350816660640569135e-2 + pow(R - 0.70e1, 2) * (-0.692937941211808645e-2) + pow(R - 0.70e1, 3) * 0.567075482598128344e-2 : (R < 0.75e1 ? -0.819923185218150719e-2 + R * 0.110674343021813898e-2 + pow(R - 0.725e1, 2) * (-0.267631329263212344e-2) + pow(R - 0.725e1, 3) * 0.266325995103827012e-2 : (R < 0.775e1 ? -0.203392245497314690e-2 + R * 0.267948024721752914e-3 + pow(R - 0.75e1, 2) * (-0.678868329353420953e-3) + pow(R - 0.75e1, 3) * 0.640343170185636991e-3 : (R < 0.80e1 ? -0.366230256455082860e-3 + R * 0.485782044548494009e-4 + pow(R - 0.775e1, 2) * (-0.198610951714193182e-3) + pow(R - 0.775e1, 3) * 0.245388482459182281e-3 : (R < 0.825e1 ? 0.515518372692040498e-4 + R * (-0.471693094115050590e-5) + pow(R - 0.80e1, 2) * (-0.145695898698064480e-4) + pow(R - 0.80e1, 3) * 0.327426804576338962e-4 : (R < 0.85e1 ? 0.606035666645408412e-4 + R * (-0.586247329024737478e-5) + pow(R - 0.825e1, 2) * 0.998742047341897418e-5 + pow(R - 0.825e1, 3) * (-0.261762724497179120e-4) : (R < 0.875e1 ? 0.600906733918099602e-4 + R * (-0.577681413785999535e-5) + pow(R - 0.85e1, 2) * (-0.964478386386945813e-5) + pow(R - 0.85e1, 3) * (-0.167122684827622558e-4) : (R < 0.90e1 ? 0.128841240089235638e-3 + R * (-0.137327564103126459e-4) + pow(R - 0.875e1, 2) * (-0.221789852259411508e-4) + pow(R - 0.875e1, 3) * 0.967538964607669340e-4 : (R < 0.925e1 ? 0.655000663840047992e-4 + R * (-0.668089343688942204e-5) + pow(R - 0.90e1, 2) * 0.503864371196340496e-4 + pow(R - 0.90e1, 3) * (-0.163882871664305420e-3) : (R < 0.95e1 ? 0.117285632698699462e-3 + R * (-0.122157133141296710e-4) + pow(R - 0.925e1, 2) * (-0.725257166285950353e-4) + pow(R - 0.925e1, 3) * 0.155073449716454869e-3 : (R < 0.100e2 ? 0.183448369739423007e-3 + R * (-0.194022998065918974e-4) + pow(R - 0.95e1, 2) * 0.437793706587461095e-4 + pow(R - 0.95e1, 3) * (-0.272803312671246218e-4) : (R < 0.105e2 ? -0.422080510881074245e-4 + R * 0.391682240181074243e-5 + pow(R - 0.100e2, 2) * 0.285887375805917346e-5 + pow(R - 0.100e2, 3) * (-0.421788975536131894e-5) : (R < 0.110e2 ? -0.388228615044637301e-4 + R * 0.361227884334892647e-5 + pow(R - 0.105e2, 2) * (-0.346796087498280495e-5) + pow(R - 0.105e2, 3) * 0.229868702169903516e-6 : (R < 0.120e2 ? -0.340996530352904533e-5 + R * 0.316719494993549594e-6 + pow(R - 0.110e2, 2) * (-0.312315782172794965e-5) + pow(R - 0.110e2, 3) * 0.121877641073439987e-5 : (R < 0.140e2 ? 0.257654902201097972e-4 + R * (-0.227326691625914990e-5) + pow(R - 0.120e2, 2) * 0.533171410475250263e-6 + pow(R - 0.120e2, 3) * 0.182426929077162323e-6 : (R < 0.160e2 ? -0.311477317769492021e-4 + R * 0.204854187456780009e-5 + pow(R - 0.140e2, 2) * 0.162773298493822420e-5 + pow(R - 0.140e2, 3) * (-0.649858414611061997e-6) : (R < 0.180e2 ? -0.923776258480723987e-5 + R * 0.761172838987952499e-6 + pow(R - 0.160e2, 2) * (-0.227141750272814820e-5) + pow(R - 0.160e2, 3) * 0.574283546117085976e-6 : (R < 0.200e2 ? 0.257676500086529435e-4 + R * (-0.143309461851960797e-5) + pow(R - 0.180e2, 2) * 0.117428377397436765e-5 + pow(R - 0.180e2, 3) * (-0.227038768544781818e-6) : (R < 0.250e2 ? -0.108049225110096161e-4 + R * 0.539575254840480837e-6 + pow(R - 0.200e2, 2) * (-0.187948837294323305e-6) + pow(R - 0.200e2, 3) * 0.160915863036454262e-7 : 0.332328984883362995e-5 + R * (-0.133044145329345210e-6) + pow(R - 0.250e2, 2) * 0.534249572603580887e-7 + pow(R - 0.250e2, 3) * (-0.534699754289780812e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4293572544e1 * (R - 0.300e2) * (R - 0.250e2) - 0.4579820096e2 * R - 0.2690595544e4 + 0.2289910048e1 * R * R + 0.75000e3 * (-0.839624396e-2 * R + 0.3472979154e0) * R) * pow(R, -6));
}

static double radcoeff_3_10_10_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.871749428199999985e-3 + pow(R - 0.475e1, 2) * (-0.153668104059145799e0) + pow(R - 0.475e1, 3) * 0.330652308140583218e0 : (R < 0.525e1 ? 0.688741576490677354e-1 + R * (-0.148367442532135463e-1) + pow(R - 0.50e1, 2) * 0.943211270462916140e-1 + pow(R - 0.50e1, 3) * (-0.115142937733749728e0) : (R < 0.55e1 ? -0.612790094774844918e-1 + R * 0.107345184448541884e-1 + pow(R - 0.525e1, 2) * 0.796392374597932121e-2 + pow(R - 0.525e1, 3) * (-0.229446848215843005e-1) : (R < 0.575e1 ? -0.593788590228823687e-1 + R * 0.104143519137967940e-1 + pow(R - 0.55e1, 2) * (-0.924458987020890417e-2) + pow(R - 0.55e1, 3) * 0.201247727608693319e-2 : (R < 0.60e1 ? -0.355167071190221895e-1 + R * 0.616939646795864119e-2 + pow(R - 0.575e1, 2) * (-0.773523191314370428e-2) + pow(R - 0.575e1, 3) * (-0.307021557876343762e-2) : (R < 0.625e1 ? -0.938844296681186352e-2 + R * 0.172611509036864385e-2 + pow(R - 0.60e1, 2) * (-0.100378935972162825e-1) + pow(R - 0.60e1, 3) * 0.107623886869668284e-1 : (R < 0.65e1 ? 0.890859425535761064e-2 + R * (-0.127488382943321751e-2) + pow(R - 0.625e1, 2) * (-0.196610208199116208e-2) + pow(R - 0.625e1, 3) * 0.435251643409612608e-2 : (R < 0.675e1 ? 0.993892330693253549e-2 + R * (-0.144183803903577459e-2) + pow(R - 0.65e1, 2) * 0.129828524358093292e-2 + pow(R - 0.65e1, 3) * 0.139878389448660920e-3 : (R < 0.70e1 ? 0.546350545075986998e-2 + R * (-0.766468219223684420e-3) + pow(R - 0.675e1, 2) * 0.140319403566742862e-2 + pow(R - 0.675e1, 3) * (-0.123914715669076422e-2) : (R < 0.725e1 ? 0.224704492198641833e-2 + R * (-0.297211293269488363e-3) + pow(R - 0.70e1, 2) * 0.473833668149355452e-3 + pow(R - 0.70e1, 3) * (-0.384468770685607677e-3) : (R < 0.75e1 ? 0.107564238981312549e-2 + R * (-0.132382353698362137e-3) + pow(R - 0.725e1, 2) * 0.185482090135149667e-3 + pow(R - 0.725e1, 3) * (-0.194151176246804577e-3) : (R < 0.775e1 ? 0.661668661907973766e-3 + R * (-0.760446541770631656e-4) + pow(R - 0.75e1, 2) * 0.398687079500462135e-4 + pow(R - 0.75e1, 3) * (-0.933200366471742624e-4) : (R < 0.80e1 ? 0.643816765528735526e-3 + R * (-0.736078070733852297e-4) + pow(R - 0.775e1, 2) * (-0.301213195353344765e-4) + pow(R - 0.775e1, 3) * 0.134053685715501523e-3 : (R < 0.825e1 ? 0.563433521465167390e-3 + R * (-0.635334007693959306e-4) + pow(R - 0.80e1, 2) * 0.704189447512916728e-4 + pow(R - 0.80e1, 3) * (-0.106342327974831802e-3) : (R < 0.85e1 ? 0.440193248124506257e-3 + R * (-0.482631148890310638e-4) + pow(R - 0.825e1, 2) * (-0.933780122983218011e-5) + pow(R - 0.825e1, 3) * 0.193620703438256422e-4 : (R < 0.875e1 ? 0.448739523513078673e-3 + R * (-0.493016273144798430e-4) + pow(R - 0.85e1, 2) * 0.518375152803705235e-5 + pow(R - 0.85e1, 3) * 0.172179528199529206e-3 : (R < 0.90e1 ? 0.146592861724183921e-3 + R * (-0.144260900130495895e-4) + pow(R - 0.875e1, 2) * 0.134318397677683966e-3 + pow(R - 0.875e1, 3) * (-0.334920860901942452e-3) : (R < 0.925e1 ? 0.110500786349896279e-3 + R * (-0.100645525933218078e-4) + pow(R - 0.90e1, 2) * (-0.116872247998772846e-3) + pow(R - 0.90e1, 3) * 0.316827377808240307e-3 : (R < 0.95e1 ? 0.991833622363843365e-4 + R * (-0.909554325366317140e-5) + pow(R - 0.925e1, 2) * 0.120748285357407398e-3 + pow(R - 0.925e1, 3) * (-0.282003534811018784e-3) : (R < 0.100e2 ? 0.310882657742423267e-4 + R * (-0.159706335202550794e-5) + pow(R - 0.95e1, 2) * (-0.907543657508567308e-4) + pow(R - 0.95e1, 3) * 0.919606337098154787e-4 : (R < 0.105e2 ? 0.237733658240206274e-3 + R * (-0.233809538205206297e-4) + pow(R - 0.100e2, 2) * 0.471865848138664941e-4 + pow(R - 0.100e2, 3) * (-0.297298607696504688e-4) : (R < 0.110e2 ? -0.155224151374341078e-4 + R * 0.150823541610801021e-5 + pow(R - 0.105e2, 2) * 0.259179365939078530e-5 + pow(R - 0.105e2, 3) * (-0.400748016481361136e-5) : (R < 0.120e2 ? -0.108234206367744603e-4 + R * 0.109441895188858720e-5 + pow(R - 0.110e2, 2) * (-0.341942658782963174e-5) + pow(R - 0.110e2, 3) * 0.153413827184104450e-5 : (R < 0.140e2 ? 0.141285513688705139e-4 + R * (-0.114201940824754276e-5) + pow(R - 0.120e2, 2) * 0.118298822769350177e-5 + pow(R - 0.120e2, 3) * (-0.309579912372365155e-6) : (R < 0.160e2 ? 0.214594950838685274e-5 + R * (-0.125025445941918050e-6) + pow(R - 0.140e2, 2) * (-0.674491246540689367e-6) + pow(R - 0.140e2, 3) * 0.216089992505824196e-6 : (R < 0.180e2 ? 0.285486568025656585e-5 + R * (-0.229910522034785380e-6) + pow(R - 0.160e2, 2) * 0.622048708494255702e-6 + pow(R - 0.160e2, 3) * (-0.155469825400931507e-6) : (R < 0.200e2 ? -0.710672281395906378e-5 + R * 0.392646407131059133e-6 + pow(R - 0.180e2, 2) * (-0.310770243911333393e-6) + pow(R - 0.180e2, 3) * 0.597725345729018965e-7 : (R < 0.250e2 ? 0.264458770238903092e-5 + R * (-0.133164153639451549e-6) + pow(R - 0.200e2, 2) * 0.478649635260780388e-7 + pow(R - 0.200e2, 3) * (-0.412822909483754599e-8) : -0.900628175012822209e-6 + R * 0.358682995085128881e-7 + pow(R - 0.250e2, 2) * (-0.140584728964851551e-7) + pow(R - 0.250e2, 3) * 0.139957457415651542e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.5982518528e1 * (R - 0.300e2) * (R - 0.250e2) - 0.6381369852e2 * R - 0.3749032282e4 + 0.3190684926e1 * R * R + 0.75000e3 * (-0.1169913519e-1 * R + 0.4839181890e0) * R) * pow(R, -6));
}

static double radcoeff_3_10_11_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.118302196599999743e0 + R * (-0.555111512312578270e-16) + pow(R - 0.475e1, 2) * (-0.203588395911481523e1) + pow(R - 0.475e1, 3) * 0.475639365405926107e1 : (R < 0.525e1 ? 0.459364553906480844e0 + R * (-0.126118169421296167e0) + pow(R - 0.50e1, 2) * 0.153141128142963079e1 + pow(R - 0.50e1, 3) * (-0.252276560857778431e1) : (R < 0.55e1 ? -0.102094767144721921e1 + R * 0.166568919685184613e0 + pow(R - 0.525e1, 2) * (-0.360662925003707557e0) + pow(R - 0.525e1, 3) * 0.724579045851876380e0 : (R < 0.575e1 ? -0.787566653943067130e0 + R * 0.122096028280557656e0 + pow(R - 0.55e1, 2) * 0.182771359385199728e0 + pow(R - 0.55e1, 3) * (-0.312605250669721502e0) : (R < 0.60e1 ? -0.969468023377362043e0 + R * 0.154868223472584721e0 + pow(R - 0.575e1, 2) * (-0.516825786170914195e-1) + pow(R - 0.575e1, 3) * (-0.314942089329897923e-1) : (R < 0.625e1 ? -0.782711560654620664e0 + R * 0.123121769989103430e0 + pow(R - 0.60e1, 2) * (-0.753032353168337637e-1) + pow(R - 0.60e1, 3) * (-0.389855923183197312e-1) : (R < 0.65e1 ? -0.507018311378760078e0 + R * 0.781603537710016116e-1 + pow(R - 0.625e1, 2) * (-0.104542429555573566e0) + pow(R - 0.625e1, 3) * 0.426312630062685299e-1 : (R < 0.675e1 ? -0.225080055477786117e0 + R * 0.338825008068901756e-1 + pow(R - 0.65e1, 2) * (-0.725689823008721646e-1) + pow(R - 0.65e1, 3) * 0.606595614772458269e-1 : (R < 0.70e1 ? -0.605197534525243816e-1 + R * 0.897167743343768587e-2 + pow(R - 0.675e1, 2) * (-0.270743111929377910e-1) + pow(R - 0.675e1, 3) * 0.282427422719481805e-1 : (R < 0.725e1 ? -0.407911511071352637e-2 + R * 0.730036012959075207e-3 + pow(R - 0.70e1, 2) * (-0.589225448897665385e-2) + pow(R - 0.70e1, 3) * 0.701939020296141192e-2 : (R < 0.75e1 ? 0.747973592103640551e-2 + R * (-0.899955568473986985e-3) + pow(R - 0.725e1, 2) * (-0.627711836755594807e-3) + pow(R - 0.725e1, 3) * 0.136801657700617038e-2 : (R < 0.775e1 ? 0.789202526667345458e-2 + R * (-0.957308378663127360e-3) + pow(R - 0.75e1, 2) * 0.398300595999033090e-3 + pow(R - 0.75e1, 3) * 0.121016276213905448e-3 : (R < 0.80e1 ? 0.619954334736965221e-2 + R * (-0.735467528873503542e-3) + pow(R - 0.775e1, 2) * 0.489062803159462183e-3 + pow(R - 0.775e1, 3) * (-0.143994936261791908e-3) : (R < 0.825e1 ? 0.448760104344286641e-2 + R * (-0.517935177842858353e-3) + pow(R - 0.80e1, 2) * 0.381066600963118245e-3 + pow(R - 0.80e1, 3) * (-0.167191820766738475e-3) : (R < 0.85e1 ? 0.319553045257926728e-2 + R * (-0.358750343755062737e-3) + pow(R - 0.825e1, 2) * 0.255672735388064382e-3 + pow(R - 0.825e1, 3) * (-0.145061383871254376e-3) : (R < 0.875e1 ? 0.235382586956357082e-2 + R * (-0.258112985536890715e-3) + pow(R - 0.85e1, 2) * 0.146876697484623600e-3 + pow(R - 0.85e1, 3) * 0.159026170517573848e-4 : (R < 0.90e1 ? 0.169457835895202628e-2 + R * (-0.181692896097374452e-3) + pow(R - 0.875e1, 2) * 0.158803660273441639e-3 + pow(R - 0.875e1, 3) * (-0.175347035695775315e-3) : (R < 0.925e1 ? 0.128304544179250321e-2 + R * (-0.135168635153611473e-3) + pow(R - 0.90e1, 2) * 0.272933835016101420e-4 + pow(R - 0.90e1, 3) * 0.140551141091343324e-3 : (R < 0.95e1 ? 0.916947105815660800e-3 + R * (-0.951686044481795453e-4) + pow(R - 0.925e1, 2) * 0.132706739320117645e-3 + pow(R - 0.925e1, 3) * (-0.119937264349597984e-3) : (R < 0.100e2 ? 0.506648497619868222e-3 + R * (-0.513034718536703398e-4) + pow(R - 0.95e1, 2) * 0.427537910579191567e-4 + pow(R - 0.95e1, 3) * (-0.613787774115693717e-5) : (R < 0.105e2 ? 0.135065883148188906e-3 + R * (-0.131530891016188910e-4) + pow(R - 0.100e2, 2) * 0.335469744461837509e-4 + pow(R - 0.100e2, 3) * (-0.305670586778919391e-4) : (R < 0.110e2 ? 0.281040998284680160e-4 + R * (-0.253140866385409657e-5) + pow(R - 0.105e2, 2) * (-0.123036135706541611e-4) + pow(R - 0.105e2, 3) * 0.146228778127247085e-4 : (R < 0.120e2 ? 0.415570634845119881e-4 + R * (-0.386786387496472636e-5) + pow(R - 0.110e2, 2) * 0.963070314843290070e-5 + pow(R - 0.110e2, 3) * (-0.412553109646817361e-5) : (R < 0.140e2 ? -0.355555205530586467e-4 + R * 0.301694913249655422e-5 + pow(R - 0.120e2, 2) * (-0.274589014097162055e-5) + pow(R - 0.120e2, 3) * 0.578328301961671758e-6 : (R < 0.160e2 ? 0.146982384635981353e-4 + R * (-0.102667180784986687e-5) + pow(R - 0.140e2, 2) * 0.724079670798409792e-6 + pow(R - 0.140e2, 3) * (-0.142913036524238169e-6) : (R < 0.180e2 ? -0.245054306384662523e-5 + R * 0.154690437052914083e-6 + pow(R - 0.160e2, 2) * (-0.133398548347019304e-6) + pow(R - 0.160e2, 3) * 0.276976375352811221e-7 : (R < 0.200e2 ? 0.859449616412212786e-6 + R * (-0.465321059117895952e-7) + pow(R - 0.180e2, 2) * 0.327872768646674549e-7 + pow(R - 0.180e2, 3) * (-0.618694806688632581e-8) : (R < 0.250e2 ? -0.197011473784885966e-6 + R * 0.103736247442442981e-7 + pow(R - 0.200e2, 2) * (-0.433441153665050412e-8) + pow(R - 0.200e2, 3) * 0.385799643960328964e-9 : 0.103081745030901877e-6 + R * (-0.403551732523607498e-8) + pow(R - 0.250e2, 2) * 0.145258312275442976e-8 + pow(R - 0.250e2, 3) * (-0.141748415541442984e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3347526752e1 * (R - 0.300e2) * (R - 0.250e2) + 0.3570693512e2 * R + 0.2097763474e4 - 0.1785346756e1 * R * R + 0.75000e3 * (0.654623532e-2 * R - 0.2707756047e0) * R) * pow(R, -6));
}

static double radcoeff_3_10_11_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.163228319099998666e-1 + R * 0.277555756156289135e-16 + pow(R - 0.475e1, 2) * 0.113106054246721288e1 + pow(R - 0.475e1, 3) * (-0.235636354394885128e1) : (R < 0.525e1 ? -0.568364598275983512e0 + R * 0.123712106743196701e0 + pow(R - 0.50e1, 2) * (-0.636212115494425912e0) + pow(R - 0.50e1, 3) * 0.975427161766556083e0 : (R < 0.55e1 ? 0.116983884717131559e0 + R * (-0.115013581727869615e-1) + pow(R - 0.525e1, 2) * 0.953582558304912065e-1 + pow(R - 0.525e1, 3) * (-0.279159064077373453e0) : (R < 0.575e1 ? 0.144229496626268883e0 + R * (-0.161645547720488877e-1) + pow(R - 0.55e1, 2) * (-0.114011042227538884e0) + pow(R - 0.55e1, 3) * 0.126990057742937645e0 : (R < 0.60e1 ? 0.329958616539350713e0 + R * (-0.493594400590175175e-1) + pow(R - 0.575e1, 2) * (-0.187684989203356460e-1) + pow(R - 0.575e1, 3) * 0.641561198562278119e-2 : (R < 0.625e1 ? 0.377973762571286398e0 + R * (-0.575407622718810685e-1) + pow(R - 0.60e1, 2) * (-0.139567899311185597e-1) + pow(R - 0.60e1, 3) * 0.659648568745712371e-1 : (R < 0.65e1 ? 0.344444565974113992e0 + R * (-0.521507465734582371e-1) + pow(R - 0.625e1, 2) * 0.355168527248098664e-1 + pow(R - 0.625e1, 3) * 0.133322725160924527e-1 : (R < 0.675e1 ? 0.215194207542858784e0 + R * (-0.318925191142859707e-1) + pow(R - 0.65e1, 2) * 0.455160571118792059e-1 + pow(R - 0.65e1, 3) * (-0.246376188109412655e-1) : (R < 0.70e1 ? 0.952192918734355298e-1 + R * (-0.137540440853978554e-1) + pow(R - 0.675e1, 2) * 0.270378430036732550e-1 + pow(R - 0.675e1, 3) * (-0.220604040563273304e-1) : (R < 0.725e1 ? 0.308862930586582124e-1 + R * (-0.437144834412260194e-2) + pow(R - 0.70e1, 2) * 0.104925399614277555e-1 + pow(R - 0.70e1, 3) * (-0.955284473334938079e-2) : (R < 0.75e1 ? 0.634325455651006936e-2 + R * (-0.916336750911733635e-3) + pow(R - 0.725e1, 2) * 0.332790641141571947e-2 + pow(R - 0.725e1, 3) * (-0.327692558627513952e-2) : (R < 0.775e1 ? -0.137142569217153093e-2 + R * 0.133192907369537465e-3 + pow(R - 0.75e1, 2) * 0.870212221709364933e-3 + pow(R - 0.75e1, 3) * (-0.112903477755005896e-2) : (R < 0.80e1 ? -0.306612229471027497e-2 + R * 0.356604997433583864e-3 + pow(R - 0.775e1, 2) * 0.234361385468206536e-4 + pow(R - 0.775e1, 3) * (-0.263515297124624303e-3) : (R < 0.825e1 ? -0.276724657106901684e-2 + R * 0.318913948496127113e-3 + pow(R - 0.80e1, 2) * (-0.174200334296647580e-3) + pow(R - 0.80e1, 3) * (-0.167186643514439220e-4) : (R < 0.85e1 ? -0.203395725820073757e-2 + R * 0.228679031781907588e-3 + pow(R - 0.825e1, 2) * (-0.186739332560230522e-3) + pow(R - 0.825e1, 3) * 0.884684249304003225e-4 : (R < 0.875e1 ? -0.139160053619806056e-2 + R * 0.151897195176242423e-3 + pow(R - 0.85e1, 2) * (-0.120388013862430274e-3) + pow(R - 0.85e1, 3) * 0.668293019098425783e-4 : (R < 0.90e1 ? -0.981024842019824136e-3 + R * 0.104233682353122752e-3 + pow(R - 0.875e1, 2) * (-0.702660374300483401e-4) + pow(R - 0.875e1, 3) * 0.629841837502292305e-4 : (R < 0.925e1 ? -0.774520983131399103e-3 + R * 0.809101980912665578e-4 + pow(R - 0.90e1, 2) * (-0.230278996173764138e-4) + pow(R - 0.90e1, 3) * (-0.506819575507593784e-4) : (R < 0.95e1 ? -0.582346576586751513e-3 + R * 0.598933812418109789e-4 + pow(R - 0.925e1, 2) * (-0.610393677804459459e-4) + pow(R - 0.925e1, 3) * 0.331124451728080990e-4 : (R < 0.100e2 ? -0.354688701124150412e-3 + R * 0.355822808214895152e-4 + pow(R - 0.95e1, 2) * (-0.362050339008398683e-4) + pow(R - 0.95e1, 3) * 0.778096591572164734e-5 : (R < 0.105e2 ? -0.590742442194089006e-4 + R * 0.521297135744089004e-5 + pow(R - 0.100e2, 2) * (-0.245335850272573956e-4) + pow(R - 0.100e2, 3) * 0.310052186967512252e-4 : (R < 0.110e2 ? -0.478954425898426656e-4 + R * 0.393330035274692011e-5 + pow(R - 0.105e2, 2) * 0.219742430178694523e-4 + pow(R - 0.105e2, 3) * (-0.216606653347265753e-4) : (R < 0.120e2 ? -0.108125649187285809e-3 + R * 0.966204436957143754e-5 + pow(R - 0.110e2, 2) * (-0.105167549842204141e-4) + pow(R - 0.110e2, 3) * 0.354326475064897616e-5 : (R < 0.140e2 ? 0.974544917726953085e-5 + R * (-0.741671346922460869e-6) + pow(R - 0.120e2, 2) * 0.113039267726516027e-6 + pow(R - 0.120e2, 3) * 0.337475492357200075e-9 : (R < 0.160e2 ? 0.381341117671354487e-5 + R * (-0.285464570108110333e-6) + pow(R - 0.140e2, 2) * 0.115064120680659228e-6 + pow(R - 0.140e2, 3) * (-0.575761432580202695e-8) : (R < 0.180e2 ? -0.203103502817843567e-5 + R * 0.105700540704902235e-6 + pow(R - 0.160e2, 2) * 0.805184347258470628e-7 + pow(R - 0.160e2, 3) * (-0.268773715516490853e-7) : (R < 0.200e2 ? -0.191579530679302576e-5 + R * 0.105245820988501423e-6 + pow(R - 0.180e2, 2) * (-0.807457945840474625e-7) + pow(R - 0.180e2, 3) * 0.154550402948983732e-7 : (R < 0.250e2 ? 0.635315733178158750e-6 + R * (-0.322768738089079357e-7) + pow(R - 0.200e2, 2) * 0.119844471853427784e-7 + pow(R - 0.200e2, 3) * (-0.104119012311223822e-8) : -0.239102168077549565e-6 + R * 0.947833881110198246e-8 + pow(R - 0.250e2, 2) * (-0.363340466134079356e-8) + pow(R - 0.250e2, 3) * 0.359910809424079366e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3270957760e1 * (R - 0.300e2) * (R - 0.250e2) - 0.3489021872e2 * R - 0.2049836890e4 + 0.1744510936e1 * R * R + 0.75000e3 * (-0.639660970e-2 * R + 0.2645879867e0) * R) * pow(R, -6));
}

static double radcoeff_3_10_12_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.200043273400000166e-1 + R * 0.346944695195361419e-17 + pow(R - 0.475e1, 2) * 0.110114360195894864e0 + pow(R - 0.475e1, 3) * (-0.189602000783579500e0) : (R < 0.525e1 ? -0.113618735845131380e0 + R * 0.195068049510262777e-1 + pow(R - 0.50e1, 2) * (-0.320871403917897605e-1) + pow(R - 0.50e1, 3) * 0.259985597907385901e-1 : (R < 0.55e1 ? -0.565815433884481259e-1 + R * 0.833796471589488136e-2 + pow(R - 0.525e1, 2) * (-0.125882205487358179e-1) + pow(R - 0.525e1, 3) * 0.142049846606251504e-1 : (R < 0.575e1 ? -0.371776382096680458e-1 + R * 0.470728906539419085e-2 + pow(R - 0.55e1, 2) * (-0.193448205326695439e-2) + pow(R - 0.55e1, 3) * 0.192217869427607664e-1 : (R < 0.60e1 ? -0.521600560615380626e-1 + R * 0.734413309052835746e-2 + pow(R - 0.575e1, 2) * 0.124818581538036211e-1 + pow(R - 0.575e1, 3) * (-0.177908492316681890e-1) : (R < 0.625e1 ? -0.690887910219542822e-1 + R * 0.102492779364923813e-1 + pow(R - 0.60e1, 2) * (-0.861278769947522449e-3) + pow(R - 0.60e1, 3) * (-0.540490649608801887e-2) : (R < 0.65e1 ? -0.602017016528882329e-1 + R * 0.880521858350211649e-2 + pow(R - 0.625e1, 2) * (-0.491495864201353660e-2) + pow(R - 0.625e1, 3) * (-0.462970159979713553e-3) : (R < 0.675e1 ? -0.439782600077444907e-1 + R * 0.626093235749915211e-2 + pow(R - 0.65e1, 2) * (-0.526218626199832177e-2) + pow(R - 0.65e1, 3) * 0.177108550400685918e-2 : (R < 0.70e1 ? -0.287611248948836211e-1 + R * 0.396191775850127711e-2 + pow(R - 0.675e1, 2) * (-0.393387213399317738e-2) + pow(R - 0.675e1, 3) * 0.228169726395227764e-2 : (R < 0.725e1 ? -0.181975155734701854e-1 + R * 0.242279992849574102e-2 + pow(R - 0.70e1, 2) * (-0.222259918602896915e-2) + pow(R - 0.70e1, 3) * 0.989755993784024188e-3 : (R < 0.75e1 ? -0.116094905898892643e-1 + R * 0.149707958431576061e-2 + pow(R - 0.725e1, 2) * (-0.148028219069095096e-2) + pow(R - 0.725e1, 3) * 0.910701519311632847e-3 : (R < 0.775e1 ? -0.741739431200912330e-2 + R * 0.927695023841216410e-3 + pow(R - 0.75e1, 2) * (-0.797256051207226269e-3) + pow(R - 0.75e1, 3) * 0.320317205769442043e-3 : (R < 0.80e1 ? -0.483831160007514548e-2 + R * 0.589126474319373638e-3 + pow(R - 0.775e1, 2) * (-0.557018146880144710e-3) + pow(R - 0.775e1, 3) * 0.267840960010600512e-3 : (R < 0.825e1 ? -0.304262907175031167e-2 + R * 0.360837580881288953e-3 + pow(R - 0.80e1, 2) * (-0.356137426872194299e-3) + pow(R - 0.80e1, 3) * 0.131413579468154216e-3 : (R < 0.85e1 ? -0.179704781864263347e-2 + R * 0.207408913595470723e-3 + pow(R - 0.825e1, 2) * (-0.257577242271078623e-3) + pow(R - 0.825e1, 3) * 0.226920190276782993e-3 : (R < 0.875e1 ? -0.107655154191303986e-2 + R * 0.121167828136828210e-3 + pow(R - 0.85e1, 2) * (-0.873870995634913714e-4) + pow(R - 0.85e1, 3) * (-0.750362125752858969e-4) : (R < 0.90e1 ? -0.577760829610643608e-3 + R * 0.634049884972164181e-4 + pow(R - 0.875e1, 2) * (-0.143664258994955797e-3) + pow(R - 0.875e1, 3) * 0.188326635064360473e-3 : (R < 0.925e1 ? -0.255109273318754998e-3 + R * 0.268841030743061115e-4 + pow(R - 0.90e1, 2) * (-0.241928269668544085e-5) + pow(R - 0.90e1, 3) * (-0.254049618581560398e-4) : (R < 0.95e1 ? -0.200406517821422004e-3 + R * 0.209110313775591341e-4 + pow(R - 0.925e1, 2) * (-0.214730040903024741e-4) + pow(R - 0.925e1, 3) * 0.231101826082637295e-4 : (R < 0.100e2 ? -0.140555727315844810e-3 + R * 0.145076885714573480e-4 + pow(R - 0.95e1, 2) * (-0.414036713410467696e-5) + pow(R - 0.95e1, 3) * (-0.109292812016200387e-4) : (R < 0.105e2 ? -0.195836988963764092e-4 + R * 0.217036053613764074e-5 + pow(R - 0.100e2, 2) * (-0.205342889365347359e-4) + pow(R - 0.100e2, 3) * 0.221423321125189053e-4 : (R < 0.110e2 ? 0.192896888310830863e-4 + R * (-0.175717931600791300e-5) + pow(R - 0.105e2, 2) * 0.126792092322436271e-4 + pow(R - 0.105e2, 3) * (-0.140617494164556022e-4) : (R < 0.120e2 ? -0.276009640683413469e-5 + R * 0.375717853894012279e-6 + pow(R - 0.110e2, 2) * (-0.841341489243977613e-5) + pow(R - 0.110e2, 3) * 0.427668861354576382e-5 : (R < 0.140e2 ? 0.410643446451789985e-4 + R * (-0.362104609034824981e-5) + pow(R - 0.120e2, 2) * 0.441665094819751447e-5 + pow(R - 0.120e2, 3) * (-0.996219336386694823e-6) : (R < 0.160e2 ? -0.292064108388205896e-4 + R * 0.209092566580147062e-5 + pow(R - 0.140e2, 2) * (-0.156066507012265426e-5) + pow(R - 0.140e2, 3) * 0.301392284548459499e-6 : (R < 0.180e2 ? 0.897731301162212228e-5 + R * (-0.535027200107632637e-6) + pow(R - 0.160e2, 2) * 0.247688637168102684e-6 + pow(R - 0.160e2, 3) * (-0.395486611946431620e-7) : (R < 0.200e2 ? 0.360607212676919716e-6 + R * (-0.188565857709399854e-7) + pow(R - 0.180e2, 2) * 0.103966700002436918e-7 + pow(R - 0.180e2, 3) * (-0.186606258238684949e-8) : (R < 0.250e2 ? 0.338681177214825013e-8 + R * 0.337343241392587465e-9 + pow(R - 0.200e2, 2) * (-0.799705494077405668e-9) + pow(R - 0.200e2, 3) * 0.823784435597776292e-10 : 0.391582717099536707e-7 + R * (-0.148132843239814665e-8) + pow(R - 0.250e2, 2) * 0.435971159319258679e-9 + pow(R - 0.250e2, 3) * (-0.401971161679258618e-10))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3242776512e1 * (R - 0.300e2) * (R - 0.250e2) + 0.3458970740e2 * R + 0.2032033610e4 - 0.1729485370e1 * R * R + 0.75000e3 * (0.634123359e-2 * R - 0.2622935790e0) * R) * pow(R, -6));
}

static double radcoeff_3_10_13_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.509928319400001287e-1 + R * (-0.277555756156289135e-16) + pow(R - 0.475e1, 2) * (-0.118445921908977736e1) + pow(R - 0.475e1, 3) * 0.215648997779910934e1 : (R < 0.525e1 ? 0.950097980187778579e0 + R * (-0.187887738707555707e0) + pow(R - 0.50e1, 2) * 0.432908264259554698e0 + pow(R - 0.50e1, 3) * (-0.544976530517327751e0) : (R < 0.55e1 ? 0.368716566961330816e0 + R * (-0.736167060497772974e-1) + pow(R - 0.525e1, 2) * 0.241758663715588296e-1 + pow(R - 0.525e1, 3) * (-0.289173123697984563e-1) : (R < 0.575e1 ? 0.333113071463343069e0 + R * (-0.669507689333350975e-1) + pow(R - 0.55e1, 2) * 0.248788209420998776e-2 + pow(R - 0.55e1, 3) * 0.825972500765215500e-1 : (R < 0.60e1 ? 0.238356324867073310e0 + R * (-0.502198434968823132e-1) + pow(R - 0.575e1, 2) * 0.644358196516011533e-1 + pow(R - 0.575e1, 3) * 0.621864048637123870e-1 : (R < 0.625e1 ? -0.199119382551860222e-1 + R * (-0.634198275913566353e-2) + pow(R - 0.60e1, 2) * 0.111075623299385445e0 + pow(R - 0.60e1, 3) * (-0.904098583313711623e-1) : (R < 0.65e1 ? -0.255544635913906026e0 + R * 0.322439804534249697e-1 + pow(R - 0.625e1, 2) * 0.432682295508570805e-1 + pow(R - 0.625e1, 3) * (-0.282731078582278417e-1) : (R < 0.675e1 ? -0.359446034715332596e0 + R * 0.485768875054357896e-1 + pow(R - 0.65e1, 2) * 0.220633986571861992e-1 + pow(R - 0.65e1, 3) * (-0.549200871957175180e-1) : (R < 0.70e1 ? -0.363880933772614990e0 + R * 0.493110704848318537e-1 + pow(R - 0.675e1, 2) * (-0.191266667396019392e-1) + pow(R - 0.675e1, 3) * (-0.129919993589018984e-1) : (R < 0.725e1 ? -0.281284017686657450e0 + R * 0.373117372352367790e-1 + pow(R - 0.70e1, 2) * (-0.288706662587783630e-1) + pow(R - 0.70e1, 3) * 0.936484175132499055e-2 : (R < 0.75e1 ? -0.191016275243102496e0 + R * 0.246323119342210343e-1 + pow(R - 0.725e1, 2) * (-0.218470349452846192e-1) + pow(R - 0.725e1, 3) * 0.906927273760190812e-2 : (R < 0.775e1 ? -0.123067291283093100e0 + R * 0.154092830998790800e-1 + pow(R - 0.75e1, 2) * (-0.150450803920831877e-1) + pow(R - 0.75e1, 3) * 0.764714000226743990e-2 : (R < 0.80e1 ? -0.767006860415354180e-1 + R * 0.932058165426263505e-2 + pow(R - 0.775e1, 2) * (-0.930972539038260778e-2) + pow(R - 0.775e1, 3) * 0.499128034132827365e-2 : (R < 0.825e1 ? -0.474525740735630489e-1 + R * 0.560158402307038127e-2 + pow(R - 0.80e1, 2) * (-0.556626513438640211e-2) + pow(R - 0.80e1, 3) * 0.279482343241950568e-2 : (R < 0.85e1 ? -0.291191953460106616e-1 + R * 0.334248084945583781e-2 + pow(R - 0.825e1, 2) * (-0.347014756007177263e-2) + pow(R - 0.825e1, 3) * 0.198234772739368454e-2 : (R < 0.875e1 ? -0.177163449455032714e-1 + R * 0.197909726830626737e-2 + pow(R - 0.85e1, 2) * (-0.198338676452650912e-2) + pow(R - 0.85e1, 3) * 0.104533482280575992e-2 : (R < 0.90e1 ? -0.108616586105420628e-1 + R * 0.118340416531909293e-2 + pow(R - 0.875e1, 2) * (-0.119938564742218907e-2) + pow(R - 0.875e1, 3) * 0.660281890183270930e-3 : (R < 0.925e1 ? -0.664329358525625382e-2 + R * 0.707514196017361538e-3 + pow(R - 0.90e1, 2) * (-0.704174229784735846e-3) + pow(R - 0.90e1, 3) * 0.256336394061158345e-3 : (R < 0.95e1 ? -0.387107683915601268e-2 + R * 0.403490155011460862e-3 + pow(R - 0.925e1, 2) * (-0.511921934238867074e-3) + pow(R - 0.925e1, 3) * 0.301972205252093711e-3 : (R < 0.100e2 ? -0.200461244730955161e-2 + R * 0.204148976376794896e-3 + pow(R - 0.95e1, 2) * (-0.285442780299796791e-3) + pow(R - 0.95e1, 3) * 0.161468565172414002e-3 : (R < 0.105e2 ? -0.412376007533085914e-3 + R * 0.398076199563085934e-4 + pow(R - 0.100e2, 2) * (-0.432399325411757875e-4) + pow(R - 0.100e2, 3) * 0.209621653371171901e-4 : (R < 0.110e2 ? -0.131623480351692379e-3 + R * 0.122893114179707028e-4 + pow(R - 0.105e2, 2) * (-0.117966845355000006e-4) + pow(R - 0.105e2, 3) * 0.316398647911718562e-5 : (R < 0.120e2 ? -0.305165117378945088e-4 + R * 0.286561674180859183e-5 + pow(R - 0.110e2, 2) * (-0.705070481682422214e-5) + pow(R - 0.110e2, 3) * 0.296057771601562959e-5 : (R < 0.140e2 ? 0.280294789881155644e-4 + R * (-0.235405974379296368e-5) + pow(R - 0.120e2, 2) * 0.183102833122266684e-5 + pow(R - 0.120e2, 3) * (-0.432788197863092557e-6) : (R < 0.160e2 ? 0.206211742263169939e-5 + R * (-0.223404793259407094e-6) + pow(R - 0.140e2, 2) * (-0.765700855955888710e-6) + pow(R - 0.140e2, 3) * 0.293520414917796108e-6 : (R < 0.180e2 ? -0.600358756488946654e-5 + R * 0.236036761930591680e-6 + pow(R - 0.160e2, 2) * 0.995421633550888044e-6 + pow(R - 0.160e2, 3) * (-0.280634648133091870e-6) : (R < 0.200e2 ? -0.153202518344667449e-4 + R * 0.850107518537041312e-6 + pow(R - 0.180e2, 2) * (-0.688386255247663281e-6) + pow(R - 0.180e2, 3) * 0.132860654964571292e-6 : (R < 0.250e2 ? 0.617343161257512007e-5 + R * (-0.309109642878755990e-6) + pow(R - 0.200e2, 2) * 0.108777674539764604e-6 + pow(R - 0.200e2, 3) * (-0.933575882960268074e-8) : -0.196396720706722467e-5 + R * 0.784851902986889953e-7 + pow(R - 0.250e2, 2) * (-0.312587079042756040e-7) + pow(R - 0.250e2, 3) * 0.312293113850756083e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2803598400e1 * (R - 0.300e2) * (R - 0.250e2) - 0.2990496608e2 * R - 0.1756992368e4 + 0.1495248304e1 * R * R + 0.75000e3 * (-0.548272113e-2 * R + 0.2267872470e0) * R) * pow(R, -6));
}

static double radcoeff_3_12_9_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.334994006699999985e-1 + pow(R - 0.475e1, 2) * (-0.116898793629462028e1) + pow(R - 0.475e1, 3) * 0.252347488693848110e1 : (R < 0.525e1 ? 0.556579083992124857e0 + R * (-0.111342426846344961e0) + pow(R - 0.50e1, 2) * 0.723618228909240657e0 + pow(R - 0.50e1, 3) * (-0.120468965556744312e1) : (R < 0.55e1 ? -0.130649523757243646e0 + R * 0.245873771893797416e-1 + pow(R - 0.525e1, 2) * (-0.179899012766341793e0) + pow(R - 0.525e1, 3) * 0.287990543203291316e0 : (R < 0.575e1 ? 0.603386776114571838e-1 + R * (-0.113639023431740330e-1) + pow(R - 0.55e1, 2) * 0.360938946361266874e-1 + pow(R - 0.55e1, 3) * (-0.362262544617221946e-1) : (R < 0.60e1 ? -0.268500568706928804e-2 + R * (-0.109377736683602053e-3) + pow(R - 0.575e1, 2) * 0.892420378983503973e-2 + pow(R - 0.575e1, 3) * (-0.137748891324025197e-1) : (R < 0.625e1 ? -0.136183366884506697e-1 + R * 0.176993244590844504e-2 + pow(R - 0.60e1, 2) * (-0.140696305946685094e-2) + pow(R - 0.60e1, 3) * 0.982341521533228179e-2 : (R < 0.65e1 ? -0.206678361615613877e-1 + R * 0.290834126904982240e-2 + pow(R - 0.625e1, 2) * 0.596059835203235997e-2 + pow(R - 0.625e1, 3) * (-0.859252225692659806e-2) : (R < 0.675e1 ? -0.293293650682997231e-1 + R * 0.427754252189226514e-2 + pow(R - 0.65e1, 2) * (-0.483793340662589278e-3) + pow(R - 0.65e1, 3) * (-0.708458726282588241e-2) : (R < 0.70e1 ? -0.188710655488225423e-1 + R * 0.270728573978111725e-2 + pow(R - 0.675e1, 2) * (-0.579723378778200082e-2) + pow(R - 0.675e1, 3) * 0.593251830343012598e-2 : (R < 0.725e1 ? -0.663680907808285748e-2 + R * 0.921016027783265359e-3 + pow(R - 0.70e1, 2) * (-0.134784506020940655e-2) + pow(R - 0.70e1, 3) * 0.303148193105381124e-3 : (R < 0.75e1 ? -0.224246643559220232e-2 + R * 0.303933783885821046e-3 + pow(R - 0.725e1, 2) * (-0.112048391538037070e-2) + pow(R - 0.725e1, 3) * 0.152304145214834583e-2 : (R < 0.775e1 ? -0.228661517017879177e-3 + R * 0.292620984734505568e-4 + pow(R - 0.75e1, 2) * 0.217971737308886075e-4 + pow(R - 0.75e1, 3) * (-0.650307778267633993e-4) : (R < 0.80e1 ? -0.218281498740919650e-3 + R * 0.279674144963767274e-4 + pow(R - 0.775e1, 2) * (-0.269759096391839419e-4) + pow(R - 0.775e1, 3) * (-0.442871454492918570e-4) : (R < 0.825e1 ? -0.463251230103402302e-4 + R * 0.617561990504252899e-5 + pow(R - 0.80e1, 2) * (-0.601912687261528347e-4) + pow(R - 0.80e1, 3) * 0.126186147015930870e-3 : (R < 0.85e1 ? 0.497936857151152801e-5 + R * (-0.260111892546851881e-6) + pow(R - 0.825e1, 2) * 0.344483415357953179e-4 + pow(R - 0.825e1, 3) * (-0.100749154230431642e-3) : (R < 0.875e1 ? 0.197216974102685934e-4 + R * (-0.192640754285512839e-5) + pow(R - 0.85e1, 2) * (-0.411135241370284138e-4) + pow(R - 0.85e1, 3) * 0.641634835377957025e-4 : (R < 0.90e1 ? 0.927581095022855979e-4 + R * (-0.104525164480326402e-4) + pow(R - 0.875e1, 2) * 0.700908851631836559e-5 + pow(R - 0.875e1, 3) * 0.222705847924876984e-5 : (R < 0.925e1 ? 0.579319158163288308e-4 + R * (-0.653039872501431455e-5) + pow(R - 0.90e1, 2) * 0.867938237575494308e-5 + pow(R - 0.90e1, 3) * 0.582010345324092475e-4 : (R < 0.95e1 ? -0.817007943756315250e-4 + R * 0.872198643768989343e-5 + pow(R - 0.925e1, 2) * 0.523301582750618821e-4 + pow(R - 0.925e1, 3) * (-0.131428458535285834e-3) : (R < 0.100e2 ? -0.949450391886200070e-4 + R * 0.102442295998547371e-4 + pow(R - 0.95e1, 2) * (-0.462411856264025004e-4) + pow(R - 0.95e1, 3) * 0.433908478453860508e-4 : (R < 0.105e2 ? 0.358990178090822827e-4 + R * (-0.345382014250822811e-5) + pow(R - 0.100e2, 2) * 0.188450861416765691e-4 + pow(R - 0.100e2, 3) * (-0.216475216013202222e-4) : (R < 0.110e2 ? 0.105051772671292018e-4 + R * (-0.844375201821828691e-6) + pow(R - 0.105e2, 2) * (-0.136261962603037677e-4) + pow(R - 0.105e2, 3) * 0.141105299518948477e-4 : (R < 0.120e2 ? 0.423387312064490545e-4 + R * (-0.388767399820445933e-5) + pow(R - 0.110e2, 2) * 0.753959866753850641e-5 + pow(R - 0.110e2, 3) * (-0.318261534383404676e-5) : (R < 0.140e2 ? -0.196805011127449490e-4 + R * 0.164367730537041257e-5 + pow(R - 0.120e2, 2) * (-0.200824736396363345e-5) + pow(R - 0.120e2, 3) * 0.531835746214213577e-6 : (R < 0.160e2 ? -0.345357580910181980e-6 + R * (-0.728319591355843092e-8) + pow(R - 0.140e2, 2) * 0.118276711332164801e-5 + pow(R - 0.140e2, 3) * (-0.366862225807434331e-6) : (R < 0.180e2 ? -0.380873483194114285e-5 + R * 0.321438547683821420e-6 + pow(R - 0.160e2, 2) * (-0.101840624152295830e-5) + pow(R - 0.160e2, 3) * 0.258718746340523743e-6 : (R < 0.200e2 ? 0.116293903522910673e-4 + R * (-0.647561462321726002e-6) + pow(R - 0.180e2, 2) * 0.533906236520184267e-6 + pow(R - 0.180e2, 3) * (-0.103320487529660589e-6) : (R < 0.250e2 ? -0.497713051636167662e-5 + R * 0.248217633403083840e-6 + pow(R - 0.200e2, 2) * (-0.860166886577793452e-7) + pow(R - 0.200e2, 3) * 0.735541794343251556e-8 : 0.150464303063177327e-5 + R * (-0.602929074172709319e-7) + pow(R - 0.250e2, 2) * 0.243145804937083782e-7 + pow(R - 0.250e2, 3) * (-0.243574527565083784e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4088911456e1 * (R - 0.300e2) * (R - 0.250e2) - 0.4361518668e2 * R - 0.2562339010e4 + 0.2180759334e1 * R * R + 0.75000e3 * (-0.799601621e-2 * R + 0.3307429248e0) * R) * pow(R, -6));
}

static double radcoeff_3_12_9_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.328346475400000670e-1 + R * 0.138777878078144568e-16 + pow(R - 0.475e1, 2) * 0.897674013120207892e0 + pow(R - 0.475e1, 3) * (-0.192999721920083189e1) : (R < 0.525e1 ? -0.441698868071739970e0 + R * 0.869625279599479939e-1 + pow(R - 0.50e1, 2) * (-0.549823901280415916e0) + pow(R - 0.50e1, 3) * 0.936559085442495665e0 : (R < 0.55e1 ? 0.599332649369080372e-1 + R * (-0.123445941597920064e-1) + pow(R - 0.525e1, 2) * 0.152595412801455887e0 + pow(R - 0.525e1, 3) * (-0.258747473993151456e0) : (R < 0.575e1 ? -0.873765036927102168e-1 + R * 0.154379608672200394e-1 + pow(R - 0.55e1, 2) * (-0.414651926934077042e-1) + pow(R - 0.55e1, 3) * 0.688686648021101661e-1 : (R < 0.60e1 ? -0.439286055946431081e-1 + R * 0.761823917091184518e-2 + pow(R - 0.575e1, 2) * 0.101863059081749238e-1 + pow(R - 0.575e1, 3) * (-0.346855925752891994e-1) : (R < 0.625e1 ? -0.353715499367954836e-1 + R * 0.620784351713258090e-2 + pow(R - 0.60e1, 2) * (-0.158278885232919775e-1) + pow(R - 0.60e1, 3) * 0.268883196304661254e-2 : (R < 0.65e1 ? 0.999239670851355052e-2 + R * (-0.120194475144216797e-2) + pow(R - 0.625e1, 2) * (-0.138112645510070180e-1) + pow(R - 0.625e1, 3) * 0.191729107391027595e-1 : (R < 0.675e1 ? 0.309483942318654129e-1 + R * (-0.451265626336390998e-2) + pow(R - 0.65e1, 2) * 0.568418503320051224e-3 + pow(R - 0.65e1, 3) * 0.720889694614235826e-2 : (R < 0.70e1 ? 0.200543867569397960e-1 + R * (-0.287677883430219198e-2) + pow(R - 0.675e1, 2) * 0.597509121292681949e-2 + pow(R - 0.675e1, 3) * (-0.598046912847220551e-2) : (R < 0.725e1 ? 0.727093161349124609e-2 + R * (-0.101057118942732087e-2) + pow(R - 0.70e1, 2) * 0.148973936657266471e-2 + pow(R - 0.70e1, 3) * (-0.421940528253524517e-3) : (R < 0.75e1 ? 0.253071770495680217e-2 + R * (-0.344815355188524424e-3) + pow(R - 0.725e1, 2) * 0.117328397038252131e-2 + pow(R - 0.725e1, 3) * (-0.150299373387369466e-2) : (R < 0.775e1 ? 0.294333725337361492e-3 + R * (-0.399846950985815330e-4) + pow(R - 0.75e1, 2) * 0.460386699772502618e-4 + pow(R - 0.75e1, 3) * 0.682304059563034604e-4 : (R < 0.80e1 ? 0.207300874869086475e-4 + R * (-0.417215899314950243e-5) + pow(R - 0.775e1, 2) * 0.972114744444778605e-4 + pow(R - 0.775e1, 3) * (-0.143726504799519404e-3) : (R < 0.825e1 ? -0.148696062576436302e-3 + R * 0.174848585791795378e-4 + pow(R - 0.80e1, 2) * (-0.105834041551616979e-4) + pow(R - 0.80e1, 3) * 0.685571394497741846e-4 : (R < 0.85e1 ? -0.210679102978558616e-3 + R * 0.250476201484313485e-4 + pow(R - 0.825e1, 2) * 0.408344504321689423e-4 + pow(R - 0.825e1, 3) * (-0.151913354119577378e-3) : (R < 0.875e1 ? -0.141935102193308004e-3 + R * 0.169810914670950595e-4 + pow(R - 0.85e1, 2) * (-0.731005651575141049e-4) + pow(R - 0.85e1, 3) * 0.133947856548535452e-3 : (R < 0.90e1 ? -0.443541818428985432e-4 + R * 0.554603199118840430e-5 + pow(R - 0.875e1, 2) * 0.273603272538874873e-4 + pow(R - 0.875e1, 3) * (-0.157727148810564433e-3) : (R < 0.925e1 ? 0.979344428856381309e-4 + R * (-0.103476447838486815e-4) + pow(R - 0.90e1, 2) * (-0.909350343540358337e-4) + pow(R - 0.90e1, 3) * 0.227855634693722227e-3 : (R < 0.95e1 ? 0.121198664995691516e-3 + R * (-0.130922304557936773e-4) + pow(R - 0.925e1, 2) * 0.799566916662558503e-4 + pow(R - 0.925e1, 3) * (-0.121941414303524542e-3) : (R < 0.100e2 ? -0.382955175602222306e-4 + R * 0.402210019542339277e-5 + pow(R - 0.95e1, 2) * (-0.114993690613875683e-4) + pow(R - 0.95e1, 3) * 0.976667463148156619e-5 : (R < 0.105e2 ? 0.179410538113001473e-5 + R * (-0.152262892353001481e-6) + pow(R - 0.100e2, 2) * 0.315064288583478018e-5 + pow(R - 0.100e2, 3) * (-0.433094923057554340e-6) : (R < 0.110e2 ? -0.271434985449804322e-4 + R * 0.267355880118861270e-5 + pow(R - 0.105e2, 2) * 0.250100050124844861e-5 + pow(R - 0.105e2, 3) * (-0.535430993525134672e-5) : (R < 0.120e2 ? -0.105254857089840546e-4 + R * 0.115882685099855043e-5 + pow(R - 0.110e2, 2) * (-0.553046440162857274e-5) + pow(R - 0.110e2, 3) * 0.257273346163002151e-5 : (R < 0.140e2 ? 0.266295243711223549e-4 + R * (-0.218390156736852946e-5) + pow(R - 0.120e2, 2) * 0.218773598326149264e-5 + pow(R - 0.120e2, 3) * (-0.536199020051113875e-6) : (R < 0.160e2 ? -0.134090355029703255e-5 + R * 0.132654125064073749e-6 + pow(R - 0.140e2, 2) * (-0.102945813704519082e-5) + pow(R - 0.140e2, 3) * 0.303322070631576919e-6 : (R < 0.180e2 ? 0.461532367590425691e-5 + R * (-0.345313575537766036e-6) + pow(R - 0.160e2, 2) * 0.790474286744270798e-6 + pow(R - 0.160e2, 3) * (-0.195519518512693868e-6) : (R < 0.200e2 ? -0.846886797206582949e-5 + R * 0.470349349286990480e-6 + pow(R - 0.180e2, 2) * (-0.382642824331892461e-6) + pow(R - 0.180e2, 3) * 0.739023039441985943e-7 : (R < 0.250e2 ? 0.346665216210392257e-5 + R * (-0.173394300710196125e-6) + pow(R - 0.200e2, 2) * 0.607709993332991450e-7 + pow(R - 0.200e2, 3) * (-0.521062697345198369e-8) : -0.108822548434741324e-5 + R * 0.435186696138965298e-7 + pow(R - 0.250e2, 2) * (-0.173884052684806121e-7) + pow(R - 0.250e2, 3) * 0.173842654834026138e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3948326720e0 * (R - 0.300e2) * (R - 0.250e2) - 0.4211795192e1 * R - 0.2474184468e3 + 0.2105897596e0 * R * R + 0.75000e3 * (-0.772115745e-3 * R + 0.3193687800e-1) * R) * pow(R, -6));
}

static double radcoeff_3_12_11_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.277827332099999345e-1 + R * (-0.138777878078144568e-16) + pow(R - 0.475e1, 2) * 0.105834820965282184e1 + pow(R - 0.475e1, 3) * (-0.226581314069128670e1) : (R < 0.525e1 ? -0.518710005163972809e0 + R * 0.104334140946794565e0 + pow(R - 0.50e1, 2) * (-0.641011645865643520e0) + pow(R - 0.50e1, 3) * 0.108151836588186101e1 : (R < 0.55e1 ? 0.761614204186858018e-1 + R * (-0.133869883831782485e-1) + pow(R - 0.525e1, 2) * 0.170127128545752238e0 + pow(R - 0.525e1, 3) * (-0.329902110996156961e0) : (R < 0.575e1 ? -0.459984060675514214e-1 + R * 0.981993007791844008e-2 + pow(R - 0.55e1, 2) * (-0.772994547013654831e-1) + pow(R - 0.55e1, 3) * 0.114233904150766896e0 : (R < 0.60e1 ? 0.500327871198491814e-1 + R * (-0.741094024449550932e-2) + pow(R - 0.575e1, 2) * 0.837597341170968381e-2 + pow(R - 0.575e1, 3) * (-0.286533428549105920e-1) : (R < 0.625e1 ? 0.572156674526184267e-1 + R * (-0.859545532393640385e-2) + pow(R - 0.60e1, 2) * (-0.131140337294732619e-1) + pow(R - 0.60e1, 3) * 0.327928404528754908e-1 : (R < 0.65e1 ? 0.594606739754930044e-1 + R * (-0.900381460375888031e-2) + pow(R - 0.625e1, 2) * 0.114805966101833579e-1 + pow(R - 0.625e1, 3) * (-0.813294426859133453e-2) : (R < 0.675e1 ? 0.326512208536825013e-1 + R * (-0.478844334902807714e-2) + pow(R - 0.65e1, 2) * 0.538088840873985653e-2 + pow(R - 0.65e1, 3) * (-0.128849164731020122e-2) : (R < 0.70e1 ? 0.164376425588694773e-1 + R * (-0.233959132852881160e-2) + pow(R - 0.675e1, 2) * 0.441451967325720562e-2 + pow(R - 0.675e1, 3) * (-0.476377620136783468e-2) : (R < 0.725e1 ? 0.744075344319674366e-2 + R * (-0.102553952965667768e-2) + pow(R - 0.70e1, 2) * 0.841687522231329395e-3 + pow(R - 0.70e1, 3) * 0.860776875181527672e-3 : (R < 0.75e1 ? 0.328557271922245509e-2 + R * (-0.443300104444476601e-3) + pow(R - 0.725e1, 2) * 0.148727017861747515e-2 + pow(R - 0.725e1, 3) * (-0.202931506959827491e-2) : (R < 0.775e1 ? 0.623280204230616829e-3 + R * (-0.801615906854155722e-4) + pow(R - 0.75e1, 2) * (-0.347161235812312174e-4) + pow(R - 0.75e1, 3) * 0.290497722571574047e-3 : (R < 0.80e1 ? 0.338044949183422959e-3 + R * (-0.430513294938610335e-4) + pow(R - 0.775e1, 2) * 0.183157168347449325e-3 + pow(R - 0.775e1, 3) * (-0.320883859024020696e-3) : (R < 0.825e1 ? 0.931755770542220618e-4 + R * (-0.116384688871402584e-4) + pow(R - 0.80e1, 2) * (-0.575057259205662109e-4) + pow(R - 0.80e1, 3) * 0.189337617332508958e-3 : (R < 0.85e1 ? 0.368693620660179300e-4 + R * (-0.489052859757793089e-5) + pow(R - 0.825e1, 2) * 0.844974870788155143e-4 + pow(R - 0.825e1, 3) * (-0.112364051586015160e-3) : (R < 0.875e1 ? -0.139639346167341858e-3 + R * 0.162899552694519837e-4 + pow(R - 0.85e1, 2) * 0.224448389304142195e-6 + pow(R - 0.85e1, 3) * (-0.111338457132448293e-3) : (R < 0.90e1 ? 0.403177129940125316e-4 + R * (-0.447378124823000418e-5) + pow(R - 0.875e1, 2) * (-0.832793944600320889e-4) + pow(R - 0.875e1, 3) * 0.247199575539808387e-3 : (R < 0.925e1 ? -0.341676444521224627e-5 + R * 0.236441935468027363e-6 + pow(R - 0.90e1, 2) * 0.102120287194824215e-3 + pow(R - 0.90e1, 3) * (-0.266077416290785244e-3) : (R < 0.95e1 ? -0.120200155220105281e-4 + R * 0.140706997835789491e-5 + pow(R - 0.925e1, 2) * (-0.974377750232647449e-4) + pow(R - 0.925e1, 3) * 0.189945280919332621e-3 : (R < 0.100e2 ? 0.109347418276546247e-3 + R * (-0.116970773608996043e-4) + pow(R - 0.95e1, 2) * 0.450211856662347277e-4 + pow(R - 0.95e1, 3) * (-0.331725559848710305e-4) : (R < 0.105e2 ? -0.849615415813184763e-4 + R * 0.844469131668184719e-5 + pow(R - 0.100e2, 2) * (-0.473764831107182308e-5) + pow(R - 0.100e2, 3) * (-0.680103010058374642e-5) : (R < 0.110e2 ? 0.163073368871917422e-4 + R * (-0.139372956982778486e-5) + pow(R - 0.105e2, 2) * (-0.149391934619474427e-4) + pow(R - 0.105e2, 3) * 0.152956365952060217e-4 : (R < 0.120e2 ? 0.526266192671777871e-4 + R * (-0.486119558537070790e-5) + pow(R - 0.110e2, 2) * 0.800426143086159495e-5 + pow(R - 0.110e2, 3) * (-0.306279038909088653e-5) : (R < 0.140e2 ? -0.242737300244578627e-4 + R * 0.195895610907982198e-5 + pow(R - 0.120e2, 2) * (-0.118410973641106443e-5) + pow(R - 0.120e2, 3) * 0.249819360060576730e-6 : (R < 0.160e2 ? -0.267112134077479125e-5 + R * 0.220349484162485078e-6 + pow(R - 0.140e2, 2) * 0.314806423952395950e-6 + pow(R - 0.140e2, 3) * (-0.132623520204319239e-6) : (R < 0.180e2 ? 0.284322093967619443e-5 + R * (-0.111907062479762145e-6) + pow(R - 0.160e2, 2) * (-0.480934697273519536e-6) + pow(R - 0.160e2, 3) * 0.135741464006700282e-6 : (R < 0.200e2 ? 0.731255584098185940e-5 + R * (-0.406748283493436639e-6) + pow(R - 0.180e2, 2) * 0.333514086766682315e-6 + pow(R - 0.180e2, 3) * (-0.644887394224820037e-7) : (R < 0.250e2 ? -0.307312720727017214e-5 + R * 0.153443190503508605e-6 + pow(R - 0.200e2, 2) * (-0.534183497682096868e-7) + pow(R - 0.200e2, 3) * 0.457289654390159184e-8 : 0.943432538749220461e-6 + R * (-0.377730663859688180e-7) + pow(R - 0.250e2, 2) * 0.151750983903141950e-7 + pow(R - 0.250e2, 3) * (-0.151894032182408618e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1364287104e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1455258388e2 * R - 0.8549729720e3 + 0.7276291940e0 * R * R + 0.75000e3 * (-0.2667990224e-2 * R + 0.1103580026e0) * R) * pow(R, -6));
}

static double radcoeff_3_12_11_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.267891238800000674e-1 + R * (-0.138777878078144568e-16) + pow(R - 0.475e1, 2) * (-0.532118716270276293e0) + pow(R - 0.475e1, 3) * 0.112727270316110539e1 : (R < 0.525e1 ? 0.284623971562154465e0 + R * (-0.546957262924308921e-1) + pow(R - 0.50e1, 2) * 0.313335811100552752e0 + pow(R - 0.50e1, 3) * (-0.567507010027316738e0) : (R < 0.55e1 ? 0.314733715809511413e-1 + R * (-0.443538512227640777e-2) + pow(R - 0.525e1, 2) * (-0.112294446419934787e0) + pow(R - 0.525e1, 3) * 0.220098898228161588e0 : (R < 0.575e1 ? 0.109726752821549228e0 + R * (-0.193140649144634968e-1) + pow(R - 0.55e1, 2) * 0.527797272511864313e-1 + pow(R - 0.55e1, 3) * (-0.856334284533297740e-1) : (R < 0.60e1 ? 0.522692876588502775e-1 + R * (-0.898046912386961382e-2) + pow(R - 0.575e1, 2) * (-0.114453440888109062e-1) + pow(R - 0.575e1, 3) * 0.445220237771574504e-1 : (R < 0.625e1 ? 0.364983657923482613e-1 + R * (-0.635526171005804281e-2) + pow(R - 0.60e1, 2) * 0.219461737440571868e-1 + pow(R - 0.60e1, 3) * (-0.191907737913000476e-1) : (R < 0.65e1 ? -0.852245910263618907e-2 + R * 0.101955507610179035e-2 + pow(R - 0.625e1, 2) * 0.755309340058214936e-2 + pow(R - 0.625e1, 3) * (-0.834945667595723626e-2) : (R < 0.675e1 ? -0.225525042537307388e-1 + R * 0.323057864965088258e-2 + pow(R - 0.65e1, 2) * 0.129100089361422086e-2 + pow(R - 0.65e1, 3) * (-0.640247241367100477e-2) : (R < 0.70e1 ? -0.188258541967390863e-1 + R * 0.267561551889467951e-2 + pow(R - 0.675e1, 2) * (-0.351085341663903315e-2) + pow(R - 0.675e1, 3) * 0.178767828584125649e-2 : (R < 0.725e1 ? -0.907569085399279225e-2 + R * 0.125537848917039877e-2 + pow(R - 0.70e1, 2) * (-0.217009470225809067e-2) + pow(R - 0.70e1, 3) * 0.151061861110598290e-2 : (R < 0.75e1 ? -0.337462223586200817e-2 + R * 0.453572127623725241e-3 + pow(R - 0.725e1, 2) * (-0.103713074392860344e-2) + pow(R - 0.725e1, 3) * 0.112219243133481025e-2 : (R < 0.775e1 ? -0.111075146745025265e-2 + R * 0.145417836534700377e-3 + pow(R - 0.75e1, 2) * (-0.195486420427495720e-3) + pow(R - 0.75e1, 3) * (-0.507616676452233244e-4) : (R < 0.80e1 ? -0.292489592332416837e-3 + R * 0.381568136374731362e-4 + pow(R - 0.775e1, 2) * (-0.233557671161413216e-3) + pow(R - 0.775e1, 3) * 0.320196640270082634e-3 : (R < 0.825e1 ? 0.151851849964743818e-3 + R * (-0.185851518925929780e-4) + pow(R - 0.80e1, 2) * 0.658980904114874922e-5 + pow(R - 0.80e1, 3) * 0.776171283689263141e-5 : (R < 0.85e1 ? 0.113195627953585197e-3 + R * (-0.138349262151012350e-4) + pow(R - 0.825e1, 2) * 0.124110936688182228e-4 + pow(R - 0.825e1, 3) * 0.441011934383468666e-4 : (R < 0.875e1 ? -0.837302267948225559e-5 + R * 0.639594388997912340e-6 + pow(R - 0.85e1, 2) * 0.454869887475783710e-4 + pow(R - 0.85e1, 3) * (-0.160188186558280073e-3) : (R < 0.90e1 ? 0.557701415037911434e-4 + R * (-0.665219621689041655e-5) + pow(R - 0.875e1, 2) * (-0.746541511711316908e-4) + pow(R - 0.875e1, 3) * 0.287036866010773409e-3 : (R < 0.925e1 ? -0.928418230360737701e-4 + R * 0.984014057456375298e-5 + pow(R - 0.90e1, 2) * 0.140623498336948379e-3 + pow(R - 0.90e1, 3) * (-0.338530833132813524e-3) : (R < 0.95e1 ? -0.152586664751377444e-3 + R * 0.166773585306354000e-4 + pow(R - 0.925e1, 2) * (-0.113274626512661791e-3) + pow(R - 0.925e1, 3) * 0.153897582616480729e-3 : (R < 0.100e2 ? 0.106662727719500873e-3 + R * (-0.111041579851053555e-4) + pow(R - 0.95e1, 2) * 0.214856044969875735e-5 + pow(R - 0.95e1, 3) * 0.124437113210239090e-4 : (R < 0.105e2 ? -0.605810765761334397e-5 + R * 0.377185955361334457e-6 + pow(R - 0.100e2, 2) * 0.208141274312346226e-4 + pow(R - 0.100e2, 3) * (-0.261658623959145793e-4) : (R < 0.110e2 ? -0.166174802598302297e-4 + R * 0.156691658966002175e-5 + pow(R - 0.105e2, 2) * (-0.184346661626372497e-4) + pow(R - 0.105e2, 3) * 0.162665045186344062e-4 : (R < 0.120e2 ? 0.493898317750156082e-4 + R * (-0.466787118400141909e-5) + pow(R - 0.110e2, 2) * 0.596509061531436380e-5 + pow(R - 0.110e2, 3) * (-0.158313418731294411e-5) : (R < 0.140e2 ? -0.323975558212616986e-4 + R * 0.251290748468847489e-5 + pow(R - 0.120e2, 2) * 0.121568805337553082e-5 + pow(R - 0.120e2, 3) * (-0.631477619859884164e-6) : (R < 0.160e2 ? 0.542308458079217081e-5 + R * (-0.202071740128012216e-6) + pow(R - 0.140e2, 2) * (-0.257317766578377437e-5) + pow(R - 0.140e2, 3) * 0.775561953423890209e-6 : (R < 0.180e2 ? 0.171103450978228501e-4 + R * (-0.118803896217642805e-5) + pow(R - 0.160e2, 2) * 0.208019405475956688e-5 + pow(R - 0.160e2, 3) * (-0.500795740335676447e-6) : (R < 0.200e2 ? -0.201773366362069914e-4 + R * 0.112318837283372168e-5 + pow(R - 0.180e2, 2) * (-0.924580387254491802e-6) + pow(R - 0.180e2, 3) * 0.178881208793815468e-6 : (R < 0.250e2 ? 0.859033235496919626e-5 + R * (-0.428558670658459816e-6) + pow(R - 0.200e2, 2) * 0.148706865508400950e-6 + pow(R - 0.200e2, 3) * (-0.127201529057417963e-7) : -0.260844479937287478e-5 + R * 0.104498516494914991e-6 + pow(R - 0.250e2, 2) * (-0.420954280777259914e-7) + pow(R - 0.250e2, 3) * 0.421597119494859850e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.6130861376e1 * (R - 0.300e2) * (R - 0.250e2) + 0.6539567800e2 * R + 0.3842169154e4 - 0.3269783900e1 * R * R + 0.75000e3 * (0.1198953730e-1 * R - 0.4959353562e0) * R) * pow(R, -6));
}

static double radcoeff_3_12_13_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.205500433699999652e-1 + R * (-0.693889390390722838e-17) + pow(R - 0.475e1, 2) * (-0.323613325810753638e0) + pow(R - 0.475e1, 3) * 0.751599920203014582e0 : (R < 0.525e1 ? 0.753762618565578524e-1 + R * (-0.208816778673115711e-1) + pow(R - 0.50e1, 2) * 0.240086614341507326e0 + pow(R - 0.50e1, 3) * (-0.406730449889044110e0) : (R < 0.55e1 ? -0.145825564063543162e0 + R * 0.228996699492463179e-1 + pow(R - 0.525e1, 2) * (-0.649612230752757425e-1) + pow(R - 0.525e1, 3) * 0.119648764473161889e0 : (R < 0.575e1 ? -0.927605534667946541e-1 + R * 0.128532017503263027e-1 + pow(R - 0.55e1, 2) * 0.247753502795956849e-1 + pow(R - 0.55e1, 3) * (-0.247931449636035750e-1) : (R < 0.60e1 ? -0.136098509604328732e0 + R * 0.205921622094484731e-1 + pow(R - 0.575e1, 2) * 0.618049155689300283e-2 + pow(R - 0.575e1, 3) * (-0.734027101874757271e-2) : (R < 0.625e1 ? -0.146110590391278827e0 + R * 0.223061071718798042e-1 + pow(R - 0.60e1, 2) * 0.675288292832323077e-3 + pow(R - 0.60e1, 3) * (-0.168521765934061714e-1) : (R < 0.65e1 ? -0.128693331601951955e0 + R * 0.194839682070323122e-1 + pow(R - 0.625e1, 2) * (-0.119638441522223055e-1) + pow(R - 0.625e1, 3) * (-0.729272193562779426e-2) : (R < 0.675e1 ? -0.817845222879411554e-1 + R * 0.121346607679909471e-1 + pow(R - 0.65e1, 2) * (-0.174333856039431516e-1) + pow(R - 0.65e1, 3) * 0.905099284791745923e-2 : (R < 0.70e1 ? -0.353501735344762813e-1 + R * 0.511502912500389362e-2 + pow(R - 0.675e1, 2) * (-0.106451409680050572e-1) + pow(R - 0.675e1, 3) * 0.832819138235792872e-2 : (R < 0.725e1 ? -0.955812465593434100e-2 + R * 0.135399452519347711e-2 + pow(R - 0.70e1, 2) * (-0.439899743123660977e-2) + pow(R - 0.70e1, 3) * 0.535946426585080793e-2 : (R < 0.75e1 ? -0.108847641435093952e-2 + R * 0.159395359422198548e-3 + pow(R - 0.725e1, 2) * (-0.379399231848504253e-3) + pow(R - 0.725e1, 3) * 0.661175164788403176e-4 : (R < 0.775e1 ? 0.218613581737032585e-3 + R * (-0.179072221622710116e-4) + pow(R - 0.75e1, 2) * (-0.329811094489374011e-3) + pow(R - 0.75e1, 3) * 0.543488973833832216e-3 : (R < 0.80e1 ? 0.694752979591637277e-3 + R * (-0.809085868131144902e-4) + pow(R - 0.775e1, 2) * 0.778056358860001508e-4 + pow(R - 0.775e1, 3) * (-0.109777655654168913e-3) : (R < 0.825e1 ? 0.551344495902168666e-3 + R * (-0.625890793052710835e-4) + pow(R - 0.80e1, 2) * (-0.452760585462653664e-5) + pow(R - 0.80e1, 3) * 0.353553825428433457e-4 : (R < 0.85e1 ? 0.515599965167860071e-3 + R * (-0.582237480058012211e-4) + pow(R - 0.825e1, 2) * 0.219889310525059735e-4 + pow(R - 0.825e1, 3) * (-0.254943116372043473e-4) : (R < 0.875e1 ? 0.463754526937954457e-3 + R * (-0.520094659115240520e-4) + pow(R - 0.85e1, 2) * 0.286819732460271387e-5 + pow(R - 0.85e1, 3) * 0.118418868165973915e-3 : (R < 0.90e1 ? 0.258954765205897603e-3 + R * (-0.283718294681025813e-4) + pow(R - 0.875e1, 2) * 0.916823484490831528e-4 + pow(R - 0.875e1, 3) * (-0.157226748226691300e-3) : (R < 0.925e1 ? 0.114977813654590637e-3 + R * (-0.120106705360656272e-4) + pow(R - 0.90e1, 2) * (-0.262377127209353293e-4) + pow(R - 0.90e1, 3) * 0.675407352367913649e-4 : (R < 0.95e1 ? 0.118601739255622902e-3 + R * (-0.124656390396349092e-4) + pow(R - 0.925e1, 2) * 0.244178387066581910e-4 + pow(R - 0.925e1, 3) * (-0.384479312164742043e-4) : (R < 0.100e2 ? 0.720277488722499172e-4 + R * (-0.746570678939472869e-5) + pow(R - 0.95e1, 2) * (-0.441810970569746222e-5) + pow(R - 0.95e1, 3) * 0.101397224889738371e-4 : (R < 0.105e2 ? 0.403238651466181298e-4 + R * (-0.427902462836181267e-5) + pow(R - 0.100e2, 2) * 0.107914740277632943e-4 + pow(R - 0.100e2, 3) * (-0.426795459007933593e-5) : (R < 0.110e2 ? -0.372120955648407787e-4 + R * 0.331148345684197922e-5 + pow(R - 0.105e2, 2) * 0.438954214264429037e-5 + pow(R - 0.105e2, 3) * (-0.538133082465649590e-5) : (R < 0.120e2 ? -0.406763606477328707e-4 + R * 0.366502748099389682e-5 + pow(R - 0.110e2, 2) * (-0.368245409434045391e-5) + pow(R - 0.110e2, 3) * 0.151141510134655684e-5 : (R < 0.140e2 ? -0.887944502523191700e-5 + R * 0.834364596352659743e-6 + pow(R - 0.120e2, 2) * 0.851791209699216828e-6 + pow(R - 0.120e2, 3) * (-0.374657612062773361e-6) : (R < 0.160e2 ? 0.677263000045253640e-5 + R * (-0.254361909603752643e-6) + pow(R - 0.140e2, 2) * (-0.139615446267742334e-5) + pow(R - 0.140e2, 3) * 0.385620697489649810e-6 : (R < 0.180e2 ? 0.195876894226023713e-4 + R * (-0.121153139043764828e-5) + pow(R - 0.160e2, 2) * 0.917569722260475417e-6 + pow(R - 0.160e2, 3) * (-0.184726181858325594e-6) : (R < 0.200e2 ? -0.438400586457822785e-5 + R * 0.242033316304345994e-6 + pow(R - 0.180e2, 2) * (-0.190787368889478229e-6) + pow(R - 0.180e2, 3) * 0.366725249686526120e-7 : (R < 0.250e2 ? 0.160780837829471091e-5 + R * (-0.810458596297355398e-7) + pow(R - 0.200e2, 2) * 0.292477809224374457e-7 + pow(R - 0.200e2, 3) * (-0.252484492009806695e-8) : -0.554463719082097233e-6 + R * 0.220685805872838874e-7 + pow(R - 0.250e2, 2) * (-0.862489287903355566e-8) + pow(R - 0.250e2, 3) * 0.858090925115355575e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4194820576e1 * (R - 0.300e2) * (R - 0.250e2) - 0.4474461772e2 * R - 0.2628827538e4 + 0.2237230886e1 * R * R + 0.75000e3 * (-0.820333468e-2 * R + 0.3393218631e0) * R) * pow(R, -6));
}

static double radcoeff_6_0_6_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.730168395799991746e-3 + R * (-0.173472347597680709e-17) + pow(R - 0.475e1, 2) * (-0.657761299630681695e-1) + pow(R - 0.475e1, 3) * 0.134935492588272671e0 : (R < 0.525e1 ? 0.352054911591647840e-1 + R * (-0.758766012123295724e-2) + pow(R - 0.50e1, 2) * 0.354254894781363405e-1 + pow(R - 0.50e1, 3) * (-0.505216368688180609e-1) : (R < 0.55e1 ? -0.662948991189209452e-2 + R * 0.652277704931827473e-3 + pow(R - 0.525e1, 2) * (-0.246573817347720469e-2) + pow(R - 0.525e1, 3) * 0.741536413499957903e-2 : (R < 0.575e1 ? -0.753404777028105453e-2 + R * 0.809789393505646249e-3 + pow(R - 0.55e1, 2) * 0.309578492777247980e-2 + pow(R - 0.55e1, 3) * (-0.480567183118025751e-2) : (R < 0.60e1 ? -0.111349165590121299e-1 + R * 0.145661838904558786e-2 + pow(R - 0.575e1, 2) * (-0.508468945612713876e-3) + pow(R - 0.575e1, 3) * 0.663003061721451092e-3 : (R < 0.625e1 ? -0.103768080528720170e-1 + R * 0.132669699031200280e-2 + pow(R - 0.60e1, 2) * (-0.112166493216255126e-4) + pow(R - 0.60e1, 3) * (-0.123985791705543422e-3) : (R < 0.65e1 ? -0.101990984926650045e-1 + R * 0.129784132970640073e-2 + pow(R - 0.625e1, 2) * (-0.104205993100783096e-3) + pow(R - 0.625e1, 3) * 0.388344777100722469e-3 : (R < 0.675e1 ? -0.103341691996055654e-1 + R * 0.131855297886239453e-2 + pow(R - 0.65e1, 2) * 0.187052589724758770e-3 + pow(R - 0.65e1, 3) * (-0.497631524697345366e-3) : (R < 0.70e1 ? -0.103317414971971465e-1 + R * 0.131877336284402162e-2 + pow(R - 0.675e1, 2) * (-0.186171053798250309e-3) + pow(R - 0.675e1, 3) * (-0.371716278311344148e-3) : (R < 0.725e1 ? -0.920970895133063627e-2 + R * 0.115599103376151950e-2 + pow(R - 0.70e1, 2) * (-0.464958262531758447e-3) + pow(R - 0.70e1, 3) * 0.114698532342722155e-3 : (R < 0.75e1 ? -0.770742129389678007e-2 + R * 0.945017877309900761e-3 + pow(R - 0.725e1, 2) * (-0.378934363274716828e-3) + pow(R - 0.725e1, 3) * 0.482566897404564343e-4 : (R < 0.775e1 ? -0.637720778849158385e-2 + R * 0.764598824998877929e-3 + pow(R - 0.75e1, 2) * (-0.342741845969374498e-3) + pow(R - 0.75e1, 3) * 0.102752654954505491e-4 : (R < 0.80e1 ? -0.508527519488305435e-2 + R * 0.595154514294587576e-3 + pow(R - 0.775e1, 2) * (-0.335035396847786586e-3) + pow(R - 0.775e1, 3) * 0.672511314777443517e-4 : (R < 0.825e1 ? -0.386589921808217071e-2 + R * 0.440246403022771337e-3 + pow(R - 0.80e1, 2) * (-0.284597048239478316e-3) + pow(R - 0.80e1, 3) * 0.129739062993571133e-3 : (R < 0.85e1 ? -0.290838664981819643e-2 + R * 0.322273953214326843e-3 + pow(R - 0.825e1, 2) * (-0.187292750994299959e-3) + pow(R - 0.825e1, 3) * (-0.513514346520300833e-4) : (R < 0.875e1 ? -0.204305927221933026e-2 + R * 0.218999183719921216e-3 + pow(R - 0.85e1, 2) * (-0.225806326983322525e-3) + pow(R - 0.85e1, 3) * 0.205130669214550511e-3 : (R < 0.90e1 ? -0.140260682457739642e-2 + R * 0.144558020705988147e-3 + pow(R - 0.875e1, 2) * (-0.719583250724096417e-4) + pow(R - 0.875e1, 3) * (-0.428692710061721058e-4) : (R < 0.925e1 ? -0.101161969460513454e-2 + R * 0.100540869856126063e-3 + pow(R - 0.90e1, 2) * (-0.104110278327038721e-3) + pow(R - 0.90e1, 3) * 0.742646804101378382e-4 : (R < 0.95e1 ? -0.664258969192944903e-3 + R * 0.624103582695075606e-4 + pow(R - 0.925e1, 2) * (-0.484117680194353357e-4) + pow(R - 0.925e1, 3) * 0.445686293656203739e-4 : (R < 0.100e2 ? -0.516020292825515202e-3 + R * 0.465610922658437116e-4 + pow(R - 0.95e1, 2) * (-0.149852959952200535e-4) + pow(R - 0.95e1, 3) * 0.149529482070652559e-4 : (R < 0.105e2 ? -0.480191649899225944e-3 + R * 0.427905074259225983e-4 + pow(R - 0.100e2, 2) * 0.744412631537782950e-5 + pow(R - 0.100e2, 3) * (-0.153947616144460656e-4) : (R < 0.110e2 ? -0.437184542119891696e-3 + R * 0.386885625304658794e-4 + pow(R - 0.105e2, 2) * (-0.156480161062912681e-4) + pow(R - 0.105e2, 3) * 0.415634817071902547e-5 : (R < 0.120e2 ? -0.302738697864352664e-3 + R * 0.261578075522138783e-4 + pow(R - 0.110e2, 2) * (-0.941349385021272903e-5) + pow(R - 0.110e2, 3) * 0.340795697998850728e-6 : (R < 0.140e2 ? -0.981561887414196559e-4 + R * 0.835320694578497086e-5 + pow(R - 0.120e2, 2) * (-0.839110675621617674e-5) + pow(R - 0.120e2, 3) * 0.191351552141184505e-5 : (R < 0.160e2 ? 0.320188791560263033e-4 + R * (-0.224903382213759337e-5) + pow(R - 0.140e2, 2) * 0.308998637225489399e-5 + pow(R - 0.140e2, 3) * (-0.787781521343048650e-6) : (R < 0.180e2 ? -0.842850325224637669e-5 + R * 0.657533410765398579e-6 + pow(R - 0.160e2, 2) * (-0.163670275580339812e-5) + pow(R - 0.160e2, 3) * 0.406238537460349334e-6 : (R < 0.200e2 ? 0.183696683510320159e-4 + R * (-0.101441516292400085e-5) + pow(R - 0.180e2, 2) * 0.800728468958698305e-6 + pow(R - 0.180e2, 3) * (-0.153945926398348918e-6) : (R < 0.250e2 ? -0.677024036541210417e-5 + R * 0.341147596130605250e-6 + pow(R - 0.200e2, 2) * (-0.122947089431395178e-6) + pow(R - 0.200e2, 3) * 0.106102653658548237e-7 : 0.232489036640586638e-5 + R * (-0.925533957442346450e-7) + pow(R - 0.250e2, 2) * 0.362068910564271938e-7 + pow(R - 0.250e2, 3) * (-0.360300251751605285e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1686769830e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1799171044e3 * R + 0.1057129704e5 - 0.8995855220e1 * R * R + 0.75000e3 * (0.3298702566e-1 * R - 0.1364493650e1) * R) * pow(R, -6));
}

static double radcoeff_6_2_8_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.133357873800000037e-1 + R * 0.867361737988403547e-18 + pow(R - 0.475e1, 2) * 0.285127463227361246e-1 + pow(R - 0.475e1, 3) * (-0.314660732909445018e-1) : (R < 0.525e1 ? -0.538278202265798367e-1 + R * 0.835648441931596819e-2 + pow(R - 0.50e1, 2) * 0.491319135452774648e-2 + pow(R - 0.50e1, 3) * (-0.965647996716647791e-2) : (R < 0.55e1 ? -0.570631581043646585e-1 + R * 0.900249010273612531e-2 + pow(R - 0.525e1, 2) * (-0.232916862084711239e-2) + pow(R - 0.525e1, 3) * (-0.153976818438955609e-2) : (R < 0.575e1 ? -0.492396903735674088e-1 + R * 0.754919925773952886e-2 + pow(R - 0.55e1, 2) * (-0.348399475913927946e-2) + pow(R - 0.55e1, 3) * 0.868435072724666108e-3 : (R < 0.60e1 ? -0.403636673782581321e-1 + R * 0.597003345430576274e-2 + pow(R - 0.575e1, 2) * (-0.283266845459577985e-2) + pow(R - 0.575e1, 3) * 0.750217013490904862e-3 : (R < 0.625e1 ? -0.328749757922245089e-1 + R * 0.469436491703741771e-2 + pow(R - 0.60e1, 2) * (-0.227000569447760115e-2) + pow(R - 0.60e1, 3) * 0.585508265311723863e-3 : (R < 0.65e1 ? -0.266000772846535331e-1 + R * 0.366914486954456531e-2 + pow(R - 0.625e1, 2) * (-0.183087449549380822e-2) + pow(R - 0.625e1, 3) * 0.170577968526218872e-2 : (R < 0.675e1 ? -0.228164310140980924e-1 + R * 0.307354131278432183e-2 + pow(R - 0.65e1, 2) * (-0.551539731547166681e-3) + pow(R - 0.65e1, 3) * (-0.725518206360475666e-3) : (R < 0.70e1 ? -0.200825578953975070e-1 + R * 0.266173678331814911e-2 + pow(R - 0.675e1, 2) * (-0.109567838631752343e-2) + pow(R - 0.675e1, 3) * (-0.205397995820294374e-3) : (R < 0.725e1 ? -0.160497879166015787e-1 + R * 0.207538546594308263e-2 + pow(R - 0.70e1, 2) * (-0.124972688318274422e-2) + pow(R - 0.70e1, 3) * 0.340187117641654977e-3 : (R < 0.75e1 ? -0.120547623345940245e-1 + R * 0.151430710890952062e-2 + pow(R - 0.725e1, 2) * (-0.994586544951502971e-3) + pow(R - 0.725e1, 3) * 0.354425698053682358e-3 : (R < 0.775e1 ? -0.888009768644125799e-2 + R * 0.108346865481883455e-2 + pow(R - 0.75e1, 2) * (-0.728767271411241203e-3) + pow(R - 0.75e1, 3) * 0.332027267743611933e-3 : (R < 0.80e1 ? -0.657896166156734553e-2 + R * 0.781340131815141318e-3 + pow(R - 0.775e1, 2) * (-0.479746820603532253e-3) + pow(R - 0.775e1, 3) * 0.129155605371867590e-3 : (R < 0.825e1 ? -0.488167390716480205e-2 + R * 0.565683397520600297e-3 + pow(R - 0.80e1, 2) * (-0.382880116574631560e-3) + pow(R - 0.80e1, 3) * (-0.240900860310783605e-4) : (R < 0.85e1 ? -0.328933548934527351e-2 + R * 0.369726448102457392e-3 + pow(R - 0.825e1, 2) * (-0.400947681097940331e-3) + pow(R - 0.825e1, 3) * 0.455411196352442952e-3 : (R < 0.875e1 ? -0.232906286899134743e-2 + R * 0.254642206869570267e-3 + pow(R - 0.85e1, 2) * (-0.593892838336081231e-4) + pow(R - 0.85e1, 3) * (-0.337151211378691404e-3) : (R < 0.90e1 ? -0.152507586396853851e-2 + R * 0.161731712819261544e-3 + pow(R - 0.875e1, 2) * (-0.312252692367626669e-3) + pow(R - 0.875e1, 3) * 0.454699955722321681e-3 : (R < 0.925e1 ? -0.899656030060452046e-3 + R * 0.908616083333835549e-4 + pow(R - 0.90e1, 2) * 0.287722744241146054e-4 + pow(R - 0.90e1, 3) * (-0.254782755510595330e-3) : (R < 0.95e1 ? -0.593021671086639058e-3 + R * 0.574759788872042198e-4 + pow(R - 0.925e1, 2) * (-0.162314792208831919e-3) + pow(R - 0.925e1, 3) * 0.270007102800060082e-3 : (R < 0.100e2 ? -0.308902373489095613e-3 + R * 0.269449145577995393e-4 + pow(R - 0.95e1, 2) * 0.401905348912131766e-4 + pow(R - 0.95e1, 3) * (-0.493259800936245103e-4) : (R < 0.105e2 ? -0.336980985487943274e-3 + R * 0.301409643787943298e-4 + pow(R - 0.100e2, 2) * (-0.337984352492235889e-4) + pow(R - 0.100e2, 3) * 0.329357361032698594e-4 : (R < 0.110e2 ? -0.245798978983742956e-3 + R * 0.210443312070231389e-4 + pow(R - 0.105e2, 2) * 0.156051689056812003e-4 + pow(R - 0.105e2, 3) * (-0.181998573594549626e-4) : (R < 0.120e2 ? -0.265680703674244271e-3 + R * 0.229996070931131138e-4 + pow(R - 0.110e2, 2) * (-0.116946171335012470e-4) + pow(R - 0.110e2, 3) * 0.195184525038813307e-5 : (R < 0.140e2 ? -0.650190933644002585e-4 + R * 0.546590857727502115e-5 + pow(R - 0.120e2, 2) * (-0.583908138233684736e-5) + pow(R - 0.120e2, 3) * 0.128159668972466813e-5 : (R < 0.160e2 ? 0.335576681612688844e-4 + R * (-0.251125667537634866e-5) + pow(R - 0.140e2, 2) * 0.185049875601116225e-5 + pow(R - 0.140e2, 3) * (-0.319274162161493855e-6) : (R < 0.180e2 ? -0.187258113616859683e-4 + R * 0.105944840273037301e-5 + pow(R - 0.160e2, 2) * (-0.651462169578012681e-7) + pow(R - 0.160e2, 3) * (-0.342935050786926235e-7) : (R < 0.200e2 ? -0.716281955208741384e-5 + R * 0.387341473954856293e-6 + pow(R - 0.180e2, 2) * (-0.270907247429956996e-6) + pow(R - 0.180e2, 3) * 0.510531315512644204e-7 : (R < 0.250e2 ? 0.158180473269597294e-5 + R * (-0.836499371497986446e-7) + pow(R - 0.200e2, 2) * 0.354115418776295266e-7 + pow(R - 0.200e2, 3) * (-0.315975128713395993e-8) : -0.856227437286241396e-6 + R * 0.334841350914496580e-7 + pow(R - 0.250e2, 2) * (-0.119847274293798658e-7) + pow(R - 0.250e2, 3) * 0.116787551821798661e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2918208330e2 * (R - 0.300e2) * (R - 0.250e2) - 0.3112767308e3 * R - 0.1828683944e5 + 0.1556383654e2 * R * R + 0.75000e3 * (-0.570661272e-1 * R + 0.2360445173e1) * R) * pow(R, -6));
}

static double radcoeff_6_4_10_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.121629273699999998e-1 + pow(R - 0.475e1, 2) * 0.105872169108674904e0 + pow(R - 0.475e1, 3) * (-0.193107674386699568e0) : (R < 0.525e1 ? -0.922052022471563787e-1 + R * 0.167283956068312763e-1 + pow(R - 0.50e1, 2) * (-0.389585866813497925e-1) + pow(R - 0.50e1, 3) * 0.527296093360987289e-1 : (R < 0.55e1 ? -0.434556329205431913e-1 + R * 0.713590401667489344e-2 + pow(R - 0.525e1, 2) * 0.588620320724259961e-3 + pow(R - 0.525e1, 3) * (-0.101484193416953375e-1) : (R < 0.575e1 ? -0.347305616385803137e-1 + R * 0.552738555046914781e-2 + pow(R - 0.55e1, 2) * (-0.702269418554724283e-2) + pow(R - 0.55e1, 3) * 0.700834278268260783e-2 : (R < 0.60e1 ? -0.224255984483289622e-1 + R * 0.333010272944851519e-2 + pow(R - 0.575e1, 2) * (-0.176643709853528674e-2) + pow(R - 0.575e1, 3) * 0.114331154964901073e-3 : (R < 0.625e1 ? -0.173635255964207438e-1 + R * 0.246832127173679094e-2 + pow(R - 0.60e1, 2) * (-0.168068873231161093e-2) + pow(R - 0.60e1, 3) * 0.532569909457782618e-3 : (R < 0.65e1 ? -0.128322003115270006e-1 + R * 0.172783376360432020e-2 + pow(R - 0.625e1, 2) * (-0.128126130021827397e-2) + pow(R - 0.625e1, 3) * 0.194892994320397441e-2 : (R < 0.675e1 ? -0.110929862549985318e-1 + R * 0.145262747784592815e-2 + pow(R - 0.65e1, 2) * 0.180436157184706757e-3 + pow(R - 0.65e1, 3) * (-0.527308498273680007e-3) : (R < 0.70e1 ? -0.110315454028307742e-1 + R * 0.144397521301196648e-2 + pow(R - 0.675e1, 2) * (-0.215045216520553248e-3) + pow(R - 0.675e1, 3) * (-0.599693281309250301e-3) : (R < 0.725e1 ? -0.951460024684343784e-2 + R * 0.122401011450620550e-2 + pow(R - 0.70e1, 2) * (-0.664815177502491028e-3) + pow(R - 0.70e1, 3) * 0.197662660310674688e-3 : (R < 0.75e1 ? -0.741180537678328387e-2 + R * 0.928664274563211520e-3 + pow(R - 0.725e1, 2) * (-0.516568182269485005e-3) + pow(R - 0.725e1, 3) * 0.157735072665557592e-4 : (R < 0.775e1 ? -0.552889523820711097e-2 + R * 0.673337716040948195e-3 + pow(R - 0.75e1, 2) * (-0.504738051819568186e-3) + pow(R - 0.75e1, 3) * 0.403427022623101836e-3 : (R < 0.80e1 ? -0.418450776066571668e-2 + R * 0.496611256872995740e-3 + pow(R - 0.775e1, 2) * (-0.202167784852241795e-3) + pow(R - 0.775e1, 3) * (-0.290409321589645969e-4) : (R < 0.825e1 ? -0.334536447413655118e-2 + R * 0.390082189667068872e-3 + pow(R - 0.80e1, 2) * (-0.223948483971465244e-3) + pow(R - 0.80e1, 3) * 0.508880020127585355e-4 : (R < 0.85e1 ? -0.251349601108451009e-2 + R * 0.287649448058728530e-3 + pow(R - 0.825e1, 2) * (-0.185782482461896339e-3) + pow(R - 0.825e1, 3) * (-0.473915251720711216e-4) : (R < 0.875e1 ? -0.166074211511314470e-2 + R * 0.185872295858017025e-3 + pow(R - 0.85e1, 2) * (-0.221326126340949680e-3) + pow(R - 0.85e1, 3) * 0.255905793395526100e-3 : (R < 0.90e1 ? -0.112212010953552941e-2 + R * 0.123191568949203349e-3 + pow(R - 0.875e1, 2) * (-0.293967812943051017e-4) + pow(R - 0.875e1, 3) * (-0.179933825050033054e-3) : (R < 0.925e1 ? -0.690845028786526484e-3 + R * 0.747555861051696043e-4 + pow(R - 0.90e1, 2) * (-0.164347150081829902e-3) + pow(R - 0.90e1, 3) * 0.169444940404605817e-3 : (R < 0.95e1 ? -0.232244647858593779e-3 + R * 0.243529373901182455e-4 + pow(R - 0.925e1, 2) * (-0.372634447783755195e-4) + pow(R - 0.925e1, 3) * (-0.271756549638989373e-5) : (R < 0.100e2 ? -0.527740488803951266e-4 + R * 0.521167147035738148e-5 + pow(R - 0.95e1, 2) * (-0.393016189006679400e-4) + pow(R - 0.95e1, 3) * 0.321882688639063558e-4 : (R < 0.105e2 ? 0.930282525298079145e-4 + R * (-0.994874578238079085e-5) + pow(R - 0.100e2, 2) * 0.898078439519159704e-5 + pow(R - 0.100e2, 3) * (-0.457205584486002743e-5) : (R < 0.110e2 ? 0.364086452767592729e-4 + R * (-0.439700327083421628e-5) + pow(R - 0.105e2, 2) * 0.212270062790155505e-5 + pow(R - 0.105e2, 3) * 0.380646524353375201e-5 : (R < 0.120e2 ? -0.173379165768941937e-4 + R * 0.580546289717654043e-6 + pow(R - 0.110e2, 2) * 0.783239849320218348e-5 + pow(R - 0.110e2, 3) * (-0.326591617391983760e-5) : (R < 0.140e2 ? -0.831760158333501114e-4 + R * 0.644759475436250906e-5 + pow(R - 0.120e2, 2) * (-0.196535002855732973e-5) + pow(R - 0.120e2, 3) * 0.137250270938037652e-6 : (R < 0.160e2 ? -0.293785769805498592e-5 + R * 0.233197891389641849e-6 + pow(R - 0.140e2, 2) * (-0.114184840292910371e-5) + pow(R - 0.140e2, 3) * 0.324804496992141391e-6 : (R < 0.180e2 ? 0.580901903073722485e-5 + R * (-0.436541756421076523e-6) + pow(R - 0.160e2, 2) * 0.806978579023744528e-6 + pow(R - 0.160e2, 3) * (-0.190212392331603104e-6) : (R < 0.200e2 ? -0.950134673790394891e-5 + R * 0.508823851694663810e-6 + pow(R - 0.180e2, 2) * (-0.334295774965874256e-6) + pow(R - 0.180e2, 3) * 0.622785166217711549e-7 : (R < 0.250e2 ? 0.145651630325158393e-5 + R * (-0.810170487075791953e-7) + pow(R - 0.200e2, 2) * 0.393753247647527202e-7 + pow(R - 0.200e2, 3) * (-0.359863731024737633e-8) : -0.110531647588486988e-5 + R * 0.428384006713947940e-7 + pow(R - 0.250e2, 2) * (-0.146042348889579197e-7) + pow(R - 0.250e2, 3) * 0.140545660133579203e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.5242389469e2 * (R - 0.300e2) * (R - 0.250e2) - 0.5591884424e3 * R - 0.3285225368e5 + 0.2795942212e2 * R * R + 0.75000e3 * (-0.1025177529e0 * R + 0.4240505304e1) * R) * pow(R, -6));
}

static double radcoeff_7_0_7_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.108509198200000004e0 + pow(R - 0.475e1, 2) * 0.298562798849629107e1 + pow(R - 0.475e1, 3) * (-0.634857791686516393e1) : (R < 0.525e1 ? -0.153338215304963588e1 + R * 0.302455634835927190e0 + pow(R - 0.50e1, 2) * (-0.177580544915258187e1) + pow(R - 0.50e1, 3) * 0.284483956051549125e1 : (R < 0.55e1 ? 0.261180986154472383e0 + R * (-0.520396721437090329e-1) + pow(R - 0.525e1, 2) * 0.357824221234036621e0 + pow(R - 0.525e1, 3) * (-0.484543661516801949e0) : (R < 0.575e1 ? -0.208356952183999050e0 + R * 0.360205019389089193e-1 + pow(R - 0.55e1, 2) * (-0.558352490356482569e-2) + pow(R - 0.55e1, 3) * 0.169072425071716603e0 : (R < 0.60e1 ? -0.372292740030421843e0 + R * 0.649298191880733622e-1 + pow(R - 0.575e1, 2) * 0.121220793900222626e0 + pow(R - 0.575e1, 3) * (-0.171123431410064308e0) : (R < 0.625e1 ? -0.538538765392785668e0 + R * 0.934545727487976208e-1 + pow(R - 0.60e1, 2) * (-0.712177965732560536e-2) + pow(R - 0.60e1, 3) * (-0.184722252071459370e0) : (R < 0.65e1 ? -0.303143211234601140e0 + R * 0.552582606567361828e-1 + pow(R - 0.625e1, 2) * (-0.145663468710920146e0) + pow(R - 0.625e1, 3) * 0.622666086559015355e-1 : (R < 0.675e1 ? 0.862445817423252159e-1 + R * (-0.589848457574234167e-2) + pow(R - 0.65e1, 2) * (-0.989635122189939931e-1) + pow(R - 0.65e1, 3) * 0.108371080807853459e0 : (R < 0.70e1 ? 0.278597364957925975e0 + R * (-0.350606630337668146e-1) + pow(R - 0.675e1, 2) * (-0.176852016131039021e-1) + pow(R - 0.675e1, 3) * 0.373203308326846631e-1 : (R < 0.725e1 ? 0.290990441454332727e0 + R * (-0.369057018091903874e-1) + pow(R - 0.70e1, 2) * 0.103050465114095987e-1 + pow(R - 0.70e1, 3) * 0.629666530140784737e-2 : (R < 0.75e1 ? 0.245817569258669211e0 + R * (-0.305725538094716170e-1) + pow(R - 0.725e1, 2) * 0.150275454874654844e-1 + pow(R - 0.725e1, 3) * (-0.170450307831605569e-2) : (R < 0.775e1 ? 0.192773819866923546e0 + R * (-0.233783753929231383e-1) + pow(R - 0.75e1, 2) * 0.137491681787284426e-1 + pow(R - 0.75e1, 3) * (-0.368563282814356186e-2) : (R < 0.80e1 ? 0.145653213375977697e0 + R * (-0.171948474588358331e-1) + pow(R - 0.775e1, 2) * 0.109849435576207712e-1 + pow(R - 0.775e1, 3) * (-0.382647690510973942e-2) : (R < 0.825e1 ? 0.108079924773868200e0 + R * (-0.124198400997335250e-1) + pow(R - 0.80e1, 2) * 0.811508587878846666e-2 + pow(R - 0.80e1, 3) * (-0.292926307141747055e-2) : (R < 0.85e1 ? 0.795978224693980607e-1 + R * (-0.891153398623006736e-2) + pow(R - 0.825e1, 2) * 0.591813857522536374e-2 + pow(R - 0.825e1, 3) * (-0.209276514522037252e-2) : (R < 0.875e1 ? 0.581182621804427410e-1 + R * (-0.634485816334620471e-2) + pow(R - 0.85e1, 2) * 0.434856471631008424e-2 + pow(R - 0.85e1, 3) * (-0.172293081170106889e-2) : (R < 0.90e1 ? 0.421648394103697408e-1 + R * (-0.449362533238511358e-2) + pow(R - 0.875e1, 2) * 0.305636660753428246e-2 + pow(R - 0.875e1, 3) * (-0.921641527975311861e-3) : (R < 0.925e1 ? 0.301430820190200892e-1 + R * (-0.313824981511334321e-2) + pow(R - 0.90e1, 2) * 0.236513546155279857e-2 + pow(R - 0.90e1, 3) * (-0.103535171639770147e-2) : (R < 0.95e1 ? 0.211316622382439999e-1 + R * (-0.214981053116151347e-2) + pow(R - 0.925e1, 2) * 0.158862167425452235e-2 + pow(R - 0.925e1, 3) * (-0.588765532833872502e-3) : (R < 0.100e2 ? 0.147245372840857300e-1 + R * (-0.146589323144060324e-2) + pow(R - 0.95e1, 2) * 0.114704752462911792e-2 + pow(R - 0.95e1, 3) * (-0.412900073895822303e-3) : (R < 0.105e2 ? 0.658596196393352023e-2 + R * (-0.628520762233351991e-3) + pow(R - 0.100e2, 2) * 0.527697413785384469e-3 + pow(R - 0.100e2, 3) * (-0.182579811437360597e-3) : (R < 0.110e2 ? 0.259205701127287417e-2 + R * (-0.237758207025988010e-3) + pow(R - 0.105e2, 2) * 0.253827696629343547e-3 + pow(R - 0.105e2, 3) * (-0.116856145234735107e-3) : (R < 0.120e2 ? 0.812865452539653826e-3 + R * (-0.715726193226958005e-4) + pow(R - 0.110e2, 2) * 0.785434787772408723e-4 + pow(R - 0.110e2, 3) * (-0.276899789645450610e-4) : (R < 0.140e2 ? -0.244852955738089926e-4 + R * 0.244440133815074924e-5 + pow(R - 0.120e2, 2) * (-0.452645811639431236e-5) + pow(R - 0.120e2, 3) * 0.105615919928446867e-5 : (R < 0.160e2 ? 0.419050545935802324e-4 + R * (-0.298752073601287366e-5) + pow(R - 0.140e2, 2) * 0.181049707931250027e-5 + pow(R - 0.140e2, 3) * (-0.303615722278031691e-6) : (R < 0.180e2 ? -0.108594772664119505e-4 + R * 0.611078913900746924e-6 + pow(R - 0.160e2, 2) * (-0.111972543556899522e-7) + pow(R - 0.160e2, 3) * (-0.267671152973417586e-7) : (R < 0.200e2 ? -0.453050398837794836e-5 + R * 0.245084512909886052e-6 + pow(R - 0.180e2, 2) * (-0.171799946139740510e-6) + pow(R - 0.180e2, 3) * 0.323889998798987349e-7 : (R < 0.250e2 ? 0.101204394610582255e-5 + R * (-0.534472730902911311e-7) + pow(R - 0.200e2, 2) * 0.225340531396518991e-7 + pow(R - 0.200e2, 3) * (-0.200916203711873441e-8) : -0.542084445358069810e-6 + R * 0.212061055223227893e-7 + pow(R - 0.250e2, 2) * (-0.760337741712911536e-8) + pow(R - 0.250e2, 3) * 0.741246807332911476e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1820848502e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1942271560e3 * R - 0.1140955583e5 + 0.9711357800e1 * R * R + 0.75000e3 * (-0.3560585564e-1 * R + 0.1472754169e1) * R) * pow(R, -6));
}

static double radcoeff_7_0_7_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.324203720400000006e0 + pow(R - 0.475e1, 2) * (-0.736990123676331432e1) + pow(R - 0.475e1, 3) * 0.149848115646532563e2 : (R < 0.525e1 ? 0.447421482384585634e1 + R * (-0.875298450009171281e0) + pow(R - 0.50e1, 2) * 0.386870743672662831e1 + pow(R - 0.50e1, 3) * (-0.556742025299977161e1) : (R < 0.55e1 ? -0.459096126725990414e-1 + R * 0.151639709166855319e-1 + pow(R - 0.525e1, 2) * (-0.306857753023200952e0) + pow(R - 0.525e1, 3) * 0.594446635185835182e0 : (R < 0.575e1 ? 0.175035734716639552e0 + R * (-0.268061614975708268e-1) + pow(R - 0.55e1, 2) * 0.138977223366175490e0 + pow(R - 0.55e1, 3) * (-0.420148935423568681e0) : (R < 0.60e1 ? 0.230570537886812782e0 + R * (-0.360954752064022236e-1) + pow(R - 0.575e1, 2) * (-0.176134478201501049e0) + pow(R - 0.575e1, 3) * 0.149321051468439742e0 : (R < 0.625e1 ? 0.582312526135921660e0 + R * (-0.961650171568202844e-1) + pow(R - 0.60e1, 2) * (-0.641436896001712359e-1) + pow(R - 0.60e1, 3) * 0.222922363469809565e0 : (R < 0.65e1 ? 0.520998592769478908e0 + R * (-0.864389188063166142e-1) + pow(R - 0.625e1, 2) * 0.103048083002185958e0 + pow(R - 0.625e1, 3) * 0.226276002523219666e-1 : (R < 0.675e1 ? 0.165308996646436196e0 + R * (-0.306722022579132628e-1) + pow(R - 0.65e1, 2) * 0.120018783191427433e0 + pow(R - 0.65e1, 3) * (-0.980530556790975005e-1) : (R < 0.70e1 ? -0.109686903076295278e0 + R * 0.109522413979696708e-1 + pow(R - 0.675e1, 2) * 0.464789914321043079e-1 + pow(R - 0.675e1, 3) * (-0.523432399359319428e-1) : (R < 0.725e1 ? -0.201575796832242082e0 + R * 0.243773796260345829e-1 + pow(R - 0.70e1, 2) * 0.722156148015534911e-2 + pow(R - 0.70e1, 3) * (-0.173273202571747123e-1) : (R < 0.75e1 ? -0.204019023009716999e0 + R * 0.247392878178919993e-1 + pow(R - 0.725e1, 2) * (-0.577392871272568772e-2) + pow(R - 0.725e1, 3) * (-0.478818175536926353e-2) : (R < 0.775e1 ? -0.176069095627980648e0 + R * 0.209545393823974205e-1 + pow(R - 0.75e1, 2) * (-0.936506502925263558e-2) + pow(R - 0.75e1, 3) * 0.931932718651852011e-3 : (R < 0.80e1 ? -0.141704438487016970e0 + R * 0.164467442525183215e-1 + pow(R - 0.775e1, 2) * (-0.866611549026374654e-2) + pow(R - 0.775e1, 3) * 0.203894944076184192e-2 : (R < 0.825e1 ? -0.110608174320234356e0 + R * 0.124959895275292953e-1 + pow(R - 0.80e1, 2) * (-0.713690340969236510e-2) + pow(R - 0.80e1, 3) * 0.233916449430073004e-2 : (R < 0.85e1 ? -0.851963498502571193e-1 + R * 0.936613116536449963e-2 + pow(R - 0.825e1, 2) * (-0.538253003896681757e-2) + pow(R - 0.825e1, 3) * 0.150128595803527979e-2 : (R < 0.875e1 ? -0.650262222146079927e-1 + R * 0.695635726301270432e-2 + pow(R - 0.85e1, 2) * (-0.425656557044035763e-2) + pow(R - 0.85e1, 3) * 0.163399388155815355e-2 : (R < 0.90e1 ? -0.493250232496159555e-1 + R * 0.513444833058468008e-2 + pow(R - 0.875e1, 2) * (-0.303107015927174235e-2) + pow(R - 0.875e1, 3) * 0.836464851732087291e-3 : (R < 0.925e1 ? -0.372731140918371728e-1 + R * 0.377575041064857507e-2 + pow(R - 0.90e1, 2) * (-0.240372152047267683e-2) + pow(R - 0.90e1, 3) * 0.101879080751350885e-2 : (R < 0.95e1 ? -0.280571813550944335e-1 + R * 0.276491292682101968e-2 + pow(R - 0.925e1, 2) * (-0.163962841483754514e-2) + pow(R - 0.925e1, 3) * 0.571813262213868357e-3 : (R < 0.100e2 ? -0.213810309516397970e-1 + R * 0.205231370606734700e-2 + pow(R - 0.95e1, 2) * (-0.121076846817714384e-2) + pow(R - 0.95e1, 3) * 0.387363336084898353e-3 : (R < 0.105e2 ? -0.124328429905387738e-1 + R * 0.113206773995387731e-2 + pow(R - 0.100e2, 2) * (-0.629723464049796312e-3) + pow(R - 0.100e2, 3) * 0.188571192284083222e-3 : (R < 0.110e2 ? -0.743960422423000593e-2 + R * 0.643772670117143445e-3 + pow(R - 0.105e2, 2) * (-0.346866675623671466e-3) + pow(R - 0.105e2, 3) * 0.110490411578769175e-3 : (R < 0.120e2 ? -0.460852205535303844e-2 + R * 0.379773803177548908e-3 + pow(R - 0.110e2, 2) * (-0.181131058255517690e-3) + pow(R - 0.110e2, 3) * 0.427663719779687894e-4 : (R < 0.140e2 ? -0.193933073470503874e-2 + R * 0.145810802600419896e-3 + pow(R - 0.120e2, 2) * (-0.528319423216113150e-4) + pow(R - 0.120e2, 3) * 0.762084918570068679e-5 : (R < 0.160e2 ? -0.411405603693360217e-3 + R * 0.259332235423828710e-4 + pow(R - 0.140e2, 2) * (-0.710684720740718749e-5) + pow(R - 0.140e2, 3) * 0.110614410685787539e-5 : (R < 0.180e2 ? -0.188525286910778029e-3 + R * 0.107795639950486274e-4 + pow(R - 0.160e2, 2) * (-0.469982566259933998e-6) + pow(R - 0.160e2, 3) * (-0.432319855632189869e-6) : (R < 0.200e2 ? -0.666439424322070272e-4 + R * 0.371179546242261230e-5 + pow(R - 0.180e2, 2) * (-0.306390170005307321e-5) + pow(R - 0.180e2, 3) * 0.593021453295883407e-6 : (R < 0.250e2 ? 0.286316096071815821e-4 + R * (-0.142755389823907902e-5) + pow(R - 0.200e2, 2) * 0.494227019722227657e-6 + pow(R - 0.200e2, 3) * (-0.422523944484823727e-7) : -0.862777954547549256e-5 + R * 0.345786715347019681e-6 + pow(R - 0.250e2, 2) * (-0.139558897005007880e-6) + pow(R - 0.250e2, 3) * 0.139829096775207874e-7)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2577012557e2 * (R - 0.300e2) * (R - 0.250e2) + 0.2748828028e3 * R + 0.1614897056e5 - 0.1374414014e2 * R * R + 0.75000e3 * (0.503944299e-1 * R - 0.2084486635e1) * R) * pow(R, -6));
}

static double radcoeff_7_2_5_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.690361911899999986e-1 + pow(R - 0.475e1, 2) * 0.100651317224982617e1 + pow(R - 0.475e1, 3) * (-0.240540297507930401e1) : (R < 0.525e1 ? -0.304931180897717369e0 + R * 0.522435282975434734e-1 + pow(R - 0.50e1, 2) * (-0.797539059059652167e0) + pow(R - 0.50e1, 3) * 0.128322588523791281e1 : (R < 0.55e1 ? 0.495637581618413037e0 + R * (-0.105921147750173916e0) + pow(R - 0.525e1, 2) * 0.164880354868782525e0 + pow(R - 0.525e1, 3) * (-0.560738906723472277e-1) : (R < 0.575e1 ? 0.109471673122662733e0 + R * (-0.339948248168477699e-1) + pow(R - 0.55e1, 2) * 0.122824936864522102e0 + pow(R - 0.55e1, 3) * 0.565854950514758995e-1 : (R < 0.60e1 ? -0.296095550300998878e0 + R * 0.380274239375650233e-1 + pow(R - 0.575e1, 2) * 0.165264058153129029e0 + pow(R - 0.575e1, 3) * (-0.943811391335564603e-1) : (R < 0.625e1 ? -0.676854644899526181e0 + R * 0.102962989426587687e0 + pow(R - 0.60e1, 2) * 0.944782038029616800e-1 + pow(R - 0.60e1, 3) * (-0.257157954197249683e0) : (R < 0.65e1 ? -0.668855259505526267e0 + R * 0.101984974916084201e0 + pow(R - 0.625e1, 2) * (-0.983902618449755961e-1) + pow(R - 0.625e1, 3) * 0.148954792255495683e-2 : (R < 0.675e1 ? -0.357028412218990510e0 + R * 0.530691342290754570e-1 + pow(R - 0.65e1, 2) * (-0.972731009030593785e-1) + pow(R - 0.65e1, 3) * 0.793358971630300780e-1 : (R < 0.70e1 ? -0.133981136931393907e0 + R * 0.193080644956139108e-1 + pow(R - 0.675e1, 2) * (-0.377711780307868131e-1) + pow(R - 0.675e1, 3) * 0.332630505613246280e-1 : (R < 0.725e1 ? -0.472807311467821206e-1 + R * 0.665929746046887462e-2 + pow(R - 0.70e1, 2) * (-0.128238901097933369e-1) + pow(R - 0.70e1, 3) * 0.101450052316713439e-1 : (R < 0.75e1 ? -0.152279734107017388e-1 + R * 0.214954088651058469e-2 + pow(R - 0.725e1, 2) * (-0.521513618603982806e-2) + pow(R - 0.725e1, 3) * 0.451871712638996035e-2 : (R < 0.775e1 ? -0.228099972856590869e-2 + R * 0.389232254688787844e-3 + pow(R - 0.75e1, 2) * (-0.182609834124735780e-2) + pow(R - 0.75e1, 3) * 0.184671010276882567e-2 : (R < 0.80e1 ? 0.202635442470945571e-2 + R * (-0.177558771665736216e-3) + pow(R - 0.775e1, 2) * (-0.441065764170738494e-3) + pow(R - 0.775e1, 3) * 0.513160670534733342e-3 : (R < 0.825e1 ? 0.300132800080674372e-2 + R * (-0.301874028025842975e-3) + pow(R - 0.80e1, 2) * (-0.561952612696884807e-4) + pow(R - 0.80e1, 3) * 0.187102293492241901e-3 : (R < 0.85e1 ? 0.294312086280485753e-2 + R * (-0.294889978630891820e-3) + pow(R - 0.825e1, 2) * 0.841314588494929453e-4 + pow(R - 0.825e1, 3) * (-0.116783962903702272e-3) : (R < 0.875e1 ? 0.277512007033001119e-2 + R * (-0.274721242250589557e-3) + pow(R - 0.85e1, 2) * (-0.345651332828376147e-5) + pow(R - 0.85e1, 3) * 0.659290141225678461e-4 : (R < 0.90e1 ? 0.268289163610906187e-2 + R * (-0.264087808766749949e-3) + pow(R - 0.875e1, 2) * 0.459902472636421295e-4 + pow(R - 0.875e1, 3) * (-0.959297063865694323e-4) : (R < 0.925e1 ? 0.263919239174169578e-2 + R * (-0.259079505082410687e-3) + pow(R - 0.90e1, 2) * (-0.259570325262849413e-4) + pow(R - 0.90e1, 3) * 0.113326272223710742e-3 : (R < 0.95e1 ? 0.256284182225836833e-2 + R * (-0.250809345303607380e-3) + pow(R - 0.925e1, 2) * 0.590376716414981186e-4 + pow(R - 0.925e1, 3) * (-0.303138890827496076e-5) : (R < 0.100e2 ? 0.229145503248001908e-2 + R * (-0.221858894903159866e-3) + pow(R - 0.95e1, 2) * 0.567641299602918980e-4 + pow(R - 0.95e1, 3) * 0.251844204120556574e-4 : (R < 0.105e2 ? 0.155226966482826232e-2 + R * (-0.146206449633826227e-3) + pow(R - 0.100e2, 2) * 0.945407605783753858e-4 + pow(R - 0.100e2, 3) * (-0.206249095014459181e-4) : (R < 0.110e2 ? 0.743069917536120280e-3 + R * (-0.671343711815352673e-4) + pow(R - 0.105e2, 2) * 0.636033963262065070e-4 + pow(R - 0.105e2, 3) * (-0.345818468062719403e-4) : (R < 0.120e2 ? 0.340310912330359940e-3 + R * (-0.294673599600327223e-4) + pow(R - 0.110e2, 2) * 0.117306261167985914e-4 + pow(R - 0.110e2, 3) * (-0.896499606765869682e-6) : (R < 0.140e2 ? 0.101883997882797769e-3 + R * (-0.869560654673314687e-5) + pow(R - 0.120e2, 2) * 0.904112729650098235e-5 + pow(R - 0.120e2, 3) * (-0.201620413244220416e-5) : (R < 0.160e2 ? -0.456619603444006095e-4 + R * 0.327445304996432921e-5 + pow(R - 0.140e2, 2) * (-0.305609749815224430e-5) + pow(R - 0.140e2, 3) * 0.665451130485039748e-6 : (R < 0.180e2 ? 0.152608815354867309e-4 + R * (-0.964523376824170603e-6) + pow(R - 0.160e2, 2) * 0.936609284757994079e-6 + pow(R - 0.160e2, 3) * (-0.203316995172954362e-6) : (R < 0.200e2 ? -0.613861483208235658e-5 + R * 0.342109820132353153e-6 + pow(R - 0.180e2, 2) * (-0.283292686279732201e-6) + pow(R - 0.180e2, 3) * 0.548569435442778132e-7 : (R < 0.250e2 ? 0.266481842290483787e-5 + R * (-0.132777602455241893e-6) + pow(R - 0.200e2, 2) * 0.458489749859346650e-7 + pow(R - 0.200e2, 3) * (-0.391726794057725707e-8) : -0.795982052920261795e-6 + R * 0.319170518608104744e-7 + pow(R - 0.250e2, 2) * (-0.129100441227241886e-7) + pow(R - 0.250e2, 3) * 0.129411409491241888e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2965239616e1 * (R - 0.300e2) * (R - 0.250e2) + 0.3162738736e2 * R + 0.1859012137e4 - 0.1581369368e1 * R * R + 0.75000e3 * (0.580007460e-2 * R - 0.2399356345e0) * R) * pow(R, -6));
}

static double radcoeff_7_2_5_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.184129731900000537e0 + R * (-0.111022302462515654e-15) + pow(R - 0.475e1, 2) * (-0.467871362374419775e1) + pow(R - 0.475e1, 3) * 0.973134813977679158e1 : (R < 0.525e1 ? 0.261740762345975231e1 + R * (-0.514729035663950452e0) + pow(R - 0.50e1, 2) * 0.261979748108839683e1 + pow(R - 0.50e1, 3) * (-0.362702664461038005e1) : (R < 0.55e1 ? -0.582141359862959007e0 + R * 0.115102209015801704e0 + pow(R - 0.525e1, 2) * (-0.100472502369388011e0) + pow(R - 0.525e1, 3) * 0.142279739144724804e0 : (R < 0.575e1 ? -0.456624369814089826e0 + R * 0.915434089207435991e-1 + pow(R - 0.55e1, 2) * 0.623730198915560356e-2 + pow(R - 0.55e1, 3) * (-0.314647225248519846e0) : (R < 0.60e1 ? -0.139854104832037529e0 + R * 0.356657051812239168e-1 + pow(R - 0.575e1, 2) * (-0.229748116947234321e0) + pow(R - 0.575e1, 3) * 0.701492392893545980e-1 : (R < 0.625e1 ? 0.457209176363835512e0 + R * (-0.660553709256392479e-1) + pow(R - 0.60e1, 2) * (-0.177136187480218366e0) + pow(R - 0.60e1, 3) * 0.300617296571101256e0 : (R < 0.65e1 ? 0.652100001361668458e0 + R * (-0.982577215586669384e-1) + pow(R - 0.625e1, 2) * 0.483267849481075970e-1 + pow(R - 0.625e1, 3) * 0.651516064262406547e-1 : (R < 0.675e1 ? 0.419672847858004627e0 + R * (-0.618784028796930258e-1) + pow(R - 0.65e1, 2) * 0.971904897677880880e-1 + pow(R - 0.65e1, 3) * (-0.690624000360639256e-1) : (R < 0.70e1 ? 0.184057350544286513e0 + R * (-0.262323580025609661e-1) + pow(R - 0.675e1, 2) * 0.453936897407401369e-1 + pow(R - 0.675e1, 3) * (-0.372776645219850822e-1) : (R < 0.725e1 ? 0.763610132374417105e-1 + R * (-0.105250752300631023e-1) + pow(R - 0.70e1, 2) * 0.174354413492513217e-1 + pow(R - 0.70e1, 3) * (-0.134311138439956353e-1) : (R < 0.75e1 ? 0.322953126584030192e-1 + R * (-0.432568840118662326e-2) + pow(R - 0.725e1, 2) * 0.736210596625459356e-2 + pow(R - 0.725e1, 3) * (-0.582372853083239911e-2) : (R < 0.775e1 ? 0.132461693960280145e-1 + R * (-0.173658451759040175e-2) + pow(R - 0.75e1, 2) * 0.299430956813029467e-2 + pow(R - 0.75e1, 3) * (-0.243731068227475171e-2) : (R < 0.80e1 ? 0.533399827330121971e-2 + R * (-0.696425486451770332e-3) + pow(R - 0.775e1, 2) * 0.116632655642423077e-2 + pow(R - 0.775e1, 3) * (-0.605759383268596749e-3) : (R < 0.825e1 ? 0.164076154192013455e-2 + R * (-0.226842092602516822e-3) + pow(R - 0.80e1, 2) * 0.712007018972783158e-3 + pow(R - 0.80e1, 3) * (-0.770111253450863351e-3) : (R < 0.85e1 ? -0.725341158101622079e-4 + R * (-0.152344431381621549e-4) + pow(R - 0.825e1, 2) * 0.134423578884635536e-3 + pow(R - 0.825e1, 3) * 0.120930425872052354e-3 : (R < 0.875e1 ? -0.826276180718906231e-3 + R * 0.746518011551654433e-4 + pow(R - 0.85e1, 2) * 0.225121398288674802e-3 + pow(R - 0.85e1, 3) * (-0.379858731637346255e-3) : (R < 0.90e1 ? -0.117984177192812846e-2 + R * 0.115988988117500408e-3 + pow(R - 0.875e1, 2) * (-0.597726504393349098e-4) + pow(R - 0.875e1, 3) * 0.162216590277332974e-3 : (R < 0.925e1 ? -0.118580649747349596e-2 + R * 0.116518273574832884e-3 + pow(R - 0.90e1, 2) * 0.618897922686648203e-4 + pow(R - 0.90e1, 3) * (-0.191065824671985486e-3) : (R < 0.95e1 ? -0.113978428854430414e-2 + R * 0.111638327583168007e-3 + pow(R - 0.925e1, 2) * (-0.814095762353243010e-4) + pow(R - 0.925e1, 3) * 0.959771128906089494e-4 : (R < 0.100e2 ? -0.927636489888702975e-3 + R * 0.889292481324950487e-4 + pow(R - 0.95e1, 2) * (-0.942674156736759070e-5) + pow(R - 0.95e1, 3) * (-0.121368674752449811e-4) : (R < 0.105e2 ? -0.746216361976937315e-3 + R * 0.703998559586937230e-4 + pow(R - 0.100e2, 2) * (-0.276320427802350623e-4) + pow(R - 0.100e2, 3) * (-0.189475781143047494e-4) : (R < 0.110e2 ? -0.316144193093666030e-3 + R * 0.285571295927300995e-4 + pow(R - 0.105e2, 2) * (-0.560534099516921881e-4) + pow(R - 0.105e2, 3) * 0.441413785724639754e-4 : (R < 0.120e2 ? -0.722187370142448595e-4 + R * 0.560975357038589549e-5 + pow(R - 0.110e2, 2) * 0.101586579070037766e-4 + pow(R - 0.110e2, 3) * (-0.591965671038967172e-5) : (R < 0.140e2 ? -0.986798840113932164e-4 + R * 0.816809925322443443e-5 + pow(R - 0.120e2, 2) * (-0.760031222416524022e-5) + pow(R - 0.120e2, 3) * 0.175661270118901123e-5 : (R < 0.160e2 ? 0.154783194549574345e-4 + R * (-0.115379722916838811e-5) + pow(R - 0.140e2, 2) * 0.293936398296882842e-5 + pow(R - 0.140e2, 3) * (-0.846744863067316973e-6) : (R < 0.180e2 ? -0.508246471838591601e-5 + R * 0.442720345899119773e-6 + pow(R - 0.160e2, 2) * (-0.214110519543507426e-5) + pow(R - 0.160e2, 3) * 0.571560430617757211e-6 : (R < 0.200e2 ? 0.216281190027056358e-4 + R * (-0.126297526842809075e-5) + pow(R - 0.180e2, 2) * 0.128825738827146900e-5 + pow(R - 0.180e2, 3) * (-0.256295387128711825e-6) : (R < 0.250e2 ? -0.168189126920648665e-4 + R * 0.814509639113243454e-6 + pow(R - 0.200e2, 2) * (-0.249514934500801897e-6) + pow(R - 0.200e2, 3) * 0.206653244076306395e-7 : 0.315762985726193800e-5 + R * (-0.130740375322477515e-6) + pow(R - 0.250e2, 2) * 0.604649316136576822e-7 + pow(R - 0.250e2, 3) * (-0.622389010823243619e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1691903711e3 * (R - 0.300e2) * (R - 0.250e2) - 0.1804698768e4 * R - 0.1060250560e6 + 0.9023493840e2 * R * R + 0.75000e3 * (-0.3308595419e0 * R + 0.1368552789e2) * R) * pow(R, -6));
}

static double radcoeff_7_2_6_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.364725531100000000e-1 + pow(R - 0.475e1, 2) * 0.564536521876473962e0 + pow(R - 0.475e1, 3) * (-0.107683849518589558e1) : (R < 0.525e1 ? -0.419819837434407594e0 + R * 0.803610430908815176e-1 + pow(R - 0.50e1, 2) * (-0.243092349512947836e0) + pow(R - 0.50e1, 3) * 0.344410648437686984e0 : (R < 0.55e1 ? -0.130543507482488025e0 + R * 0.233918649164739090e-1 + pow(R - 0.525e1, 2) * 0.152156368153173929e-1 + pow(R - 0.525e1, 3) * (-0.697206640048521481e-1) : (R < 0.575e1 ? -0.100625482043725539e0 + R * 0.179270588232228259e-1 + pow(R - 0.55e1, 2) * (-0.370748611883217200e-1) + pow(R - 0.55e1, 3) * 0.392516860457216288e-1 : (R < 0.60e1 ? -0.380573513751499420e-1 + R * 0.674931936263477219e-2 + pow(R - 0.575e1, 2) * (-0.763609665403049923e-2) + pow(R - 0.575e1, 3) * 0.157589325965644151e-3 : (R < 0.625e1 ? -0.158011431124284868e-1 + R * 0.296081903423808107e-2 + pow(R - 0.60e1, 2) * (-0.751790465955626611e-2) + pow(R - 0.60e1, 3) * 0.400160420241576706e-2 : (R < 0.65e1 ? 0.259558504841934934e-2 + R * (-0.478325075870958752e-4) + pow(R - 0.625e1, 2) * (-0.451670150774444081e-2) + pow(R - 0.625e1, 3) * 0.481295488837129876e-2 : (R < 0.675e1 ? 0.112019847542830370e-1 + R * (-0.140375421988969793e-2) + pow(R - 0.65e1, 2) * (-0.906985341465966523e-3) + pow(R - 0.65e1, 3) * 0.152972920409903202e-2 : (R < 0.70e1 ? 0.122942121927652592e-1 + R * (-0.157042266485411244e-2) + pow(R - 0.675e1, 2) * 0.240311561608307599e-3 + pow(R - 0.675e1, 3) * 0.259111207232568365e-3 : (R < 0.725e1 ? 0.111321063528569651e-1 + R * (-0.140168353269385206e-2) + pow(R - 0.70e1, 2) * 0.434644967032733873e-3 + pow(R - 0.70e1, 3) * 0.218861614970697728e-3 : (R < 0.75e1 ? 0.928958836268597467e-2 + R * (-0.114332449637047926e-2) + pow(R - 0.725e1, 2) * 0.598791178260757169e-3 + pow(R - 0.725e1, 3) * (-0.281419638315358778e-3) : (R < 0.775e1 ? 0.747289507738172886e-2 + R * (-0.896695089424230586e-3) + pow(R - 0.75e1, 2) * 0.387726449524238058e-3 + pow(R - 0.75e1, 3) * 0.490353190907365477e-4 : (R < 0.80e1 ? 0.592419971737763711e-2 + R * (-0.693637742332598372e-3) + pow(R - 0.775e1, 2) * 0.424502938842290472e-3 + pow(R - 0.775e1, 3) * (-0.103336806047588431e-3) : (R < 0.825e1 ? 0.440610996716300773e-2 + R * (-0.500761924045375981e-3) + pow(R - 0.80e1, 2) * 0.347000334306599146e-3 + pow(R - 0.80e1, 3) * (-0.204250162100380866e-3) : (R < 0.85e1 ? 0.330917916975865698e-2 + R * (-0.365558662285897821e-3) + pow(R - 0.825e1, 2) * 0.193812712731313496e-3 + pow(R - 0.825e1, 3) * (-0.588535727508886550e-4) : (R < 0.875e1 ? 0.259046672969377809e-2 + R * (-0.279687350811032710e-3) + pow(R - 0.85e1, 2) * 0.149672533168147001e-3 + pow(R - 0.85e1, 3) * 0.424357875039354238e-4 : (R < 0.90e1 ? 0.187604577571224901e-2 + R * (-0.196894374069971317e-3) + pow(R - 0.875e1, 2) * 0.181499373796098571e-3 + pow(R - 0.875e1, 3) * (-0.231294146864853176e-3) : (R < 0.925e1 ? 0.145733720628173774e-2 + R * (-0.149512339709081992e-3) + pow(R - 0.90e1, 2) * 0.802876364745868873e-5 + pow(R - 0.90e1, 3) * 0.105704277715477069e-3 : (R < 0.95e1 ? 0.123902674481673179e-2 + R * (-0.125678405813700730e-3) + pow(R - 0.925e1, 2) * 0.873069719340664941e-4 + pow(R - 0.925e1, 3) * (-0.605385371170546181e-4) : (R < 0.100e2 ? 0.936663668473094492e-3 + R * (-0.933758955561152069e-4) + pow(R - 0.95e1, 2) * 0.419030690962755306e-4 + pow(R - 0.95e1, 3) * 0.419845731190977899e-5 : (R < 0.105e2 ? 0.497145122109073447e-3 + R * (-0.483239834759073523e-4) + pow(R - 0.100e2, 2) * 0.482007550641401990e-4 + pow(R - 0.100e2, 3) * (-0.176027399846509933e-4) : (R < 0.110e2 ? 0.139508617587481718e-3 + R * (-0.133252834002554000e-4) + pow(R - 0.105e2, 2) * 0.217966450871637056e-4 + pow(R - 0.105e2, 3) * (-0.129356777973058156e-4) : (R < 0.120e2 ? 0.102970650037815982e-4 + R * (-0.123039666107105438e-5) + pow(R - 0.110e2, 2) * 0.239312839120498174e-5 + pow(R - 0.110e2, 3) * (-0.655497606133927037e-6) : (R < 0.140e2 ? -0.218024717792455246e-4 + R * 0.158936730293712713e-5 + pow(R - 0.120e2, 2) * 0.426635572803200308e-6 + pow(R - 0.120e2, 3) * (-0.275757662635881945e-6) : (R < 0.160e2 ? 0.133704456629177083e-6 + R * (-0.131823574806555062e-7) + pow(R - 0.140e2, 2) * (-0.122791040301209147e-5) + pow(R - 0.140e2, 3) * 0.406489114376209628e-6 : (R < 0.180e2 ? -0.985668407767901438e-6 + R * (-0.469545970145061604e-7) + pow(R - 0.160e2, 2) * 0.121102428324516609e-5 + pow(R - 0.160e2, 3) * (-0.330036582618956460e-6) : (R < 0.200e2 ? -0.146877104834962427e-4 + R * 0.836703544538680145e-6 + pow(R - 0.180e2, 2) * (-0.769195212468572778e-6) + pow(R - 0.180e2, 3) * 0.151100364487116333e-6 : (R < 0.250e2 ? 0.871584110310429704e-5 + R * (-0.426872931490214867e-6) + pow(R - 0.200e2, 2) * 0.137406974454125219e-6 + pow(R - 0.200e2, 3) * (-0.115342611400164451e-7) : -0.201577115404509265e-5 + R * 0.821272275498036939e-7 + pow(R - 0.250e2, 2) * (-0.356069426461214873e-7) + pow(R - 0.250e2, 3) * 0.362054567923214898e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.5708239146e2 * (R - 0.300e2) * (R - 0.250e2) + 0.6088786692e3 * R + 0.3577164678e5 - 0.3044393346e2 * R * R + 0.75000e3 * (0.1116278036e0 * R - 0.4617332528e1) * R) * pow(R, -6));
}

static double radcoeff_7_2_7_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.274673876600000255e0 + R * (-0.555111512312578270e-16) + pow(R - 0.475e1, 2) * (-0.253397987056127283e1) + pow(R - 0.475e1, 3) * 0.510331340224509233e1 : (R < 0.525e1 ? 0.174663276839840864e1 + R * (-0.310118672359681713e0) + pow(R - 0.50e1, 2) * 0.129350518112254620e1 + pow(R - 0.50e1, 3) * (-0.208229693633527768e1) : (R < 0.55e1 ? 0.449250898846684288e0 + R * (-0.537967573612731925e-1) + pow(R - 0.525e1, 2) * (-0.268217521128912118e0) + pow(R - 0.525e1, 3) * 0.355291936696019661e0 : (R < 0.575e1 ? 0.809242113673740660e0 + R * (-0.121288279795225579e0) + pow(R - 0.55e1, 2) * (-0.174856860689739523e-2) + pow(R - 0.55e1, 3) * (-0.132074240848801233e0) : (R < 0.60e1 ? 0.954488843782490881e0 + R * (-0.146926484257824508e0) + pow(R - 0.575e1, 2) * (-0.100804249243498331e0) + pow(R - 0.575e1, 3) * 0.140405582859185307e0 : (R < 0.625e1 ? 0.109483888245085881e1 + R * (-0.171002562093476446e0) + pow(R - 0.60e1, 2) * 0.449993790089066922e-2 + pow(R - 0.60e1, 3) * 0.203058399652060462e0 : (R < 0.65e1 ? 0.846271548031686027e0 + R * (-0.130679143208269760e0) + pow(R - 0.625e1, 2) * 0.156793737639936037e0 + pow(R - 0.625e1, 3) * (-0.421409894674281277e-1) : (R < 0.675e1 ? 0.397192387256389279e0 + R * (-0.601837099134445025e-1) + pow(R - 0.65e1, 2) * 0.125187995539364938e0 + pow(R - 0.65e1, 3) * (-0.104485813686347712e0) : (R < 0.70e1 ? 0.113114419140177558e0 + R * (-0.171808022099522312e-1) + pow(R - 0.675e1, 2) * 0.468236352746041543e-1 + pow(R - 0.675e1, 3) * (-0.434629886831808809e-1) : (R < 0.725e1 ? 0.852423633222600119e-2 + R * (-0.191829495074657139e-2) + pow(R - 0.70e1, 2) * 0.142263937622184901e-1 + pow(R - 0.70e1, 3) * (-0.137656910369288073e-1) : (R < 0.75e1 ? -0.236596441148042812e-1 + R * 0.261383486093852120e-2 + pow(R - 0.725e1, 2) * 0.390212548452188333e-2 + pow(R - 0.725e1, 3) * (-0.537737504110387225e-2) : (R < 0.775e1 ? -0.305708196724436519e-1 + R * 0.355663978299248671e-2 + pow(R - 0.75e1, 2) * (-0.130905796306021130e-3) + pow(R - 0.75e1, 3) * (-0.131935503865570139e-2) : (R < 0.80e1 ? -0.281751684559593749e-1 + R * 0.324380781509153249e-2 + pow(R - 0.775e1, 2) * (-0.112042207529779712e-2) + pow(R - 0.775e1, 3) * (-0.298373060273333685e-3) : (R < 0.825e1 ? -0.233206090231310691e-1 + R * 0.262765182864138375e-2 + pow(R - 0.80e1, 2) * (-0.134420187050279740e-2) + pow(R - 0.80e1, 3) * 0.363452527749050409e-3 : (R < 0.85e1 ? -0.184163256073291912e-1 + R * 0.202369824234293217e-2 + pow(R - 0.825e1, 2) * (-0.107161247469100959e-2) + pow(R - 0.825e1, 3) * 0.408523205277125205e-3 : (R < 0.875e1 ? -0.145736490528885505e-1 + R * 0.156449010598688830e-2 + pow(R - 0.85e1, 2) * (-0.765220070733165685e-3) + pow(R - 0.85e1, 3) * 0.115794459142450415e-3 : (R < 0.90e1 ? -0.114618034939582558e-1 + R * 0.120359153170951491e-2 + pow(R - 0.875e1, 2) * (-0.678374226376327874e-3) + pow(R - 0.875e1, 3) * 0.298697434953073941e-3 : (R < 0.925e1 ? -0.895090263847547057e-2 + R * 0.920410187575052257e-3 + pow(R - 0.90e1, 2) * (-0.454351150161522404e-3) + pow(R - 0.90e1, 3) * 0.569884104525400156e-5 : (R < 0.95e1 ? -0.688772039891005598e-2 + R * 0.694303145190276316e-3 + pow(R - 0.925e1, 2) * (-0.450077019377581903e-3) + pow(R - 0.925e1, 3) * 0.193597997665906753e-3 : (R < 0.100e2 ? -0.511980583520650796e-2 + R * 0.505564260063842870e-3 + pow(R - 0.95e1, 2) * (-0.304878521128151825e-3) + pow(R - 0.95e1, 3) * 0.643780996009323594e-4 : (R < 0.105e2 ? -0.262202873876390226e-2 + R * 0.248969313636390223e-3 + pow(R - 0.100e2, 2) * (-0.208311371726753279e-3) + pow(R - 0.100e2, 3) * 0.831252945879455099e-4 : (R < 0.110e2 ? -0.113105821162125925e-2 + R * 0.103001912850596110e-3 + pow(R - 0.105e2, 2) * (-0.836234298448350008e-4) + pow(R - 0.105e2, 3) * 0.288378051672855484e-4 : (R < 0.120e2 ? -0.466413507773478099e-3 + R * 0.410068368812252824e-4 + pow(R - 0.110e2, 2) * (-0.403667220939066748e-4) + pow(R - 0.110e2, 3) * 0.132616297426813930e-4 : (R < 0.140e2 ? -0.213594060447332590e-5 + R * 0.582819214561105099e-7 + pow(R - 0.120e2, 2) * (-0.581832865862495513e-6) + pow(R - 0.120e2, 3) * 0.367015585404720110e-6 : (R < 0.160e2 ? -0.306031252443787836e-4 + R * 0.213513748286277031e-5 + pow(R - 0.140e2, 2) * 0.162026064656582536e-5 + pow(R - 0.140e2, 3) * (-0.664064006123605300e-6) : (R < 0.180e2 ? -0.563098691128494402e-5 + R * 0.647411995642808998e-6 + pow(R - 0.160e2, 2) * (-0.236412339017580665e-5) + pow(R - 0.160e2, 3) * 0.586121248427200945e-6 : (R < 0.200e2 ? 0.332161839478120963e-4 + R * (-0.177562658393400541e-5) + pow(R - 0.180e2, 2) * 0.115260410038739945e-5 + pow(R - 0.180e2, 3) * (-0.214230712822698374e-6) : (R < 0.250e2 ? -0.468020230676423568e-5 + R * 0.264021263743211781e-6 + pow(R - 0.200e2, 2) * (-0.132780176548790799e-6) + pow(R - 0.200e2, 3) * 0.122004162904296878e-7 : 0.384460890846173981e-5 + R * (-0.148749279962469599e-6) + pow(R - 0.250e2, 2) * 0.502260678076545120e-7 + pow(R - 0.250e2, 3) * (-0.482121758943211801e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1920713498e3 * (R - 0.300e2) * (R - 0.250e2) + 0.2048757152e4 * R + 0.1203655681e6 - 0.1024378576e3 * R * R + 0.75000e3 * (0.3756075448e0 * R - 0.1553652208e2) * R) * pow(R, -6));
}

static double radcoeff_7_2_7_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.388394455300000496e0 + R * 0.111022302462515654e-15 + pow(R - 0.475e1, 2) * 0.602443312927381847e1 + pow(R - 0.475e1, 3) * (-0.120940723634952736e2) : (R < 0.525e1 ? -0.392372724780772808e1 + R * 0.744577996481545545e0 + pow(R - 0.50e1, 2) * (-0.304612114334763673e1) + pow(R - 0.50e1, 3) * 0.434202269688581843e1 : (R < 0.55e1 ? -0.324376305587545433e0 + R * 0.356466804738181792e-1 + pow(R - 0.525e1, 2) * 0.210395879316727152e0 + pow(R - 0.525e1, 3) * (-0.428159313647999418e0) : (R < 0.575e1 ? -0.454965928327500158e0 + R * 0.605647488231818507e-1 + pow(R - 0.55e1, 2) * (-0.110723605919272453e0) + pow(R - 0.55e1, 3) * 0.368459069706180253e0 : (R < 0.60e1 ? -0.535043548242362887e0 + R * 0.742890214334544219e-1 + pow(R - 0.575e1, 2) * 0.165620696360362724e0 + pow(R - 0.575e1, 3) * (-0.107315534136721707e0) : (R < 0.625e1 ? -0.902501173118002598e0 + R * 0.136977706963000434e0 + pow(R - 0.60e1, 2) * 0.851340457578214360e-1 + pow(R - 0.60e1, 3) * (-0.237441335719292879e0) : (R < 0.65e1 ? -0.888682643825898455e0 + R * 0.135024479394543762e0 + pow(R - 0.625e1, 2) * (-0.929469560316482368e-1) + pow(R - 0.625e1, 3) * (-0.448301905061069955e-1) : (R < 0.675e1 ? -0.538477898522359721e0 + R * 0.801453406588245598e-1 + pow(R - 0.65e1, 2) * (-0.126569598911228487e0) + pow(R - 0.65e1, 3) * 0.849099966237209097e-1 : (R < 0.70e1 ? -0.225353597908566489e0 + R * 0.327811655701579982e-1 + pow(R - 0.675e1, 2) * (-0.628871014434378012e-1) + pow(R - 0.675e1, 3) * 0.505217069232231988e-1 : (R < 0.725e1 ? -0.746995253627041333e-1 + R * 0.108104348965434478e-1 + pow(R - 0.70e1, 2) * (-0.249958212510203968e-1) + pow(R - 0.70e1, 3) * 0.209072603553864429e-1 : (R < 0.75e1 ? -0.137460432585945064e-1 + R * 0.223263558766820767e-2 + pow(R - 0.725e1, 2) * (-0.931537598448056552e-2) + pow(R - 0.725e1, 3) * 0.853891200723094247e-2 : (R < 0.775e1 ? 0.872998117412205135e-2 + R * (-0.824006403216273478e-3) + pow(R - 0.75e1, 2) * (-0.291119197905735823e-2) + pow(R - 0.75e1, 3) * 0.324598575968980656e-2 : (R < 0.80e1 ? 0.151627960647241315e-1 + R * (-0.167098006280311370e-2) + pow(R - 0.775e1, 2) * (-0.476702659290003143e-3) + pow(R - 0.775e1, 3) * 0.113812658600983174e-2 : (R < 0.825e1 ? 0.153504061345701749e-1 + R * (-0.169593265757127178e-2) + pow(R - 0.80e1, 2) * 0.376892280217370665e-3 + pow(R - 0.80e1, 3) * 0.111905976270866984e-3 : (R < 0.85e1 ? 0.136479252200223406e-1 + R * (-0.148650414691179874e-2) + pow(R - 0.825e1, 2) * 0.460821762420520907e-3 + pow(R - 0.825e1, 3) * 0.253855780906695741e-3 : (R < 0.875e1 ? 0.113176179356430304e-1 + R * (-0.120849530678153287e-2) + pow(R - 0.85e1, 2) * 0.651213598100542712e-3 + pow(R - 0.85e1, 3) * (-0.274717650297642184e-3) : (R < 0.90e1 ? 0.895567547556810895e-2 + R * (-0.934398067162069438e-3) + pow(R - 0.875e1, 2) * 0.445175360377311074e-3 + pow(R - 0.875e1, 3) * 0.526155948386819970e-5 : (R < 0.925e1 ? 0.697141314413169885e-2 + R * (-0.710823844570188709e-3) + pow(R - 0.90e1, 2) * 0.449121529990212224e-3 + pow(R - 0.90e1, 3) * (-0.169302462837828474e-3) : (R < 0.95e1 ? 0.521328477155387320e-2 + R * (-0.518007291357175490e-3) + pow(R - 0.925e1, 2) * 0.322144682861840869e-3 + pow(R - 0.925e1, 3) * (-0.174180687332555091e-3) : (R < 0.100e2 ? 0.401076934671053612e-2 + R * (-0.389593828801109104e-3) + pow(R - 0.95e1, 2) * 0.191509167362424536e-3 + pow(R - 0.95e1, 3) * (-0.652759472041275015e-5) : (R < 0.105e2 ? 0.219169597598994166e-2 + R * (-0.202980357478994145e-3) + pow(R - 0.100e2, 2) * 0.181717775281805410e-3 + pow(R - 0.100e2, 3) * (-0.103511801447634161e-3) : (R < 0.110e2 ? 0.113130524057060075e-2 + R * (-0.988964332829143721e-4) + pow(R - 0.105e2, 2) * 0.264500731103541753e-4 + pow(R - 0.105e2, 3) * 0.142409320309491307e-4 : (R < 0.120e2 ? 0.731259381882831835e-3 + R * (-0.617656611493483517e-4) + pow(R - 0.110e2, 2) * 0.478114711567778722e-4 + pow(R - 0.110e2, 3) * (-0.154221344274295208e-4) : (R < 0.140e2 ? 0.171370250236974080e-3 + R * (-0.124091221180811732e-4) + pow(R - 0.120e2, 2) * 0.154506787448930909e-5 + pow(R - 0.120e2, 3) * 0.130068698525639095e-6 : (R < 0.160e2 ? 0.702157289984277496e-4 + R * (-0.466802623781626809e-5) + pow(R - 0.140e2, 2) * 0.232548006564314366e-5 + pow(R - 0.140e2, 3) * (-0.462929776367504790e-6) : (R < 0.180e2 ? 0.158660039114600131e-4 + R * (-0.921263291653750728e-6) + pow(R - 0.160e2, 2) * (-0.452098592561885135e-6) + pow(R - 0.160e2, 3) * 0.185135820694380226e-6 : (R < 0.200e2 ? 0.810045750123711722e-5 + R * (-0.508027813568728769e-6) + pow(R - 0.180e2, 2) * 0.658716331604396220e-6 + pow(R - 0.180e2, 3) * (-0.134266722622515924e-6) : (R < 0.250e2 ? -0.108121040522733003e-4 + R * 0.515636841378665026e-6 + pow(R - 0.200e2, 2) * (-0.146884004130699402e-6) + pow(R - 0.200e2, 3) * 0.119084593509932816e-7 : 0.139699301289582203e-5 + R * (-0.600687486038328797e-7) + pow(R - 0.250e2, 2) * 0.317428861341998223e-7 + pow(R - 0.250e2, 3) * (-0.334183825308664924e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1597975119e3 * (R - 0.300e2) * (R - 0.250e2) - 0.1704504724e4 * R - 0.1001404487e6 + 0.8522523620e2 * R * R + 0.75000e3 * (-0.3124940500e0 * R + 0.1292591093e2) * R) * pow(R, -6));
}

static double radcoeff_7_2_8_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.680866192300000062e-1 + pow(R - 0.475e1, 2) * 0.133251848232434439e0 + pow(R - 0.475e1, 3) * (-0.155992641569737717e0) : (R < 0.525e1 ? -0.249082282849456965e0 + R * 0.373773038218913958e-1 + pow(R - 0.50e1, 2) * 0.162573670551311410e-1 + pow(R - 0.50e1, 3) * (-0.273935300107869019e-1) : (R < 0.55e1 ? -0.264204303730280698e0 + R * 0.403697004724344194e-1 + pow(R - 0.525e1, 2) * (-0.428778045295903718e-2) + pow(R - 0.525e1, 3) * 0.424582273288546044e-2 : (R < 0.575e1 ? -0.256993057476040121e0 + R * 0.390219020083709262e-1 + pow(R - 0.55e1, 2) * (-0.110341340329494142e-2) + pow(R - 0.55e1, 3) * (-0.154510959607550430e-1) : (R < 0.60e1 ? -0.237472917820970852e0 + R * 0.355731148140818881e-1 + pow(R - 0.575e1, 2) * (-0.126917353738612241e-1) + pow(R - 0.575e1, 3) * 0.223836975013468747e-2 : (R < 0.625e1 ? -0.202674136601809163e0 + R * 0.296469414553015287e-1 + pow(R - 0.60e1, 2) * (-0.110129580612602085e-1) + pow(R - 0.60e1, 3) * 0.197783328021641520e-2 : (R < 0.65e1 ? -0.171233822269449998e0 + R * 0.245113061647120010e-1 + pow(R - 0.625e1, 2) * (-0.952958310109789687e-2) + pow(R - 0.625e1, 3) * (-0.320912495100039719e-2) : (R < 0.675e1 ? -0.136997297678028124e0 + R * 0.191448036858504790e-1 + pow(R - 0.65e1, 2) * (-0.119364268143481948e-1) + pow(R - 0.65e1, 3) * 0.260393647578513465e-2 : (R < 0.70e1 ? -0.100712804450231133e0 + R * 0.136648283678860935e-1 + pow(R - 0.675e1, 2) * (-0.998347445750934377e-2) + pow(R - 0.675e1, 3) * 0.380579491985990562e-2 : (R < 0.725e1 ? -0.713302512892360768e-1 + R * 0.938667768660515420e-2 + pow(R - 0.70e1, 2) * (-0.712912826761441434e-2) + pow(R - 0.70e1, 3) * 0.276165747677517906e-2 : (R < 0.75e1 ? -0.496437090702763692e-1 + R * 0.633992432969329202e-2 + pow(R - 0.725e1, 2) * (-0.505788516003303004e-2) + pow(R - 0.725e1, 3) * 0.218474118903944428e-2 : (R < 0.775e1 ? -0.340309132586625526e-1 + R * 0.422062072262167388e-2 + pow(R - 0.75e1, 2) * (-0.341932926825344683e-2) + pow(R - 0.75e1, 3) * 0.142462314306700884e-2 : (R < 0.80e1 ? -0.230426161916051156e-1 + R * 0.277807292782001475e-2 + pow(R - 0.775e1, 2) * (-0.235086191095319015e-2) + pow(R - 0.775e1, 3) * 0.108818344189252837e-2 : (R < 0.825e1 ? -0.154013697137861498e-1 + R * 0.180667636769826865e-2 + pow(R - 0.80e1, 2) * (-0.153472432953379381e-2) + pow(R - 0.80e1, 3) * 0.648950641362878305e-3 : (R < 0.85e1 ? -0.101602577946420195e-1 + R * 0.116099244818691143e-2 + pow(R - 0.825e1, 2) * (-0.104801134851163508e-2) + pow(R - 0.825e1, 3) * 0.602123035855957182e-3 : (R < 0.875e1 ? -0.672193568870972993e-2 + R * 0.749884843154085862e-3 + pow(R - 0.85e1, 2) * (-0.596419071619667170e-3) + pow(R - 0.85e1, 3) * 0.175965650413293902e-3 : (R < 0.90e1 ? -0.443582262427151802e-2 + R * 0.484668866796744897e-3 + pow(R - 0.875e1, 2) * (-0.464444833809696744e-3) + pow(R - 0.875e1, 3) * 0.318744772730868587e-3 : (R < 0.925e1 ? -0.290775009115040945e-2 + R * 0.312211094778934385e-3 + pow(R - 0.90e1, 2) * (-0.225386254261545303e-3) + pow(R - 0.90e1, 3) * (-0.128242094967687126e-4) : (R < 0.95e1 ? -0.185738369600953754e-2 + R * 0.197113428367517573e-3 + pow(R - 0.925e1, 2) * (-0.235004411384121838e-3) + pow(R - 0.925e1, 3) * 0.181765171176205906e-3 : (R < 0.100e2 ? -0.107672964800645515e-2 + R * 0.113692192270995276e-3 + pow(R - 0.95e1, 2) * (-0.986805330019673883e-4) + pow(R - 0.95e1, 3) * 0.238132051599536828e-4 : (R < 0.105e2 ? -0.290216839289931486e-3 + R * 0.328715631389931508e-4 + pow(R - 0.100e2, 2) * (-0.629607252620368625e-4) + pow(R - 0.100e2, 3) * 0.199631255681011289e-4 : (R < 0.110e2 ? 0.200416371493162567e-3 + R * (-0.151168179469678634e-4) + pow(R - 0.105e2, 2) * (-0.330160369098851658e-4) + pow(R - 0.105e2, 3) * 0.293144733676417739e-4 : (R < 0.120e2 ? 0.317158672162338648e-3 + R * (-0.261469998311216971e-4) + pow(R - 0.110e2, 2) * 0.109556731415774968e-4 + pow(R - 0.110e2, 3) * (-0.176667733045579954e-5) : (R < 0.140e2 ? 0.127011896472009210e-3 + R * (-0.953568553933410048e-5) + pow(R - 0.120e2, 2) * 0.565564115021009815e-5 + pow(R - 0.120e2, 3) * (-0.128592697564652348e-5) : (R < 0.160e2 ? 0.386668727645278699e-4 + R * (-0.234424464625199092e-5) + pow(R - 0.140e2, 2) * (-0.205992070366904316e-5) + pow(R - 0.140e2, 3) * 0.704809588022519281e-6 : (R < 0.180e2 ? 0.325771507885268979e-4 + R * (-0.212621240465793090e-5) + pow(R - 0.160e2, 2) * 0.216893682446607296e-5 + pow(R - 0.160e2, 3) * (-0.464755993893553807e-6) : (R < 0.200e2 ? -0.182413065453068831e-4 + R * 0.972462966483715661e-6 + pow(R - 0.180e2, 2) * (-0.619599138895249781e-6) + pow(R - 0.180e2, 3) * 0.114743695464195976e-6 : (R < 0.250e2 ? 0.222769066303863358e-5 + R * (-0.129009243526931674e-6) + pow(R - 0.200e2, 2) * 0.688630338899260868e-7 + pow(R - 0.200e2, 3) * (-0.638367399130794949e-8) : -0.209506247740582302e-5 + R * 0.808455460242329267e-7 + pow(R - 0.250e2, 2) * (-0.268920759796931672e-7) + pow(R - 0.250e2, 3) * 0.257093745016931666e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1127981464e3 * (R - 0.300e2) * (R - 0.250e2) - 0.1203178088e4 * R - 0.7068719558e5 + 0.6015890440e2 * R * R + 0.75000e3 * (-0.2205835690e0 * R + 0.912415108e1) * R) * pow(R, -6));
}

static double radcoeff_7_2_9_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.631515299699999977e0 + pow(R - 0.475e1, 2) * (-0.362096182903740216e1) + pow(R - 0.475e1, 3) * 0.584035619934960870e1 : (R < 0.525e1 ? 0.407353138670324633e1 + R * (-0.715414127140649336e0) + pow(R - 0.50e1, 2) * 0.759305320474804590e0 + pow(R - 0.50e1, 3) * (-0.600433481248827783e0) : (R < 0.55e1 ? 0.270948143794636209e1 + R * (-0.448342744637402313e0) + pow(R - 0.525e1, 2) * 0.308980209538183725e0 + pow(R - 0.525e1, 3) * 0.538199208457021960e-1 : (R < 0.575e1 ? 0.182443626770357725e1 + R * (-0.283761404709741316e0) + pow(R - 0.55e1, 2) * 0.349345150172460372e0 + pow(R - 0.55e1, 3) * (-0.145354566933980772e0) : (R < 0.60e1 ? 0.996342260210886677e0 + R * (-0.136342810923632485e0) + pow(R - 0.575e1, 2) * 0.240329224971974786e0 + pow(R - 0.575e1, 3) * (-0.236795073909779191e0) : (R < 0.625e1 ? 0.553069696974372249e0 + R * (-0.605772747957287194e-1) + pow(R - 0.60e1, 2) * 0.627329195396403722e-1 + pow(R - 0.60e1, 3) * (-0.254118340626901973e0) : (R < 0.65e1 ? 0.654774462234079091e0 + R * (-0.768580038934526533e-1) + pow(R - 0.625e1, 2) * (-0.127855835930536149e0) + pow(R - 0.625e1, 3) * 0.801444300173871083e-1 : (R < 0.675e1 ? 0.965891171897994116e0 + R * (-0.125758841230460633e0) + pow(R - 0.65e1, 2) * (-0.677475134174958110e-1) + pow(R - 0.65e1, 3) * 0.133972076557353270e0 : (R < 0.70e1 ? 0.102283971439675758e1 + R * (-0.134512833584704838e0) + pow(R - 0.675e1, 2) * 0.327315440005191416e-1 + pow(R - 0.675e1, 3) * 0.355817482332006080e-1 : (R < 0.725e1 ? 0.864179952155040842e0 + R * (-0.111475483790720128e0) + pow(R - 0.70e1, 2) * 0.594178551754196010e-1 + pow(R - 0.70e1, 3) * (-0.843066885015636425e-2) : (R < 0.75e1 ? 0.663832554360006100e0 + R * (-0.833473066124146428e-1) + pow(R - 0.725e1, 2) * 0.530948535378023279e-1 + pow(R - 0.725e1, 3) * (-0.156371777925750424e-1) : (R < 0.775e1 ? 0.489790732307159804e0 + R * (-0.597318506796213067e-1) + pow(R - 0.75e1, 2) * 0.413669701933710443e-1 + pow(R - 0.75e1, 3) * (-0.151132631795433681e-1) : (R < 0.80e1 ? 0.353804474265526303e0 + R * (-0.418821024291001626e-1) + pow(R - 0.775e1, 2) * 0.300320228087135183e-1 + pow(R - 0.775e1, 3) * (-0.120444530092513827e-1) : (R < 0.825e1 ? 0.253431869391824327e0 + R * (-0.291244259639780387e-1) + pow(R - 0.80e1, 2) * 0.209986830517749808e-1 + pow(R - 0.80e1, 3) * (-0.849777086345125665e-2) : (R < 0.85e1 ? 0.181136931128648204e0 + R * (-0.202184164749876598e-1) + pow(R - 0.825e1, 2) * 0.146253549041865383e-1 + pow(R - 0.825e1, 3) * (-0.621152017694360809e-2) : (R < 0.875e1 ? 0.129695812746606215e0 + R * (-0.140703990560713185e-1) + pow(R - 0.85e1, 2) * 0.996671477147883199e-2 + pow(R - 0.85e1, 3) * (-0.413564692477424480e-2) : (R < 0.90e1 ? 0.934347815473618865e-1 + R * (-0.986247546872707180e-2) + pow(R - 0.875e1, 2) * 0.686497957789814796e-2 + pow(R - 0.875e1, 3) * (-0.254593954795942143e-2) : (R < 0.925e1 ? 0.672279273521835113e-1 + R * (-0.690734934502038999e-2) + pow(R - 0.90e1, 2) * 0.495552491692858189e-2 + pow(R - 0.90e1, 3) * (-0.216101811538808907e-2) : (R < 0.95e1 ? 0.483325948045201376e-1 + R * (-0.483477778319136610e-2) + pow(R - 0.925e1, 2) * 0.333476133038751498e-2 + pow(R - 0.925e1, 3) * (-0.128453403848820540e-2) : (R < 0.100e2 ? 0.349689064800343952e-1 + R * (-0.340824725021414724e-2) + pow(R - 0.95e1, 2) * 0.237136080152136088e-2 + pow(R - 0.95e1, 3) * (-0.848340226186133570e-3) : (R < 0.105e2 ? 0.181046478333238663e-1 + R * (-0.167314161833238655e-2) + pow(R - 0.100e2, 2) * 0.109885046224216052e-2 + pow(R - 0.100e2, 3) * (-0.347093891954775155e-3) : (R < 0.110e2 ? 0.953140825799122723e-2 + R * (-0.834611575056307337e-3) + pow(R - 0.105e2, 2) * 0.578209624309997789e-3 + pow(R - 0.105e2, 3) * (-0.237786436394765894e-3) : (R < 0.120e2 ? 0.524766959236622459e-2 + R * (-0.434741778042384091e-3) + pow(R - 0.110e2, 2) * 0.221529969717848893e-3 + pow(R - 0.110e2, 3) * (-0.543271602754647989e-4) : (R < 0.140e2 ? 0.205393089849696849e-2 + R * (-0.154663319433080715e-3) + pow(R - 0.120e2, 2) * 0.585484888914544966e-4 + pow(R - 0.120e2, 3) * (-0.891843021245706738e-5) : (R < 0.160e2 ? 0.436358310144465799e-3 + R * (-0.274905264167475571e-4) + pow(R - 0.140e2, 2) * 0.503790761671208807e-5 + pow(R - 0.140e2, 3) * (-0.347643297919154100e-6) : (R < 0.180e2 ? 0.198050219958864913e-3 + R * (-0.115106155249290574e-4) + pow(R - 0.160e2, 2) * 0.295204782919716347e-5 + pow(R - 0.160e2, 3) * (-0.216381665866317413e-6) : (R < 0.200e2 ? 0.423183540709518084e-4 + R * (-0.229900419853621136e-5) + pow(R - 0.180e2, 2) * 0.165375783399925894e-5 + pow(R - 0.180e2, 3) * (-0.313185201503076501e-6) : (R < 0.250e2 ? -0.107082745642781107e-4 + R * 0.557804719423905524e-6 + pow(R - 0.200e2, 2) * (-0.225353375019200282e-6) + pow(R - 0.200e2, 3) * 0.199272457556838311e-7 : 0.512355474259524298e-5 + R * (-0.201185599091809729e-6) + pow(R - 0.250e2, 2) * 0.735553113160572309e-7 + pow(R - 0.250e2, 3) * (-0.720527724273905626e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1433023437e3 * (R - 0.300e2) * (R - 0.250e2) + 0.1528557720e4 * R + 0.8980291884e5 - 0.7642788600e2 * R * R + 0.75000e3 * (0.2802358731e0 * R - 0.1159157873e2) * R) * pow(R, -6));
}

static double radcoeff_7_2_9_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.512880893099999957e0 + pow(R - 0.475e1, 2) * 0.111688360689903665e1 + pow(R - 0.475e1, 3) * (-0.849839061196146273e0) : (R < 0.525e1 ? -0.245183930037620490e1 + R * 0.399096979475240921e0 + pow(R - 0.50e1, 2) * 0.479504311001926919e0 + pow(R - 0.50e1, 3) * (-0.859177984411561901e0) : (R < 0.55e1 ? -0.284824042491994156e1 + R * 0.477753262899036468e0 + pow(R - 0.525e1, 2) * (-0.164879177306744507e0) + pow(R - 0.525e1, 3) * (-0.237774991557605647e0) : (R < 0.575e1 ? -0.216363741010737254e1 + R * 0.350730863328613141e0 + pow(R - 0.55e1, 2) * (-0.343210420974948749e0) + pow(R - 0.55e1, 3) * 0.444418482419838626e-1 : (R < 0.60e1 ? -0.124557756487243698e1 + R * 0.187458499386510768e0 + pow(R - 0.575e1, 2) * (-0.309879034793460850e0) + pow(R - 0.575e1, 3) * 0.168664686589670959e0 : (R < 0.625e1 ? -0.522420286852061766e0 + R * 0.641436107253436361e-1 + pow(R - 0.60e1, 2) * (-0.183380519851207624e0) + pow(R - 0.60e1, 3) * 0.302744051799332170e0 : (R < 0.65e1 ? -0.310865254700716354e0 + R * 0.292178605121146164e-1 + pow(R - 0.625e1, 2) * 0.436775189982915452e-1 + pow(R - 0.625e1, 3) * 0.618895830129999741e-1 : (R < 0.675e1 ? -0.524548251070286242e0 + R * 0.626609168261978849e-1 + pow(R - 0.65e1, 2) * 0.900947062580415292e-1 + pow(R - 0.65e1, 3) * (-0.978094475313323192e-1) : (R < 0.70e1 ? -0.700725156135883487e0 + R * 0.893689985430938527e-1 + pow(R - 0.675e1, 2) * 0.167376206095422898e-1 + pow(R - 0.675e1, 3) * (-0.578552188076706733e-1) : (R < 0.725e1 ? -0.683229740089987159e0 + R * 0.868899553214267373e-1 + pow(R - 0.70e1, 2) * (-0.266537934962107204e-1) + pow(R - 0.70e1, 3) * (-0.127789738779848956e-1) : (R < 0.75e1 ? -0.571103854611194284e0 + R * 0.711670009711992124e-1 + pow(R - 0.725e1, 2) * (-0.362380239046993929e-1) + pow(R - 0.725e1, 3) * 0.400749703961024873e-2 : (R < 0.775e1 ? -0.443049067033323196e0 + R * 0.537993947137764272e-1 + pow(R - 0.75e1, 2) * (-0.332324011249917062e-1) + pow(R - 0.75e1, 3) * 0.968223883954395272e-2 : (R < 0.80e1 ? -0.330268756076136816e0 + R * 0.389986139336950741e-1 + pow(R - 0.775e1, 2) * (-0.259707219953337412e-1) + pow(R - 0.775e1, 3) * 0.891870536221375798e-2 : (R < 0.825e1 ? -0.241247741491546208e0 + R * 0.276855101914432779e-1 + pow(R - 0.80e1, 2) * (-0.192816929736734227e-1) + pow(R - 0.80e1, 3) * 0.751016915160122346e-2 : (R < 0.85e1 ? -0.174415810299387325e0 + R * 0.194528204205317995e-1 + pow(R - 0.825e1, 2) * (-0.136490661099725047e-1) + pow(R - 0.825e1, 3) * 0.528148919938120631e-2 : (R < 0.875e1 ? -0.125595196106650930e0 + R * 0.136185665904295216e-1 + pow(R - 0.85e1, 2) * (-0.968794921043659996e-2) + pow(R - 0.85e1, 3) * 0.395707424287406080e-2 : (R < 0.90e1 ? -0.902461607813134503e-1 + R * 0.951654340575010943e-2 + pow(R - 0.875e1, 2) * (-0.672014352828105392e-2) + pow(R - 0.875e1, 3) * 0.264944083712248752e-2 : (R < 0.925e1 ? -0.648550577741304340e-1 + R * 0.665324179857004847e-2 + pow(R - 0.90e1, 2) * (-0.473306290043918818e-2) + pow(R - 0.90e1, 3) * 0.204168112863597866e-2 : (R < 0.95e1 ? -0.467695977307197308e-1 + R * 0.466952555996970071e-2 + pow(R - 0.925e1, 2) * (-0.320180205396220418e-2) + pow(R - 0.925e1, 3) * 0.127516783233360309e-2 : (R < 0.100e2 ? -0.340126188067359156e-1 + R * 0.330771850155114899e-2 + pow(R - 0.95e1, 2) * (-0.224542617971200181e-2) + pow(R - 0.95e1, 3) * 0.807686905219407629e-3 : (R < 0.105e2 ? -0.180764044805370276e-1 + R * 0.166805750075370274e-2 + pow(R - 0.100e2, 2) * (-0.103389582188289026e-2) + pow(R - 0.100e2, 3) * 0.318205254350968896e-3 : (R < 0.110e2 ? -0.994506302745741186e-2 + R * 0.872815619634039266e-3 + pow(R - 0.105e2, 2) * (-0.556587940356436913e-3) + pow(R - 0.105e2, 3) * 0.211565880576717160e-3 : (R < 0.120e2 ? -0.568071544831154178e-2 + R * 0.474902089710140169e-3 + pow(R - 0.110e2, 2) * (-0.239239119491361173e-3) + pow(R - 0.110e2, 3) * 0.558200124812209967e-4 : (R < 0.140e2 ? -0.213191613685297012e-2 + R * 0.163883888171080847e-3 + pow(R - 0.120e2, 2) * (-0.717790820476981627e-4) + pow(R - 0.120e2, 3) * 0.116864447060788662e-4 : (R < 0.160e2 ? -0.269235023315284429e-3 + R * 0.170048964532346037e-4 + pow(R - 0.140e2, 2) * (-0.166041381122495971e-5) + pow(R - 0.140e2, 3) * (-0.252237265196170679e-6) : (R < 0.180e2 ? -0.123198537848691456e-3 + R * 0.733639402598071550e-5 + pow(R - 0.160e2, 2) * (-0.317383740240198399e-5) + pow(R - 0.160e2, 3) * 0.478118000705812961e-6 : (R < 0.200e2 ? -0.682613863236564138e-5 + R * 0.378460424842535644e-6 + pow(R - 0.180e2, 2) * (-0.305129398167106227e-6) + pow(R - 0.180e2, 3) * 0.588524677229191979e-7 : (R < 0.250e2 ? 0.270992311661717709e-5 + R * (-0.135827555150858862e-6) + pow(R - 0.200e2, 2) * 0.479854081704089407e-7 + pow(R - 0.200e2, 3) * (-0.412207964324743286e-8) : -0.873154346041826536e-6 + R * 0.348705533096730632e-7 + pow(R - 0.250e2, 2) * (-0.138457864783025564e-7) + pow(R - 0.250e2, 3) * 0.138235447287358900e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2120955648e1 * (R - 0.300e2) * (R - 0.250e2) - 0.2262247108e2 * R - 0.1329573198e4 + 0.1131123554e1 * R * R + 0.75000e3 * (-0.4148411170e-2 * R + 0.1716064365e0) * R) * pow(R, -6));
}

static double radcoeff_7_4_3_2_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.662546295700006636e-2 + R * 0.138777878078144568e-16 + pow(R - 0.475e1, 2) * 0.798784720342023857e0 + pow(R - 0.475e1, 3) * (-0.176227261768809562e1) : (R < 0.525e1 ? -0.329068149362470030e0 + R * 0.689662443544940135e-1 + pow(R - 0.50e1, 2) * (-0.522919742924047748e0) + pow(R - 0.50e1, 3) * 0.699542779784286806e0 : (R < 0.55e1 ? 0.333231623964374502e0 + R * (-0.613293558979760914e-1) + pow(R - 0.525e1, 2) * 0.173734191416737493e-2 + pow(R - 0.525e1, 3) * 0.286302006309479169e-1 : (R < 0.575e1 ? 0.299484970059243127e0 + R * (-0.550925223225896682e-1) + pow(R - 0.55e1, 2) * 0.232099923873783122e-1 + pow(R - 0.55e1, 3) * 0.647495972119213614e-1 : (R < 0.60e1 ? 0.165410419437075185e0 + R * (-0.313469766516652482e-1) + pow(R - 0.575e1, 2) * 0.717721902963193298e-1 + pow(R - 0.575e1, 3) * 0.338946137213666857e-1 : (R < 0.625e1 ? -0.830222266555040306e-1 + R * 0.108943585692506707e-1 + pow(R - 0.60e1, 2) * 0.971931505873443458e-1 + pow(R - 0.60e1, 3) * (-0.148562096897388113e0) : (R < 0.65e1 ? -0.208901325791641057e0 + R * 0.316355406946625672e-1 + pow(R - 0.625e1, 2) * (-0.142284220856967493e-1) + pow(R - 0.625e1, 3) * (-0.286006173638140883e-1) : (R < 0.675e1 ? -0.129138112627643825e0 + R * 0.191587138960990500e-1 + pow(R - 0.65e1, 2) * (-0.356788851085573164e-1) + pow(R - 0.65e1, 3) * 0.293973411366444566e-1 : (R < 0.70e1 ? -0.476984821263532824e-1 + R * 0.683127280494122760e-2 + pow(R - 0.675e1, 2) * (-0.136308792560739713e-1) + pow(R - 0.675e1, 3) * 0.126551200172362287e-1 : (R < 0.725e1 ? -0.172544434559522494e-1 + R * 0.238866818013603547e-2 + pow(R - 0.70e1, 2) * (-0.413953924314679894e-2) + pow(R - 0.70e1, 3) * 0.311042365201062406e-2 : (R < 0.75e1 ? -0.668696668463105489e-2 + R * 0.902102993314628254e-3 + pow(R - 0.725e1, 2) * (-0.180672150413883079e-2) + pow(R - 0.725e1, 3) * 0.138130985472127189e-2 : (R < 0.775e1 ? -0.194556515481088504e-2 + R * 0.257737839005451339e-3 + pow(R - 0.75e1, 2) * (-0.770739113097876978e-3) + pow(R - 0.75e1, 3) * 0.565175891664286252e-3 : (R < 0.80e1 ? 0.180437369607359455e-3 + R * (-0.216612378564334779e-4) + pow(R - 0.775e1, 2) * (-0.346857194349662289e-3) + pow(R - 0.775e1, 3) * 0.487816308541584608e-3 : (R < 0.825e1 ? 0.822085239370739986e-3 + R * (-0.103624277179717502e-3) + pow(R - 0.80e1, 2) * 0.190050370565262081e-4 + pow(R - 0.80e1, 3) * 0.214326349369375153e-3 : (R < 0.85e1 ? 0.416690053853746600e-3 + R * (-0.539355681446965563e-4) + pow(R - 0.825e1, 2) * 0.179749799083557586e-3 + pow(R - 0.825e1, 3) * (-0.228435237539085438e-3) : (R < 0.875e1 ? 0.244871294327184268e-4 + R * (-0.689227564149628603e-5) + pow(R - 0.85e1, 2) * 0.842337092924350630e-5 + pow(R - 0.85e1, 3) * 0.215698638546966558e-3 : (R < 0.90e1 ? -0.362348945338464756e-3 + R * 0.377629045506816874e-4 + pow(R - 0.875e1, 2) * 0.170197349839468426e-3 + pow(R - 0.875e1, 3) * (-0.347585723688780750e-3) : (R < 0.925e1 ? -0.536479803458925555e-3 + R * 0.576892562787695033e-4 + pow(R - 0.90e1, 2) * (-0.904919429271171493e-4) + pow(R - 0.90e1, 3) * 0.184482592848156499e-3 : (R < 0.95e1 ? -0.440689770315722527e-3 + R * 0.470337709742402754e-4 + pow(R - 0.925e1, 2) * 0.478700017090002313e-4 + pow(R - 0.925e1, 3) * (-0.206297900183845359e-3) : (R < 0.100e2 ? -0.300835673313558990e-3 + R * 0.322879155442693693e-4 + pow(R - 0.95e1, 2) * (-0.106853423428883795e-3) + pow(R - 0.95e1, 3) * 0.835403771526900768e-4 : (R < 0.105e2 ? 0.124874923616968576e-3 + R * (-0.119102250200968578e-4) + pow(R - 0.100e2, 2) * 0.184571423001513271e-4 + pow(R - 0.100e2, 3) * (-0.151879023759152188e-4) : (R < 0.110e2 ? 0.533954584537604346e-4 + R * (-0.484400950188194613e-5) + pow(R - 0.105e2, 2) * (-0.432471126372150283e-5) + pow(R - 0.105e2, 3) * 0.914194334297078994e-5 : (R < 0.120e2 ? 0.256078148772289203e-4 + R * (-0.231226325837535650e-5) + pow(R - 0.110e2, 2) * 0.938820375073468208e-5 + pow(R - 0.110e2, 3) * (-0.449752393035932569e-5) : (R < 0.140e2 ? -0.329075338271923388e-4 + R * 0.297157245201602848e-5 + pow(R - 0.120e2, 2) * (-0.410436804034329583e-5) + pow(R - 0.120e2, 3) * 0.990081208792640591e-6 : (R < 0.160e2 ? 0.221066108636365380e-4 + R * (-0.156492520384546688e-5) + pow(R - 0.140e2, 2) * 0.183611921241254793e-5 + pow(R - 0.140e2, 3) * (-0.445017093219907263e-6) : (R < 0.180e2 ? -0.617739672865340494e-5 + R * 0.439346527165837803e-6 + pow(R - 0.160e2, 2) * (-0.833983346906895646e-6) + pow(R - 0.160e2, 3) * 0.202254814411988349e-6 : (R < 0.200e2 ? 0.846446946332191476e-5 + R * (-0.469529087517884169e-6) + pow(R - 0.180e2, 2) * 0.379545539565034660e-6 + pow(R - 0.180e2, 3) * (-0.732343866905462736e-7) : (R < 0.250e2 ? -0.339061383141398150e-5 + R * 0.169840430455699082e-6 + pow(R - 0.200e2, 2) * (-0.598607805782430078e-7) + pow(R - 0.200e2, 3) * 0.513937759822063870e-8 : 0.108415100180457771e-5 + R * (-0.433140554601831015e-7) + pow(R - 0.250e2, 2) * 0.172298833950665744e-7 + pow(R - 0.250e2, 3) * (-0.172090954780599097e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1982328864e1 * (R - 0.300e2) * (R - 0.250e2) + 0.2114366360e2 * R + 0.1242659017e4 - 0.1057183180e1 * R * R + 0.75000e3 * (0.3877231240e-2 * R - 0.1603885593e0) * R) * pow(R, -6));
}

static double radcoeff_7_4_3_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.910884312900002574e-1 + R * (-0.555111512312578270e-16) + pow(R - 0.475e1, 2) * (-0.274208024383973026e1) + pow(R - 0.475e1, 3) * 0.553687900607892125e1 : (R < 0.525e1 ? 0.167059869192133670e1 + R * (-0.332875308280067339e0) + pow(R - 0.50e1, 2) * 0.141057901071946068e1 + pow(R - 0.50e1, 3) * (-0.182024148223676541e1) : (R < 0.55e1 ? -0.180651087131414811e0 + R * 0.311189191602694905e-1 + pow(R - 0.525e1, 2) * 0.453978990418865275e-1 + pow(R - 0.525e1, 3) * 0.331032255881420837e-1 : (R < 0.575e1 ? -0.336278404292441657e0 + R * 0.600247234789893919e-1 + pow(R - 0.55e1, 2) * 0.702253182329930919e-1 + pow(R - 0.55e1, 3) * (-0.205231203795802619e0) : (R < 0.60e1 ? -0.315728957791694520e0 + R * 0.566565318837729537e-1 + pow(R - 0.575e1, 2) * (-0.836980846138588724e-1) + pow(R - 0.575e1, 3) * (-0.674917307249318366e-1) : (R < 0.625e1 ? 0.500780453448718132e-2 + R * 0.215279006591880331e-2 + pow(R - 0.60e1, 2) * (-0.134316882657557757e0) + pow(R - 0.60e1, 3) * 0.177273304935530174e0 : (R < 0.65e1 ? 0.211380998841551010e0 + R * (-0.317669065874481640e-1) + pow(R - 0.625e1, 2) * (-0.136190395591011260e-2) + pow(R - 0.625e1, 3) * 0.540246494788110820e-1 : (R < 0.675e1 ? 0.150723661296819911e0 + R * (-0.223182367881261390e-1) + pow(R - 0.65e1, 2) * 0.391565831531981989e-1 + pow(R - 0.65e1, 3) * (-0.298093125787745189e-1) : (R < 0.70e1 ? 0.582791203253190254e-1 + R * (-0.832919132004726268e-2) + pow(R - 0.675e1, 2) * 0.167995987191173098e-1 + pow(R - 0.675e1, 3) * (-0.155723148117130339e-1) : (R < 0.725e1 ? 0.207258454997936194e-1 + R * (-0.284920098768480252e-2) + pow(R - 0.70e1, 2) * 0.512036261033253347e-2 + pow(R - 0.70e1, 3) * (-0.423926766237329306e-2) : (R < 0.75e1 ? 0.818106962179807919e-2 + R * (-0.108388236921352823e-2) + pow(R - 0.725e1, 2) * 0.194091186355256325e-2 + pow(R - 0.725e1, 3) * (-0.159665540279379896e-2) : (R < 0.775e1 ? 0.324430604445813007e-2 + R * (-0.412799325461083962e-3) + pow(R - 0.75e1, 2) * 0.743420311457213922e-3 + pow(R - 0.75e1, 3) * (-0.652027328691512386e-3) : (R < 0.80e1 ? 0.134730539202155089e-2 + R * (-0.163344293862135580e-3) + pow(R - 0.775e1, 2) * 0.254399814938579660e-3 + pow(R - 0.775e1, 3) * (-0.167658829320149120e-3) : (R < 0.825e1 ? 0.594474695472989854e-3 + R * (-0.675804168903737306e-4) + pow(R - 0.80e1, 2) * 0.128655692948467820e-3 + pow(R - 0.80e1, 3) * (-0.246696148267891695e-3) : (R < 0.85e1 ? 0.449564419905048348e-3 + R * (-0.495080982163695002e-4) + pow(R - 0.825e1, 2) * (-0.563664182524509452e-4) + pow(R - 0.825e1, 3) * 0.199117551671715781e-3 : (R < 0.875e1 ? 0.371366410105260225e-3 + R * (-0.403567664041482656e-4) + pow(R - 0.85e1, 2) * 0.929717455013359038e-4 + pow(R - 0.85e1, 3) * (-0.212869812658971445e-3) : (R < 0.90e1 ? 0.316339203201577697e-3 + R * (-0.337839835270374529e-4) + pow(R - 0.875e1, 2) * (-0.666806139928926802e-4) + pow(R - 0.875e1, 3) * 0.199947257364169976e-3 : (R < 0.925e1 ? 0.277947606889317243e-3 + R * (-0.296341797677019158e-4) + pow(R - 0.90e1, 2) * 0.832798290302348286e-4 + pow(R - 0.90e1, 3) * (-0.155128644637708593e-3) : (R < 0.95e1 ? 0.164610744909932523e-3 + R * (-0.170808861221548661e-4) + pow(R - 0.925e1, 2) * (-0.330666544480466296e-4) + pow(R - 0.925e1, 3) * 0.742293105626643950e-4 : (R < 0.100e2 ? 0.188549561172946748e-3 + R * (-0.196962176156786060e-4) + pow(R - 0.95e1, 2) * 0.226053284739516733e-4 + pow(R - 0.95e1, 3) * (-0.344752039718892838e-5) : (R < 0.105e2 ? -0.642692851881370955e-5 + R * 0.323470560381370964e-6 + pow(R - 0.100e2, 2) * 0.174340478781682806e-4 + pow(R - 0.100e2, 3) * (-0.169102982218620431e-4) : (R < 0.110e2 ? -0.540711080503077194e-4 + R * 0.507479477215311664e-5 + pow(R - 0.105e2, 2) * (-0.793139945462478582e-5) + pow(R - 0.105e2, 3) * 0.369709213263710047e-5 : (R < 0.120e2 ? 0.115256250893227044e-5 + R * (-0.837855829938427614e-7) + pow(R - 0.110e2, 2) * (-0.238576125566913427e-5) + pow(R - 0.110e2, 3) * 0.134237057866297698e-5 : (R < 0.140e2 ? 0.904210113641816671e-5 + R * (-0.828196358343180575e-6) + pow(R - 0.120e2, 2) * 0.164135048031979666e-5 + pow(R - 0.120e2, 3) * (-0.490728795761603187e-6) : (R < 0.160e2 ? 0.220848348164524706e-5 + R * (-0.151539986203231945e-6) + pow(R - 0.140e2, 2) * (-0.130302229424982267e-5) + pow(R - 0.140e2, 3) * 0.430140942925719332e-6 : (R < 0.180e2 ? 0.124388763850225021e-5 + R * (-0.201937848093890634e-6) + pow(R - 0.160e2, 2) * 0.127782336330449332e-5 + pow(R - 0.160e2, 3) * (-0.335109099378774025e-6) : (R < 0.200e2 ? -0.159454083953182996e-4 + R * 0.888046412578794364e-6 + pow(R - 0.180e2, 2) * (-0.732831232968150930e-6) + pow(R - 0.180e2, 3) * 0.141834285714376867e-6 : (R < 0.250e2 ? 0.684421102452573452e-5 + R * (-0.341267090721286741e-6) + pow(R - 0.200e2, 2) * 0.118174481318110365e-6 + pow(R - 0.200e2, 3) * (-0.101034937107706027e-7) : -0.206393327820054232e-5 + R * 0.827156941520217008e-7 + pow(R - 0.250e2, 2) * (-0.333779243434486776e-7) + pow(R - 0.250e2, 3) * 0.334412470580886766e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.6038147232e1 * (R - 0.300e2) * (R - 0.250e2) + 0.6440289496e2 * R + 0.3785517266e4 - 0.3220144748e1 * R * R + 0.75000e3 * (0.1181071586e-1 * R - 0.4885821350e0) * R) * pow(R, -6));
}

static double radcoeff_7_4_5_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.147448062899999677e-1 + R * (-0.693889390390722838e-17) + pow(R - 0.475e1, 2) * (-0.294577992908476638e0) + pow(R - 0.475e1, 3) * 0.811452324913906620e0 : (R < 0.525e1 ? -0.447685606055958224e-1 + R * 0.485831446711916526e-2 + pow(R - 0.50e1, 2) * 0.314011250776953355e0 + pow(R - 0.50e1, 3) * (-0.446840207381720034e0) : (R < 0.55e1 ? -0.416545939822497491e0 + R * 0.780814009715233293e-1 + pow(R - 0.525e1, 2) * (-0.211189047593366812e-1) + pow(R - 0.525e1, 3) * (-0.393704995470265939e-1) : (R < 0.575e1 ? -0.319803219677331219e0 + R * 0.601399799267874902e-1 + pow(R - 0.55e1, 2) * (-0.506467794196066301e-1) + pow(R - 0.55e1, 3) * (-0.584052677101733614e-1) : (R < 0.60e1 ? -0.115303555617628367e0 + R * 0.238656025213266725e-1 + pow(R - 0.575e1, 2) * (-0.944507302022366546e-1) + pow(R - 0.575e1, 3) * 0.484352878771983787e-2 : (R < 0.625e1 ? 0.156772174602565123e0 + R * (-0.224516009320941852e-1) + pow(R - 0.60e1, 2) * (-0.908180836114467760e-1) + pow(R - 0.60e1, 3) * 0.154530152239294061e0 : (R < 0.65e1 ? 0.256227067135937125e0 + R * (-0.388862391929499368e-1) + pow(R - 0.625e1, 2) * 0.250795305680237661e-1 + pow(R - 0.625e1, 3) * 0.214225994071039517e-1 : (R < 0.675e1 ? 0.150511998538689434e0 + R * (-0.223297365201060652e-1) + pow(R - 0.65e1, 2) * 0.411464801233517308e-1 + pow(R - 0.65e1, 3) * (-0.334707126837098870e-1) : (R < 0.70e1 ? 0.560526739847241676e-1 + R * (-0.803225508662580232e-2) + pow(R - 0.675e1, 2) * 0.160434456105693138e-1 + pow(R - 0.675e1, 3) * (-0.147077806082644112e-1) : (R < 0.725e1 ? 0.199774826749350570e-1 + R * (-0.276824114539072231e-2) + pow(R - 0.70e1, 2) * 0.501261015437100450e-2 + pow(R - 0.70e1, 3) * (-0.390005041283245481e-2) : (R < 0.75e1 ? 0.736075174223196731e-2 + R * (-0.993195520611305904e-3) + pow(R - 0.725e1, 2) * 0.208757234474666329e-2 + pow(R - 0.725e1, 3) * (-0.172611511640575858e-2) : (R < 0.775e1 ? 0.206320755476040478e-2 + R * (-0.273055932564053995e-3) + pow(R - 0.75e1, 2) * 0.792986007442344457e-3 + pow(R - 0.75e1, 3) * (-0.663802378504513768e-3) : (R < 0.80e1 ? -0.583567951329468826e-5 + R * (-0.102587481247810468e-5) + pow(R - 0.775e1, 2) * 0.295134223563959077e-3 + pow(R - 0.775e1, 3) * (-0.400474839656186649e-3) : (R < 0.825e1 ? -0.573471844684731542e-3 + R * 0.714522045339664437e-4 + pow(R - 0.80e1, 2) * (-0.522190617818089585e-5) + pow(R - 0.80e1, 3) * (-0.157860223830739435e-3) : (R < 0.85e1 ? -0.310534383092051793e-3 + R * 0.392424594766123446e-4 + pow(R - 0.825e1, 2) * (-0.123617074051235486e-3) + pow(R - 0.825e1, 3) * 0.551495800991443899e-4 : (R < 0.875e1 ? 0.120079183403534493e-3 + R * (-0.122255312804158221e-4) + pow(R - 0.85e1, 2) * (-0.822548889768771939e-4) + pow(R - 0.85e1, 3) * 0.154922660554161897e-3 : (R < 0.90e1 ? 0.223054068715804269e-3 + R * (-0.243049769149490582e-4) + pow(R - 0.875e1, 2) * 0.339371064387442359e-4 + pow(R - 0.875e1, 3) * (-0.140220032107791966e-3) : (R < 0.925e1 ? 0.306888525074091418e-3 + R * (-0.336276797157879356e-4) + pow(R - 0.90e1, 2) * (-0.712279176420997455e-4) + pow(R - 0.90e1, 3) * 0.195186752293005991e-3 : (R < 0.95e1 ? 0.296388668812567417e-3 + R * (-0.326441224818991833e-4) + pow(R - 0.925e1, 2) * 0.751621465776547410e-4 + pow(R - 0.925e1, 3) * (-0.622570378002320306e-4) : (R < 0.100e2 ? 0.539886890958455492e-4 + R * (-0.673624378061532113e-5) + pow(R - 0.95e1, 2) * 0.284693682274807147e-4 + pow(R - 0.95e1, 3) * (-0.184653159965001391e-4) : (R < 0.105e2 ? -0.874059456479028731e-4 + R * 0.788413744949028748e-5 + pow(R - 0.100e2, 2) * 0.771394232730503104e-6 + pow(R - 0.100e2, 3) * 0.373367641657784284e-5 : (R < 0.110e2 ? -0.124248728761868811e-3 + R * 0.114557889946541730e-4 + pow(R - 0.105e2, 2) * 0.637190885759726768e-5 + pow(R - 0.105e2, 3) * (-0.161526796938112241e-4) : (R < 0.120e2 ? -0.615062264688232447e-4 + R * 0.571318808189302266e-5 + pow(R - 0.110e2, 2) * (-0.178571106831195693e-4) + pow(R - 0.110e2, 3) * 0.834906619022654552e-5 : (R < 0.140e2 ? 0.569900025849976946e-4 + R * (-0.495383471366647426e-5) + pow(R - 0.120e2, 2) * 0.719008788756007067e-5 + pow(R - 0.120e2, 3) * (-0.181691289511341644e-5) : (R < 0.160e2 ? -0.261885043499793086e-4 + R * 0.200356209521280772e-5 + pow(R - 0.140e2, 2) * (-0.371138948312042883e-5) + pow(R - 0.140e2, 3) * 0.952504517632012429e-6 : (R < 0.180e2 ? 0.212340333929561354e-4 + R * (-0.141194162568475848e-5) + pow(R - 0.160e2, 2) * 0.200363762267164553e-5 + pow(R - 0.160e2, 3) * (-0.469164574164633105e-6) : (R < 0.200e2 ? -0.174270935220720694e-4 + R * 0.972633975026226166e-6 + pow(R - 0.180e2, 2) * (-0.811349822316153313e-6) + pow(R - 0.180e2, 3) * 0.157277845989020135e-6 : (R < 0.250e2 ? 0.774703270450290776e-5 + R * (-0.385431162370145415e-6) + pow(R - 0.200e2, 2) * 0.132317253617967575e-6 + pow(R - 0.200e2, 3) * (-0.112890482999876964e-7) : -0.226851483456132555e-5 + R * 0.910627513104530166e-7 + pow(R - 0.250e2, 2) * (-0.370184708818478794e-7) + pow(R - 0.250e2, 3) * 0.371473364395145475e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1229102627e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1311070796e3 * R + 0.7701455076e4 - 0.6555353980e1 * R * R + 0.75000e3 * (0.2403422963e-1 * R - 0.994114931e0) * R) * pow(R, -6));
}

static double radcoeff_7_4_5_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.744482181399999943e-1 + pow(R - 0.475e1, 2) * 0.256332786224164977e1 + pow(R - 0.475e1, 3) * (-0.524174031424659770e1) : (R < 0.525e1 ? -0.149033053015993833e1 + R * 0.298837622199587649e0 + pow(R - 0.50e1, 2) * (-0.136797737344329873e1) + pow(R - 0.50e1, 3) * 0.178832826817979162e1 : (R < 0.55e1 ? 0.282668479491341329e0 + R * (-0.498395142383507225e-1) + pow(R - 0.525e1, 2) * (-0.267311723084548980e-1) + pow(R - 0.525e1, 3) * (-0.457756915925689040e-1) : (R < 0.575e1 ? 0.400999441844016646e0 + R * (-0.717880425661848454e-1) + pow(R - 0.55e1, 2) * (-0.610629410028815794e-1) + pow(R - 0.55e1, 3) * 0.225032422030483792e0 : (R < 0.60e1 ? 0.333642015007231951e0 + R * (-0.601259339369099102e-1) + pow(R - 0.575e1, 2) * 0.107711375519981264e0 + pow(R - 0.575e1, 3) * 0.316882575506334807e-1 : (R < 0.625e1 ? -0.179143113029470204e-1 + R * (-0.328697886175496889e-3) + pow(R - 0.60e1, 2) * 0.131477568682956375e0 + pow(R - 0.60e1, 3) * (-0.169983045193017462e0) : (R < 0.65e1 ? -0.224021469390074418e0 + R * 0.335382654816119077e-1 + pow(R - 0.625e1, 2) * 0.399028478819326779e-2 + pow(R - 0.625e1, 3) * (-0.579476600745636242e-1) : (R < 0.675e1 ? -0.167022223625231087e0 + R * 0.246682216117278599e-1 + pow(R - 0.65e1, 2) * (-0.394704602677294555e-1) + pow(R - 0.65e1, 3) * 0.273344244352720228e-1 : (R < 0.70e1 ? -0.704443545324673071e-1 + R * 0.100581960594766390e-1 + pow(R - 0.675e1, 2) * (-0.189696419412754384e-1) + pow(R - 0.675e1, 3) * 0.165253218854755357e-1 : (R < 0.725e1 ? -0.266674871795590795e-1 + R * 0.367187294236558321e-2 + pow(R - 0.70e1, 2) * (-0.657565052716878751e-2) + pow(R - 0.70e1, 3) * 0.537021095402582041e-2 : (R < 0.75e1 ? -0.104579531459924723e-1 + R * 0.139096223266103078e-2 + pow(R - 0.725e1, 2) * (-0.254799231164942221e-2) + pow(R - 0.725e1, 3) * 0.209570933842119587e-2 : (R < 0.775e1 ? -0.397657729552720451e-2 + R * 0.509911577790293953e-3 + pow(R - 0.75e1, 2) * (-0.976210307833525089e-3) + pow(R - 0.75e1, 3) * 0.907682866049397494e-3 : (R < 0.80e1 ? -0.155956961685789876e-2 + R * 0.191996961257793412e-3 + pow(R - 0.775e1, 2) * (-0.295448158296476968e-3) + pow(R - 0.775e1, 3) * 0.236247932741213181e-3 : (R < 0.825e1 ? -0.746923018728259426e-3 + R * 0.885693694985324232e-4 + pow(R - 0.80e1, 2) * (-0.118262208740567068e-3) + pow(R - 0.80e1, 3) * 0.950285178657496715e-4 : (R < 0.85e1 ? -0.411995213701634745e-3 + R * 0.472561122280769390e-4 + pow(R - 0.825e1, 2) * (-0.469908203412548213e-4) + pow(R - 0.825e1, 3) * 0.159055599557881764e-4 : (R < 0.875e1 ? -0.240322115327858436e-3 + R * 0.267429945491598131e-4 + pow(R - 0.85e1, 2) * (-0.350616503744136890e-4) + pow(R - 0.85e1, 3) * 0.777954900550976807e-4 : (R < 0.90e1 ? -0.215536419427733109e-3 + R * 0.237988237472837854e-4 + pow(R - 0.875e1, 2) * 0.232849671669095748e-4 + pow(R - 0.875e1, 3) * (-0.268964540641788562e-4) : (R < 0.925e1 ? -0.273895952092545285e-3 + R * 0.303982221937050339e-4 + pow(R - 0.90e1, 2) * 0.311262661877543437e-5 + pow(R - 0.90e1, 3) * (-0.590691646783822721e-4) : (R < 0.95e1 ? -0.186572184249538697e-3 + R * 0.208790671258960768e-4 + pow(R - 0.925e1, 2) * (-0.411892468900112714e-4) + pow(R - 0.925e1, 3) * 0.456389966817078948e-4 : (R < 0.100e2 ? -0.740789429687513460e-4 + R * 0.884175555871066798e-5 + pow(R - 0.95e1, 2) * (-0.695999937873035366e-5) + pow(R - 0.95e1, 3) * (-0.159563364293819669e-4) : (R < 0.105e2 ? 0.111459032140561579e-3 + R * (-0.100854961420561575e-4) + pow(R - 0.100e2, 2) * (-0.308945040228033040e-4) + pow(R - 0.100e2, 3) * 0.422952574458312284e-4 : (R < 0.110e2 ? 0.100339453169103387e-3 + R * (-0.925855708048603674e-5) + pow(R - 0.105e2, 2) * 0.325483821459435454e-4 + pow(R - 0.105e2, 3) * (-0.278444968419429432e-4) : (R < 0.120e2 ? -0.233191180590032996e-4 + R * 0.240645243400030006e-5 + pow(R - 0.110e2, 2) * (-0.921836311697086932e-5) + pow(R - 0.110e2, 3) * 0.389415965097056834e-5 : (R < 0.140e2 ? 0.524076458478567775e-4 + R * (-0.434779484702973144e-5) + pow(R - 0.120e2, 2) * 0.246411583594083782e-5 + pow(R - 0.120e2, 3) * (-0.365750365712985963e-6) : (R < 0.160e2 ? -0.172063191064890298e-4 + R * 0.111966410817778786e-5 + pow(R - 0.140e2, 2) * 0.269613641662922041e-6 + pow(R - 0.140e2, 3) * (-0.140336889250907983e-6) : (R < 0.180e2 ? -0.756114998369728352e-5 + R * 0.514076003818580225e-6 + pow(R - 0.160e2, 2) * (-0.572407693842525856e-6) + pow(R - 0.160e2, 3) * 0.122312110279117863e-6 : (R < 0.200e2 ? 0.592165425953795970e-5 + R * (-0.307809448202108848e-6) + pow(R - 0.180e2, 2) * 0.161464967832181293e-6 + pow(R - 0.180e2, 3) * (-0.286316447155634285e-7) : (R < 0.250e2 ? 0.292858278302897490e-6 + R * (-0.552931346014487480e-8) + pow(R - 0.200e2, 2) * (-0.103249004611992946e-7) + pow(R - 0.200e2, 3) * 0.113377943224565384e-8 : 0.631846875642844462e-6 + R * (-0.237448606537137775e-7) + pow(R - 0.250e2, 2) * 0.668179102248551224e-8 + pow(R - 0.250e2, 3) * (-0.607022581548551232e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.5832704291e2 * (R - 0.300e2) * (R - 0.250e2) + 0.6221538488e3 * R + 0.3655173244e5 - 0.3110769244e2 * R * R + 0.75000e3 * (0.1140619081e0 * R - 0.4718020323e1) * R) * pow(R, -6));
}

static double radcoeff_7_4_6_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.142474923500000000e-1 + pow(R - 0.475e1, 2) * (-0.159758034197853643e0) + pow(R - 0.475e1, 3) * 0.297577260695414458e0 : (R < 0.525e1 ? 0.129328663503682995e0 + R * (-0.240832807185365969e-1) + pow(R - 0.50e1, 2) * 0.634249113237072421e-1 + pow(R - 0.50e1, 3) * (-0.889572396862434306e-1) : (R < 0.55e1 ? 0.529796541827314837e-1 + R * (-0.905030749785361646e-2) + pow(R - 0.525e1, 2) * (-0.329301844097533002e-2) + pow(R - 0.525e1, 3) * 0.177293672335591852e-1 : (R < 0.575e1 ? 0.438232526462691424e-1 + R * (-0.737256036204893533e-2) + pow(R - 0.55e1, 2) * 0.100040069841940606e-1 + pow(R - 0.55e1, 3) * (-0.106407615999932828e-1) : (R < 0.60e1 ? 0.269927922032162093e-1 + R * (-0.436569966995064510e-2) + pow(R - 0.575e1, 2) * 0.202343578419909896e-2 + pow(R - 0.575e1, 3) * 0.772912600013922826e-3 : (R < 0.625e1 ? 0.201914996714909097e-1 + R * (-0.320906066534848477e-2) + pow(R - 0.60e1, 2) * 0.260312023420954108e-2 + pow(R - 0.60e1, 3) * 0.606501747137591337e-3 : (R < 0.65e1 ? 0.115181763090963507e-1 + R * (-0.179378147065541605e-2) + pow(R - 0.625e1, 2) * 0.305799654456273464e-2 + pow(R - 0.625e1, 3) * (-0.250502728776428154e-2) : (R < 0.675e1 ? 0.478467327889403431e-2 + R * (-0.734475814829851437e-3) + pow(R - 0.65e1, 2) * 0.117922607873952338e-2 + pow(R - 0.65e1, 3) * (-0.656488781680469695e-3) : (R < 0.70e1 ? 0.169909787016995053e-2 + R * (-0.267954422025177869e-3) + pow(R - 0.675e1, 2) * 0.686859492479171109e-3 + pow(R - 0.675e1, 3) * (-0.487368055913837864e-3) : (R < 0.725e1 ? -0.299261877139413802e-4 + R * (-0.159061862694369474e-4) + pow(R - 0.70e1, 2) * 0.321333450543792685e-3 + pow(R - 0.70e1, 3) * (-0.213760754664179577e-3) : (R < 0.75e1 ? -0.887435591196211347e-3 + R * 0.104680397502925711e-3 + pow(R - 0.725e1, 2) * 0.161012884545658002e-3 + pow(R - 0.725e1, 3) * (-0.136596661749443360e-3) : (R < 0.775e1 ? -0.129121587021300589e-2 + R * 0.159574965697734100e-3 + pow(R - 0.75e1, 2) * 0.585653882335754751e-4 + pow(R - 0.75e1, 3) * (-0.175698857538047581e-3) : (R < 0.80e1 ? -0.126192930514256894e-2 + R * 0.155914124026137910e-3 + pow(R - 0.775e1, 2) * (-0.732087549199602109e-4) + pow(R - 0.775e1, 3) * (-0.810897596183656410e-4) : (R < 0.825e1 ? -0.853302220711713998e-3 + R * 0.104105416637714245e-3 + pow(R - 0.80e1, 2) * (-0.134026074633734448e-3) + pow(R - 0.80e1, 3) * 0.685979376115098159e-4 : (R < 0.85e1 ? -0.413861884475792154e-3 + R * 0.499544926230051085e-4 + pow(R - 0.825e1, 2) * (-0.825776214251020831e-4) + pow(R - 0.825e1, 3) * (-0.745114360756734336e-4) : (R < 0.875e1 ? 0.495202652987449343e-4 + R * (-0.530521235373469845e-5) + pow(R - 0.85e1, 2) * (-0.138461198481857158e-3) + pow(R - 0.85e1, 3) * 0.307783565731183800e-3 : (R < 0.90e1 ? 0.146485889438580287e-3 + R * (-0.168263930200663185e-4) + pow(R - 0.875e1, 2) * 0.923764758165306917e-4 + pow(R - 0.875e1, 3) * (-0.266482736673061705e-3) : (R < 0.925e1 ? 0.182091103378000362e-3 + R * (-0.206036682380000389e-4) + pow(R - 0.90e1, 2) * (-0.107485576688265587e-3) + pow(R - 0.90e1, 3) * 0.255921841057062908e-3 : (R < 0.95e1 ? 0.232628382701385118e-3 + R * (-0.263611113839335271e-4) + pow(R - 0.925e1, 2) * 0.844558041045316208e-4 + pow(R - 0.925e1, 3) * (-0.748831008351900186e-4) : (R < 0.100e2 ? -0.310427241264744593e-4 + R * 0.182620926173415396e-5 + pow(R - 0.95e1, 2) * 0.282934784781391034e-4 + pow(R - 0.95e1, 3) * (-0.250722993312148167e-4) : (R < 0.105e2 ? -0.121995931720621432e-3 + R * 0.113154632414621432e-4 + pow(R - 0.100e2, 2) * (-0.931497051868312335e-5) + pow(R - 0.100e2, 3) * 0.745035390351766845e-5 : (R < 0.110e2 ? -0.842577266563813645e-4 + R * 0.758825815041727285e-5 + pow(R - 0.105e2, 2) * 0.186056033659337954e-5 + pow(R - 0.105e2, 3) * (-0.713917971485584979e-5) : (R < 0.120e2 ? -0.462529150915564011e-4 + R * 0.409443370086876356e-5 + pow(R - 0.110e2, 2) * (-0.884820923569039621e-5) + pow(R - 0.110e2, 3) * 0.396201736382163204e-5 : (R < 0.140e2 ? 0.185852895955655717e-4 + R * (-0.171593267904713105e-5) + pow(R - 0.120e2, 2) * 0.303784285577450160e-5 + pow(R - 0.120e2, 3) * (-0.868804048875467967e-6) : (R < 0.160e2 ? -0.373891085033618724e-6 + R * 0.979015754525847838e-8 + pow(R - 0.140e2, 2) * (-0.217498143747830662e-5) + pow(R - 0.140e2, 3) * 0.701282441477838607e-6 : (R < 0.180e2 ? 0.108902593214245878e-5 + R * (-0.274746294633903680e-6) + pow(R - 0.160e2, 2) * 0.203271321138872565e-5 + pow(R - 0.160e2, 3) * (-0.534522469785886917e-6) : (R < 0.200e2 ? -0.259547987264264082e-4 + R * 0.144183691349035592e-5 + pow(R - 0.180e2, 2) * (-0.117442160732659606e-5) + pow(R - 0.180e2, 3) * 0.226865151453209007e-6 : (R < 0.250e2 ? 0.106685282932504003e-4 + R * (-0.533467698377520029e-6) + pow(R - 0.200e2, 2) * 0.186769301392658008e-6 + pow(R - 0.200e2, 3) * (-0.160099268850307976e-7) : -0.333719247129375008e-5 + R * 0.133480799171750000e-6 + pow(R - 0.250e2, 2) * (-0.533796018828039964e-7) + pow(R - 0.250e2, 3) * 0.533768357609079896e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2642157760e0 * (R - 0.300e2) * (R - 0.250e2) - 0.2820069956e1 * R - 0.1650185036e3 + 0.1410034978e0 * R * R + 0.75000e3 * (-0.515754528e-3 * R + 0.2131632414e-1) * R) * pow(R, -6));
}

static double radcoeff_7_4_7_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.218083934100000015e-1 + pow(R - 0.475e1, 2) * (-0.351048134880815765e0) + pow(R - 0.475e1, 3) * 0.420634035203262979e0 : (R < 0.525e1 ? 0.489716220975980276e0 + R * (-0.966551858397960567e-1) + pow(R - 0.50e1, 2) * (-0.355726084783685309e-1) + pow(R - 0.50e1, 3) * 0.111986233590211010e0 : (R < 0.55e1 ? 0.472384366414282775e0 + R * (-0.934440712808157631e-1) + pow(R - 0.525e1, 2) * 0.484170667142897401e-1 + pow(R - 0.525e1, 3) * 0.740133945958932893e-1 : (R < 0.575e1 ? 0.267093645733174900e0 + R * (-0.553580264369408909e-1) + pow(R - 0.55e1, 2) * 0.103927112661209714e0 + pow(R - 0.55e1, 3) * 0.286330801862154996e-1 : (R < 0.60e1 ? -0.556240063243313709e-1 + R * 0.197423242857936929e-2 + pow(R - 0.575e1, 2) * 0.125401922800871340e0 + pow(R - 0.575e1, 3) * (-0.526118695807552342e-1) : (R < 0.625e1 ? -0.365625861735740632e0 + R * 0.548104682826234327e-1 + pow(R - 0.60e1, 2) * 0.859430206153049131e-1 + pow(R - 0.60e1, 3) * (-0.184002667463194630e0) : (R < 0.65e1 ? -0.416073278115793088e0 + R * 0.632814784409268943e-1 + pow(R - 0.625e1, 2) * (-0.520589799820910526e-1) + pow(R - 0.625e1, 3) * (-0.140349600864660227e-1) : (R < 0.675e1 ? -0.233249468067848409e0 + R * 0.346204334336689887e-1 + pow(R - 0.65e1, 2) * (-0.625852000469405700e-1) + pow(R - 0.65e1, 3) * 0.497709544650584493e-1 : (R < 0.70e1 ? -0.881496859936808513e-1 + R * 0.126598873723971633e-1 + pow(R - 0.675e1, 2) * (-0.252569841981467313e-1) + pow(R - 0.675e1, 3) * 0.225657410102323083e-1 : (R < 0.725e1 ? -0.305937481848964909e-1 + R * 0.426247171274235590e-2 + pow(R - 0.70e1, 2) * (-0.833267844047249837e-2) + pow(R - 0.70e1, 3) * 0.680954696601229932e-2 : (R < 0.75e1 ? -0.100589099762922428e-1 + R * 0.137292254863341273e-2 + pow(R - 0.725e1, 2) * (-0.322551821596327387e-2) + pow(R - 0.725e1, 3) * 0.273051217531849067e-2 : (R < 0.775e1 ? -0.196193004869994660e-2 + R * 0.272134473523992851e-3 + pow(R - 0.75e1, 2) * (-0.117763408447440565e-2) + pow(R - 0.75e1, 3) * 0.130855014839373687e-2 : (R < 0.80e1 ? 0.646759060042728390e-3 + R * (-0.713294158893843129e-4) + pow(R - 0.775e1, 2) * (-0.196221473179102973e-3) + pow(R - 0.775e1, 3) * 0.312331036546560810e-3 : (R < 0.825e1 ? 0.955764728311645048e-3 + R * (-0.110878083126455634e-3) + pow(R - 0.80e1, 2) * 0.380268042308176275e-4 + pow(R - 0.80e1, 3) * 0.692354801400195234e-4 : (R < 0.85e1 ? 0.695264007159543591e-3 + R * (-0.788830284847931613e-4) + pow(R - 0.825e1, 2) * 0.899534143358322701e-4 + pow(R - 0.825e1, 3) * 0.121154293453361545e-3 : (R < 0.875e1 ? 0.127387465272159794e-3 + R * (-0.111898912943717401e-4) + pow(R - 0.85e1, 2) * 0.180819134425853429e-3 + pow(R - 0.85e1, 3) * (-0.418938266753465880e-3) : (R < 0.90e1 ? 0.283796315350488932e-4 + R * 0.668750902280126758e-6 + pow(R - 0.875e1, 2) * (-0.133384565639245954e-3) + pow(R - 0.875e1, 3) * 0.350417531960501801e-3 : (R < 0.925e1 ? 0.344193303127388956e-4 + R * (-0.320244674748766089e-6) + pow(R - 0.90e1, 2) * 0.129428583331130397e-3 + pow(R - 0.90e1, 3) * (-0.318748334048541315e-3) : (R < 0.95e1 ? -0.824988198961314109e-5 + R * 0.462873435671493387e-5 + pow(R - 0.925e1, 2) * (-0.109632667205275604e-3) + pow(R - 0.925e1, 3) * 0.145627377353663433e-3 : (R < 0.100e2 ? 0.248529907395054215e-3 + R * (-0.228824659921109691e-4) + pow(R - 0.95e1, 2) * (-0.412134190028020092e-6) + pow(R - 0.95e1, 3) * 0.227015122849991502e-5 : (R < 0.105e2 ? 0.235805850437640567e-3 + R * (-0.215919867607640554e-4) + pow(R - 0.100e2, 2) * 0.299309265272185271e-5 + pow(R - 0.100e2, 3) * 0.993354141761252304e-5 : (R < 0.110e2 ? 0.128141704760744492e-3 + R * (-0.111487380448328079e-4) + pow(R - 0.105e2, 2) * 0.178934047791406390e-4 + pow(R - 0.105e2, 3) * (-0.138003920669500422e-4) : (R < 0.120e2 ? 0.479157889289517263e-4 + R * (-0.360562731590470226e-5) + pow(R - 0.110e2, 2) * (-0.280718332128442429e-5) + pow(R - 0.110e2, 3) * 0.169119721418912621e-5 : (R < 0.140e2 ? 0.532891028218740730e-4 + R * (-0.414640231590617263e-5) + pow(R - 0.120e2, 2) * 0.226640832128295477e-5 + pow(R - 0.120e2, 3) * (-0.499206280289934230e-6) : (R < 0.160e2 ? 0.153088749615499050e-4 + R * (-0.107124439425356472e-5) + pow(R - 0.140e2, 2) * (-0.728829360456650712e-6) + pow(R - 0.140e2, 3) * 0.316735960916716520e-6 : (R < 0.180e2 ? 0.759219780273097439e-6 + R * (-0.185730305079568585e-6) + pow(R - 0.160e2, 2) * 0.117158640504364851e-5 + pow(R - 0.160e2, 3) * (-0.302019618126932061e-6) : (R < 0.200e2 ? -0.160885751918931275e-4 + R * 0.876379897571840426e-6 + pow(R - 0.180e2, 2) * (-0.640531303717944061e-6) + pow(R - 0.180e2, 3) * 0.121630922053511909e-6 : (R < 0.250e2 ? 0.437342997425585479e-5 + R * (-0.226174252657792749e-6) + pow(R - 0.200e2, 2) * 0.892542286031274605e-7 + pow(R - 0.200e2, 3) * (-0.785517996071378241e-8) : -0.196220653019870483e-5 + R * 0.772295363199481885e-7 + pow(R - 0.250e2, 2) * (-0.285734708075792756e-7) + pow(R - 0.250e2, 3) * 0.280700062231792737e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4801762525e2 * (R - 0.300e2) * (R - 0.250e2) - 0.5121888256e3 * R - 0.3009044474e5 + 0.2560944128e2 * R * R + 0.75000e3 * (-0.939000490e-1 * R + 0.3884030629e1) * R) * pow(R, -6));
}

static double radcoeff_7_4_7_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.709575976600002600e-1 + R * (-0.555111512312578270e-16) + pow(R - 0.475e1, 2) * (-0.237939709809950983e1) + pow(R - 0.475e1, 3) * 0.496643166215803955e1 : (R < 0.525e1 ? 0.129230883572451272e1 + R * (-0.258492612395122556e0) + pow(R - 0.50e1, 2) * 0.134542664851902005e1 + pow(R - 0.50e1, 3) * (-0.180699377713011922e1) : (R < 0.55e1 ? -0.404821729510572825e0 + R * 0.754093786524900611e-1 + pow(R - 0.525e1, 2) * (-0.981868432856954944e-2) + pow(R - 0.525e1, 3) * 0.540159057544371615e-1 : (R < 0.575e1 ? -0.433293919654392456e0 + R * 0.806280188171622642e-1 + pow(R - 0.55e1, 2) * 0.306932449872583252e-1 + pow(R - 0.55e1, 3) * (-0.231308029823629552e0) : (R < 0.60e1 ? -0.273853889493450076e0 + R * 0.526043857188608771e-1 + pow(R - 0.575e1, 2) * (-0.142787777380463859e0) + pow(R - 0.575e1, 3) * 0.594083178008142365e-2 : (R < 0.625e1 ? 0.138994596305634766e0 + R * (-0.176755970126057926e-1) + pow(R - 0.60e1, 2) * (-0.138332153545402792e0) + pow(R - 0.60e1, 3) * 0.186371163503303877e0 : (R < 0.65e1 ? 0.347145158737735660e0 + R * (-0.518970806284377098e-1) + pow(R - 0.625e1, 2) * 0.144621908207511417e-2 + pow(R - 0.625e1, 3) * 0.705082159667029390e-1 : (R < 0.675e1 ? 0.257705138078681784e0 + R * (-0.379536805936433533e-1) + pow(R - 0.65e1, 2) * 0.543273810571023238e-1 + pow(R - 0.65e1, 3) * (-0.329809234981156205e-1) : (R < 0.70e1 ? 0.118971842699674868e0 + R * (-0.169739132209888698e-1) + pow(R - 0.675e1, 2) * 0.295916884335156068e-1 + pow(R - 0.675e1, 3) * (-0.238557299102404863e-1) : (R < 0.725e1 ? 0.481883134368081209e-1 + R * (-0.665101836240116016e-2) + pow(R - 0.70e1, 2) * 0.116998910008352403e-1 + pow(R - 0.70e1, 3) * (-0.924848294092240480e-2) : (R < 0.75e1 ? 0.189351006979970628e-1 + R * (-0.253516341340649133e-2) + pow(R - 0.725e1, 2) * 0.476352879514343585e-2 + pow(R - 0.725e1, 3) * (-0.399023186846988141e-2) : (R < 0.775e1 ? 0.691850445799657189e-2 + R * (-0.901567491172876171e-3) + pow(R - 0.75e1, 2) * 0.177085489379102479e-2 + pow(R - 0.75e1, 3) * (-0.153023409719807912e-2) : (R < 0.80e1 ? 0.236683169016052748e-2 + R * (-0.303058937502003530e-3) + pow(R - 0.775e1, 2) * 0.623179320892465341e-3 + pow(R - 0.775e1, 3) * (-0.515785408657804803e-3) : (R < 0.825e1 ? 0.678682080122874161e-3 + R * (-0.881790411791092733e-4) + pow(R - 0.80e1, 2) * 0.236340264399111685e-3 + pow(R - 0.80e1, 3) * (-0.226975911050698371e-3) : (R < 0.85e1 ? 0.661066197978648398e-4 + R * (-0.125668923015593736e-4) + pow(R - 0.825e1, 2) * 0.661083311110879002e-4 + pow(R - 0.825e1, 3) * (-0.608483135394016265e-4) : (R < 0.875e1 ? -0.114695771925447552e-3 + R * 0.907821446534677108e-5 + pow(R - 0.85e1, 2) * 0.204720959565366820e-4 + pow(R - 0.85e1, 3) * (-0.241073615116950689e-4) : (R < 0.90e1 ? -0.163807223281507513e-3 + R * 0.147941321601722875e-4 + pow(R - 0.875e1, 2) * 0.239157482276537944e-5 + pow(R - 0.875e1, 3) * (-0.217808266538181296e-4) : (R < 0.925e1 ? -0.138005016995676694e-3 + R * 0.119060145739640762e-4 + pow(R - 0.90e1, 2) * (-0.139440451675982186e-4) + pow(R - 0.90e1, 3) * 0.552248556469676520e-4 : (R < 0.95e1 ? -0.169303031561735472e-3 + R * 0.152886524239714017e-4 + pow(R - 0.925e1, 2) * 0.274745965676275170e-4 + pow(R - 0.925e1, 3) * (-0.599312647340524891e-4) : (R < 0.100e2 ? -0.192274063676428045e-3 + R * 0.177888385701503202e-4 + pow(R - 0.95e1, 2) * (-0.174738519829118498e-4) + pow(R - 0.95e1, 3) * 0.285643674452224148e-4 : (R < 0.105e2 ? -0.232566216751552818e-3 + R * 0.217382621711552831e-4 + pow(R - 0.100e2, 2) * 0.253726991849217724e-4 + pow(R - 0.100e2, 3) * (-0.414609986544646784e-4) : (R < 0.110e2 ? -0.171313643820899728e-3 + R * 0.160152123652285467e-4 + pow(R - 0.105e2, 2) * (-0.368187987967752385e-4) + pow(R - 0.105e2, 3) * 0.247346302926362942e-4 : (R < 0.120e2 ? 0.235195721167641840e-4 + R * (-0.225261371206947112e-5) + pow(R - 0.110e2, 2) * 0.283146642179206217e-6 + pow(R - 0.110e2, 3) * 0.422993964890264805e-6 : (R < 0.140e2 ? 0.220241057548317111e-5 + R * (-0.417338533040264269e-6) + pow(R - 0.120e2, 2) * 0.155212853685000063e-5 + pow(R - 0.120e2, 3) * (-0.406392620664934207e-6) : (R < 0.160e2 ? -0.134854540346273836e-4 + R * 0.914464166380527350e-6 + pow(R - 0.140e2, 2) * (-0.886227187139604611e-6) + pow(R - 0.140e2, 3) * 0.208490901937170430e-6 : (R < 0.180e2 ? 0.132585123730953243e-5 + R * (-0.128553758931845770e-6) + pow(R - 0.160e2, 2) * 0.364718224483418024e-6 + pow(R - 0.160e2, 3) * (-0.883148016837475735e-7) : (R < 0.200e2 ? -0.510550927734339749e-5 + R * 0.270541518796855443e-6 + pow(R - 0.180e2, 2) * (-0.165170585619067391e-6) + pow(R - 0.180e2, 3) * 0.303240178228198317e-7 : (R < 0.250e2 ? 0.412283094811521710e-6 + R * (-0.262526098055760856e-7) + pow(R - 0.200e2, 2) * 0.167735213178516294e-7 + pow(R - 0.200e2, 3) * (-0.159164898174728254e-8) : -0.576373483647350489e-6 + R * 0.221089297418940200e-7 + pow(R - 0.250e2, 2) * (-0.710121340835760830e-8) + pow(R - 0.250e2, 3) * 0.672284190395760770e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3608611242e2 * (R - 0.300e2) * (R - 0.250e2) - 0.3849163032e3 * R - 0.2261467226e5 + 0.1924581516e2 * R * R + 0.75000e3 * (-0.705695880e-1 * R + 0.2919036579e1) * R) * pow(R, -6));
}

static double radcoeff_7_4_8_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.430929918200000026e-1 + pow(R - 0.475e1, 2) * 0.576351002283520986e0 + pow(R - 0.475e1, 3) * (-0.109009224017408402e1) : (R < 0.525e1 ? -0.443019775975598662e0 + R * 0.837832061091197400e-1 + pow(R - 0.50e1, 2) * (-0.241218177847042053e0) + pow(R - 0.50e1, 3) * 0.343593298442252337e0 : (R < 0.55e1 ? -0.157754203108485425e0 + R * 0.275978606435210334e-1 + pow(R - 0.525e1, 2) * 0.164767959846472412e-1 + pow(R - 0.525e1, 3) * (-0.688103208909254804e-1) : (R < 0.575e1 ? -0.132150110162378709e0 + R * 0.229343234687961264e-1 + pow(R - 0.55e1, 2) * (-0.351309446835468761e-1) + pow(R - 0.55e1, 3) * 0.345827616974494836e-1 : (R < 0.60e1 ? -0.700885125434431711e-1 + R * 0.118531189452944635e-1 + pow(R - 0.575e1, 2) * (-0.919387341045976164e-2) + pow(R - 0.575e1, 3) * (-0.225930477887238690e-2) : (R < 0.625e1 ? -0.405750931608560711e-1 + R * 0.683256259402601190e-2 + pow(R - 0.60e1, 2) * (-0.108883519946140518e-1) + pow(R - 0.60e1, 3) * 0.328169415404002069e-2 : (R < 0.65e1 ? -0.110239740432593099e-1 + R * 0.200370425060148946e-2 + pow(R - 0.625e1, 2) * (-0.842708137908403619e-2) + pow(R - 0.625e1, 3) * 0.794496713871230970e-2 : (R < 0.675e1 ? 0.627855926380780759e-2 + R * (-0.720155100431970350e-3) + pow(R - 0.65e1, 2) * (-0.246835602504980435e-2) + pow(R - 0.65e1, 3) * 0.303219959511074168e-2 : (R < 0.70e1 ? 0.106647391028968554e-1 + R * (-0.138579568887360811e-2) + pow(R - 0.675e1, 2) * (-0.194206328716747958e-3) + pow(R - 0.675e1, 3) * 0.930791312844723908e-3 : (R < 0.725e1 ? 0.101252033740151758e-1 + R * (-0.130837548207359661e-2) + pow(R - 0.70e1, 2) * 0.503887155916794946e-3 + pow(R - 0.70e1, 3) * (-0.390296400896341031e-4) : (R < 0.75e1 ? 0.838255145993203887e-2 + R * (-0.106374996163200548e-2) + pow(R - 0.725e1, 2) * 0.474614925849569367e-3 + pow(R - 0.725e1, 3) * 0.183348559513811131e-3 : (R < 0.775e1 ? 0.637743983028785967e-2 + R * (-0.792064643798381235e-3) + pow(R - 0.75e1, 2) * 0.612126345484927722e-3 + pow(R - 0.75e1, 3) * (-0.223845929165610686e-3) : (R < 0.80e1 ? 0.436548666130213807e-2 + R * (-0.527972582774469449e-3) + pow(R - 0.775e1, 2) * 0.444241898610719694e-3 + pow(R - 0.775e1, 3) * (-0.111939710051368234e-3) : (R < 0.825e1 ? 0.278244469262992847e-2 + R * (-0.326840329103741066e-3) + pow(R - 0.80e1, 2) * 0.360287116072193511e-3 + pow(R - 0.80e1, 3) * (-0.192341886628916424e-3) : (R < 0.85e1 ? 0.161330179748717106e-2 + R * (-0.182760874810566183e-3) + pow(R - 0.825e1, 2) * 0.216030701100506186e-3 + pow(R - 0.825e1, 3) * (-0.717160157529655036e-4) : (R < 0.875e1 ? 0.821850073988950004e-3 + R * (-0.881922772139941222e-4) + pow(R - 0.85e1, 2) * 0.162243689285782055e-3 + pow(R - 0.85e1, 3) * (-0.139712831799222145e-3) : (R < 0.90e1 ? 0.349207515617751003e-3 + R * (-0.332665885334572554e-4) + pow(R - 0.875e1, 2) * 0.574590654363654461e-4 + pow(R - 0.875e1, 3) * (-0.138332891290145654e-3) : (R < 0.925e1 ? 0.325508215369591587e-3 + R * (-0.304744729321768425e-4) + pow(R - 0.90e1, 2) * (-0.462906030312437947e-4) + pow(R - 0.90e1, 3) * 0.135224587039804657e-3 : (R < 0.95e1 ? 0.304291832724977126e-3 + R * (-0.282651643778353666e-4) + pow(R - 0.925e1, 2) * 0.551278372486097050e-4 + pow(R - 0.925e1, 3) * (-0.157839466469072954e-3) : (R < 0.100e2 ? 0.324565403606576132e-3 + R * (-0.302961457164816964e-4) + pow(R - 0.95e1, 2) * (-0.632517626031950104e-4) + pow(R - 0.95e1, 3) * 0.793623281523168195e-4 : (R < 0.105e2 ? 0.355972918864390906e-3 + R * (-0.340261622054390922e-4) + pow(R - 0.100e2, 2) * 0.557917296252802189e-4 + pow(R - 0.100e2, 3) * (-0.446412824288040528e-4) : (R < 0.110e2 ? 0.130077629028500140e-3 + R * (-0.117153944017619180e-4) + pow(R - 0.105e2, 2) * (-0.111701940179258655e-4) + pow(R - 0.105e2, 3) * 0.173737303468993973e-4 : (R < 0.120e2 ? 0.108995655653045578e-3 + R * (-0.985529065951323548e-5) + pow(R - 0.110e2, 2) * 0.148904015024232322e-4 + pow(R - 0.110e2, 3) * (-0.590608158380999546e-5) : (R < 0.140e2 ? -0.267707234693388798e-4 + R * 0.220726759390324004e-5 + pow(R - 0.120e2, 2) * (-0.282784324900675586e-5) + pow(R - 0.120e2, 3) * 0.697721335277567829e-6 : (R < 0.160e2 ? 0.864171183410155008e-5 + R * (-0.731449378792967862e-6) + pow(R - 0.140e2, 2) * 0.135848476265865133e-5 + pow(R - 0.140e2, 3) * (-0.325753653381083648e-6) : (R < 0.180e2 ? -0.129287017035981343e-4 + R * 0.793445831268633448e-6 + pow(R - 0.160e2, 2) * (-0.596037157627850671e-6) + pow(R - 0.160e2, 3) * 0.120874301334266949e-6 : (R < 0.200e2 ? 0.245997033756818253e-5 + R * (-0.140211183231565691e-6) + pow(R - 0.180e2, 2) * 0.129208650377751049e-6 + pow(R - 0.180e2, 3) * (-0.253895157309841051e-7) : (R < 0.250e2 ? -0.146951944155258521e-5 + R * 0.719492295076292687e-7 + pow(R - 0.200e2, 2) * (-0.231284440081535785e-7) + pow(R - 0.200e2, 3) * 0.194076321892554460e-8 : 0.338044827162266275e-6 + R * (-0.137779691544906497e-7) + pow(R - 0.250e2, 2) * 0.598300427572959381e-8 + pow(R - 0.250e2, 3) * (-0.608546067366292706e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.9771152448e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1042243052e3 * R - 0.6123913114e4 + 0.5211215260e1 * R * R + 0.75000e3 * (-0.1910918965e-1 * R + 0.790444668e0) * R) * pow(R, -6));
}

static double radcoeff_7_4_9_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.217095554100000004e0 + pow(R - 0.475e1, 2) * (-0.128953733879407295e1) + pow(R - 0.475e1, 3) * 0.250622217437629136e1 : (R < 0.525e1 ? 0.104991925040740908e1 + R * (-0.174852011701481791e0) + pow(R - 0.50e1, 2) * 0.590129291988145788e0 + pow(R - 0.50e1, 3) * (-0.985052852728874662e0) : (R < 0.55e1 ? 0.491982890768882575e0 + R * (-0.644847755940728684e-1) + pow(R - 0.525e1, 2) * (-0.148660347558510153e0) + pow(R - 0.525e1, 3) * 0.179809902139206473e0 : (R < 0.575e1 ? 0.708888142972247004e0 + R * (-0.105100592722226729e0) + pow(R - 0.55e1, 2) * (-0.138029209541052859e-1) + pow(R - 0.55e1, 3) * (-0.868462502279511717e-1) : (R < 0.60e1 ? 0.839982999022866439e0 + R * (-0.128285725117020244e0) + pow(R - 0.575e1, 2) * (-0.789376086250686698e-1) + pow(R - 0.575e1, 3) * 0.984615122125985232e-1 : (R < 0.625e1 ? 0.962631484248153924e0 + R * (-0.149292995889692331e0) + pow(R - 0.60e1, 2) * (-0.509147446561978006e-2) + pow(R - 0.60e1, 3) * 0.177654916897556081e0 : (R < 0.65e1 ? 0.772810627136315320e0 + R * (-0.118528436204210441e0) + pow(R - 0.625e1, 2) * 0.128149713207547283e0 + pow(R - 0.625e1, 3) * (-0.206690370828219172e-1) : (R < 0.675e1 ? 0.389200851527528480e0 + R * (-0.583290240534659193e-1) + pow(R - 0.65e1, 2) * 0.112647935395430845e0 + pow(R - 0.65e1, 3) * (-0.900222753822685628e-1) : (R < 0.70e1 ? 0.128582409757999533e0 + R * (-0.188842329899258574e-1) + pow(R - 0.675e1, 2) * 0.451312288587294164e-1 + pow(R - 0.675e1, 3) * (-0.416189164281039262e-1) : (R < 0.725e1 ? 0.274183427988144504e-1 + R * (-0.412216539083063577e-2) + pow(R - 0.70e1, 2) * 0.139170415376514717e-1 + pow(R - 0.70e1, 3) * (-0.129349536893157008e-1) : (R < 0.75e1 ? -0.477977365905094161e-2 + R * 0.411051561248405774e-3 + pow(R - 0.725e1, 2) * 0.421582627066469616e-2 + pow(R - 0.725e1, 3) * (-0.509788692663327471e-2) : (R < 0.775e1 ? -0.132363840247776109e-1 + R * 0.156311089783701495e-2 + pow(R - 0.75e1, 2) * 0.392411075689740073e-3 + pow(R - 0.75e1, 3) * (-0.143605822015119657e-2) : (R < 0.80e1 ? -0.126681175593774016e-1 + R * 0.149005551940353570e-2 + pow(R - 0.775e1, 2) * (-0.684632589423657357e-3) + pow(R - 0.775e1, 3) * (-0.109662547961939083e-3) : (R < 0.825e1 ? -0.980959639389074670e-2 + R * 0.112717749694884323e-2 + pow(R - 0.80e1, 2) * (-0.766879500395111673e-3) + pow(R - 0.80e1, 3) * 0.112449007198954100e-3 : (R < 0.85e1 ? -0.686633596580900341e-2 + R * 0.764821935601091340e-3 + pow(R - 0.825e1, 2) * (-0.682542744995896095e-3) + pow(R - 0.825e1, 3) * 0.491045008766122009e-3 : (R < 0.875e1 ? -0.478311862559772580e-2 + R * 0.515621502246791210e-3 + pow(R - 0.85e1, 2) * (-0.314258988421304588e-3) + pow(R - 0.85e1, 3) * (-0.681083830634407282e-4) : (R < 0.90e1 ? -0.331720061555275825e-2 + R * 0.345721686211743792e-3 + pow(R - 0.875e1, 2) * (-0.365340275718885137e-3) + pow(R - 0.875e1, 3) * 0.453358315487640304e-3 : (R < 0.925e1 ? -0.245396157575610398e-2 + R * 0.248056232506233747e-3 + pow(R - 0.90e1, 2) * (-0.253215391031548959e-4) + pow(R - 0.90e1, 3) * (-0.255433262887120390e-3) : (R < 0.95e1 ? -0.189940613301072155e-2 + R * 0.187501726163321226e-3 + pow(R - 0.925e1, 2) * (-0.216896486268495202e-3) + pow(R - 0.925e1, 3) * 0.308847401660841095e-3 : (R < 0.100e2 ? -0.142801254718457260e-2 + R * 0.136962370840481337e-3 + pow(R - 0.95e1, 2) * 0.147390649771356281e-4 + pow(R - 0.95e1, 3) * (-0.699438955561966014e-4) : (R < 0.105e2 ? -0.105588220098469521e-2 + R * 0.992435141504695122e-4 + pow(R - 0.100e2, 2) * (-0.901767783571592689e-4) + pow(R - 0.100e2, 3) * 0.396089473124404368e-4 : (R < 0.110e2 ? -0.438539564495226059e-3 + R * 0.387734462776405777e-4 + pow(R - 0.105e2, 2) * (-0.307633573884986137e-4) + pow(R - 0.105e2, 3) * 0.178158979064349224e-4 : (R < 0.120e2 ? -0.252587643058649705e-3 + R * 0.213720123189681566e-4 + pow(R - 0.110e2, 2) * (-0.403951052884623007e-5) + pow(R - 0.110e2, 3) * (-0.952465070121927549e-6) : (R < 0.140e2 ? -0.126342623440919025e-3 + R * 0.104355960509099170e-4 + pow(R - 0.120e2, 2) * (-0.689690573921201293e-5) + pow(R - 0.120e2, 3) * 0.120498575425352723e-5 : (R < 0.160e2 ? 0.394987543175412978e-4 + R * (-0.269219785489580709e-5) + pow(R - 0.140e2, 2) * 0.333008786309150594e-6 + pow(R - 0.140e2, 3) * 0.101709808819376561e-6 : (R < 0.180e2 ? 0.803622316226983313e-6 + R * (-0.139645003826686463e-6) + pow(R - 0.160e2, 2) * 0.943267639225409933e-6 + pow(R - 0.160e2, 3) * (-0.248537377656033359e-6) : (R < 0.200e2 ? -0.116428025987459574e-4 + R * 0.650977021202553176e-6 + pow(R - 0.180e2, 2) * (-0.547956626710790220e-6) + pow(R - 0.180e2, 3) * 0.106357632742256818e-6 : (R < 0.250e2 ? 0.532693023507051578e-5 + R * (-0.264557892733525779e-6) + pow(R - 0.200e2, 2) * 0.901891697427507031e-7 + pow(R - 0.200e2, 3) * (-0.768167602000910678e-8) : -0.152269992203245235e-5 + R * 0.612081031932980977e-7 + pow(R - 0.250e2, 2) * (-0.250359705573859119e-7) + pow(R - 0.250e2, 3) * 0.251559991174525771e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1144716173e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1221005356e3 * R + 0.7174090824e4 - 0.6105026780e1 * R * R + 0.75000e3 * (0.2238640174e-1 * R - 0.926000756e0) * R) * pow(R, -6));
}

static double radcoeff_7_4_9_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.194931405699999727e0 + R * (-0.555111512312578270e-16) + pow(R - 0.475e1, 2) * 0.272499200145651876e1 + pow(R - 0.475e1, 3) * (-0.549872929862607407e1) : (R < 0.525e1 ? -0.176795833707935146e1 + R * 0.331484257235870272e0 + pow(R - 0.50e1, 2) * (-0.139905497251303723e1) + pow(R - 0.50e1, 3) * 0.198042991379822464e1 : (R < 0.55e1 ? -0.101421449006723563e0 + R * 0.328737981651877446e-2 + pow(R - 0.525e1, 2) * 0.862674628356312201e-1 + pow(R - 0.525e1, 3) * (-0.171496857686825238e0) : (R < 0.575e1 ? -0.159088759289300580e0 + R * 0.142654504180546506e-1 + pow(R - 0.55e1, 2) * (-0.423551804294877154e-1) + pow(R - 0.55e1, 3) * 0.213275466389076407e0 : (R < 0.60e1 ? -0.266569997369760059e0 + R * 0.330770101512626175e-1 + pow(R - 0.575e1, 2) * 0.117601419362319617e0 + pow(R - 0.575e1, 3) * (-0.363262571494804704e-1) : (R < 0.625e1 ? -0.571724725221369079e0 + R * 0.850665466168948475e-1 + pow(R - 0.60e1, 2) * 0.903567265002092612e-1 + pow(R - 0.60e1, 3) * (-0.173806736671154566e0) : (R < 0.65e1 ? -0.647478160852237417e0 + R * 0.976561467411579953e-1 + pow(R - 0.625e1, 2) * (-0.399983260031566562e-1) + pow(R - 0.625e1, 3) * (-0.678159667259013998e-1) : (R < 0.675e1 ? -0.438392411750075484e0 + R * 0.649414899784731547e-1 + pow(R - 0.65e1, 2) * (-0.908603010475827061e-1) + pow(R - 0.65e1, 3) * 0.503442080547602672e-1 : (R < 0.70e1 ? -0.200347924597408106e0 + R * 0.289508784649493492e-1 + pow(R - 0.675e1, 2) * (-0.531021450065125022e-1) + pow(R - 0.675e1, 3) * 0.410010272428604147e-1 : (R < 0.725e1 ? -0.709825083433059806e-1 + R * 0.100874985697294271e-1 + pow(R - 0.70e1, 2) * (-0.223513745743671895e-1) + pow(R - 0.70e1, 3) * 0.186876756137979230e-1 : (R < 0.75e1 ? -0.164673005279638400e-1 + R * 0.241575046013294339e-2 + pow(R - 0.725e1, 2) * (-0.833561786401874547e-2) + pow(R - 0.725e1, 3) * 0.782759356594788652e-2 : (R < 0.775e1 ? 0.338504304295900388e-2 + R * (-0.284384678261200507e-3) + pow(R - 0.75e1, 2) * (-0.246492268955782971e-2) + pow(R - 0.75e1, 3) * 0.297503460241052608e-2 : (R < 0.80e1 ? 0.850594855593309572e-2 + R * (-0.959027035088141477e-3) + pow(R - 0.775e1, 2) * (-0.233646737749934960e-3) + pow(R - 0.775e1, 3) * 0.586022680410003141e-3 : (R < 0.825e1 ? 0.855605516958986810e-2 + R * (-0.965971151386233557e-3) + pow(R - 0.80e1, 2) * 0.205870272557567477e-3 + pow(R - 0.80e1, 3) * 0.416818618349466309e-3 : (R < 0.85e1 ? 0.708145367797712987e-2 + R * (-0.784882524166924801e-3) + pow(R - 0.825e1, 2) * 0.518484236319667223e-3 + pow(R - 0.825e1, 3) * (-0.312050728207872172e-3) : (R < 0.875e1 ? 0.540275599384157108e-2 + R * (-0.584149917546067181e-3) + pow(R - 0.85e1, 2) * 0.284446190163763094e-3 + pow(R - 0.85e1, 3) * 0.368113472820225264e-4 : (R < 0.90e1 ? 0.411626335942705604e-2 + R * (-0.435024694848806424e-3) + pow(R - 0.875e1, 2) * 0.312054700625279992e-3 + pow(R - 0.875e1, 3) * (-0.143645438520216881e-3) : (R < 0.925e1 ? 0.297167784292836409e-2 + R * (-0.305930864258707128e-3) + pow(R - 0.90e1, 2) * 0.204320621735117324e-3 + pow(R - 0.90e1, 3) * (-0.607965308011553814e-4) : (R < 0.95e1 ? 0.214395904357637728e-2 + R * (-0.215169902916365128e-3) + pow(R - 0.925e1, 2) * 0.158723223634250785e-3 + pow(R - 0.925e1, 3) * (-0.933746782751608946e-4) : (R < 0.100e2 ? 0.156480859912040758e-2 + R * (-0.153316043275832374e-3) + pow(R - 0.95e1, 2) * 0.886922149278801102e-4 + pow(R - 0.95e1, 3) * (-0.221793546724306448e-4) : (R < 0.105e2 ? 0.863632244282752583e-3 + R * (-0.812583443522752510e-4) + pow(R - 0.100e2, 2) * 0.554231829192341430e-4 + pow(R - 0.100e2, 3) * (-0.147426461093672535e-4) : (R < 0.110e2 ? 0.409800126708198878e-3 + R * (-0.368921460150665591e-4) + pow(R - 0.105e2, 2) * 0.333092137551832610e-4 + pow(R - 0.105e2, 3) * (-0.150490105701002737e-4) : (R < 0.120e2 ? 0.173999289722043569e-3 + R * (-0.148696901874585051e-4) + pow(R - 0.110e2, 2) * 0.107356979000328505e-4 + pow(R - 0.110e2, 3) * (-0.337933680457434517e-5) : (R < 0.140e2 ? 0.453550261813900793e-4 + R * (-0.353630480111583967e-5) + pow(R - 0.120e2, 2) * 0.597687486309814622e-6 + pow(R - 0.120e2, 3) * (-0.435781625947289429e-9) : (R < 0.160e2 ? 0.143450019534312800e-4 + R * (-0.115078423538794866e-5) + pow(R - 0.140e2, 2) * 0.595072796554130885e-6 + pow(R - 0.140e2, 3) * (-0.443685021800782701e-7) : (R < 0.180e2 ? -0.131955614386821677e-4 + R * 0.697084924667635512e-6 + pow(R - 0.160e2, 2) * 0.328861783473661252e-6 + pow(R - 0.160e2, 3) * (-0.120383739278739466e-6) : (R < 0.200e2 ? -0.105183449450133184e-4 + R * 0.567927187217406508e-6 + pow(R - 0.180e2, 2) * (-0.393440652198775701e-6) + pow(R - 0.180e2, 3) * 0.740190970200362107e-7 : (R < 0.250e2 ? 0.221071411344523325e-5 + R * (-0.117606257337261660e-6) + pow(R - 0.200e2, 2) * 0.506739299214415903e-7 + pow(R - 0.200e2, 3) * (-0.453649584599785051e-8) : -0.125205238838288549e-5 + R * 0.488958534273154224e-7 + pow(R - 0.250e2, 2) * (-0.173735077685261673e-7) + pow(R - 0.250e2, 3) * 0.168990413581261669e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4525153066e2 * (R - 0.300e2) * (R - 0.250e2) - 0.4826823440e3 * R - 0.2835763000e5 + 0.2413411720e2 * R * R + 0.75000e3 * (-0.884918436e-1 * R + 0.3660345537e1) * R) * pow(R, -6));
}

static double radcoeff_7_4_10_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.285927035000000072e-1 + R * 0.173472347597680709e-17 + pow(R - 0.475e1, 2) * (-0.145304691577313294e0) + pow(R - 0.475e1, 3) * 0.334663759589253096e0 : (R < 0.525e1 ? 0.170693288483584060e-1 + R * (-0.990289086567168117e-2) + pow(R - 0.50e1, 2) * 0.105693128114626569e0 + pow(R - 0.50e1, 3) * (-0.155953472047759362e0) : (R < 0.55e1 ? -0.102689385899105284e0 + R * 0.137023971826867215e-1 + pow(R - 0.525e1, 2) * (-0.112719759211929553e-1) + pow(R - 0.525e1, 3) * 0.396686617217842791e-1 : (R < 0.575e1 ? -0.112684435172086386e0 + R * 0.155042832949247970e-1 + pow(R - 0.55e1, 2) * 0.184795203701452575e-1 + pow(R - 0.55e1, 3) * (-0.281729930793778068e-1) : (R < 0.60e1 ? -0.134724281066281010e0 + R * 0.194616072776140868e-1 + pow(R - 0.575e1, 2) * (-0.265022443938809889e-2) + pow(R - 0.575e1, 3) * 0.294725427572700921e-2 : (R < 0.625e1 ? -0.130208856987713090e0 + R * 0.186891052346188496e-1 + pow(R - 0.60e1, 2) * (-0.439783732592841710e-3) + pow(R - 0.60e1, 3) * (-0.158144994353024825e-2) : (R < 0.65e1 ? -0.127033467809440692e0 + R * 0.181726915039105118e-1 + pow(R - 0.625e1, 2) * (-0.162587119024052785e-2) + pow(R - 0.625e1, 3) * (-0.946221475760605953e-2) : (R < 0.675e1 ? -0.110466776260304211e0 + R * 0.155855906417391096e-1 + pow(R - 0.65e1, 2) * (-0.872253225844507249e-2) + pow(R - 0.65e1, 3) * (-0.813845940454416272e-4) : (R < 0.70e1 ? -0.814716574116481074e-1 + R * 0.112090649011330531e-1 + pow(R - 0.675e1, 2) * (-0.878357070397915371e-2) + pow(R - 0.675e1, 3) * 0.287472324578775607e-2 : (R < 0.725e1 ? -0.550062898261007641e-1 + R * 0.735629015772868051e-2 + pow(R - 0.70e1, 2) * (-0.662752826963833655e-2) + pow(R - 0.70e1, 3) * 0.277951061889445978e-2 : (R < 0.75e1 ? -0.351306877596536185e-1 + R * 0.456368426395222307e-2 + pow(R - 0.725e1, 2) * (-0.454289530546749150e-2) + pow(R - 0.725e1, 3) * 0.218840605463439201e-2 : (R < 0.775e1 ? -0.214220134904681975e-1 + R * 0.270256274646242609e-2 + pow(R - 0.75e1, 2) * (-0.290159076449169728e-2) + pow(R - 0.75e1, 3) * 0.157062417056796954e-2 : (R < 0.80e1 ? -0.126174709460350597e-1 + R * 0.154625939619807209e-2 + pow(R - 0.775e1, 2) * (-0.172362263656572002e-2) + pow(R - 0.775e1, 3) * 0.765739317493726820e-3 : (R < 0.825e1 ? -0.696735111396228589e-2 + R * 0.828024199945285710e-3 + pow(R - 0.80e1, 2) * (-0.114931814844542487e-2) + pow(R - 0.80e1, 3) * 0.943047685857127194e-3 : (R < 0.85e1 ? -0.374228790487147328e-2 + R * 0.430186566820784690e-3 + pow(R - 0.825e1, 2) * (-0.442032384052579478e-3) + pow(R - 0.825e1, 3) * 0.727991422777623175e-4 : (R < 0.875e1 ? -0.200616344305839123e-2 + R * 0.222820213971575441e-3 + pow(R - 0.85e1, 2) * (-0.387433027344257733e-3) + pow(R - 0.85e1, 3) * 0.514689846791823976e-3 : (R < 0.90e1 ? -0.117172951367299351e-2 + R * 0.125608046572913556e-3 + pow(R - 0.875e1, 2) * (-0.141564225038974696e-5) + pow(R - 0.875e1, 3) * (-0.177902524325058108e-3) : (R < 0.925e1 ? -0.868016818330932523e-3 + R * 0.915435021367702888e-4 + pow(R - 0.90e1, 2) * (-0.134842535494183346e-3) + pow(R - 0.90e1, 3) * 0.179703092108408598e-3 : (R < 0.95e1 ? -0.561662439700048388e-3 + R * 0.578165641600052416e-4 + pow(R - 0.925e1, 2) * (-0.652164128768863377e-7) + pow(R - 0.925e1, 3) * (-0.304362396285763316e-4) : (R < 0.100e2 ? -0.507617752170482937e-3 + R * 0.520771610232087333e-4 + pow(R - 0.95e1, 2) * (-0.228923961343091358e-4) + pow(R - 0.95e1, 3) * (-0.837729078421668697e-5) : (R < 0.105e2 ? -0.222634370330370790e-3 + R * 0.229017968007370814e-4 + pow(R - 0.100e2, 2) * (-0.354583323106341680e-4) + pow(R - 0.100e2, 3) * 0.122285428023200107e-4 : (R < 0.110e2 ? 0.460423291356493083e-4 + R * (-0.338512840815707689e-5) + pow(R - 0.105e2, 2) * (-0.171155181071541520e-4) + pow(R - 0.105e2, 3) * 0.161326518389366047e-4 : (R < 0.120e2 ? 0.989563525961964952e-4 + R * (-0.840115763610877278e-5) + pow(R - 0.110e2, 2) * 0.708345965125075509e-5 + pow(R - 0.110e2, 3) * (-0.228021282914198183e-5) : (R < 0.140e2 ? 0.158442296373985126e-4 + R * (-0.107487682103320937e-5) + pow(R - 0.120e2, 2) * 0.242821163824808692e-6 + pow(R - 0.120e2, 3) * (-0.753729896541020120e-7) : (R < 0.160e2 ? 0.152772074631647806e-4 + R * (-0.100806804158319864e-5) + pow(R - 0.140e2, 2) * (-0.209416774099803380e-6) + pow(R - 0.140e2, 3) * 0.125470429195701343e-6 : (R < 0.180e2 ? 0.475565493674393639e-5 + R * (-0.340089987633996037e-6) + pow(R - 0.160e2, 2) * 0.543405801074404785e-6 + pow(R - 0.160e2, 3) * (-0.126137473728703353e-6) : (R < 0.200e2 ? -0.595934500074528611e-5 + R * 0.319883531919182552e-6 + pow(R - 0.180e2, 2) * (-0.213419041297815411e-6) + pow(R - 0.180e2, 3) * 0.398752132441120596e-7 : (R < 0.250e2 ? 0.100945266525468540e-5 + R * (-0.552900743427342710e-7) + pow(R - 0.200e2, 2) * 0.258322381668569962e-7 + pow(R - 0.200e2, 3) * (-0.234570103486202796e-8) : -0.697824111279589186e-6 + R * 0.271047297111835696e-7 + pow(R - 0.250e2, 2) * (-0.935327735607342907e-8) + pow(R - 0.250e2, 3) * 0.903000473167342921e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3083162291e2 * (R - 0.300e2) * (R - 0.250e2) - 0.3288693312e3 * R - 0.1932119010e5 + 0.1644346656e2 * R * R + 0.75000e3 * (-0.602929334e-1 * R + 0.2493938008e1) * R) * pow(R, -6));
}

static double radcoeff_7_4_11_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.353296927599999977e0 + pow(R - 0.475e1, 2) * (-0.304600237526619244e1) + pow(R - 0.475e1, 3) * 0.546867488346476982e1 : (R < 0.525e1 ? 0.273649305911725937e1 + R * (-0.497624646983451879e0) + pow(R - 0.50e1, 2) * 0.105550378733238515e1 + pow(R - 0.50e1, 3) * (-0.120892305679430967e1) : (R < 0.55e1 ? 0.120290881534751004e1 + R * (-0.196545826466192397e0) + pow(R - 0.525e1, 2) * 0.148811494736652922e0 + pow(R - 0.525e1, 3) * 0.659147325124668504e-1 : (R < 0.575e1 ? 0.736033273034781166e0 + R * (-0.109781066751778386e0) + pow(R - 0.55e1, 2) * 0.198247544121003066e0 + pow(R - 0.55e1, 3) * (-0.104232366055558023e0) : (R < 0.60e1 ? 0.289208944128490408e0 + R * (-0.302008633266939892e-1) + pow(R - 0.575e1, 2) * 0.120073269579334549e0 + pow(R - 0.575e1, 3) * (-0.150452212290234366e0) : (R < 0.625e1 ? 0.103401637748673975e0 + R * 0.162598165855433810e-2 + pow(R - 0.60e1, 2) * 0.723411036165876476e-2 + pow(R - 0.60e1, 3) * (-0.175485210383504509e0) : (R < 0.65e1 ? 0.284151949272021087e0 + R * (-0.276604401075233701e-1) + pow(R - 0.625e1, 2) * (-0.124379797425969607e0) + pow(R - 0.625e1, 3) * 0.627227575042522967e-1 : (R < 0.675e1 ? 0.605149235944995589e0 + R * (-0.780898217884608559e-1) + pow(R - 0.65e1, 2) * (-0.773377292977803776e-1) + pow(R - 0.65e1, 3) * 0.122055867406495100e0 : (R < 0.70e1 ? 0.708760629985774271e0 + R * (-0.938732112986332273e-1) + pow(R - 0.675e1, 2) * 0.142041712570909421e-1 + pow(R - 0.675e1, 3) * 0.403765895097678712e-1 : (R < 0.725e1 ? 0.607570401769043977e0 + R * (-0.792005151370062804e-1) + pow(R - 0.70e1, 2) * 0.444866133894168472e-1 + pow(R - 0.70e1, 3) * (-0.494822032556688218e-2) : (R < 0.75e1 ? 0.455736012631726917e0 + R * (-0.578849997533416455e-1) + pow(R - 0.725e1, 2) * 0.407754481452416856e-1 + pow(R - 0.725e1, 3) * (-0.123200941275004115e-1) : (R < 0.775e1 ? 0.322509178492203397e0 + R * (-0.398072933296271247e-1) + pow(R - 0.75e1, 2) * 0.315353775496163766e-1 + pow(R - 0.75e1, 3) * (-0.127832886044315450e-1) : (R < 0.80e1 ? 0.220656528953161346e0 + R * (-0.264364711681498513e-1) + pow(R - 0.775e1, 2) * 0.219479110962927174e-1 + pow(R - 0.775e1, 3) * (-0.962649865477323979e-2) : (R < 0.825e1 ? 0.148525962952187812e0 + R * (-0.172674841177734781e-1) + pow(R - 0.80e1, 2) * 0.147280371052127875e-1 + pow(R - 0.80e1, 3) * (-0.706157162447551730e-2) : (R < 0.85e1 ? 0.995063437622390051e-1 + R * (-0.112275102447562426e-1) + pow(R - 0.825e1, 2) * 0.943185838685614911e-2 + pow(R - 0.825e1, 3) * (-0.435846387132472236e-2) : (R < 0.875e1 ? 0.668886375642132186e-1 + R * (-0.732879302720155449e-2) + pow(R - 0.85e1, 2) * 0.616301048336260690e-2 + pow(R - 0.85e1, 3) * (-0.316616559422555491e-2) : (R < 0.90e1 ? 0.454556739453284911e-1 + R * (-0.484094383443754196e-2) + pow(R - 0.875e1, 2) * 0.378838628769344061e-2 + pow(R - 0.875e1, 3) * (-0.161758159177308744e-2) : (R < 0.925e1 ? 0.313491040174344801e-1 + R * (-0.325004723904827580e-2) + pow(R - 0.90e1, 2) * 0.257520009386362492e-2 + pow(R - 0.90e1, 3) * (-0.125885811868208918e-2) : (R < 0.95e1 ? 0.217634159806665319e-1 + R * (-0.219848308936935501e-2) + pow(R - 0.925e1, 2) * 0.163105650485205803e-2 + pow(R - 0.925e1, 3) * (-0.675493786298551218e-3) : (R < 0.100e2 ? 0.153105073306058909e-1 + R * (-0.150960992187430419e-2) + pow(R - 0.95e1, 2) * 0.112443616512814459e-2 + pow(R - 0.95e1, 3) * (-0.411160021159071986e-3) : (R < 0.105e2 ? 0.737955987665463598e-2 + R * (-0.693543772615463601e-3) + pow(R - 0.100e2, 2) * 0.507696133389536584e-3 + pow(R - 0.100e2, 3) * (-0.170142478717218452e-3) : (R < 0.110e2 ? 0.349427871947033007e-2 + R * (-0.313454498263840951e-3) + pow(R - 0.105e2, 2) * 0.252482415313708879e-3 + pow(R - 0.105e2, 3) * (-0.108771001572053922e-3) : (R < 0.120e2 ? 0.166385714265089753e-2 + R * (-0.142550334129172514e-3) + pow(R - 0.110e2, 2) * 0.893259129556280099e-4 + pow(R - 0.110e2, 3) * (-0.228469995064554874e-4) : (R < 0.140e2 ? 0.409006127397395862e-3 + R * (-0.324395067372829863e-4) + pow(R - 0.120e2, 2) * 0.207849144362615376e-4 + pow(R - 0.120e2, 3) * (-0.407776333256002147e-5) : (R < 0.160e2 ? -0.193672900786005640e-4 + R * 0.176699101704289725e-5 + pow(R - 0.140e2, 2) * (-0.368166555909859500e-5) + pow(R - 0.140e2, 3) * 0.873786577038573154e-6 : (R < 0.180e2 ? 0.407559132922176621e-4 + R * (-0.247423229488860406e-5) + pow(R - 0.160e2, 2) * 0.156105390313284435e-5 + pow(R - 0.160e2, 3) * (-0.295159688594271047e-6) : (R < 0.200e2 ? -0.400253689350736438e-5 + R * 0.228067054511520243e-6 + pow(R - 0.180e2, 2) * (-0.209904228432781960e-6) + pow(R - 0.180e2, 3) * 0.412395831385109040e-7 : (R < 0.250e2 ? 0.238260117924953337e-5 + R * (-0.116674861557476669e-6) + pow(R - 0.200e2, 2) * 0.375332703982834972e-7 + pow(R - 0.200e2, 3) * (-0.315011216135763344e-8) : -0.549688377988395529e-6 + R * 0.223994303235358237e-7 + pow(R - 0.250e2, 2) * (-0.971841202208099787e-8) + pow(R - 0.250e2, 3) * 0.988316403474766391e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1571326339e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1676088108e3 * R + 0.9846585908e4 - 0.8380440540e1 * R * R + 0.75000e3 * (0.3072745962e-1 * R - 0.1270988253e1) * R) * pow(R, -6));
}

static double radcoeff_7_4_11_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.218798742399999996e0 + pow(R - 0.475e1, 2) * 0.168041250433829603e1 + pow(R - 0.475e1, 3) * (-0.291219475975318431e1) : (R < 0.525e1 ? -0.163012467757712964e1 + R * 0.294169734715425901e0 + pow(R - 0.50e1, 2) * (-0.503733565476592426e0) + pow(R - 0.50e1, 3) * 0.644087261659554877e0 : (R < 0.55e1 ? -0.963266950776055397e0 + R * 0.163069313538296262e0 + pow(R - 0.525e1, 2) * (-0.206681192319262547e-1) + pow(R - 0.525e1, 3) * (-0.211623488805035231e0) : (R < 0.575e1 ? -0.692791274522639666e0 + R * 0.113055849771389022e0 + pow(R - 0.55e1, 2) * (-0.179385735835702692e0) + pow(R - 0.55e1, 3) * 0.860735767605864399e-1 : (R < 0.60e1 ? -0.279722067792848861e0 + R * 0.395017774961476317e-1 + pow(R - 0.575e1, 2) * (-0.114830553265262855e0) + pow(R - 0.575e1, 3) * 0.460299472026892698e-1 : (R < 0.625e1 ? 0.652820974587736691e-2 + R * (-0.928288403597956127e-2) + pow(R - 0.60e1, 2) * (-0.803080928632459029e-1) + pow(R - 0.60e1, 3) * 0.150260137148656547e0 : (R < 0.65e1 ? 0.787334605614337796e-1 + R * (-0.212631547522294032e-1) + pow(R - 0.625e1, 2) * 0.323870099982465284e-1 + pow(R - 0.625e1, 3) * 0.607875016426843578e-1 : (R < 0.675e1 ? -0.976350967218316962e-1 + R * 0.632800680489718423e-2 + pow(R - 0.65e1, 2) * 0.779776362302598003e-1 + pow(R - 0.65e1, 3) * (-0.532458089993941286e-1) : (R < 0.70e1 ? -0.289378755485324657e0 + R * 0.353332357326406887e-1 + pow(R - 0.675e1, 2) * 0.380432794807142038e-1 + pow(R - 0.675e1, 3) * (-0.523589658051077378e-1) : (R < 0.725e1 ? -0.352249494921780648e0 + R * 0.445375693845400933e-1 + pow(R - 0.70e1, 2) * (-0.122594487311659820e-2) + pow(R - 0.70e1, 3) * (-0.201352609001750962e-1) : (R < 0.75e1 ? -0.320825309476692411e0 + R * 0.401492355291989539e-1 + pow(R - 0.725e1, 2) * (-0.163273905482479199e-1) + pow(R - 0.725e1, 3) * (-0.400731027419158614e-2) : (R < 0.775e1 ? -0.255045390979980524e0 + R * 0.312341695786640741e-1 + pow(R - 0.75e1, 2) * (-0.193328732538916095e-1) + pow(R - 0.75e1, 3) * 0.440242583694121226e-2 : (R < 0.80e1 ? -0.187667298840121816e0 + R * 0.223931877961447492e-1 + pow(R - 0.775e1, 2) * (-0.160310538761857004e-1) + pow(R - 0.775e1, 3) * 0.527938113442681829e-2 : (R < 0.825e1 ? -0.132381605574055428e0 + R * 0.153675448207569298e-1 + pow(R - 0.80e1, 2) * (-0.120715180253655862e-1) + pow(R - 0.80e1, 3) * 0.517159176935146070e-2 : (R < 0.85e1 ? -0.912600634928271703e-1 + R * 0.103014592648275356e-1 + pow(R - 0.825e1, 2) * (-0.819282419835199067e-2) + pow(R - 0.825e1, 3) * 0.337826740416739347e-2 : (R < 0.875e1 ? -0.622839404094298749e-1 + R * 0.683847230393292652e-2 + pow(R - 0.85e1, 2) * (-0.565912364522644547e-2) + pow(R - 0.85e1, 3) * 0.262632037397895037e-2 : (R < 0.90e1 ? -0.421467402971066191e-1 + R * 0.450134555144075712e-2 + pow(R - 0.875e1, 2) * (-0.368938336474223258e-2) + pow(R - 0.875e1, 3) * 0.163314345191681526e-2 : (R < 0.925e1 ? -0.285055133247363902e-1 + R * 0.296286826630404350e-2 + pow(R - 0.90e1, 2) * (-0.246452577580462103e-2) + pow(R - 0.90e1, 3) * 0.117044885835379205e-2 : (R < 0.95e1 ? -0.192728234479233873e-1 + R * 0.195006453934306895e-2 + pow(R - 0.925e1, 2) * (-0.158668913203927693e-2) + pow(R - 0.925e1, 3) * 0.836518413868003741e-3 : (R < 0.100e2 ? -0.133121959659749725e-1 + R * 0.131356717592368130e-2 + pow(R - 0.95e1, 2) * (-0.959300321638274127e-3) + pow(R - 0.95e1, 3) * 0.326099963581823540e-3 : (R < 0.105e2 ? -0.636400506141774659e-2 + R * 0.598841826971774718e-3 + pow(R - 0.100e2, 2) * (-0.470150376265538871e-3) + pow(R - 0.100e2, 3) * 0.171388891843978787e-3 : (R < 0.110e2 ? -0.287322761648680942e-2 + R * 0.257233119589219978e-3 + pow(R - 0.105e2, 2) * (-0.213067038499570663e-3) + pow(R - 0.105e2, 3) * 0.979343865622612196e-4 : (R < 0.120e2 ? -0.137847384343479820e-2 + R * 0.117616871011345291e-3 + pow(R - 0.110e2, 2) * (-0.661654586561788064e-4) + pow(R - 0.110e2, 3) * 0.155729196648335107e-4 : (R < 0.140e2 ? -0.401720482611858676e-3 + R * 0.320047126934882236e-4 + pow(R - 0.120e2, 2) * (-0.194466996616782676e-4) + pow(R - 0.120e2, 3) * 0.361919303246707656e-5 : (R < 0.160e2 ? 0.304370145986789011e-4 + R * (-0.235176956361992128e-5) + pow(R - 0.140e2, 2) * 0.226845853312419303e-5 + pow(R - 0.140e2, 3) * (-0.438179361657116178e-6) : (R < 0.180e2 ? -0.250454948438633055e-4 + R * 0.146391222899145669e-5 + pow(R - 0.160e2, 2) * (-0.360617636818503988e-6) + pow(R - 0.160e2, 3) * 0.212647189113878123e-7 : (R < 0.200e2 ? -0.494655707347370299e-5 + R * 0.276618308654094619e-6 + pow(R - 0.180e2, 2) * (-0.233029323350177101e-6) + pow(R - 0.180e2, 3) * 0.452358897365648921e-7 : (R < 0.250e2 ? 0.226894508225670080e-5 + R * (-0.112668307907835039e-6) + pow(R - 0.200e2, 2) * 0.383860150692122651e-7 + pow(R - 0.200e2, 3) * (-0.326896547912905105e-8) : -0.647218719840219050e-6 + R * 0.260194318496087625e-7 + pow(R - 0.250e2, 2) * (-0.106484671177235048e-7) + pow(R - 0.250e2, 3) * 0.107007375836035040e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.4985255712e1 * (R - 0.300e2) * (R - 0.250e2) + 0.5317611068e2 * R + 0.3124041952e4 - 0.2658805534e1 * R * R + 0.75000e3 * (0.974884972e-2 * R - 0.4032464579e0) * R) * pow(R, -6));
}

static double radcoeff_7_6_1_0_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.928508438799999919e-2 + pow(R - 0.475e1, 2) * 0.243890149732948064e0 + pow(R - 0.475e1, 3) * (-0.480532434707792278e0) : (R < 0.525e1 ? -0.160776486115814882e0 + R * 0.318452433587629730e-1 + pow(R - 0.50e1, 2) * (-0.116509176297896144e0) + pow(R - 0.50e1, 3) * 0.137573696507376886e0 : (R < 0.55e1 ? 0.450375965602261685e-2 + R * (-0.614276695051927009e-3) + pow(R - 0.525e1, 2) * (-0.133289039173634782e-1) + pow(R - 0.525e1, 3) * 0.874478290548474577e-2 : (R < 0.575e1 ? 0.314437687955540224e-1 + R * (-0.563908185895527735e-2) + pow(R - 0.55e1, 2) * (-0.677031673824991884e-2) + pow(R - 0.55e1, 3) * 0.476671679228409841e-2 : (R < 0.60e1 ? 0.454206480297800613e-1 + R * (-0.813048082952696691e-2) + pow(R - 0.575e1, 2) * (-0.319527914403684461e-2) + pow(R - 0.575e1, 3) * 0.402646927285788547e-1 : (R < 0.625e1 ? 0.101381370196211244e-1 + R * (-0.217849051493685395e-2) + pow(R - 0.60e1, 2) * 0.270032404023972973e-1 + pow(R - 0.60e1, 3) * (-0.318889895305995291e-1) : (R < 0.65e1 ? -0.356876425679648959e-1 + R * 0.534394414927438343e-2 + pow(R - 0.625e1, 2) * 0.308649825444764960e-2 + pow(R - 0.625e1, 3) * (-0.145004156301807401e-1) : (R < 0.675e1 ? -0.280800431984555704e-1 + R * 0.416836534583931839e-2 + pow(R - 0.65e1, 2) * (-0.778881346818790631e-2) + pow(R - 0.65e1, 3) * 0.600259575692253453e-2 : (R < 0.70e1 ? -0.978284328123629754e-2 + R * 0.139944531616834045e-2 + pow(R - 0.675e1, 2) * (-0.328686665049600542e-2) + pow(R - 0.675e1, 3) * 0.335244367449057329e-2 : (R < 0.725e1 ? -0.283193956051124235e-2 + R * 0.384595179887320371e-3 + pow(R - 0.70e1, 2) * (-0.772533894628075124e-3) + pow(R - 0.70e1, 3) * 0.947084256155174276e-3 : (R < 0.75e1 ? -0.135243203010724025e-2 + R * 0.175906530602377959e-3 + pow(R - 0.725e1, 2) * (-0.622207025116944712e-4) + pow(R - 0.725e1, 3) * 0.626790760873067033e-5 : (R < 0.775e1 ? -0.113170949861375798e-2 + R * 0.145971412023167729e-3 + pow(R - 0.75e1, 2) * (-0.575197718051464685e-4) + pow(R - 0.75e1, 3) * (-0.144636684030097771e-3) : (R < 0.80e1 ? -0.704500135311371314e-3 + R * 0.900921478649511359e-4 + pow(R - 0.775e1, 2) * (-0.165997284827719817e-3) + pow(R - 0.775e1, 3) * 0.155206379231660903e-3 : (R < 0.825e1 ? -0.281270295476221258e-3 + R * 0.361947015570276604e-4 + pow(R - 0.80e1, 2) * (-0.495925004039741394e-4) + pow(R - 0.80e1, 3) * (-0.250822229765460284e-4) : (R < 0.85e1 ? -0.413936086522402092e-4 + R * 0.669553454693820699e-5 + pow(R - 0.825e1, 2) * (-0.684041676363836607e-4) + pow(R - 0.825e1, 3) * 0.408188198745233083e-4 : (R < 0.875e1 ? 0.180631643210634249e-3 + R * (-0.198530205447804980e-4) + pow(R - 0.85e1, 2) * (-0.377900527304911795e-4) + pow(R - 0.85e1, 3) * 0.466111688224527128e-4 : (R < 0.90e1 ? 0.267858096274391829e-3 + R * (-0.300084527558162109e-4) + pow(R - 0.875e1, 2) * (-0.283167611365164531e-5) + pow(R - 0.875e1, 3) * 0.482705687076659856e-4 : (R < 0.925e1 ? 0.199721301970591904e-3 + R * (-0.223735591799546568e-4) + pow(R - 0.90e1, 2) * 0.333712504170978477e-4 + pow(R - 0.90e1, 3) * (-0.586532819711685253e-5) : (R < 0.95e1 ? 0.575460047813775925e-4 + R * (-0.678768300836514449e-5) + pow(R - 0.925e1, 2) * 0.289722542692602081e-4 + pow(R - 0.925e1, 3) * (-0.876081839198527418e-6) : (R < 0.100e2 ? -0.767146051084447128e-4 + R * 0.753417878141523398e-5 + pow(R - 0.95e1, 2) * 0.283151928898613126e-4 + pow(R - 0.95e1, 3) * (-0.337598282973835623e-4) : (R < 0.105e2 ? -0.103809002091388784e-3 + R * 0.105295004482388782e-4 + pow(R - 0.100e2, 2) * (-0.223245495562140309e-4) + pow(R - 0.100e2, 3) * 0.116454732074725466e-4 : (R < 0.110e2 ? 0.347652135018927839e-4 + R * (-0.306094420237074148e-5) + pow(R - 0.105e2, 2) * (-0.485633974500520932e-5) + pow(R - 0.105e2, 3) * 0.678327492349338453e-5 : (R < 0.120e2 ? 0.318567570074150267e-4 + R * (-0.282982775475591177e-5) + pow(R - 0.110e2, 2) * 0.531857264023486790e-5 + pow(R - 0.110e2, 3) * (-0.257815276827895582e-5) : (R < 0.140e2 ? -0.235066828223466066e-6 + R * 0.728592208769555059e-7 + pow(R - 0.120e2, 2) * (-0.241588566460200083e-5) + pow(R - 0.120e2, 3) * 0.785364782456761533e-6 : (R < 0.160e2 ? -0.267377462301273904e-6 + R * (-0.166306048049909004e-6) + pow(R - 0.140e2, 2) * 0.229630303013856836e-5 + pow(R - 0.140e2, 3) * (-0.651641290556806847e-6) : (R < 0.180e2 ? -0.181435618081629105e-4 + R * 0.119921058582268187e-5 + pow(R - 0.160e2, 2) * (-0.161354471320227314e-5) + pow(R - 0.160e2, 3) * 0.373952353645466048e-6 : (R < 0.200e2 ? 0.137953891314347123e-4 + R * (-0.767540023240817376e-6) + pow(R - 0.180e2, 2) * 0.630169408670523464e-6 + pow(R - 0.180e2, 3) * (-0.121873869237557350e-6) : (R < 0.250e2 ? -0.582274826441175872e-5 + R * 0.290651180590587917e-6 + pow(R - 0.200e2, 2) * (-0.101073806754820778e-6) + pow(R - 0.200e2, 3) * 0.865019581614063723e-8 : 0.178101557717679911e-5 + R * (-0.713222007470719613e-7) + pow(R - 0.250e2, 2) * 0.286791304872887901e-7 + pow(R - 0.250e2, 3) * (-0.287117591477487877e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.3111888832e1 * (R - 0.300e2) * (R - 0.250e2) - 0.3319353716e2 * R - 0.1950146432e4 + 0.1659676858e1 * R * R + 0.75000e3 * (-0.608553158e-2 * R + 0.2517203940e0) * R) * pow(R, -6));
}

static double radcoeff_7_6_1_2_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.254224635200000666e-1 + R * (-0.138777878078144568e-16) + pow(R - 0.475e1, 2) * (-0.584877120735902811e0) + pow(R - 0.475e1, 3) * 0.112863569830361143e1 : (R < 0.525e1 ? 0.410599410936121456e0 + R * (-0.808193669360242894e-1) + pow(R - 0.50e1, 2) * 0.261599652991805709e0 + pow(R - 0.50e1, 3) * (-0.304565940030834315e0) : (R < 0.55e1 ? 0.352985545494900535e-1 + R * (-0.712565419590286721e-2) + pow(R - 0.525e1, 2) * 0.331751979686799592e-1 + pow(R - 0.525e1, 3) * (-0.106445218602739568e-1) : (R < 0.575e1 ? -0.430489474769965991e-1 + R * 0.746609693963574614e-2 + pow(R - 0.55e1, 2) * 0.251918065734744907e-1 + pow(R - 0.55e1, 3) * (-0.264742977120698900e-1) : (R < 0.60e1 ? -0.857719621458193499e-1 + R * 0.150980694053598867e-1 + pow(R - 0.575e1, 2) * 0.533608328942207239e-2 + pow(R - 0.575e1, 3) * (-0.666808725074464620e-1) : (R < 0.625e1 ? -0.274726138705482514e-1 + R * 0.526344745492470824e-2 + pow(R - 0.60e1, 2) * (-0.446745710911627750e-1) + pow(R - 0.60e1, 3) * 0.507134785578557401e-1 : (R < 0.65e1 ? 0.507058005136170400e-1 + R * (-0.756506086105872711e-2) + pow(R - 0.625e1, 2) * (-0.663946217277096989e-2) + pow(R - 0.625e1, 3) * 0.240116001320235042e-1 : (R < 0.675e1 ? 0.429801297804837251e-1 + R * (-0.638261692268980371e-2) + pow(R - 0.65e1, 2) * 0.113692379262466600e-1 + pow(R - 0.65e1, 3) * (-0.832512881394977325e-2) : (R < 0.70e1 ? 0.157259401676288837e-1 + R * (-0.225895961218205684e-2) + pow(R - 0.675e1, 2) * 0.512539131578433008e-2 + pow(R - 0.675e1, 3) * (-0.501902215622440986e-2) : (R < 0.725e1 ? 0.461645187847378041e-2 + R * (-0.637330608581968645e-3) + pow(R - 0.70e1, 2) * 0.136112469861602247e-2 + pow(R - 0.70e1, 3) * (-0.141125136243259010e-2) : (R < 0.75e1 ? 0.166381415792299413e-2 + R * (-0.221377889730068136e-3) + pow(R - 0.725e1, 2) * 0.302686176791579892e-3 + pow(R - 0.725e1, 3) * (-0.201064472765229130e-3) : (R < 0.775e1 ? 0.827264163443189944e-3 + R * (-0.107734389977758659e-3) + pow(R - 0.75e1, 2) * 0.151887822217658045e-3 + pow(R - 0.75e1, 3) * (-0.692463625064936212e-4) : (R < 0.80e1 ? 0.347733487345753243e-3 + R * (-0.447741718388971921e-4) + pow(R - 0.775e1, 2) * 0.999530503377878219e-4 + pow(R - 0.775e1, 3) * (-0.124549569048796178e-3) : (R < 0.825e1 ? 0.139046618197220529e-3 + R * (-0.181506908666525663e-4) + pow(R - 0.80e1, 2) * 0.654087355119068131e-5 + pow(R - 0.80e1, 3) * 0.521255330376783340e-4 : (R < 0.85e1 ? 0.326570969315634457e-4 + R * (-0.510671664649253885e-5) + pow(R - 0.825e1, 2) * 0.456350233294494352e-4 + pow(R - 0.825e1, 3) * (-0.703037673899171083e-4) : (R < 0.875e1 ? -0.474914303482931168e-4 + R * 0.452883863262271925e-5 + pow(R - 0.85e1, 2) * (-0.709280221298840027e-5) + pow(R - 0.85e1, 3) * 0.807634219619901014e-4 : (R < 0.90e1 ? -0.148144281493014536e-3 + R * 0.161255791440016619e-4 + pow(R - 0.875e1, 2) * 0.534797642585041800e-4 + pow(R - 0.875e1, 3) * (-0.150384892810043332e-3) : (R < 0.925e1 ? -0.134035992723335678e-3 + R * 0.146682938713706304e-4 + pow(R - 0.90e1, 2) * (-0.593089053490283193e-4) + pow(R - 0.90e1, 3) * 0.125321091870183188e-3 : (R < 0.95e1 ? -0.788347387199713406e-4 + R * 0.851154592251582028e-5 + pow(R - 0.925e1, 2) * 0.346819135536090788e-4 + pow(R - 0.925e1, 3) * (-0.924682278866894279e-4) : (R < 0.100e2 ? -0.781419936403778730e-4 + R * 0.851470997056609196e-5 + pow(R - 0.95e1, 2) * (-0.346692573614079921e-4) + pow(R - 0.95e1, 3) * 0.271959966085516181e-4 : (R < 0.105e2 ? 0.593127906452818677e-4 + R * (-0.575754993442818660e-5) + pow(R - 0.100e2, 2) * 0.612473755141943583e-5 + pow(R - 0.100e2, 3) * 0.774039586873875893e-6 : (R < 0.110e2 ? -0.946457605523988910e-5 + R * 0.947717307146656175e-6 + pow(R - 0.105e2, 2) * 0.728579693173024973e-5 + pow(R - 0.105e2, 3) * (-0.854168017204712167e-5) : (R < 0.120e2 ? -0.183857416732572006e-4 + R * 0.182725410984156337e-5 + pow(R - 0.110e2, 2) * (-0.552672332634043448e-5) + pow(R - 0.110e2, 3) * 0.241730735649887078e-5 : (R < 0.140e2 ? 0.241231373549123012e-4 + R * (-0.197427047334269199e-5) + pow(R - 0.120e2, 2) * 0.172519874315617870e-5 + pow(R - 0.120e2, 3) * (-0.372018673729916212e-6) : (R < 0.160e2 ? -0.606420949242238613e-5 + R * 0.462300414523027569e-6 + pow(R - 0.140e2, 2) * (-0.506913299223318682e-6) + pow(R - 0.140e2, 3) * 0.108580294268402445e-6 : (R < 0.180e2 ? 0.437181431559068410e-5 + R * (-0.262389251149417768e-6) + pow(R - 0.160e2, 2) * 0.144568466387095960e-6 + pow(R - 0.160e2, 3) * (-0.257850180936935251e-7) : (R < 0.200e2 ? -0.955576352435861621e-7 + R * 0.646439727464367509e-8 + pow(R - 0.180e2, 2) * (-0.101416421750652170e-7) + pow(R - 0.180e2, 3) * 0.209881736887168932e-8 : (R < 0.250e2 ? 0.188281540483138293e-6 + R * (-0.891636299915691450e-8) + pow(R - 0.200e2, 2) * 0.245126203816492055e-8 + pow(R - 0.200e2, 3) * (-0.196524705266707488e-9) : -0.193341838872307239e-7 + R * 0.856904487489228962e-9 + pow(R - 0.250e2, 2) * (-0.496608540835691592e-9) + pow(R - 0.250e2, 3) * 0.530012894675691586e-10)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3185369760e1 * (R - 0.300e2) * (R - 0.250e2) + 0.3397490272e2 * R + 0.1996888810e4 - 0.1698745136e1 * R * R + 0.75000e3 * (0.623037650e-2 * R - 0.2577334506e0) * R) * pow(R, -6));
}

static double radcoeff_7_6_3_2_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.610804439099999971e-2 + pow(R - 0.475e1, 2) * (-0.223215388486253913e0) + pow(R - 0.475e1, 3) * 0.452544112857015624e0 : (R < 0.525e1 ? 0.133006449785882580e0 + R * (-0.267556730824365166e-1) + pow(R - 0.50e1, 2) * 0.116192696156507846e0 + pow(R - 0.50e1, 3) * (-0.139744934155047129e0) : (R < 0.55e1 ? -0.293594291521668653e-1 + R * 0.513849984174606991e-2 + pow(R - 0.525e1, 2) * 0.113839955402224996e-1 + pow(R - 0.525e1, 3) * (-0.430647524482712530e-2) : (R < 0.575e1 ? -0.555801532464872960e-1 + R * 0.100230335034522354e-1 + pow(R - 0.55e1, 2) * 0.815413910660215541e-2 + pow(R - 0.55e1, 3) * (-0.186793379856443932e-1) : (R < 0.60e1 ? -0.586668728745586843e-1 + R * 0.105977271844449883e-1 + pow(R - 0.575e1, 2) * (-0.585536438263114124e-2) + pow(R - 0.575e1, 3) * (-0.353883368445952404e-1) : (R < 0.625e1 ? -0.220780381360685500e-2 + R * 0.103473183476780924e-2 + pow(R - 0.60e1, 2) * (-0.323966170160775724e-1) + pow(R - 0.60e1, 3) * 0.418273765640253328e-1 : (R < 0.65e1 ? 0.486439316459764126e-1 + R * (-0.732094356751622575e-2) + pow(R - 0.625e1, 2) * (-0.102608459305856799e-2) + pow(R - 0.625e1, 3) * 0.140947799644938771e-1 : (R < 0.675e1 ? 0.349567941415688949e-1 + R * (-0.519121462070290703e-2) + pow(R - 0.65e1, 2) * 0.954500038031184071e-2 + pow(R - 0.65e1, 3) * (-0.708005582680084310e-2) : (R < 0.70e1 ? 0.121890501652869819e-1 + R * (-0.174622489807214551e-2) + pow(R - 0.675e1, 2) * 0.423495851021120796e-2 + pow(R - 0.675e1, 3) * (-0.459674802369050475e-2) : (R < 0.725e1 ? 0.359278787965957788e-2 + R * (-0.490635897408511117e-3) + pow(R - 0.70e1, 2) * 0.787397492443329180e-3 + pow(R - 0.70e1, 3) * (-0.695787833957138167e-3) : (R < 0.75e1 ? 0.172264921471012287e-2 + R * (-0.227397370053810055e-3) + pow(R - 0.725e1, 2) * 0.265556616975475500e-3 + pow(R - 0.725e1, 3) * (-0.247614929760941148e-3) : (R < 0.775e1 ? 0.108774870131186571e-2 + R * (-0.141046860896248770e-3) + pow(R - 0.75e1, 2) * 0.798454196547696124e-4 + pow(R - 0.75e1, 3) * 0.939069533209019747e-4 : (R < 0.80e1 ? 0.648346793478260042e-3 + R * (-0.835165973211948439e-4) + pow(R - 0.775e1, 2) * 0.150275634645446093e-3 + pow(R - 0.775e1, 3) * (-0.116311491522666825e-3) : (R < 0.825e1 ? 0.229286352291774650e-3 + R * (-0.301871846589718302e-4) + pow(R - 0.80e1, 2) * 0.630420160034459749e-4 + pow(R - 0.80e1, 3) * 0.187885756497653909e-4 : (R < 0.85e1 ? -0.555918441859278440e-4 + R * 0.485668127708216322e-5 + pow(R - 0.825e1, 2) * 0.771334477407700189e-4 + pow(R - 0.825e1, 3) * (-0.118543840836394699e-3) : (R < 0.875e1 ? -0.191511157780466918e-3 + R * 0.211964349906431641e-4 + pow(R - 0.85e1, 2) * (-0.117744328865260121e-4) + pow(R - 0.85e1, 3) * 0.344794976478134672e-4 : (R < 0.90e1 ? -0.196763099635020367e-3 + R * 0.217741243563451832e-4 + pow(R - 0.875e1, 2) * 0.140851903493340883e-4 + pow(R - 0.875e1, 3) * (-0.532839692108593336e-4) : (R < 0.925e1 ? -0.170181995786184890e-3 + R * 0.188259753039761002e-4 + pow(R - 0.90e1, 2) * (-0.258777865588104136e-4) + pow(R - 0.90e1, 3) * 0.150143816916240375e-4 : (R < 0.95e1 ? -0.779205631436912107e-4 + R * 0.870227859175040136e-5 + pow(R - 0.925e1, 2) * (-0.146170002900923850e-4) + pow(R - 0.925e1, 3) * (-0.317102648196368814e-4) : (R < 0.100e2 ? 0.465850620382882524e-4 + R * (-0.455189620697771106e-5) + pow(R - 0.95e1, 2) * (-0.383996989048200477e-4) + pow(R - 0.95e1, 3) * 0.488468295015509363e-4 : (R < 0.105e2 ? 0.607367587863455195e-4 + R * (-0.631647298563455235e-5) + pow(R - 0.100e2, 2) * 0.348705453475063601e-4 + pow(R - 0.100e2, 3) * (-0.346555215044745050e-4) : (R < 0.110e2 ? -0.281060393659172184e-4 + R * 0.256243123351592557e-5 + pow(R - 0.105e2, 2) * (-0.171127369092054042e-4) + pow(R - 0.105e2, 3) * 0.171148194523471029e-4 : (R < 0.120e2 ? 0.167979743577206480e-4 + R * (-0.171419108642914977e-5) + pow(R - 0.110e2, 2) * 0.855949226931525187e-5 + pow(R - 0.110e2, 3) * (-0.393497095188610128e-5) : (R < 0.140e2 ? -0.423463645205165724e-4 + R * 0.359988059654304760e-5 + pow(R - 0.120e2, 2) * (-0.324542058634305323e-5) + pow(R - 0.120e2, 3) * 0.664566050773264682e-6 : (R < 0.160e2 ? 0.200849378455998447e-4 + R * (-0.140700913954998892e-5) + pow(R - 0.140e2, 2) * 0.741975718296534756e-6 + pow(R - 0.140e2, 3) * (-0.115289433135770120e-6) : (R < 0.180e2 ? -0.322034955521053574e-5 + R * 0.177420536006908475e-6 + pow(R - 0.160e2, 2) * 0.502391194819139548e-7 + pow(R - 0.160e2, 3) * (-0.226236221301840935e-7) : (R < 0.200e2 ? -0.193089627690239254e-5 + R * 0.106893548372355133e-6 + pow(R - 0.180e2, 2) * (-0.855026132991906126e-7) + pow(R - 0.180e2, 3) * 0.164718457815065186e-7 : (R < 0.250e2 ? 0.745834112526581420e-6 + R * (-0.374547554463290676e-7) + pow(R - 0.200e2, 2) * 0.133284613898485071e-7 + pow(R - 0.200e2, 3) * (-0.114688877451653876e-8) : -0.246014344785390018e-6 + R * 0.981320036341560074e-8 + pow(R - 0.250e2, 2) * (-0.387487022789957364e-8) + pow(R - 0.250e2, 3) * 0.386392595843290655e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1043518848e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1112965504e2 * R - 0.6543198542e3 + 0.5564827520e0 * R * R + 0.75000e3 * (-0.2041298890e-2 * R + 0.844473014e-1) * R) * pow(R, -6));
}

static double radcoeff_7_6_3_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.324187985799999981e-1 + pow(R - 0.475e1, 2) * 0.764699380720684996e0 + pow(R - 0.475e1, 3) * (-0.147607756832274006e1) : (R < 0.525e1 ? -0.535614530790143539e0 + R * 0.105585146299828708e0 + pow(R - 0.50e1, 2) * (-0.342358795521370163e0) + pow(R - 0.50e1, 3) * 0.405675628488221252e0 : (R < 0.55e1 ? -0.513183823615968315e-1 + R * 0.104699288806851115e-1 + pow(R - 0.525e1, 2) * (-0.381020741552042241e-1) + pow(R - 0.525e1, 3) * (-0.384397999814489744e-2) : (R < 0.575e1 ? 0.549849841161304323e-1 + R * (-0.930185444656917056e-2) + pow(R - 0.55e1, 2) * (-0.409850591538128972e-1) + pow(R - 0.55e1, 3) * 0.555664701923582888e-1 : (R < 0.60e1 ? 0.111216088406948535e0 + R * (-0.193756708624084409e-1) + pow(R - 0.575e1, 2) * 0.689793490455822616e-3 + pow(R - 0.575e1, 3) * 0.638323333407117277e-1 : (R < 0.625e1 ? 0.383758252287824606e-1 + R * (-0.706221161579707619e-2) + pow(R - 0.60e1, 2) * 0.485640434959896186e-1 + pow(R - 0.60e1, 3) * (-0.534183458912052406e-1) : (R < 0.65e1 ? -0.485865955409796879e-1 + R * 0.720387027759675051e-2 + pow(R - 0.625e1, 2) * 0.850028407758568645e-2 + pow(R - 0.625e1, 3) * (-0.258992450078907484e-1) : (R < 0.675e1 ? -0.445212218881654992e-1 + R * 0.659790387741007733e-2 + pow(R - 0.65e1, 2) * (-0.109241496783323774e-1) + pow(R - 0.65e1, 3) * 0.727973302676826993e-2 : (R < 0.70e1 ? -0.174346423622498449e-1 + R * 0.250077898076293955e-2 + pow(R - 0.675e1, 2) * (-0.546434990825617455e-2) + pow(R - 0.675e1, 3) * 0.526625795681766404e-2 : (R < 0.725e1 ? -0.548061784036715186e-2 + R * 0.756027393538164557e-3 + pow(R - 0.70e1, 2) * (-0.151465644064292609e-2) + pow(R - 0.70e1, 3) * 0.147825776356107089e-2 : (R < 0.75e1 ? -0.207106314039191700e-2 + R * 0.275872503884402333e-3 + pow(R - 0.725e1, 2) * (-0.405963117972122918e-3) + pow(R - 0.725e1, 3) * 0.320239196298053924e-3 : (R < 0.775e1 ? -0.101940677522169504e-2 + R * 0.132935794204225999e-3 + pow(R - 0.75e1, 2) * (-0.165783720748582448e-3) + pow(R - 0.75e1, 3) * 0.537535210067136343e-4 : (R < 0.80e1 ? -0.464627026314875309e-3 + R * 0.601227190186935884e-4 + pow(R - 0.775e1, 2) * (-0.125468579993547220e-3) + pow(R - 0.775e1, 3) * 0.828818406350913305e-4 : (R < 0.825e1 ? -0.936222247829968687e-4 + R * 0.129287741409996077e-4 + pow(R - 0.80e1, 2) * (-0.633071995172287158e-4) + pow(R - 0.80e1, 3) * 0.893158316529211115e-4 : (R < 0.85e1 ? 0.267984060372093143e-4 + R * (-0.197810718269203795e-5) + pow(R - 0.825e1, 2) * 0.367967422246213057e-5 + pow(R - 0.825e1, 3) * (-0.456776433427759129e-4) : (R < 0.875e1 ? 0.834748011309673858e-4 + R * (-0.870282819823145677e-5) + pow(R - 0.85e1, 2) * (-0.305785582846198050e-4) + pow(R - 0.85e1, 3) * (-0.367809961817483488e-6) : (R < 0.90e1 ? 0.215942524921343697e-3 + R * (-0.240610717083821374e-4) + pow(R - 0.875e1, 2) * (-0.308544157559829176e-4) + pow(R - 0.875e1, 3) * 0.144732683958045862e-3 : (R < 0.925e1 ? 0.110884038846259940e-3 + R * (-0.123509013442399936e-4) + pow(R - 0.90e1, 2) * 0.776950972125514926e-4 + pow(R - 0.90e1, 3) * (-0.185445504750366081e-3) : (R < 0.95e1 ? 0.751346191035854303e-4 + R * (-0.827438487865788405e-5) + pow(R - 0.925e1, 2) * (-0.613890313502230543e-4) + pow(R - 0.925e1, 3) * 0.143671717699418342e-3 : (R < 0.100e2 ? 0.109225326994720389e-3 + R * (-0.120304534851284619e-4) + pow(R - 0.95e1, 2) * 0.463647569243407160e-4 + pow(R - 0.95e1, 3) * (-0.300718685081675759e-4) : (R < 0.105e2 ? -0.121051022769865708e-3 + R * 0.117804020580865705e-4 + pow(R - 0.100e2, 2) * 0.125695416208934985e-5 + pow(R - 0.100e2, 3) * (-0.128475020845249798e-4) : (R < 0.110e2 ? -0.343666617762129401e-4 + R * 0.340172965678218493e-5 + pow(R - 0.105e2, 2) * (-0.180142989646981217e-4) + pow(R - 0.105e2, 3) * 0.147730520574675055e-4 : (R < 0.120e2 ? 0.392560041273683875e-4 + R * (-0.353278026481530760e-5) + pow(R - 0.110e2, 2) * 0.414527912150313747e-5 + pow(R - 0.110e2, 3) * (-0.123150877748782973e-5) : (R < 0.140e2 ? -0.129826084551297357e-4 + R * 0.106325164572747793e-5 + pow(R - 0.120e2, 2) * 0.450752789039648172e-6 + pow(R - 0.120e2, 3) * (-0.297179159951693488e-6) : (R < 0.160e2 ? 0.111269121074795343e-4 + R * (-0.699887117534252399e-6) + pow(R - 0.140e2, 2) * (-0.133232217067051307e-5) + pow(R - 0.140e2, 3) * 0.463089305593819614e-6 : (R < 0.180e2 ? 0.585781011844750754e-5 + R * (-0.472104133090469216e-6) + pow(R - 0.160e2, 2) * 0.144621366289240472e-5 + pow(R - 0.160e2, 3) * (-0.368904967673585051e-6) : (R < 0.200e2 ? -0.157524856825303272e-4 + R * 0.885890906396129362e-6 + pow(R - 0.180e2, 2) * (-0.767216143149105375e-6) + pow(R - 0.180e2, 3) * 0.149512773913020328e-6 : (R < 0.250e2 ? 0.786897764898095625e-5 + R * (-0.388820379244047830e-6) + pow(R - 0.200e2, 2) * 0.129860500329016753e-6 + pow(R - 0.200e2, 3) * (-0.110045451352414349e-7) : -0.209168093837529946e-5 + R * 0.844437389030119659e-7 + pow(R - 0.250e2, 2) * (-0.352076766996047875e-7) + pow(R - 0.250e2, 3) * 0.355182653260047860e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2962242051e2 * (R - 0.300e2) * (R - 0.250e2) + 0.3159750264e3 * R + 0.1856270272e5 - 0.1579875132e2 * R * R + 0.75000e3 * (0.579271738e-1 * R - 0.2396056991e1) * R) * pow(R, -6));
}

static double radcoeff_7_6_5_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.379743434199999997e-3 + pow(R - 0.475e1, 2) * 0.201721345891436449e0 + pow(R - 0.475e1, 3) * (-0.433944472205745835e0) : (R < 0.525e1 ? -0.920329637297043895e-1 + R * 0.194960844071408804e-1 + pow(R - 0.50e1, 2) * (-0.123737008262872941e0) + pow(R - 0.50e1, 3) * 0.150482533993237688e0 : (R < 0.55e1 ? 0.792631651379584745e-1 + R * (-0.141569446005635202e-1) + pow(R - 0.525e1, 2) * (-0.108751077679446664e-1) + pow(R - 0.525e1, 3) * 0.277136215279495408e-2 : (R < 0.575e1 ? 0.105675352577477399e0 + R * (-0.190748680808867990e-1) + pow(R - 0.55e1, 2) * (-0.879658615334845059e-2) + pow(R - 0.55e1, 3) * 0.406269779715826007e-1 : (R < 0.60e1 ? 0.872495870393633910e-1 + R * (-0.158556027878892850e-1) + pow(R - 0.575e1, 2) * 0.216736473253384999e-1 + pow(R - 0.575e1, 3) * 0.290324751448746074e-1 : (R < 0.625e1 ? -0.862465409266371594e-2 + R * 0.424809964443952602e-3 + pow(R - 0.60e1, 2) * 0.434480036839944572e-1 + pow(R - 0.60e1, 3) * (-0.596317044070810709e-1) : (R < 0.65e1 ? -0.727350071542092608e-1 + R * 0.109678672301134813e-1 + pow(R - 0.625e1, 2) * (-0.127577462131634465e-2) + pow(R - 0.625e1, 3) * (-0.160613464765503172e-1) : (R < 0.675e1 ? -0.493446680691638079e-1 + R * 0.731847745510212470e-2 + pow(R - 0.65e1, 2) * (-0.133217844787290821e-1) + pow(R - 0.65e1, 3) * 0.101600970332823386e-1 : (R < 0.70e1 ? -0.179163782744766464e-1 + R * 0.256260340947802191e-2 + pow(R - 0.675e1, 2) * (-0.570171170376732820e-2) + pow(R - 0.675e1, 3) * 0.575512117222095818e-2 : (R < 0.725e1 ? -0.578041706300051403e-2 + R * 0.790832777385787680e-3 + pow(R - 0.70e1, 2) * (-0.138537082460160957e-2) + pow(R - 0.70e1, 3) * 0.137778432583383491e-2 : (R < 0.75e1 ? -0.269643118819649572e-2 + R * 0.356481926178826955e-3 + pow(R - 0.725e1, 2) * (-0.352032580226233332e-3) + pow(R - 0.725e1, 3) * 0.821619065237017416e-4 : (R < 0.775e1 ? -0.151256744987178309e-2 + R * 0.195870993538904394e-3 + pow(R - 0.75e1, 2) * (-0.290411150333457022e-3) + pow(R - 0.75e1, 3) * 0.280015936071357574e-3 : (R < 0.80e1 ? -0.807897847327054678e-3 + R * 0.103168406385555441e-3 + pow(R - 0.775e1, 2) * (-0.803991982799388415e-4) + pow(R - 0.775e1, 3) * (-0.148576363769131715e-3) : (R < 0.825e1 ? -0.270782964130990549e-3 + R * 0.351107390388738207e-4 + pow(R - 0.80e1, 2) * (-0.191831471106787641e-3) + pow(R - 0.80e1, 3) * 0.263204144285169380e-3 : (R < 0.85e1 ? 0.105501041303668593e-3 + R * (-0.114542194610507395e-4) + pow(R - 0.825e1, 2) * 0.557163710708938588e-5 + pow(R - 0.825e1, 3) * (-0.331111782355457092e-4) : (R < 0.875e1 ? 0.134423389070702356e-3 + R * (-0.148767468266708667e-4) + pow(R - 0.85e1, 2) * (-0.192617465695698986e-4) + pow(R - 0.85e1, 3) * (-0.112083636949865299e-4) : (R < 0.90e1 ? 0.235703262156325649e-3 + R * (-0.266091883042657880e-4) + pow(R - 0.875e1, 2) * (-0.276680193408097969e-4) + pow(R - 0.875e1, 3) * 0.170102663671491805e-3 : (R < 0.925e1 ? 0.740897071553937191e-4 + R * (-0.854894853626596781e-5) + pow(R - 0.90e1, 2) * 0.999089784128090707e-4 + pow(R - 0.90e1, 3) * (-0.199204072942980729e-3) : (R < 0.95e1 ? -0.393630064822994883e-4 + R * 0.405477699332967411e-5 + pow(R - 0.925e1, 2) * (-0.494940762944264895e-4) + pow(R - 0.925e1, 3) * 0.853907467564311536e-4 : (R < 0.100e2 ? 0.418724389060008939e-4 + R * (-0.468149613705272595e-5) + pow(R - 0.95e1, 2) * 0.145489837728968808e-4 + pow(R - 0.95e1, 3) * (-0.546456014958285387e-5) : (R < 0.105e2 ? -0.596790217765701329e-4 + R * 0.576906752365701338e-5 + pow(R - 0.100e2, 2) * 0.635214354852259956e-5 + pow(R - 0.100e2, 3) * (-0.121321696796732526e-4) : (R < 0.110e2 ? -0.307641781310590625e-4 + R * 0.302208381242467265e-5 + pow(R - 0.105e2, 2) * (-0.118461109709872802e-4) + pow(R - 0.105e2, 3) * 0.102432384490758701e-4 : (R < 0.120e2 ? 0.133552024083127499e-4 + R * (-0.114159832175570453e-5) + pow(R - 0.110e2, 2) * 0.351874670262652622e-5 + pow(R - 0.110e2, 3) * (-0.161231927587082181e-5) : (R < 0.140e2 ? -0.111447970966185891e-4 + R * 0.105893725588488248e-5 + pow(R - 0.120e2, 2) * (-0.131821112498593941e-5) + pow(R - 0.120e2, 3) * 0.255682392771748995e-6 : (R < 0.160e2 ? 0.164929985592704143e-4 + R * (-0.114571853079788659e-5) + pow(R - 0.140e2, 2) * 0.215883231644554796e-6 + pow(R - 0.140e2, 3) * 0.237305106271942529e-7 : (R < 0.180e2 ? -0.826409295306617969e-6 + R * 0.258052330666362507e-8 + pow(R - 0.160e2, 2) * 0.358266295407720313e-6 + pow(R - 0.160e2, 3) * (-0.952322844930260486e-7) : (R < 0.200e2 ? -0.538020220848217618e-5 + R * 0.292858291021232030e-6 + pow(R - 0.180e2, 2) * (-0.213127411550436005e-6) + pow(R - 0.180e2, 3) * 0.404415707949099818e-7 : (R < 0.250e2 ? 0.143503664493184230e-5 + R * (-0.743525056415921156e-7) + pow(R - 0.200e2, 2) * 0.295220132190239122e-7 + pow(R - 0.200e2, 3) * (-0.260145493414109712e-8) : -0.654870194601617488e-6 + R * 0.257585064880646994e-7 + pow(R - 0.250e2, 2) * (-0.949981079309254717e-8) + pow(R - 0.250e2, 3) * 0.932529675095921295e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1664430973e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1775406980e3 * R - 0.1043003059e5 + 0.8877034900e1 * R * R + 0.75000e3 * (-0.3254820338e-1 * R + 0.1346299440e1) * R) * pow(R, -6));
}

static double radcoeff_7_6_5_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.398150542600000032e-1 + pow(R - 0.475e1, 2) * (-0.104629142183911528e1) + pow(R - 0.475e1, 3) * 0.203921098783646126e1 : (R < 0.525e1 ? 0.710252765576105838e0 + R * (-0.140793650700221151e0) + pow(R - 0.50e1, 2) * 0.483116819038230616e0 + pow(R - 0.50e1, 3) * (-0.585711383989383938e0) : (R < 0.55e1 ? 0.396738200333555668e-1 + R * (-0.905612567911534549e-2) + pow(R - 0.525e1, 2) * 0.438332810461926417e-1 + pow(R - 0.525e1, 3) * 0.228371471610749784e-1 : (R < 0.575e1 ? -0.101322100363753942e0 + R * 0.171424799366825358e-1 + pow(R - 0.55e1, 2) * 0.609611414169988763e-1 + pow(R - 0.55e1, 3) * (-0.100181111854916044e0) : (R < 0.60e1 ? -0.166332879253114962e0 + R * 0.288390921723852070e-1 + pow(R - 0.575e1, 2) * (-0.141746924741881601e-1) + pow(R - 0.575e1, 3) * (-0.619316154534107488e-1) : (R < 0.625e1 ? -0.559893342166596711e-1 + R * 0.101395680377766115e-1 + pow(R - 0.60e1, 2) * (-0.606234040642462252e-1) + pow(R - 0.60e1, 3) * 0.637673250285591131e-1 : (R < 0.65e1 ? 0.559388711658229260e-1 + R * (-0.821576055149166734e-2) + pow(R - 0.625e1, 2) * (-0.127979102928268852e-1) + pow(R - 0.625e1, 3) * 0.334283148271742117e-1 : (R < 0.675e1 ? 0.565137689477646366e-1 + R * (-0.834690666780994392e-2) + pow(R - 0.65e1, 2) * 0.122733258275537736e-1 + pow(R - 0.65e1, 3) * (-0.688394740925597510e-2) : (R < 0.70e1 ? 0.244633114053627344e-1 + R * (-0.350098389326855336e-2) + pow(R - 0.675e1, 2) * 0.711036527061179209e-2 + pow(R - 0.675e1, 3) * (-0.658749701735031161e-2) : (R < 0.725e1 ? 0.856459098201088620e-2 + R * (-0.118095694871584085e-2) + pow(R - 0.70e1, 2) * 0.216974250759905795e-2 + pow(R - 0.70e1, 3) * (-0.187580174374277773e-2) : (R < 0.75e1 ? 0.335549189184360065e-2 + R * (-0.447798521868082830e-3) + pow(R - 0.725e1, 2) * 0.762891199791974439e-3 + pow(R - 0.725e1, 3) * (-0.652508655998572406e-3) : (R < 0.775e1 ? 0.144972544235870936e-2 + R * (-0.188698294971827916e-3) + pow(R - 0.75e1, 2) * 0.273509707793045162e-3 + pow(R - 0.75e1, 3) * (-0.106809880582933882e-3) : (R < 0.80e1 ? 0.560508884739692242e-3 + R * (-0.719702936846054471e-4) + pow(R - 0.775e1, 2) * 0.193402297355844743e-3 + pow(R - 0.775e1, 3) * (-0.157914732773691680e-3) : (R < 0.825e1 ? 0.333920203620021588e-4 + R * (-0.487815740175026970e-5) + pow(R - 0.80e1, 2) * 0.749662477755759765e-4 + pow(R - 0.80e1, 3) * (-0.161760816034299564e-3) : (R < 0.85e1 ? -0.234621116737540318e-4 + R * 0.227481347960654938e-5 + pow(R - 0.825e1, 2) * (-0.463543642501486967e-4) + pow(R - 0.825e1, 3) * 0.135348006190889983e-3 : (R < 0.875e1 ? -0.429492836462546350e-4 + R * 0.447538251532407455e-5 + pow(R - 0.85e1, 2) * 0.551566403930187974e-4 + pow(R - 0.85e1, 3) * (-0.114258838681260361e-3) : (R < 0.90e1 ? -0.951416824841000663e-4 + R * 0.106301704590971513e-4 + pow(R - 0.875e1, 2) * (-0.305374886179264837e-4) + pow(R - 0.875e1, 3) * 0.120994422326151508e-3 : (R < 0.925e1 ? -0.161919126568185843e-3 + R * 0.180478803362873155e-4 + pow(R - 0.90e1, 2) * 0.602083281266871476e-4 + pow(R - 0.90e1, 3) * (-0.225314340863345611e-3) : (R < 0.95e1 ? -0.493606002877206221e-4 + R * 0.590560548775358059e-5 + pow(R - 0.925e1, 2) * (-0.108777427520822081e-3) + pow(R - 0.925e1, 3) * 0.166980171399230967e-3 : (R < 0.100e2 ? 0.165709226089365649e-3 + R * (-0.171743261353016484e-4) + pow(R - 0.95e1, 2) * 0.164577010286011544e-4 + pow(R - 0.95e1, 3) * 0.158268216400428387e-5 : (R < 0.105e2 ? -0.642563989902718969e-5 + R * 0.470386516302718967e-6 + pow(R - 0.100e2, 2) * 0.188317242746075803e-4 + pow(R - 0.100e2, 3) * (-0.249917652704260336e-4) : (R < 0.110e2 ? -0.576463286815308347e-5 + R * 0.558286838090769873e-6 + pow(R - 0.105e2, 2) * (-0.186559236310314734e-4) + pow(R - 0.105e2, 3) * 0.184563835736998691e-4 : (R < 0.120e2 ? 0.448284296293237943e-4 + R * (-0.425534911266579924e-5) + pow(R - 0.110e2, 2) * 0.902865172951833183e-5 + pow(R - 0.110e2, 3) * (-0.365003331085253158e-5) : (R < 0.140e2 ? -0.350793942697592162e-4 + R * 0.285185441381326797e-5 + pow(R - 0.120e2, 2) * (-0.192144820303926420e-5) + pow(R - 0.120e2, 3) * 0.388945761441315098e-6 : (R < 0.160e2 ? 0.260459045737210414e-5 + R * (-0.166589261048007423e-6) + pow(R - 0.140e2, 2) * 0.412226365608626553e-6 + pow(R - 0.140e2, 3) * (-0.119575712867311418e-6) : (R < 0.180e2 ? -0.127060311560190048e-6 + R * 0.474076469787618797e-7 + pow(R - 0.160e2, 2) * (-0.305227911595241955e-6) + pow(R - 0.160e2, 3) * 0.780237522404304987e-7 : (R < 0.200e2 ? 0.439949721090671724e-5 + R * (-0.237218972517039822e-6) + pow(R - 0.180e2, 2) * 0.162914601847341090e-6 + pow(R - 0.180e2, 3) * (-0.306015980819105833e-7) : (R < 0.250e2 ? -0.882441774487948823e-6 + R * 0.472202578893974402e-7 + pow(R - 0.200e2, 2) * (-0.206949866441224393e-7) + pow(R - 0.200e2, 3) * 0.185843352924858993e-8 : 0.521671544254567310e-6 + R * (-0.203470938581826901e-7) + pow(R - 0.250e2, 2) * 0.718151629460641089e-8 + pow(R - 0.250e2, 3) * (-0.697361790993974418e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1982828266e2 * (R - 0.300e2) * (R - 0.250e2) + 0.2115028896e3 * R + 0.1242533356e5 - 0.1057514448e2 * R * R + 0.75000e3 * (0.3877465130e-1 * R - 0.1603848597e1) * R) * pow(R, -6));
}

static double radcoeff_7_6_7_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.137679126300000020e-1 + R * 0.216840434497100887e-18 + pow(R - 0.475e1, 2) * (-0.498628543702199986e-1) + pow(R - 0.475e1, 3) * 0.178456669960879971e0 : (R < 0.525e1 ? -0.567419477227749935e-1 + R * 0.852919843255499875e-2 + pow(R - 0.50e1, 2) * 0.839796481004399936e-1 + pow(R - 0.50e1, 3) * (-0.959318853386399717e-1) : (R < 0.55e1 ? -0.179005782058345025e0 + R * 0.325317939817800009e-1 + pow(R - 0.525e1, 2) * 0.120307340964600096e-1 + pow(R - 0.525e1, 3) * (-0.211386941103200651e-1) : (R < 0.575e1 ? -0.189869393736787462e0 + R * 0.345836558843249930e-1 + pow(R - 0.55e1, 2) * (-0.382328648628004223e-2) + pow(R - 0.55e1, 3) * (-0.577148152120796898e-1) : (R < 0.60e1 ? -0.117794409331290165e0 + R * 0.218504847889200299e-1 + pow(R - 0.575e1, 2) * (-0.471093978953398065e-1) + pow(R - 0.575e1, 3) * (-0.145243900013612235e-1) : (R < 0.625e1 ? 0.367024421440306156e-1 + R * (-0.442753728400510291e-2) + pow(R - 0.60e1, 2) * (-0.580026903963607246e-1) + pow(R - 0.60e1, 3) * 0.835870038895245582e-1 : (R < 0.65e1 ? 0.117688208235622566e0 + R * (-0.177563192528996106e-1) + pow(R - 0.625e1, 2) * 0.468756252078268883e-2 + pow(R - 0.625e1, 3) * 0.206879597872629932e-1 : (R < 0.675e1 ? 0.778564010815769314e-1 + R * (-0.115335455323964525e-1) + pow(R - 0.65e1, 2) * 0.202035323612299346e-1 + pow(R - 0.65e1, 3) * (-0.150885270065764729e-1) : (R < 0.70e1 ? 0.297928588932233826e-1 + R * (-0.426087816551457520e-2) + pow(R - 0.675e1, 2) * 0.888713710629757993e-2 + pow(R - 0.675e1, 3) * (-0.860220503455710883e-2) : (R < 0.725e1 ? 0.103993097445167042e-1 + R * (-0.143022305634524357e-2) + pow(R - 0.70e1, 2) * 0.243548333037974787e-2 + pow(R - 0.70e1, 3) * (-0.214486545039509115e-2) : (R < 0.75e1 ? 0.460506332900725932e-2 + R * (-0.614643663104449500e-3) + pow(R - 0.725e1, 2) * 0.826834242583429505e-3 + pow(R - 0.725e1, 3) * (-0.435997291862526368e-3) : (R < 0.775e1 ? 0.216242079348718782e-2 + R * (-0.282976034036958360e-3) + pow(R - 0.75e1, 2) * 0.499836273686534729e-3 + pow(R - 0.75e1, 3) * (-0.434452597514805206e-3) : (R < 0.80e1 ? 0.881320608987806470e-3 + R * (-0.114517759227716965e-3) + pow(R - 0.775e1, 2) * 0.173996825550430797e-3 + pow(R - 0.775e1, 3) * 0.328253760017482491e-4 : (R < 0.825e1 ? 0.147482940877390208e-3 + R * (-0.213645884521737760e-4) + pow(R - 0.80e1, 2) * 0.198615857551741987e-3 + pow(R - 0.80e1, 3) * (-0.263711812732187563e-3) : (R < 0.85e1 ? -0.255585267180399400e-3 + R * 0.284973754364120497e-4 + pow(R - 0.825e1, 2) * 0.831998002601293751e-6 + pow(R - 0.825e1, 3) * (-0.312876335529979605e-4) : (R < 0.875e1 ? -0.209693462115467447e-3 + R * 0.230469431465255822e-4 + pow(R - 0.85e1, 2) * (-0.226337271621471752e-4) + pow(R - 0.85e1, 3) * 0.114686713280179380e-3 : (R < 0.90e1 ? -0.298451422808999271e-3 + R * 0.332338383054856283e-4 + pow(R - 0.875e1, 2) * 0.633813077979873696e-4 + pow(R - 0.875e1, 3) * (-0.217989654575719450e-3) : (R < 0.925e1 ? -0.215254522418787140e-3 + R * 0.240514319715319060e-4 + pow(R - 0.90e1, 2) * (-0.100110933133802218e-3) + pow(R - 0.90e1, 3) * 0.134366751550698350e-3 : (R < 0.95e1 ? 0.105587557764226441e-4 + R * (-0.810268679613258724e-6) + pow(R - 0.925e1, 2) * 0.664130529221555250e-6 + pow(R - 0.925e1, 3) * (-0.309648405870740785e-4) : (R < 0.100e2 ? 0.621179405822492957e-4 + R * (-0.628411102507887251e-5) + pow(R - 0.95e1, 2) * (-0.225594999110840036e-4) + pow(R - 0.95e1, 3) * 0.344404662184834924e-4 : (R < 0.105e2 ? 0.280746263540025413e-4 + R * (-0.301326127230025426e-5) + pow(R - 0.100e2, 2) * 0.291011994166412384e-4 + pow(R - 0.100e2, 3) * (-0.278862119760814602e-4) : (R < 0.110e2 ? -0.540945248517388260e-4 + R * 0.517327916227988816e-5 + pow(R - 0.105e2, 2) * (-0.127281185474809519e-4) + pow(R - 0.105e2, 3) * 0.799160126264234954e-5 : (R < 0.120e2 ? 0.178009892747123117e-4 + R * (-0.156113843821930113e-5) + pow(R - 0.110e2, 2) * (-0.740716653517426924e-6) + pow(R - 0.110e2, 3) * 0.645177226736727824e-6 : (R < 0.140e2 ? 0.122562693695276541e-4 + R * (-0.110704006504397108e-5) + pow(R - 0.120e2, 2) * 0.119481502669275697e-5 + pow(R - 0.120e2, 3) * (-0.262575460385385652e-6) : (R < 0.160e2 ? -0.786203835683399719e-5 + R * 0.521314517102428334e-6 + pow(R - 0.140e2, 2) * (-0.380637735619557156e-6) + pow(R - 0.140e2, 3) * 0.850942299966714994e-7 : (R < 0.180e2 ? -0.681112539048120777e-6 + R * 0.198943345842575454e-7 + pow(R - 0.160e2, 2) * 0.129927644360471814e-6 + pow(R - 0.160e2, 3) * (-0.348783717013002923e-7) : (R < 0.200e2 ? -0.226149104168974261e-5 + R * 0.121064451610541268e-6 + pow(R - 0.180e2, 2) * (-0.793425858473299262e-7) + pow(R - 0.180e2, 3) * 0.147743453335296451e-7 : (R < 0.250e2 ? 0.340897365328453872e-6 + R * (-0.190137477764226954e-7) + pow(R - 0.200e2, 2) * 0.930348615384794423e-8 + pow(R - 0.200e2, 3) * (-0.851189960512680921e-9) : -0.262804588390141805e-6 + R * 0.101818667236056737e-7 + pow(R - 0.250e2, 2) * (-0.346436325384227010e-8) + pow(R - 0.250e2, 3) * 0.333224345024226965e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1260082886e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1344089084e3 * R - 0.7896384064e4 + 0.6720445420e1 * R * R + 0.75000e3 * (-0.2464136786e-1 * R + 0.1019252961e1) * R) * pow(R, -6));
}

static double radcoeff_7_6_7_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.366592020400001301e-1 + R * 0.277555756156289135e-16 + pow(R - 0.475e1, 2) * 0.123271269543236128e1 + pow(R - 0.475e1, 3) * (-0.245023171292944530e1) : (R < 0.525e1 ? -0.782589036796548121e0 + R * 0.156937901541909619e0 + pow(R - 0.50e1, 2) * (-0.604961089264722807e0) + pow(R - 0.50e1, 3) * 0.749406294628336855e0 : (R < 0.55e1 ? 0.416364065201026146e-1 + R * (-0.502896284763859266e-2) + pow(R - 0.525e1, 2) * (-0.429063682934701443e-1) + pow(R - 0.525e1, 3) * (-0.352540025439019578e-1) : (R < 0.575e1 ? 0.192752117642454035e0 + R * (-0.330922724713552802e-1) + pow(R - 0.55e1, 2) * (-0.693468702013966126e-1) + pow(R - 0.55e1, 3) * 0.140470555227270921e0 : (R < 0.60e1 ? 0.238540225159906610e0 + R * (-0.414274784669402818e-1) + pow(R - 0.575e1, 2) * 0.360060462190565853e-1 + pow(R - 0.575e1, 3) * 0.534877945628182416e-1 : (R < 0.625e1 ? 0.734344422983014417e-1 + R * (-0.133954938768835741e-1) + pow(R - 0.60e1, 2) * 0.761218921411702665e-1 + pow(R - 0.60e1, 3) * (-0.749655954305438466e-1) : (R < 0.65e1 ? -0.730098826674661361e-1 + R * 0.106094030504745827e-1 + pow(R - 0.625e1, 2) * 0.198976955682623746e-1 + pow(R - 0.625e1, 3) * (-0.464281904406428358e-1) : (R < 0.675e1 ? -0.805748706674040416e-1 + R * 0.118529651269852383e-1 + pow(R - 0.65e1, 2) * (-0.149234472622197523e-1) + pow(R - 0.65e1, 3) * 0.628919924111519257e-2 : (R < 0.70e1 ? -0.390024506626951151e-1 + R * 0.557046635358446167e-2 + pow(R - 0.675e1, 2) * (-0.102065478313833578e-1) + pow(R - 0.675e1, 3) * 0.870067455778205517e-2 : (R < 0.725e1 ? -0.152011298094384233e-1 + R * 0.209856891747691766e-2 + pow(R - 0.70e1, 2) * (-0.368104191304681689e-2) + pow(R - 0.70e1, 3) * 0.287258496615657973e-2 : (R < 0.75e1 ? -0.594745404248204525e-2 + R * 0.796657642107868273e-3 + pow(R - 0.725e1, 2) * (-0.152660318842938198e-2) + pow(R - 0.725e1, 3) * 0.134444683839163499e-2 : (R < 0.775e1 ? -0.218772616979706624e-2 + R * 0.285439830091608802e-3 + pow(R - 0.75e1, 2) * (-0.518268059635655686e-3) + pow(R - 0.75e1, 3) * 0.430180738196881990e-3 : (R < 0.80e1 ? -0.830214003597146361e-3 + R * 0.106964688685696308e-3 + pow(R - 0.775e1, 2) * (-0.195632505987994152e-3) + pow(R - 0.775e1, 3) * 0.877090267408355082e-4 : (R < 0.825e1 ? -0.190104097834847179e-3 + R * 0.255938782056058965e-4 + pow(R - 0.80e1, 2) * (-0.129850735932367521e-3) + pow(R - 0.80e1, 3) * 0.136061174679775727e-3 : (R < 0.85e1 ? 0.129070843161989293e-3 + R * (-0.138200195081199135e-4) + pow(R - 0.825e1, 2) * (-0.278048549225357222e-4) + pow(R - 0.825e1, 3) * 0.887966540600614908e-4 : (R < 0.875e1 ? 0.105371453461573078e-3 + R * (-0.110730743331262451e-4) + pow(R - 0.85e1, 2) * 0.387926356225103992e-4 + pow(R - 0.85e1, 3) * (-0.213579780296021681e-3) : (R < 0.90e1 ? 0.285145355320532215e-3 + R * (-0.317229653273751088e-4) + pow(R - 0.875e1, 2) * (-0.121392199599505861e-3) + pow(R - 0.875e1, 3) * 0.366566580980025238e-3 : (R < 0.925e1 ? 0.210969738467359723e-3 + R * (-0.236878311933733039e-4) + pow(R - 0.90e1, 2) * 0.153532736135513067e-3 + pow(R - 0.90e1, 3) * (-0.261985069448079401e-3) : (R < 0.95e1 ? -0.392365320370321487e-4 + R * 0.395633635286834035e-5 + pow(R - 0.925e1, 2) * (-0.429560659505464970e-4) + pow(R - 0.925e1, 3) * 0.105538404204292532e-3 : (R < 0.100e2 ? -0.242212178170494964e-4 + R * 0.226675416589994679e-5 + pow(R - 0.95e1, 2) * 0.361977372026729092e-4 + pow(R - 0.95e1, 3) * (-0.408179104049455964e-4) : (R < 0.105e2 ? -0.761170663066365626e-4 + R * 0.785105856486365695e-5 + pow(R - 0.100e2, 2) * (-0.250291284047454855e-4) + pow(R - 0.100e2, 3) * 0.176818270140363434e-4 : (R < 0.110e2 ? 0.433973404832229941e-4 + R * (-0.391669957935457093e-5) + pow(R - 0.105e2, 2) * 0.149361211630902969e-5 + pow(R - 0.105e2, 3) * (-0.653765747199775197e-6) : (R < 0.120e2 ? 0.326528569290991032e-4 + R * (-0.291341177344537264e-5) + pow(R - 0.110e2, 2) * 0.512963495509366897e-6 + pow(R - 0.110e2, 3) * 0.173170338936005834e-6 : (R < 0.140e2 ? 0.147937346694234570e-4 + R * (-0.136797376561862129e-5) + pow(R - 0.120e2, 2) * 0.103247451231738445e-5 + pow(R - 0.120e2, 3) * (-0.102214003129036843e-6) : (R < 0.160e2 ? -0.225406994704346380e-4 + R * 0.153535624610247409e-5 + pow(R - 0.140e2, 2) * 0.419190493543163344e-6 + pow(R - 0.140e2, 3) * (-0.252857997547200214e-6) : (R < 0.180e2 ? -0.116625753433959167e-5 + R * 0.177822249708724477e-6 + pow(R - 0.160e2, 2) * (-0.109795749174003805e-5) + pow(R - 0.160e2, 3) * 0.288004972442837846e-6 : (R < 0.200e2 ? 0.135898176353727136e-4 + R * (-0.757948047937373025e-6) + pow(R - 0.180e2, 2) * 0.630072342916989136e-6 + pow(R - 0.180e2, 3) * (-0.122076363324151284e-6) : (R < 0.250e2 ? -0.597396413511535479e-5 + R * 0.297424963840767739e-6 + pow(R - 0.200e2, 2) * (-0.102385837027918714e-6) + pow(R - 0.200e2, 3) * 0.874116902795303150e-8 : 0.176580339724854809e-5 + R * (-0.708457293419419276e-7) + pow(R - 0.250e2, 2) * 0.287316983913767731e-7 + pow(R - 0.250e2, 3) * (-0.288171354459767707e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.8148754656e1 * (R - 0.300e2) * (R - 0.250e2) - 0.8692131560e2 * R - 0.5106106630e4 + 0.4346065780e1 * R * R + 0.75000e3 * (-0.1593458278e-1 * R + 0.6590987638e0) * R) * pow(R, -6));
}

static double radcoeff_7_6_8_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.459442554600000396e-2 + R * (-0.867361737988403547e-18) + pow(R - 0.475e1, 2) * (-0.414526111566783720e-1) + pow(R - 0.475e1, 3) * 0.768275691707134833e-1 : (R < 0.525e1 ? 0.348097499111520298e-1 + R * (-0.632113635883040613e-2) + pow(R - 0.50e1, 2) * 0.161680657213567440e-1 + pow(R - 0.50e1, 3) * (-0.213049322801404789e-1) : (R < 0.55e1 ? 0.140182346465614616e-1 + R * (-0.223177830067837393e-2) + pow(R - 0.525e1, 2) * 0.189366511251383651e-3 + pow(R - 0.525e1, 3) * 0.114923662184845217e-2 : (R < 0.575e1 ? 0.123421187035085353e-1 + R * (-0.192161317845609752e-2) + pow(R - 0.55e1, 2) * 0.105129397763772275e-2 + pow(R - 0.55e1, 3) * (-0.186928633525333199e-2) : (R < 0.60e1 ? 0.113714711226091045e-1 + R * (-0.174645737749723560e-2) + pow(R - 0.575e1, 2) * (-0.350670773802276299e-3) + pow(R - 0.575e1, 3) * 0.996783823164877625e-3 : (R < 0.625e1 ? 0.112957594668297544e-1 + R * (-0.173489579755495933e-2) + pow(R - 0.60e1, 2) * 0.396917093571381866e-3 + pow(R - 0.60e1, 3) * 0.157873934979381935e-2 : (R < 0.65e1 ? 0.825478349456829595e-2 + R * (-0.124042362268292719e-2) + pow(R - 0.625e1, 2) * 0.158097160591674649e-2 + pow(R - 0.625e1, 3) * (-0.118716563194015039e-2) : (R < 0.675e1 ? 0.464374515163666016e-2 + R * (-0.672531375713332383e-3) + pow(R - 0.65e1, 2) * 0.690597381961633588e-3 + pow(R - 0.65e1, 3) * (-0.406142370833216851e-3) : (R < 0.70e1 ? 0.286381928743026978e-2 + R * (-0.403384379263743687e-3) + pow(R - 0.675e1, 2) * 0.385990603836720923e-3 + pow(R - 0.675e1, 3) * (-0.198836265206984335e-3) : (R < 0.725e1 ? 0.179484236818184964e-2 + R * (-0.247670877071692799e-3) + pow(R - 0.70e1, 2) * 0.236863404931482658e-3 + pow(R - 0.70e1, 3) * (-0.985254329788456848e-4) : (R < 0.75e1 ? 0.108341003867876672e-2 + R * (-0.147712693289485050e-3) + pow(R - 0.725e1, 2) * 0.162969330197348391e-3 + pow(R - 0.725e1, 3) * (-0.123396457576329050e-4) : (R < 0.775e1 ? 0.499620453457752566e-3 + R * (-0.685417117703670175e-4) + pow(R - 0.75e1, 2) * 0.153714595879123712e-3 + pow(R - 0.75e1, 3) * (-0.122734730230622519e-3) : (R < 0.80e1 ? 0.900147313751133404e-4 + R * (-0.146971757490468821e-4) + pow(R - 0.775e1, 2) * 0.616635482061568161e-4 + pow(R - 0.775e1, 3) * 0.936214991601229206e-4 : (R < 0.825e1 ? -0.291754902502436579e-3 + R * 0.336886294465545710e-4 + pow(R - 0.80e1, 2) * 0.131879672576249010e-3 + pow(R - 0.80e1, 3) * (-0.405639525609869170e-3) : (R < 0.85e1 ? -0.206380548753335916e-3 + R * 0.235710546828285965e-4 + pow(R - 0.825e1, 2) * (-0.172349971631152895e-3) + pow(R - 0.825e1, 3) * 0.418492245519353997e-3 : (R < 0.875e1 ? -0.145098117508113807e-3 + R * 0.158633649021310339e-4 + pow(R - 0.85e1, 2) * 0.141519212508362630e-3 + pow(R - 0.85e1, 3) * (-0.369908260371547032e-3) : (R < 0.90e1 ? -0.154298798346663658e-3 + R * 0.172651723366472771e-4 + pow(R - 0.875e1, 2) * (-0.135911982770297657e-3) + pow(R - 0.875e1, 3) * 0.243105571134834194e-3 : (R < 0.925e1 ? 0.423684984554812546e-4 + R * (-0.510852446072013946e-5) + pow(R - 0.90e1, 2) * 0.464171955808279879e-4 + pow(R - 0.90e1, 3) * (-0.113646762407789722e-3) : (R < 0.95e1 ? 0.259204165063421543e-4 + R * (-0.320869462176671914e-5) + pow(R - 0.925e1, 2) * (-0.388178762250143033e-4) + pow(R - 0.925e1, 3) * 0.877310165443247116e-4 : (R < 0.100e2 ? 0.529791352250233468e-4 + R * (-0.616806713221298396e-5) + pow(R - 0.95e1, 2) * 0.269803861832292406e-4 + pow(R - 0.95e1, 3) * (-0.187248223976065430e-4) : (R < 0.105e2 ? -0.719840648791134823e-4 + R * 0.676870225281134767e-5 + pow(R - 0.100e2, 2) * (-0.110684741318057649e-5) + pow(R - 0.100e2, 3) * (-0.270244192884238740e-6) : (R < 0.110e2 ? -0.585444863991597329e-4 + R * 0.545917169496759304e-5 + pow(R - 0.105e2, 2) * (-0.151221370250693466e-5) + pow(R - 0.105e2, 3) * (-0.184769071085650286e-5) : (R < 0.120e2 ? -0.272757020714010921e-4 + R * 0.256118995931828093e-5 + pow(R - 0.110e2, 2) * (-0.428374976879168895e-5) + pow(R - 0.110e2, 3) * 0.172328848787340843e-5 : (R < 0.140e2 ? 0.109354455352384695e-4 + R * (-0.836444114644872426e-6) + pow(R - 0.120e2, 2) * 0.886115694828536229e-6 + pow(R - 0.120e2, 3) * (-0.245096880653050017e-6) : (R < 0.160e2 ? 0.407293030864258952e-5 + R * (-0.233143903167327817e-6) + pow(R - 0.140e2, 2) * (-0.584465589089763872e-6) + pow(R - 0.140e2, 3) * 0.186763783461713872e-6 : (R < 0.180e2 ? 0.477632949687306626e-5 + R * (-0.329840857985816628e-6) + pow(R - 0.160e2, 2) * 0.536117111680519466e-6 + pow(R - 0.160e2, 3) * (-0.127189413593805570e-6) : (R < 0.200e2 ? -0.522423606989069768e-5 + R * 0.288354625610594294e-6 + pow(R - 0.180e2, 2) * (-0.227019369882313926e-6) + pow(R - 0.180e2, 3) * 0.436285789260083712e-7 : (R < 0.250e2 ? 0.190740573033121781e-5 + R * (-0.961799068065608873e-7) + pow(R - 0.200e2, 2) * 0.347521036737363082e-7 + pow(R - 0.200e2, 3) * (-0.300085269048482650e-8) : -0.660325387911005355e-6 + R * 0.262771781444402154e-7 + pow(R - 0.250e2, 2) * (-0.102606866835360877e-7) + pow(R - 0.250e2, 3) * 0.102063565892960885e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.5181569856e1 * (R - 0.300e2) * (R - 0.250e2) - 0.5526934672e2 * R - 0.3247232742e4 + 0.2763467336e1 * R * R + 0.75000e3 * (-0.1013301571e-1 * R + 0.4191424972e0) * R) * pow(R, -6));
}

static double radcoeff_7_6_9_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.338366998700000005e-1 + pow(R - 0.475e1, 2) * (-0.421414650441866434e0) + pow(R - 0.475e1, 3) * 0.705734834727465676e0 : (R < 0.525e1 ? 0.410435609557666947e0 + R * (-0.783820437095333888e-1) + pow(R - 0.50e1, 2) * 0.107886475603732906e0 + pow(R - 0.50e1, 3) * (-0.168793471222397407e0) : (R < 0.55e1 ? 0.297495191066798836e0 + R * (-0.560875817618664424e-1) + pow(R - 0.525e1, 2) * (-0.187086278130651484e-1) + pow(R - 0.525e1, 3) * 0.855219640821236748e-1 : (R < 0.575e1 ? 0.260916383546504538e0 + R * (-0.494065274030008258e-1) + pow(R - 0.55e1, 2) * 0.454328452485276146e-1 + pow(R - 0.55e1, 3) * 0.437959496139027765e-1 : (R < 0.60e1 ? 0.866033098202489415e-1 + R * (-0.184783642261302505e-1) + pow(R - 0.575e1, 2) * 0.782798074589547005e-1 + pow(R - 0.575e1, 3) * (-0.956700285773478057e-2) : (R < 0.625e1 ? -0.132730230795130938e0 + R * 0.188677264675218247e-1 + pow(R - 0.60e1, 2) * 0.711045553156536142e-1 + pow(R - 0.60e1, 3) * (-0.114072555782963631e0) : (R < 0.65e1 ? -0.218591538825268467e0 + R * 0.330313999160429528e-1 + pow(R - 0.625e1, 2) * (-0.144498615215691174e-1) + pow(R - 0.625e1, 3) * (-0.270412336584107023e-1) : (R < 0.675e1 ? -0.139998620979991495e0 + R * 0.207362378443063829e-1 + pow(R - 0.65e1, 2) * (-0.347307867653771432e-1) + pow(R - 0.65e1, 3) * 0.248373574246064238e-1 : (R < 0.70e1 ? -0.559995866004377382e-1 + R * 0.802784897873151659e-2 + pow(R - 0.675e1, 2) * (-0.161027686969223253e-1) + pow(R - 0.675e1, 3) * 0.148959507119850211e-1 : (R < 0.725e1 ? -0.199645052846728240e-1 + R * 0.276945538876754646e-2 + pow(R - 0.70e1, 2) * (-0.493080566293355779e-2) + pow(R - 0.70e1, 3) * 0.386741472265348610e-2 : (R < 0.75e1 ? -0.759534864403764963e-2 + R * 0.102919281779829648e-2 + pow(R - 0.725e1, 2) * (-0.203024462094344299e-2) + pow(R - 0.725e1, 3) * 0.166343129980102704e-2 : (R < 0.775e1 ? -0.242203075555450691e-2 + R * 0.325963876039267572e-3 + pow(R - 0.75e1, 2) * (-0.782671146092672656e-3) + pow(R - 0.75e1, 3) * 0.639022132542409714e-3 : (R < 0.80e1 ? -0.356691326605906075e-3 + R * 0.544449528446330454e-4 + pow(R - 0.775e1, 2) * (-0.303404546685865370e-3) + pow(R - 0.775e1, 3) * 0.256344541869332808e-3 : (R < 0.825e1 ? 0.457452646632397920e-3 + R * (-0.491927188977997416e-4) + pow(R - 0.80e1, 2) * (-0.111146140283865751e-3) + pow(R - 0.80e1, 3) * 0.119903248140258944e-3 : (R < 0.85e1 ? 0.725381992820831067e-3 + R * (-0.822839300134340599e-4) + pow(R - 0.825e1, 2) * (-0.212187041786715357e-4) + pow(R - 0.825e1, 3) * 0.155655380129631182e-3 : (R < 0.875e1 ? 0.568591669801943853e-3 + R * (-0.637078983284639761e-4) + pow(R - 0.85e1, 2) * 0.955228309185518574e-4 + pow(R - 0.85e1, 3) * (-0.117830392978783726e-3) : (R < 0.90e1 ? 0.348123850056212528e-3 + R * (-0.380396815527100002e-4) + pow(R - 0.875e1, 2) * 0.715003618446405898e-5 + pow(R - 0.875e1, 3) * 0.375327890335037419e-4 : (R < 0.925e1 ? 0.253645432822264183e-3 + R * (-0.274272655166960186e-4) + pow(R - 0.90e1, 2) * 0.352996279595918662e-4 + pow(R - 0.90e1, 3) * 0.181294191167688602e-4 : (R < 0.95e1 ? 0.614309411496797957e-4 + R * (-0.637818545250592467e-5) + pow(R - 0.925e1, 2) * 0.488966922971685131e-4 + pow(R - 0.925e1, 3) * (-0.636512784285792282e-4) : (R < 0.100e2 ? -0.553880155178373802e-4 + R * 0.613554599071972403e-5 + pow(R - 0.95e1, 2) * 0.115823347573408827e-5 + pow(R - 0.95e1, 3) * (-0.136219431143470729e-4) : (R < 0.105e2 ? 0.337810385620649121e-4 + R * (-0.292267786930649132e-5) + pow(R - 0.100e2, 2) * (-0.192746811957865209e-4) + pow(R - 0.100e2, 3) * 0.202531125087990072e-4 : (R < 0.110e2 ? 0.743848988756844274e-4 + R * (-0.700752468349375594e-5) + pow(R - 0.105e2, 2) * 0.111049875674119916e-4 + pow(R - 0.105e2, 3) * (-0.661437446484896021e-5) : (R < 0.120e2 ? 0.874807505330333284e-5 + R * (-0.863317964718484795e-6) + pow(R - 0.110e2, 2) * 0.118342587013855003e-5 + pow(R - 0.110e2, 3) * (-0.503420364820065100e-6) : (R < 0.140e2 ? -0.851007191181037433e-6 + R * (-0.672731890158021477e-8) + pow(R - 0.120e2, 2) * (-0.326835224321645323e-6) + pow(R - 0.120e2, 3) * 0.167712958373717707e-6 : (R < 0.160e2 ? -0.106896488662503187e-4 + R * 0.698487284296451365e-6 + pow(R - 0.140e2, 2) * 0.679442525920660971e-6 + pow(R - 0.140e2, 3) * (-0.261845987034443252e-6) : (R < 0.180e2 ? -0.327653880705241286e-5 + R * 0.274105543565775805e-6 + pow(R - 0.160e2, 2) * (-0.891633396285998750e-6) + pow(R - 0.160e2, 3) * 0.227829370751555433e-6 : (R < 0.200e2 ? 0.996602302357196846e-5 + R * (-0.558475592559553783e-6) + pow(R - 0.180e2, 2) * 0.475342828223333956e-6 + pow(R - 0.180e2, 3) * (-0.924090494592785318e-7) : (R < 0.250e2 ? -0.472113244684879198e-5 + R * 0.233987126822439633e-6 + pow(R - 0.200e2, 2) * (-0.791114685323372082e-7) + pow(R - 0.200e2, 3) * 0.672448818076985614e-8 : 0.131109365657983100e-5 + R * (-0.527909449431932441e-7) + pow(R - 0.250e2, 2) * 0.217558541792106314e-7 + pow(R - 0.250e2, 3) * (-0.218947259891439647e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1324477133e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1412776588e3 * R - 0.8299949372e4 + 0.7063882940e1 * R * R + 0.75000e3 * (-0.2590068870e-1 * R + 0.1071343731e1) * R) * pow(R, -6));
}

static double radcoeff_7_6_9_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.158497973400000651e-1 + R * (-0.138777878078144568e-16) + pow(R - 0.475e1, 2) * (-0.992844936442484505e0) + pow(R - 0.475e1, 3) * 0.205289400752993823e1 : (R < 0.525e1 ? 0.543397666726894268e0 + R * (-0.111504841809378849e0) + pow(R - 0.50e1, 2) * 0.546825569204969164e0 + pow(R - 0.50e1, 3) * (-0.690849093309815032e0) : (R < 0.55e1 ? -0.188582795216955923e0 + R * 0.323737377975154145e-1 + pow(R - 0.525e1, 2) * 0.286887492226079212e-1 + pow(R - 0.525e1, 3) * 0.225842492293216318e-1 : (R < 0.575e1 ? -0.288620936879244505e0 + R * 0.509526591393171871e-1 + pow(R - 0.55e1, 2) * 0.456269361445991450e-1 + pow(R - 0.55e1, 3) * (-0.138903545847471499e0) : (R < 0.60e1 ? -0.269361677324991056e0 + R * 0.477217123652158431e-1 + pow(R - 0.575e1, 2) * (-0.585507232410044931e-1) + pow(R - 0.575e1, 3) * (-0.393505410394355826e-1) : (R < 0.625e1 ? -0.537144213389165598e-1 + R * 0.110681242998194283e-1 + pow(R - 0.60e1, 2) * (-0.880636290205811800e-1) + pow(R - 0.60e1, 3) * 0.828891090452138213e-1 : (R < 0.65e1 ? 0.120139910203084788e0 + R * (-0.174219822644935650e-1) + pow(R - 0.625e1, 2) * (-0.258967972366708071e-1) + pow(R - 0.625e1, 3) * 0.606983101705802636e-1 : (R < 0.675e1 ? 0.129658296970993597e0 + R * (-0.189894477258451683e-1) + pow(R - 0.65e1, 2) * 0.196269353912643940e-1 + pow(R - 0.65e1, 3) * (-0.443288681553487274e-2) : (R < 0.70e1 ? 0.701851820068488952e-1 + R * (-0.100071463081257608e-1) + pow(R - 0.675e1, 2) * 0.163022702796132395e-1 + pow(R - 0.675e1, 3) * (-0.122444095004407734e-1) : (R < 0.725e1 ? 0.300255964917625177e-1 + R * (-0.415183794965178800e-2) + pow(R - 0.70e1, 2) * 0.711896315428265768e-2 + pow(R - 0.70e1, 3) * (-0.528016118590203011e-2) : (R < 0.75e1 ? 0.117595068481864025e-1 + R * (-0.158238659486708991e-2) + pow(R - 0.725e1, 2) * 0.315884226485613423e-2 + pow(R - 0.725e1, 3) * (-0.273814258155110008e-2) : (R < 0.775e1 ? 0.391900552394890394e-2 + R * (-0.516367196479853869e-3) + pow(R - 0.75e1, 2) * 0.110523532869280907e-2 + pow(R - 0.75e1, 3) * (-0.915705883093574993e-3) : (R < 0.80e1 ? 0.102162304025458345e-2 + R * (-0.135444385213494647e-3) + pow(R - 0.775e1, 2) * 0.418455916372627876e-3 + pow(R - 0.775e1, 3) * (-0.430059861114597431e-3) : (R < 0.825e1 ? 0.123229758793416658e-4 + R * (-0.685265098616770863e-5) + pow(R - 0.80e1, 2) * 0.959110205366798027e-4 + pow(R - 0.80e1, 3) * (-0.451243466880358541e-4) : (R < 0.85e1 ? -0.308218889184865084e-3 + R * 0.326420442781654680e-4 + pow(R - 0.825e1, 2) * 0.620677605206529105e-4 + pow(R - 0.825e1, 3) * (-0.687656954932590770e-4) : (R < 0.875e1 ? -0.459606773164799589e-3 + R * 0.507823566335058378e-4 + pow(R - 0.85e1, 2) * 0.104934889007085926e-4 + pow(R - 0.85e1, 3) * (-0.954484854189278302e-4) : (R < 0.90e1 ? -0.349756155243347749e-3 + R * 0.381325100678111693e-4 + pow(R - 0.875e1, 2) * (-0.610928751634872834e-4) + pow(R - 0.875e1, 3) * 0.563801531369704156e-4 : (R < 0.925e1 ? -0.172917090231245325e-3 + R * 0.181573511992494805e-4 + pow(R - 0.90e1, 2) * (-0.188077603107594717e-4) + pow(R - 0.90e1, 3) * 0.231889929990461649e-4 : (R < 0.95e1 ? -0.126962765530515845e-3 + R * 0.131014072311909027e-4 + pow(R - 0.925e1, 2) * (-0.141601556147484571e-5) + pow(R - 0.925e1, 3) * (-0.280794101891550388e-4) : (R < 0.100e2 ? -0.707474839708756287e-4 + R * 0.712851003998690785e-5 + pow(R - 0.95e1, 2) * (-0.224755732033411263e-4) + pow(R - 0.95e1, 3) * 0.161156297507346199e-4 : (R < 0.105e2 ? 0.295365853500325335e-4 + R * (-0.326034085030325314e-5) + pow(R - 0.100e2, 2) * 0.169787142276080390e-5 + pow(R - 0.100e2, 3) * 0.580463141169140588e-5 : (R < 0.110e2 ? -0.328524901738740888e-4 + R * 0.279100413122610390e-5 + pow(R - 0.105e2, 2) * 0.104048185402979123e-4 + pow(R - 0.105e2, 3) * (-0.116014278855002380e-4) : (R < 0.120e2 ? -0.504426879123871924e-4 + R * 0.449475175739883558e-5 + pow(R - 0.110e2, 2) * (-0.699732328795244640e-5) + pow(R - 0.110e2, 3) * 0.268504369155360963e-5 : (R < 0.140e2 ? 0.165192185061427201e-4 + R * (-0.144476374384522665e-5) + pow(R - 0.120e2, 2) * 0.105780778670838332e-5 + pow(R - 0.120e2, 3) * (-0.206671487767885002e-6) : (R < 0.160e2 ? -0.541934835983161072e-5 + R * 0.306409549773686466e-6 + pow(R - 0.140e2, 2) * (-0.182221139898926741e-6) + pow(R - 0.140e2, 3) * 0.587850551560417538e-7 : (R < 0.180e2 ? -0.530253011460768793e-5 + R * 0.282945652050480496e-6 + pow(R - 0.160e2, 2) * 0.170489191037323756e-6 + pow(R - 0.160e2, 3) * (-0.604684558062819989e-7) : (R < 0.200e2 ? -0.431835629743904449e-5 + R * 0.239280946524391374e-6 + pow(R - 0.180e2, 2) * (-0.192321543800368291e-6) + pow(R - 0.180e2, 3) * 0.370771552815862978e-7 : (R < 0.250e2 ? 0.169618100606092399e-5 + R * (-0.850793652980462021e-7) + pow(R - 0.200e2, 2) * 0.301413878891495026e-7 + pow(R - 0.200e2, 3) * (-0.259092545470805238e-8) : -0.551511723258622025e-6 + R * 0.220151044903448774e-7 + pow(R - 0.250e2, 2) * (-0.872249393147128472e-8) + pow(R - 0.250e2, 3) * 0.870435248280461886e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1730015968e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1845264608e2 * R - 0.1084418025e4 + 0.9226323040e0 * R * R + 0.75000e3 * (-0.3383604290e-2 * R + 0.1399666209e0) * R) * pow(R, -6));
}

static double radcoeff_7_6_10_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.361187364200000333e-1 + R * 0.693889390390722838e-17 + pow(R - 0.475e1, 2) * 0.375609851430955544e0 + pow(R - 0.475e1, 3) * (-0.703811687963822319e0) : (R < 0.525e1 ? -0.302841349441305474e0 + R * 0.558402342222611009e-1 + pow(R - 0.50e1, 2) * (-0.152248914541911168e0) + pow(R - 0.50e1, 3) * 0.219826765651467027e0 : (R < 0.55e1 ? -0.125660685152516827e0 + R * 0.209332955109555879e-1 + pow(R - 0.525e1, 2) * 0.126211596966891142e-1 + pow(R - 0.525e1, 3) * (-0.390621317620458777e-1) : (R < 0.575e1 ? -0.119907574266541000e0 + R * 0.199197256539165451e-1 + pow(R - 0.55e1, 2) * (-0.166754391248452975e-1) + pow(R - 0.55e1, 3) * 0.133430278287164864e-1 : (R < 0.60e1 ? -0.871848687959248525e-1 + R * 0.140838238093782368e-1 + pow(R - 0.575e1, 2) * (-0.666816825330793228e-2) + pow(R - 0.575e1, 3) * (-0.262503548882007942e-2) : (R < 0.625e1 ? -0.646849758064230451e-1 + R * 0.102575455285705067e-1 + pow(R - 0.60e1, 2) * (-0.863694486992299185e-2) + pow(R - 0.60e1, 3) * (-0.120342014543613424e-2) : (R < 0.65e1 ? -0.368428775991233443e-1 + R * 0.571343181633973424e-2 + pow(R - 0.625e1, 2) * (-0.953950997900009263e-2) + pow(R - 0.625e1, 3) * 0.659869352336461910e-2 : (R < 0.675e1 ? -0.143747426863586047e-1 + R * 0.218093186247055471e-2 + pow(R - 0.65e1, 2) * (-0.459048983647662810e-2) + pow(R - 0.65e1, 3) * 0.381429805837763761e-2 : (R < 0.70e1 ? -0.393661767600182212e-2 + R * 0.600867830178047771e-3 + pow(R - 0.675e1, 2) * (-0.172976629269339945e-2) + pow(R - 0.675e1, 3) * 0.160974733752483308e-2 : (R < 0.725e1 ? -0.781871232207803559e-4 + R * 0.378123096172543370e-4 + pow(R - 0.70e1, 2) * (-0.522455789549774530e-3) + pow(R - 0.70e1, 3) * 0.529971977123028714e-3 : (R < 0.75e1 ? 0.107091178279122151e-2 + R * (-0.124045839447065037e-3) + pow(R - 0.725e1, 2) * (-0.124976806707502940e-3) + pow(R - 0.725e1, 3) * 0.951471667830525267e-4 : (R < 0.775e1 ? 0.139944972871745626e-2 + R * (-0.168694149028994164e-3) + pow(R - 0.75e1, 2) * (-0.536164316202135383e-4) + pow(R - 0.75e1, 3) * 0.240653520864760842e-3 : (R < 0.80e1 ? 0.125792293802642658e-2 + R * (-0.150379829676958258e-3) + pow(R - 0.775e1, 2) * 0.126873709028357107e-3 + pow(R - 0.775e1, 3) * (-0.200694255042096505e-3) : (R < 0.825e1 ? 0.105626324355538245e-2 + R * (-0.124573147983172809e-3) + pow(R - 0.80e1, 2) * (-0.236469822532152749e-4) + pow(R - 0.80e1, 3) * 0.305379170983626066e-3 : (R < 0.85e1 ? 0.684717253390392053e-3 + R * (-0.791380445503505508e-4) + pow(R - 0.825e1, 2) * 0.205387395984504265e-3 + pow(R - 0.825e1, 3) * (-0.328974337372408166e-3) : (R < 0.875e1 ? 0.343820158871112119e-3 + R * (-0.381270348154249530e-4) + pow(R - 0.85e1, 2) * (-0.413433570448018599e-4) + pow(R - 0.85e1, 3) * 0.218706818506006668e-3 : (R < 0.90e1 ? 0.166714806054559216e-3 + R * (-0.177911848679496259e-4) + pow(R - 0.875e1, 2) * 0.122686756834703168e-3 + pow(R - 0.875e1, 3) * (-0.176365434571618650e-3) : (R < 0.925e1 ? -0.828467164750111551e-4 + R * 0.104836745672234615e-4 + pow(R - 0.90e1, 2) * (-0.958731909401081206e-5) + pow(R - 0.90e1, 3) * (-0.451985368595321545e-4) : (R < 0.95e1 ? 0.385804121187340837e-4 + R * (-0.278471064094422516e-5) + pow(R - 0.925e1, 2) * (-0.434862217386599280e-4) + pow(R - 0.925e1, 3) * 0.409718655297473046e-4 : (R < 0.100e2 ? 0.170081126442742385e-3 + R * (-0.168455967234465670e-4) + pow(R - 0.95e1, 2) * (-0.127573225913494444e-4) + pow(R - 0.95e1, 3) * 0.268467347084851653e-4 : (R < 0.105e2 ? 0.964703532333213937e-4 + R * (-0.946786828343213911e-5) + pow(R - 0.100e2, 2) * 0.275127794713783019e-4 + pow(R - 0.100e2, 3) * (-0.251302638786280430e-4) : (R < 0.110e2 ? 0.922390871106114715e-5 + R * (-0.802786721024871185e-6) + pow(R - 0.105e2, 2) * (-0.101826163465637643e-4) + pow(R - 0.105e2, 3) * 0.111484126812270129e-4 : (R < 0.120e2 ? 0.281061814014521260e-4 + R * (-0.262409355666837498e-5) + pow(R - 0.110e2, 2) * 0.654000267527675502e-5 + pow(R - 0.110e2, 3) * (-0.259512707960837931e-5) : (R < 0.140e2 ? -0.314844323433199503e-4 + R * 0.267053055505999585e-5 + pow(R - 0.120e2, 2) * (-0.124537856354838377e-5) + pow(R - 0.120e2, 3) * 0.104494561384192909e-6 : (R < 0.160e2 ? 0.165561231393251412e-4 + R * (-0.105704896252322448e-5) + pow(R - 0.140e2, 2) * (-0.618411195243226289e-6) + pow(R - 0.140e2, 3) * 0.253513202502419201e-6 : (R < 0.180e2 ? 0.701436559377357925e-5 + R * (-0.488535313467098698e-6) + pow(R - 0.160e2, 2) * 0.902668019771289127e-6 + pow(R - 0.160e2, 3) * (-0.219561604118869888e-6) : (R < 0.200e2 ? -0.869824609394914046e-5 + R * 0.487397516191618942e-6 + pow(R - 0.180e2, 2) * (-0.414701604941930253e-6) + pow(R - 0.180e2, 3) * 0.806161615355603909e-7 : (R < 0.250e2 ? 0.411612640538754831e-5 + R * (-0.204014965149377406e-6) + pow(R - 0.200e2, 2) * 0.689953642714320921e-7 + pow(R - 0.200e2, 3) * (-0.586498564751132237e-8) : -0.114410567253985858e-5 + R * 0.460647540015943445e-7 + pow(R - 0.250e2, 2) * (-0.189794204412377419e-7) + pow(R - 0.250e2, 3) * 0.190996266178377420e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1146467277e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1222908416e3 * R + 0.7184269236e4 - 0.6114542080e1 * R * R + 0.75000e3 * (0.2241938246e-1 * R - 0.927338932e0) * R) * pow(R, -6));
}

static double radcoeff_7_6_11_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.809742479999999987e-1 + pow(R - 0.475e1, 2) * (-0.142785746716573569e0) + pow(R - 0.475e1, 3) * 0.256048591346294208e0 : (R < 0.525e1 ? 0.192969710474283018e0 + R * (-0.233837624808566069e-1) + pow(R - 0.50e1, 2) * 0.492506967931471210e-1 + pow(R - 0.50e1, 3) * (-0.943305305188827103e-1) : (R < 0.55e1 ? 0.158147501382011196e0 + R * (-0.164453885565735633e-1) + pow(R - 0.525e1, 2) * (-0.214972010960149187e-1) + pow(R - 0.525e1, 3) * (-0.117765607907633438e-1) : (R < 0.575e1 ? 0.227881798880670339e0 + R * (-0.294020942528491480e-1) + pow(R - 0.55e1, 2) * (-0.303296216890874271e-1) + pow(R - 0.55e1, 3) * (-0.342054330380639343e-1) : (R < 0.60e1 ? 0.349527132484171610e0 + R * (-0.509804237920298414e-1) + pow(R - 0.575e1, 2) * (-0.559836964676353813e-1) + pow(R - 0.575e1, 3) * 0.245819230230190436e-1 : (R < 0.625e1 ? 0.486708670004188770e0 + R * (-0.743631614590314627e-1) + pow(R - 0.60e1, 2) * (-0.375472542003710968e-1) + pow(R - 0.60e1, 3) * 0.123831609745987808e0 : (R < 0.65e1 ? 0.458516837224026863e0 + R * (-0.699183617318442918e-1) + pow(R - 0.625e1, 2) * 0.553264531091197664e-1 + pow(R - 0.625e1, 3) * 0.175835099930296904e-1 : (R < 0.675e1 ? 0.261008607477343779e0 + R * (-0.389582270535913516e-1) + pow(R - 0.65e1, 2) * 0.685140856038920359e-1 + pow(R - 0.65e1, 3) * (-0.495779946141065159e-1) : (R < 0.70e1 ? 0.960281921820845402e-1 + R * (-0.139970582417903028e-1) + pow(R - 0.675e1, 2) * 0.313305896433121456e-1 + pow(R - 0.675e1, 3) * (-0.284281492646037415e-1) : (R < 0.725e1 ? 0.251970463603320288e-1 + R * (-0.366204140724743239e-2) + pow(R - 0.70e1, 2) * 0.100094776948593377e-1 + pow(R - 0.70e1, 3) * (-0.886951479147843336e-2) : (R < 0.75e1 ? 0.145669257344478026e-2 + R * (-0.320336583219969718e-3) + pow(R - 0.725e1, 2) * 0.335734160125051228e-2 + pow(R - 0.725e1, 3) * (-0.356999751508253272e-2) : (R < 0.775e1 ? -0.595897678675483614e-2 + R * 0.688959683327311457e-3 + pow(R - 0.75e1, 2) * 0.679843464938612637e-3 + pow(R - 0.75e1, 3) * (-0.111939660739143374e-2) : (R < 0.80e1 ? -0.694174737370810944e-2 + R * 0.818994551910723909e-3 + pow(R - 0.775e1, 2) * (-0.159703990604962695e-3) + pow(R - 0.775e1, 3) * (-0.251161565751732913e-3) : (R < 0.825e1 ? -0.594009496153834107e-2 + R * 0.692049763029792589e-3 + pow(R - 0.80e1, 2) * (-0.348075164918762393e-3) + pow(R - 0.80e1, 3) * (-0.150969238401631184e-3) : (R < 0.85e1 ? -0.429486795775337049e-2 + R * 0.489705448370105585e-3 + pow(R - 0.825e1, 2) * (-0.461302093719985788e-3) + pow(R - 0.825e1, 3) * 0.306895063358254741e-3 : (R < 0.875e1 ? -0.284748421216317630e-2 + R * 0.316597225889785451e-3 + pow(R - 0.85e1, 2) * (-0.231130796201294719e-3) + pow(R - 0.85e1, 3) * 0.968921728861177076e-5 : (R < 0.90e1 ? -0.186647763163908680e-2 + R * 0.202848556030752792e-3 + pow(R - 0.875e1, 2) * (-0.223863883234835890e-3) + pow(R - 0.875e1, 3) * 0.598381238072988910e-4 : (R < 0.925e1 ? -0.973123513024830625e-3 + R * 0.102136262627203404e-3 + pow(R - 0.90e1, 2) * (-0.178985290379361718e-3) + pow(R - 0.90e1, 3) * 0.225172001402192346e-3 : (R < 0.95e1 ? -0.543517503079011047e-3 + R * 0.548633677004336249e-4 + pow(R - 0.925e1, 2) * (-0.101062893277174403e-4) + pow(R - 0.925e1, 3) * (-0.456187514960681967e-4) : (R < 0.100e2 ? -0.415598663745090074e-3 + R * 0.412567071310621127e-4 + pow(R - 0.95e1, 2) * (-0.443203529497685896e-4) + pow(R - 0.95e1, 3) * 0.284374522552887258e-4 : (R < 0.105e2 ? -0.193201432867600673e-3 + R * 0.182644433727600657e-4 + pow(R - 0.100e2, 2) * (-0.166417456683549630e-5) + pow(R - 0.100e2, 3) * (-0.527211078936927413e-5) : (R < 0.110e2 ? -0.135284784939924962e-3 + R * 0.126461857138976147e-4 + pow(R - 0.105e2, 2) * (-0.957234075088940793e-5) + pow(R - 0.105e2, 3) * (-0.657362793811646530e-6) : (R < 0.120e2 ? -0.270410491681441900e-4 + R * 0.258082286764947180e-5 + pow(R - 0.110e2, 2) * (-0.105583849416068778e-4) + pow(R - 0.110e2, 3) * 0.473728992395740507e-5 : (R < 0.140e2 ? 0.499966571503048082e-4 + R * (-0.432407724369206780e-5) + pow(R - 0.120e2, 2) * 0.365348483026533780e-5 + pow(R - 0.120e2, 3) * (-0.674549573584651999e-6) : (R < 0.160e2 ? -0.320566222499484461e-4 + R * 0.219526719435346026e-5 + pow(R - 0.140e2, 2) * (-0.393812611242573771e-6) + pow(R - 0.140e2, 3) * (-0.517063540920781859e-7) : (R < 0.180e2 ? 0.108610357754836386e-5 + R * (-0.459499721772736881e-9) + pow(R - 0.160e2, 2) * (-0.704050735795042886e-6) + pow(R - 0.160e2, 3) * 0.192975476327964618e-6 : (R < 0.200e2 ? 0.882265453579463821e-5 + R * (-0.500956726966368761e-6) + pow(R - 0.180e2, 2) * 0.453802122172744874e-6 + pow(R - 0.180e2, 3) * (-0.889735991822802472e-7) : (R < 0.250e2 ? -0.502443173904495178e-5 + R * 0.246568571537247609e-6 + pow(R - 0.200e2, 2) * (-0.800394729209366756e-7) + pow(R - 0.200e2, 3) * 0.673350525949742928e-8 : 0.120081546404529783e-5 + R * (-0.488132632098119102e-7) + pow(R - 0.250e2, 2) * 0.209631059715247652e-7 + pow(R - 0.250e2, 3) * (-0.212753443231247654e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2977929866e2 * (R - 0.300e2) * (R - 0.250e2) - 0.3176459536e3 * R - 0.1866165603e5 + 0.1588229768e2 * R * R + 0.75000e3 * (-0.582350082e-1 * R + 0.2408810567e1) * R) * pow(R, -6));
}

static double radcoeff_7_6_11_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.432740694899999973e-1 + pow(R - 0.475e1, 2) * 0.523696618262372682e0 + pow(R - 0.475e1, 3) * (-0.107365240968949083e1) : (R < 0.525e1 ? -0.330011261322034066e0 + R * 0.605384823144068107e-1 + pow(R - 0.50e1, 2) * (-0.281542689004745494e0) + pow(R - 0.50e1, 3) * 0.378256978828472923e0 : (R < 0.55e1 ? 0.250054310125430619e-1 + R * (-0.930967865762724958e-2) + pow(R - 0.525e1, 2) * 0.215004511660922375e-2 + pow(R - 0.525e1, 3) * (-0.194817366644008741e-1) : (R < 0.575e1 ? 0.390133235614379126e-1 + R * (-0.118874817238978029e-1) + pow(R - 0.55e1, 2) * (-0.124612573816914336e-1) + pow(R - 0.55e1, 3) * 0.704166455891305776e-1 : (R < 0.60e1 ? -0.757075991006196658e-3 + R * (-0.491498936678153118e-2) + pow(R - 0.575e1, 2) * 0.403512268101565083e-1 + pow(R - 0.575e1, 3) * 0.229715306278784961e-1 : (R < 0.625e1 ? -0.144772846536143668e0 + R * 0.195677860310239440e-1 + pow(R - 0.60e1, 2) * 0.575798747810653821e-1 + pow(R - 0.60e1, 3) * (-0.602862893806445713e-1) : (R < 0.65e1 ? -0.251405190956786095e0 + R * 0.370540441626857758e-1 + pow(R - 0.625e1, 2) * 0.123651577455819537e-1 + pow(R - 0.625e1, 3) * (-0.566031603053002777e-1) : (R < 0.675e1 ? -0.222718454028514201e0 + R * 0.326235304782329510e-1 + pow(R - 0.65e1, 2) * (-0.300872124833932580e-1) + pow(R - 0.65e1, 3) * 0.375451837784589616e-2 : (R < 0.70e1 ? -0.127747710649581375e0 + R * 0.182838964323824259e-1 + pow(R - 0.675e1, 2) * (-0.272713237000088357e-1) + pow(R - 0.675e1, 3) * 0.171739753699165151e-1 : (R < 0.725e1 ? -0.562750347386614808e-1 + R * 0.786835496423735417e-2 + pow(R - 0.70e1, 2) * (-0.143908421725714494e-1) + pow(R - 0.70e1, 3) * 0.105497567184881132e-1 : (R < 0.75e1 ? -0.191838950894040947e-1 + R * 0.265101326266815093e-2 + pow(R - 0.725e1, 2) * (-0.647852463370536449e-2) + pow(R - 0.725e1, 3) * 0.559198235133103773e-2 : (R < 0.775e1 ? -0.307068595997529031e-2 + R * 0.460247636690038744e-3 + pow(R - 0.75e1, 2) * (-0.228453787020708532e-2) + pow(R - 0.75e1, 3) * 0.228486275298772157e-2 : (R < 0.80e1 ? 0.235462446276937234e-2 + R * (-0.253609532228306150e-3) + pow(R - 0.775e1, 2) * (-0.570890805466294144e-3) + pow(R - 0.775e1, 3) * 0.847964351918074747e-3 : (R < 0.825e1 ? 0.334380992441451422e-2 + R * (-0.380061618976814254e-3) + pow(R - 0.80e1, 2) * 0.650824584722619839e-4 + pow(R - 0.80e1, 3) * 0.325619641399799593e-4 : (R < 0.85e1 ? 0.302955192928160491e-2 + R * (-0.341415021464436968e-3) + pow(R - 0.825e1, 2) * 0.895039315772469567e-4 + pow(R - 0.825e1, 3) * 0.219496789922003365e-3 : (R < 0.875e1 ? 0.230836084420622204e-2 + R * (-0.255507407565437866e-3) + pow(R - 0.85e1, 2) * 0.254126524018749480e-3 + pow(R - 0.85e1, 3) * (-0.196701320307992585e-3) : (R < 0.90e1 ? 0.153207985487585261e-2 + R * (-0.165325643113811737e-3) + pow(R - 0.875e1, 2) * 0.106600533787755021e-3 + pow(R - 0.875e1, 3) * (-0.390765442100320494e-4) : (R < 0.925e1 ? 0.112437108354383709e-2 + R * (-0.119352228259315236e-3) + pow(R - 0.90e1, 2) * 0.772931256302309837e-4 + pow(R - 0.90e1, 3) * 0.932449128281199265e-4 : (R < 0.95e1 ? 0.611456503932577330e-3 + R * (-0.632222442889272747e-4) + pow(R - 0.925e1, 2) * 0.147226810251320929e-3 + pow(R - 0.925e1, 3) * (-0.174405941022447337e-3) : (R < 0.100e2 ? 0.229266320497269020e-3 + R * (-0.223099531049756862e-4) + pow(R - 0.95e1, 2) * 0.164223544844854186e-4 + pow(R - 0.95e1, 3) * (-0.146024738210680847e-4) : (R < 0.105e2 ? 0.176841608703913374e-3 + R * (-0.168394539862913353e-4) + pow(R - 0.100e2, 2) * (-0.548135624711671176e-5) + pow(R - 0.100e2, 3) * 0.151106890153987548e-4 : (R < 0.110e2 ? 0.115917670367319308e-3 + R * (-0.109877934718589810e-4) + pow(R - 0.105e2, 2) * 0.171846772759814188e-4 + pow(R - 0.105e2, 3) * (-0.842899245652691448e-5) : (R < 0.120e2 ? -0.332046639999766589e-6 + R * (-0.124860538272748487e-6) + pow(R - 0.110e2, 2) * 0.454118859119104621e-5 + pow(R - 0.110e2, 3) * (-0.221221054391829763e-5) : (R < 0.140e2 ? -0.273520152000534132e-4 + R * 0.232088501235445103e-5 + pow(R - 0.120e2, 2) * (-0.209544304056384711e-5) + pow(R - 0.120e2, 3) * 0.384008977743310696e-6 : (R < 0.160e2 ? 0.201695864703369237e-4 + R * (-0.145277941698120865e-5) + pow(R - 0.140e2, 2) * 0.208610825896017089e-6 + pow(R - 0.140e2, 3) * 0.773663794222936007e-7 : (R < 0.180e2 ? -0.658247689672612505e-5 + R * 0.310060439670382813e-6 + pow(R - 0.160e2, 2) * 0.672809102429778720e-6 + pow(R - 0.160e2, 3) * (-0.199083346757485042e-6) : (R < 0.200e2 ? -0.109241597363941820e-4 + R * 0.612296688299676763e-6 + pow(R - 0.180e2, 2) * (-0.521690978115131692e-6) + pow(R - 0.180e2, 3) * 0.101434112407646652e-6 : (R < 0.250e2 ? 0.519164052178180327e-5 + R * (-0.257257875269090174e-6) + pow(R - 0.200e2, 2) * 0.869136963307482364e-7 + pow(R - 0.200e2, 3) * (-0.738630049378603951e-8) : -0.143791528851098026e-5 + R * 0.579065510044392098e-7 + pow(R - 0.250e2, 2) * (-0.238808110760423529e-7) + pow(R - 0.250e2, 3) * 0.240367741103090192e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1487456525e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1586616996e3 * R + 0.9321641248e4 - 0.7933084980e1 * R * R + 0.75000e3 * (0.2908848572e-1 * R - 0.1203212466e1) * R) * pow(R, -6));
}

static double radcoeff_7_6_12_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.821669582300000451e-2 + R * 0.867361737988403547e-18 + pow(R - 0.475e1, 2) * (-0.546648573141177846e-1) + pow(R - 0.475e1, 3) * 0.112351161096471142e0 : (R < 0.525e1 ? 0.214551672443527644e-1 + R * (-0.626658595147055325e-2) + pow(R - 0.50e1, 2) * 0.295985135082355647e-1 + pow(R - 0.50e1, 3) * (-0.453020885374133958e-1) : (R < 0.55e1 ? -0.105046253498816376e-1 + R * 0.385292018822165747e-4 + pow(R - 0.525e1, 2) * (-0.437805289482448481e-2) + pow(R - 0.525e1, 3) * 0.164139273891824727e-1 : (R < 0.575e1 ? -0.154090031996792845e-1 + R * 0.927114139941687945e-3 + pow(R - 0.55e1, 2) * 0.793239264706237061e-2 + pow(R - 0.55e1, 3) * (-0.890178268331648544e-2) : (R < 0.60e1 ? -0.282607134185184315e-1 + R * 0.322422621035103191e-2 + pow(R - 0.575e1, 2) * 0.125605563457500654e-2 + pow(R - 0.575e1, 3) * 0.348965646408346333e-2 : (R < 0.625e1 ? -0.358217144849251115e-1 + R * 0.450656461465418542e-2 + pow(R - 0.60e1, 2) * 0.387329798263760404e-2 + pow(R - 0.60e1, 3) * 0.917079002982620559e-3 : (R < 0.65e1 ? -0.487440621539514257e-1 + R * 0.661516591903222803e-2 + pow(R - 0.625e1, 2) * 0.456110723487456945e-2 + pow(R - 0.625e1, 3) * (-0.744243250801391882e-2) : (R < 0.675e1 ? -0.543284148539098719e-1 + R * 0.750026344121690336e-2 + pow(R - 0.65e1, 2) * (-0.102071714613586988e-2) + pow(R - 0.65e1, 3) * (-0.352730237892698133e-2) : (R < 0.70e1 ? -0.465381613336760744e-1 + R * 0.632853567210015910e-2 + pow(R - 0.675e1, 2) * (-0.366619393033110587e-2) + pow(R - 0.675e1, 3) * 0.248328231721867577e-3 : (R < 0.725e1 ? -0.342576703736772042e-1 + R * 0.454200025038245699e-2 + pow(R - 0.70e1, 2) * (-0.347994775653970518e-2) + pow(R - 0.70e1, 3) * 0.111229812403951288e-2 : (R < 0.75e1 ? -0.233550070951825950e-1 + R * 0.301058227037001276e-2 + pow(R - 0.725e1, 2) * (-0.264572416351007041e-2) + pow(R - 0.725e1, 3) * 0.111919042092007608e-2 : (R < 0.775e1 ? -0.151552734213311890e-1 + R * 0.189756839253749175e-2 + pow(R - 0.75e1, 2) * (-0.180633134782001324e-2) + pow(R - 0.75e1, 3) * 0.848676544280183888e-3 : (R < 0.80e1 ? -0.948860769017015326e-2 + R * 0.115352957068001966e-2 + pow(R - 0.775e1, 2) * (-0.116982393960987532e-2) + pow(R - 0.775e1, 3) * 0.550333001959185924e-3 : (R < 0.825e1 ? -0.569932647773943590e-2 + R * 0.671805038742429440e-3 + pow(R - 0.80e1, 2) * (-0.757074188140485879e-3) + pow(R - 0.80e1, 3) * 0.455280068683072215e-3 : (R < 0.85e1 ? -0.332086019358966613e-2 + R * 0.378632957550262554e-3 + pow(R - 0.825e1, 2) * (-0.415614136628181718e-3) + pow(R - 0.825e1, 3) * 0.309966588908525196e-3 : (R < 0.875e1 ? -0.206964201958042150e-2 + R * 0.228944624656520190e-3 + pow(R - 0.85e1, 2) * (-0.183139194946787794e-3) + pow(R - 0.85e1, 3) * (-0.226517740771721666e-4) : (R < 0.90e1 ? -0.124304510849699472e-2 + R * 0.133127819543656545e-3 + pow(R - 0.875e1, 2) * (-0.200128025504666920e-3) + pow(R - 0.875e1, 3) * 0.193869391240163039e-3 : (R < 0.925e1 ? -0.679102383799682903e-3 + R * 0.694143176488536552e-4 + pow(R - 0.90e1, 2) * (-0.547259820745446540e-4) + pow(R - 0.90e1, 3) * 0.113979625436520243e-3 : (R < 0.95e1 ? -0.625317571803592014e-3 + R * 0.634225063809288643e-4 + pow(R - 0.925e1, 2) * 0.307587370028455313e-4 + pow(R - 0.925e1, 3) * (-0.984869803462440222e-4) : (R < 0.100e2 ? -0.595608076830593286e-3 + R * 0.603355660674308690e-4 + pow(R - 0.95e1, 2) * (-0.431064982568374853e-4) + pow(R - 0.95e1, 3) * 0.832809776395148098e-5 : (R < 0.105e2 ? -0.236739439832570021e-3 + R * 0.234751411335570012e-4 + pow(R - 0.100e2, 2) * (-0.306143516109102639e-4) + pow(R - 0.100e2, 3) * 0.811906784759252395e-5 : (R < 0.110e2 ? 0.141348883604181193e-4 + R * (-0.104990959165886845e-5) + pow(R - 0.105e2, 2) * (-0.184357498395214771e-4) + pow(R - 0.105e2, 3) * 0.190971599496784244e-4 : (R < 0.120e2 ? 0.571547745436367698e-4 + R * (-0.516278946892152468e-5) + pow(R - 0.110e2, 2) * 0.102099900849961646e-4 + pow(R - 0.110e2, 3) * (-0.415243739757463929e-5) : (R < 0.140e2 ? -0.323396884961626256e-4 + R * 0.279987850834688502e-5 + pow(R - 0.120e2, 2) * (-0.224732210772775451e-5) + pow(R - 0.120e2, 3) * 0.408362414152155923e-6 : (R < 0.160e2 ? 0.191830748413356629e-4 + R * (-0.128906095273826152e-5) + pow(R - 0.140e2, 2) * 0.202852377185181188e-6 + pow(R - 0.140e2, 3) * 0.288660002169747837e-7 : (R < 0.180e2 ? 0.170058817030142974e-5 + R * (-0.131259441393839360e-6) + pow(R - 0.160e2, 2) * 0.376048378487029891e-6 + pow(R - 0.160e2, 3) * (-0.958551424700550902e-7) : (R < 0.200e2 ? -0.393283193304514216e-5 + R * 0.222672362913618988e-6 + pow(R - 0.180e2, 2) * (-0.199082476333300677e-6) + pow(R - 0.180e2, 3) * 0.389647966382455855e-7 : (R < 0.250e2 ? 0.215760344821273329e-5 + R * (-0.106079982760636667e-6) + pow(R - 0.200e2, 2) * 0.347063034961728362e-7 + pow(R - 0.200e2, 3) * (-0.292568469600910007e-8) : -0.531366620410229432e-6 + R * 0.215567000004091759e-7 + pow(R - 0.250e2, 2) * (-0.917896694396366856e-8) + pow(R - 0.250e2, 3) * 0.929977007976366786e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1152121376e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1228925748e3 * R + 0.7220246210e4 - 0.6144628740e1 * R * R + 0.75000e3 * (0.2253089099e-1 * R - 0.931967568e0) * R) * pow(R, -6));
}

static double radcoeff_7_6_13_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.420151746500000006e-1 + pow(R - 0.475e1, 2) * (-0.304946104785460748e0) + pow(R - 0.475e1, 3) * 0.547013177541842865e0 : (R < 0.525e1 ? 0.281043532018174058e0 + R * (-0.499080816036348157e-1) + pow(R - 0.50e1, 2) * 0.105313778370921443e0 + pow(R - 0.50e1, 3) * (-0.747818091055286738e-1) : (R < 0.55e1 ? 0.836218525136688123e-1 + R * (-0.112727816254607274e-1) + pow(R - 0.525e1, 2) * 0.492274215417749308e-1 + pow(R - 0.525e1, 3) * (-0.460015334397280845e-1) : (R < 0.575e1 ? -0.195653548012747480e-2 + R * 0.471564162547772302e-2 + pow(R - 0.55e1, 2) * 0.147262714619788675e-1 + pow(R - 0.55e1, 3) * 0.247778903844409690e-1 : (R < 0.60e1 ? -0.697006825004115593e-1 + R * 0.167246318035498380e-1 + pow(R - 0.575e1, 2) * 0.333096892503095959e-1 + pow(R - 0.575e1, 3) * (-0.445267762580357912e-1) : (R < 0.625e1 ? -0.118151002261937560e0 + R * 0.250307058803229260e-1 + pow(R - 0.60e1, 2) * (-0.853929432172476045e-4) + pow(R - 0.60e1, 3) * (-0.760073255122978159e-1) : (R < 0.65e1 ? -0.300060162497403776e-1 + R * 0.107366358751584609e-1 + pow(R - 0.625e1, 2) * (-0.570908870774406163e-1) + pow(R - 0.625e1, 3) * 0.300854934722708878e-2 : (R < 0.675e1 ? 0.148351525376218984e0 + R * (-0.172447046609567681e-1) + pow(R - 0.65e1, 2) * (-0.548344750670202996e-1) + pow(R - 0.65e1, 3) * 0.599113553233894952e-1 : (R < 0.70e1 ? 0.255101529881486822e0 + R * (-0.334285630713313867e-1) + pow(R - 0.675e1, 2) * (-0.990095857447817126e-2) + pow(R - 0.675e1, 3) * 0.319139883992148321e-1 : (R < 0.725e1 ? 0.247747621276023844e0 + R * (-0.323951695337176895e-1) + pow(R - 0.70e1, 2) * 0.140345327249329511e-1 + pow(R - 0.70e1, 3) * 0.365764659975123269e-2 : (R < 0.75e1 ? 0.192834635825034489e0 + R * (-0.246920944337978600e-1) + pow(R - 0.725e1, 2) * 0.167777676747463758e-1 + pow(R - 0.725e1, 3) * (-0.340492366221976667e-2) : (R < 0.775e1 ? 0.135701589492181585e0 + R * (-0.169416337830908779e-1) + pow(R - 0.75e1, 2) * 0.142240749280815506e-1 + pow(R - 0.75e1, 3) * (-0.550290990287215231e-2) : (R < 0.80e1 ? 0.893827368142493944e-1 + R * (-0.108613919258386312e-1) + pow(R - 0.775e1, 2) * 0.100968925009274364e-1 + pow(R - 0.775e1, 3) * (-0.442104555829165961e-2) : (R < 0.825e1 ? 0.561887120924367961e-1 + R * (-0.664189171755459953e-2) + pow(R - 0.80e1, 2) * 0.678110833220869121e-2 + pow(R - 0.80e1, 3) * (-0.357254863196116443e-2) : (R < 0.85e1 ? 0.341109245855295215e-1 + R * (-0.392119041994297250e-2) + pow(R - 0.825e1, 2) * 0.410169685823781778e-2 + pow(R - 0.825e1, 3) * (-0.211337456986371124e-2) : (R < 0.875e1 ? 0.202702382347248328e-1 + R * (-0.226659972267350979e-2) + pow(R - 0.85e1, 2) * 0.251666593084003435e-2 + pow(R - 0.85e1, 3) * (-0.148527352378398413e-2) : (R < 0.90e1 ? 0.118306858841261599e-1 + R * (-0.128675554296298978e-2) + pow(R - 0.875e1, 2) * 0.140271078800204615e-2 + pow(R - 0.875e1, 3) * (-0.784630042200349905e-3) : (R < 0.925e1 ? 0.691796011417078905e-2 + R * (-0.732518281874532107e-3) + pow(R - 0.90e1, 2) * 0.814238256351783665e-3 + pow(R - 0.90e1, 3) * (-0.460955254614620817e-3) : (R < 0.95e1 ? 0.399526491343465615e-2 + R * (-0.411828263938881752e-3) + pow(R - 0.925e1, 2) * 0.468521815390818025e-3 + pow(R - 0.925e1, 3) * (-0.362055038541163874e-3) : (R < 0.100e2 ? 0.243832233121443970e-2 + R * (-0.245452675969940999e-3) + pow(R - 0.95e1, 2) * 0.196980536484945120e-3 + pow(R - 0.95e1, 3) * (-0.635759159701262044e-4) : (R < 0.105e2 ? 0.986634480765905290e-3 + R * (-0.961540764625905194e-4) + pow(R - 0.100e2, 2) * 0.101616662529755800e-3 + pow(R - 0.100e2, 3) * (-0.400813524891495068e-4) : (R < 0.110e2 ? 0.255694171624817055e-3 + R * (-0.245984282996968600e-4) + pow(R - 0.105e2, 2) * 0.414946337960315394e-4 + pow(R - 0.105e2, 3) * (-0.209668989532756244e-4) : (R < 0.120e2 ? -0.200170876871575042e-4 + R * 0.117103128137795517e-5 + pow(R - 0.110e2, 2) * 0.100442853661181011e-4 + pow(R - 0.110e2, 3) * (-0.503690669049605672e-5) : (R < 0.140e2 ? -0.747439169403118592e-4 + R * 0.614888194212598815e-5 + pow(R - 0.120e2, 2) * (-0.506643470537006816e-5) + pow(R - 0.120e2, 3) * 0.112608920690353695e-5 : (R < 0.160e2 ? 0.853641463466575144e-5 + R * (-0.603786396511839390e-6) + pow(R - 0.140e2, 2) * 0.169010053605115461e-5 + pow(R - 0.140e2, 3) * (-0.486125902147617339e-6) : (R < 0.180e2 ? -0.342245153274190663e-5 + R * 0.323104921921369179e-6 + pow(R - 0.160e2, 2) * (-0.122665487683455006e-5) + pow(R - 0.160e2, 3) * 0.314420588436932676e-6 : (R < 0.200e2 ? 0.145905976974254893e-4 + R * (-0.810467524173638309e-6) + pow(R - 0.180e2, 2) * 0.659868653787046209e-6 + pow(R - 0.180e2, 3) * (-0.127459928750113513e-6) : (R < 0.250e2 ? -0.598871652036368433e-5 + R * 0.299487945973184212e-6 + pow(R - 0.200e2, 2) * (-0.104890918713634975e-6) + pow(R - 0.200e2, 3) * 0.899207383819962495e-8 : 0.187561097335483860e-5 + R * (-0.750157032981935380e-7) + pow(R - 0.250e2, 2) * 0.299901888593594137e-7 + pow(R - 0.250e2, 3) * (-0.299866927674414147e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3335677120e0 * (R - 0.300e2) * (R - 0.250e2) + 0.3558211248e1 * R + 0.2088521382e3 - 0.1779105624e0 * R * R + 0.75000e3 * (0.651971543e-3 * R - 0.2696290674e-1) * R) * pow(R, -6));
}

static double radcoeff_7_8_1_2_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.259605555400000375e-2 + R * 0.867361737988403547e-18 + pow(R - 0.475e1, 2) * 0.329082289556995311e-1 + pow(R - 0.475e1, 3) * (-0.575564173267981288e-1) : (R < 0.525e1 ? -0.297500414103755786e-1 + R * 0.566228622907511553e-2 + pow(R - 0.50e1, 2) * (-0.102590840393990673e-1) + pow(R - 0.50e1, 3) * 0.897452872279442052e-2 : (R < 0.55e1 ? -0.121552132596225663e-1 + R * 0.221546834489953640e-2 + pow(R - 0.525e1, 2) * (-0.352818749730325057e-2) + pow(R - 0.525e1, 3) * 0.480774534122041866e-2 : (R < 0.575e1 ? -0.755607572279706936e-2 + R * 0.135282684772673983e-2 + pow(R - 0.55e1, 2) * 0.776215086120639179e-4 + pow(R - 0.55e1, 3) * (-0.121973927564760932e-1) : (R < 0.60e1 ? 0.518534358799734984e-2 + R * (-0.895373539806495599e-3) + pow(R - 0.575e1, 2) * (-0.907042305874500646e-2) + pow(R - 0.575e1, 3) * 0.195262453966839541e-1 : (R < 0.625e1 ? 0.101677828361045452e-1 + R * (-0.176941405730075742e-2) + pow(R - 0.60e1, 2) * 0.557426098876795915e-2 + pow(R - 0.60e1, 3) * (-0.265108996945971663e-2) : (R < 0.65e1 ? -0.383806866480953385e-2 + R * 0.520637067809525365e-3 + pow(R - 0.625e1, 2) * 0.358594351167317157e-2 + pow(R - 0.625e1, 3) * (-0.616245508684509086e-2) : (R < 0.675e1 ? -0.785405983190726534e-2 + R * 0.115814849486265640e-2 + pow(R - 0.65e1, 2) * (-0.103589780346064679e-2) + pow(R - 0.65e1, 3) * (-0.215603532759915152e-3) : (R < 0.70e1 ? -0.415314394199397911e-2 + R * 0.599773930739848859e-3 + pow(R - 0.675e1, 2) * (-0.119760045303058315e-2) + pow(R - 0.675e1, 3) * 0.882583653084750711e-3 : (R < 0.725e1 ? -0.118099305979563586e-2 + R * 0.166458139177947973e-3 + pow(R - 0.70e1, 2) * (-0.535662713217020066e-3) + pow(R - 0.70e1, 3) * 0.591468206820912551e-3 : (R < 0.75e1 ? -0.674800468776031560e-4 + R * 0.952707134835905690e-5 + pow(R - 0.725e1, 2) * (-0.920615581013356385e-4) + pow(R - 0.725e1, 3) * 0.132486902543597657e-3 : (R < 0.775e1 ? 0.877573497717815321e-4 + R * (-0.116624134753842050e-4) + pow(R - 0.75e1, 2) * 0.730361880636259921e-5 + pow(R - 0.75e1, 3) * (-0.400682644193031272e-4) : (R < 0.80e1 ? 0.117510433174872360e-3 + R * (-0.155234036508222401e-4) + pow(R - 0.775e1, 2) * (-0.227475795081147479e-4) + pow(R - 0.775e1, 3) * 0.872243737576148273e-4 : (R < 0.825e1 ? 0.776053476916146486e-4 + R * (-0.105426233253268314e-4) + pow(R - 0.80e1, 2) * 0.426707008100963794e-4 + pow(R - 0.80e1, 3) * (-0.685360224831562016e-4) : (R < 0.85e1 ? 0.920141007793105155e-5 + R * (-0.205777713587043030e-5) + pow(R - 0.825e1, 2) * (-0.873131605227077689e-5) + pow(R - 0.825e1, 3) * 0.942142245270099837e-4 : (R < 0.875e1 ? -0.102918027034872692e-3 + R * 0.112417319368085523e-4 + pow(R - 0.85e1, 2) * 0.619293523429867193e-4 + pow(R - 0.85e1, 3) * (-0.126898977512883697e-3) : (R < 0.90e1 ? -0.163777520555566874e-3 + R * 0.184128498246362154e-4 + pow(R - 0.875e1, 2) * (-0.332448807916760537e-4) + pow(R - 0.875e1, 3) * 0.115750167885247501e-4 : (R < 0.925e1 ? -0.356053432360192259e-4 + R * 0.396072507664658086e-5 + pow(R - 0.90e1, 2) * (-0.245636182002824911e-4) + pow(R - 0.90e1, 3) * 0.589977369891846637e-4 : (R < 0.95e1 ? -0.249361956473915132e-4 + R * 0.274099166197746101e-5 + pow(R - 0.925e1, 2) * 0.196846845416060100e-4 + pow(R - 0.925e1, 3) * (-0.508439010140634089e-4) : (R < 0.100e2 ? -0.274368917081139740e-4 + R * 0.305010249264357602e-5 + pow(R - 0.95e1, 2) * (-0.184482412189415500e-4) + pow(R - 0.95e1, 3) * 0.144971675233087968e-4 : (R < 0.105e2 ? 0.455168496925637754e-4 + R * (-0.452526308381637768e-5) + pow(R - 0.100e2, 2) * 0.329751006602164388e-5 + pow(R - 0.100e2, 3) * 0.730266346882222210e-5 : (R < 0.110e2 ? -0.448782703675302977e-4 + R * 0.424924458382193320e-5 + pow(R - 0.105e2, 2) * 0.142515052692549766e-4 + pow(R - 0.105e2, 3) * (-0.188964575377976847e-4) : (R < 0.120e2 ? -0.445482345170150886e-4 + R * 0.432840669972864462e-5 + pow(R - 0.110e2, 2) * (-0.140931810374415521e-4) + pow(R - 0.110e2, 3) * 0.622821267571290640e-5 : (R < 0.140e2 ? 0.616074856937888797e-4 + R * (-0.517331734801573948e-5) + pow(R - 0.120e2, 2) * 0.459145698969716713e-5 + pow(R - 0.120e2, 3) * (-0.979536842919648792e-6) : (R < 0.160e2 ? -0.204223829033200216e-4 + R * 0.143806849573714419e-5 + pow(R - 0.140e2, 2) * (-0.128576406782072583e-5) + pow(R - 0.140e2, 3) * 0.283767705088576822e-6 : (R < 0.180e2 ? 0.451020342962539077e-5 + R * (-0.299775314482836941e-6) + pow(R - 0.160e2, 2) * 0.416842162710735261e-6 + pow(R - 0.160e2, 3) * (-0.971161379346584013e-7) : (R < 0.200e2 ? -0.363490694429565718e-5 + R * 0.202199681144203182e-6 + pow(R - 0.180e2, 2) * (-0.165854664897215200e-6) + pow(R - 0.180e2, 3) * 0.320716232500567983e-7 : (R < 0.250e2 ? 0.152943099387951963e-5 + R * (-0.763594994439759847e-7) + pow(R - 0.200e2, 2) * 0.265750746031255999e-7 + pow(R - 0.200e2, 3) * (-0.227480421406607990e-8) : -0.469053417208100049e-6 + R * 0.187809305323240021e-7 + pow(R - 0.250e2, 2) * (-0.754698860786560025e-8) + pow(R - 0.250e2, 3) * 0.755450685080160071e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.7171216000e0 * (R - 0.300e2) * (R - 0.250e2) + 0.7649049480e1 * R + 0.4492863820e3 - 0.3824524740e0 * R * R + 0.75000e3 * (0.1402144260e-2 * R - 0.5799531060e-1) * R) * pow(R, -6));
}

static double radcoeff_7_8_3_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.505102500300000888e-2 + R * (-0.173472347597680709e-17) + pow(R - 0.475e1, 2) * (-0.762706288225650231e-1) + pow(R - 0.475e1, 3) * 0.135601207706260080e0 : (R < 0.525e1 ? 0.659533194037937309e-1 + R * (-0.127100879663587466e-1) + pow(R - 0.50e1, 2) * 0.254302769571300366e-1 + pow(R - 0.50e1, 3) * (-0.242188059027801939e-1) : (R < 0.55e1 ? 0.242502029192663317e-1 + R * (-0.453597559456501553e-2) + pow(R - 0.525e1, 2) * 0.726617253004488949e-2 + pow(R - 0.525e1, 3) * (-0.205635879593930957e-2) : (R < 0.575e1 ? 0.681085364689655234e-2 + R * (-0.128845660378119138e-2) + pow(R - 0.55e1, 2) * 0.572390343309040709e-2 + pow(R - 0.55e1, 3) * 0.345762748013743546e-2 : (R < 0.60e1 ? -0.129613539563162468e-1 + R * 0.222180026528978180e-2 + pow(R - 0.575e1, 2) * 0.831712404319348390e-2 + pow(R - 0.575e1, 3) * (-0.219025117134104448e-1) : (R < 0.625e1 ? -0.130948069011323862e-1 + R * 0.227364134062206426e-2 + pow(R - 0.60e1, 2) * (-0.810975974186435231e-2) + pow(R - 0.60e1, 3) * 0.571094876870437921e-2 : (R < 0.65e1 ? 0.513804779451275308e-2 + R * (-0.710435636178040515e-3) + pow(R - 0.625e1, 2) * (-0.382654816533606768e-2) + pow(R - 0.625e1, 3) * 0.681669351539291798e-2 : (R < 0.675e1 ? 0.913383568581436524e-2 + R * (-0.134557968470990223e-2) + pow(R - 0.65e1, 2) * 0.128597197120862102e-2 + pow(R - 0.65e1, 3) * 0.118846084923950962e-3 : (R < 0.70e1 ? 0.472549592503086844e-2 + R * (-0.680310058182350915e-3) + pow(R - 0.675e1, 2) * 0.137510653490158425e-2 + pow(R - 0.675e1, 3) * (-0.107400789028872195e-2) : (R < 0.725e1 ? 0.139142119402485944e-2 + R * (-0.194133270160694196e-3) + pow(R - 0.70e1, 2) * 0.569600617185042732e-3 + pow(R - 0.70e1, 3) * (-0.644478196089064018e-3) : (R < 0.75e1 ? 0.228236571297824357e-3 + R * (-0.301726233348723269e-4) + pow(R - 0.725e1, 2) * 0.862419701182447321e-4 + pow(R - 0.725e1, 3) * (-0.129766668587021701e-3) : (R < 0.775e1 ? 0.906760799906239714e-4 + R * (-0.113828886358165299e-4) + pow(R - 0.75e1, 2) * (-0.110830313220215506e-4) + pow(R - 0.75e1, 3) * 0.118710707493150674e-3 : (R < 0.80e1 ? -0.377165051155729675e-4 + R * 0.533385335813844698e-5 + pow(R - 0.775e1, 2) * 0.779499992978414512e-4 + pow(R - 0.775e1, 3) * (-0.180613848041580929e-3) : (R < 0.825e1 ? -0.765459466641019599e-4 + R * 0.104437564992627451e-4 + pow(R - 0.80e1, 2) * (-0.575103867333442588e-4) + pow(R - 0.80e1, 3) * 0.633554310517310191e-5 : (R < 0.85e1 ? 0.147388699060312762e-3 + R * (-0.171235225351894259e-4) + pow(R - 0.825e1, 2) * (-0.527587294044644321e-4) + pow(R - 0.825e1, 3) * 0.169246892836888581e-3 : (R < 0.875e1 ? 0.101223125683292796e-3 + R * (-0.117690948305050347e-4) + pow(R - 0.85e1, 2) * 0.741764402232019971e-4 + pow(R - 0.85e1, 3) * (-0.144294068327927434e-3) : (R < 0.90e1 ? 0.158150882536162614e-4 + R * (-0.173601253039043000e-5) + pow(R - 0.875e1, 2) * (-0.340441110227435783e-4) + pow(R - 0.875e1, 3) * 0.414589655372211955e-4 : (R < 0.925e1 ? 0.975716229097991995e-4 + R * (-0.109845120035332446e-4) + pow(R - 0.90e1, 2) * (-0.294988686982768336e-5) + pow(R - 0.90e1, 3) * 0.579353195038426606e-4 : (R < 0.95e1 ? 0.114541513561584338e-4 + R * (-0.159658303147658738e-5) + pow(R - 0.925e1, 2) * 0.405016027580543155e-4 + pow(R - 0.925e1, 3) * (-0.630515400645918463e-4) : (R < 0.100e2 ? -0.670717361456761639e-4 + R * 0.683205458543959580e-5 + pow(R - 0.95e1, 2) * (-0.678705229038957685e-5) + pow(R - 0.95e1, 3) * (-0.295923080979229771e-6) : (R < 0.105e2 ? 0.128445640744403001e-5 + R * (-0.176940015684402988e-6) + pow(R - 0.100e2, 2) * (-0.723093691185842156e-5) + pow(R - 0.100e2, 3) * 0.103303242896544553e-4 : (R < 0.110e2 ? -0.465845349082918682e-5 + R * 0.339866289698017746e-6 + pow(R - 0.105e2, 2) * 0.826454952262326134e-5 + pow(R - 0.105e2, 3) * (-0.809707761203859214e-5) : (R < 0.120e2 ? -0.277136052616156756e-4 + R * 0.253160760329233413e-5 + pow(R - 0.110e2, 2) * (-0.388106689543462772e-5) + pow(R - 0.110e2, 3) * 0.161549432184229345e-5 : (R < 0.140e2 ? 0.500863206890049138e-5 + R * (-0.384043222050040938e-6) + pow(R - 0.120e2, 2) * 0.965416070092252644e-6 + pow(R - 0.120e2, 3) * (-0.346096986721116081e-6) : (R < 0.160e2 ? 0.101825142994819234e-4 + R * (-0.675542782334423119e-6) + pow(R - 0.140e2, 2) * (-0.111116585023444374e-5) + pow(R - 0.140e2, 3) * 0.402192663325827636e-6 : (R < 0.180e2 ? 0.284901526179625961e-5 + R * (-0.293894223362266210e-6) + pow(R - 0.160e2, 2) * 0.130199012972052208e-5 + pow(R - 0.160e2, 3) * (-0.337314366644694514e-6) : (R < 0.200e2 ? -0.155249252971027891e-4 + R * 0.866293895783488275e-6 + pow(R - 0.180e2, 2) * (-0.721896070147644788e-6) + pow(R - 0.180e2, 3) * 0.139916491290450325e-6 : (R < 0.250e2 ? 0.687855005473374056e-5 + R * (-0.342292489321687026e-6) + pow(R - 0.200e2, 2) * 0.117602877595057124e-6 + pow(R - 0.200e2, 3) * (-0.100356140933439447e-7) : -0.201977274080221043e-5 + R * 0.810652296280884186e-7 + pow(R - 0.250e2, 2) * (-0.329313338051020329e-7) + pow(R - 0.250e2, 3) * 0.330410523429687006e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1046408586e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1116166332e3 * R + 0.6557711304e4 - 0.5580831660e1 * R * R + 0.75000e3 * (0.2046349531e-1 * R - 0.846450659e0) * R) * pow(R, -6));
}

static double radcoeff_7_8_5_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.469363491100002067e-3 + R * (-0.433680868994201774e-18) + pow(R - 0.475e1, 2) * (-0.190707616704871713e-1) + pow(R - 0.475e1, 3) * 0.370446216131486844e-1 : (R < 0.525e1 ? 0.128038345132910382e-1 + R * (-0.258951428277820733e-2) + pow(R - 0.50e1, 2) * 0.871270453937434373e-2 + pow(R - 0.50e1, 3) * (-0.965722039784606447e-2) : (R < 0.55e1 ? -0.167038608442346957e-3 + R * (-0.438908376871720036e-4) + pow(R - 0.525e1, 2) * 0.146978924098979538e-2 + pow(R - 0.525e1, 3) * 0.416445047423557105e-2 : (R < 0.575e1 ? -0.834661720649792528e-2 + R * 0.147183824672689548e-2 + pow(R - 0.55e1, 2) * 0.459312709666647410e-2 + pow(R - 0.55e1, 3) * (-0.564925602709622377e-2) : (R < 0.60e1 ? -0.152624526370826463e-1 + R * 0.270916628997959052e-2 + pow(R - 0.575e1, 2) * 0.356185076344306276e-3 + pow(R - 0.575e1, 3) * (-0.105269810858506715e-1) : (R < 0.625e1 ? -0.463037665672845575e-2 + R * 0.913449874554742632e-3 + pow(R - 0.60e1, 2) * (-0.753905073804369674e-2) + pow(R - 0.60e1, 3) * 0.810340774969890362e-2 : (R < 0.65e1 ? 0.908840101794100574e-2 + R * (-0.133668654139856109e-2) + pow(R - 0.625e1, 2) * (-0.146149492576951815e-2) + pow(R - 0.625e1, 3) * 0.394689915585504959e-2 : (R < 0.675e1 ? 0.899830304694323665e-2 + R * (-0.132739041256049804e-2) + pow(R - 0.65e1, 2) * 0.149867944112176969e-2 + pow(R - 0.65e1, 3) * (-0.327531816319109360e-3) : (R < 0.70e1 ? 0.444334216862626169e-2 + R * (-0.639462907559446144e-3) + pow(R - 0.675e1, 2) * 0.125303057888243767e-2 + pow(R - 0.675e1, 3) * (-0.934921207058611700e-3) : (R < 0.725e1 ? 0.134852549412201928e-2 + R * (-0.188245344441717035e-3) + pow(R - 0.70e1, 2) * 0.551839673588478872e-3 + pow(R - 0.70e1, 3) * (-0.674277987766442677e-3) : (R < 0.75e1 ? 0.288657703026220732e-3 + R * (-0.387526303536856148e-4) + pow(R - 0.725e1, 2) * 0.461311827636468570e-4 + pow(R - 0.725e1, 3) * 0.520803402683824295e-4 : (R < 0.775e1 ? 0.461247433995536066e-4 + R * (-0.592197517154048076e-5) + pow(R - 0.75e1, 2) * 0.851914379649336791e-4 + pow(R - 0.75e1, 3) * (-0.218063985019087024e-3) : (R < 0.80e1 ? 0.347993646231815388e-4 + R * (-0.421325338015245644e-5) + pow(R - 0.775e1, 2) * (-0.783565507993815887e-4) + pow(R - 0.775e1, 3) * 0.242684600703965637e-3 : (R < 0.825e1 ? -0.169066707740024644e-4 + R * 0.211183385215030793e-5 + pow(R - 0.80e1, 2) * 0.103656899728592653e-3 + pow(R - 0.80e1, 3) * (-0.279775353988775477e-3) : (R < 0.85e1 ? -0.960681512629759835e-5 + R * 0.148240484355122393e-5 + pow(R - 0.825e1, 2) * (-0.106174615762988982e-3) + pow(R - 0.825e1, 3) * 0.221593375443136315e-3 : (R < 0.875e1 ? 0.852973427601192309e-4 + R * (-0.100561451423552031e-4) + pow(R - 0.85e1, 2) * 0.600204158193632742e-4 + pow(R - 0.85e1, 3) * (-0.105681470177369850e-3) : (R < 0.90e1 ? -0.180831142265888008e-5 + R * 0.138787109069586280e-6 + pow(R - 0.875e1, 2) * (-0.192406868136641168e-4) + pow(R - 0.875e1, 3) * 0.125281551927430756e-4 : (R < 0.925e1 ? 0.626267268501083061e-4 + R * (-0.713252719912314503e-5) + pow(R - 0.90e1, 2) * (-0.984457041910681011e-5) + pow(R - 0.90e1, 3) * 0.754950351983975495e-4 : (R < 0.95e1 ? -0.222145123599626683e-4 + R * 0.210050669102299130e-5 + pow(R - 0.925e1, 2) * 0.467767059796913537e-4 + pow(R - 0.925e1, 3) * (-0.838698843191332672e-4) : (R < 0.100e2 ? -0.933975571389961796e-4 + R * 0.976325637103117801e-5 + pow(R - 0.95e1, 2) * (-0.161257072596586069e-4) + pow(R - 0.95e1, 3) * 0.599337065919250396e-5 : (R < 0.105e2 ? 0.196269800310305054e-4 + R * (-0.186742289423305047e-5) + pow(R - 0.100e2, 2) * (-0.713565127086985008e-5) + pow(R - 0.100e2, 3) * 0.603241172667190170e-5 : (R < 0.110e2 ? 0.460162146760392145e-4 + R * (-0.447876537009897300e-5) + pow(R - 0.105e2, 2) * 0.191296631913800416e-5 + pow(R - 0.105e2, 3) * 0.252324935411988304e-5 : (R < 0.120e2 ? 0.495042574308162260e-5 + R * (-0.673362035371056559e-6) + pow(R - 0.110e2, 2) * 0.569784035031782872e-5 + pow(R - 0.110e2, 3) * (-0.263967463994677184e-5) : (R < 0.140e2 ? -0.337112899163914136e-4 + R * 0.280329474542428453e-5 + pow(R - 0.120e2, 2) * (-0.222118356952248721e-5) + pow(R - 0.120e2, 3) * 0.406548213980172471e-6 : (R < 0.160e2 ? 0.167425414619503258e-4 + R * (-0.120286096490359465e-5) + pow(R - 0.140e2, 2) * 0.218105714358547593e-6 + pow(R - 0.140e2, 3) * 0.446948057966248766e-7 : (R < 0.180e2 ? -0.456764566644150614e-5 + R * 0.205899562090094140e-6 + pow(R - 0.160e2, 2) * 0.486274549138296879e-6 + pow(R - 0.160e2, 3) * (-0.141219461716671950e-6) : (R < 0.200e2 ? -0.826066697097792219e-5 + R * 0.456364218043217837e-6 + pow(R - 0.180e2, 2) * (-0.361042221161734925e-6) + pow(R - 0.180e2, 3) * 0.694369963075629972e-7 : (R < 0.250e2 ? 0.306915869395931835e-5 + R * (-0.154560710912965923e-6) + pow(R - 0.200e2, 2) * 0.555797566836430648e-7 + pow(R - 0.200e2, 3) * (-0.479408284420997697e-8) : -0.104664158249291190e-5 + R * 0.416806426077164732e-7 + pow(R - 0.250e2, 2) * (-0.163314859795065889e-7) + pow(R - 0.250e2, 3) * 0.162574837799265901e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.7057767776e1 * (R - 0.300e2) * (R - 0.250e2) - 0.7528233860e2 * R - 0.4422983002e4 + 0.3764116930e1 * R * R + 0.75000e3 * (-0.1380203943e-1 * R + 0.5709063222e0) * R) * pow(R, -6));
}

static double radcoeff_7_8_5_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.816449120699999989e-2 + pow(R - 0.475e1, 2) * 0.145353896469480159e0 + pow(R - 0.475e1, 3) * (-0.263892325525920568e0) : (R < 0.525e1 ? -0.119188876257149828e0 + R * 0.231971371986299663e-1 + pow(R - 0.50e1, 2) * (-0.525653476749603013e-1) + pow(R - 0.50e1, 3) * 0.546716503057617445e-1 : (R < 0.55e1 ? -0.374533340732707554e-1 + R * 0.716539779348014313e-2 + pow(R - 0.525e1, 2) * (-0.115616099456389895e-1) + pow(R - 0.525e1, 3) * (-0.344256107312632337e-2) : (R < 0.575e1 ? -0.288515625397204288e-2 + R * 0.739112619449462313e-3 + pow(R - 0.55e1, 2) * (-0.141435307504837321e-1) + pow(R - 0.55e1, 3) * 0.900921550354353076e-2 : (R < 0.60e1 ? 0.273212325092484568e-1 + R * (-0.464342484887799237e-2) + pow(R - 0.575e1, 2) * (-0.738661912282608402e-2) + pow(R - 0.575e1, 3) * 0.253733997053522120e-1 : (R < 0.625e1 ? 0.208708108841249573e-1 + R * (-0.357922196553749333e-2) + pow(R - 0.60e1, 2) * 0.116434306561880741e-1 + pow(R - 0.60e1, 3) * (-0.836603646255239600e-2) : (R < 0.65e1 ? -0.511396584062480744e-2 + R * 0.673861525827969157e-3 + pow(R - 0.625e1, 2) * 0.536890330927377625e-2 + pow(R - 0.625e1, 3) * (-0.876768462634261100e-2) : (R < 0.675e1 ? -0.116787245728665143e-1 + R * 0.171437231302561739e-2 + pow(R - 0.65e1, 2) * (-0.120686016048318309e-2) + pow(R - 0.65e1, 3) * (-0.883809960077146413e-3) : (R < 0.70e1 ? -0.657623784116953720e-2 + R * 0.945227865269561061e-3 + pow(R - 0.675e1, 2) * (-0.186971763054104290e-2) + pow(R - 0.675e1, 3) * 0.143439146185119328e-2 : (R < 0.725e1 ? -0.200930991328296914e-2 + R * 0.279317449096138488e-3 + pow(R - 0.70e1, 2) * (-0.793924034152647721e-3) + pow(R - 0.70e1, 3) * 0.916998784032375079e-3 : (R < 0.75e1 ? -0.413172657657665963e-3 + R * 0.542927040258849613e-4 + pow(R - 0.725e1, 2) * (-0.106174946128366398e-3) + pow(R - 0.725e1, 3) * 0.133910452899306163e-3 : (R < 0.775e1 ? -0.207871767372412564e-3 + R * 0.263134408803216747e-4 + pow(R - 0.75e1, 2) * (-0.574210645388676054e-5) + pow(R - 0.75e1, 3) * (-0.479681976135997720e-4) : (R < 0.80e1 ? -0.117025702447419593e-3 + R * 0.144483506008283355e-4 + pow(R - 0.775e1, 2) * (-0.417182546640865946e-4) + pow(R - 0.775e1, 3) * 0.103503262270929900e-4 : (R < 0.825e1 ? 0.318761597990802092e-4 + R * (-0.447009056363502606e-5) + pow(R - 0.80e1, 2) * (-0.339555099937668517e-4) + pow(R - 0.80e1, 3) * 0.113308454369227810e-3 : (R < 0.85e1 ? -0.368315160412203282e-5 + R * (-0.202510366288238412e-6) + pow(R - 0.825e1, 2) * 0.510258307831540090e-4 + pow(R - 0.825e1, 3) * (-0.819621005040042065e-4) : (R < 0.875e1 ? -0.880073781506977935e-4 + R * 0.994251118078797654e-5 + pow(R - 0.85e1, 2) * (-0.104457445948491475e-4) + pow(R - 0.85e1, 3) * 0.637053646067889346e-4 : (R < 0.90e1 ? -0.146481322070942841e-3 + R * 0.166643947471363272e-4 + pow(R - 0.875e1, 2) * 0.373332788602425585e-4 + pow(R - 0.875e1, 3) * (-0.183643679459151449e-3) : (R < 0.925e1 ? -0.511847041800034246e-5 + R * 0.897844278666704720e-6 + pow(R - 0.90e1, 2) * (-0.100399480734121048e-3) + pow(R - 0.90e1, 3) * 0.206571070733816873e-3 : (R < 0.95e1 ? 0.979101326081791197e-4 + R * (-0.105698203258031473e-4) + pow(R - 0.925e1, 2) * 0.545288223162416336e-4 + pow(R - 0.925e1, 3) * (-0.840439801097161732e-4) : (R < 0.100e2 ? -0.930356961798591624e-5 + R * 0.936344561745885997e-6 + pow(R - 0.95e1, 2) * (-0.850416276604549802e-5) + pow(R - 0.95e1, 3) * 0.122908354843074523e-4 : (R < 0.105e2 ? -0.170328943458097738e-4 + R * 0.165030840893097720e-5 + pow(R - 0.100e2, 2) * 0.993209046041568043e-5 + pow(R - 0.100e2, 3) * (-0.178172413085552663e-4) : (R < 0.110e2 ? 0.192467985757328458e-4 + R * (-0.178053211206979483e-5) + pow(R - 0.105e2, 2) * (-0.167937715024172224e-4) + pow(R - 0.105e2, 3) * 0.200004027251136214e-4 : (R < 0.120e2 ? 0.372765700851697992e-4 + R * (-0.357400157065179988e-5) + pow(R - 0.110e2, 2) * 0.132068325852532098e-4 + pow(R - 0.110e2, 3) * (-0.630921959260140822e-5) : (R < 0.140e2 ? -0.456578936346047103e-4 + R * 0.391200482205039243e-5 + pow(R - 0.120e2, 2) * (-0.572082619255101745e-5) + pow(R - 0.120e2, 3) * 0.149891222838791065e-5 : (R < 0.160e2 ? 0.119991118359824827e-4 + R * (-0.984353207498748706e-6) + pow(R - 0.140e2, 2) * 0.327264717777644604e-5 + pow(R - 0.140e2, 3) * (-0.906555521513535685e-6) : (R < 0.180e2 ? -0.175535028721137142e-4 + R * 0.122756924544460721e-5 + pow(R - 0.160e2, 2) * (-0.216668595130476829e-5) + pow(R - 0.160e2, 3) * 0.520869661541232367e-6 : (R < 0.200e2 ? 0.214402522164341881e-4 + R * (-0.118873862127967711e-5) + pow(R - 0.180e2, 2) * 0.958532017942625915e-6 + pow(R - 0.180e2, 3) * (-0.184882396776393637e-6) : (R < 0.250e2 ? -0.851546509508205139e-5 + R * 0.426800689174102588e-6 + pow(R - 0.200e2, 2) * (-0.150762362715735932e-6) + pow(R - 0.200e2, 3) * 0.129505339977830815e-7 : 0.274263201983814207e-5 + R * (-0.109532888149525690e-6) + pow(R - 0.250e2, 2) * 0.434956472510102708e-7 + pow(R - 0.250e2, 3) * (-0.434266989062102692e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.6575580288e1 * (R - 0.300e2) * (R - 0.250e2) + 0.7013807892e2 * R + 0.4121067186e4 - 0.3506903946e1 * R * R + 0.75000e3 * (0.1285951456e-1 * R - 0.5319281038e0) * R) * pow(R, -6));
}

static double radcoeff_7_8_7_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.223096609700004127e-3 + R * 0.867361737988403547e-18 + pow(R - 0.475e1, 2) * 0.393233039691809894e-1 + pow(R - 0.475e1, 3) * (-0.790227503407239518e-1) : (R < 0.525e1 ? -0.232245520641237609e-1 + R * 0.484488629570475199e-2 + pow(R - 0.50e1, 2) * (-0.199437587863619814e-1) + pow(R - 0.50e1, 3) * 0.206295672205718851e-1 : (R < 0.55e1 ? 0.789643658099979835e-2 + R * (-0.125894924361900939e-2) + pow(R - 0.525e1, 2) * (-0.447158337093306671e-2) + pow(R - 0.525e1, 3) * (-0.499929453516358580e-2) : (R < 0.575e1 ? 0.249912254026579302e-1 + R * (-0.443210865442871492e-2) + pow(R - 0.55e1, 2) * (-0.822105427230575628e-2) + pow(R - 0.55e1, 3) * 0.164472294160824574e-1 : (R < 0.60e1 ? 0.306377592889302587e-1 + R * (-0.545878027506613208e-2) + pow(R - 0.575e1, 2) * 0.411436778975608677e-2 + pow(R - 0.575e1, 3) * 0.124877297668337748e-1 : (R < 0.625e1 ? 0.469822869644053592e-2 + R * (-0.106014704890675603e-2) + pow(R - 0.60e1, 2) * 0.134801651148814174e-1 + pow(R - 0.60e1, 3) * (-0.157784830370175724e-1) : (R < 0.65e1 ? -0.183409059563322367e-1 + R * 0.272146993909315807e-2 + pow(R - 0.625e1, 2) * 0.164630283711823854e-2 + pow(R - 0.625e1, 3) * (-0.619200654036347695e-2) : (R < 0.675e1 ? -0.161387383807718165e-1 + R * 0.238362013133412536e-2 + pow(R - 0.65e1, 2) * (-0.299770206815436939e-2) + pow(R - 0.65e1, 3) * 0.967602222471473775e-3 : (R < 0.70e1 ? -0.741835305809980701e-2 + R * 0.106619451397034189e-2 + pow(R - 0.675e1, 2) * (-0.227200040130076403e-2) + pow(R - 0.675e1, 3) * 0.198008323767758475e-2 : (R < 0.725e1 ? -0.217627212748154998e-2 + R * 0.301459920384507122e-3 + pow(R - 0.70e1, 2) * (-0.786937973042575473e-3) + pow(R - 0.70e1, 3) * 0.873304320578187571e-3 : (R < 0.75e1 ? -0.546308279294314470e-3 + R * 0.717354939716295951e-4 + pow(R - 0.725e1, 2) * (-0.131959732608934741e-3) + pow(R - 0.725e1, 3) * 0.154037034569665370e-3 : (R < 0.775e1 ? -0.273914516497308675e-3 + R * 0.346375716489744884e-4 + pow(R - 0.75e1, 2) * (-0.164319566816857031e-4) + pow(R - 0.75e1, 3) * (-0.985233808408490287e-4) : (R < 0.80e1 ? -0.696403216896614852e-4 + R * 0.794845940047244904e-5 + pow(R - 0.775e1, 2) * (-0.903244923123224712e-4) + pow(R - 0.775e1, 3) * 0.252061705113730680e-3 : (R < 0.825e1 ? -0.881417267380857751e-4 + R * 0.100477829531357227e-4 + pow(R - 0.80e1, 2) * 0.987217865229755523e-4 + pow(R - 0.80e1, 3) * (-0.222679283006073722e-3) : (R < 0.85e1 ? -0.148221332384623544e-3 + R * 0.176563106509846709e-4 + pow(R - 0.825e1, 2) * (-0.682876757315797596e-4) + pow(R - 0.825e1, 3) * 0.759120238385642887e-4 : (R < 0.875e1 ? 0.179346471211324212e-4 + R * (-0.225402274507440270e-5) + pow(R - 0.85e1, 2) * (-0.113536578526565414e-4) + pow(R - 0.85e1, 3) * 0.109475380554216616e-3 : (R < 0.90e1 ? -0.111000196789888233e-3 + R * 0.125957821825129400e-4 + pow(R - 0.875e1, 2) * 0.707528775630059223e-4 + pow(R - 0.875e1, 3) * (-0.233054970708230710e-3) : (R < 0.925e1 ? -0.353273118230037540e-4 + R * 0.427441395622263955e-5 + pow(R - 0.90e1, 2) * (-0.104038350468167110e-3) + pow(R - 0.90e1, 3) * 0.189382192909106207e-3 : (R < 0.95e1 ? 0.113847018125382403e-3 + R * (-0.122356001074035018e-4) + pow(R - 0.925e1, 2) * 0.379982942136625451e-4 + pow(R - 0.925e1, 3) * (-0.267000430401941421e-4) : (R < 0.100e2 ? -0.171277225084179966e-4 + R * 0.175728892939136783e-5 + pow(R - 0.95e1, 2) * 0.179732619335169385e-4 + pow(R - 0.95e1, 3) * (-0.329752130965993485e-4) : (R < 0.105e2 ? 0.508251702269119955e-4 + R * (-0.500085895954119957e-5) + pow(R - 0.100e2, 2) * (-0.314895577113820843e-4) + pow(R - 0.100e2, 3) * 0.455775744929289646e-4 : (R < 0.110e2 ? 0.203669344478788313e-4 + R * (-0.230723580122655534e-5) + pow(R - 0.105e2, 2) * 0.368768040280113626e-4 + pow(R - 0.105e2, 3) * (-0.345846697231164956e-4) : (R < 0.120e2 ? -0.950582673533217155e-4 + R * 0.863106593444742877e-5 + pow(R - 0.110e2, 2) * (-0.150002005566633859e-4) + pow(R - 0.110e2, 3) * 0.607201334811595646e-5 : (R < 0.140e2 ? 0.374258782658776689e-4 + R * (-0.315329513453147281e-5) + pow(R - 0.120e2, 2) * 0.321583948768448263e-5 + pow(R - 0.120e2, 3) * (-0.787826287959372874e-6) : (R < 0.160e2 ? -0.374556902021574145e-5 + R * 0.256147360693981538e-6 + pow(R - 0.140e2, 2) * (-0.151111824007175504e-5) + pow(R - 0.140e2, 3) * 0.463273446862382030e-6 : (R < 0.180e2 ? 0.167921116191125085e-5 + R * (-0.229044237244453188e-6) + pow(R - 0.160e2, 2) * 0.126852244110253757e-5 + pow(R - 0.160e2, 3) * (-0.330421909115155512e-6) : (R < 0.200e2 ? -0.158525577372089562e-4 + R * 0.879982617783830723e-6 + pow(R - 0.180e2, 2) * (-0.714009013588395505e-6) + pow(R - 0.180e2, 3) * 0.137847268698240039e-6 : (R < 0.250e2 ? 0.643156095751741442e-5 + R * (-0.321886212190870725e-6) + pow(R - 0.200e2, 2) * 0.113074598601044742e-6 + pow(R - 0.200e2, 3) * (-0.970051571337412063e-8) : -0.203432122931294181e-5 + R * 0.813210953165176616e-7 + pow(R - 0.250e2, 2) * (-0.324331370995670659e-7) + pow(R - 0.250e2, 3) * 0.324124496245270636e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1972251616e1 * (R - 0.300e2) * (R - 0.250e2) - 0.2103297432e2 * R - 0.1237037730e4 + 0.1051648716e1 * R * R + 0.75000e3 * (-0.3858617650e-2 * R + 0.1596415350e0) * R) * pow(R, -6));
}

static double radcoeff_7_8_7_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.106124999899999996e-1 + pow(R - 0.475e1, 2) * (-0.232933526471656382e0) + pow(R - 0.475e1, 3) * 0.433251927966625594e0 : (R < 0.525e1 ? 0.178983849670429490e0 + R * (-0.352320267420858993e-1) + pow(R - 0.50e1, 2) * 0.920054195033127853e-1 + pow(R - 0.50e1, 3) * (-0.102227574363876694e0) : (R < 0.55e1 ? 0.422529248581960462e-1 + R * (-0.839698718365639030e-2) + pow(R - 0.525e1, 2) * 0.153347387304052594e-1 + pow(R - 0.525e1, 3) * 0.109952080168812076e-1 : (R < 0.575e1 ? -0.101261936219130648e-1 + R * 0.133198368471146647e-2 + pow(R - 0.55e1, 2) * 0.235811447430661660e-1 + pow(R - 0.55e1, 3) * (-0.241364495116481240e-1) : (R < 0.60e1 ? -0.508031856056605224e-1 + R * 0.859697177281052577e-2 + pow(R - 0.575e1, 2) * 0.547880760933007211e-2 + pow(R - 0.575e1, 3) * (-0.289873447542887026e-1) : (R < 0.625e1 ? -0.347393473714785808e-1 + R * 0.590124843604643030e-2 + pow(R - 0.60e1, 2) * (-0.162617009563864566e-1) + pow(R - 0.60e1, 3) * 0.970453478160294460e-2 : (R < 0.65e1 ? 0.384124346622653897e-2 + R * (-0.410001770596246217e-3) + pow(R - 0.625e1, 2) * (-0.898329987018424772e-2) + pow(R - 0.625e1, 3) * 0.134871708118769282e-1 : (R < 0.675e1 ? 0.162487594193993987e-1 + R * (-0.237280717846144592e-2) + pow(R - 0.65e1, 2) * 0.113207823872344868e-2 + pow(R - 0.65e1, 3) * 0.212778975968933547e-2 : (R < 0.70e1 ? 0.983901305401630420e-2 + R * (-0.140780747915797096e-2) + pow(R - 0.675e1, 2) * 0.272792055849045050e-2 + pow(R - 0.675e1, 3) * (-0.234205621863426642e-2) : (R < 0.725e1 ? 0.349914029274669448e-2 + R * (-0.482982740906670615e-3) + pow(R - 0.70e1, 2) * 0.971378394514750576e-3 + pow(R - 0.70e1, 3) * (-0.871045180832272312e-3) : (R < 0.75e1 ? 0.120907172403126131e-2 + R * (-0.160614515055346386e-3) + pow(R - 0.725e1, 2) * 0.318094508890546341e-3 + pow(R - 0.725e1, 3) * (-0.333188381556643264e-3) : (R < 0.775e1 ? 0.499438315599578641e-3 + R * (-0.640400821519438205e-4) + pow(R - 0.75e1, 2) * 0.682032227230638797e-4 + pow(R - 0.75e1, 3) * 0.356397675388455526e-4 : (R < 0.80e1 ? 0.188181363127807113e-3 + R * (-0.232560143768783353e-4) + pow(R - 0.775e1, 2) * 0.949330483771980476e-4 + pow(R - 0.775e1, 3) * (-0.135383179478738825e-3) : (R < 0.825e1 ? 0.153418921813427213e-4 + R * (-0.117383634054284033e-5) + pow(R - 0.80e1, 2) * (-0.660433623185606767e-5) + pow(R - 0.80e1, 3) * (-0.481186413678902776e-4) : (R < 0.85e1 ? 0.115853677717839967e-3 + R * (-0.134982497129502978e-4) + pow(R - 0.825e1, 2) * (-0.426933172577737758e-4) + pow(R - 0.825e1, 3) * 0.111877523638299875e-3 : (R < 0.875e1 ? 0.118075226743575667e-3 + R * (-0.138678726596559608e-4) + pow(R - 0.85e1, 2) * 0.412148254709511307e-4 + pow(R - 0.85e1, 3) * (-0.775850020493091511e-4) : (R < 0.90e1 ? 0.664119202297262806e-4 + R * (-0.780764780842586127e-5) + pow(R - 0.875e1, 2) * (-0.169739260660307326e-4) + pow(R - 0.875e1, 3) * 0.115533732238936714e-3 : (R < 0.925e1 ? -0.514242414392346406e-4 + R * 0.536796395335940465e-5 + pow(R - 0.90e1, 2) * 0.696763731131718031e-4 + pow(R - 0.90e1, 3) * (-0.212407969850437686e-3) : (R < 0.95e1 ? -0.424649558734122055e-5 + R * 0.379656162988240063e-6 + pow(R - 0.925e1, 2) * (-0.896296042746564547e-4) + pow(R - 0.925e1, 3) * 0.206333162138813963e-3 : (R < 0.100e2 ? 0.515852850484674298e-4 + R * (-0.574767807331236078e-5) + pow(R - 0.95e1, 2) * 0.651202673294540242e-4 + pow(R - 0.95e1, 3) * (-0.746869939816586148e-4) : (R < 0.105e2 ? -0.325207407989770594e-4 + R * 0.335734376989770572e-5 + pow(R - 0.100e2, 2) * (-0.469102236430338912e-4) + pow(R - 0.100e2, 3) * 0.518089156304769454e-4 : (R < 0.110e2 ? 0.467899554059239664e-4 + R * (-0.469619315027847305e-5) + pow(R - 0.105e2, 2) * 0.308031498026815336e-4 + pow(R - 0.105e2, 3) * (-0.276408045082491763e-4) : (R < 0.120e2 ? -0.597623683433779425e-4 + R * 0.537635327121617668e-5 + pow(R - 0.110e2, 2) * (-0.106580569596922325e-4) + pow(R - 0.110e2, 3) * 0.463071190547605525e-5 : (R < 0.140e2 ? 0.232980250378814594e-4 + R * (-0.204762493174012173e-5) + pow(R - 0.120e2, 2) * 0.323407875673593367e-5 + pow(R - 0.120e2, 3) * (-0.836428404932936131e-6) : (R < 0.160e2 ? -0.110455255227172789e-4 + R * 0.851549236008377056e-6 + pow(R - 0.140e2, 2) * (-0.178449167286168375e-5) + pow(R - 0.140e2, 3) * 0.469760627178747500e-6 : (R < 0.180e2 ? 0.958801944799419504e-5 + R * (-0.649289929293387192e-6) + pow(R - 0.160e2, 2) * 0.103407209021080168e-5 + pow(R - 0.160e2, 3) * (-0.246577412819553991e-6) : (R < 0.200e2 ? -0.944078081987308289e-5 + R * 0.528069477715171303e-6 + pow(R - 0.180e2, 2) * (-0.445392386706522324e-6) + pow(R - 0.180e2, 3) * 0.864748241369683330e-7 : (R < 0.250e2 ? 0.434688137004596066e-5 + R * (-0.215802179467298022e-6) + pow(R - 0.200e2, 2) * 0.734565581152876348e-7 + pow(R - 0.200e2, 3) * (-0.625418648036560755e-8) : -0.123601786525394621e-5 + R * 0.496994156581578453e-7 + pow(R - 0.250e2, 2) * (-0.203562390901964693e-7) + pow(R - 0.250e2, 3) * 0.204597092611297979e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.9868089824e1 * (R - 0.300e2) * (R - 0.250e2) + 0.1052583968e3 * R + 0.6184315590e4 - 0.5262919840e1 * R * R + 0.75000e3 * (0.1929810565e-1 * R - 0.798249818e0) * R) * pow(R, -6));
}

static double radcoeff_7_8_9_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.411849063900000031e-2 + R * (-0.575982404132924231e-19) + pow(R - 0.475e1, 2) * (-0.489410748521481968e-2) + pow(R - 0.475e1, 3) * 0.191758989328592797e-1 : (R < 0.525e1 ? -0.986688547251852663e-2 + R * 0.114842730730370509e-2 + pow(R - 0.50e1, 2) * 0.948781671442964006e-2 + pow(R - 0.50e1, 3) * 0.132019681422161167e-3 : (R < 0.55e1 ? -0.343073098696222017e-1 + R * 0.591708935478518078e-2 + pow(R - 0.525e1, 2) * 0.958683147549626094e-2 + pow(R - 0.525e1, 3) * (-0.198598220254793617e-2) : (R < 0.575e1 ? -0.580549062855556589e-1 + R * 0.103381334295555745e-1 + pow(R - 0.55e1, 2) * 0.809734482358530870e-2 + pow(R - 0.55e1, 3) * (-0.266244557992304232e-1) : (R < 0.60e1 ? -0.525402043152070133e-1 + R * 0.939472037899252363e-2 + pow(R - 0.575e1, 2) * (-0.118709970258375069e-1) + pow(R - 0.575e1, 3) * (-0.118743392405303433e-1) : (R < 0.625e1 ? -0.449605545684598519e-2 + R * 0.123278325847433080e-2 + pow(R - 0.60e1, 2) * (-0.207767514562352644e-1) + pow(R - 0.60e1, 3) * 0.239608899453517717e-1 : (R < 0.65e1 ? 0.314279668785615238e-1 + R * (-0.466292560488984400e-2) + pow(R - 0.625e1, 2) * (-0.280608399722143522e-2) + pow(R - 0.625e1, 3) * 0.107308237471232405e-1 : (R < 0.675e1 ? 0.274618372989472032e-1 + R * (-0.405393815091495413e-2) + pow(R - 0.65e1, 2) * 0.524203381312099599e-2 + pow(R - 0.65e1, 3) * (-0.188056044104471971e-2) : (R < 0.70e1 ? 0.124483008442898020e-1 + R * (-0.178552632705034097e-2) + pow(R - 0.675e1, 2) * 0.383161348233745621e-2 + pow(R - 0.675e1, 3) * (-0.362236281494436683e-2) : (R < 0.725e1 ? 0.397488127438577234e-2 + R * (-0.548912613683681704e-3) + pow(R - 0.70e1, 2) * 0.111484137112918065e-2 + pow(R - 0.70e1, 3) * (-0.103499675997781424e-2) : (R < 0.75e1 ? 0.139403578595825514e-2 + R * (-0.185553820614931724e-3) + pow(R - 0.725e1, 2) * 0.338593801145819866e-3 + pow(R - 0.725e1, 3) * (-0.280311499384371901e-3) : (R < 0.775e1 ? 0.535279323064436364e-3 + R * (-0.688153261765915119e-4) + pow(R - 0.75e1, 2) * 0.128360176607540926e-3 + pow(R - 0.75e1, 3) * (-0.132039598964699400e-3) : (R < 0.80e1 ? 0.235713073254941987e-3 + R * (-0.293926626787021913e-4) + pow(R - 0.775e1, 2) * 0.293304773840163697e-4 + pow(R - 0.775e1, 3) * 0.817328335471695974e-4 : (R < 0.825e1 ? -0.109785624120233042e-5 + R * 0.597482303400291323e-6 + pow(R - 0.80e1, 2) * 0.906301025443935677e-4 + pow(R - 0.80e1, 3) * (-0.273581209783978880e-3) : (R < 0.85e1 ? 0.496385796539164880e-4 + R * (-0.538394325889896817e-5) + pow(R - 0.825e1, 2) * (-0.114555804793590633e-3) + pow(R - 0.825e1, 3) * 0.244756795220745968e-3 : (R < 0.875e1 ? 0.143084194768937470e-3 + R * (-0.167699465518044070e-4) + pow(R - 0.85e1, 2) * 0.690117916219688707e-4 + pow(R - 0.85e1, 3) * (-0.148284939739004975e-3) : (R < 0.90e1 ? 0.864338704754797737e-4 + R * (-0.100674769418834027e-4) + pow(R - 0.875e1, 2) * (-0.422019131822848602e-4) + pow(R - 0.875e1, 3) * 0.157146904855273896e-3 : (R < 0.925e1 ? 0.109748786669577834e-4 + R * (-0.170338887266197567e-5) + pow(R - 0.90e1, 2) * 0.756582654591705684e-4 + pow(R - 0.90e1, 3) * (-0.132688391490090672e-3) : (R < 0.95e1 ? -0.106157784616914605e-3 + R * 0.112466704525313093e-4 + pow(R - 0.925e1, 2) * (-0.238580281583974321e-4) + pow(R - 0.925e1, 3) * 0.168033847530887995e-4 : (R < 0.100e2 ? -0.239917538291990490e-4 + R * 0.246829101453674229e-5 + pow(R - 0.95e1, 2) * (-0.112554895935808307e-4) + pow(R - 0.95e1, 3) * 0.101202635978146910e-4 : (R < 0.105e2 ? 0.111123256743306970e-4 + R * (-0.119700088068306976e-5) + pow(R - 0.100e2, 2) * 0.392490580314120662e-5 + pow(R - 0.100e2, 3) * (-0.278100313955013327e-5) : (R < 0.110e2 ? -0.756518447635313144e-5 + R * 0.642152567795536372e-6 + pow(R - 0.105e2, 2) * (-0.246598906183993820e-6) + pow(R - 0.105e2, 3) * 0.266692473185842138e-6 : (R < 0.120e2 ? -0.708112257951016679e-5 + R * 0.595573016500924287e-6 + pow(R - 0.110e2, 2) * 0.153439803594769413e-6 + pow(R - 0.110e2, 3) * (-0.261232631995693614e-6) : (R < 0.140e2 ? -0.146709594234058665e-5 + R * 0.118754727703382217e-6 + pow(R - 0.120e2, 2) * (-0.630258092392311509e-6) + pow(R - 0.120e2, 3) * 0.197794149032810181e-6 : (R < 0.160e2 ? -0.340738983190022772e-6 + R * (-0.287478534721412303e-7) + pow(R - 0.140e2, 2) * 0.556506801804549680e-6 + pow(R - 0.140e2, 3) * (-0.157737989546739511e-6) : (R < 0.180e2 ? -0.470735701486293022e-5 + R * 0.304423479185183150e-6 + pow(R - 0.160e2, 2) * (-0.389921135475887490e-6) + pow(R - 0.160e2, 3) * 0.904833500041479627e-7 : (R < 0.200e2 ? 0.298674339663464198e-5 + R * (-0.169460862668591230e-6) + pow(R - 0.180e2, 2) * 0.152978964549000287e-6 + pow(R - 0.180e2, 3) * (-0.299797708823523225e-7) : (R < 0.250e2 ? -0.168435106438363908e-5 + R * 0.826977449391819543e-7 + pow(R - 0.200e2, 2) * (-0.268996607451136849e-7) + pow(R - 0.200e2, 3) * 0.226419616985545866e-8 : 0.405729306019887107e-6 + R * (-0.164841497727954842e-7) + pow(R - 0.250e2, 2) * 0.706328180271819468e-8 + pow(R - 0.250e2, 3) * (-0.716526725631819366e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.9726772992e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1037523560e3 * R - 0.6095359960e4 + 0.5187617800e1 * R * R + 0.75000e3 * (-0.1902109198e-1 * R + 0.786779170e0) * R) * pow(R, -6));
}

static double radcoeff_7_8_9_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.952594068700000039e-2 + pow(R - 0.475e1, 2) * 0.293672446197167369e0 + pow(R - 0.475e1, 3) * (-0.560641368724669409e0) : (R < 0.525e1 ? -0.208511266499830733e0 + R * 0.417159664627081497e-1 + pow(R - 0.50e1, 2) * (-0.126808580346334743e0) + pow(R - 0.50e1, 3) * 0.146057265534008468e0 : (R < 0.55e1 ? -0.250572553481287277e-1 + R * 0.569741357716737652e-2 + pow(R - 0.525e1, 2) * (-0.172656311958283779e-1) + pow(R - 0.525e1, 3) * (-0.157325893473645173e-1) : (R < 0.575e1 ? 0.373225395465771256e-1 + R * (-0.588526252337765940e-2) + pow(R - 0.55e1, 2) * (-0.290650732063517658e-1) + pow(R - 0.55e1, 3) * 0.369148992794496034e-1 : (R < 0.60e1 ? 0.798459774550262791e-1 + R * (-0.134962555116567434e-1) + pow(R - 0.575e1, 2) * (-0.137889874676456158e-2) + pow(R - 0.575e1, 3) * 0.290204968695661272e-1 : (R < 0.625e1 ? 0.517018788087722503e-1 + R * (-0.874436172199537405e-2) + pow(R - 0.60e1, 2) * 0.203864739054100338e-1 + pow(R - 0.60e1, 3) * (-0.877751843771415463e-2) : (R < 0.65e1 ? -0.582691832738995580e-3 + R * (-0.196909476361760687e-3) + pow(R - 0.625e1, 2) * 0.138033350771244179e-1 + pow(R - 0.625e1, 3) * (-0.191760190867095032e-1) : (R < 0.675e1 ? -0.215096744273757072e-1 + R * 0.310925448344241641e-2 + pow(R - 0.65e1, 2) * (-0.578679237907709721e-3) + pow(R - 0.65e1, 3) * (-0.346559988424781796e-2) : (R < 0.70e1 ? -0.152607995964966422e-1 + R * 0.217011488619209530e-2 + pow(R - 0.675e1, 2) * (-0.317787915109357362e-2) + pow(R - 0.675e1, 3) * 0.189227888610076574e-2 : (R < 0.725e1 ? -0.679088919502441463e-2 + R * 0.935977601789202075e-3 + pow(R - 0.70e1, 2) * (-0.175866998651799927e-2) + pow(R - 0.70e1, 3) * 0.161000478784476290e-2 : (R < 0.75e1 ? -0.268907130170044275e-2 + R * 0.358518506251095568e-3 + pow(R - 0.725e1, 2) * (-0.551166395634426981e-3) + pow(R - 0.725e1, 3) * 0.307637954840178965e-3 : (R < 0.775e1 ? -0.108445424874811704e-2 + R * 0.140617424966415626e-3 + pow(R - 0.75e1, 2) * (-0.320437929504292730e-3) + pow(R - 0.75e1, 3) * 0.318548971034520627e-3 : (R < 0.80e1 ? -0.320698788375124743e-3 + R * 0.401263922832419026e-4 + pow(R - 0.775e1, 2) * (-0.815262012284022461e-4) + pow(R - 0.775e1, 3) * 0.565476061417384584e-4 : (R < 0.825e1 ? -0.836272239049339587e-4 + R * 0.996596782061674471e-5 + pow(R - 0.80e1, 2) * (-0.391154966220983989e-4) + pow(R - 0.80e1, 3) * 0.113188181230525664e-3 : (R < 0.85e1 ? -0.980399213869016589e-4 + R * 0.116310034902911090e-4 + pow(R - 0.825e1, 2) * 0.457756393007958560e-4 + pow(R - 0.825e1, 3) * (-0.103345613879841187e-3) : (R < 0.875e1 ? -0.126633114054859922e-3 + R * 0.151415205382188144e-4 + pow(R - 0.85e1, 2) * (-0.317335711090850343e-4) + pow(R - 0.85e1, 3) * (-0.480743259116090924e-5) : (R < 0.90e1 ? 0.180299893137057519e-4 + R * (-0.162665862716637165e-5) + pow(R - 0.875e1, 2) * (-0.353391455524557167e-4) + pow(R - 0.875e1, 3) * 0.985921407244847933e-4 : (R < 0.925e1 ? 0.100137124289799800e-4 + R * (-0.810205017553331026e-6) + pow(R - 0.90e1, 2) * 0.386049599909078851e-4 + pow(R - 0.90e1, 3) * (-0.153682179266778244e-3) : (R < 0.95e1 ? 0.980198280852378703e-4 + R * (-0.103231336346203095e-4) + pow(R - 0.925e1, 2) * (-0.766566744591757980e-4) + pow(R - 0.925e1, 3) * 0.169869676182628129e-3 : (R < 0.100e2 ? 0.157421842602671646e-3 + R * (-0.168009065799654344e-4) + pow(R - 0.95e1, 2) * 0.507455826777952916e-4 + pow(R - 0.95e1, 3) * (-0.377876773077288395e-4) : (R < 0.105e2 ? -0.586634683613322655e-4 + R * 0.560391811703322678e-5 + pow(R - 0.100e2, 2) * (-0.593593328379796848e-5) + pow(R - 0.100e2, 3) * 0.844980916346302661e-5 : (R < 0.110e2 ? -0.633061732192415560e-4 + R * 0.600534170583252910e-5 + pow(R - 0.105e2, 2) * 0.673878046139657312e-5 + pow(R - 0.105e2, 3) * (-0.134622651381232596e-4) : (R < 0.120e2 ? -0.263671589320031851e-4 + R * 0.264742331363665328e-5 + pow(R - 0.110e2, 2) * (-0.134546172457883171e-4) + pow(R - 0.110e2, 3) * 0.632929216215166279e-5 : (R < 0.140e2 ? 0.615638120458198893e-4 + R * (-0.527393469148499092e-5) + pow(R - 0.120e2, 2) * 0.553325924066667293e-5 + pow(R - 0.120e2, 3) * (-0.124844315896208866e-5) : (R < 0.160e2 ? -0.264147630352129235e-4 + R * 0.187778436363663734e-5 + pow(R - 0.140e2, 2) * (-0.195739971310585859e-5) + pow(R - 0.140e2, 3) * 0.455482109856269974e-6 : (R < 0.180e2 ? 0.722051153758491730e-5 + R * (-0.486029170511557315e-6) + pow(R - 0.160e2, 2) * 0.775492946031761152e-6 + pow(R - 0.160e2, 3) * (-0.185574440800491239e-6) : (R < 0.200e2 ? -0.691352510607266037e-5 + R * 0.389049324009592214e-6 + pow(R - 0.180e2, 2) * (-0.337953698771186282e-6) + pow(R - 0.180e2, 3) * 0.658869269206950708e-7 : (R < 0.250e2 ? 0.348518895493623870e-5 + R * (-0.172122348026811931e-6) + pow(R - 0.200e2, 2) * 0.573678627529841828e-7 + pow(R - 0.200e2, 3) * (-0.485890550632435862e-8) : -0.919495528417574669e-6 + R * 0.371383665287029861e-7 + pow(R - 0.250e2, 2) * (-0.155157198418811948e-7) + pow(R - 0.250e2, 3) * 0.156591289842811956e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1367743821e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1458931540e3 * R + 0.8571188128e4 - 0.7294657700e1 * R * R + 0.75000e3 * (0.2674701218e-1 * R - 0.1106352785e1) * R) * pow(R, -6));
}

static double radcoeff_7_8_11_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.151160204000000166e-1 + R * (-0.346944695195361419e-17) + pow(R - 0.475e1, 2) * (-0.143976621680053790e0) + pow(R - 0.475e1, 3) * 0.263461660480215187e0 : (R < 0.525e1 ? 0.123180317489932717e0 + R * (-0.225892494999865440e-1) + pow(R - 0.50e1, 2) * 0.536196236801076073e-1 + pow(R - 0.50e1, 3) * (-0.108826960128645650e0) : (R < 0.55e1 ? 0.912061494342824852e-1 + R * (-0.161844926840538049e-1) + pow(R - 0.525e1, 2) * (-0.280005964163766406e-1) + pow(R - 0.525e1, 3) * 0.394658864023674089e-1 : (R < 0.575e1 ? 0.126375211425890283e0 + R * (-0.227849371917982352e-1) + pow(R - 0.55e1, 2) * 0.159881838539891754e-2 + pow(R - 0.55e1, 3) * 0.328944124711760891e-1 : (R < 0.60e1 ? 0.869282214663312375e-1 + R * (-0.158178256607532583e-1) + pow(R - 0.575e1, 2) * 0.262696277387809846e-1 + pow(R - 0.575e1, 3) * 0.988868240092821704e-2 : (R < 0.625e1 ? -0.120906705486764285e-2 + R * (-0.828883841188726191e-3) + pow(R - 0.60e1, 2) * 0.336861395394771473e-1 + pow(R - 0.60e1, 3) * (-0.353538500428889763e-1) : (R < 0.65e1 ? -0.634949802824260334e-1 + R * 0.938533904550816443e-2 + pow(R - 0.625e1, 2) * 0.717075200731041341e-2 + pow(R - 0.625e1, 3) * (-0.238941840533722638e-1) : (R < 0.675e1 ? -0.576040621165144553e-1 + R * 0.849055553915607081e-2 + pow(R - 0.65e1, 2) * (-0.107498860327187827e-1) + pow(R - 0.65e1, 3) * 0.410168385637798161e-2 : (R < 0.70e1 ? -0.271221694534059775e-1 + R * 0.388467824586755193e-2 + pow(R - 0.675e1, 2) * (-0.767362314043529628e-2) + pow(R - 0.675e1, 3) * 0.673946707906035187e-2 : (R < 0.725e1 ? -0.948433627631603722e-2 + R * 0.131151675297371960e-2 + pow(R - 0.70e1, 2) * (-0.261902283114003260e-2) + pow(R - 0.70e1, 3) * 0.240460396178061560e-2 : (R < 0.75e1 ? -0.338525401402237341e-2 + R * 0.452868580237568755e-3 + pow(R - 0.725e1, 2) * (-0.815569859804570895e-3) + pow(R - 0.725e1, 3) * 0.563290815257183196e-3 : (R < 0.775e1 ? -0.116116644596003858e-2 + R * 0.150700678196005137e-3 + pow(R - 0.75e1, 2) * (-0.393101748361683470e-3) + pow(R - 0.75e1, 3) * 0.567341058790651344e-3 : (R < 0.80e1 ? -0.478018802344681772e-3 + R * 0.605262525384105490e-4 + pow(R - 0.775e1, 2) * 0.324040457313050514e-4 + pow(R - 0.775e1, 3) * (-0.295491044659788936e-3) : (R < 0.825e1 ? -0.166990212989821091e-3 + R * 0.213237045303526357e-4 + pow(R - 0.80e1, 2) * (-0.189214237763536691e-3) + pow(R - 0.80e1, 3) * 0.393208847336504598e-3 : (R < 0.85e1 ? -0.408419559475929697e-6 + R * 0.443244524178900548e-6 + pow(R - 0.825e1, 2) * 0.105692397738841771e-3 + pow(R - 0.825e1, 3) * (-0.215377533550229492e-3) : (R < 0.875e1 ? -0.103102664956919907e-3 + R * 0.129061558529317546e-4 + pow(R - 0.85e1, 2) * (-0.558407524238303411e-4) + pow(R - 0.85e1, 3) * 0.829487463844132654e-4 : (R < 0.90e1 ? 0.291886699617684634e-5 + R * 0.538669588094074688e-6 + pow(R - 0.875e1, 2) * 0.637080736447961217e-5 + pow(R - 0.875e1, 3) * (-0.106303655251423638e-3) : (R < 0.925e1 ? 0.152374832939772482e-3 + R * (-0.162078620893080543e-4) + pow(R - 0.90e1, 2) * (-0.733569340740881172e-4) + pow(R - 0.90e1, 3) * 0.189130031677281376e-3 : (R < 0.95e1 ? 0.161998602707672185e-3 + R * (-0.174244481868618582e-4) + pow(R - 0.925e1, 2) * 0.684905896838729152e-4 + pow(R - 0.925e1, 3) * (-0.847483661137019185e-4) : (R < 0.100e2 ? -0.941720251637712494e-5 + R * 0.930528008755486879e-6 + pow(R - 0.95e1, 2) * 0.492931509859646863e-5 + pow(R - 0.95e1, 3) * (-0.514194854421488439e-5) : (R < 0.105e2 ? -0.195561542138079194e-4 + R * 0.200338169919079201e-5 + pow(R - 0.100e2, 2) * (-0.278360771772585880e-5) + pow(R - 0.100e2, 3) * 0.388010274188854943e-5 : (R < 0.110e2 ? -0.210949713567541273e-4 + R * 0.212985103788134528e-5 + pow(R - 0.105e2, 2) * 0.303654639510696619e-5 + pow(R - 0.105e2, 3) * (-0.594564718973931350e-5) : (R < 0.120e2 ? -0.542946168752209406e-5 + R * 0.707162040683826774e-6 + pow(R - 0.110e2, 2) * (-0.588192438950200405e-5) + pow(R - 0.110e2, 3) * 0.308366564081817717e-5 : (R < 0.140e2 ? 0.219265018425877932e-4 + R * (-0.180568981586564939e-5) + pow(R - 0.120e2, 2) * 0.336907253295252746e-5 + pow(R - 0.120e2, 3) * (-0.949303725509851177e-6) : (R < 0.160e2 ? -0.137667378956742524e-5 + R * 0.278955609826244652e-6 + pow(R - 0.140e2, 2) * (-0.232674982010658002e-5) + pow(R - 0.140e2, 3) * 0.648176957971728741e-6 : (R < 0.180e2 ? 0.189637551500292707e-4 + R * (-0.124992017493932948e-5) + pow(R - 0.160e2, 2) * 0.156231192772379264e-5 + pow(R - 0.160e2, 3) * (-0.355299641964563937e-6) : (R < 0.200e2 ? -0.133711304065593282e-4 + R * 0.735731832381073730e-6 + pow(R - 0.180e2, 2) * (-0.569485924063590982e-6) + pow(R - 0.180e2, 3) * 0.109154573374027052e-6 : (R < 0.250e2 ? 0.458593879949931177e-5 + R * (-0.232356983384965607e-6) + pow(R - 0.200e2, 2) * 0.854415161805713006e-7 + pow(R - 0.200e2, 3) * (-0.740709394551563628e-8) : -0.167598793647686874e-5 + R * 0.665261325070747505e-7 + pow(R - 0.250e2, 2) * (-0.256648930021632303e-7) + pow(R - 0.250e2, 3) * 0.254595508974965628e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1958427782e2 * (R - 0.300e2) * (R - 0.250e2) - 0.2088991612e3 * R - 0.1227270554e5 + 0.1044495806e2 * R * R + 0.75000e3 * (-0.3829795057e-1 * R + 0.1584139379e1) * R) * pow(R, -6));
}

static double radcoeff_7_8_11_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.203150748200003287e-2 + R * (-0.693889390390722838e-17) + pow(R - 0.475e1, 2) * (-0.244261105698933723e0) + pow(R - 0.475e1, 3) * 0.486389602443734859e0 : (R < 0.525e1 ? 0.149027537870332849e0 + R * (-0.309325023912665684e-1) + pow(R - 0.50e1, 2) * 0.120531096133867449e0 + pow(R - 0.50e1, 3) * (-0.144787070051204669e0) : (R < 0.55e1 ? -0.195709218605979694e-1 + R * 0.218547004106627984e-2 + pow(R - 0.525e1, 2) * 0.119407935954639419e-1 + pow(R - 0.525e1, 3) * 0.176897831050837583e-1 : (R < 0.575e1 ? -0.696279906145080008e-1 + R * 0.114727011710014544e-1 + pow(R - 0.55e1, 2) * 0.252081309242767615e-1 + pow(R - 0.55e1, 3) * (-0.363751843531303146e-1) : (R < 0.60e1 ? -0.101877225463835416e0 + R * 0.172564195669278990e-1 + pow(R - 0.575e1, 2) * (-0.207325734057097746e-2) + pow(R - 0.575e1, 3) * (-0.259647569245624946e-1) : (R < 0.625e1 ? -0.669823798127216763e-1 + R * 0.113513989732869445e-1 + pow(R - 0.60e1, 2) * (-0.215468250339928488e-1) + pow(R - 0.60e1, 3) * 0.370995413138027830e-2 : (R < 0.65e1 ? -0.528486261052701391e-2 + R * 0.127360285592432228e-2 + pow(R - 0.625e1, 2) * (-0.187643594354576400e-1) + pow(R - 0.625e1, 3) * 0.223194113750414015e-1 : (R < 0.675e1 ? 0.276734912793975274e-1 + R * (-0.392368722898423471e-2) + pow(R - 0.65e1, 2) * (-0.202480090417658755e-2) + pow(R - 0.65e1, 3) * 0.766358763245409986e-2 : (R < 0.70e1 ? 0.248011597339148453e-1 + R * (-0.349916499998738448e-2) + pow(R - 0.675e1, 2) * 0.372288982016398757e-2 + pow(R - 0.675e1, 3) * (-0.122525076245779655e-2) : (R < 0.725e1 ? 0.135927230596635928e-1 + R * (-0.186745460786622757e-2) + pow(R - 0.70e1, 2) * 0.280395174832064010e-2 + pow(R - 0.70e1, 3) * (-0.194368826262292108e-2) : (R < 0.75e1 ? 0.621547605917086368e-2 + R * (-0.829920282947705246e-3) + pow(R - 0.725e1, 2) * 0.134618555135344918e-2 + pow(R - 0.725e1, 3) * (-0.883257166250513929e-3) : (R < 0.775e1 ? 0.247969633533213921e-2 + R * (-0.322438225942951935e-3) + pow(R - 0.75e1, 2) * 0.683742676665563738e-3 + pow(R - 0.75e1, 3) * (-0.569341252855023279e-3) : (R < 0.80e1 ? 0.691355431523774230e-3 + R * (-0.873183725204869983e-4) + pow(R - 0.775e1, 2) * 0.256736737024296224e-3 + pow(R - 0.775e1, 3) * (-0.374647090809392862e-3) : (R < 0.825e1 ? 0.236571304910800475e-3 + R * (-0.291963335351000580e-4) + pow(R - 0.80e1, 2) * (-0.242485810827484290e-4) + pow(R - 0.80e1, 3) * 0.124385172892594659e-3 : (R < 0.85e1 ? 0.144616369567680385e-3 + R * (-0.179984041591127755e-4) + pow(R - 0.825e1, 2) * 0.690402985866975656e-4 + pow(R - 0.825e1, 3) * (-0.110072148792985839e-3) : (R < 0.875e1 ? 0.292177290498151418e-4 + R * (-0.411678276444884007e-5) + pow(R - 0.85e1, 2) * (-0.135138130080418255e-4) + pow(R - 0.85e1, 3) * 0.115742006087348742e-3 : (R < 0.90e1 ? -0.100584712244946233e-3 + R * 0.108279368729081405e-4 + pow(R - 0.875e1, 2) * 0.732926915574697393e-4 + pow(R - 0.875e1, 3) * (-0.246848806756409214e-3) : (R < 0.925e1 ? -0.131206822353465479e-4 + R * 0.119013138481628329e-5 + pow(R - 0.90e1, 2) * (-0.111843913509837171e-3) + pow(R - 0.90e1, 3) * 0.328700011786288112e-3 : (R < 0.95e1 ? -0.677859721043972660e-4 + R * 0.689942683982673128e-5 + pow(R - 0.925e1, 2) * 0.134681095329878940e-3 + pow(R - 0.925e1, 3) * (-0.284768890180743376e-3) : (R < 0.100e2 ? -0.196308534737829610e-3 + R * 0.208458075958768012e-4 + pow(R - 0.95e1, 2) * (-0.788955723056786331e-4) + pow(R - 0.95e1, 3) * 0.639740282678500640e-4 : (R < 0.105e2 ? 0.101114836767042857e-3 + R * (-0.100692435089142856e-4) + pow(R - 0.100e2, 2) * 0.170654700960964663e-4 + pow(R - 0.100e2, 3) * (-0.786435335653578670e-5) : (R < 0.110e2 ? -0.128574932046935527e-4 + R * 0.109796156978033836e-5 + pow(R - 0.105e2, 2) * 0.526894006129278543e-5 + pow(R - 0.105e2, 3) * (-0.657023294570692414e-5) : (R < 0.120e2 ? -0.161154561795222378e-4 + R * 0.143922692179293068e-5 + pow(R - 0.110e2, 2) * (-0.458640935726760036e-5) + pow(R - 0.110e2, 3) * 0.248101862317466915e-5 : (R < 0.140e2 ? 0.253630722651914853e-5 + R * (-0.290535923218262378e-6) + pow(R - 0.120e2, 2) * 0.285664651225640794e-5 + pow(R - 0.120e2, 3) * (-0.904057935573638277e-6) : (R < 0.160e2 ? -0.136004171893191373e-5 + R * 0.287354898923708138e-6 + pow(R - 0.140e2, 2) * (-0.256770110118542236e-5) + pow(R - 0.140e2, 3) * 0.724419802236784084e-6 : (R < 0.180e2 ? 0.194087807406251429e-4 + R * (-0.129041187897657145e-5) + pow(R - 0.160e2, 2) * 0.177881771223528235e-5 + pow(R - 0.160e2, 3) * (-0.413399390623498246e-6) : (R < 0.200e2 ? -0.155637504418864141e-4 + R * 0.864066282482578592e-6 + pow(R - 0.180e2, 2) * (-0.701578631505707227e-6) + pow(R - 0.180e2, 3) * 0.135461288044708977e-6 : (R < 0.250e2 ? 0.632920672617485507e-5 + R * (-0.316712787003742754e-6) + pow(R - 0.200e2, 2) * 0.111189096762546620e-6 + pow(R - 0.200e2, 3) * (-0.953738590515961374e-8) : -0.199791471136880753e-5 + R * 0.798742377347523150e-7 + pow(R - 0.250e2, 2) * (-0.318716918148476010e-7) + pow(R - 0.250e2, 3) * 0.318547517757942683e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1615684448e1 * (R - 0.300e2) * (R - 0.250e2) - 0.1723407348e2 * R - 0.1012421945e4 + 0.8617036740e0 * R * R + 0.75000e3 * (-0.3159428000e-2 * R + 0.1306833563e0) * R) * pow(R, -6));
}

static double radcoeff_7_8_12_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.113209345899999998e-1 + pow(R - 0.475e1, 2) * 0.904591794553064737e-1 + pow(R - 0.475e1, 3) * (-0.171351550653225854e0) : (R < 0.525e1 ? -0.738504737538669132e-1 + R * 0.131011739801733824e-1 + pow(R - 0.50e1, 2) * (-0.380544835346129304e-1) + pow(R - 0.50e1, 3) * 0.564251999276775829e-1 : (R < 0.55e1 ? -0.309977721263589440e-1 + R * 0.465365719930646571e-2 + pow(R - 0.525e1, 2) * 0.426441641114525764e-2 + pow(R - 0.525e1, 3) * (-0.571914774548447531e-2) : (R < 0.575e1 ? -0.366498818023041489e-1 + R * 0.571352520260075443e-2 + pow(R - 0.55e1, 2) * (-0.249443979680996236e-4) + pow(R - 0.55e1, 3) * (-0.134811108973967048e-2) : (R < 0.60e1 ? -0.351473576501704701e-1 + R * 0.544828217429051652e-2 + pow(R - 0.575e1, 2) * (-0.103602771527285258e-2) + pow(R - 0.575e1, 3) * (-0.541149035568546933e-4) : (R < 0.625e1 ? -0.320439925154230795e-1 + R * 0.492012177223717997e-2 + pow(R - 0.60e1, 2) * (-0.107661389294049360e-2) + pow(R - 0.60e1, 3) * (-0.335763768003290251e-2) : (R < 0.65e1 ? -0.248645939007547771e-1 + R * 0.375225776076076444e-2 + pow(R - 0.625e1, 2) * (-0.359484215296517091e-2) + pow(R - 0.625e1, 3) * 0.694310961288458622e-3 : (R < 0.675e1 ? -0.142413774134784680e-1 + R * 0.208501998951976433e-2 + pow(R - 0.65e1, 2) * (-0.307410893199882695e-2) + pow(R - 0.65e1, 3) * 0.206983488447907722e-2 : (R < 0.70e1 ? -0.664568518183120127e-2 + R * 0.936059564360177993e-3 + pow(R - 0.675e1, 2) * (-0.152173276863951904e-2) + pow(R - 0.675e1, 3) * 0.121434276799522707e-2 : (R < 0.725e1 ? -0.298957956687666586e-2 + R * 0.402882449039523687e-3 + pow(R - 0.70e1, 2) * (-0.610975692643098622e-3) + pow(R - 0.70e1, 3) * 0.586048142740015917e-3 : (R < 0.75e1 ? -0.160048085364252325e-2 + R * 0.207278629481727353e-3 + pow(R - 0.725e1, 2) * (-0.171439585588086657e-3) + pow(R - 0.725e1, 3) * 0.748647045647089641e-4 : (R < 0.775e1 ? -0.107240611157175198e-2 + R * 0.135595968793566954e-3 + pow(R - 0.75e1, 2) * (-0.115291057164554927e-3) + pow(R - 0.75e1, 3) * 0.120185503001148426e-3 : (R < 0.80e1 ? -0.805625616696037470e-3 + R * 0.100485222024004824e-3 + pow(R - 0.775e1, 2) * (-0.251519299136936015e-4) + pow(R - 0.775e1, 3) * (-0.142134434969302687e-3) : (R < 0.825e1 ? -0.495609090755310105e-3 + R * 0.612590505104137676e-4 + pow(R - 0.80e1, 2) * (-0.131752756140670620e-3) + pow(R - 0.80e1, 3) * 0.105487475852062169e-3 : (R < 0.85e1 ? -0.121891216332305953e-3 + R * 0.151615741623401150e-4 + pow(R - 0.825e1, 2) * (-0.526371492516239901e-4) + pow(R - 0.825e1, 3) * 0.643805780890541147e-4 : (R < 0.875e1 ? -0.307375363791901758e-5 + R * 0.914357928225766829e-6 + pow(R - 0.85e1, 2) * (-0.435171568483339902e-5) + pow(R - 0.85e1, 3) * (-0.470264514402786733e-4) : (R < 0.90e1 ? 0.921110038433778589e-4 + R * (-0.100789595592431839e-4) + pow(R - 0.875e1, 2) * (-0.396215542650424040e-4) + pow(R - 0.875e1, 3) * 0.100523989016060522e-3 : (R < 0.925e1 ? 0.998681067579772956e-4 + R * (-0.110414887512530329e-4) + pow(R - 0.90e1, 2) * 0.357714374970030013e-4 + pow(R - 0.90e1, 3) * (-0.487814472799634799e-4) : (R < 0.95e1 ? 0.205040356902383341e-4 + R * (-0.230229136774468478e-5) + pow(R - 0.925e1, 2) * (-0.814647962969609756e-6) + pow(R - 0.925e1, 3) * 0.156800814093933992e-4 : (R < 0.100e2 ? -0.336244572180183985e-5 + R * 0.230399915031772584e-6 + pow(R - 0.95e1, 2) * 0.109454130940754407e-4 + pow(R - 0.95e1, 3) * (-0.147181421522779710e-4) : (R < 0.105e2 ? -0.153392501608733561e-5 + R * 0.137206394898733553e-6 + pow(R - 0.100e2, 2) * (-0.111318001343415166e-4) + pow(R - 0.100e2, 3) * 0.104556354570880970e-4 : (R < 0.110e2 ? 0.315358515685804441e-4 + R * (-0.315286714662670862e-5) + pow(R - 0.105e2, 2) * 0.455165305129063058e-5 + pow(R - 0.105e2, 3) * (-0.169234419607442529e-5) : (R < 0.120e2 ? -0.364412213968912517e-5 + R * 0.129527757608102303e-6 + pow(R - 0.110e2, 2) * 0.201313675717899254e-5 + pow(R - 0.110e2, 3) * (-0.118406783078709457e-5) : (R < 0.140e2 ? -0.850389347725763859e-5 + R * 0.603597779604803251e-6 + pow(R - 0.120e2, 2) * (-0.153906673518229159e-5) + pow(R - 0.120e2, 3) * 0.468709112314944930e-6 : (R < 0.160e2 ? -0.346588121816967339e-5 + R * 0.718401866549766701e-7 + pow(R - 0.140e2, 2) * 0.127318793870737820e-5 + pow(R - 0.140e2, 3) * (-0.351589261517433270e-6) : (R < 0.180e2 ? -0.151647334212046438e-4 + R * 0.945520803275290221e-6 + pow(R - 0.160e2, 2) * (-0.836347630397221421e-6) + pow(R - 0.160e2, 3) * 0.177943459379788124e-6 : (R < 0.200e2 ? 0.469466589481047953e-5 + R * (-0.264548205756137759e-6) + pow(R - 0.180e2, 2) * 0.231313125881507325e-6 + pow(R - 0.180e2, 3) * (-0.451370252767192190e-7) : (R < 0.250e2 ? -0.241334180798521872e-5 + R * 0.119059994449260915e-6 + pow(R - 0.200e2, 2) * (-0.395090257788079883e-7) + pow(R - 0.200e2, 3) * 0.334261614819116093e-8 : 0.626610732912047417e-6 + R * (-0.253340522244818963e-7) + pow(R - 0.250e2, 2) * 0.106302164440594240e-7 + pow(R - 0.250e2, 3) * (-0.107380594463260904e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1028541408e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1097111056e3 * R - 0.6445461126e4 + 0.5485555280e1 * R * R + 0.75000e3 * (-0.2011357633e-1 * R + 0.831968934e0) * R) * pow(R, -6));
}

static double radcoeff_7_8_13_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.102258369200000001e-1 + pow(R - 0.475e1, 2) * 0.824724142441774222e-1 + pow(R - 0.475e1, 3) * (-0.160078238096709624e0) : (R < 0.525e1 ? -0.432285470547782505e-1 + R * 0.112215374789556496e-1 + pow(R - 0.50e1, 2) * (-0.375862643283548098e-1) + pow(R - 0.50e1, 3) * 0.662896474101288269e-1 : (R < 0.55e1 ? -0.111318406419313471e-1 + R * 0.485771420417739977e-2 + pow(R - 0.525e1, 2) * 0.121309712292418069e-1 + pow(R - 0.525e1, 3) * (-0.322049896238056216e-1) : (R < 0.575e1 ? -0.110256332338411166e-1 + R * 0.488476426433474831e-2 + pow(R - 0.55e1, 2) * (-0.120227709886124145e-1) + pow(R - 0.55e1, 3) * (-0.850831483490631021e-2) : (R < 0.60e1 ? 0.318284946837192606e-1 + R * (-0.272193026151639275e-2) + pow(R - 0.575e1, 2) * (-0.184040071147921480e-1) + pow(R - 0.575e1, 3) * (-0.164433977565691183e-1) : (R < 0.625e1 ? 0.104132159969615057e0 + R * (-0.150070708982691769e-1) + pow(R - 0.60e1, 2) * (-0.307365554322189885e-1) + pow(R - 0.60e1, 3) * 0.438091978291827999e-1 : (R < 0.65e1 ? 0.147608475990793131e0 + R * (-0.221611240214068979e-1) + pow(R - 0.625e1, 2) * 0.212034293966811144e-2 + pow(R - 0.625e1, 3) * 0.262125484558378870e-1 : (R < 0.675e1 ? 0.109312910509671027e0 + R * (-0.161860997161032347e-1) + pow(R - 0.65e1, 2) * 0.217797542815465275e-1 + pow(R - 0.65e1, 3) * (-0.100351900525343252e-1) : (R < 0.70e1 ? 0.497114620177160627e-1 + R * (-0.717782071018015829e-2) + pow(R - 0.675e1, 2) * 0.142533617421457832e-1 + pow(R - 0.675e1, 3) * (-0.121132587097005952e-1) : (R < 0.725e1 ? 0.164249134185328986e-1 + R * (-0.232237584717612851e-2) + pow(R - 0.70e1, 2) * 0.516841770987033593e-2 + pow(R - 0.70e1, 3) * (-0.436246912466328567e-2) : (R < 0.75e1 ? 0.387449321338611836e-2 + R * (-0.556129953115326614e-3) + pow(R - 0.725e1, 2) * 0.189656586637287124e-2 + pow(R - 0.725e1, 3) * (-0.179855274684625902e-2) : (R < 0.775e1 ? -0.617981005280765928e-3 + R * 0.549243400374354560e-4 + pow(R - 0.75e1, 2) * 0.547651306238176980e-3 + pow(R - 0.75e1, 3) * (-0.717081142351675424e-3) : (R < 0.80e1 ? -0.167509746818328203e-2 + R * 0.194297278965584777e-3 + pow(R - 0.775e1, 2) * 0.984044947442035910e-5 + pow(R - 0.775e1, 3) * (-0.147935330147037989e-3) : (R < 0.825e1 ? -0.149425273230180270e-2 + R * 0.171479629300225336e-3 + pow(R - 0.80e1, 2) * (-0.101111048135858135e-3) + pow(R - 0.80e1, 3) * 0.687998082198269643e-4 : (R < 0.85e1 ? -0.118883880558648901e-2 + R * 0.133824069273513844e-3 + pow(R - 0.825e1, 2) * (-0.495111919709879079e-4) + pow(R - 0.825e1, 3) * (-0.583382681722701056e-4) : (R < 0.875e1 ? -0.889445609748613680e-3 + R * 0.981300480057192565e-4 + pow(R - 0.85e1, 2) * (-0.932648931001904888e-4) + pow(R - 0.85e1, 3) * 0.414884350292538717e-4 : (R < 0.90e1 ? -0.554659465176579646e-3 + R * 0.592766830236091000e-4 + pow(R - 0.875e1, 2) * (-0.621485668282500833e-4) + pow(R - 0.875e1, 3) * 0.972839360552546804e-4 : (R < 0.925e1 ? -0.441521780468598878e-3 + R * 0.464431376198443219e-4 + pow(R - 0.90e1, 2) * 0.108143852131909286e-4 + pow(R - 0.90e1, 3) * (-0.102298226610272853e-3) : (R < 0.95e1 ? -0.315037336017376087e-3 + R * 0.326694127370136288e-4 + pow(R - 0.925e1, 2) * (-0.659092847445137160e-4) + pow(R - 0.925e1, 3) * 0.590840284978368270e-4 : (R < 0.100e2 ? -0.110407801593961159e-3 + R * 0.107930257081011750e-4 + pow(R - 0.95e1, 2) * (-0.215962633711360924e-4) + pow(R - 0.95e1, 3) * 0.195788453738674810e-4 : (R < 0.105e2 ? -0.442382183576569738e-4 + R * 0.388089636736569677e-5 + pow(R - 0.100e2, 2) * 0.777200468966513415e-5 + pow(R - 0.100e2, 3) * (-0.108082844887930549e-4) : (R < 0.110e2 ? -0.401370616385784089e-4 + R * 0.354668769043603889e-5 + pow(R - 0.105e2, 2) * (-0.844042204352444906e-5) + pow(R - 0.105e2, 3) * 0.664728056530474254e-5 : (R < 0.120e2 ? -0.341167926379161639e-5 + R * 0.917260708901469502e-7 + pow(R - 0.110e2, 2) * 0.153049880443266517e-5 + pow(R - 0.110e2, 3) * (-0.449152861322812221e-6) : (R < 0.140e2 ? -0.228928016194444861e-4 + R * 0.180526509578704058e-5 + pow(R - 0.120e2, 2) * 0.183040220464228458e-6 + pow(R - 0.120e2, 3) * (-0.249314604803874368e-6) : (R < 0.160e2 ? 0.747944368503553206e-5 + R * (-0.454349280002537999e-6) + pow(R - 0.140e2, 2) * (-0.131284740835901785e-5) + pow(R - 0.140e2, 3) * 0.436263146555143429e-6 : (R < 0.180e2 ? 0.597786922043021536e-5 + R * (-0.470581154776888481e-6) + pow(R - 0.160e2, 2) * 0.130473147097184261e-5 + pow(R - 0.160e2, 3) * (-0.329282124666699179e-6) : (R < 0.200e2 ? -0.142531888752816484e-4 + R * 0.796959233110091606e-6 + pow(R - 0.180e2, 2) * (-0.670961277028352463e-6) + pow(R - 0.180e2, 3) * 0.130236181886653308e-6 : (R < 0.250e2 ? 0.652507398116956748e-5 + R * (-0.324051692363478345e-6) + pow(R - 0.200e2, 2) * 0.110455814291567435e-6 + pow(R - 0.200e2, 3) * (-0.940752939977435122e-8) : -0.186430778482798969e-5 + R * 0.749417455691195828e-7 + pow(R - 0.250e2, 2) * (-0.306571267050478401e-7) + pow(R - 0.250e2, 3) * 0.308048912464478353e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1409284285e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1503238100e3 * R + 0.8831489236e4 - 0.7516190500e1 * R * R + 0.75000e3 * (0.2755929926e-1 * R - 0.1139951935e1) * R) * pow(R, -6));
}

static double radcoeff_7_10_13_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.241377043899999996e-2 + pow(R - 0.475e1, 2) * (-0.202752517866395254e-1) + pow(R - 0.475e1, 3) * 0.476291922985580957e-1 : (R < 0.525e1 ? 0.792653501870059334e-2 + R * (-0.120715233734011848e-2) + pow(R - 0.50e1, 2) * 0.154466424372790515e-1 + pow(R - 0.50e1, 3) * (-0.341717208956743082e-1) : (R < 0.55e1 ? 0.144836839085751455e-2 + R * 0.108971213360473411e-3 + pow(R - 0.525e1, 2) * (-0.101821482344766814e-1) + pow(R - 0.525e1, 3) * 0.910835982813914570e-2 : (R < 0.575e1 ? 0.195622138205597748e-1 + R * (-0.327428543610177713e-2) + pow(R - 0.55e1, 2) * (-0.335087836337232122e-2) + pow(R - 0.55e1, 3) * 0.641398433511772021e-2 : (R < 0.60e1 ? 0.221717008614818467e-1 + R * (-0.374710255495336450e-2) + pow(R - 0.575e1, 2) * 0.145960988796596872e-2 + pow(R - 0.575e1, 3) * (-0.128359255010039461e-3) : (R < 0.625e1 ? 0.180264953641085801e-1 + R * (-0.304136497128476308e-2) + pow(R - 0.60e1, 2) * 0.136334044670843911e-2 + pow(R - 0.60e1, 3) * 0.738268370572245109e-2 : (R < 0.65e1 ? 0.531503721132240044e-2 + R * (-0.975441553107584108e-3) + pow(R - 0.625e1, 2) * 0.690035322600027722e-2 + pow(R - 0.625e1, 3) * (-0.693969410867976109e-2) : (R < 0.675e1 ? -0.833051922204814527e-2 + R * 0.117354241451509919e-2 + pow(R - 0.65e1, 2) * 0.169558264449045574e-2 + pow(R - 0.65e1, 3) * (-0.390836769980340993e-2) : (R < 0.70e1 ? -0.906167710716851600e-2 + R * 0.128851479304718753e-2 + pow(R - 0.675e1, 2) * (-0.123569313036210192e-2) + pow(R - 0.675e1, 3) * (-0.421390503306592640e-3) : (R < 0.725e1 ? -0.426749116257305397e-2 + R * 0.591657508496150559e-3 + pow(R - 0.70e1, 2) * (-0.155173600784204641e-2) + pow(R - 0.70e1, 3) * 0.196478351526977683e-2 : (R < 0.75e1 ? -0.137960948327952616e-2 + R * 0.184186413688210534e-3 + pow(R - 0.725e1, 2) * (-0.781483713897136717e-4) + pow(R - 0.725e1, 3) * (-0.226592881932513850e-3) : (R < 0.775e1 ? -0.776331637339555160e-3 + R * 0.102626062631007358e-3 + pow(R - 0.75e1, 2) * (-0.248093032839099073e-3) + pow(R - 0.75e1, 3) * 0.164123131180278541e-3 : (R < 0.80e1 ? -0.664039507091404623e-4 + R * 0.935263330776005944e-5 + pow(R - 0.775e1, 2) * (-0.125000684453890161e-3) + pow(R - 0.775e1, 3) * 0.237392049691399683e-3 : (R < 0.825e1 ? 0.734074205673806144e-4 + R * (-0.863669960204757686e-5) + pow(R - 0.80e1, 2) * 0.530433528146596154e-4 + pow(R - 0.80e1, 3) * (-0.174070284825877231e-3) : (R < 0.85e1 ? 0.124463923397450467e-3 + R * (-0.147532015995697517e-4) + pow(R - 0.825e1, 2) * (-0.775093608047483078e-4) + pow(R - 0.825e1, 3) * 0.250714247436109225e-3 : (R < 0.875e1 ? 0.533759500322240896e-4 + R * (-0.649896060767342241e-5) + pow(R - 0.85e1, 2) * 0.110526324772333625e-3 + pow(R - 0.85e1, 3) * (-0.183460050646559736e-3) : (R < 0.90e1 ? -0.125146243248005096e-3 + R * 0.143654422822634378e-4 + pow(R - 0.875e1, 2) * (-0.270687132125861669e-4) + pow(R - 0.875e1, 3) * (-0.582151689970703568e-4) : (R < 0.925e1 ? 0.922996572998229875e-4 + R * (-0.100842585109803329e-4) + pow(R - 0.90e1, 2) * (-0.707300899603889328e-4) + pow(R - 0.90e1, 3) * 0.251903304977241097e-3 : (R < 0.95e1 ? -0.179531126855356012e-4 + R * 0.178256619205790302e-5 + pow(R - 0.925e1, 2) * 0.118197388772541876e-3 + pow(R - 0.925e1, 3) * (-0.222433669331093903e-3) : (R < 0.100e2 ? -0.179268925144112907e-3 + R * 0.191749475787487293e-4 + pow(R - 0.95e1, 2) * (-0.486278632257785442e-4) + pow(R - 0.95e1, 3) * 0.256395281365621625e-4 : (R < 0.105e2 ? 0.105761221300081917e-3 + R * (-0.102232695446081913e-4) + pow(R - 0.100e2, 2) * (-0.101685710209352987e-4) + pow(R - 0.100e2, 3) * 0.210651824363033612e-4 : (R < 0.110e2 ? 0.467339103833176560e-4 + R * (-0.459295373831596744e-5) + pow(R - 0.105e2, 2) * 0.214292026335197465e-4 + pow(R - 0.105e2, 3) * (-0.173282257881756191e-4) : (R < 0.120e2 ? -0.428381833980926843e-4 + R * 0.384007955407206221e-5 + pow(R - 0.110e2, 2) * (-0.456313604874368295e-5) + pow(R - 0.110e2, 3) * 0.165410206397162021e-5 : (R < 0.140e2 ? 0.422037348400531113e-5 + R * (-0.323886351500442598e-6) + pow(R - 0.120e2, 2) * 0.399170143171177718e-6 + pow(R - 0.120e2, 3) * (-0.113911038835478212e-6) : (R < 0.160e2 ? 0.168929225278058334e-5 + R * (-0.941382448414702476e-7) + pow(R - 0.140e2, 2) * (-0.284296089841691530e-6) + pow(R - 0.140e2, 3) * 0.915212334562133227e-7 : (R < 0.180e2 ? 0.190715068733882470e-5 + R * (-0.133067802733676547e-6) + pow(R - 0.160e2, 2) * 0.264831310895588433e-6 + pow(R - 0.160e2, 3) * (-0.653410427393750822e-7) : (R < 0.200e2 ? -0.251044156377117038e-5 + R * 0.142164927976176146e-6 + pow(R - 0.180e2, 2) * (-0.127214945540662060e-6) + pow(R - 0.180e2, 3) * 0.249016604012869883e-7 : (R < 0.250e2 ? 0.138070908422056388e-5 + R * (-0.678749293710281956e-7) + pow(R - 0.200e2, 2) * 0.221950168670598697e-7 + pow(R - 0.200e2, 3) * (-0.187074934977084592e-8) : -0.339358348768926218e-6 + R * 0.137690380667570485e-7 + pow(R - 0.250e2, 2) * (-0.586622337950282040e-8) + pow(R - 0.250e2, 3) * 0.594409998030281975e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.7427358976e1 * (R - 0.300e2) * (R - 0.250e2) + 0.7922534700e2 * R + 0.4654487074e4 - 0.3961267350e1 * R * R + 0.75000e3 * (0.1452464302e-1 * R - 0.6007919982e0) * R) * pow(R, -6));
}

static double radcoeff_9_0_9_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.734070176800000057e-1 + pow(R - 0.475e1, 2) * 0.996458360436347612e0 + pow(R - 0.475e1, 3) * (-0.191663839726539043e1) : (R < 0.525e1 ? -0.735373248764565224e0 + R * 0.138859480730913060e0 + pow(R - 0.50e1, 2) * (-0.441020437512695318e0) + pow(R - 0.50e1, 3) * 0.606854132596172269e0 : (R < 0.55e1 ? -0.193148318590825430e0 + R * 0.321344118363477010e-1 + pow(R - 0.525e1, 2) * 0.141201619344338784e-1 + pow(R - 0.525e1, 3) * (-0.711435948792987771e-1) : (R < 0.575e1 ? -0.158841040240328635e0 + R * 0.258550687636961152e-1 + pow(R - 0.55e1, 2) * (-0.392375342250402132e-1) + pow(R - 0.55e1, 3) * 0.373459602010229458e-1 : (R < 0.60e1 ? -0.881655579459899308e-1 + R * 0.132386691888678118e-1 + pow(R - 0.575e1, 2) * (-0.112280640742730021e-1) + pow(R - 0.575e1, 3) * 0.380574569232069865e-1 : (R < 0.625e1 ? -0.974031110019957236e-1 + R * 0.147604103248326207e-1 + pow(R - 0.60e1, 2) * 0.173150286181322430e-1 + pow(R - 0.60e1, 3) * (-0.264120956058509285e-1) : (R < 0.65e1 ? -0.119891400600760603e0 + R * 0.184656567078016962e-1 + pow(R - 0.625e1, 2) * (-0.249404308625595598e-2) + pow(R - 0.625e1, 3) * (-0.263050919078032935e-1) : (R < 0.675e1 ? -0.802933245617438868e-1 + R * 0.122864304319605985e-1 + pow(R - 0.65e1, 2) * (-0.222228620171084253e-1) + pow(R - 0.65e1, 3) * 0.133828746930641194e-1 : (R < 0.70e1 ? -0.234086874964023819e-1 + R * 0.368428842835590844e-2 + pow(R - 0.675e1, 2) * (-0.121857059973103348e-1) + pow(R - 0.675e1, 3) * 0.114432843355468054e-1 : (R < 0.725e1 ? 0.363916749668963171e-2 + R * (-0.262948757384233065e-3) + pow(R - 0.70e1, 2) * (-0.360324274565023079e-2) + pow(R - 0.70e1, 3) * 0.386791321274865176e-2 : (R < 0.75e1 ? 0.112782113984375779e-1 + R * (-0.133933640281897631e-2) + pow(R - 0.725e1, 2) * (-0.702307836088741639e-3) + pow(R - 0.725e1, 3) * 0.159610972545858563e-2 : (R < 0.775e1 ? 0.116483814570489674e-1 + R * (-0.139121974733986227e-2) + pow(R - 0.75e1, 2) * 0.494774458005197587e-3 + pow(R - 0.75e1, 3) * 0.110836806170055910e-4 : (R < 0.80e1 ? 0.974612104501720346e-2 + R * (-0.114175432822157473e-2) + pow(R - 0.775e1, 2) * 0.503087218467951781e-3 + pow(R - 0.775e1, 3) * 0.183118176073390288e-3 : (R < 0.825e1 ? 0.749339907969070497e-2 + R * (-0.855876060973838164e-3) + pow(R - 0.80e1, 2) * 0.640425850522994503e-3 + pow(R - 0.80e1, 3) * (-0.316515309710567482e-3) : (R < 0.85e1 ? 0.537633312993534597e-2 + R * (-0.595009756283072268e-3) + pow(R - 0.825e1, 2) * 0.403039368240068864e-3 + pow(R - 0.825e1, 3) * (-0.167220476431117744e-3) : (R < 0.875e1 ? 0.395250058979791652e-2 + R * (-0.424843911493872511e-3) + pow(R - 0.85e1, 2) * 0.277624010916730543e-3 + pow(R - 0.85e1, 3) * (-0.115989178164961805e-3) : (R < 0.90e1 ? 0.294372945723757893e-2 + R * (-0.307779876941437593e-3) + pow(R - 0.875e1, 2) * 0.190632127293009182e-3 + pow(R - 0.875e1, 3) * (-0.772028045090357353e-4) : (R < 0.925e1 ? 0.222687283116339459e-2 + R * (-0.226939339140377189e-3) + pow(R - 0.90e1, 2) * 0.132730023911232381e-3 + pow(R - 0.90e1, 3) * (-0.356184389988947349e-4) : (R < 0.95e1 ? 0.168251128909774729e-2 + R * (-0.167252784497053748e-3) + pow(R - 0.925e1, 2) * 0.106016194662061328e-3 + pow(R - 0.925e1, 3) * (-0.772835527753853459e-4) : (R < 0.100e2 ? 0.132201414948837442e-2 + R * (-0.128735353311407847e-3) + pow(R - 0.95e1, 2) * 0.480535300805223116e-4 + pow(R - 0.95e1, 3) * 0.281319484458675577e-5 : (R < 0.105e2 ? 0.832744919224454754e-3 + R * (-0.785719270974454751e-4) + pow(R - 0.100e2, 2) * 0.522733223474024453e-4 + pow(R - 0.100e2, 3) * (-0.151307635050230013e-4) : (R < 0.110e2 ? 0.414206782327507976e-3 + R * (-0.376466773788102817e-4) + pow(R - 0.105e2, 2) * 0.295771770898679417e-4 + pow(R - 0.105e2, 3) * (-0.105063837044947461e-4) : (R < 0.120e2 ? 0.181616496213447452e-3 + R * (-0.159492880673134038e-4) + pow(R - 0.110e2, 2) * 0.138176015331258191e-4 + pow(R - 0.110e2, 3) * (-0.401577759781241524e-5) : (R < 0.140e2 ? 0.436387687478815020e-5 + R * (-0.361417794499012528e-6) + pow(R - 0.120e2, 2) * 0.177026873968857237e-5 + pow(R - 0.120e2, 3) * (-0.539557695719532941e-6) : (R < 0.160e2 ? -0.136086627369233415e-5 + R * 0.244964815620881014e-6 + pow(R - 0.140e2, 2) * (-0.146707743462862591e-5) + pow(R - 0.140e2, 3) * 0.426862858659092685e-6 : (R < 0.180e2 ? 0.812101381075217262e-5 + R * (-0.500990618984510742e-6) + pow(R - 0.160e2, 2) * 0.109409971732593019e-5 + pow(R - 0.160e2, 3) * (-0.287062700666837360e-6) : (R < 0.200e2 ? -0.656872522870890128e-5 + R * 0.430655842317161188e-6 + pow(R - 0.180e2, 2) * (-0.628276486675094282e-6) + pow(R - 0.180e2, 3) * 0.129320867045756843e-6 : (R < 0.250e2 ? 0.111778466039826748e-4 + R * (-0.530599699834133714e-6) + pow(R - 0.200e2, 2) * 0.147648715599446804e-6 + pow(R - 0.200e2, 3) * (-0.118832476257240109e-7) : -0.124743106087583559e-5 + R * 0.546438842310334233e-7 + pow(R - 0.250e2, 2) * (-0.305999987864133688e-7) + pow(R - 0.250e2, 3) * 0.324985520644133639e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1810728343e3 * (R - 0.300e2) * (R - 0.250e2) + 0.1931447924e4 * R + 0.1134707578e6 - 0.9657239620e2 * R * R + 0.75000e3 * (0.3540953430e0 * R - 0.1464662405e2) * R) * pow(R, -6));
}

static double radcoeff_9_0_9_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.128917729399999986e0 + pow(R - 0.475e1, 2) * (-0.163734695556375165e1) + pow(R - 0.475e1, 3) * 0.305499426129500629e1 : (R < 0.525e1 ? 0.130362809895531084e1 + R * (-0.245862053789062146e0) + pow(R - 0.50e1, 2) * 0.653898740407503065e0 + pow(R - 0.50e1, 3) * (-0.871811219725017517e0) : (R < 0.55e1 ? 0.472579695769694996e0 + R * (-0.823772872837514325e-1) + pow(R - 0.525e1, 2) * 0.403256137398770058e-4 + pow(R - 0.525e1, 3) * 0.142259817605063454e0 : (R < 0.575e1 ? 0.327988693427626488e0 + R * (-0.556834086759320918e-1) + pow(R - 0.55e1, 2) * 0.106735188817537463e0 + pow(R - 0.55e1, 3) * (-0.102456820615236421e0) : (R < 0.60e1 ? 0.136656346781991095e0 + R * (-0.215264681325201893e-1) + pow(R - 0.575e1, 2) * 0.298925733561101505e-1 + pow(R - 0.575e1, 3) * (-0.351667778961175445e-1) : (R < 0.625e1 ? 0.878600567769229207e-1 + R * (-0.131739523099871549e-1) + pow(R - 0.60e1, 2) * 0.351748993402199077e-2 + pow(R - 0.60e1, 3) * (-0.114227302642934993e-1) : (R < 0.65e1 ? 0.902952757220699398e-1 + R * (-0.135569692675311920e-1) + pow(R - 0.625e1, 2) * (-0.504955776419813498e-2) + pow(R - 0.625e1, 3) * 0.211219210332916248e-1 : (R < 0.675e1 ? 0.809784298522725071e-1 + R * (-0.121213879558880796e-1) + pow(R - 0.65e1, 2) * 0.107918830107705845e-1 + pow(R - 0.65e1, 3) * 0.112402501112694253e-2 : (R < 0.70e1 ? 0.438252861154862713e-1 + R * (-0.651469176091648474e-2) + pow(R - 0.675e1, 2) * 0.116349017691157915e-1 + pow(R - 0.675e1, 3) * (-0.703941813379940252e-2) : (R < 0.725e1 ? 0.129595566761218396e-1 + R * (-0.201713177644597709e-2) + pow(R - 0.70e1, 2) * 0.635533816876623914e-2 + pow(R - 0.70e1, 3) * (-0.514067663592932510e-2) : (R < 0.75e1 ? -0.277355132057785590e-2 + R * 0.196660438700393915e-3 + pow(R - 0.725e1, 2) * 0.249983069181924488e-2 + pow(R - 0.725e1, 3) * (-0.260244850648328179e-2) : (R < 0.775e1 ? -0.837264704233300731e-2 + R * 0.958616689644401073e-3 + pow(R - 0.75e1, 2) * 0.547994311956783321e-3 + pow(R - 0.75e1, 3) * (-0.109342642613755167e-2) : (R < 0.80e1 ? -0.889007486909551212e-2 + R * 0.102759639072200161e-2 + pow(R - 0.775e1, 2) * (-0.272075507646380593e-3) + pow(R - 0.775e1, 3) * (-0.210682697766504014e-3) : (R < 0.825e1 ? -0.750604542824073479e-2 + R * 0.852055631067591846e-3 + pow(R - 0.80e1, 2) * (-0.430087530971258610e-3) + pow(R - 0.80e1, 3) * 0.974152012035658813e-4 : (R < 0.85e1 ? -0.590798186051295741e-2 + R * 0.655277215807631213e-3 + pow(R - 0.825e1, 2) * (-0.357026130068584192e-3) + pow(R - 0.825e1, 3) * 0.653166961522369267e-4 : (R < 0.875e1 ? -0.451601285196601056e-2 + R * 0.489011031301883527e-3 + pow(R - 0.85e1, 2) * (-0.308038607954406497e-3) + pow(R - 0.85e1, 3) * 0.163716497387488729e-3 : (R < 0.90e1 ? -0.345363566341730160e-2 + R * 0.365688570584834453e-3 + pow(R - 0.875e1, 2) * (-0.185251234913789937e-3) + pow(R - 0.875e1, 3) * (-0.668471913021914736e-4) : (R < 0.925e1 ? -0.251982316052900722e-2 + R * 0.260529104758778541e-3 + pow(R - 0.90e1, 2) * (-0.235386628390433546e-3) + pow(R - 0.90e1, 3) * 0.159539525421277496e-3 : (R < 0.95e1 ? -0.172008022781547473e-2 + R * 0.172749451580051329e-3 + pow(R - 0.925e1, 2) * (-0.115731984324475424e-3) + pow(R - 0.925e1, 3) * 0.147784003370803026e-4 : (R < 0.100e2 ? -0.120367966438965357e-2 + R * 0.117654409481016161e-3 + pow(R - 0.95e1, 2) * (-0.104648184071665196e-3) + pow(R - 0.95e1, 3) * 0.584267882192657218e-4 : (R < 0.105e2 ? -0.614257432808002542e-3 + R * 0.568263165738002631e-4 + pow(R - 0.100e2, 2) * (-0.170080017427666065e-4) + pow(R - 0.100e2, 3) * (-0.140760777696678304e-4) : (R < 0.110e2 ? -0.330835812229719219e-3 + R * 0.292612565037827829e-4 + pow(R - 0.105e2, 2) * (-0.381221183972683538e-4) + pow(R - 0.105e2, 3) * 0.249776882994055710e-4 : (R < 0.120e2 ? -0.123966756891754742e-3 + R * 0.987240433106861248e-5 + pow(R - 0.110e2, 2) * (-0.655585948159992852e-6) + pow(R - 0.110e2, 3) * (-0.368064094908619975e-6) : (R < 0.140e2 ? -0.960060367622732000e-4 + R * 0.745704015002276579e-5 + pow(R - 0.120e2, 2) * (-0.175977823288585278e-5) + pow(R - 0.120e2, 3) * 0.733444636872350567e-7 : (R < 0.160e2 ? -0.162326828421664537e-4 + R * 0.129806078272617548e-5 + pow(R - 0.140e2, 2) * (-0.131971145076244238e-5) + pow(R - 0.140e2, 3) * 0.194445930949677251e-6 : (R < 0.180e2 ? 0.271719529090394576e-4 + R * (-0.164743384892746620e-5) + pow(R - 0.160e2, 2) * (-0.153035865064378668e-6) + pow(R - 0.160e2, 3) * 0.154052657014055860e-6 : (R < 0.200e2 ? 0.553543907429358548e-5 + R * (-0.410945425016310345e-6) + pow(R - 0.180e2, 2) * 0.771280077019956596e-6 + pow(R - 0.180e2, 3) * (-0.161505000505900687e-6) : (R < 0.250e2 ? -0.156126866618541491e-4 + R * 0.736114876992707471e-6 + pow(R - 0.200e2, 2) * (-0.197749926015447608e-6) + pow(R - 0.200e2, 3) * 0.157346758665812242e-7 : 0.134536392510442219e-5 + R * (-0.612836931681768890e-7) + pow(R - 0.250e2, 2) * 0.382702119832707479e-7 + pow(R - 0.250e2, 3) * (-0.412576731712707431e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2849245190e3 * (R - 0.300e2) * (R - 0.250e2) - 0.3039195088e4 * R - 0.1785529322e6 + 0.1519597544e3 * R * R + 0.75000e3 * (-0.557186185e0 * R + 0.2304725249e2) * R) * pow(R, -6));
}

static double radcoeff_9_2_7_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.175476036700000157e-1 + R * 0.346944695195361419e-17 + pow(R - 0.475e1, 2) * 0.214818412615970705e0 + pow(R - 0.475e1, 3) * (-0.405252236703882884e0) : (R < 0.525e1 ? -0.167575578710036588e0 + R * 0.314244119260073188e-1 + pow(R - 0.50e1, 2) * (-0.891207649119414441e-1) + pow(R - 0.50e1, 3) * 0.103898860703648691e0 : (R < 0.55e1 ? -0.398556399298463163e-1 + R * 0.634506585197072703e-2 + pow(R - 0.525e1, 2) * (-0.111966193842049228e-1) + pow(R - 0.525e1, 3) * 0.113455196928804775e-2 : (R < 0.575e1 ? -0.109170046786037644e-1 + R * 0.959484654109775273e-3 + pow(R - 0.55e1, 2) * (-0.103457054072388869e-1) + pow(R - 0.55e1, 3) * 0.385033007519913848e-2 : (R < 0.60e1 ? 0.140893160743565185e-1 + R * (-0.349143116040982922e-2) + pow(R - 0.575e1, 2) * (-0.745795785083953281e-2) + pow(R - 0.575e1, 3) * 0.427706593139153962e-1 : (R < 0.625e1 ? -0.114516329151772601e-1 + R * 0.799088535529543335e-3 + pow(R - 0.60e1, 2) * 0.246200366345970187e-1 + pow(R - 0.60e1, 3) * (-0.208115210588607595e-1) : (R < 0.65e1 ? -0.627871738843228805e-1 + R * 0.920694665429166136e-2 + pow(R - 0.625e1, 2) * 0.901139584045144819e-2 + pow(R - 0.625e1, 3) * (-0.261323409664723574e-1) : (R < 0.675e1 ? -0.600705254004748126e-1 + R * 0.881283064330381713e-2 + pow(R - 0.65e1, 2) * (-0.105878598844028216e-1) + pow(R - 0.65e1, 3) * 0.412227788475022332e-2 : (R < 0.70e1 ? -0.301510868893282401e-1 + R * 0.429182780449307265e-2 + pow(R - 0.675e1, 2) * (-0.749615147084015370e-2) + pow(R - 0.675e1, 3) * 0.637459669147145795e-2 : (R < 0.725e1 ? -0.126501212925672589e-1 + R * 0.173898894872389427e-2 + pow(R - 0.70e1, 2) * (-0.271520395223655980e-2) + pow(R - 0.70e1, 3) * 0.203031931096393087e-2 : (R < 0.75e1 ? -0.570544878683229735e-2 + R * 0.762071843411351408e-3 + pow(R - 0.725e1, 2) * (-0.119246446901361144e-2) + pow(R - 0.725e1, 3) * 0.753492029472824600e-3 : (R < 0.775e1 ? -0.235606091081025154e-2 + R * 0.307119364430700256e-3 + pow(R - 0.75e1, 2) * (-0.627345446908992958e-3) + pow(R - 0.75e1, 3) * 0.488885597064768387e-3 : (R < 0.80e1 ? -0.667079440250320792e-3 + R * 0.851126904258478489e-4 + pow(R - 0.775e1, 2) * (-0.260681249110416668e-3) + pow(R - 0.775e1, 3) * 0.174878216444101142e-3 : (R < 0.825e1 ? 0.997681255875321925e-4 + R * (-0.124382685460915245e-4) + pow(R - 0.80e1, 2) * (-0.129522586777340798e-3) + pow(R - 0.80e1, 3) * 0.252996748038827564e-3 : (R < 0.85e1 ? 0.238552363936224367e-3 + R * (-0.297626716774817451e-4) + pow(R - 0.825e1, 2) * 0.602249742517798820e-4 + pow(R - 0.825e1, 3) * (-0.100928904855411566e-3) : (R < 0.875e1 ? 0.145638712231842558e-3 + R * (-0.185743542119814778e-4) + pow(R - 0.85e1, 2) * (-0.154717043897788029e-4) + pow(R - 0.85e1, 3) * 0.154299871190818834e-3 : (R < 0.90e1 ? -0.383768532723169589e-4 + R * 0.262101944140765206e-5 + pow(R - 0.875e1, 2) * 0.100253199003335326e-3 + pow(R - 0.875e1, 3) * (-0.189944168195863700e-3) : (R < 0.925e1 ? -0.165687517647157806e-3 + R * 0.171330874063508679e-4 + pow(R - 0.90e1, 2) * (-0.422049271435624625e-4) + pow(R - 0.90e1, 3) * 0.152635579320635983e-3 : (R < 0.95e1 ? -0.235469939511997203e-3 + R * 0.246497949571888868e-4 + pow(R - 0.925e1, 2) * 0.722717573469145244e-4 + pow(R - 0.925e1, 3) * (-0.157650654878680157e-3) : (R < 0.100e2 ? -0.295891864555389251e-3 + R * 0.312261758408936059e-4 + pow(R - 0.95e1, 2) * (-0.459662338120956138e-4) + pow(R - 0.95e1, 3) * 0.220273465726167805e-4 : (R < 0.105e2 ? -0.101727658606058366e-4 + R * 0.178045195826058349e-5 + pow(R - 0.100e2, 2) * (-0.129252139531704413e-4) + pow(R - 0.100e2, 3) * 0.274997041729854489e-5 : (R < 0.110e2 ? 0.100998406425327445e-3 + R * (-0.908228418193594722e-5) + pow(R - 0.105e2, 2) * (-0.880025832722262352e-5) + pow(R - 0.105e2, 3) * 0.149004865901890363e-4 : (R < 0.120e2 ? 0.745347298974847257e-4 + R * (-0.670717756651679350e-5) + pow(R - 0.110e2, 2) * 0.135504715580609293e-4 + pow(R - 0.110e2, 3) * (-0.602693264434413603e-5) : (R < 0.140e2 ? -0.261834733858718938e-4 + R * 0.231296761657265777e-5 + pow(R - 0.120e2, 2) * (-0.453032637497147799e-5) + pow(R - 0.120e2, 3) * 0.125054699146757429e-5 : (R < 0.160e2 ? 0.930597947783305215e-5 + R * (-0.801773985702360847e-6) + pow(R - 0.140e2, 2) * 0.297295557383396857e-5 + pow(R - 0.140e2, 3) * (-0.835072222491394080e-6) : (R < 0.180e2 ? -0.154180660137885522e-4 + R * 0.106918163973678447e-5 + pow(R - 0.160e2, 2) * (-0.203747776111439570e-5) + pow(R - 0.160e2, 3) * 0.499644712123001717e-6 : (R < 0.200e2 ? 0.192043216206059929e-4 + R * (-0.108499285924477730e-5) + pow(R - 0.180e2, 2) * 0.960390511623614812e-6 + pow(R - 0.180e2, 3) * (-0.187717267100613090e-6) : (R < 0.250e2 ? -0.102349512954464968e-4 + R * 0.503961982042324871e-6 + pow(R - 0.200e2, 2) * (-0.165913090980063727e-6) + pow(R - 0.200e2, 3) * 0.140085881455197484e-7 : 0.258046492040827996e-5 + R * (-0.104524816844331189e-6) + pow(R - 0.250e2, 2) * 0.442157312027324860e-7 + pow(R - 0.250e2, 3) * (-0.447381819397324892e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4982772947e2 * (R - 0.300e2) * (R - 0.250e2) - 0.5314940748e3 * R - 0.3122570820e5 + 0.2657470374e2 * R * R + 0.75000e3 * (-0.974414019e-1 * R + 0.4030541917e1) * R) * pow(R, -6));
}

static double radcoeff_9_2_7_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.457649405199999984e-1 + pow(R - 0.475e1, 2) * (-0.473265754720557874e0) + pow(R - 0.475e1, 3) * 0.831782116482231437e0 : (R < 0.525e1 ? 0.432551079019302731e0 + R * (-0.806737305198605426e-1) + pow(R - 0.50e1, 2) * 0.150570832641115648e0 + pow(R - 0.50e1, 3) * (-0.173068170886693823e0) : (R < 0.55e1 ? 0.214373110922928545e0 + R * (-0.378385962405578188e-1) + pow(R - 0.525e1, 2) * 0.207697044760952847e-1 + pow(R - 0.525e1, 3) * 0.359416665205439662e-1 : (R < 0.575e1 ? 0.122051275083495003e0 + R * (-0.207146815299081820e-1) + pow(R - 0.55e1, 2) * 0.477259543665032593e-1 + pow(R - 0.55e1, 3) * (-0.322509033234821135e-1) : (R < 0.60e1 ? 0.220886132089043452e-1 + R * (-0.289874871980945166e-2) + pow(R - 0.575e1, 2) * 0.235377768738916707e-1 + pow(R - 0.575e1, 3) * (-0.436221853226154491e-1) : (R < 0.625e1 ? 0.133975548412409128e-2 + R * 0.690979969145984804e-3 + pow(R - 0.60e1, 2) * (-0.917886211806991786e-2) + pow(R - 0.60e1, 3) * (-0.496399436205609279e-2) : (R < 0.65e1 ? 0.351896392018405668e-1 + R * (-0.482920003277449109e-2) + pow(R - 0.625e1, 2) * (-0.129018578896119875e-1) + pow(R - 0.625e1, 3) * 0.210068279228398033e-1 : (R < 0.675e1 ? 0.510404713803121329e-1 + R * (-0.734134874204802126e-2) + pow(R - 0.65e1, 2) * 0.285326305251786764e-2 + pow(R - 0.65e1, 3) * 0.450033988669687208e-2 : (R < 0.70e1 ? 0.359636126604756107e-1 + R * (-0.507090348703342388e-2) + pow(R - 0.675e1, 2) * 0.622851796754052191e-2 + pow(R - 0.675e1, 3) * (-0.347885203922730386e-2) : (R < 0.725e1 ? 0.190647183854279756e-1 + R * (-0.260892926061828245e-2) + pow(R - 0.70e1, 2) * 0.361937893812004381e-2 + pow(R - 0.70e1, 3) * (-0.222694074738765107e-2) : (R < 0.75e1 ? 0.916313254767748067e-2 + R * (-0.121679118169344550e-2) + pow(R - 0.725e1, 2) * 0.194917337757930550e-2 + pow(R - 0.725e1, 3) * (-0.150034122722209236e-2) : (R < 0.775e1 ? 0.406196773695951391e-2 + R * (-0.523518473007935172e-3) + pow(R - 0.75e1, 2) * 0.823917457162736126e-3 + pow(R - 0.75e1, 3) * (-0.572094245803981866e-3) : (R < 0.80e1 ? 0.174316790986980569e-2 + R * (-0.218827415514813634e-3) + pow(R - 0.775e1, 2) * 0.394846772809749700e-3 + pow(R - 0.775e1, 3) * (-0.393633501561980645e-3) : (R < 0.825e1 ? 0.772758470812481358e-3 + R * (-0.952103106528101757e-4) + pow(R - 0.80e1, 2) * 0.996216466382642023e-4 + pow(R - 0.80e1, 3) * 0.586897323719059793e-4 : (R < 0.85e1 ? 0.278176878654051957e-3 + R * (-0.343951625139456924e-4) + pow(R - 0.825e1, 2) * 0.143638945917193690e-3 + pow(R - 0.825e1, 3) * (-0.233900575765643652e-3) : (R < 0.875e1 ? 0.458131387559597894e-4 + R * (-0.643204751140703371e-5) + pow(R - 0.85e1, 2) * (-0.317864859070390621e-4) + pow(R - 0.85e1, 3) * 0.564774942746687828e-4 : (R < 0.90e1 ? 0.911164310337289726e-4 + R * (-0.117357602884261680e-4) + pow(R - 0.875e1, 2) * 0.105716347989625233e-4 + pow(R - 0.875e1, 3) * 0.813168657389685837e-4 : (R < 0.925e1 ? -0.917468332940053164e-4 + R * 0.879696943711170226e-5 + pow(R - 0.90e1, 2) * 0.715592841031889695e-4 + pow(R - 0.90e1, 3) * (-0.142573406062543106e-3) : (R < 0.95e1 ? -0.173188025344809052e-3 + R * 0.178440978519793546e-4 + pow(R - 0.925e1, 2) * (-0.353707704437183600e-4) + pow(R - 0.925e1, 3) * 0.271849425752037702e-4 : (R < 0.100e2 ? -0.553859531242233781e-4 + R * 0.525588936297088197e-5 + pow(R - 0.95e1, 2) * (-0.149820635123155290e-4) + pow(R - 0.95e1, 3) * 0.160513630367475306e-4 : (R < 0.105e2 ? -0.276896362751600066e-4 + R * 0.231234812821600099e-5 + pow(R - 0.100e2, 2) * 0.909498104280576699e-5 + pow(R - 0.100e2, 3) * (-0.595063802247553902e-5) : (R < 0.110e2 ? -0.747957472897336790e-4 + R * 0.694435065416511287e-5 + pow(R - 0.105e2, 2) * 0.169024009092458488e-6 + pow(R - 0.105e2, 3) * (-0.644629677884536892e-5) : (R < 0.120e2 ? -0.242365940593589860e-4 + R * 0.227865207912354421e-5 + pow(R - 0.110e2, 2) * (-0.950042115917559577e-5) + pow(R - 0.110e2, 3) * 0.443298684305205057e-5 : (R < 0.140e2 ? 0.391185530948579254e-4 + R * (-0.342322971007149391e-5) + pow(R - 0.120e2, 2) * 0.379853936998055595e-5 + pow(R - 0.120e2, 3) * (-0.893445914847404263e-6) : (R < 0.160e2 ? -0.154541477687462797e-4 + R * 0.104957679168187705e-5 + pow(R - 0.140e2, 2) * (-0.156213611910387005e-5) + pow(R - 0.140e2, 3) * 0.419042866031465678e-6 : (R < 0.180e2 ? 0.117013202769623340e-5 + R * (-0.170453292356014590e-6) + pow(R - 0.160e2, 2) * 0.952121077084924126e-6 + pow(R - 0.160e2, 3) * (-0.247224925703458412e-6) : (R < 0.200e2 ? -0.121513166672592561e-4 + R * 0.671331907542180865e-6 + pow(R - 0.180e2, 2) * (-0.531228477135826346e-6) + pow(R - 0.180e2, 3) * 0.102171494657367964e-6 : (R < 0.250e2 ? 0.451826083455417937e-5 + R * (-0.227524065112708947e-6) + pow(R - 0.200e2, 2) * 0.818004908083814528e-7 + pow(R - 0.200e2, 3) * (-0.705544249796793462e-8) : -0.153982522588776420e-5 + R * 0.613226556235105661e-7 + pow(R - 0.250e2, 2) * (-0.240311466611375600e-7) + pow(R - 0.250e2, 3) * 0.239230285448708898e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1031054966e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1099779216e3 * R - 0.6462733982e4 + 0.5498896080e1 * R * R + 0.75000e3 * (-0.2016553531e-1 * R + 0.834159637e0) * R) * pow(R, -6));
}

static double radcoeff_9_2_9_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.534212781199999986e-1 + pow(R - 0.475e1, 2) * (-0.511962288979626368e0) + pow(R - 0.475e1, 3) * 0.957564444878505228e0 : (R < 0.525e1 ? 0.418574634885467090e0 + R * (-0.764378110750934259e-1) + pow(R - 0.50e1, 2) * 0.206211044679252609e0 + pow(R - 0.50e1, 3) * (-0.274308208235515438e0) : (R < 0.55e1 ? 0.155894909623037925e0 + R * (-0.247650777796262732e-1) + pow(R - 0.525e1, 2) * 0.479888502616029346e-3 + pow(R - 0.525e1, 3) * 0.237139816635562814e-1 : (R < 0.575e1 ? 0.130520696645208018e0 + R * (-0.200787619664014559e-1) + pow(R - 0.55e1, 2) * 0.182653747502832427e-1 + pow(R - 0.55e1, 3) * (-0.944846337870963206e-2) : (R < 0.60e1 ? 0.891883224999153873e-1 + R * (-0.127176614747678916e-1) + pow(R - 0.575e1, 2) * 0.111790272162510182e-1 + pow(R - 0.575e1, 3) * (-0.388229435087178165e-1) : (R < 0.625e1 ? 0.994191330071618612e-1 + R * (-0.144074497745269765e-1) + pow(R - 0.60e1, 2) * (-0.179381804152873477e-1) + pow(R - 0.60e1, 3) * 0.227323161335810028e-1 : (R < 0.65e1 ? 0.128070569999526318e0 + R * (-0.191142307071242093e-1) + pow(R - 0.625e1, 2) * (-0.888943315101592933e-3) + pow(R - 0.625e1, 3) * 0.264032697583937159e-1 : (R < 0.675e1 ? 0.991376428883452010e-1 + R * (-0.146080892849761845e-1) + pow(R - 0.65e1, 2) * 0.189135090036936931e-1 + pow(R - 0.65e1, 3) * (-0.912175363115583400e-2) : (R < 0.70e1 ? 0.478888363525546354e-1 + R * (-0.686166358897105731e-2) + pow(R - 0.675e1, 2) * 0.120721937803268172e-1 + pow(R - 0.675e1, 3) * (-0.977287257777035082e-2) : (R < 0.725e1 ? 0.190648643571771290e-1 + R * (-0.265798030713958969e-2) + pow(R - 0.70e1, 2) * 0.474253934699905410e-2 + pow(R - 0.70e1, 3) * (-0.358707496336277843e-2) : (R < 0.75e1 ? 0.698969991551173352e-2 + R * (-0.959287189270583871e-3) + pow(R - 0.725e1, 2) * 0.205223312447697006e-2 + pow(R - 0.725e1, 3) * (-0.166905553677853765e-2) : (R < 0.775e1 ? 0.174312062483555907e-2 + R * (-0.246118540178074557e-3) + pow(R - 0.75e1, 2) * 0.800441471893066766e-3 + pow(R - 0.75e1, 3) * (-0.608538358323073626e-3) : (R < 0.80e1 ? -0.433788596667339290e-3 + R * 0.400012535828824878e-4 + pow(R - 0.775e1, 2) * 0.344037703150761520e-3 + pow(R - 0.775e1, 3) * (-0.574839081129165834e-3) : (R < 0.825e1 ? -0.935160291772357236e-3 + R * 0.104237777446544654e-3 + pow(R - 0.80e1, 2) * (-0.870916076961128423e-4) + pow(R - 0.80e1, 3) * 0.190820426839736915e-3 : (R < 0.85e1 ? -0.873544414105245940e-3 + R * 0.964708036309388974e-4 + pow(R - 0.825e1, 2) * 0.560237124336898507e-4 + pow(R - 0.825e1, 3) * (-0.230759577269781894e-3) : (R < 0.875e1 ? -0.743976252042447602e-3 + R * 0.812152391096997194e-4 + pow(R - 0.85e1, 2) * (-0.117045970518646570e-3) + pow(R - 0.85e1, 3) * 0.594553791939069150e-5 : (R < 0.90e1 ? -0.248877003299794244e-3 + R * 0.238070422102621962e-4 + pow(R - 0.875e1, 2) * (-0.112586817079103550e-3) + pow(R - 0.875e1, 3) * 0.235709113912219029e-3 : (R < 0.925e1 ? -0.143349177333263443e-3 + R * 0.117090925292514923e-4 + pow(R - 0.90e1, 2) * 0.641950183550607349e-4 + pow(R - 0.90e1, 3) * (-0.117039941088266819e-3) : (R < 0.95e1 ? -0.235076549832769480e-3 + R * 0.218616127527318345e-4 + pow(R - 0.925e1, 2) * (-0.235849374611393797e-4) + pow(R - 0.925e1, 3) * 0.341490043608482112e-4 : (R < 0.100e2 ? -0.184816491308301253e-3 + R * 0.164720823398211838e-4 + pow(R - 0.95e1, 2) * 0.202681580949677919e-5 + pow(R - 0.95e1, 3) * 0.117539110172171317e-5 : (R < 0.105e2 ? -0.213246454826092476e-3 + R * 0.193804414756092477e-4 + pow(R - 0.100e2, 2) * 0.378990246207934894e-5 + pow(R - 0.100e2, 3) * (-0.536547546659568298e-5) : (R < 0.110e2 ? -0.210510520196289218e-3 + R * 0.191462373377418323e-4 + pow(R - 0.105e2, 2) * (-0.425831073781417553e-5) + pow(R - 0.105e2, 3) * (-0.701104908333897130e-5) : (R < 0.120e2 ? -0.107768905962657706e-3 + R * 0.962963978742342722e-5 + pow(R - 0.110e2, 2) * (-0.147748843628226337e-4) + pow(R - 0.110e2, 3) * 0.579349243739920587e-5 : (R < 0.140e2 ? 0.292811990732906513e-4 + R * (-0.253965162602422099e-5) + pow(R - 0.120e2, 2) * 0.260559294937498469e-5 + pow(R - 0.120e2, 3) * (-0.568486264306436910e-6) : (R < 0.160e2 ? -0.152518320051786318e-4 + R * 0.106088499979847359e-5 + pow(R - 0.140e2, 2) * (-0.805324636463637297e-6) + pow(R - 0.140e2, 3) * 0.210704965632200284e-6 : (R < 0.180e2 ? -0.570206749368524344e-5 + R * 0.368046041530327701e-6 + pow(R - 0.160e2, 2) * 0.458905157329564406e-6 + pow(R - 0.160e2, 3) * (-0.164341463672364100e-6) : (R < 0.200e2 ? -0.272459374804388553e-5 + R * 0.231569106780215853e-6 + pow(R - 0.180e2, 2) * (-0.527143624704620303e-6) + pow(R - 0.180e2, 3) * 0.111534411607256191e-6 : (R < 0.250e2 ? 0.114623382366238217e-4 + R * (-0.538592452751191018e-6) + pow(R - 0.200e2, 2) * 0.142062844938916867e-6 + pow(R - 0.200e2, 3) * (-0.112343425025357320e-7) : -0.841702495194943757e-6 + R * 0.394603089477977498e-7 + pow(R - 0.250e2, 2) * (-0.264522925991191005e-7) + pow(R - 0.250e2, 3) * 0.287690368031190966e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2209565381e3 * (R - 0.300e2) * (R - 0.250e2) + 0.2356874420e4 * R + 0.1384654014e6 - 0.1178437210e3 * R * R + 0.75000e3 * (0.4320917953e0 * R - 0.1787286267e2) * R) * pow(R, -6));
}

static double radcoeff_9_2_9_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.828413704399999368e-1 + R * (-0.138777878078144568e-16) + pow(R - 0.475e1, 2) * 0.833249705895856119e0 + pow(R - 0.475e1, 3) * (-0.151127614070342453e1) : (R < 0.525e1 ? -0.720679836350179848e0 + R * 0.133260576566035960e0 + pow(R - 0.50e1, 2) * (-0.300207399631712168e0) + pow(R - 0.50e1, 3) * 0.388390722910273101e0 : (R < 0.55e1 ? -0.327651887613244430e0 + R * 0.559801372958560889e-1 + pow(R - 0.525e1, 2) * (-0.891435744900733081e-2) + pow(R - 0.525e1, 3) * (-0.703860904576681656e-1) : (R < 0.575e1 ? -0.232208678847968003e0 + R * 0.383255666105396381e-1 + pow(R - 0.55e1, 2) * (-0.617039252922584602e-1) + pow(R - 0.55e1, 3) * 0.507656760403995266e-1 : (R < 0.60e1 ? -0.112604919756415595e0 + R * 0.169921682219853210e-1 + pow(R - 0.575e1, 2) * (-0.236296682619588153e-1) + pow(R - 0.575e1, 3) * 0.319928973360701085e-1 : (R < 0.625e1 ? -0.786848897191143593e-1 + R * 0.111760023415190604e-1 + pow(R - 0.60e1, 2) * 0.365004740093765722e-3 + pow(R - 0.60e1, 3) * 0.870005826331996142e-2 : (R < 0.65e1 ? -0.898621591026152189e-1 + R * 0.129897656359384359e-1 + pow(R - 0.625e1, 2) * 0.689004843758373679e-2 + pow(R - 0.625e1, 3) * (-0.191511563733499021e-1) : (R < 0.675e1 ? -0.887829534857267760e-1 + R * 0.128439480347271959e-1 + pow(R - 0.65e1, 2) * (-0.747331884242869067e-2) + pow(R - 0.65e1, 3) * (-0.352646457792038038e-2) : (R < 0.70e1 ? -0.596195040977812660e-1 + R * 0.844607650515278099e-2 + pow(R - 0.675e1, 2) * (-0.101181672758689761e-1) + pow(R - 0.675e1, 3) * 0.483750415703142027e-2 : (R < 0.725e1 ? -0.311119422906317861e-1 + R * 0.429402489666168372e-2 + pow(R - 0.70e1, 2) * (-0.649003915809541043e-2) + pow(R - 0.70e1, 3) * 0.432972001379470887e-2 : (R < 0.75e1 ? -0.138092390584535294e-1 + R * 0.186082782020048675e-2 + pow(R - 0.725e1, 2) * (-0.324274914774937834e-2) + pow(R - 0.725e1, 3) * 0.239408077338972621e-2 : (R < 0.775e1 ? -0.518087015159278408e-2 + R * 0.688343391336371192e-3 + pow(R - 0.75e1, 2) * (-0.144718856770708346e-2) + pow(R - 0.75e1, 3) * 0.116800134704639434e-2 : (R < 0.80e1 ? -0.134246567358872054e-2 + R * 0.183749360054028454e-3 + pow(R - 0.775e1, 2) * (-0.571187557422287709e-3) + pow(R - 0.775e1, 3) * 0.487240630104695746e-3 : (R < 0.825e1 ? 0.183337523449879846e-3 + R * (-0.104868005124849817e-4) + pow(R - 0.80e1, 2) * (-0.205757084843765899e-3) + pow(R - 0.80e1, 3) * 0.228383626934823146e-3 : (R < 0.85e1 ? 0.669513251883730722e-3 + R * (-0.705434128840885777e-4) + pow(R - 0.825e1, 2) * (-0.344693646426485394e-4) + pow(R - 0.825e1, 3) * 0.135320865356011320e-3 : (R < 0.875e1 ? 0.600300475684866180e-3 + R * (-0.624054329511607181e-4) + pow(R - 0.85e1, 2) * 0.670212843743599646e-4 + pow(R - 0.85e1, 3) * (-0.174867771238868333e-3) : (R < 0.90e1 ? 0.595431315083599835e-3 + R * (-0.616824978712685550e-4) + pow(R - 0.875e1, 2) * (-0.641295440547912988e-4) + pow(R - 0.875e1, 3) * 0.126053290959462193e-3 : (R < 0.925e1 ? 0.669260821003885399e-3 + R * (-0.701122778437650399e-4) + pow(R - 0.90e1, 2) * 0.304104241648053456e-4 + pow(R - 0.90e1, 3) * 0.743852557210192435e-4 : (R < 0.95e1 ? 0.402663602481459135e-3 + R * (-0.409598303136712581e-4) + pow(R - 0.925e1, 2) * 0.861993659555697816e-4 + pow(R - 0.925e1, 3) * (-0.120657225203539025e-3) : (R < 0.100e2 ? 0.211639487814724390e-3 + R * (-0.204833770615499352e-4) + pow(R - 0.95e1, 2) * (-0.429355294708449022e-5) + pow(R - 0.95e1, 3) * 0.164838177643687280e-4 : (R < 0.105e2 ? 0.131933473036578778e-3 + R * (-0.124140666853578787e-4) + pow(R - 0.100e2, 2) * 0.204321736994686034e-4 + pow(R - 0.100e2, 3) * (-0.188469480095056904e-4) : (R < 0.110e2 ? 0.685675396906947179e-4 + R * (-0.611710399301854476e-5) + pow(R - 0.105e2, 2) * (-0.783824831478993393e-5) + pow(R - 0.105e2, 3) * 0.969488955365404393e-5 : (R < 0.120e2 ? 0.740577314509474041e-4 + R * (-0.668418514256794490e-5) + pow(R - 0.110e2, 2) * 0.670408601569113282e-5 + pow(R - 0.110e2, 3) * (-0.243754947412318745e-5) : (R < 0.140e2 ? 0.517798468466290677e-5 + R * (-0.588661533555242254e-6) + pow(R - 0.120e2, 2) * (-0.608562406678429964e-6) + pow(R - 0.120e2, 3) * 0.292579229728025558e-6 : (R < 0.160e2 ? -0.998944692454282867e-5 + R * 0.488039596467344908e-6 + pow(R - 0.140e2, 2) * 0.114691297168972339e-5 + pow(R - 0.140e2, 3) * (-0.382026197461697816e-6) : (R < 0.180e2 ? -0.851140489297381420e-5 + R * 0.491377113685863389e-6 + pow(R - 0.160e2, 2) * (-0.114524421308046393e-5) + pow(R - 0.160e2, 3) * 0.310045634868766057e-6 : (R < 0.200e2 ? 0.487570954379438324e-5 + R * (-0.369052120210799078e-6) + pow(R - 0.180e2, 2) * 0.715029596132132621e-6 + pow(R - 0.180e2, 3) * (-0.150004742413366520e-6) : (R < 0.250e2 ? -0.146654395223466603e-4 + R * 0.691009355357333006e-6 + pow(R - 0.200e2, 2) * (-0.184998858348066553e-6) + pow(R - 0.200e2, 3) * 0.147033292633199894e-7 : 0.122847739515833081e-5 + R * (-0.562295333743332289e-7) + pow(R - 0.250e2, 2) * 0.355510806017332952e-7 + pow(R - 0.250e2, 3) * (-0.383870876137332923e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.2704807729e3 * (R - 0.300e2) * (R - 0.250e2) - 0.2885132296e4 * R - 0.1695001648e6 + 0.1442566148e3 * R * R + 0.75000e3 * (-0.528938334e0 * R + 0.2187877765e2) * R) * pow(R, -6));
}

static double radcoeff_9_2_10_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.870304437499999986e-2 + pow(R - 0.475e1, 2) * 0.751891585254337302e-1 + pow(R - 0.475e1, 3) * (-0.136349124021734880e0) : (R < 0.525e1 ? -0.662797695732078584e-1 + R * 0.120291185086415717e-1 + pow(R - 0.50e1, 2) * (-0.270726844908674505e-1) + pow(R - 0.50e1, 3) * 0.372817952332046704e-1 : (R < 0.55e1 ? -0.330227546975270375e-1 + R * 0.548311286943372125e-2 + pow(R - 0.525e1, 2) * 0.888661934036052070e-3 + pow(R - 0.525e1, 3) * (-0.757202606308375690e-2) : (R < 0.575e1 ? -0.277206946749294844e-1 + R * 0.450768894962354314e-2 + pow(R - 0.55e1, 2) * (-0.479035761327676560e-2) + pow(R - 0.55e1, 3) * 0.389898012313037376e-2 : (R < 0.60e1 ? -0.183904802684146072e-1 + R * 0.284356891607210564e-2 + pow(R - 0.575e1, 2) * (-0.186612252092898550e-2) + pow(R - 0.575e1, 3) * (-0.881689254377433784e-4) : (R < 0.625e1 ? -0.128109329615282135e-1 + R * 0.189397598208803546e-2 + pow(R - 0.60e1, 2) * (-0.193224921500729304e-2) + pow(R - 0.60e1, 3) * 0.130432533862060059e-2 : (R < 0.65e1 ? -0.840154591334844880e-2 + R * 0.117241237557575177e-2 + pow(R - 0.625e1, 2) * (-0.954005211041842596e-3) + pow(R - 0.625e1, 3) * 0.949869881355342111e-3 : (R < 0.675e1 ? -0.650346650415821979e-2 + R * 0.873510372808956968e-3 + pow(R - 0.65e1, 2) * (-0.241602800025335986e-3) + pow(R - 0.65e1, 3) * 0.797220475803113882e-5 : (R < 0.70e1 ? -0.571312248502183536e-2 + R * 0.754203761188419969e-3 + pow(R - 0.675e1, 2) * (-0.235623646456812632e-3) + pow(R - 0.675e1, 3) * (-0.985075131874689307e-4) : (R < 0.725e1 ? -0.477541426916154241e-2 + R * 0.617921779237363229e-3 + pow(R - 0.70e1, 2) * (-0.309504281347414330e-3) + pow(R - 0.70e1, 3) * (-0.115019316808153473e-3) : (R < 0.75e1 ? -0.351824805990042259e-2 + R * 0.441603516662127246e-3 + pow(R - 0.725e1, 2) * (-0.395768768953529441e-3) + pow(R - 0.725e1, 3) * 0.427402572420082050e-3 : (R < 0.775e1 ? -0.265320742665595957e-2 + R * 0.323857114514127930e-3 + pow(R - 0.75e1, 2) * (-0.752168396384678768e-4) + pow(R - 0.75e1, 3) * (-0.270113225672175060e-3) : (R < 0.80e1 ? -0.197815546363054899e-2 + R * 0.235602464881361147e-3 + pow(R - 0.775e1, 2) * (-0.277801758892599199e-3) + pow(R - 0.775e1, 3) * 0.301805203868618535e-3 : (R < 0.825e1 ? -0.133230313748342044e-2 + R * 0.153290061160427543e-3 + pow(R - 0.80e1, 2) * (-0.514478559911352772e-4) + pow(R - 0.80e1, 3) * (-0.379053293222995165e-4) : (R < 0.85e1 ? -0.106525368699466184e-2 + R * 0.120458883916928723e-3 + pow(R - 0.825e1, 2) * (-0.798768529828599146e-4) + pow(R - 0.825e1, 3) * 0.490654593405799279e-4 : (R < 0.875e1 ? -0.808200793150788883e-3 + R * 0.897202310518575120e-4 + pow(R - 0.85e1, 2) * (-0.430777584774249652e-4) + pow(R - 0.85e1, 3) * (-0.145770794760020201e-3) : (R < 0.90e1 ? -0.385550418231860894e-3 + R * 0.408493277956412451e-4 + pow(R - 0.875e1, 2) * (-0.152405854547440123e-3) + pow(R - 0.875e1, 3) * 0.297813031059500637e-3 : (R < 0.925e1 ? -0.207155599980197921e-3 + R * 0.204863438455775464e-4 + pow(R - 0.90e1, 2) * 0.709539187471853550e-4 + pow(R - 0.90e1, 3) * (-0.162652842437982140e-3) : (R < 0.95e1 ? -0.251323281323949236e-3 + R * 0.254658952620485642e-4 + pow(R - 0.925e1, 2) * (-0.510357130813012636e-4) + pow(R - 0.925e1, 3) * 0.659693454124280079e-4 : (R < 0.100e2 ? -0.128570501749167792e-3 + R * 0.123172909862281880e-4 + pow(R - 0.95e1, 2) * (-0.155870402198025416e-5) + pow(R - 0.95e1, 3) * (-0.130401213295224386e-5) : (R < 0.105e2 ? -0.103756048054337515e-3 + R * 0.978057786453375206e-5 + pow(R - 0.100e2, 2) * (-0.351472222140861973e-5) + pow(R - 0.100e2, 3) * (-0.256223212731776862e-5) : (R < 0.110e2 ? -0.478728462981864626e-4 + R * 0.434418154763680607e-5 + pow(R - 0.105e2, 2) * (-0.735807041238527351e-5) + pow(R - 0.105e2, 3) * 0.363997884222332404e-5 : (R < 0.120e2 ? 0.165158254189072066e-5 + R * (-0.283904733080974614e-6) + pow(R - 0.110e2, 2) * (-0.189810214905028744e-5) + pow(R - 0.110e2, 3) * 0.136903979813126204e-5 : (R < 0.140e2 ? -0.260846096454683807e-5 + R * 0.270103632122365142e-7 + pow(R - 0.120e2, 2) * 0.220901724534349868e-5 + pow(R - 0.120e2, 3) * (-0.694544302849808528e-6) : (R < 0.160e2 ? -0.635026926643940523e-5 + R * 0.528547710388528887e-6 + pow(R - 0.140e2, 2) * (-0.195824857175535207e-5) + pow(R - 0.140e2, 3) * 0.517722351405543716e-6 : (R < 0.180e2 ? 0.158837323802616580e-4 + R * (-0.109177835976635372e-5) + pow(R - 0.160e2, 2) * 0.114808553667791066e-5 + pow(R - 0.160e2, 3) * (-0.237552340647366818e-6) : (R < 0.200e2 ? -0.127751972591839582e-4 + R * 0.649935699176886549e-6 + pow(R - 0.180e2, 2) * (-0.277228507206290307e-6) + pow(R - 0.180e2, 3) * 0.463234073464235099e-7 : (R < 0.250e2 ? -0.245286121587614787e-5 + R * 0.969025585088073997e-7 + pow(R - 0.200e2, 2) * 0.711936872250741530e-9 + pow(R - 0.200e2, 3) * (-0.763707646802444335e-9) : -0.127655863022828708e-5 + R * 0.467438537211314798e-7 + pow(R - 0.250e2, 2) * (-0.107436778297859235e-7) + pow(R - 0.250e2, 3) * 0.901637993111925678e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1647392146e3 * (R - 0.300e2) * (R - 0.250e2) - 0.1757221356e4 * R - 0.1032355646e6 + 0.8786106780e2 * R * R + 0.75000e3 * (-0.3221549816e0 * R + 0.1332547060e2) * R) * pow(R, -6));
}

static double radcoeff_9_2_11_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.972625818300000035e-2 + pow(R - 0.475e1, 2) * 0.547885657984571672e0 + pow(R - 0.475e1, 3) * (-0.114593898713828679e1) : (R < 0.525e1 ? -0.288785045749285263e0 + R * 0.590792689038570559e-1 + pow(R - 0.50e1, 2) * (-0.311568582369143476e0) + pow(R - 0.50e1, 3) * 0.448612516678861040e0 : (R < 0.55e1 ? 0.750160710389982388e-1 + R * (-0.125901754034282339e-1) + pow(R - 0.525e1, 2) * 0.248908051400023242e-1 + pow(R - 0.525e1, 3) * (-0.302613260411575304e-1) : (R < 0.575e1 ? 0.388561914857926127e-1 + R * (-0.581877146614411152e-2) + pow(R - 0.55e1, 2) * 0.219481060913417425e-2 + pow(R - 0.55e1, 3) * 0.140078511776909123e-2 : (R < 0.60e1 ? 0.311949524599730819e-1 + R * (-0.445871895199531892e-2) + pow(R - 0.575e1, 2) * 0.324539944746099268e-2 + pow(R - 0.575e1, 3) * 0.347812455380811375e-1 : (R < 0.625e1 ? -0.169238526857523469e-1 + R * 0.368546431012539092e-2 + pow(R - 0.60e1, 2) * 0.293313336010218445e-1 + pow(R - 0.60e1, 3) * (-0.380260505980936150e-1) : (R < 0.65e1 ? -0.627834408348360018e-1 + R * 0.112212466234937608e-1 + pow(R - 0.625e1, 2) * 0.811795652451632031e-3 + pow(R - 0.625e1, 3) * (-0.353362482017066798e-1) : (R < 0.675e1 ? -0.228571158593472157e-1 + R * 0.500159791189957147e-2 + pow(R - 0.65e1, 2) * (-0.256903904988283818e-1) + pow(R - 0.65e1, 3) * 0.172672599809203589e-1 : (R < 0.70e1 ? 0.406582276918713501e-1 + R * (-0.460598609109205172e-2) + pow(R - 0.675e1, 2) * (-0.127399455131381109e-1) + pow(R - 0.675e1, 3) * 0.161103831260252621e-1 : (R < 0.725e1 ? 0.635586372767195928e-1 + R * (-0.795526201153137075e-2) + pow(R - 0.70e1, 2) * (-0.657158168619164122e-3) + pow(R - 0.70e1, 3) * 0.438960629897857529e-2 : (R < 0.75e1 ? 0.600012297881729051e-1 + R * (-0.746078991478246918e-2) + pow(R - 0.725e1, 2) * 0.263504655561476757e-2 + pow(R - 0.725e1, 3) * 0.110424217406044256e-2 : (R < 0.775e1 ? 0.487489088410406474e-1 + R * (-0.593622122933875219e-2) + pow(R - 0.75e1, 2) * 0.346322818616009954e-2 + pow(R - 0.75e1, 3) * (-0.763607443220358549e-3) : (R < 0.80e1 ? 0.366430370809345263e-1 + R * (-0.434778353186251933e-2) + pow(R - 0.775e1, 2) * 0.289052260374483058e-2 + pow(R - 0.775e1, 3) * (-0.808931313179009348e-3) : (R < 0.825e1 ? 0.264623617466893460e-1 + R * (-0.305419685121116830e-2) + pow(R - 0.80e1, 2) * 0.228382411886057356e-2 + pow(R - 0.80e1, 3) * (-0.966199400063602089e-3) : (R < 0.85e1 ? 0.186638190951656582e-1 + R * (-0.209344717929280718e-2) + pow(R - 0.825e1, 2) * 0.155917456881287200e-2 + pow(R - 0.825e1, 3) * (-0.506079393766572724e-3) : (R < 0.875e1 ? 0.129334321315496305e-1 + R * (-0.140874978121760357e-2) + pow(R - 0.85e1, 2) * 0.117961502348794245e-2 + pow(R - 0.85e1, 3) * (-0.736393296870113028e-3) : (R < 0.90e1 ? 0.904298145017181157e-2 + R * (-0.957016012636778546e-3) + pow(R - 0.875e1, 2) * 0.627320050835357629e-3 + pow(R - 0.875e1, 3) * (-0.796954187529729728e-4) : (R < 0.925e1 ? 0.639248950281753967e-2 + R * (-0.658298878235282219e-3) + pow(R - 0.90e1, 2) * 0.567548486770627896e-3 + pow(R - 0.90e1, 3) * (-0.435716938517997313e-3) : (R < 0.95e1 ? 0.455193802000435771e-2 + R * (-0.456221560822092686e-3) + pow(R - 0.925e1, 2) * 0.240760782882129938e-3 + pow(R - 0.925e1, 3) * 0.210368240249640673e-4 : (R < 0.100e2 ? 0.338622870782529645e-2 + R * (-0.331896764876346974e-3) + pow(R - 0.95e1, 2) * 0.256538400900852990e-3 + pow(R - 0.95e1, 3) * (-0.123299492696318205e-3) : (R < 0.105e2 ? 0.179431305767732609e-2 + R * (-0.167832983497732610e-3) + pow(R - 0.100e2, 2) * 0.715891618563756687e-4 + pow(R - 0.100e2, 3) * 0.108094169981792113e-4 : (R < 0.110e2 ? 0.976751166913586780e-3 + R * (-0.881367588927225461e-4) + pow(R - 0.105e2, 2) * 0.878032873536444865e-4 + pow(R - 0.105e2, 3) * (-0.432991282563987808e-4) : (R < 0.120e2 ? 0.384671244945148641e-3 + R * (-0.328078177313771452e-4) + pow(R - 0.110e2, 2) * 0.228545949690463153e-4 + pow(R - 0.110e2, 3) * (-0.668431401766916622e-5) : (R < 0.140e2 ? 0.929665512785041599e-4 + R * (-0.715156984629201328e-5) + pow(R - 0.120e2, 2) * 0.280165291603881834e-5 + pow(R - 0.120e2, 3) * (-0.404672815946405718e-6) : (R < 0.160e2 ? 0.120282501957105162e-4 + R * (-0.801031973493608321e-6) + pow(R - 0.140e2, 2) * 0.373616020360384138e-6 + pow(R - 0.140e2, 3) * (-0.756396763567899944e-7) : (R < 0.180e2 ? 0.352898942373682832e-5 + R * (-0.214244008333551779e-6) + pow(R - 0.160e2, 2) * (-0.802220377803558674e-7) + pow(R - 0.160e2, 3) * 0.378535635360658763e-7 : (R < 0.200e2 ? 0.111054677729932510e-5 + R * (-0.808893970221847207e-7) + pow(R - 0.180e2, 2) * 0.146899343436039403e-6 + pow(R - 0.180e2, 3) * (-0.306992936374735218e-7) : (R < 0.250e2 ? -0.293156719994581281e-5 + R * 0.138316453072290644e-6 + pow(R - 0.200e2, 2) * (-0.372964183888017211e-7) + pow(R - 0.200e2, 3) * 0.297130057406871917e-8 : 0.260350932914316339e-6 + R * (-0.118001877605726546e-7) + pow(R - 0.250e2, 2) * 0.727309022222906264e-8 + pow(R - 0.250e2, 3) * (-0.782750710822906229e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.5287620432e2 * (R - 0.300e2) * (R - 0.250e2) - 0.5640101764e3 * R - 0.3313643172e5 + 0.2820050882e2 * R * R + 0.75000e3 * (-0.1034034539e0 * R + 0.4277164526e1) * R) * pow(R, -6));
}

static double radcoeff_9_2_11_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.353681623599999967e-1 + pow(R - 0.475e1, 2) * (-0.834894477713556959e0) + pow(R - 0.475e1, 3) * 0.162840739117422761e1 : (R < 0.525e1 ? 0.569235388044053936e0 + R * (-0.112120853011610788e0) + pow(R - 0.50e1, 2) * 0.386411065667113807e0 + pow(R - 0.50e1, 3) * (-0.522029724242682569e0) : (R < 0.55e1 ? 0.847733276341735564e-1 + R * (-0.167958934735568700e-1) + pow(R - 0.525e1, 2) * (-0.511122751489814179e-2) + pow(R - 0.525e1, 3) * 0.671080390445024794e-1 : (R < 0.575e1 ? 0.303531494258894724e-1 + R * (-0.676874991016172128e-2) + pow(R - 0.55e1, 2) * 0.452198017684787221e-1 + pow(R - 0.55e1, 3) * (-0.550653977593273183e-1) : (R < 0.60e1 ? -0.383205579286716516e-1 + R * 0.551638889420376539e-2 + pow(R - 0.575e1, 2) * 0.392075344898322898e-2 + pow(R - 0.575e1, 3) * (-0.178761536071931626e-1) : (R < 0.625e1 ? -0.300064132770799692e-1 + R * 0.412498681734666146e-2 + pow(R - 0.60e1, 2) * (-0.948636175641164210e-2) + pow(R - 0.60e1, 3) * (-0.524142365190002207e-2) : (R < 0.65e1 ? 0.510596569944008188e-2 + R * (-0.160096099559041308e-2) + pow(R - 0.625e1, 2) * (-0.134174294953366587e-1) + pow(R - 0.625e1, 3) * 0.233634519907932395e-1 : (R < 0.675e1 ? 0.197648690394025620e-1 + R * (-0.392902849498500892e-2) + pow(R - 0.65e1, 2) * 0.410515949775827269e-2 + pow(R - 0.65e1, 3) * 0.729894048872705998e-2 : (R < 0.70e1 ? -0.295714740783053738e-2 + R * (-0.507897404469550076e-3) + pow(R - 0.675e1, 2) * 0.957936486430356789e-2 + pow(R - 0.675e1, 3) * (-0.590657804170146954e-2) : (R < 0.725e1 ? -0.282261207310424596e-1 + R * 0.317430164486320844e-2 + pow(R - 0.70e1, 2) * 0.514943133302746530e-2 + pow(R - 0.70e1, 3) * (-0.542396240192119603e-2) : (R < 0.75e1 ? -0.392825203773711981e-1 + R * 0.473202436101671699e-2 + pow(R - 0.725e1, 2) * 0.108145953158656828e-2 + pow(R - 0.725e1, 3) * (-0.331902995061374379e-2) : (R < 0.775e1 ? -0.386548763750244259e-1 + R * 0.465043601106992360e-2 + pow(R - 0.75e1, 2) * (-0.140781293137373989e-2) + pow(R - 0.75e1, 3) * (-0.864309219623815616e-3) : (R < 0.80e1 ? -0.320451450709528102e-1 + R * 0.378447156670358833e-2 + pow(R - 0.775e1, 2) * (-0.205604484609160166e-2) + pow(R - 0.775e1, 3) * 0.262606925108997788e-3 : (R < 0.825e1 ? -0.243392756439257986e-1 + R * 0.280568794211572469e-2 + pow(R - 0.80e1, 2) * (-0.185908965225985330e-2) + pow(R - 0.80e1, 3) * 0.598425775187817234e-3 : (R < 0.85e1 ? -0.177030633998764911e-1 + R * 0.198834794883351405e-2 + pow(R - 0.825e1, 2) * (-0.141027032086899038e-2) + pow(R - 0.825e1, 3) * 0.550069884539741401e-3 : (R < 0.875e1 ? -0.126656354677768708e-1 + R * 0.138635089175022006e-2 + pow(R - 0.85e1, 2) * (-0.997717907464184270e-3) + pow(R - 0.85e1, 3) * 0.337288459453217158e-3 : (R < 0.90e1 ? -0.891107073844905374e-2 + R * 0.950733524165606149e-3 + pow(R - 0.875e1, 2) * (-0.744751562874271375e-3) + pow(R - 0.875e1, 3) * 0.267025928847386157e-3 : (R < 0.925e1 ? -0.605266965298619994e-2 + R * 0.628425104387355478e-3 + pow(R - 0.90e1, 2) * (-0.544482116238731743e-3) + pow(R - 0.90e1, 3) * 0.368342865157239379e-3 : (R < 0.95e1 ? -0.420155929713599170e-2 + R * 0.425248333484972037e-3 + pow(R - 0.925e1, 2) * (-0.268224967370802182e-3) + pow(R - 0.925e1, 3) * (-0.256268614763436216e-4) : (R < 0.100e2 ? -0.289900733529118663e-2 + R * 0.286330813272756490e-3 + pow(R - 0.95e1, 2) * (-0.287445113478059899e-3) + pow(R - 0.95e1, 3) * 0.160341858745093795e-3 : (R < 0.105e2 ? -0.127893868712516956e-2 + R * 0.119142093853516950e-3 + pow(R - 0.100e2, 2) * (-0.469323253604191730e-4) + pow(R - 0.100e2, 3) * (-0.124137166132294632e-4) : (R < 0.110e2 ? -0.701676048428344704e-3 + R * 0.628994810331756898e-4 + pow(R - 0.105e2, 2) * (-0.655529002802633686e-4) + pow(R - 0.105e2, 3) * 0.355205075478239515e-4 : (R < 0.120e2 ? -0.285586494241583261e-3 + R * 0.239869614137802967e-4 + pow(R - 0.110e2, 2) * (-0.122721389585274397e-4) + pow(R - 0.110e2, 3) * 0.270551544474714223e-5 : (R < 0.140e2 ? -0.980203387666021592e-4 + R * 0.755922983096684616e-5 + pow(R - 0.120e2, 2) * (-0.415559262428601253e-5) + pow(R - 0.120e2, 3) * 0.808731379526294594e-6 : (R < 0.160e2 ? -0.113265430279366476e-4 + R * 0.641635888138332001e-6 + pow(R - 0.140e2, 2) * 0.696795652871755029e-6 + pow(R - 0.140e2, 3) * (-0.214508007095460484e-6) : (R < 0.180e2 ? -0.136648088948772122e-4 + R * 0.854722414479825783e-6 + pow(R - 0.160e2, 2) * (-0.590252389701008033e-6) + pow(R - 0.160e2, 3) * 0.111471140418047537e-6 : (R < 0.200e2 ? 0.328635639783744253e-5 + R * (-0.168633459307635692e-6) + pow(R - 0.180e2, 2) * 0.785744528072772287e-7 + pow(R - 0.180e2, 3) * (-0.134932375142296920e-7) : (R < 0.250e2 ? 0.445129087785661638e-6 + R * (-0.162544982492830812e-7) + pow(R - 0.200e2, 2) * (-0.238497227810092329e-8) + pow(R - 0.200e2, 3) * 0.368265378391507756e-9 : 0.337283438173230828e-6 + R * (-0.124843176509292322e-7) + pow(R - 0.250e2, 2) * 0.313900839777169310e-8 + pow(R - 0.250e2, 3) * (-0.273624036717169324e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.3841251930e2 * (R - 0.300e2) * (R - 0.250e2) + 0.4097297768e3 * R + 0.2407307652e5 - 0.2048648884e2 * R * R + 0.75000e3 * (0.751198917e-1 * R - 0.3107269602e1) * R) * pow(R, -6));
}

static double radcoeff_9_4_5_4_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.679006881000000003e-2 + pow(R - 0.475e1, 2) * 0.106658926032263277e0 + pow(R - 0.475e1, 3) * (-0.199830628097053098e0) : (R < 0.525e1 ? -0.825523407366709205e-1 + R * 0.158612202479341859e-1 + pow(R - 0.50e1, 2) * (-0.432140450405265400e-1) + pow(R - 0.50e1, 3) * 0.554879952031591822e-1 : (R < 0.55e1 ? -0.255703456733821326e-1 + R * 0.465819682826326339e-2 + pow(R - 0.525e1, 2) * (-0.159804863815715117e-2) + pow(R - 0.525e1, 3) * (-0.104934454899836133e-1) : (R < 0.575e1 ? -0.106181843825701814e-1 + R * 0.189165147981276011e-2 + pow(R - 0.55e1, 2) * (-0.946813275564486155e-2) + pow(R - 0.55e1, 3) * 0.409733226717527797e-2 : (R < 0.60e1 ? 0.116575234588072556e-1 + R * (-0.207416509791430535e-2) + pow(R - 0.575e1, 2) * (-0.639513355526340286e-2) + pow(R - 0.575e1, 3) * 0.174355192820824963e-1 : (R < 0.625e1 ? 0.111006990738332298e-1 + R * (-0.200257201015553851e-2) + pow(R - 0.60e1, 2) * 0.668150590629847021e-2 + pow(R - 0.60e1, 3) * (-0.227541059230526458e-2) : (R < 0.65e1 ? -0.673046926685287074e-2 + R * 0.911541456936459243e-3 + pow(R - 0.625e1, 2) * 0.497494796206952167e-2 + pow(R - 0.625e1, 3) * (-0.846427642646143362e-2) : (R < 0.675e1 ? -0.124045333203630561e-1 + R * 0.181196360800970095e-2 + pow(R - 0.65e1, 2) * (-0.137325935777655420e-2) + pow(R - 0.65e1, 3) * (-0.843497909849001172e-3) : (R < 0.70e1 ? -0.680123931041697050e-2 + R * 0.967178071024736401e-3 + pow(R - 0.675e1, 2) * (-0.200588279016330508e-2) + pow(R - 0.675e1, 3) * 0.196850224185743774e-2 : (R < 0.725e1 ? -0.245891856413947389e-2 + R * 0.333330846291353411e-3 + pow(R - 0.70e1, 2) * (-0.529506108770226775e-3) + pow(R - 0.70e1, 3) * 0.560168377939252696e-3 : (R < 0.75e1 ? -0.132527930950141208e-2 + R * 0.173609362769849937e-3 + pow(R - 0.725e1, 2) * (-0.109379825315787213e-3) + pow(R - 0.725e1, 3) * (-0.329045990544498806e-4) : (R < 0.775e1 ? -0.876183245589352128e-3 + R * 0.112749837789246954e-3 + pow(R - 0.75e1, 2) * (-0.134058274606624626e-3) + pow(R - 0.75e1, 3) * 0.193931808998547295e-3 : (R < 0.80e1 ? -0.643863049090007719e-3 + R * 0.820829146731622754e-4 + pow(R - 0.775e1, 2) * 0.113905821422858614e-4 + pow(R - 0.775e1, 3) * (-0.253608876939739902e-3) : (R < 0.825e1 ? -0.312262789567831743e-3 + R * 0.402265413181039660e-4 + pow(R - 0.80e1, 2) * (-0.178816075562519068e-3) + pow(R - 0.80e1, 3) * 0.285448533512412846e-3 : (R < 0.85e1 ? -0.229155495359801739e-4 + R * 0.434010357042183955e-5 + pow(R - 0.825e1, 2) * 0.352703245717905930e-4 + pow(R - 0.825e1, 3) * (-0.232079615253911808e-3) : (R < 0.875e1 ? 0.195640609142226423e-3 + R * (-0.215396620037913423e-4) + pow(R - 0.85e1, 2) * (-0.138789386868643270e-3) + pow(R - 0.85e1, 3) * 0.288912152335234543e-3 : (R < 0.90e1 ? 0.324687592468494394e-3 + R * (-0.367633268752564970e-4) + pow(R - 0.875e1, 2) * 0.778947273827826510e-4 + pow(R - 0.875e1, 3) * (-0.406296001670266858e-4) : (R < 0.925e1 ? 0.469573524866441120e-4 + R * (-0.543401321518267892e-5) + pow(R - 0.90e1, 2) * 0.474225272575126350e-4 + pow(R - 0.90e1, 3) * (-0.122425637235127656e-3) : (R < 0.95e1 ? 0.410111358721184380e-4 + R * (-0.467755656801280365e-5) + pow(R - 0.925e1, 2) * (-0.443967006688331204e-4) + pow(R - 0.925e1, 3) * 0.116944392627537332e-3 : (R < 0.100e2 ? 0.426407270242780450e-4 + R * (-0.494883328476610995e-5) + pow(R - 0.95e1, 2) * 0.433115938018198817e-4 + pow(R - 0.95e1, 3) * (-0.355350229525753172e-4) : (R < 0.105e2 ? -0.117576518268622829e-3 + R * 0.117114933026222821e-4 + pow(R - 0.100e2, 2) * (-0.999094062704309917e-5) + pow(R - 0.100e2, 3) * (-0.490002822840292595e-5) : (R < 0.110e2 ? 0.228058419290916458e-4 + R * (-0.195446849572301403e-5) + pow(R - 0.105e2, 2) * (-0.173409829696474881e-4) + pow(R - 0.105e2, 3) * 0.191643278021870277e-4 : (R < 0.120e2 ? 0.535112454603325167e-4 + R * (-0.492220561373022879e-5) + pow(R - 0.110e2, 2) * 0.114055087336330569e-4 + pow(R - 0.110e2, 3) * (-0.499729736590282708e-5) : (R < 0.140e2 ? -0.339100476067288268e-4 + R * 0.289691975582740205e-5 + pow(R - 0.120e2, 2) * (-0.358638336407542435e-5) + pow(R - 0.120e2, 3) * 0.851919968830861670e-6 : (R < 0.160e2 ? 0.162746923120553641e-4 + R * (-0.122557407450395468e-5) + pow(R - 0.140e2, 2) * 0.152513644890974546e-5 + pow(R - 0.140e2, 3) * (-0.348525727116383990e-6) : (R < 0.180e2 ? -0.111047608331147015e-4 + R * 0.692662995738418834e-6 + pow(R - 0.160e2, 2) * (-0.566017913788558592e-6) + pow(R - 0.160e2, 3) * 0.116557915272174569e-6 : (R < 0.200e2 ? 0.314041092789496820e-5 + R * (-0.172713676149720468e-6) + pow(R - 0.180e2, 2) * 0.133329577844488928e-6 + pow(R - 0.180e2, 3) * (-0.255447744848143378e-7) : (R < 0.250e2 ? -0.106624930780926278e-5 + R * 0.540673414104631432e-7 + pow(R - 0.200e2, 2) * (-0.199390690643971021e-7) + pow(R - 0.200e2, 3) * 0.172966989566089470e-8 : 0.393118914273519638e-6 + R * (-0.155981070589407838e-7) + pow(R - 0.250e2, 2) * 0.600597937051631524e-8 + pow(R - 0.250e2, 3) * (-0.595532339745631406e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.4831206528e1 * (R - 0.300e2) * (R - 0.250e2) + 0.5153223228e2 * R + 0.3027601918e4 - 0.2576611614e1 * R * R + 0.75000e3 * (0.944773453e-2 * R - 0.3907948184e0) * R) * pow(R, -6));
}

static double radcoeff_9_4_5_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.124325093300000182e-1 + R * (-0.346944695195361419e-17) + pow(R - 0.475e1, 2) * (-0.111579168313456586e0) + pow(R - 0.475e1, 3) * 0.186386995877826367e0 : (R < 0.525e1 ? 0.112581220269179230e0 + R * (-0.208420224296358460e-1) + pow(R - 0.50e1, 2) * 0.282110785949131956e-1 + pow(R - 0.50e1, 3) * (-0.327166548974792276e-1) : (R < 0.55e1 ? 0.719845908016471664e-1 + R * (-0.128708559254566042e-1) + pow(R - 0.525e1, 2) * 0.367358742180377493e-2 + pow(R - 0.525e1, 3) * 0.156235576640905670e-1 : (R < 0.575e1 ? 0.462441488529575437e-1 + R * (-0.810464515253773478e-2) + pow(R - 0.55e1, 2) * 0.153912556698717010e-1 + pow(R - 0.55e1, 3) * (-0.391766030288304579e-2) : (R < 0.60e1 ? 0.711875635305661992e-2 + R * (-0.114357862439245562e-2) + pow(R - 0.575e1, 2) * 0.124530104427094165e-1 + pow(R - 0.575e1, 3) * (-0.192409660717583753e-1) : (R < 0.625e1 ? -0.811651508654534330e-2 + R * 0.147524545850755725e-2 + pow(R - 0.60e1, 2) * (-0.197771411110936410e-2) + pow(R - 0.60e1, 3) * (-0.370227932688346056e-2) : (R < 0.65e1 ? 0.222099485043608267e-2 + R * (-0.207788970837773221e-3) + pow(R - 0.625e1, 2) * (-0.475442360627195953e-2) + pow(R - 0.625e1, 3) * 0.628309627529221107e-2 : (R < 0.675e1 ? 0.981636988921701266e-2 + R * (-0.140692022235646341e-2) + pow(R - 0.65e1, 2) * (-0.421013998028011989e-4) + pow(R - 0.65e1, 3) * 0.194366669931461938e-2 : (R < 0.70e1 ? 0.752624740192051750e-2 + R * (-0.106353341613637294e-2) + pow(R - 0.675e1, 2) * 0.141564862468316331e-2 + pow(R - 0.675e1, 3) * (-0.787399808550687166e-3) : (R < 0.725e1 ? 0.368111438128631598e-2 + R * (-0.503346567898045106e-3) + pow(R - 0.70e1, 2) * 0.825098768270147932e-3 + pow(R - 0.70e1, 3) * (-0.737825858711869628e-3) : (R < 0.75e1 ? 0.173315351696798868e-2 + R * (-0.229139532271446702e-3) + pow(R - 0.725e1, 2) * 0.271729374236245630e-3 + pow(R - 0.725e1, 3) * (-0.765920058818353846e-4) : (R < 0.775e1 ? 0.837662207651260313e-3 + R * (-0.107635846256168042e-3) + pow(R - 0.75e1, 2) * 0.214285369824869092e-3 + pow(R - 0.75e1, 3) * (-0.237415265920787604e-3) : (R < 0.80e1 ? 0.361983679955079078e-3 + R * (-0.450085237038811713e-4) + pow(R - 0.775e1, 2) * 0.362239203842783960e-4 + pow(R - 0.775e1, 3) * 0.890872447329851618e-4 : (R < 0.825e1 ? 0.871131145414580149e-4 + R * (-0.101927051243072521e-4) + pow(R - 0.80e1, 2) * 0.103039353934017267e-3 + pow(R - 0.80e1, 3) * (-0.308534136115153014e-3) : (R < 0.85e1 ? 0.140958635110840927e-3 + R * (-0.165231786788898102e-4) + pow(R - 0.825e1, 2) * (-0.128361248152347507e-3) + pow(R - 0.825e1, 3) * 0.397815505679626901e-3 : (R < 0.875e1 ? 0.506687668481348004e-4 + R * (-0.611339544013350612e-5) + pow(R - 0.85e1, 2) * 0.170000381107372723e-3 + pow(R - 0.85e1, 3) * (-0.383256450827354728e-3) : (R < 0.90e1 ? -0.596661440829585778e-4 + R * 0.702621058342383720e-5 + pow(R - 0.875e1, 2) * (-0.117441957013143336e-3) + pow(R - 0.875e1, 3) * 0.217870833885791933e-3 : (R < 0.925e1 ? 0.972297397601566015e-4 + R * (-0.108439865695618435e-4) + pow(R - 0.90e1, 2) * 0.459611684012006068e-4 + pow(R - 0.90e1, 3) * (-0.388674207798129085e-4) : (R < 0.95e1 ? -0.456647116050177179e-4 + R * 0.484895623482353702e-5 + pow(R - 0.925e1, 2) * 0.168106028163409253e-4 + pow(R - 0.925e1, 3) * (-0.414092033105402743e-4) : (R < 0.100e2 ? -0.513512877114431269e-4 + R * 0.549003202226769742e-5 + pow(R - 0.95e1, 2) * (-0.142462996665642838e-4) + pow(R - 0.95e1, 3) * 0.779612052485777852e-5 : (R < 0.105e2 ? 0.300537451667325129e-4 + R * (-0.290917725065325159e-5) + pow(R - 0.100e2, 2) * (-0.255211887927761428e-5) + pow(R - 0.100e2, 3) * 0.501913122516823432e-5 : (R < 0.110e2 ? 0.173146966847742464e-4 + R * (-0.169694771105469013e-5) + pow(R - 0.105e2, 2) * 0.497657795847473720e-5 + pow(R - 0.105e2, 3) * (-0.243228651753071325e-5) : (R < 0.120e2 ? -0.164211884138921313e-4 + R * 0.145541535927201213e-5 + pow(R - 0.110e2, 2) * 0.132814818217866690e-5 + pow(R - 0.110e2, 3) * (-0.101987952545067883e-5) : (R < 0.140e2 ? -0.112728132133277080e-4 + R * 0.105207314727730901e-5 + pow(R - 0.120e2, 2) * (-0.173149039417337002e-5) + pow(R - 0.120e2, 3) * 0.492304339467357732e-6 : (R < 0.160e2 ? -0.400703108970859509e-8 + R * 0.337636441921220439e-7 + pow(R - 0.140e2, 2) * 0.122233564263077659e-5 + pow(R - 0.140e2, 3) * (-0.420364120988418790e-6) : (R < 0.180e2 ? 0.400285267333275180e-5 + R * (-0.121263237145796980e-6) + pow(R - 0.160e2, 2) * (-0.129984908329973626e-5) + pow(R - 0.160e2, 3) * 0.364092820186317323e-6 : (R < 0.200e2 ? 0.166612837393607984e-4 + R * (-0.951545728108933290e-6) + pow(R - 0.180e2, 2) * 0.884707837818167998e-6 + pow(R - 0.180e2, 3) * (-0.174043932344350642e-6) : (R < 0.250e2 ? -0.101983196309306195e-4 + R * 0.498758435031530896e-6 + pow(R - 0.200e2, 2) * (-0.159555756247935826e-6) + pow(R - 0.200e2, 3) * 0.133716268651259271e-7 : 0.230137851088456823e-5 + R * (-0.939271125633827234e-7) + pow(R - 0.250e2, 2) * 0.410186467289530848e-7 + pow(R - 0.250e2, 3) * (-0.417673764965530874e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.7140829773e2 * (R - 0.300e2) * (R - 0.250e2) - 0.7616848456e3 * R - 0.4475016930e5 + 0.3808424228e2 * R * R + 0.75000e3 * (-0.1396444781e0 * R + 0.5776234180e1) * R) * pow(R, -6));
}

static double radcoeff_9_4_7_6_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.412004873500000819e-2 + R * (-0.173472347597680709e-17) + pow(R - 0.475e1, 2) * (-0.756078264975172387e-1) + pow(R - 0.475e1, 3) * 0.145207202886068948e0 : (R < 0.525e1 ? 0.545512356621034450e-1 + R * (-0.105775627076206882e-1) + pow(R - 0.50e1, 2) * 0.332975756670344861e-1 + pow(R - 0.50e1, 3) * (-0.407880569782069352e-1) : (R < 0.55e1 ? 0.873962821326553993e-2 + R * (-0.157653555751724570e-2) + pow(R - 0.525e1, 2) * 0.270653293337928423e-2 + pow(R - 0.525e1, 3) * 0.322699590675879682e-2 : (R < 0.575e1 ? -0.181159676299318898e-2 + R * 0.381792641689670739e-3 + pow(R - 0.55e1, 2) * 0.512677986344838195e-2 + pow(R - 0.55e1, 3) * (-0.848518540028259994e-3) : (R < 0.60e1 ? -0.153291141801617375e-1 + R * 0.278608534715856296e-2 + pow(R - 0.575e1, 2) * 0.449039095842718693e-2 + pow(R - 0.575e1, 3) * (-0.168035624762457522e-1) : (R < 0.625e1 ? -0.987818549845646821e-2 + R * 0.188061286207607810e-2 + pow(R - 0.60e1, 2) * (-0.811228089875712724e-2) + pow(R - 0.60e1, 3) * 0.337247927381125606e-2 : (R < 0.65e1 ? 0.110662455936429687e-1 + R * (-0.154318772346287501e-2) + pow(R - 0.625e1, 2) * (-0.558292144339868519e-2) + pow(R - 0.625e1, 3) * 0.102161123570007374e-1 : (R < 0.675e1 ? 0.165705475149597672e-1 + R * (-0.241912737822457934e-2) + pow(R - 0.65e1, 2) * 0.207916282435186787e-2 + pow(R - 0.65e1, 3) * 0.291311074185799366e-3 : (R < 0.70e1 ? 0.931918181656195450e-2 + R * (-0.132492513963880813e-2) + pow(R - 0.675e1, 2) * 0.229764612999121742e-2 + pow(R - 0.675e1, 3) * (-0.186424066014393916e-2) : (R < 0.725e1 ? 0.383871035084131602e-2 + R * (-0.525647198420188012e-3) + pow(R - 0.70e1, 2) * 0.899465634883262941e-3 + pow(R - 0.70e1, 3) * (-0.971089177290044040e-3) : (R < 0.75e1 ? 0.193926510855318892e-2 + R * (-0.257993601720439840e-3) + pow(R - 0.725e1, 2) * 0.171148751915729857e-3 + pow(R - 0.725e1, 3) * 0.691526550641173750e-4 : (R < 0.775e1 ? 0.121198867491539657e-2 + R * (-0.159453102938052877e-3) + pow(R - 0.75e1, 2) * 0.223013243213817888e-3 + pow(R - 0.75e1, 3) * (-0.866209482464255613e-4) : (R < 0.80e1 ? 0.486268298266952573e-3 + R * (-0.641879091273487207e-4) + pow(R - 0.775e1, 2) * 0.158047532028998710e-3 + pow(R - 0.775e1, 3) * (-0.102226055678415214e-3) : (R < 0.825e1 ? 0.156979423004177607e-4 + R * (-0.433152855255221992e-5) + pow(R - 0.80e1, 2) * 0.813779902701872930e-4 + pow(R - 0.80e1, 3) * (-0.114273236079913615e-3) : (R < 0.85e1 ? -0.139919250424850358e-3 + R * 0.149312348175576203e-4 + pow(R - 0.825e1, 2) * (-0.432693678974792370e-5) + pow(R - 0.825e1, 3) * 0.862953423980697762e-4 : (R < 0.875e1 ? -0.257985039839734827e-3 + R * 0.289481431223217448e-4 + pow(R - 0.85e1, 2) * 0.603945700088044101e-4 + pow(R - 0.85e1, 3) * (-0.136559912136365535e-3) : (R < 0.90e1 ? -0.296526765781109775e-3 + R * 0.335404446011554054e-4 + pow(R - 0.875e1, 2) * (-0.420253640934697408e-4) + pow(R - 0.875e1, 3) * 0.381999992673924288e-4 : (R < 0.925e1 ? -0.173904836391509579e-3 + R * 0.196902624170566205e-4 + pow(R - 0.90e1, 2) * (-0.133753646429254209e-4) + pow(R - 0.90e1, 3) * (-0.407495456052042173e-4) : (R < 0.95e1 ? -0.428414536992176184e-4 + R * 0.536204029461812094e-5 + pow(R - 0.925e1, 2) * (-0.439375238468285822e-4) + pow(R - 0.925e1, 3) * 0.470080293614243987e-4 : (R < 0.100e2 ? 0.801171374915264026e-4 + R * (-0.779271612352909583e-5) + pow(R - 0.95e1, 2) * (-0.868150182576028319e-5) + pow(R - 0.95e1, 3) * 0.109275411056369488e-4 : (R < 0.105e2 ? 0.841711646386166819e-4 + R * (-0.827856212006166701e-5) + pow(R - 0.100e2, 2) * 0.770980983269514083e-5 + pow(R - 0.100e2, 3) * (-0.199485344114361289e-5) : (R < 0.110e2 ? 0.206057280223544783e-4 + R * (-0.206489236822423606e-5) + pow(R - 0.105e2, 2) * 0.471752967097972107e-5 + pow(R - 0.105e2, 3) * (-0.316708918906249768e-5) : (R < 0.120e2 ? -0.437511627954472617e-5 + R * 0.277320410958611488e-6 + pow(R - 0.110e2, 2) * (-0.331041126140257102e-7) + pow(R - 0.110e2, 3) * 0.733965756554142147e-7 : (R < 0.140e2 ? -0.618260183736163277e-5 + R * 0.431301912696802712e-6 + pow(R - 0.120e2, 2) * 0.187085614352216934e-6 + pow(R - 0.120e2, 3) * (-0.103644057562809156e-6) : (R < 0.160e2 ? 0.671995426372553373e-6 + R * (-0.640843206480395261e-7) + pow(R - 0.140e2, 2) * (-0.434778731024638000e-6) + pow(R - 0.140e2, 3) * 0.154895719174328856e-6 : (R < 0.180e2 ? -0.174209304022567750e-5 + R * 0.555493853453548510e-7 + pow(R - 0.160e2, 2) * 0.494595584021335242e-6 + pow(R - 0.160e2, 3) * (-0.138313006684506301e-6) : (R < 0.200e2 ? -0.660548736329915987e-5 + R * 0.374175641216619991e-6 + pow(R - 0.180e2, 2) * (-0.335282456085702725e-6) + pow(R - 0.180e2, 3) * 0.656415984011963587e-7 : (R < 0.250e2 ? 0.364712847013669071e-5 + R * (-0.179255002311834551e-6) + pow(R - 0.200e2, 2) * 0.585671343214754276e-7 + pow(R - 0.200e2, 3) * (-0.493537963422170297e-8) : -0.893562392307299381e-6 + R * 0.362628683362919749e-7 + pow(R - 0.250e2, 2) * (-0.154635601918501244e-7) + pow(R - 0.250e2, 3) * 0.156716861131834566e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1984909565e2 * (R - 0.300e2) * (R - 0.250e2) + 0.2117203320e3 * R + 0.1243961105e5 - 0.1058601660e2 * R * R + 0.75000e3 * (0.3881737808e-1 * R - 0.1605654965e1) * R) * pow(R, -6));
}

static double radcoeff_9_4_7_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.101164494599999995e-1 + pow(R - 0.475e1, 2) * 0.102957260857980376e0 + pow(R - 0.475e1, 3) * (-0.176516501351921484e0) : (R < 0.525e1 ? -0.983486231175245279e-1 + R * 0.183817864255049063e-1 + pow(R - 0.50e1, 2) * (-0.294301151559607510e-1) + pow(R - 0.50e1, 3) * 0.335614051117644890e-1 : (R < 0.55e1 ? -0.554465642323969596e-1 + R * 0.995949230598037333e-2 + pow(R - 0.525e1, 2) * (-0.425906132213738076e-2) + pow(R - 0.525e1, 3) * (-0.117823215271364683e-1) : (R < 0.575e1 ? -0.320339166281547738e-1 + R * 0.562077635857359537e-2 + pow(R - 0.55e1, 2) * (-0.130958024674897328e-1) + pow(R - 0.55e1, 3) * 0.487052289758141410e-2 : (R < 0.60e1 ? -0.376902767020147298e-3 + R * (-0.139018318747569872e-4) + pow(R - 0.575e1, 2) * (-0.944291029430367225e-2) + pow(R - 0.575e1, 3) * 0.151316178792107962e-1 : (R < 0.625e1 ? 0.105750076377474096e-1 + R * (-0.189817862667456829e-2) + pow(R - 0.60e1, 2) * 0.190580311510442596e-2 + pow(R - 0.60e1, 3) * 0.483470216157538997e-2 : (R < 0.65e1 ? -0.851638776581439393e-3 + R * (-0.387704138269696907e-4) + pow(R - 0.625e1, 2) * 0.553182973628596909e-2 + pow(R - 0.625e1, 3) * (-0.650024391431235863e-2) : (R < 0.675e1 ? -0.106637401015859078e-1 + R * 0.150834872038244734e-2 + pow(R - 0.65e1, 2) * 0.656646800551699680e-3 + pow(R - 0.65e1, 3) * (-0.277692826432595578e-2) : (R < 0.70e1 ? -0.936772229800596733e-2 + R * 0.131599807109718052e-2 + pow(R - 0.675e1, 2) * (-0.142604939769276715e-2) + pow(R - 0.675e1, 3) * 0.574952517216180251e-3 : (R < 0.725e1 ? -0.521131903920181438e-2 + R * 0.710776969228830643e-3 + pow(R - 0.70e1, 2) * (-0.994835009780631937e-3) + pow(R - 0.70e1, 3) * 0.736624301061236338e-3 : (R < 0.75e1 ? -0.265705822140934996e-2 + R * 0.351476520787496549e-3 + pow(R - 0.725e1, 2) * (-0.442366783984704602e-3) + pow(R - 0.725e1, 3) * 0.162159433738873692e-3 : (R < 0.775e1 ? -0.125133366800887313e-2 + R * 0.160698022621183083e-3 + pow(R - 0.75e1, 2) * (-0.320747208680549319e-3) + pow(R - 0.75e1, 3) * 0.313052189263267897e-3 : (R < 0.80e1 ? -0.478497456980226429e-3 + R * 0.590217037677711473e-4 + pow(R - 0.775e1, 2) * (-0.859580667330983963e-4) + pow(R - 0.775e1, 3) * 0.706391813680551221e-4 : (R < 0.825e1 ? -0.244892604061858286e-3 + R * 0.292875169077322879e-4 + pow(R - 0.80e1, 2) * (-0.329786807070570547e-4) + pow(R - 0.80e1, 3) * 0.430192097651161311e-5 : (R < 0.85e1 ? -0.117504030184722416e-3 + R * 0.136047867372996873e-4 + pow(R - 0.825e1, 2) * (-0.297522399746733445e-4) + pow(R - 0.825e1, 3) * 0.847604577978983804e-4 : (R < 0.875e1 ? -0.126679122753086163e-3 + R * 0.146212525870689630e-4 + pow(R - 0.85e1, 2) * 0.338181033737504442e-4 + pow(R - 0.85e1, 3) * (-0.169452869608105201e-3) : (R < 0.90e1 ? 0.284121956088594545e-5 + R * (-0.242108777575536599e-6) + pow(R - 0.875e1, 2) * (-0.932715488323284427e-4) + pow(R - 0.875e1, 3) * 0.201887949850522360e-3 : (R < 0.925e1 ? 0.792023013479013359e-4 + R * (-0.902389259676681548e-5) + pow(R - 0.90e1, 2) * 0.581444135555633272e-4 + pow(R - 0.90e1, 3) * (-0.862471126419842574e-4) : (R < 0.95e1 ? -0.378443606459458927e-4 + R * 0.387698056064279901e-5 + pow(R - 0.925e1, 2) * (-0.654092092592486333e-5) + pow(R - 0.925e1, 3) * 0.138099939654146641e-4 : (R < 0.100e2 ? -0.315670644008583622e-4 + R * 0.319589396619561728e-5 + pow(R - 0.95e1, 2) * 0.381657454813613473e-5 + pow(R - 0.95e1, 3) * (-0.108345286410547389e-4) : (R < 0.105e2 ? 0.111259824820930259e-4 + R * (-0.111342796645930258e-5) + pow(R - 0.100e2, 2) * (-0.124352184134459736e-4) + pow(R - 0.100e2, 3) * 0.138253680367291551e-4 : (R < 0.110e2 ? 0.314403689347632774e-4 + R * (-0.317962035235840732e-5) + pow(R - 0.105e2, 2) * 0.830283364164776072e-5 + pow(R - 0.105e2, 3) * (-0.420282447386188987e-5) : (R < 0.120e2 ? -0.236671438628222852e-4 + R * 0.197109493389293515e-5 + pow(R - 0.110e2, 2) * 0.199859693085492591e-5 + pow(R - 0.110e2, 3) * (-0.138547403774786049e-5) : (R < 0.140e2 ? -0.211432819509104719e-4 + R * 0.181186668235920594e-5 + pow(R - 0.120e2, 2) * (-0.215782518238865640e-5) + pow(R - 0.120e2, 3) * 0.558054848404526744e-6 : (R < 0.160e2 ? 0.177485178857538055e-5 + R * (-0.122775866341098610e-6) + pow(R - 0.140e2, 2) * 0.119050390803850407e-5 + pow(R - 0.140e2, 3) * (-0.367628419433977383e-6) : (R < 0.180e2 ? -0.201175351768302174e-5 + R * 0.227698732605188855e-6 + pow(R - 0.160e2, 2) * (-0.101526660856536023e-5) + pow(R - 0.160e2, 3) * 0.260664784131382853e-6 : (R < 0.200e2 ? 0.128081007650338343e-4 + R * (-0.705390292079657406e-6) + pow(R - 0.180e2, 2) * 0.548722096222936993e-6 + pow(R - 0.180e2, 3) * (-0.105256861466554111e-6) : (R < 0.250e2 ? -0.447518668766882107e-5 + R * 0.226415755213441045e-6 + pow(R - 0.200e2, 2) * (-0.828190725763877012e-7) + pow(R - 0.200e2, 3) * 0.717129337233989861e-8 : 0.160934124042358941e-5 + R * (-0.639279676249435831e-7) + pow(R - 0.250e2, 2) * 0.247503280087107729e-7 + pow(R - 0.250e2, 3) * (-0.245720686314441099e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1700109331e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1813448544e3 * R + 0.1065419986e5 - 0.9067242720e1 * R * R + 0.75000e3 * (0.3324691790e-1 * R - 0.1375218348e1) * R) * pow(R, -6));
}

static double radcoeff_9_4_9_8_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.820542354799999986e-3 + pow(R - 0.475e1, 2) * (-0.632993688617936208e-2) + pow(R - 0.475e1, 3) * 0.971322529191744749e-2 : (R < 0.525e1 ? 0.565429923927579774e-2 + R * (-0.134373870085515964e-2) + pow(R - 0.50e1, 2) * 0.954982082758723755e-3 + pow(R - 0.50e1, 3) * (-0.976722738935233842e-2) : (R < 0.55e1 ? 0.126691591856416489e-1 + R * (-0.269760279497936175e-2) + pow(R - 0.525e1, 2) * (-0.637043845925553114e-2) + pow(R - 0.525e1, 3) * 0.136783209246919089e-1 : (R < 0.575e1 ? 0.158976678557506690e-1 + R * (-0.331813685122739387e-2) + pow(R - 0.55e1, 2) * 0.388830223426340181e-2 + pow(R - 0.55e1, 3) * (-0.934888312541530542e-2) : (R < 0.60e1 ? 0.148950061426386150e-1 + R * (-0.312690132011106316e-2) + pow(R - 0.575e1, 2) * (-0.312336010979807769e-2) + pow(R - 0.575e1, 3) * 0.221705515449693163e-1 : (R < 0.625e1 ? -0.525579155029872597e-3 + R * (-0.531602960328354541e-3) + pow(R - 0.60e1, 2) * 0.135045535489289083e-1 + pow(R - 0.60e1, 3) * (-0.824789508646195726e-2) : (R < 0.65e1 ? -0.323466457049030112e-1 + R * 0.467419348542448196e-2 + pow(R - 0.625e1, 2) * 0.731863223408243946e-2 + pow(R - 0.625e1, 3) * (-0.165909789431214726e-1) : (R < 0.675e1 ? -0.357137644100977564e-1 + R * 0.522270105063042493e-2 + pow(R - 0.65e1, 2) * (-0.512460197325866583e-2) + pow(R - 0.65e1, 3) * 0.686909866947856690e-3 : (R < 0.70e1 ? -0.195971577073632587e-1 + R * 0.278919566405381623e-2 + pow(R - 0.675e1, 2) * (-0.460941957304777331e-2) + pow(R - 0.675e1, 3) * 0.377820415373003289e-2 : (R < 0.725e1 ? -0.865213643688017738e-2 + R * 0.119289915635431088e-2 + pow(R - 0.70e1, 2) * (-0.177576645775024853e-2) + pow(R - 0.70e1, 3) * 0.121340114053202159e-2 : (R < 0.75e1 ? -0.395647621369481835e-2 + R * 0.532528641328940469e-3 + pow(R - 0.725e1, 2) * (-0.865715602351232343e-3) + pow(R - 0.725e1, 3) * 0.631501693741880156e-3 : (R < 0.775e1 ? -0.164233197288445195e-2 + R * 0.218077407729926921e-3 + pow(R - 0.75e1, 2) * (-0.392089332044822172e-3) + pow(R - 0.75e1, 3) * 0.226534590740457768e-3 : (R < 0.80e1 ? -0.473134868652975451e-3 + R * 0.645079774713516735e-4 + pow(R - 0.775e1, 2) * (-0.222188388989478846e-3) + pow(R - 0.775e1, 3) * 0.143089837056288675e-3 : (R < 0.825e1 ? 0.189332936112669080e-3 + R * (-0.197568725753336351e-4) + pow(R - 0.80e1, 2) * (-0.114871011197262334e-3) + pow(R - 0.80e1, 3) * 0.134161793514387491e-3 : (R < 0.85e1 ? 0.450561172782641369e-3 + R * (-0.520370418900171407e-4) + pow(R - 0.825e1, 2) * (-0.142496660614717225e-4) + pow(R - 0.825e1, 3) * 0.538863322461611308e-4 : (R < 0.875e1 ? 0.425192281339081227e-3 + R * (-0.490581876245977942e-4) + pow(R - 0.85e1, 2) * 0.261650831231491289e-4 + pow(R - 0.85e1, 3) * (-0.185555020190317335e-4) : (R < 0.90e1 ? 0.342508051148427231e-3 + R * (-0.394548026915916806e-4) + pow(R - 0.875e1, 2) * 0.122484566088753288e-4 + pow(R - 0.875e1, 3) * 0.110661581301965578e-3 : (R < 0.925e1 ? 0.103143193707319199e-3 + R * (-0.125815278930354661e-4) + pow(R - 0.90e1, 2) * 0.952446425853495122e-4 + pow(R - 0.90e1, 3) * (-0.127332039700830534e-3) : (R < 0.95e1 ? -0.112558544852535419e-3 + R * 0.111660359557335581e-4 + pow(R - 0.925e1, 2) * (-0.254387190273405097e-6) + pow(R - 0.925e1, 3) * 0.408440290935671150e-5 : (R < 0.100e2 ? -0.118577628784961774e-3 + R * 0.118046679061012391e-4 + pow(R - 0.95e1, 2) * 0.280891499174412837e-5 + pow(R - 0.95e1, 3) * (-0.772148894389321055e-5) : (R < 0.105e2 ? -0.890185689930545572e-4 + R * 0.882246618992545706e-5 + pow(R - 0.100e2, 2) * (-0.877331842409568873e-5) + pow(R - 0.100e2, 3) * (-0.181332435951045448e-5) : (R < 0.110e2 ? 0.149612086399322535e-4 + R * (-0.131084550380307173e-5) + pow(R - 0.105e2, 2) * (-0.114933049633613706e-4) + pow(R - 0.105e2, 3) * 0.115282312699350251e-4 : (R < 0.120e2 ? 0.448473579277448899e-4 + R * (-0.415797701471317177e-5) + pow(R - 0.110e2, 2) * 0.579904194154117049e-5 + pow(R - 0.110e2, 3) * (-0.214741303772799828e-5) : (R < 0.140e2 ? -0.133711504072220770e-4 + R * 0.997867755185173086e-6 + pow(R - 0.120e2, 2) * (-0.643197171642825212e-6) + pow(R - 0.120e2, 3) * 0.244932682275119317e-6 : (R < 0.160e2 ? -0.191141266455142664e-4 + R * 0.136427125591530468e-5 + pow(R - 0.140e2, 2) * 0.826398922007890902e-6 + pow(R - 0.140e2, 3) * (-0.383258052607771637e-6) : (R < 0.180e2 ? 0.182141971354226867e-5 + R * 0.707703126536082204e-7 + pow(R - 0.160e2, 2) * (-0.147314939363873892e-5) + pow(R - 0.160e2, 3) * 0.389313057530967323e-6 : (R < 0.200e2 ? 0.210184625147353031e-4 + R * (-0.115007057152973915e-5) + pow(R - 0.180e2, 2) * 0.862728951547065232e-6 + pow(R - 0.180e2, 3) * (-0.164532277941097815e-6) : (R < 0.250e2 ? -0.637744932050695631e-5 + R * 0.326457899365347838e-6 + pow(R - 0.200e2, 2) * (-0.124464716099521738e-6) + pow(R - 0.200e2, 3) * 0.108754782340904358e-7 : 0.259502489222717362e-5 + R * (-0.102528394073086942e-6) + pow(R - 0.250e2, 2) * 0.386674574118347791e-7 + pow(R - 0.250e2, 3) * (-0.381584437624347795e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.4854677338e2 * (R - 0.300e2) * (R - 0.250e2) + 0.5178332988e3 * R + 0.3042216158e5 - 0.2589166494e2 * R * R + 0.75000e3 * (0.949350672e-1 * R - 0.3926845450e1) * R) * pow(R, -6));
}

static double radcoeff_9_4_9_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.929795927399999951e-2 + pow(R - 0.475e1, 2) * (-0.814223654908702993e-1) + pow(R - 0.475e1, 3) * 0.137466701067481156e0 : (R < 0.525e1 ? 0.810378601114121466e-1 + R * (-0.149361762952824311e-1) + pow(R - 0.50e1, 2) * 0.216776603097405714e-1 + pow(R - 0.50e1, 3) * (-0.211447354584433714e-1) : (R < 0.55e1 ? 0.459728180430689498e-1 + R * (-0.806198403887027626e-2) + pow(R - 0.525e1, 2) * 0.581910871590804110e-2 + pow(R - 0.525e1, 3) * 0.657166099029227180e-2 : (R < 0.575e1 ? 0.236596201758005054e-1 + R * (-0.392024324523645561e-2) + pow(R - 0.55e1, 2) * 0.107478544586272450e-1 + pow(R - 0.55e1, 3) * (-0.416693608672568522e-2) : (R < 0.60e1 ? -0.214135089694257857e-2 + R * 0.672383467816100667e-3 + pow(R - 0.575e1, 2) * 0.762265239358298104e-2 + pow(R - 0.575e1, 3) * (-0.143226949473895335e-1) : (R < 0.625e1 ? -0.864365259583232265e-2 + R * 0.179820436197205375e-2 + pow(R - 0.60e1, 2) * (-0.311936881695916912e-2) + pow(R - 0.60e1, 3) * (-0.556223452371618250e-2) : (R < 0.65e1 ? 0.734074807415196866e-2 + R * (-0.804399019704314915e-3) + pow(R - 0.625e1, 2) * (-0.729104470974630599e-2) + pow(R - 0.625e1, 3) * 0.828725064225426314e-2 : (R < 0.675e1 ? 0.206103546575061580e-1 + R * (-0.289606187915479379e-2) + pow(R - 0.65e1, 2) * (-0.107560672805560886e-2) + pow(R - 0.65e1, 3) * 0.442816801869913568e-2 : (R < 0.70e1 ? 0.186380919208164395e-1 + R * (-0.260358373967650974e-2) + pow(R - 0.675e1, 2) * 0.224551928596874312e-2 + pow(R - 0.675e1, 3) * (-0.470807997050811007e-3) : (R < 0.725e1 ? 0.115296984964741583e-1 + R * (-0.156910059613916551e-2) + pow(R - 0.70e1, 2) * 0.189241328818063486e-2 + pow(R - 0.70e1, 3) * (-0.105239702249589019e-2) : (R < 0.75e1 ? 0.620213465630950044e-2 + R * (-0.820218393766827683e-3) + pow(R - 0.725e1, 2) * 0.110311552130871711e-2 + pow(R - 0.725e1, 3) * (-0.567845288965625281e-3) : (R < 0.775e1 ? 0.292405602645142825e-2 + R * (-0.375131624793523786e-3) + pow(R - 0.75e1, 2) * 0.677231554584498152e-3 + pow(R - 0.75e1, 3) * (-0.674508802761611078e-3) : (R < 0.80e1 ? 0.131171712856784561e-2 + R * (-0.162986248019076848e-3) + pow(R - 0.775e1, 2) * 0.171349952513289762e-3 + pow(R - 0.775e1, 3) * (-0.146887179079294343e-4) : (R < 0.825e1 ? 0.658830256191349824e-3 + R * (-0.800654063701687299e-4) + pow(R - 0.80e1, 2) * 0.160333414082342685e-3 + pow(R - 0.80e1, 3) * (-0.133804070886670891e-3) : (R < 0.85e1 ? 0.212363245029047561e-3 + R * (-0.249869626202481893e-4) + pow(R - 0.825e1, 2) * 0.599803609173395108e-4 + pow(R - 0.825e1, 3) * (-0.122747458065387008e-3) : (R < 0.875e1 ? 0.154906315947127250e-3 + R * (-0.180119305488384997e-4) + pow(R - 0.85e1, 2) * (-0.320802326317007523e-4) + pow(R - 0.85e1, 3) * 0.155763310188218975e-3 : (R < 0.90e1 ? 0.401369401154809158e-4 + R * (-0.484642620439781883e-5) + pow(R - 0.875e1, 2) * 0.847422500094634857e-4 + pow(R - 0.875e1, 3) * (-0.183170447391488842e-3) : (R < 0.925e1 ? -0.296687025688678981e-4 + R * 0.318023991442976652e-5 + pow(R - 0.90e1, 2) * (-0.526355855341531460e-4) + pow(R - 0.90e1, 3) * 0.117925651985736321e-3 : (R < 0.95e1 ? 0.779644208022154039e-5 + R * (-0.102649310532124753e-5) + pow(R - 0.925e1, 2) * 0.358086534551490949e-4 + pow(R - 0.925e1, 3) * (-0.706456477834564045e-4) : (R < 0.100e2 ? -0.353228991231245982e-4 + R * 0.363177466285522110e-5 + pow(R - 0.95e1, 2) * (-0.171755823824432119e-4) + pow(R - 0.95e1, 3) * 0.161286695534655363e-4 : (R < 0.105e2 ? 0.131900911488883815e-4 + R * (-0.144730555448883809e-5) + pow(R - 0.100e2, 2) * 0.701742194775509263e-5 + pow(R - 0.100e2, 3) * (-0.545566917195483250e-5) : (R < 0.110e2 ? -0.164570477329513621e-4 + R * 0.147836451430012974e-5 + pow(R - 0.105e2, 2) * (-0.116608181017715675e-5) + pow(R - 0.105e2, 3) * 0.130884317835379402e-5 : (R < 0.120e2 ? -0.145560190976715059e-4 + R * 0.129391508788831860e-5 + pow(R - 0.110e2, 2) * 0.797182957353534481e-6 + pow(R - 0.110e2, 3) * (-0.717000034241852992e-6) : (R < 0.140e2 ? -0.779622591843794334e-5 + R * 0.737280899869828590e-6 + pow(R - 0.120e2, 2) * (-0.135381714537202481e-5) + pow(R - 0.120e2, 3) * 0.429209302768555264e-6 : (R < 0.160e2 ? -0.607122280206149705e-5 + R * 0.472523951604392615e-6 + pow(R - 0.140e2, 2) * 0.122143867123930677e-5 + pow(R - 0.140e2, 3) * (-0.458869656645751504e-6) : (R < 0.180e2 ? 0.507447374599837002e-5 + R * (-0.148157243187398128e-6) + pow(R - 0.160e2, 2) * (-0.153177926863520257e-5) + pow(R - 0.160e2, 3) * 0.425810802239450785e-6 : (R < 0.200e2 ? 0.206668171470863699e-4 + R * (-0.116554469085479835e-5) + pow(R - 0.180e2, 2) * 0.102308554480150246e-5 + pow(R - 0.180e2, 3) * (-0.199744683012051592e-6) : (R < 0.250e2 ? -0.107469177990318411e-4 + R * 0.529861292206592060e-6 + pow(R - 0.200e2, 2) * (-0.175382553270807229e-6) + pow(R - 0.200e2, 3) * 0.148284652442977634e-7 : 0.276434250937869984e-5 + R * (-0.111829347179148001e-6) + pow(R - 0.250e2, 2) * 0.470444253936591982e-7 + pow(R - 0.250e2, 3) * (-0.475466665876591983e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.4790142557e2 * (R - 0.300e2) * (R - 0.250e2) - 0.5109519744e3 * R - 0.3001695946e5 + 0.2554759872e2 * R * R + 0.75000e3 * (-0.936717305e-1 * R + 0.3874565239e1) * R) * pow(R, -6));
}

static double radcoeff_9_4_11_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.398656069299999985e-1 + pow(R - 0.475e1, 2) * (-0.291754982443958755e0) + pow(R - 0.475e1, 3) * 0.534108496815834943e0 : (R < 0.525e1 ? 0.258637106135051587e0 + R * (-0.457321480690103116e-1) + pow(R - 0.50e1, 2) * 0.108826390167917481e0 + pow(R - 0.50e1, 3) * (-0.144327287567504903e0) : (R < 0.55e1 ? 0.119586541160783405e0 + R * (-0.183803194039587441e-1) + pow(R - 0.525e1, 2) * 0.580924492288807182e-3 + pow(R - 0.525e1, 3) * 0.666894849418470971e-2 : (R < 0.575e1 ? 0.111252155773350889e0 + R * (-0.168394293151547074e-1) + pow(R - 0.55e1, 2) * 0.558263586292733968e-2 + pow(R - 0.55e1, 3) * 0.676818927076596345e-2 : (R < 0.60e1 ? 0.883597913086789227e-1 + R * (-0.127790758954224211e-1) + pow(R - 0.575e1, 2) * 0.106587778160018125e-1 + pow(R - 0.575e1, 3) * (-0.303079506972485160e-1) : (R < 0.625e1 ? 0.906725142789336774e-1 + R * (-0.131324277431556120e-1) + pow(R - 0.60e1, 2) * (-0.120721852069345763e-1) + pow(R - 0.60e1, 3) * 0.133167291662280862e-1 : (R < 0.65e1 ? 0.112246113376719608e0 + R * (-0.166716336279551375e-1) + pow(R - 0.625e1, 2) * (-0.208463833226351248e-2) + pow(R - 0.625e1, 3) * 0.231982918883362095e-1 : (R < 0.675e1 ? 0.909804531326550286e-1 + R * (-0.133642730650238503e-1) + pow(R - 0.65e1, 2) * 0.153140805839886446e-1 + pow(R - 0.65e1, 3) * (-0.543387111957298503e-2) : (R < 0.70e1 ? 0.470449000976588608e-1 + R * (-0.672608360794946149e-2) + pow(R - 0.675e1, 2) * 0.112386772443089054e-1 + pow(R - 0.675e1, 3) * (-0.863140638604422555e-2) : (R < 0.725e1 ? 0.196058022268481083e-1 + R * (-0.272513368317830150e-2) + pow(R - 0.70e1, 2) * 0.476512245477573627e-2 + pow(R - 0.70e1, 3) * (-0.346992875065012338e-2) : (R < 0.75e1 ? 0.729277024042565558e-2 + R * (-0.993184096537331768e-3) + pow(R - 0.725e1, 2) * 0.216267589178814352e-2 + pow(R - 0.725e1, 3) * (-0.176888495375526625e-2) : (R < 0.775e1 ? 0.177775852831279385e-2 + R * (-0.243512079472372512e-3) + pow(R - 0.75e1, 2) * 0.836012176471693613e-3 + pow(R - 0.75e1, 3) * (-0.827268076888814253e-3) : (R < 0.80e1 ? -0.220340033957867518e-3 + R * 0.193812443468216149e-4 + pow(R - 0.775e1, 2) * 0.215561118805082896e-3 + pow(R - 0.775e1, 3) * (-0.751456980494773653e-4) : (R < 0.825e1 ? -0.957567543710688548e-3 + R * 0.113071985365086064e-3 + pow(R - 0.80e1, 2) * 0.159201845267974872e-3 + pow(R - 0.80e1, 3) * (-0.465195023393276418e-3) : (R < 0.85e1 ? -0.891995160540881940e-3 + R * 0.105448841112834178e-3 + pow(R - 0.825e1, 2) * (-0.189694422276982441e-3) + pow(R - 0.825e1, 3) * 0.245541764742582952e-3 : (R < 0.875e1 ? -0.485145364739406678e-3 + R * 0.566407108635772578e-4 + pow(R - 0.85e1, 2) * (-0.553809872004521375e-5) + pow(R - 0.85e1, 3) * (-0.132787469817055310e-3) : (R < 0.90e1 ? -0.245482675557496871e-3 + R * 0.289740109128567871e-4 + pow(R - 0.875e1, 2) * (-0.105128701082836710e-3) + pow(R - 0.875e1, 3) * 0.122845971805638193e-3 : (R < 0.925e1 ? 0.156428263850395851e-4 + R * (-0.556719915004398253e-6) + pow(R - 0.90e1, 2) * (-0.129942222286080449e-4) + pow(R - 0.90e1, 3) * (-0.858006607974974751e-4) : (R < 0.95e1 ? 0.222398851048762557e-3 + R * (-0.231414549288391956e-4) + pow(R - 0.925e1, 2) * (-0.773447178267311445e-4) + pow(R - 0.925e1, 3) * 0.183695940952351649e-3 : (R < 0.100e2 ? 0.260614070117768846e-3 + R * (-0.273708249136388219e-4) + pow(R - 0.95e1, 2) * 0.604272378875326055e-4 + pow(R - 0.95e1, 3) * (-0.415822678485099217e-4) : (R < 0.105e2 ? -0.218822739031134114e-4 + R * 0.186971208751134149e-5 + pow(R - 0.100e2, 2) * (-0.194616388523228509e-5) + pow(R - 0.100e2, 3) * (-0.103030834758079525e-5) : (R < 0.110e2 ? 0.605079561426866797e-5 + R * (-0.849183058406539723e-6) + pow(R - 0.105e2, 2) * (-0.349162640660347797e-5) + pow(R - 0.105e2, 3) * 0.609628785483311425e-5 : (R < 0.120e2 ? -0.594655933526300832e-5 + R * 0.231406426114818953e-6 + pow(R - 0.110e2, 2) * 0.565280537564619384e-5 + pow(R - 0.110e2, 3) * (-0.284366013276101272e-5) : (R < 0.140e2 ? -0.364329783284900172e-4 + R * 0.300603677912416805e-5 + pow(R - 0.120e2, 2) * (-0.287817502263684432e-5) + pow(R - 0.120e2, 3) * 0.635745297712380118e-6 : (R < 0.160e2 ? 0.115128752146450719e-4 + R * (-0.877719738874648024e-6) + pow(R - 0.140e2, 2) * 0.936296763637436388e-6 + pow(R - 0.140e2, 3) * (-0.200214867475056169e-6) : (R < 0.180e2 ? -0.782539498819077268e-5 + R * 0.464888905974423289e-6 + pow(R - 0.160e2, 2) * (-0.264992441212900679e-6) + pow(R - 0.160e2, 3) * 0.493484036253445121e-7 : (R < 0.200e2 ? -0.703769397851868226e-7 + R * (-0.290001537304517602e-8) + pow(R - 0.180e2, 2) * 0.310979805391664399e-7 + pow(R - 0.180e2, 3) * (-0.683101733882192605e-8) : (R < 0.250e2 ? -0.849027438155149381e-6 + R * 0.395196987177574708e-7 + pow(R - 0.200e2, 2) * (-0.988812349376511481e-8) + pow(R - 0.200e2, 3) * 0.767526495642724232e-9 : 0.326289805672342089e-7 + R * (-0.179704904668936823e-8) + pow(R - 0.250e2, 2) * 0.162477394087574701e-8 + pow(R - 0.250e2, 3) * (-0.182150839907574722e-9))))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1876270842e2 * (R - 0.300e2) * (R - 0.250e2) - 0.2001324780e3 * R - 0.1175872829e5 + 0.1000662390e2 * R * R + 0.75000e3 * (-0.3669275471e-1 * R + 0.1517770313e1) * R) * pow(R, -6));
}

static double radcoeff_9_4_11_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.321655572200000017e-1 + pow(R - 0.475e1, 2) * 0.258414634687946343e0 + pow(R - 0.475e1, 3) * (-0.462359618431785357e0) : (R < 0.525e1 ? -0.235813456030067065e0 + R * 0.425148888880134135e-1 + pow(R - 0.50e1, 2) * (-0.883550791358927168e-1) + pow(R - 0.50e1, 3) * 0.115272595455356300e0 : (R < 0.55e1 ? -0.121073892591718385e0 + R * 0.199509609679463587e-1 + pow(R - 0.525e1, 2) * (-0.190063254437549019e-2) + pow(R - 0.525e1, 3) * (-0.226308453096397307e-1) : (R < 0.575e1 ? -0.929814903611063809e-1 + R * 0.147573612002011613e-1 + pow(R - 0.55e1, 2) * (-0.188737665266052908e-1) + pow(R - 0.55e1, 3) * 0.127121647272025982e-1 : (R < 0.60e1 ? -0.534056970276817616e-1 + R * 0.770400882324900112e-2 + pow(R - 0.575e1, 2) * (-0.933964298120334123e-2) + pow(R - 0.575e1, 3) * 0.126483949768293538e-1 : (R < 0.625e1 ? -0.400023089478170057e-1 + R * 0.540576139080283478e-2 + pow(R - 0.60e1, 2) * 0.146653251418674705e-3 + pow(R - 0.60e1, 3) * 0.770633402147994934e-2 : (R < 0.65e1 ? -0.493618832426228962e-1 + R * 0.692402564553966284e-2 + pow(R - 0.625e1, 2) * 0.592640376752863723e-2 + pow(R - 0.625e1, 3) * (-0.952027621474915708e-2) : (R < 0.675e1 ? -0.567982129307503525e-1 + R * 0.810217573903851580e-2 + pow(R - 0.65e1, 2) * (-0.121380339353323015e-2) + pow(R - 0.65e1, 3) * (-0.596608285848332538e-2) : (R < 0.70e1 ? -0.453198856165673569e-1 + R * 0.637663350630627516e-2 + pow(R - 0.675e1, 2) * (-0.568836553739572506e-2) + pow(R - 0.675e1, 3) * 0.122146396868249196e-2 : (R < 0.725e1 ? -0.273502151661546636e-1 + R * 0.376147523173638032e-2 + pow(R - 0.70e1, 2) * (-0.477226756088385603e-2) + pow(R - 0.70e1, 3) * 0.232908460295333606e-2 : (R < 0.75e1 ? -0.134787194157244741e-1 + R * 0.181204481434820330e-2 + pow(R - 0.725e1, 2) * (-0.302545410866885377e-2) + pow(R - 0.725e1, 3) * 0.213208682270416353e-2 : (R < 0.775e1 ? -0.528729062783105282e-2 + R * 0.699084039270807082e-3 + pow(R - 0.75e1, 2) * (-0.142638899164073112e-2) + pow(R - 0.75e1, 3) * 0.114588589823001220e-2 : (R < 0.80e1 ? -0.149639357591640782e-2 + R * 0.200743149368568755e-3 + pow(R - 0.775e1, 2) * (-0.566974567968221970e-3) + pow(R - 0.775e1, 3) * 0.435495058295787729e-3 : (R < 0.825e1 ? 0.896308083006560838e-4 + R * (-0.108881118508201045e-5) + pow(R - 0.80e1, 2) * (-0.240353274246381146e-3) + pow(R - 0.80e1, 3) * 0.378945395626836736e-3 : (R < 0.85e1 ? 0.485805847872985757e-3 + R * (-0.502131866282406954e-4) + pow(R - 0.825e1, 2) * 0.438557724737464129e-4 + pow(R - 0.825e1, 3) * (-0.219855171363134540e-3) : (R < 0.875e1 ? 0.649118742946619334e-3 + R * (-0.695081450219552186e-4) + pow(R - 0.85e1, 2) * (-0.121035606048604499e-3) + pow(R - 0.85e1, 3) * 0.367032484705701457e-3 : (R < 0.90e1 ? 0.574657006384461547e-3 + R * (-0.612073571639384516e-4) + pow(R - 0.875e1, 2) * 0.154238757480671621e-3 + pow(R - 0.875e1, 3) * (-0.283793740259671336e-3) : (R < 0.925e1 ? 0.364690179560619066e-3 + R * (-0.372993047222910096e-4) + pow(R - 0.90e1, 2) * (-0.586065477140818738e-4) + pow(R - 0.90e1, 3) * 0.170501863212983663e-3 : (R < 0.95e1 ? 0.339032476108801922e-3 + R * (-0.346334792268975029e-4) + pow(R - 0.925e1, 2) * 0.692698496956558804e-4 + pow(R - 0.925e1, 3) * (-0.737049842722634362e-4) : (R < 0.100e2 ? 0.144465418516130124e-3 + R * (-0.138182389301189595e-4) + pow(R - 0.95e1, 2) * 0.139911114914583033e-4 + pow(R - 0.95e1, 3) * (-0.128924503984407702e-4) : (R < 0.105e2 ? 0.103133903162912341e-3 + R * (-0.949646523749123384e-5) + pow(R - 0.100e2, 2) * (-0.534756410620285113e-5) + pow(R - 0.100e2, 3) * 0.862715823437063797e-5 : (R < 0.110e2 ? 0.910859589351191087e-4 + R * (-0.837366066791610564e-5) + pow(R - 0.105e2, 2) * 0.759317324535310668e-5 + pow(R - 0.105e2, 3) * (-0.355401483504179166e-5) : (R < 0.120e2 ? 0.383357170826877691e-4 + R * (-0.344599854884434271e-5) + pow(R - 0.110e2, 2) * 0.226215099279041919e-5 + pow(R - 0.110e2, 3) * (-0.341640298946076460e-6) : (R < 0.140e2 ? -0.173634528877919467e-5 + R * 0.533825398982662290e-7 + pow(R - 0.120e2, 2) * 0.123723009595218975e-5 + pow(R - 0.120e2, 3) * (-0.413982950700661378e-6) : (R < 0.160e2 ? 0.164961833512772936e-6 + R * 0.345075152990876460e-7 + pow(R - 0.140e2, 2) * (-0.124666760825177873e-5) + pow(R - 0.140e2, 3) * 0.375238239551117469e-6 : (R < 0.180e2 ? 0.592118225151389091e-5 + R * (-0.449304043094618168e-6) + pow(R - 0.160e2, 2) * 0.100476182905492587e-5 + pow(R - 0.160e2, 3) * (-0.246288388253808333e-6) : (R < 0.200e2 ? -0.111746373677289229e-4 + R * 0.614282614079384588e-6 + pow(R - 0.180e2, 2) * (-0.472968500467924443e-6) + pow(R - 0.180e2, 3) * 0.905791549391160788e-7 : (R < 0.250e2 ? 0.375660472195840405e-5 + R * (-0.190641528522920186e-6) + pow(R - 0.200e2, 2) * 0.705064291667720694e-7 + pow(R - 0.200e2, 3) * (-0.612015145163760653e-8) : -0.139707680019950130e-5 + R * 0.554114042719800580e-7 + pow(R - 0.250e2, 2) * (-0.212958426077920219e-7) + pow(R - 0.250e2, 3) * 0.211071901867920195e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1799227152e2 * (R - 0.300e2) * (R - 0.250e2) - 0.1919178116e3 * R - 0.1127539622e5 + 0.9595890580e1 * R * R + 0.75000e3 * (-0.3518536033e-1 * R + 0.1455400288e1) * R) * pow(R, -6));
}

static double radcoeff_9_4_13_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.950830621399999937e-2 + pow(R - 0.475e1, 2) * (-0.406907244607374735e-2) + pow(R - 0.475e1, 3) * (-0.285923258317050122e-1) : (R < 0.525e1 ? 0.457852206774078258e-1 + R * (-0.739559731648156519e-2) + pow(R - 0.50e1, 2) * (-0.255133168198525065e-1) + pow(R - 0.50e1, 3) * 0.484968811111150672e-1 : (R < 0.55e1 ? 0.641817414518871254e-1 + R * (-0.110590905180737390e-1) + pow(R - 0.525e1, 2) * 0.108593440134838008e-1 + pow(R - 0.525e1, 3) * 0.584225508324461885e-2 : (R < 0.575e1 ? 0.290637140967291013e-1 + R * (-0.453399568322347332e-2) + pow(R - 0.55e1, 2) * 0.152410353259172654e-1 + pow(R - 0.55e1, 3) * (-0.185751039400934882e-1) : (R < 0.60e1 ? 0.593435017893612689e-2 + R * (-0.396310009032369882e-3) + pow(R - 0.575e1, 2) * 0.130970737084714923e-2 + pow(R - 0.575e1, 3) * 0.192001738611293216e-1 : (R < 0.625e1 ? -0.192131081001177192e-1 + R * 0.385857627535295296e-2 + pow(R - 0.60e1, 2) * 0.157098377666941395e-1 + pow(R - 0.60e1, 3) * (-0.190157822244238113e-1) : (R < 0.65e1 ? -0.453374880636284866e-1 + R * 0.814803599162055789e-2 + pow(R - 0.625e1, 2) * 0.144800109837628062e-2 + pow(R - 0.625e1, 3) * (-0.251256557154340456e-1) : (R < 0.675e1 ? -0.197236870320712937e-1 + R * 0.416097609416481422e-2 + pow(R - 0.65e1, 2) * (-0.173962406881992548e-1) + pow(R - 0.65e1, 3) * 0.810128521415999156e-2 : (R < 0.70e1 ? 0.277747537298887459e-1 + R * (-0.301815327227981413e-2) + pow(R - 0.675e1, 2) * (-0.113202767775792603e-1) + pow(R - 0.675e1, 3) * 0.129900369707940701e-1 : (R < 0.725e1 ? 0.498417509563188893e-1 + R * (-0.624265972904555592e-2) + pow(R - 0.70e1, 2) * (-0.157774904948370623e-2) + pow(R - 0.70e1, 3) * 0.470009323866371880e-2 : (R < 0.75e1 ? 0.491467316556502276e-1 + R * (-0.615026677153796171e-2) + pow(R - 0.725e1, 2) * 0.194732087951408309e-2 + pow(R - 0.725e1, 3) * 0.124296908255105238e-2 : (R < 0.775e1 ? 0.402374820320194823e-1 + R * (-0.494354962880259787e-2) + pow(R - 0.75e1, 2) * 0.287954769142737248e-2 + pow(R - 0.75e1, 3) * (-0.372914208867923731e-3) : (R < 0.80e1 ? 0.297952706337002646e-1 + R * (-0.357369719725164712e-2) + pow(R - 0.775e1, 2) * 0.259986203477642966e-2 + pow(R - 0.775e1, 3) * (-0.733593655079363958e-3) : (R < 0.825e1 ? 0.206472419535265080e-1 + R * (-0.241131499019081336e-2) + pow(R - 0.80e1, 2) * 0.204966679346690666e-2 + pow(R - 0.80e1, 3) * (-0.997098300414610370e-3) : (R < 0.85e1 ? 0.138472773775770719e-1 + R * (-0.157343752478509950e-2) + pow(R - 0.825e1, 2) * 0.130184306815594878e-2 + pow(R - 0.825e1, 3) * (-0.296396983262203957e-3) : (R < 0.875e1 ? 0.886356101888469833e-2 + R * (-0.978090425068788146e-3) + pow(R - 0.85e1, 2) * 0.107954533070929578e-2 + pow(R - 0.85e1, 3) * (-0.807095769736571218e-3) : (R < 0.90e1 ? 0.551955240602279053e-2 + R * (-0.589648216539747521e-3) + pow(R - 0.875e1, 2) * 0.474223503406867315e-3 + pow(R - 0.875e1, 3) * (-0.118000641791508510e-3) : (R < 0.925e1 ? 0.361246793264999528e-2 + R * (-0.374661585172221697e-3) + pow(R - 0.90e1, 2) * 0.385723022063235929e-3 + pow(R - 0.90e1, 3) * (-0.213507339897396213e-3) : (R < 0.95e1 ? 0.221957238493513060e-2 + R * (-0.221832700371365490e-3) + pow(R - 0.925e1, 2) * 0.225592517140188763e-3 + pow(R - 0.925e1, 3) * (-0.213727688218906704e-3) : (R < 0.100e2 ? 0.153947041035200349e-2 + R * (-0.149110383342316156e-3) + pow(R - 0.95e1, 2) * 0.652967509760087479e-4 + pow(R - 0.95e1, 3) * (-0.105917985827528303e-4) : (R < 0.105e2 ? 0.980941602883720308e-3 + R * (-0.917574813033720312e-4) + pow(R - 0.100e2, 2) * 0.494090531018795024e-4 + pow(R - 0.100e2, 3) * (-0.750106739027087069e-5) : (R < 0.110e2 ? 0.532632080864054607e-3 + R * (-0.479742287441956822e-4) + pow(R - 0.105e2, 2) * 0.381574520164731955e-4 + pow(R - 0.105e2, 3) * (-0.155966377761636490e-4) : (R < 0.120e2 ? 0.249162153618297537e-3 + R * (-0.215142550598452310e-4) + pow(R - 0.110e2, 2) * 0.147624953522277203e-4 + pow(R - 0.110e2, 3) * (-0.404426344238248929e-5) : (R < 0.140e2 ? 0.511739809964471200e-4 + R * (-0.412205468253725990e-5) + pow(R - 0.120e2, 2) * 0.262970502508025077e-5 + pow(R - 0.120e2, 3) * (-0.500272407405810377e-6) : (R < 0.160e2 ? -0.552709512229625557e-5 + R * 0.393496528914018246e-6 + pow(R - 0.140e2, 2) * (-0.371929419354611699e-6) + pow(R - 0.140e2, 3) * 0.932548271113012721e-7 : (R < 0.180e2 ? -0.370218149498989966e-6 + R * 0.248367768311868740e-7 + pow(R - 0.160e2, 2) * 0.187599543313196039e-6 + pow(R - 0.160e2, 3) * (-0.573948587518947292e-7) : (R < 0.200e2 ? -0.118885647440221702e-5 + R * 0.864966450612342811e-7 + pow(R - 0.180e2, 2) * (-0.156769609198172362e-6) + pow(R - 0.180e2, 3) * 0.327579364087776113e-7 : (R < 0.250e2 ? 0.312579257782247520e-5 + R * (-0.147486554826123779e-6) + pow(R - 0.200e2, 2) * 0.397780092544933255e-7 + pow(R - 0.200e2, 3) * (-0.316923778345371412e-8) : -0.278093383394523555e-6 + R * 0.126007039597809431e-7 + pow(R - 0.250e2, 2) * (-0.776055749731237806e-8) + pow(R - 0.250e2, 3) * 0.835129325871237887e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.5633967402e2 * (R - 0.300e2) * (R - 0.250e2) + 0.6009530148e3 * R + 0.3530741012e5 - 0.3004765074e2 * R * R + 0.75000e3 * (0.1101774251e0 * R - 0.4557375842e1) * R) * pow(R, -6));
}

static double radcoeff_9_6_11_10_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.256458843700000435e-2 + R * (-0.867361737988403547e-18) + pow(R - 0.475e1, 2) * (-0.356325139989119230e-1) + pow(R - 0.475e1, 3) * 0.661340757716476768e-1 : (R < 0.525e1 ? 0.284514902073600973e-1 + R * (-0.541611779227201950e-2) + pow(R - 0.50e1, 2) * 0.139680428298238450e-1 + pow(R - 0.50e1, 3) * (-0.226000292669430725e-1) : (R < 0.55e1 ? 0.145521588082875974e-1 + R * (-0.266960186491192351e-2) + pow(R - 0.525e1, 2) * (-0.298197912038346063e-2) + pow(R - 0.525e1, 3) * 0.873849259212461545e-2 : (R < 0.575e1 ? 0.136911961554415842e-1 + R * (-0.252212406408028810e-2) + pow(R - 0.55e1, 2) * 0.357189032371000139e-2 + pow(R - 0.55e1, 3) * (-0.801719196235539666e-2) : (R < 0.60e1 ? 0.121635210800098165e-1 + R * (-0.223940239516692450e-2) + pow(R - 0.575e1, 2) * (-0.244100364805654611e-2) + pow(R - 0.575e1, 3) * 0.101804212476969760e-1 : (R < 0.625e1 ? 0.804006447451208889e-2 + R * (-0.155107523525201477e-2) + pow(R - 0.60e1, 2) * 0.519431228771618549e-2 + pow(R - 0.60e1, 3) * (-0.306024842832504807e-3) : (R < 0.65e1 ? -0.751367568209364463e-2 + R * 0.988701250574983105e-3 + pow(R - 0.625e1, 2) * 0.496479365559180687e-2 + pow(R - 0.625e1, 3) * (-0.764434456436695504e-2) : (R < 0.675e1 ? -0.141418534052885347e-1 + R * 0.203778347255208214e-2 + pow(R - 0.65e1, 2) * (-0.768464767683409741e-3) + pow(R - 0.65e1, 3) * (-0.162440143089967676e-2) : (R < 0.70e1 ? -0.956581207371264182e-2 + R * 0.134897582041668780e-2 + pow(R - 0.675e1, 2) * (-0.198676584085816753e-2) + pow(R - 0.675e1, 3) * 0.152246276796566332e-2 : (R < 0.725e1 ? -0.471074839796816261e-2 + R * 0.641054668981166096e-3 + pow(R - 0.70e1, 2) * (-0.844918764883919931e-3) + pow(R - 0.70e1, 3) * 0.572884925437022437e-3 : (R < 0.75e1 ? -0.247053941662519648e-2 + R * 0.326011210058647796e-3 + pow(R - 0.725e1, 2) * (-0.415255070806153049e-3) + pow(R - 0.725e1, 3) * 0.272396140206247544e-3 : (R < 0.775e1 ? -0.131808722550182025e-2 + R * 0.169457950944242703e-3 + pow(R - 0.75e1, 2) * (-0.210957965651467378e-3) + pow(R - 0.75e1, 3) * 0.124676200137986530e-3 : (R < 0.80e1 ? -0.693032019153956417e-3 + R * 0.873557556443814784e-4 + pow(R - 0.775e1, 2) * (-0.117450815547977480e-3) + pow(R - 0.775e1, 3) * 0.160326341801806228e-3 : (R < 0.825e1 ? -0.468553846547451304e-3 + R * 0.586915369582314162e-4 + pow(R - 0.80e1, 2) * 0.279394080337720785e-5 + pow(R - 0.80e1, 3) * (-0.166365912305211462e-3) : (R < 0.85e1 ? -0.225156427842216066e-3 + R * 0.288948988026928575e-4 + pow(R - 0.825e1, 2) * (-0.121980493425531399e-3) + pow(R - 0.825e1, 3) * 0.817026046990398762e-4 : (R < 0.875e1 ? 0.156699965336524365e-3 + R * (-0.167761095290028650e-4) + pow(R - 0.85e1, 2) * (-0.607035399012514982e-4) + pow(R - 0.85e1, 3) * 0.117842970373051851e-3 : (R < 0.90e1 ? 0.226989154304462170e-3 + R * (-0.250323225346813904e-4) + pow(R - 0.875e1, 2) * 0.276786878785373934e-4 + pow(R - 0.875e1, 3) * 0.214833011367526842e-4 : (R < 0.925e1 ? 0.682475827554441058e-4 + R * (-0.716485963227156797e-5) + pow(R - 0.90e1, 2) * 0.437911637311019065e-4 + pow(R - 0.90e1, 3) * (-0.120073684104062529e-3) : (R < 0.95e1 ? 0.748270427861491289e-4 + R * (-0.778309353623233809e-5) + pow(R - 0.925e1, 2) * (-0.462640993469449937e-4) + pow(R - 0.925e1, 3) * 0.105154676431497393e-3 : (R < 0.100e2 ? 0.106026282900891153e-3 + R * (-0.111986413787990686e-4) + pow(R - 0.95e1, 2) * 0.326019079766780512e-4 + pow(R - 0.95e1, 3) * (-0.212497813941598185e-4) : (R < 0.105e2 ? -0.551251820897911737e-4 + R * 0.546593055225911703e-5 + pow(R - 0.100e2, 2) * 0.727235885438322551e-6 + pow(R - 0.100e2, 3) * (-0.802044546791311102e-5) : (R < 0.110e2 ? -0.420897539007362976e-6 + R * 0.177832336762605999e-6 + pow(R - 0.105e2, 2) * (-0.113034323164313447e-4) + pow(R - 0.105e2, 3) * 0.100527775738122652e-4 : (R < 0.120e2 ? 0.394121820751049335e-4 + R * (-0.358601679930953899e-5) + pow(R - 0.110e2, 2) * 0.377573404428705264e-5 + pow(R - 0.110e2, 3) * (-0.127952623897751317e-5) : (R < 0.140e2 ? -0.264628257898431378e-5 + R * 0.126872572332026152e-6 + pow(R - 0.120e2, 2) * (-0.628446726454871543e-7) + pow(R - 0.120e2, 3) * 0.686520626147370316e-7 : (R < 0.160e2 ? -0.103626896197769093e-4 + R * 0.699318633126922126e-6 + pow(R - 0.140e2, 2) * 0.349067703042935115e-6 + pow(R - 0.140e2, 3) * (-0.161496813803198082e-6) : (R < 0.180e2 ? -0.159133806216457037e-5 + R * 0.157627679660285648e-6 + pow(R - 0.160e2, 2) * (-0.619913179776253433e-6) + pow(R - 0.160e2, 3) * 0.158676424735555299e-6 : (R < 0.200e2 ? 0.755806181762515816e-5 + R * (-0.417907942618064338e-6) + pow(R - 0.180e2, 2) * 0.332145368637078360e-6 + pow(R - 0.180e2, 3) * (-0.639245518890230943e-7) : (R < 0.250e2 ? -0.285449016053943911e-5 + R * 0.143578909261971944e-6 + pow(R - 0.200e2, 2) * (-0.514019426970601861e-7) + pow(R - 0.200e2, 3) * 0.442920216253315964e-8 : 0.959843161866074542e-6 + R * (-0.382503555186429843e-7) + pow(R - 0.250e2, 2) * 0.150360897409371952e-7 + pow(R - 0.250e2, 3) * (-0.149787513624171963e-8))))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.5468167904e1 * (R - 0.300e2) * (R - 0.250e2) + 0.5832532956e2 * R + 0.3427267358e4 - 0.2916266478e1 * R * R + 0.75000e3 * (0.1069422326e-1 * R - 0.4423689555e0) * R) * pow(R, -6));
}

static double radcoeff_9_6_13_12_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? 0.139455501800000090e-1 + R * (-0.173472347597680709e-17) + pow(R - 0.475e1, 2) * (-0.806568392507606424e-1) + pow(R - 0.475e1, 3) * 0.144796534603042565e0 : (R < 0.525e1 ? 0.770622905165491978e-1 + R * (-0.131790693873098386e-1) + pow(R - 0.50e1, 2) * 0.279405617015212882e-1 + pow(R - 0.50e1, 3) * (-0.337589807051277280e-1) : (R < 0.55e1 ? 0.381686137144933851e-1 + R * (-0.553859741876064435e-2) + pow(R - 0.525e1, 2) * 0.262132617267549044e-2 + pow(R - 0.525e1, 3) * (-0.450868147853165837e-2) : (R < 0.575e1 ? 0.357029292520617131e-1 + R * (-0.507331210964758438e-2) + pow(R - 0.55e1, 2) * (-0.760184936223253448e-3) + pow(R - 0.55e1, 3) * 0.903385695525435982e-2 : (R < 0.60e1 ? 0.282424763702318581e-1 + R * (-0.375955639864901858e-2) + pow(R - 0.575e1, 2) * 0.601520778021751718e-2 + pow(R - 0.575e1, 3) * (-0.168190658304857715e-1) : (R < 0.625e1 ? 0.292314546715380583e-1 + R * (-0.390552735175634259e-2) + pow(R - 0.60e1, 2) * (-0.659909159264681060e-2) + pow(R - 0.60e1, 3) * 0.192214492668872161e-2 : (R < 0.65e1 ? 0.472186926025350701e-1 + R * (-0.684467097432561213e-2) + pow(R - 0.625e1, 2) * (-0.515748289763026928e-2) + pow(R - 0.625e1, 3) * 0.135482551477308782e-1 : (R < 0.675e1 ? 0.473579248641178424e-1 + R * (-0.688311458294120753e-2) + pow(R - 0.65e1, 2) * 0.500370846316788853e-2 + pow(R - 0.65e1, 3) * 0.100370513838776926e-2 : (R < 0.70e1 ? 0.295285091568895097e-1 + R * (-0.419306563790955693e-2) + pow(R - 0.675e1, 2) * 0.575648731695871559e-2 + pow(R - 0.675e1, 3) * (-0.370330103888195450e-2) : (R < 0.725e1 ? 0.145433025396439555e-1 + R * (-0.200919092422056520e-2) + pow(R - 0.70e1, 2) * 0.297901153779724960e-2 + pow(R - 0.70e1, 3) * (-0.192085816685995218e-2) : (R < 0.75e1 ? 0.651172709795931615e-2 + R * (-0.879846061608181547e-3) + pow(R - 0.725e1, 2) * 0.153836791265228546e-2 + pow(R - 0.725e1, 3) * (-0.116760387447823822e-2) : (R < 0.775e1 ? 0.246269455798531342e-2 + R * (-0.329587831746708455e-3) + pow(R - 0.75e1, 2) * 0.662665006793606800e-3 + pow(R - 0.75e1, 3) * (-0.452521102587091816e-3) : (R < 0.80e1 ? 0.586783304558632121e-3 + R * (-0.831030350849847971e-4) + pow(R - 0.775e1, 2) * 0.323274179853287938e-3 + pow(R - 0.775e1, 3) * (-0.291338008933394966e-3) : (R < 0.825e1 ? -0.253653921603180983e-3 + R * 0.239081781666476192e-4 + pow(R - 0.80e1, 2) * 0.104770673153241727e-3 + pow(R - 0.80e1, 3) * (-0.830576859993287952e-4) : (R < 0.85e1 ? -0.552102699601753218e-3 + R * 0.607201986183943294e-4 + pow(R - 0.825e1, 2) * 0.424774086537451273e-4 + pow(R - 0.825e1, 3) * (-0.515631293092897375e-4) : (R < 0.875e1 ? -0.648603784898088131e-3 + R * 0.722908161997750715e-4 + pow(R - 0.85e1, 2) * 0.380506167177782335e-5 + pow(R - 0.85e1, 3) * (-0.646156079635123824e-4) : (R < 0.90e1 ? -0.560012750416922318e-3 + R * 0.620779205425054043e-4 + pow(R - 0.875e1, 2) * (-0.446566443008564694e-4) + pow(R - 0.875e1, 3) * (-0.269986487566604888e-4) : (R < 0.925e1 ? -0.316710525444829948e-3 + R * 0.346873517502033275e-4 + pow(R - 0.90e1, 2) * (-0.649056308683518377e-4) + pow(R - 0.90e1, 3) * 0.124109257390154018e-3 : (R < 0.95e1 ? -0.233891370747301986e-3 + R * 0.255050220766812972e-4 + pow(R - 0.925e1, 2) * 0.281763121742636926e-4 + pow(R - 0.925e1, 3) * (-0.149891114563955523e-3) : (R < 0.100e2 ? -0.101316334912179048e-3 + R * 0.114885941830714796e-4 + pow(R - 0.95e1, 2) * (-0.842420237487029528e-4) + pow(R - 0.95e1, 3) * 0.815499723331199861e-4 : (R < 0.105e2 ? 0.118612350680914831e-3 + R * (-0.115909503157914836e-4) + pow(R - 0.100e2, 2) * 0.380829347509770331e-4 + pow(R - 0.100e2, 3) * (-0.357718300547881348e-4) : (R < 0.110e2 ? 0.549395240800830895e-5 + R * (-0.336888105905553238e-6) + pow(R - 0.105e2, 2) * (-0.155748103312051724e-4) + pow(R - 0.105e2, 3) * 0.150930298380325517e-4 : (R < 0.120e2 ? 0.502922960349494081e-4 + R * (-0.459192605858630975e-5) + pow(R - 0.110e2, 2) * 0.706473442584365766e-5 + pow(R - 0.110e2, 3) * (-0.258767899695734782e-5) : (R < 0.140e2 ? -0.216278308659475337e-4 + R * 0.177450580222896126e-5 + pow(R - 0.120e2, 2) * (-0.698302565028386337e-6) + pow(R - 0.120e2, 3) * 0.933253229445281074e-8 : (R < 0.160e2 ? 0.131906973484161040e-4 + R * (-0.906714070351150364e-6) + pow(R - 0.140e2, 2) * (-0.642307371261669473e-6) + pow(R - 0.140e2, 3) * 0.281299042718622253e-6 : (R < 0.180e2 ? -0.298842366102306070e-7 + R * (-0.100355042774360585e-6) + pow(R - 0.160e2, 2) * 0.104548688505006426e-5 + pow(R - 0.160e2, 3) * (-0.278766555206441991e-6) : (R < 0.200e2 ? -0.131395489368746638e-4 + R * 0.736393834948592439e-6 + pow(R - 0.180e2, 2) * (-0.627112446188587691e-6) + pow(R - 0.180e2, 3) * 0.121923031107145730e-6 : (R < 0.250e2 ? 0.623485375660019122e-5 + R * (-0.308979576520009569e-6) + pow(R - 0.200e2, 2) * 0.104425740454286687e-6 + pow(R - 0.200e2, 3) * (-0.887534852365695389e-8) : -0.172907792921464278e-5 + R * 0.696266887485857077e-7 + pow(R - 0.250e2, 2) * (-0.287044874005676213e-7) + pow(R - 0.250e2, 3) * 0.288899045737009541e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.1768391238e2 * (R - 0.300e2) * (R - 0.250e2) + 0.1886285180e3 * R + 0.1108188558e5 - 0.9431425900e1 * R * R + 0.75000e3 * (0.3458181908e-1 * R - 0.1430428753e1) * R) * pow(R, -6));
}

static double radcoeff_9_10_1_0_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.378858389199999971e-4 + pow(R - 0.475e1, 2) * (-0.447261042331009284e-2) + pow(R - 0.475e1, 3) * 0.115058929585203709e-1 : (R < 0.525e1 ? 0.257106996762384112e-3 + R * (-0.789502819324768164e-4) + pow(R - 0.50e1, 2) * 0.415680929558018535e-2 + pow(R - 0.50e1, 3) * (-0.761410091460111224e-2) : (R < 0.55e1 ? -0.301855656210201287e-2 + R * 0.571810444369907260e-3 + pow(R - 0.525e1, 2) * (-0.155376639037064905e-2) + pow(R - 0.525e1, 3) * 0.184634806180407882e-2 : (R < 0.575e1 ? -0.718006638250661398e-3 + R * 0.141117510772847531e-3 + pow(R - 0.55e1, 2) * (-0.169005344017589927e-3) + pow(R - 0.55e1, 3) * 0.225694554930479848e-2 : (R < 0.60e1 ? -0.264068375433753949e-2 + R * 0.479792129258702473e-3 + pow(R - 0.575e1, 2) * 0.152370381796100920e-2 + pow(R - 0.575e1, 3) * (-0.543547145198327621e-2) : (R < 0.625e1 ? -0.108658757755405577e-2 + R * 0.222493140992342624e-3 + pow(R - 0.60e1, 2) * (-0.255289977102644838e-2) + pow(R - 0.60e1, 3) * 0.274673212422831079e-2 : (R < 0.65e1 ? 0.355575895257545776e-2 + R * (-0.538944471228073240e-3) + pow(R - 0.625e1, 2) * (-0.492850677855215073e-3) + pow(R - 0.625e1, 3) * 0.175739676627003076e-2 : (R < 0.675e1 ? 0.301235250385032457e-2 + R * (-0.455857916480049941e-3) + pow(R - 0.65e1, 2) * 0.825196896847307944e-3 + pow(R - 0.65e1, 3) * 0.321991544131567265e-3 : (R < 0.70e1 ? -0.123601647117842477e-3 + R * 0.171139464682729608e-4 + pow(R - 0.675e1, 2) * 0.106669055494598339e-2 + pow(R - 0.675e1, 3) * (-0.296068518535630085e-2) : (R < 0.725e1 ? 0.492881700112921670e-4 + R * (-0.466924831304173791e-5) + pow(R - 0.70e1, 2) * (-0.115382333407124224e-2) + pow(R - 0.70e1, 3) * 0.266921202993363653e-2 : (R < 0.75e1 ? 0.573030132416767852e-3 + R * (-0.811036597361059142e-4) + pow(R - 0.725e1, 2) * 0.848085688378985374e-3 + pow(R - 0.725e1, 3) * (-0.152353658660224663e-2) : (R < 0.775e1 ? -0.435617777736991305e-3 + R * 0.572760744654655034e-4 + pow(R - 0.75e1, 2) * (-0.294566751572699595e-3) + pow(R - 0.75e1, 3) * 0.487623028603350228e-3 : (R < 0.80e1 ? -0.135401409833901191e-4 + R * 0.142201654224388638e-5 + pow(R - 0.775e1, 2) * 0.711505198798131167e-4 + pow(R - 0.775e1, 3) * (-0.190876517443154629e-3) : (R < 0.825e1 ? -0.103629824307715544e-4 + R * 0.120792946155894428e-5 + pow(R - 0.80e1, 2) * (-0.720068682025528750e-4) + pow(R - 0.80e1, 3) * 0.191344333777268387e-3 : (R < 0.85e1 ? -0.108310914540427303e-4 + R * 0.108155794352033102e-5 + pow(R - 0.825e1, 2) * 0.715013821303984152e-4 + pow(R - 0.825e1, 3) * (-0.220081523009918939e-3) : (R < 0.875e1 ? 0.370730243744422252e-4 + R * (-0.443303655564026235e-5) + pow(R - 0.85e1, 2) * (-0.935597601270407955e-4) + pow(R - 0.85e1, 3) * 0.252853628086407360e-3 : (R < 0.90e1 ? 0.296623442823936993e-4 + R * (-0.380286135295928009e-5) + pow(R - 0.875e1, 2) * 0.960804609377647381e-4 + pow(R - 0.875e1, 3) * (-0.204528050583710469e-3) : (R < 0.925e1 ? -0.547493665592963853e-4 + R * 0.588835963147737593e-5 + pow(R - 0.90e1, 2) * (-0.573155770000181207e-4) + pow(R - 0.90e1, 3) * 0.994410050964344766e-4 : (R < 0.95e1 ? 0.358387259937895314e-4 + R * (-0.412424041295021924e-5) + pow(R - 0.925e1, 2) * 0.172651768223077401e-4 + pow(R - 0.925e1, 3) * 0.452700549397255597e-5 : (R < 0.100e2 ? -0.530847844360733033e-4 + R * 0.535716152832350594e-5 + pow(R - 0.95e1, 2) * 0.206604309427871573e-4 + pow(R - 0.95e1, 3) * (-0.377911665828683401e-4) : (R < 0.105e2 ? 0.241858674200058860e-4 + R * (-0.232578246604058851e-5) + pow(R - 0.100e2, 2) * (-0.360263189315153495e-4) + pow(R - 0.100e2, 3) * 0.465378058951930457e-4 : (R < 0.110e2 ? 0.327876407806920465e-4 + R * (-0.344874697616114702e-5) + pow(R - 0.105e2, 2) * 0.337803899112742258e-4 + pow(R - 0.105e2, 3) * (-0.310744719099038621e-4) : (R < 0.120e2 ? -0.778714664973370163e-4 + R * 0.702578900268518216e-5 + pow(R - 0.110e2, 2) * (-0.128313179535815657e-4) + pow(R - 0.110e2, 3) * 0.554288623029638290e-5 : (R < 0.140e2 ? 0.232478283746655911e-4 + R * (-0.200818821358879930e-5) + pow(R - 0.120e2, 2) * 0.379734073730758552e-5 + pow(R - 0.120e2, 3) * (-0.105196577850659283e-5) : (R < 0.160e2 ? -0.589936540387397090e-5 + R * 0.557585393562426511e-6 + pow(R - 0.140e2, 2) * (-0.251445393373197188e-5) + pow(R - 0.140e2, 3) * 0.702541000225379179e-6 : (R < 0.180e2 ? 0.157003265785745762e-4 + R * (-0.106973833866091106e-5) + pow(R - 0.160e2, 2) * 0.170079206762030320e-5 + pow(R - 0.160e2, 3) * (-0.404116267769923838e-6) : (R < 0.200e2 ? -0.158973503233618795e-4 + R * 0.884034718581215556e-6 + pow(R - 0.180e2, 2) * (-0.723905538999239833e-6) + pow(R - 0.180e2, 3) * 0.139948011954316013e-6 : (R < 0.250e2 ? 0.665153186717902830e-5 + R * (-0.332211293963951406e-6) + pow(R - 0.200e2, 2) * 0.115782532726656339e-6 + pow(R - 0.200e2, 3) * (-0.991424504437320959e-8) : -0.204960916866552950e-5 + R * 0.820456549746211838e-7 + pow(R - 0.250e2, 2) * (-0.329311429389418101e-7) + pow(R - 0.250e2, 3) * 0.329556563920351445e-8)))))))))))))))))))))))))))) : -0.4000000000e-2 * (-0.2337916128e1 * (R - 0.300e2) * (R - 0.250e2) + 0.2493780368e2 * R + 0.1465119072e4 - 0.1246890184e1 * R * R + 0.75000e3 * (0.457197469e-2 * R - 0.1891140987e0) * R) * pow(R, -6));
}

static double radcoeff_9_12_3_2_0(double R) {
    return (R < 0.300e2 ? (R < 0.50e1 ? -0.408494794500000006e-4 + pow(R - 0.475e1, 2) * (-0.801062241657671432e-2) + pow(R - 0.475e1, 3) * 0.195080961559068594e-1 : (R < 0.525e1 ? 0.150101651717910725e-2 + R * (-0.347543179055821456e-3) + pow(R - 0.50e1, 2) * 0.662044970035342937e-2 + pow(R - 0.50e1, 3) * (-0.105545984773205738e-1) : (R < 0.55e1 ? -0.523911856511224960e-2 + R * 0.983694456623285642e-3 + pow(R - 0.525e1, 2) * (-0.129549915763700119e-2) + pow(R - 0.525e1, 3) * 0.254148336617543609e-2 : (R < 0.575e1 ? -0.433865862269473476e-2 + R * 0.812473008962679094e-3 + pow(R - 0.55e1, 2) * 0.610613366994575764e-3 + pow(R - 0.55e1, 3) * (-0.142695217811678096e-4) : (R < 0.60e1 ? -0.604084735047448820e-2 + R * 0.111510415712599798e-2 + pow(R - 0.575e1, 2) * 0.599911225658699906e-3 + pow(R - 0.575e1, 3) * (-0.734360853025076664e-2) : (R < 0.625e1 ? 0.343729137400022866e-3 + R * 0.381331705333295187e-4 + pow(R - 0.60e1, 2) * (-0.490779517202937551e-2) + pow(R - 0.60e1, 3) * 0.556327859318423053e-2 : (R < 0.65e1 ? 0.894131097837071870e-2 + R * (-0.137264967925931490e-2) + pow(R - 0.625e1, 2) * (-0.735336227141202285e-3) + pow(R - 0.625e1, 3) * 0.297459697351384628e-2 : (R < 0.675e1 ? 0.770638321861445187e-2 + R * (-0.118258086029606954e-2) + pow(R - 0.65e1, 2) * 0.149561150299418275e-2 + pow(R - 0.65e1, 3) * 0.489213753196038499e-2 : (R < 0.70e1 ? -0.336300179999425792e-2 + R * 0.482500678443593804e-3 + pow(R - 0.675e1, 2) * 0.516471465196447193e-2 + pow(R - 0.675e1, 3) * (-0.154349508901553863e-1) : (R < 0.725e1 ? -0.109950648042186168e-2 + R * 0.170804712521694518e-3 + pow(R - 0.70e1, 2) * (-0.641149851565206864e-2) + pow(R - 0.70e1, 3) * 0.138027354814611609e-1 : (R < 0.75e1 ? 0.319403117838519719e-2 + R * (-0.446931642530372028e-3) + pow(R - 0.725e1, 2) * 0.394055309544380245e-2 + pow(R - 0.725e1, 3) * (-0.687269854160925744e-2) : (R < 0.775e1 ? -0.177941195163845082e-2 + R * 0.234713928639793454e-3 + pow(R - 0.75e1, 2) * (-0.121397081076314041e-2) + pow(R - 0.75e1, 3) * 0.191099738577586633e-2 : (R < 0.80e1 ? 0.101793022340213981e-3 + R * (-0.139594669088018028e-4) + pow(R - 0.775e1, 2) * 0.219277228568759332e-3 + pow(R - 0.775e1, 3) * (-0.407467552534208444e-3) : (R < 0.825e1 ? -0.156776416856310176e-3 + R * 0.192789812754137734e-4 + pow(R - 0.80e1, 2) * (-0.863234358318970140e-4) + pow(R - 0.80e1, 3) * 0.122065537640967666e-3 : (R < 0.85e1 ? 0.699968669803967154e-5 + R * (-0.995448332853293600e-6) + pow(R - 0.825e1, 2) * 0.522571739882874340e-5 + pow(R - 0.825e1, 3) * 0.371021998071377251e-4 : (R < 0.875e1 ? -0.734349139801949015e-4 + R * 0.857407283039940029e-5 + pow(R - 0.85e1, 2) * 0.330523672541820364e-4 + pow(R - 0.85e1, 3) * (-0.132982549631118554e-3) : (R < 0.90e1 ? 0.123395386512744987e-6 + R * 0.166028401655686280e-6 + pow(R - 0.875e1, 2) * (-0.666845449691568789e-4) + pow(R - 0.875e1, 3) * 0.124201827402136496e-3 : (R < 0.925e1 ? 0.883861334987994212e-4 + R * (-0.988840144502215680e-5) + pow(R - 0.90e1, 2) * 0.264668255824455032e-4 + pow(R - 0.90e1, 3) * 0.870667844817250055e-5 : (R < 0.95e1 ? -0.473333618039046891e-4 + R * 0.497751355523293949e-5 + pow(R - 0.925e1, 2) * 0.329968344185748786e-4 + pow(R - 0.925e1, 3) * (-0.656326298860265275e-4) : (R < 0.100e2 ? -0.861234109986588279e-4 + R * 0.916981266089040234e-5 + pow(R - 0.95e1, 2) * (-0.162276379959450204e-4) + pow(R - 0.95e1, 3) * 0.312533187792842887e-5 : (R < 0.105e2 ? 0.490467368620829653e-4 + R * (-0.471382642660829630e-5) + pow(R - 0.100e2, 2) * (-0.115396401790523769e-4) + pow(R - 0.100e2, 3) * 0.187213056725379397e-4 : (R < 0.110e2 ? 0.222379297352008054e-4 + R * (-0.221248735125721972e-5) + pow(R - 0.105e2, 2) * 0.165423183297545326e-4 + pow(R - 0.105e2, 3) * (-0.166891447600801867e-4) : (R < 0.120e2 ? -0.199926911340089111e-4 + R * 0.181297240843717373e-5 + pow(R - 0.110e2, 2) * (-0.849139881036574740e-5) + pow(R - 0.110e2, 3) * 0.410526852792857360e-5 : (R < 0.140e2 ? 0.316250830271032010e-4 + R * (-0.285401962850859983e-5) + pow(R - 0.120e2, 2) * 0.382440677341997341e-5 + pow(R - 0.120e2, 3) * (-0.892413146082836711e-6) : (R < 0.160e2 ? -0.244579658176815442e-4 + R * 0.173464971217725308e-5 + pow(R - 0.140e2, 2) * (-0.153007210307704685e-5) + pow(R - 0.140e2, 3) * 0.330784871006710131e-6 : (R < 0.180e2 ? 0.648194410170660201e-5 + R * (-0.416220248050412652e-6) + pow(R - 0.160e2, 2) * 0.454637122963213934e-6 + pow(R - 0.160e2, 3) * (-0.101217674881503796e-6) : (R < 0.200e2 ? -0.338010388443915498e-5 + R * 0.187716145224397485e-6 + pow(R - 0.180e2, 2) * (-0.152668926325808813e-6) + pow(R - 0.180e2, 3) * 0.294846816318050351e-7 : (R < 0.250e2 ? 0.138228837774354666e-5 + R * (-0.691433804971773319e-7) + pow(R - 0.200e2, 2) * 0.242391634650214009e-7 + pow(R - 0.200e2, 3) * (-0.207843392751718654e-8) : -0.434264028731191635e-6 + R * 0.173657095892476660e-7 + pow(R - 0.250e2, 2) * (-0.693734544773640002e-8) + pow(R - 0.250e2, 3) * 0.693540316377373307e-9)))))))))))))))))))))))))))) : -0.4000000000e-2 * (0.1853543040e0 * (R - 0.300e2) * (R - 0.250e2) - 0.1977555588e1 * R - 0.1160002254e3 + 0.9887777940e-1 * R * R + 0.75000e3 * (-0.3622067810e-3 * R + 0.1497748398e-1) * R) * pow(R, -6));
}
