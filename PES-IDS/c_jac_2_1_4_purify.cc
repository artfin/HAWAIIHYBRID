#include "c_jac_2_1_4_purify.h"

extern "C" void evpoly_jac_2_1_4_purify(Eigen::Ref<Eigen::MatrixXd> jac, double* y) 
{
    assert(jac.cols() == 17);

    jac(1, 0) = 1;
    jac(2, 0) = 1;
    jac(1, 1) = y[2];
    jac(2, 1) = y[1];
    jac(0, 2) = y[2] + y[1];
    jac(1, 2) = y[0];
    jac(2, 2) = y[0];
    jac(1, 3) = 2*y[1];
    jac(2, 3) = 2*y[2];
    jac(0, 4) = y[1]*y[2];
    jac(1, 4) = y[0]*y[2];
    jac(2, 4) = y[0]*y[1];
    jac(1, 5) = y[2]*y[2] + 2*y[1]*y[2];
    jac(2, 5) = y[1]*2*y[2] + y[1]*y[1];
    jac(0, 6) = y[2]*y[2] + y[1]*y[1];
    jac(1, 6) = y[0]*2*y[1];
    jac(2, 6) = y[0]*2*y[2];
    jac(0, 7) = 2*y[0]*y[2] + 2*y[0]*y[1];
    jac(1, 7) = y[0]*y[0];
    jac(2, 7) = y[0]*y[0];
    jac(1, 8) = 3*y[1]*y[1];
    jac(2, 8) = 3*y[2]*y[2];
    jac(0, 9) = y[1]*y[2]*y[2] + y[1]*y[1]*y[2];
    jac(1, 9) = y[0]*y[2]*y[2] + y[0]*2*y[1]*y[2];
    jac(2, 9) = y[0]*y[1]*2*y[2] + y[0]*y[1]*y[1];
    jac(0, 10) = 2*y[0]*y[1]*y[2];
    jac(1, 10) = y[0]*y[0]*y[2];
    jac(2, 10) = y[0]*y[0]*y[1];
    jac(1, 11) = 2*y[1]*y[2]*y[2];
    jac(2, 11) = y[1]*y[1]*2*y[2];
    jac(1, 12) = y[2]*y[2]*y[2] + 3*y[1]*y[1]*y[2];
    jac(2, 12) = y[1]*3*y[2]*y[2] + y[1]*y[1]*y[1];
    jac(0, 13) = y[2]*y[2]*y[2] + y[1]*y[1]*y[1];
    jac(1, 13) = y[0]*3*y[1]*y[1];
    jac(2, 13) = y[0]*3*y[2]*y[2];
    jac(0, 14) = 2*y[0]*y[2]*y[2] + 2*y[0]*y[1]*y[1];
    jac(1, 14) = y[0]*y[0]*2*y[1];
    jac(2, 14) = y[0]*y[0]*2*y[2];
    jac(0, 15) = 3*y[0]*y[0]*y[2] + 3*y[0]*y[0]*y[1];
    jac(1, 15) = y[0]*y[0]*y[0];
    jac(2, 15) = y[0]*y[0]*y[0];
    jac(1, 16) = 4*y[1]*y[1]*y[1];
    jac(2, 16) = 4*y[2]*y[2]*y[2];
}
