/**
 * @page input_reference Input File Description 
 * @tableofcontents
 *
 * This section provides an overview of the input file format, including its structures, features, and supported data types.
 * The format uses `&SECTION_NAME` and `&END` delimiters to define sections containing case-insensitive key-value pairs (assigned with `=`) or function calls. 
 * Comments are indicated with  exclamation marks `!` throughout the input file. The input file parser enforces type safety, requiring each key to have a value of the 
 * expected type; any type mismatch triggers an error message and terminates program execution.
 *
 * Supported data types include integers, floating-point values, boolean values, strings and arrays.  Underscores may be used in integers for readability (e.g., `1\_000\_000`). 
 * For floating point values the scientific notation may be used (e.g., `1e2` instead of `100`). The arrays are denoted with curly braces `{<array members>}`. Examples:
 * \code{.txt} 
 *   HEP_M0_NPOINTS = 1_000_000 ! integer with optional underscores
 *   PAIR_REDUCED_MASS = 3.00092e+04 ! floating-point number using scientific notation
 *   USE_ZIMMERMANN_TRICK = true ! boolean value
 *   CALCULATION_TYPE = CORRELATION_SINGLE ! plain string (no quotation marks)
 *   CF_FILENAME = "example.txt" ! double-quoted string
 *   TEMPERATURES = {100.0, 200.0, 300.0} ! an array of floating-point values
 *   CF_FILENAMES = {"example1.txt", "example2.txt"} ! an array of double-quoted strings
 * \endcode
 *
 * `&INPUT` section provides overall control of the calculation, for example, calculation type, pair state, reduced mass, paths to dynamic libraries containing potential energy 
 * and induced dipole functions, and output files. The available input parameters are described in Section @ref input_block. 
 *
 * `&MONOMER` section specifies the types of interacting monomers through the `MONOMER_TYPE` field along with their molecular constants such as inertia tensor values and 
 * centrifugal constant. The available paramters are listed in Section @ref monomer_block. 
 *
 * `&PROCESSING` section configures the data pipeline using a stack machine model, where each command manipulates the implicit data stack. Unlike the `&INPUT` and `&MONOMER` sections, 
 * the `&PROCESSING` section also contains an order-sensitive sequence of commands that execute sequentially, consuming inputs from the top of the stack and pushing the results back 
 * for subsequent commands. A typical pipeline begins with loading data using `READ_CF`, which pushes a correlation function onto the stack. Then `CF_TO_SF` consumes the correlation 
 * function and pushes corresponding spectral function. Commands like `COMPUTE_Mn_CLASSICAL_DETAILED_BALANCE` and `COMPUTE_Mn_QUANTUM_DETAILED_BALANCE` consume the spectral function, 
 * requiring the user to first call `DUP()` to preserve the original spectral function if further commands will be operating on it. By the end of the processing script, the stack must 
 * be empty, ensuring all data has been processed or saved. The detailed description for each function is provided in Section @ref processing_block. 
 *
 * List of available variables and functions in the input file:
 *
 * <table>
 * <tr><th>Number</th><th>Variable of Function Name</th></tr>
 * <tr><td>#1 </td><td>@ref subsec_calculation_type </td></tr>
 * <tr><td>#2 </td><td>@ref subsec_pair_state</td></tr>
 * <tr><td>#3 </td><td>@ref subsec_pair_reduced_mass</td></tr>
 * <tr><td>#4 </td><td>@ref subsec_so_potential</td></tr>
 * <tr><td>#5a</td><td>@ref subsec_so_dipole</td></tr>
 * <tr><td>#5b</td><td>@ref subsec_so_dipole_1</td></tr>
 * <tr><td>#5c</td><td>@ref subsec_so_dipole_2</td></tr>
 * <tr><td>#6 </td><td>@ref subsec_temperature</td></tr> 
 * <tr><td>#7 </td><td>@ref subsec_temperatures</td></tr> 
 * <tr><td>#8 </td><td>@ref subsec_satellite_temperatures</td></tr>
 * <tr><td>#9 </td><td>`TOTAL_TRAJECTORIES`</td></tr>
 * <tr><td>#10</td><td>`CVODE_TOLERANCE`</td></tr>
 * <tr><td>#11</td><td>`SAMPLING_TIME`</td></tr>
 * <tr><td>#12</td><td>`MaxTrajectoryLength`</td></tr>
 * <tr><td>#13</td><td>`SAMPLER_RMIN`</td></tr>
 * <tr><td>#14</td><td>`SAMPLER_RMAX`</td></tr>
 * <tr><td>#15</td><td>`PESMIN`</td></tr>
 * <tr><td>#16</td><td>`INITIALM0_NPOINTS`</td></tr>
 * <tr><td>#17</td><td>`INITIALM2_NPOINTS`</td></tr>
 * <tr><td>#18</td><td>`HEP_M0_NPOINTS`</td></tr>
 * <tr><td>#19</td><td>`HEP_M0_NITERATIONS`</td></tr>
 * <tr><td>#20</td><td>`HEP_M2_NPOINTS`</td></tr>
 * <tr><td>#21</td><td>`HEP_M2_NITERATIONS`</td></tr>
 * <tr><td>#22</td><td>`HEP_PPF_NITERATIONS`</td></tr>
 * <tr><td>#23</td><td>`HEP_PPF_NPOINTS`</td></tr>
 * <tr><td>#24</td><td>`SF_FILENAME`</td></tr>
 * <tr><td>#25</td><td>`CF_FILENAME`</td></tr>
 * <tr><td>#26</td><td>`CF_FILENAMES`</td></tr>
 * <tr><td>#27</td><td>`R0`</td></tr>
 * <tr><td>#28</td><td>`RCUT`</td></tr>
 * <tr><td>#29</td><td>`PARTIAL_PARTITION_FUNCTION_RATIO`</td></tr>
 * <tr><td>#30</td><td>`PARTIAL_PARTITION_FUNCTION_RATIOS`</td></tr>
 * <tr><td>#31</td><td>`ApproximateFrequencyMax`</td></tr>
 * <tr><td>#32</td><td>`ODD_J_SPIN_WEIGHT`</td></tr>
 * <tr><td>#33</td><td>`EVEN_J_SPIN_WEIGHT`</td></tr>
 * <tr><td>#34</td><td>`USE_ZIMMERMANN_TRICK`</td></tr>
 * <tr><td>#35</td><td>`AVERAGE_TIME_BETWEEN_COLLISIONS`</td></tr>
 * <tr><td>#36</td><td>`MONOMER_TYPE`</td></tr>
 * <tr><td>#37</td><td>`DJ`</td></tr>
 * <tr><td>#38</td><td>`II`</td></tr>
 * <tr><td>#39</td><td>`INITIAL_J`</td></tr>
 * <tr><td>#40</td><td>`TORQUE_CACHE_LEN`</td></tr>
 * <tr><td>#41</td><td>`TORQUE_LIMIT`</td></tr>
 * <tr><td>#42</td><td>`NSWITCH_HISTOGRAM_BINS`</td></tr>
 * <tr><td>#43</td><td>`NSWITCH_HISTOGRAM_MAX`</td></tr>
 * <tr><td>#44</td><td>`NSWITCH_HISTOGRAM_FILENAME`</td></tr>
 * <tr><td>#45</td><td>`JINI_HISTOGRAM_BINS`</td></tr>
 * <tr><td>#46</td><td>`JINI_HISTOGRAM_MAX`</td></tr>
 * <tr><td>#47</td><td>`JINI_HISTOGRAM_FILENAME`</td></tr>
 * <tr><td>#48</td><td>`JFIN_HISTOGRAM_BINS`</td></tr>
 * <tr><td>#49</td><td>`JFIN_HISTOGRAM_MAX`</td></tr>
 * <tr><td>#50</td><td>`JFIN_HISTOGRAM_FILENAME`</td></tr>
 * <tr><td>#51</td><td>`SPECTRUM_FREQUENCY_MAX`</td></tr>
 * <tr><td>#52</td><td>@ref subsec_read_cf</td></tr>
 * <tr><td>#53</td><td>@ref subsec_read_sf</td></tr>
 * <tr><td>#54</td><td>@ref subsec_read_spectrum</td></tr>
 * <tr><td>#55</td><td>@ref subsec_cf_to_sf</td></tr>
 * <tr><td>#56</td><td>@ref subsec_cmp</td></tr>
 * <tr><td>#57</td><td>@ref subsec_dup</td></tr>
 * <tr><td>#58</td><td>@ref subsec_dup2</td></tr>
 * <tr><td>#59</td><td>@ref subsec_drop</td></tr>
 * <tr><td>#60</td><td>@ref subsec_drop2</td></tr>
 * <tr><td>#61</td><td>@ref subsec_fit_baseline</td></tr>
 * <tr><td>#62</td><td>@ref subsec_average_cfs</td></tr>
 * <tr><td>#63</td><td>@ref subsec_compute_mn_classical_detailed_balance</td></tr>
 * <tr><td>#64</td><td>@ref subsec_compute_mn_quantum_detailed_balance</td></tr>
 * <tr><td>#65</td><td>@ref subsec_compute_mn_quantum_detailed_balance</td></tr>
 * <tr><td>#66</td><td>@ref subsec_int3</td></tr>
 * <tr><td>#67</td><td>@ref subsec_alpha</td></tr>
 * <tr><td>#68</td><td>@ref subsec_d1</td></tr>
 * <tr><td>#69</td><td>@ref subsec_d2</td></tr>
 * <tr><td>#70</td><td>@ref subsec_d3</td></tr>
 * <tr><td>#71</td><td>@ref subsec_d4</td></tr>
 * <tr><td>#72</td><td>@ref subsec_d4a</td></tr>
 * <tr><td>#73</td><td>@ref subsec_add_spectra</td></tr>
 * <tr><td>#74</td><td>@ref subsec_smooth</td></tr>
 * <tr><td>#75</td><td>@ref subsec_write_cf</td></tr>
 * <tr><td>#76</td><td>@ref subsec_write_sf</td></tr>
 * <tr><td>#77</td><td>@ref subsec_write_spectrum</td></tr>
 * </table>            
 *
 *
 ****************************************************************************************
 * @section input_block Input Block
 ****************************************************************************************
 *
 * @subsection subsec_calculation_type `CALCULATION_TYPE` 
 * The program performs calculations based on the specified `CALCULATION_TYPE`. 
 * This field is required and expected to be a plain string (no quotation marks). 
 * Note that there is no default value - the field must be explicitly provided. 
 * Supported calculation types:
 *   - `PR_MU` 
 *   - `CORRELATION_SINGLE` 
 *   - `CORRELATION_ARRAY` 
 *   - `PROCESSING` 
 *   - `CALCULATE_PHASE_SPACE_M0`
 *   - `CALCULATE_PHASE_SPACE_M2`
 *
 * @subsection subsec_pair_state `PAIR_STATE` 
 * The pair state is specified using the keyword `PAIR_STATE` as a plain string 
 * (no quotation marks). This field is required, no default value is implied. 
 * This parameter is applicable for all calculation types except for `CALCULATION_PROCESSING`, 
 * where it's ignored. Available pair states: 
 *   - `FREE_AND_METASTABLE`
 *   - `BOUND`
 *   - `ALL`
 *
 * @subsection subsec_pair_reduced_mass `PAIR_REDUCED_MASS` 
 * The reduced mass for a pair is specified as a floating-point number. This parameter is 
 * applicable for all calculation types except for `CALCULATION_PROCESSING`.
 *
 * @subsection subsec_so_potential `SO_POTENTIAL`
 * `SO_POTENTIAL` specifies a double-quoted string path to a dynamic library containing the 
 * required symbols `double pes_lab(double* )` and `void dpes_lab(double*, double*)`. Missing symbols 
 * trigger immediate termination. Functions `pes_lab` and `dpes_lab` operate on laboratory-frame 
 * coordinates and compute the potential energy and its derivative (outputted through the second pointer), respectively. 
 * If present, a symbol `void pes_init(void)` will be executed before any calls `pes_lab` and 
 * `dpes_lab` will be issued, enabling library initialization (e.g., loading the parameters from file).
 * 
 * @subsection subsec_so_dipole `SO_DIPOLE` 
 * `SO_DIPOLE` specifies a double-quoted string path to a dynamic library implementing the required symbol 
 * `void dipole_lab(double *, double [3])`, which computes laboratory-frame dipole moment components 
 * from input coordinates in the laboratory frame of reference. Missing symbol trigger immediate termination. 
 * The loaded function is assigned to `dipole_1` and `dipole_2`, enabling calculation of 
 * autocorrelation functions. if present, a symbol `void dipole_init(void)` will be executed before 
 * any calls `dipole_lab` will be issued, enabling library initialization. This setting  is equivalent
 *  to assigning the same path to both `SO_DIPOLE.1` and `SO_DIPOLE.2`.
 *  
 * @subsection subsec_so_dipole_1 `SO_DIPOLE.1` 
 * `SO_DIPOLE.1`, `SO_DIPOLE.2` specify independent paths to dipole function implementations as dynamic libraries. 
 * The required and optional symbols match those mentioned in @ref subsec_so_dipole. 
 * Setting these paths to different dynamic libraries enables the calculation of mixed correlation correlation.
 *
 * @subsection subsec_so_dipole_2 `SO_DIPOLE.2` 
 *
 * @subsection subsec_temperature `TEMPERATURE` 
 *
 * @subsection subsec_temperatures `TEMPERATURES` 
 *
 * @subsection subsec_satellite_temperatures `SATELLITE_TEMPERATURES` 
 *
 ****************************************************************************************
 * @section monomer_block Monomer Block 
 ****************************************************************************************
 * 
 ****************************************************************************************
 * @section processing_block Processing Block
 ****************************************************************************************
 *   
 * @subsection subsec_read_cf `READ_CF` 
 * (See @ref execute_read_cf)
 * @copybrief execute_read_cf
 * @copydetails execute_read_cf
 *
 * @subsection subsec_read_sf `READ_SF` 
 * (See @ref execute_read_sf)
 * @copybrief execute_read_sf
 * @copydetails execute_read_sf
 *
 * @subsection subsec_read_spectrum `READ_SPECTRUM`  
 * (See @ref execute_read_spectrum)
 * @copybrief execute_read_spectrum
 * @copydetails execute_read_spectrum
 *
 * @subsection subsec_cf_to_sf `CF_TO_SF` 
 * (See @ref execute_cf_to_sf)
 * @copybrief execute_cf_to_sf 
 * @copydetails execute_cf_to_sf 
 * 
 * @subsection subsec_cmp `CMP` 
 * (See @ref execute_cmp)
 * @copybrief execute_cmp 
 * @copydetails execute_cmp 
 * 
 * @subsection subsec_dup `DUP` 
 * (See @ref execute_dup)
 * @copybrief execute_dup 
 * @copydetails execute_dup
 *
 * @subsection subsec_dup2 `DUP2` 
 * (See @ref execute_dup2)
 * @copybrief execute_dup2
 * @copydetails execute_dup2
 *
 * @subsection subsec_drop `DROP` 
 * (See @ref execute_drop)
 * @copybrief execute_drop 
 * @copydetails execute_drop
 *
 * @subsection subsec_drop2 `DROP2` 
 * (See @ref execute_drop2)
 * @copybrief execute_drop2 
 * @copydetails execute_drop2
 *
 * @subsection subsec_fit_baseline `FIT_BASELINE` 
 * (See @ref execute_fit_baseline)
 * @copybrief execute_fit_baseline 
 * @copydetails execute_fit_baseline
 *
 * @subsection subsec_average_cfs `AVERAGE_CFS` 
 * (See @ref execute_average_cfs)
 * @copybrief execute_average_cfs 
 * @copydetails execute_average_cfs
 *
 * @subsection subsec_compute_mn_classical_detailed_balance `COMPUTE_Mn_CLASSICAL_DETAILED_BALANCE` 
 * (See @ref execute_compute_mn_classical_detailed_balance)
 * @copybrief execute_compute_mn_classical_detailed_balance
 * @copydetails execute_compute_mn_classical_detailed_balance
 *
 * @subsection subsec_compute_mn_quantum_detailed_balance `COMPUTE_Mn_QUANTUM_DETAILED_BALANCE` 
 * (See @ref execute_compute_mn_quantum_detailed_balance)
 * @copybrief execute_compute_mn_quantum_detailed_balance
 * @copydetails execute_compute_mn_quantum_detailed_balance
 *
 * @subsection subsec_int3 `INT3` 
 * (See @ref execute_int3)
 * @copybrief execute_int3
 * @copydetails execute_int3
 *
 * @subsection subsec_alpha `ALPHA` 
 * (See @ref execute_alpha)
 * @copybrief execute_alpha
 * @copydetails execute_alpha
 *
 * @subsection subsec_add_spectra `ADD_SPECTRA` 
 * (See @ref execute_add_spectra)
 * @copybrief execute_add_spectra
 * @copydetails execute_add_spectra
 *
 * @subsection subsec_smooth `SMOOTH` 
 * (See @ref execute_smooth)
 * @copybrief execute_smooth
 * @copydetails execute_smooth
 *
 * @subsection subsec_d1 `D1` 
 * (See @ref execute_D1)
 * @copybrief execute_D1
 * @copydetails execute_D1
 *
 * @subsection subsec_d2 `D2` 
 * (See @ref execute_D2)
 * @copybrief execute_D2
 * @copydetails execute_D2
 *
 * @subsection subsec_d3 `D3` 
 * (See @ref execute_D3)
 * @copybrief execute_D3
 * @copydetails execute_D3
 *
 * @subsection subsec_d4 `D4` 
 * (See @ref execute_D4)
 * @copybrief execute_D4
 * @copydetails execute_D4
 *
 * @subsection subsec_d4a `D4a` 
 * (See @ref execute_D4a)
 * @copybrief execute_D4a
 * @copydetails execute_D4a
 *
 * @subsection subsec_write_cf `WRITE_CF` 
 * @copybrief execute_write_cf
 * @copydetails execute_write_cf
 *
 * @subsection subsec_write_sf `WRITE_SF` 
 * (See @ref execute_write_sf)
 * @copybrief execute_write_sf
 * @copydetails execute_write_sf
 *
 * @subsection subsec_write_spectrum `WRITE_SPECTRUM` 
 * (See @ref execute_write_spectrum)
 * @copybrief execute_write_spectrum
 * @copydetails execute_write_spectrum
 */
